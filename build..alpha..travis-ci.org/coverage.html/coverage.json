{"/home/travis/build/npmtest/node-npmtest-eslint/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_eslint */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - init-after","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - init-after","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-eslint/lib.npmtest_eslint.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/lib.npmtest_eslint.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":51}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":57}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_eslint */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_eslint = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_eslint = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-eslint/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":50}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":64},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-eslint && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_eslint */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_eslint","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // init-after","    // run browser js-env code - init-after","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_eslint.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_eslint.rollup.js'] =","            local.assetsDict['/assets.npmtest_eslint.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_eslint.__dirname + '/lib.npmtest_eslint.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/api.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/api.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":13,"column":2}}},"branchMap":{},"code":["/**"," * @fileoverview Expose out ESLint and CLI to require."," * @author Ian Christian Myers"," */","","\"use strict\";","","module.exports = {","    linter: require(\"./eslint\"),","    CLIEngine: require(\"./cli-engine\"),","    RuleTester: require(\"./testers/rule-tester\"),","    SourceCode: require(\"./util/source-code\")","};",""],"l":{"8":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/eslint.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/eslint.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":1,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1,"135":0,"136":0,"137":0,"138":0,"139":0,"140":1,"141":0,"142":0,"143":0,"144":0,"145":0,"146":1,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":1,"173":1,"174":0,"175":0,"176":0,"177":0,"178":0,"179":1,"180":0,"181":0,"182":0,"183":0,"184":1,"185":1,"186":0,"187":0,"188":0,"189":0,"190":0,"191":1,"192":0,"193":0,"194":0,"195":1,"196":1,"197":1,"198":1,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":1,"215":0,"216":0,"217":0,"218":0,"219":0,"220":1,"221":0,"222":0,"223":0,"224":1,"225":1,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":1,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":1,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":1,"342":0,"343":1,"344":1,"345":17,"346":17,"347":0,"348":0,"349":0,"350":1,"351":0,"352":1,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":1,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":1,"381":0,"382":0,"383":0,"384":1,"385":0,"386":1,"387":0,"388":0,"389":1,"390":0,"391":1,"392":0,"393":1,"394":1,"395":0,"396":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0,0,0,0,0,0,0],"28":[0,0],"29":[0,0,0],"30":[0,0],"31":[0,0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0,0],"78":[0,0],"79":[0,0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"fnMap":{"1":{"name":"parseBooleanConfig","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":45}}},"2":{"name":"parseJsonConfig","line":91,"loc":{"start":{"line":91,"column":0},"end":{"line":91,"column":53}}},"3":{"name":"parseListConfig","line":138,"loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":33}}},"4":{"name":"addDeclaredGlobals","line":163,"loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":58}}},"5":{"name":"disableReporting","line":253,"loc":{"start":{"line":253,"column":0},"end":{"line":253,"column":66}}},"6":{"name":"enableReporting","line":280,"loc":{"start":{"line":280,"column":0},"end":{"line":280,"column":64}}},"7":{"name":"modifyConfigsFromComments","line":321,"loc":{"start":{"line":321,"column":0},"end":{"line":321,"column":85}}},"8":{"name":"isDisabledByReportingConfig","line":408,"loc":{"start":{"line":408,"column":0},"end":{"line":408,"column":72}}},"9":{"name":"normalizeEcmaVersion","line":430,"loc":{"start":{"line":430,"column":0},"end":{"line":430,"column":53}}},"10":{"name":"prepareConfig","line":451,"loc":{"start":{"line":451,"column":0},"end":{"line":451,"column":31}}},"11":{"name":"createStubRule","line":514,"loc":{"start":{"line":514,"column":0},"end":{"line":514,"column":33}}},"12":{"name":"createRuleModule","line":521,"loc":{"start":{"line":521,"column":4},"end":{"line":521,"column":39}}},"13":{"name":"(anonymous_13)","line":523,"loc":{"start":{"line":523,"column":19},"end":{"line":523,"column":26}}},"14":{"name":"getRuleReplacementMessage","line":541,"loc":{"start":{"line":541,"column":0},"end":{"line":541,"column":43}}},"15":{"name":"findEslintEnv","line":558,"loc":{"start":{"line":558,"column":0},"end":{"line":558,"column":29}}},"16":{"name":"stripUnicodeBOM","line":576,"loc":{"start":{"line":576,"column":0},"end":{"line":576,"column":31}}},"17":{"name":"(anonymous_17)","line":597,"loc":{"start":{"line":597,"column":18},"end":{"line":597,"column":29}}},"18":{"name":"parse","line":620,"loc":{"start":{"line":620,"column":4},"end":{"line":620,"column":43}}},"19":{"name":"getRuleSeverity","line":693,"loc":{"start":{"line":693,"column":4},"end":{"line":693,"column":41}}},"20":{"name":"getRuleOptions","line":708,"loc":{"start":{"line":708,"column":4},"end":{"line":708,"column":40}}},"21":{"name":"(anonymous_21)","line":723,"loc":{"start":{"line":723,"column":16},"end":{"line":723,"column":27}}},"22":{"name":"(anonymous_22)","line":758,"loc":{"start":{"line":758,"column":17},"end":{"line":758,"column":82}}},"23":{"name":"(anonymous_23)","line":927,"loc":{"start":{"line":927,"column":21},"end":{"line":927,"column":36}}},"24":{"name":"(anonymous_24)","line":931,"loc":{"start":{"line":931,"column":21},"end":{"line":931,"column":28}}},"25":{"name":"(anonymous_25)","line":966,"loc":{"start":{"line":966,"column":17},"end":{"line":966,"column":86}}},"26":{"name":"(anonymous_26)","line":1035,"loc":{"start":{"line":1035,"column":24},"end":{"line":1035,"column":35}}},"27":{"name":"(anonymous_27)","line":1065,"loc":{"start":{"line":1065,"column":26},"end":{"line":1065,"column":50}}},"28":{"name":"(anonymous_28)","line":1077,"loc":{"start":{"line":1077,"column":23},"end":{"line":1077,"column":34}}},"29":{"name":"(anonymous_29)","line":1085,"loc":{"start":{"line":1085,"column":19},"end":{"line":1085,"column":30}}},"30":{"name":"(anonymous_30)","line":1131,"loc":{"start":{"line":1131,"column":29},"end":{"line":1131,"column":44}}},"31":{"name":"(anonymous_31)","line":1162,"loc":{"start":{"line":1162,"column":22},"end":{"line":1162,"column":33}}},"32":{"name":"(anonymous_32)","line":1176,"loc":{"start":{"line":1176,"column":40},"end":{"line":1176,"column":69}}},"33":{"name":"(anonymous_33)","line":1185,"loc":{"start":{"line":1185,"column":22},"end":{"line":1185,"column":46}}},"34":{"name":"(anonymous_34)","line":1195,"loc":{"start":{"line":1195,"column":19},"end":{"line":1195,"column":30}}},"35":{"name":"(anonymous_35)","line":1203,"loc":{"start":{"line":1203,"column":19},"end":{"line":1203,"column":30}}},"36":{"name":"(anonymous_36)","line":1228,"loc":{"start":{"line":1228,"column":31},"end":{"line":1228,"column":46}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":31,"column":37}},"2":{"start":{"line":57,"column":0},"end":{"line":82,"column":1}},"3":{"start":{"line":58,"column":4},"end":{"line":58,"column":21}},"4":{"start":{"line":61,"column":4},"end":{"line":61,"column":51}},"5":{"start":{"line":63,"column":4},"end":{"line":80,"column":7}},"6":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"7":{"start":{"line":65,"column":12},"end":{"line":65,"column":19}},"8":{"start":{"line":67,"column":8},"end":{"line":67,"column":38}},"9":{"start":{"line":68,"column":8},"end":{"line":68,"column":18}},"10":{"start":{"line":70,"column":8},"end":{"line":73,"column":9}},"11":{"start":{"line":71,"column":12},"end":{"line":71,"column":57}},"12":{"start":{"line":72,"column":12},"end":{"line":72,"column":42}},"13":{"start":{"line":75,"column":8},"end":{"line":78,"column":10}},"14":{"start":{"line":81,"column":4},"end":{"line":81,"column":17}},"15":{"start":{"line":91,"column":0},"end":{"line":131,"column":1}},"16":{"start":{"line":92,"column":4},"end":{"line":92,"column":19}},"17":{"start":{"line":95,"column":4},"end":{"line":108,"column":5}},"18":{"start":{"line":96,"column":8},"end":{"line":96,"column":51}},"19":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"20":{"start":{"line":103,"column":12},"end":{"line":103,"column":25}},"21":{"start":{"line":112,"column":4},"end":{"line":112,"column":15}},"22":{"start":{"line":113,"column":4},"end":{"line":113,"column":98}},"23":{"start":{"line":114,"column":4},"end":{"line":128,"column":5}},"24":{"start":{"line":115,"column":8},"end":{"line":115,"column":42}},"25":{"start":{"line":118,"column":8},"end":{"line":126,"column":11}},"26":{"start":{"line":130,"column":4},"end":{"line":130,"column":17}},"27":{"start":{"line":138,"column":0},"end":{"line":152,"column":1}},"28":{"start":{"line":139,"column":4},"end":{"line":139,"column":21}},"29":{"start":{"line":142,"column":4},"end":{"line":142,"column":45}},"30":{"start":{"line":144,"column":4},"end":{"line":150,"column":7}},"31":{"start":{"line":145,"column":8},"end":{"line":145,"column":27}},"32":{"start":{"line":146,"column":8},"end":{"line":148,"column":9}},"33":{"start":{"line":147,"column":12},"end":{"line":147,"column":19}},"34":{"start":{"line":149,"column":8},"end":{"line":149,"column":27}},"35":{"start":{"line":151,"column":4},"end":{"line":151,"column":17}},"36":{"start":{"line":163,"column":0},"end":{"line":243,"column":1}},"37":{"start":{"line":164,"column":4},"end":{"line":167,"column":46}},"38":{"start":{"line":169,"column":4},"end":{"line":169,"column":44}},"39":{"start":{"line":171,"column":4},"end":{"line":180,"column":7}},"40":{"start":{"line":172,"column":8},"end":{"line":179,"column":9}},"41":{"start":{"line":173,"column":12},"end":{"line":174,"column":56}},"42":{"start":{"line":176,"column":12},"end":{"line":178,"column":13}},"43":{"start":{"line":177,"column":16},"end":{"line":177,"column":67}},"44":{"start":{"line":182,"column":4},"end":{"line":182,"column":52}},"45":{"start":{"line":183,"column":4},"end":{"line":183,"column":51}},"46":{"start":{"line":184,"column":4},"end":{"line":184,"column":54}},"47":{"start":{"line":186,"column":4},"end":{"line":196,"column":7}},"48":{"start":{"line":187,"column":8},"end":{"line":187,"column":49}},"49":{"start":{"line":189,"column":8},"end":{"line":194,"column":9}},"50":{"start":{"line":190,"column":12},"end":{"line":190,"column":62}},"51":{"start":{"line":191,"column":12},"end":{"line":191,"column":50}},"52":{"start":{"line":192,"column":12},"end":{"line":192,"column":49}},"53":{"start":{"line":193,"column":12},"end":{"line":193,"column":48}},"54":{"start":{"line":195,"column":8},"end":{"line":195,"column":51}},"55":{"start":{"line":198,"column":4},"end":{"line":209,"column":7}},"56":{"start":{"line":199,"column":8},"end":{"line":199,"column":49}},"57":{"start":{"line":201,"column":8},"end":{"line":207,"column":9}},"58":{"start":{"line":202,"column":12},"end":{"line":202,"column":62}},"59":{"start":{"line":203,"column":12},"end":{"line":203,"column":49}},"60":{"start":{"line":204,"column":12},"end":{"line":204,"column":81}},"61":{"start":{"line":205,"column":12},"end":{"line":205,"column":49}},"62":{"start":{"line":206,"column":12},"end":{"line":206,"column":48}},"63":{"start":{"line":208,"column":8},"end":{"line":208,"column":57}},"64":{"start":{"line":212,"column":4},"end":{"line":218,"column":7}},"65":{"start":{"line":213,"column":8},"end":{"line":213,"column":51}},"66":{"start":{"line":215,"column":8},"end":{"line":217,"column":9}},"67":{"start":{"line":216,"column":12},"end":{"line":216,"column":39}},"68":{"start":{"line":225,"column":4},"end":{"line":242,"column":7}},"69":{"start":{"line":226,"column":8},"end":{"line":226,"column":47}},"70":{"start":{"line":227,"column":8},"end":{"line":227,"column":51}},"71":{"start":{"line":229,"column":8},"end":{"line":239,"column":9}},"72":{"start":{"line":235,"column":12},"end":{"line":235,"column":42}},"73":{"start":{"line":236,"column":12},"end":{"line":236,"column":48}},"74":{"start":{"line":238,"column":12},"end":{"line":238,"column":25}},"75":{"start":{"line":241,"column":8},"end":{"line":241,"column":20}},"76":{"start":{"line":253,"column":0},"end":{"line":270,"column":1}},"77":{"start":{"line":255,"column":4},"end":{"line":269,"column":5}},"78":{"start":{"line":256,"column":8},"end":{"line":262,"column":11}},"79":{"start":{"line":257,"column":12},"end":{"line":261,"column":15}},"80":{"start":{"line":264,"column":8},"end":{"line":268,"column":11}},"81":{"start":{"line":280,"column":0},"end":{"line":308,"column":1}},"82":{"start":{"line":281,"column":4},"end":{"line":281,"column":10}},"83":{"start":{"line":283,"column":4},"end":{"line":307,"column":5}},"84":{"start":{"line":284,"column":8},"end":{"line":291,"column":11}},"85":{"start":{"line":285,"column":12},"end":{"line":290,"column":13}},"86":{"start":{"line":286,"column":16},"end":{"line":289,"column":17}},"87":{"start":{"line":287,"column":20},"end":{"line":287,"column":51}},"88":{"start":{"line":288,"column":20},"end":{"line":288,"column":26}},"89":{"start":{"line":295,"column":8},"end":{"line":295,"column":22}},"90":{"start":{"line":297,"column":8},"end":{"line":306,"column":9}},"91":{"start":{"line":298,"column":12},"end":{"line":300,"column":13}},"92":{"start":{"line":299,"column":16},"end":{"line":299,"column":22}},"93":{"start":{"line":302,"column":12},"end":{"line":305,"column":13}},"94":{"start":{"line":303,"column":16},"end":{"line":303,"column":47}},"95":{"start":{"line":304,"column":16},"end":{"line":304,"column":53}},"96":{"start":{"line":321,"column":0},"end":{"line":399,"column":1}},"97":{"start":{"line":323,"column":4},"end":{"line":328,"column":6}},"98":{"start":{"line":329,"column":4},"end":{"line":329,"column":28}},"99":{"start":{"line":331,"column":4},"end":{"line":386,"column":7}},"100":{"start":{"line":333,"column":8},"end":{"line":333,"column":41}},"101":{"start":{"line":334,"column":8},"end":{"line":334,"column":81}},"102":{"start":{"line":336,"column":8},"end":{"line":385,"column":9}},"103":{"start":{"line":337,"column":12},"end":{"line":337,"column":67}},"104":{"start":{"line":339,"column":12},"end":{"line":384,"column":13}},"105":{"start":{"line":340,"column":16},"end":{"line":375,"column":17}},"106":{"start":{"line":342,"column":24},"end":{"line":342,"column":98}},"107":{"start":{"line":343,"column":24},"end":{"line":343,"column":30}},"108":{"start":{"line":347,"column":24},"end":{"line":347,"column":100}},"109":{"start":{"line":348,"column":24},"end":{"line":348,"column":30}},"110":{"start":{"line":351,"column":24},"end":{"line":351,"column":81}},"111":{"start":{"line":352,"column":24},"end":{"line":352,"column":30}},"112":{"start":{"line":355,"column":24},"end":{"line":355,"column":114}},"113":{"start":{"line":356,"column":24},"end":{"line":356,"column":30}},"114":{"start":{"line":359,"column":24},"end":{"line":359,"column":113}},"115":{"start":{"line":360,"column":24},"end":{"line":360,"column":30}},"116":{"start":{"line":363,"column":24},"end":{"line":363,"column":84}},"117":{"start":{"line":365,"column":24},"end":{"line":370,"column":27}},"118":{"start":{"line":366,"column":28},"end":{"line":366,"column":58}},"119":{"start":{"line":368,"column":28},"end":{"line":368,"column":121}},"120":{"start":{"line":369,"column":28},"end":{"line":369,"column":59}},"121":{"start":{"line":371,"column":24},"end":{"line":371,"column":30}},"122":{"start":{"line":377,"column":16},"end":{"line":383,"column":17}},"123":{"start":{"line":378,"column":20},"end":{"line":378,"column":136}},"124":{"start":{"line":379,"column":20},"end":{"line":379,"column":107}},"125":{"start":{"line":380,"column":23},"end":{"line":383,"column":17}},"126":{"start":{"line":381,"column":20},"end":{"line":381,"column":110}},"127":{"start":{"line":382,"column":20},"end":{"line":382,"column":128}},"128":{"start":{"line":389,"column":4},"end":{"line":395,"column":7}},"129":{"start":{"line":390,"column":8},"end":{"line":390,"column":43}},"130":{"start":{"line":392,"column":8},"end":{"line":394,"column":9}},"131":{"start":{"line":393,"column":12},"end":{"line":393,"column":64}},"132":{"start":{"line":396,"column":4},"end":{"line":396,"column":53}},"133":{"start":{"line":398,"column":4},"end":{"line":398,"column":50}},"134":{"start":{"line":408,"column":0},"end":{"line":422,"column":1}},"135":{"start":{"line":410,"column":4},"end":{"line":419,"column":5}},"136":{"start":{"line":412,"column":8},"end":{"line":412,"column":42}},"137":{"start":{"line":414,"column":8},"end":{"line":418,"column":9}},"138":{"start":{"line":417,"column":12},"end":{"line":417,"column":24}},"139":{"start":{"line":421,"column":4},"end":{"line":421,"column":17}},"140":{"start":{"line":430,"column":0},"end":{"line":444,"column":1}},"141":{"start":{"line":433,"column":4},"end":{"line":435,"column":5}},"142":{"start":{"line":434,"column":8},"end":{"line":434,"column":24}},"143":{"start":{"line":439,"column":4},"end":{"line":441,"column":5}},"144":{"start":{"line":440,"column":8},"end":{"line":440,"column":28}},"145":{"start":{"line":443,"column":4},"end":{"line":443,"column":23}},"146":{"start":{"line":451,"column":0},"end":{"line":507,"column":1}},"147":{"start":{"line":453,"column":4},"end":{"line":453,"column":59}},"148":{"start":{"line":454,"column":4},"end":{"line":454,"column":25}},"149":{"start":{"line":456,"column":4},"end":{"line":456,"column":27}},"150":{"start":{"line":457,"column":4},"end":{"line":457,"column":27}},"151":{"start":{"line":459,"column":4},"end":{"line":472,"column":5}},"152":{"start":{"line":460,"column":8},"end":{"line":471,"column":11}},"153":{"start":{"line":461,"column":12},"end":{"line":461,"column":41}},"154":{"start":{"line":463,"column":12},"end":{"line":465,"column":13}},"155":{"start":{"line":464,"column":16},"end":{"line":464,"column":67}},"156":{"start":{"line":466,"column":12},"end":{"line":470,"column":13}},"157":{"start":{"line":467,"column":16},"end":{"line":467,"column":46}},"158":{"start":{"line":469,"column":16},"end":{"line":469,"column":38}},"159":{"start":{"line":475,"column":4},"end":{"line":483,"column":5}},"160":{"start":{"line":476,"column":8},"end":{"line":482,"column":11}},"161":{"start":{"line":477,"column":12},"end":{"line":477,"column":50}},"162":{"start":{"line":479,"column":12},"end":{"line":481,"column":13}},"163":{"start":{"line":480,"column":16},"end":{"line":480,"column":82}},"164":{"start":{"line":485,"column":4},"end":{"line":492,"column":6}},"165":{"start":{"line":493,"column":4},"end":{"line":493,"column":74}},"166":{"start":{"line":495,"column":4},"end":{"line":502,"column":5}},"167":{"start":{"line":496,"column":8},"end":{"line":498,"column":9}},"168":{"start":{"line":497,"column":12},"end":{"line":497,"column":59}},"169":{"start":{"line":501,"column":8},"end":{"line":501,"column":71}},"170":{"start":{"line":504,"column":4},"end":{"line":504,"column":120}},"171":{"start":{"line":506,"column":4},"end":{"line":506,"column":26}},"172":{"start":{"line":514,"column":0},"end":{"line":534,"column":1}},"173":{"start":{"line":521,"column":4},"end":{"line":527,"column":5}},"174":{"start":{"line":522,"column":8},"end":{"line":526,"column":10}},"175":{"start":{"line":524,"column":16},"end":{"line":524,"column":46}},"176":{"start":{"line":529,"column":4},"end":{"line":531,"column":5}},"177":{"start":{"line":530,"column":8},"end":{"line":530,"column":32}},"178":{"start":{"line":532,"column":4},"end":{"line":532,"column":54}},"179":{"start":{"line":541,"column":0},"end":{"line":549,"column":1}},"180":{"start":{"line":542,"column":4},"end":{"line":546,"column":5}},"181":{"start":{"line":543,"column":8},"end":{"line":543,"column":52}},"182":{"start":{"line":545,"column":8},"end":{"line":545,"column":86}},"183":{"start":{"line":548,"column":4},"end":{"line":548,"column":16}},"184":{"start":{"line":551,"column":0},"end":{"line":551,"column":57}},"185":{"start":{"line":558,"column":0},"end":{"line":568,"column":1}},"186":{"start":{"line":559,"column":4},"end":{"line":559,"column":20}},"187":{"start":{"line":561,"column":4},"end":{"line":561,"column":35}},"188":{"start":{"line":563,"column":4},"end":{"line":565,"column":5}},"189":{"start":{"line":564,"column":8},"end":{"line":564,"column":68}},"190":{"start":{"line":567,"column":4},"end":{"line":567,"column":16}},"191":{"start":{"line":576,"column":0},"end":{"line":587,"column":1}},"192":{"start":{"line":583,"column":4},"end":{"line":585,"column":5}},"193":{"start":{"line":584,"column":8},"end":{"line":584,"column":29}},"194":{"start":{"line":586,"column":4},"end":{"line":586,"column":16}},"195":{"start":{"line":597,"column":0},"end":{"line":1234,"column":5}},"196":{"start":{"line":599,"column":4},"end":{"line":599,"column":50}},"197":{"start":{"line":600,"column":4},"end":{"line":607,"column":26}},"198":{"start":{"line":620,"column":4},"end":{"line":685,"column":5}},"199":{"start":{"line":622,"column":8},"end":{"line":631,"column":14}},"200":{"start":{"line":633,"column":8},"end":{"line":647,"column":9}},"201":{"start":{"line":634,"column":12},"end":{"line":634,"column":44}},"202":{"start":{"line":636,"column":12},"end":{"line":644,"column":15}},"203":{"start":{"line":646,"column":12},"end":{"line":646,"column":24}},"204":{"start":{"line":650,"column":8},"end":{"line":652,"column":9}},"205":{"start":{"line":651,"column":12},"end":{"line":651,"column":83}},"206":{"start":{"line":660,"column":8},"end":{"line":684,"column":9}},"207":{"start":{"line":661,"column":12},"end":{"line":663,"column":13}},"208":{"start":{"line":662,"column":16},"end":{"line":662,"column":66}},"209":{"start":{"line":664,"column":12},"end":{"line":664,"column":53}},"210":{"start":{"line":669,"column":12},"end":{"line":669,"column":73}},"211":{"start":{"line":670,"column":12},"end":{"line":670,"column":99}},"212":{"start":{"line":672,"column":12},"end":{"line":681,"column":15}},"213":{"start":{"line":683,"column":12},"end":{"line":683,"column":24}},"214":{"start":{"line":693,"column":4},"end":{"line":701,"column":5}},"215":{"start":{"line":694,"column":8},"end":{"line":698,"column":9}},"216":{"start":{"line":695,"column":12},"end":{"line":695,"column":30}},"217":{"start":{"line":696,"column":15},"end":{"line":698,"column":9}},"218":{"start":{"line":697,"column":12},"end":{"line":697,"column":33}},"219":{"start":{"line":699,"column":8},"end":{"line":699,"column":17}},"220":{"start":{"line":708,"column":4},"end":{"line":714,"column":5}},"221":{"start":{"line":709,"column":8},"end":{"line":711,"column":9}},"222":{"start":{"line":710,"column":12},"end":{"line":710,"column":39}},"223":{"start":{"line":712,"column":8},"end":{"line":712,"column":18}},"224":{"start":{"line":717,"column":4},"end":{"line":717,"column":27}},"225":{"start":{"line":723,"column":4},"end":{"line":732,"column":6}},"226":{"start":{"line":724,"column":8},"end":{"line":724,"column":34}},"227":{"start":{"line":725,"column":8},"end":{"line":725,"column":22}},"228":{"start":{"line":726,"column":8},"end":{"line":726,"column":29}},"229":{"start":{"line":727,"column":8},"end":{"line":727,"column":29}},"230":{"start":{"line":728,"column":8},"end":{"line":728,"column":28}},"231":{"start":{"line":729,"column":8},"end":{"line":729,"column":25}},"232":{"start":{"line":730,"column":8},"end":{"line":730,"column":29}},"233":{"start":{"line":731,"column":8},"end":{"line":731,"column":26}},"234":{"start":{"line":758,"column":4},"end":{"line":949,"column":6}},"235":{"start":{"line":759,"column":8},"end":{"line":759,"column":86}},"236":{"start":{"line":760,"column":8},"end":{"line":763,"column":30}},"237":{"start":{"line":766,"column":8},"end":{"line":772,"column":9}},"238":{"start":{"line":767,"column":12},"end":{"line":767,"column":57}},"239":{"start":{"line":768,"column":12},"end":{"line":768,"column":68}},"240":{"start":{"line":769,"column":12},"end":{"line":769,"column":52}},"241":{"start":{"line":771,"column":12},"end":{"line":771,"column":48}},"242":{"start":{"line":774,"column":8},"end":{"line":776,"column":9}},"243":{"start":{"line":775,"column":12},"end":{"line":775,"column":25}},"244":{"start":{"line":779,"column":8},"end":{"line":779,"column":71}},"245":{"start":{"line":781,"column":8},"end":{"line":781,"column":43}},"246":{"start":{"line":783,"column":8},"end":{"line":789,"column":9}},"247":{"start":{"line":784,"column":12},"end":{"line":788,"column":13}},"248":{"start":{"line":785,"column":16},"end":{"line":785,"column":70}},"249":{"start":{"line":787,"column":16},"end":{"line":787,"column":39}},"250":{"start":{"line":792,"column":8},"end":{"line":792,"column":39}},"251":{"start":{"line":795,"column":8},"end":{"line":827,"column":9}},"252":{"start":{"line":798,"column":12},"end":{"line":801,"column":13}},"253":{"start":{"line":799,"column":16},"end":{"line":799,"column":66}},"254":{"start":{"line":800,"column":16},"end":{"line":800,"column":32}},"255":{"start":{"line":803,"column":12},"end":{"line":810,"column":14}},"256":{"start":{"line":805,"column":20},"end":{"line":805,"column":39}},"257":{"start":{"line":806,"column":20},"end":{"line":806,"column":43}},"258":{"start":{"line":813,"column":12},"end":{"line":818,"column":13}},"259":{"start":{"line":814,"column":16},"end":{"line":814,"column":38}},"260":{"start":{"line":816,"column":16},"end":{"line":816,"column":34}},"261":{"start":{"line":817,"column":16},"end":{"line":817,"column":35}},"262":{"start":{"line":820,"column":12},"end":{"line":822,"column":13}},"263":{"start":{"line":821,"column":16},"end":{"line":821,"column":55}},"264":{"start":{"line":825,"column":12},"end":{"line":825,"column":42}},"265":{"start":{"line":826,"column":12},"end":{"line":826,"column":33}},"266":{"start":{"line":830,"column":8},"end":{"line":935,"column":9}},"267":{"start":{"line":833,"column":12},"end":{"line":835,"column":13}},"268":{"start":{"line":834,"column":16},"end":{"line":834,"column":108}},"269":{"start":{"line":838,"column":12},"end":{"line":838,"column":40}},"270":{"start":{"line":841,"column":12},"end":{"line":882,"column":15}},"271":{"start":{"line":841,"column":52},"end":{"line":841,"column":90}},"272":{"start":{"line":842,"column":16},"end":{"line":842,"column":32}},"273":{"start":{"line":844,"column":16},"end":{"line":844,"column":45}},"274":{"start":{"line":846,"column":16},"end":{"line":855,"column":17}},"275":{"start":{"line":847,"column":20},"end":{"line":847,"column":74}},"276":{"start":{"line":849,"column":20},"end":{"line":853,"column":21}},"277":{"start":{"line":850,"column":24},"end":{"line":850,"column":69}},"278":{"start":{"line":852,"column":24},"end":{"line":852,"column":99}},"279":{"start":{"line":854,"column":20},"end":{"line":854,"column":51}},"280":{"start":{"line":857,"column":16},"end":{"line":857,"column":68}},"281":{"start":{"line":858,"column":16},"end":{"line":858,"column":66}},"282":{"start":{"line":860,"column":16},"end":{"line":881,"column":17}},"283":{"start":{"line":861,"column":20},"end":{"line":866,"column":22}},"284":{"start":{"line":868,"column":20},"end":{"line":869,"column":51}},"285":{"start":{"line":872,"column":20},"end":{"line":877,"column":23}},"286":{"start":{"line":873,"column":24},"end":{"line":876,"column":26}},"287":{"start":{"line":879,"column":20},"end":{"line":879,"column":84}},"288":{"start":{"line":880,"column":20},"end":{"line":880,"column":29}},"289":{"start":{"line":885,"column":12},"end":{"line":885,"column":35}},"290":{"start":{"line":886,"column":12},"end":{"line":886,"column":40}},"291":{"start":{"line":888,"column":12},"end":{"line":888,"column":80}},"292":{"start":{"line":889,"column":12},"end":{"line":889,"column":77}},"293":{"start":{"line":892,"column":12},"end":{"line":899,"column":15}},"294":{"start":{"line":901,"column":12},"end":{"line":901,"column":48}},"295":{"start":{"line":904,"column":12},"end":{"line":904,"column":69}},"296":{"start":{"line":907,"column":12},"end":{"line":913,"column":13}},"297":{"start":{"line":908,"column":16},"end":{"line":908,"column":42}},"298":{"start":{"line":910,"column":16},"end":{"line":912,"column":17}},"299":{"start":{"line":911,"column":20},"end":{"line":911,"column":61}},"300":{"start":{"line":915,"column":12},"end":{"line":915,"column":61}},"301":{"start":{"line":917,"column":12},"end":{"line":917,"column":66}},"302":{"start":{"line":918,"column":12},"end":{"line":918,"column":83}},"303":{"start":{"line":926,"column":12},"end":{"line":934,"column":15}},"304":{"start":{"line":928,"column":20},"end":{"line":928,"column":41}},"305":{"start":{"line":929,"column":20},"end":{"line":929,"column":51}},"306":{"start":{"line":932,"column":20},"end":{"line":932,"column":51}},"307":{"start":{"line":938,"column":8},"end":{"line":946,"column":11}},"308":{"start":{"line":939,"column":12},"end":{"line":939,"column":45}},"309":{"start":{"line":941,"column":12},"end":{"line":943,"column":13}},"310":{"start":{"line":942,"column":16},"end":{"line":942,"column":43}},"311":{"start":{"line":944,"column":12},"end":{"line":944,"column":28}},"312":{"start":{"line":948,"column":8},"end":{"line":948,"column":24}},"313":{"start":{"line":966,"column":4},"end":{"line":1029,"column":6}},"314":{"start":{"line":967,"column":8},"end":{"line":969,"column":9}},"315":{"start":{"line":968,"column":12},"end":{"line":968,"column":80}},"316":{"start":{"line":971,"column":8},"end":{"line":979,"column":9}},"317":{"start":{"line":972,"column":12},"end":{"line":972,"column":102}},"318":{"start":{"line":974,"column":12},"end":{"line":974,"column":23}},"319":{"start":{"line":975,"column":12},"end":{"line":975,"column":23}},"320":{"start":{"line":976,"column":12},"end":{"line":976,"column":27}},"321":{"start":{"line":977,"column":12},"end":{"line":977,"column":31}},"322":{"start":{"line":978,"column":12},"end":{"line":978,"column":38}},"323":{"start":{"line":982,"column":8},"end":{"line":982,"column":41}},"324":{"start":{"line":984,"column":8},"end":{"line":984,"column":46}},"325":{"start":{"line":986,"column":8},"end":{"line":988,"column":9}},"326":{"start":{"line":987,"column":12},"end":{"line":987,"column":19}},"327":{"start":{"line":990,"column":8},"end":{"line":999,"column":9}},"328":{"start":{"line":991,"column":12},"end":{"line":998,"column":15}},"329":{"start":{"line":992,"column":16},"end":{"line":994,"column":17}},"330":{"start":{"line":993,"column":20},"end":{"line":993,"column":38}},"331":{"start":{"line":997,"column":16},"end":{"line":997,"column":33}},"332":{"start":{"line":1001,"column":8},"end":{"line":1009,"column":10}},"333":{"start":{"line":1012,"column":8},"end":{"line":1015,"column":9}},"334":{"start":{"line":1013,"column":12},"end":{"line":1013,"column":47}},"335":{"start":{"line":1014,"column":12},"end":{"line":1014,"column":55}},"336":{"start":{"line":1018,"column":8},"end":{"line":1026,"column":9}},"337":{"start":{"line":1021,"column":12},"end":{"line":1023,"column":13}},"338":{"start":{"line":1022,"column":16},"end":{"line":1022,"column":90}},"339":{"start":{"line":1025,"column":12},"end":{"line":1025,"column":30}},"340":{"start":{"line":1028,"column":8},"end":{"line":1028,"column":31}},"341":{"start":{"line":1035,"column":4},"end":{"line":1037,"column":6}},"342":{"start":{"line":1036,"column":8},"end":{"line":1036,"column":26}},"343":{"start":{"line":1040,"column":4},"end":{"line":1058,"column":6}},"344":{"start":{"line":1061,"column":4},"end":{"line":1071,"column":7}},"345":{"start":{"line":1062,"column":8},"end":{"line":1062,"column":57}},"346":{"start":{"line":1065,"column":8},"end":{"line":1070,"column":10}},"347":{"start":{"line":1066,"column":12},"end":{"line":1068,"column":13}},"348":{"start":{"line":1067,"column":16},"end":{"line":1067,"column":63}},"349":{"start":{"line":1069,"column":12},"end":{"line":1069,"column":24}},"350":{"start":{"line":1077,"column":4},"end":{"line":1079,"column":6}},"351":{"start":{"line":1078,"column":8},"end":{"line":1078,"column":35}},"352":{"start":{"line":1085,"column":4},"end":{"line":1123,"column":6}},"353":{"start":{"line":1086,"column":8},"end":{"line":1086,"column":44}},"354":{"start":{"line":1089,"column":8},"end":{"line":1120,"column":9}},"355":{"start":{"line":1092,"column":12},"end":{"line":1092,"column":48}},"356":{"start":{"line":1094,"column":12},"end":{"line":1102,"column":13}},"357":{"start":{"line":1095,"column":16},"end":{"line":1097,"column":17}},"358":{"start":{"line":1096,"column":20},"end":{"line":1096,"column":42}},"359":{"start":{"line":1099,"column":16},"end":{"line":1101,"column":17}},"360":{"start":{"line":1100,"column":20},"end":{"line":1100,"column":42}},"361":{"start":{"line":1105,"column":12},"end":{"line":1118,"column":13}},"362":{"start":{"line":1108,"column":16},"end":{"line":1108,"column":69}},"363":{"start":{"line":1110,"column":16},"end":{"line":1116,"column":17}},"364":{"start":{"line":1111,"column":20},"end":{"line":1113,"column":21}},"365":{"start":{"line":1112,"column":24},"end":{"line":1112,"column":52}},"366":{"start":{"line":1114,"column":20},"end":{"line":1114,"column":33}},"367":{"start":{"line":1122,"column":8},"end":{"line":1122,"column":32}},"368":{"start":{"line":1131,"column":4},"end":{"line":1155,"column":6}},"369":{"start":{"line":1132,"column":8},"end":{"line":1133,"column":98}},"370":{"start":{"line":1134,"column":8},"end":{"line":1136,"column":16}},"371":{"start":{"line":1139,"column":8},"end":{"line":1141,"column":9}},"372":{"start":{"line":1140,"column":12},"end":{"line":1140,"column":41}},"373":{"start":{"line":1143,"column":8},"end":{"line":1152,"column":40}},"374":{"start":{"line":1144,"column":12},"end":{"line":1144,"column":46}},"375":{"start":{"line":1146,"column":12},"end":{"line":1151,"column":13}},"376":{"start":{"line":1147,"column":16},"end":{"line":1150,"column":17}},"377":{"start":{"line":1148,"column":20},"end":{"line":1148,"column":51}},"378":{"start":{"line":1149,"column":20},"end":{"line":1149,"column":32}},"379":{"start":{"line":1154,"column":8},"end":{"line":1154,"column":21}},"380":{"start":{"line":1162,"column":4},"end":{"line":1168,"column":6}},"381":{"start":{"line":1163,"column":8},"end":{"line":1165,"column":9}},"382":{"start":{"line":1164,"column":12},"end":{"line":1164,"column":35}},"383":{"start":{"line":1166,"column":8},"end":{"line":1166,"column":25}},"384":{"start":{"line":1176,"column":4},"end":{"line":1178,"column":6}},"385":{"start":{"line":1177,"column":8},"end":{"line":1177,"column":41}},"386":{"start":{"line":1185,"column":4},"end":{"line":1189,"column":6}},"387":{"start":{"line":1186,"column":8},"end":{"line":1188,"column":11}},"388":{"start":{"line":1187,"column":12},"end":{"line":1187,"column":54}},"389":{"start":{"line":1195,"column":4},"end":{"line":1197,"column":6}},"390":{"start":{"line":1196,"column":8},"end":{"line":1196,"column":53}},"391":{"start":{"line":1203,"column":4},"end":{"line":1205,"column":6}},"392":{"start":{"line":1204,"column":8},"end":{"line":1204,"column":41}},"393":{"start":{"line":1207,"column":4},"end":{"line":1207,"column":30}},"394":{"start":{"line":1228,"column":4},"end":{"line":1230,"column":6}},"395":{"start":{"line":1229,"column":8},"end":{"line":1229,"column":79}},"396":{"start":{"line":1232,"column":4},"end":{"line":1232,"column":15}}},"branchMap":{"1":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"2":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"3":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":44}},{"start":{"line":96,"column":48},"end":{"line":96,"column":50}}]},"4":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":102,"column":8}},{"start":{"line":102,"column":8},"end":{"line":102,"column":8}}]},"5":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":8}},{"start":{"line":146,"column":8},"end":{"line":146,"column":8}}]},"6":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":8},"end":{"line":172,"column":8}},{"start":{"line":172,"column":8},"end":{"line":172,"column":8}}]},"7":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":37},"end":{"line":174,"column":40}},{"start":{"line":174,"column":44},"end":{"line":174,"column":55}}]},"8":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":12},"end":{"line":176,"column":12}},{"start":{"line":176,"column":12},"end":{"line":176,"column":12}}]},"9":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":8},"end":{"line":189,"column":8}},{"start":{"line":189,"column":8},"end":{"line":189,"column":8}}]},"10":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":8},"end":{"line":201,"column":8}},{"start":{"line":201,"column":8},"end":{"line":201,"column":8}}]},"11":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":8},"end":{"line":215,"column":8}},{"start":{"line":215,"column":8},"end":{"line":215,"column":8}}]},"12":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":8},"end":{"line":229,"column":8}},{"start":{"line":229,"column":8},"end":{"line":229,"column":8}}]},"13":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":4},"end":{"line":255,"column":4}},{"start":{"line":255,"column":4},"end":{"line":255,"column":4}}]},"14":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":4},"end":{"line":283,"column":4}},{"start":{"line":283,"column":4},"end":{"line":283,"column":4}}]},"15":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":16},"end":{"line":286,"column":16}},{"start":{"line":286,"column":16},"end":{"line":286,"column":16}}]},"16":{"line":286,"type":"binary-expr","locations":[{"start":{"line":286,"column":20},"end":{"line":286,"column":43}},{"start":{"line":286,"column":47},"end":{"line":286,"column":79}}]},"17":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":12},"end":{"line":298,"column":12}},{"start":{"line":298,"column":12},"end":{"line":298,"column":12}}]},"18":{"line":298,"type":"binary-expr","locations":[{"start":{"line":298,"column":16},"end":{"line":298,"column":25}},{"start":{"line":298,"column":29},"end":{"line":298,"column":67}}]},"19":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":12},"end":{"line":302,"column":12}},{"start":{"line":302,"column":12},"end":{"line":302,"column":12}}]},"20":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":8},"end":{"line":336,"column":8}},{"start":{"line":336,"column":8},"end":{"line":336,"column":8}}]},"21":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":12},"end":{"line":339,"column":12}},{"start":{"line":339,"column":12},"end":{"line":339,"column":12}}]},"22":{"line":340,"type":"switch","locations":[{"start":{"line":341,"column":20},"end":{"line":343,"column":30}},{"start":{"line":345,"column":20},"end":{"line":345,"column":35}},{"start":{"line":346,"column":20},"end":{"line":348,"column":30}},{"start":{"line":350,"column":20},"end":{"line":352,"column":30}},{"start":{"line":354,"column":20},"end":{"line":356,"column":30}},{"start":{"line":358,"column":20},"end":{"line":360,"column":30}},{"start":{"line":362,"column":20},"end":{"line":372,"column":21}}]},"23":{"line":377,"type":"if","locations":[{"start":{"line":377,"column":16},"end":{"line":377,"column":16}},{"start":{"line":377,"column":16},"end":{"line":377,"column":16}}]},"24":{"line":380,"type":"if","locations":[{"start":{"line":380,"column":23},"end":{"line":380,"column":23}},{"start":{"line":380,"column":23},"end":{"line":380,"column":23}}]},"25":{"line":392,"type":"if","locations":[{"start":{"line":392,"column":8},"end":{"line":392,"column":8}},{"start":{"line":392,"column":8},"end":{"line":392,"column":8}}]},"26":{"line":414,"type":"if","locations":[{"start":{"line":414,"column":8},"end":{"line":414,"column":8}},{"start":{"line":414,"column":8},"end":{"line":414,"column":8}}]},"27":{"line":414,"type":"binary-expr","locations":[{"start":{"line":414,"column":13},"end":{"line":414,"column":25}},{"start":{"line":414,"column":29},"end":{"line":414,"column":51}},{"start":{"line":415,"column":13},"end":{"line":415,"column":46}},{"start":{"line":415,"column":51},"end":{"line":415,"column":86}},{"start":{"line":415,"column":90},"end":{"line":415,"column":128}},{"start":{"line":416,"column":13},"end":{"line":416,"column":24}},{"start":{"line":416,"column":29},"end":{"line":416,"column":60}},{"start":{"line":416,"column":65},"end":{"line":416,"column":98}},{"start":{"line":416,"column":102},"end":{"line":416,"column":138}}]},"28":{"line":433,"type":"if","locations":[{"start":{"line":433,"column":4},"end":{"line":433,"column":4}},{"start":{"line":433,"column":4},"end":{"line":433,"column":4}}]},"29":{"line":433,"type":"binary-expr","locations":[{"start":{"line":433,"column":8},"end":{"line":433,"column":16}},{"start":{"line":433,"column":21},"end":{"line":433,"column":33}},{"start":{"line":433,"column":37},"end":{"line":433,"column":52}}]},"30":{"line":439,"type":"if","locations":[{"start":{"line":439,"column":4},"end":{"line":439,"column":4}},{"start":{"line":439,"column":4},"end":{"line":439,"column":4}}]},"31":{"line":453,"type":"binary-expr","locations":[{"start":{"line":453,"column":21},"end":{"line":453,"column":35}},{"start":{"line":453,"column":39},"end":{"line":453,"column":52}},{"start":{"line":453,"column":56},"end":{"line":453,"column":58}}]},"32":{"line":459,"type":"if","locations":[{"start":{"line":459,"column":4},"end":{"line":459,"column":4}},{"start":{"line":459,"column":4},"end":{"line":459,"column":4}}]},"33":{"line":463,"type":"if","locations":[{"start":{"line":463,"column":12},"end":{"line":463,"column":12}},{"start":{"line":463,"column":12},"end":{"line":463,"column":12}}]},"34":{"line":466,"type":"if","locations":[{"start":{"line":466,"column":12},"end":{"line":466,"column":12}},{"start":{"line":466,"column":12},"end":{"line":466,"column":12}}]},"35":{"line":475,"type":"if","locations":[{"start":{"line":475,"column":4},"end":{"line":475,"column":4}},{"start":{"line":475,"column":4},"end":{"line":475,"column":4}}]},"36":{"line":479,"type":"if","locations":[{"start":{"line":479,"column":12},"end":{"line":479,"column":12}},{"start":{"line":479,"column":12},"end":{"line":479,"column":12}}]},"37":{"line":479,"type":"binary-expr","locations":[{"start":{"line":479,"column":16},"end":{"line":479,"column":35}},{"start":{"line":479,"column":39},"end":{"line":479,"column":42}},{"start":{"line":479,"column":46},"end":{"line":479,"column":63}}]},"38":{"line":487,"type":"binary-expr","locations":[{"start":{"line":487,"column":16},"end":{"line":487,"column":29}},{"start":{"line":487,"column":33},"end":{"line":487,"column":47}}]},"39":{"line":489,"type":"binary-expr","locations":[{"start":{"line":489,"column":33},"end":{"line":489,"column":43}},{"start":{"line":489,"column":47},"end":{"line":489,"column":49}}]},"40":{"line":490,"type":"binary-expr","locations":[{"start":{"line":490,"column":38},"end":{"line":490,"column":53}},{"start":{"line":490,"column":57},"end":{"line":490,"column":59}}]},"41":{"line":491,"type":"binary-expr","locations":[{"start":{"line":491,"column":54},"end":{"line":491,"column":74}},{"start":{"line":491,"column":78},"end":{"line":491,"column":80}}]},"42":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":4},"end":{"line":495,"column":4}},{"start":{"line":495,"column":4},"end":{"line":495,"column":4}}]},"43":{"line":496,"type":"if","locations":[{"start":{"line":496,"column":8},"end":{"line":496,"column":8}},{"start":{"line":496,"column":8},"end":{"line":496,"column":8}}]},"44":{"line":529,"type":"if","locations":[{"start":{"line":529,"column":4},"end":{"line":529,"column":4}},{"start":{"line":529,"column":4},"end":{"line":529,"column":4}}]},"45":{"line":542,"type":"if","locations":[{"start":{"line":542,"column":4},"end":{"line":542,"column":4}},{"start":{"line":542,"column":4},"end":{"line":542,"column":4}}]},"46":{"line":564,"type":"binary-expr","locations":[{"start":{"line":564,"column":29},"end":{"line":564,"column":33}},{"start":{"line":564,"column":37},"end":{"line":564,"column":39}}]},"47":{"line":583,"type":"if","locations":[{"start":{"line":583,"column":4},"end":{"line":583,"column":4}},{"start":{"line":583,"column":4},"end":{"line":583,"column":4}}]},"48":{"line":650,"type":"if","locations":[{"start":{"line":650,"column":8},"end":{"line":650,"column":8}},{"start":{"line":650,"column":8},"end":{"line":650,"column":8}}]},"49":{"line":661,"type":"if","locations":[{"start":{"line":661,"column":12},"end":{"line":661,"column":12}},{"start":{"line":661,"column":12},"end":{"line":661,"column":12}}]},"50":{"line":670,"type":"cond-expr","locations":[{"start":{"line":670,"column":45},"end":{"line":670,"column":91}},{"start":{"line":670,"column":94},"end":{"line":670,"column":98}}]},"51":{"line":694,"type":"if","locations":[{"start":{"line":694,"column":8},"end":{"line":694,"column":8}},{"start":{"line":694,"column":8},"end":{"line":694,"column":8}}]},"52":{"line":696,"type":"if","locations":[{"start":{"line":696,"column":15},"end":{"line":696,"column":15}},{"start":{"line":696,"column":15},"end":{"line":696,"column":15}}]},"53":{"line":709,"type":"if","locations":[{"start":{"line":709,"column":8},"end":{"line":709,"column":8}},{"start":{"line":709,"column":8},"end":{"line":709,"column":8}}]},"54":{"line":759,"type":"cond-expr","locations":[{"start":{"line":759,"column":62},"end":{"line":759,"column":78}},{"start":{"line":759,"column":81},"end":{"line":759,"column":85}}]},"55":{"line":766,"type":"if","locations":[{"start":{"line":766,"column":8},"end":{"line":766,"column":8}},{"start":{"line":766,"column":8},"end":{"line":766,"column":8}}]},"56":{"line":774,"type":"if","locations":[{"start":{"line":774,"column":8},"end":{"line":774,"column":8}},{"start":{"line":774,"column":8},"end":{"line":774,"column":8}}]},"57":{"line":779,"type":"binary-expr","locations":[{"start":{"line":779,"column":40},"end":{"line":779,"column":44}},{"start":{"line":779,"column":48},"end":{"line":779,"column":69}}]},"58":{"line":783,"type":"if","locations":[{"start":{"line":783,"column":8},"end":{"line":783,"column":8}},{"start":{"line":783,"column":8},"end":{"line":783,"column":8}}]},"59":{"line":784,"type":"if","locations":[{"start":{"line":784,"column":12},"end":{"line":784,"column":12}},{"start":{"line":784,"column":12},"end":{"line":784,"column":12}}]},"60":{"line":795,"type":"if","locations":[{"start":{"line":795,"column":8},"end":{"line":795,"column":8}},{"start":{"line":795,"column":8},"end":{"line":795,"column":8}}]},"61":{"line":798,"type":"if","locations":[{"start":{"line":798,"column":12},"end":{"line":798,"column":12}},{"start":{"line":798,"column":12},"end":{"line":798,"column":12}}]},"62":{"line":813,"type":"if","locations":[{"start":{"line":813,"column":12},"end":{"line":813,"column":12}},{"start":{"line":813,"column":12},"end":{"line":813,"column":12}}]},"63":{"line":813,"type":"binary-expr","locations":[{"start":{"line":813,"column":16},"end":{"line":813,"column":27}},{"start":{"line":813,"column":31},"end":{"line":813,"column":46}}]},"64":{"line":820,"type":"if","locations":[{"start":{"line":820,"column":12},"end":{"line":820,"column":12}},{"start":{"line":820,"column":12},"end":{"line":820,"column":12}}]},"65":{"line":830,"type":"if","locations":[{"start":{"line":830,"column":8},"end":{"line":830,"column":8}},{"start":{"line":830,"column":8},"end":{"line":830,"column":8}}]},"66":{"line":833,"type":"if","locations":[{"start":{"line":833,"column":12},"end":{"line":833,"column":12}},{"start":{"line":833,"column":12},"end":{"line":833,"column":12}}]},"67":{"line":846,"type":"if","locations":[{"start":{"line":846,"column":16},"end":{"line":846,"column":16}},{"start":{"line":846,"column":16},"end":{"line":846,"column":16}}]},"68":{"line":849,"type":"if","locations":[{"start":{"line":849,"column":20},"end":{"line":849,"column":20}},{"start":{"line":849,"column":20},"end":{"line":849,"column":20}}]},"69":{"line":865,"type":"cond-expr","locations":[{"start":{"line":865,"column":63},"end":{"line":865,"column":83}},{"start":{"line":865,"column":86},"end":{"line":865,"column":88}}]},"70":{"line":865,"type":"binary-expr","locations":[{"start":{"line":865,"column":25},"end":{"line":865,"column":36}},{"start":{"line":865,"column":40},"end":{"line":865,"column":60}}]},"71":{"line":868,"type":"cond-expr","locations":[{"start":{"line":868,"column":54},"end":{"line":868,"column":85}},{"start":{"line":869,"column":26},"end":{"line":869,"column":50}}]},"72":{"line":873,"type":"cond-expr","locations":[{"start":{"line":874,"column":30},"end":{"line":874,"column":62}},{"start":{"line":875,"column":30},"end":{"line":875,"column":44}}]},"73":{"line":888,"type":"binary-expr","locations":[{"start":{"line":888,"column":33},"end":{"line":888,"column":73}},{"start":{"line":888,"column":77},"end":{"line":888,"column":79}}]},"74":{"line":889,"type":"binary-expr","locations":[{"start":{"line":889,"column":32},"end":{"line":889,"column":71}},{"start":{"line":889,"column":75},"end":{"line":889,"column":76}}]},"75":{"line":897,"type":"binary-expr","locations":[{"start":{"line":897,"column":28},"end":{"line":897,"column":66}},{"start":{"line":897,"column":70},"end":{"line":897,"column":78}}]},"76":{"line":907,"type":"if","locations":[{"start":{"line":907,"column":12},"end":{"line":907,"column":12}},{"start":{"line":907,"column":12},"end":{"line":907,"column":12}}]},"77":{"line":907,"type":"binary-expr","locations":[{"start":{"line":907,"column":16},"end":{"line":907,"column":23}},{"start":{"line":907,"column":27},"end":{"line":907,"column":46}},{"start":{"line":907,"column":50},"end":{"line":907,"column":83}}]},"78":{"line":910,"type":"if","locations":[{"start":{"line":910,"column":16},"end":{"line":910,"column":16}},{"start":{"line":910,"column":16},"end":{"line":910,"column":16}}]},"79":{"line":910,"type":"binary-expr","locations":[{"start":{"line":910,"column":20},"end":{"line":910,"column":35}},{"start":{"line":910,"column":39},"end":{"line":910,"column":66}},{"start":{"line":910,"column":70},"end":{"line":910,"column":118}}]},"80":{"line":941,"type":"if","locations":[{"start":{"line":941,"column":12},"end":{"line":941,"column":12}},{"start":{"line":941,"column":12},"end":{"line":941,"column":12}}]},"81":{"line":967,"type":"if","locations":[{"start":{"line":967,"column":8},"end":{"line":967,"column":8}},{"start":{"line":967,"column":8},"end":{"line":967,"column":8}}]},"82":{"line":971,"type":"if","locations":[{"start":{"line":971,"column":8},"end":{"line":971,"column":8}},{"start":{"line":971,"column":8},"end":{"line":971,"column":8}}]},"83":{"line":984,"type":"binary-expr","locations":[{"start":{"line":984,"column":19},"end":{"line":984,"column":33}},{"start":{"line":984,"column":37},"end":{"line":984,"column":45}}]},"84":{"line":986,"type":"if","locations":[{"start":{"line":986,"column":8},"end":{"line":986,"column":8}},{"start":{"line":986,"column":8},"end":{"line":986,"column":8}}]},"85":{"line":990,"type":"if","locations":[{"start":{"line":990,"column":8},"end":{"line":990,"column":8}},{"start":{"line":990,"column":8},"end":{"line":990,"column":8}}]},"86":{"line":992,"type":"if","locations":[{"start":{"line":992,"column":16},"end":{"line":992,"column":16}},{"start":{"line":992,"column":16},"end":{"line":992,"column":16}}]},"87":{"line":1007,"type":"binary-expr","locations":[{"start":{"line":1007,"column":22},"end":{"line":1007,"column":26}},{"start":{"line":1007,"column":30},"end":{"line":1007,"column":39}}]},"88":{"line":1008,"type":"binary-expr","locations":[{"start":{"line":1008,"column":20},"end":{"line":1008,"column":55}},{"start":{"line":1008,"column":59},"end":{"line":1008,"column":61}}]},"89":{"line":1012,"type":"if","locations":[{"start":{"line":1012,"column":8},"end":{"line":1012,"column":8}},{"start":{"line":1012,"column":8},"end":{"line":1012,"column":8}}]},"90":{"line":1018,"type":"if","locations":[{"start":{"line":1018,"column":8},"end":{"line":1018,"column":8}},{"start":{"line":1018,"column":8},"end":{"line":1018,"column":8}}]},"91":{"line":1018,"type":"binary-expr","locations":[{"start":{"line":1018,"column":12},"end":{"line":1018,"column":15}},{"start":{"line":1018,"column":19},"end":{"line":1018,"column":43}},{"start":{"line":1018,"column":48},"end":{"line":1018,"column":76}}]},"92":{"line":1021,"type":"if","locations":[{"start":{"line":1021,"column":12},"end":{"line":1021,"column":12}},{"start":{"line":1021,"column":12},"end":{"line":1021,"column":12}}]},"93":{"line":1021,"type":"binary-expr","locations":[{"start":{"line":1021,"column":16},"end":{"line":1021,"column":20}},{"start":{"line":1021,"column":24},"end":{"line":1021,"column":37}}]},"94":{"line":1066,"type":"if","locations":[{"start":{"line":1066,"column":12},"end":{"line":1066,"column":12}},{"start":{"line":1066,"column":12},"end":{"line":1066,"column":12}}]},"95":{"line":1089,"type":"if","locations":[{"start":{"line":1089,"column":8},"end":{"line":1089,"column":8}},{"start":{"line":1089,"column":8},"end":{"line":1089,"column":8}}]},"96":{"line":1094,"type":"if","locations":[{"start":{"line":1094,"column":12},"end":{"line":1094,"column":12}},{"start":{"line":1094,"column":12},"end":{"line":1094,"column":12}}]},"97":{"line":1095,"type":"if","locations":[{"start":{"line":1095,"column":16},"end":{"line":1095,"column":16}},{"start":{"line":1095,"column":16},"end":{"line":1095,"column":16}}]},"98":{"line":1099,"type":"if","locations":[{"start":{"line":1099,"column":16},"end":{"line":1099,"column":16}},{"start":{"line":1099,"column":16},"end":{"line":1099,"column":16}}]},"99":{"line":1110,"type":"if","locations":[{"start":{"line":1110,"column":16},"end":{"line":1110,"column":16}},{"start":{"line":1110,"column":16},"end":{"line":1110,"column":16}}]},"100":{"line":1111,"type":"if","locations":[{"start":{"line":1111,"column":20},"end":{"line":1111,"column":20}},{"start":{"line":1111,"column":20},"end":{"line":1111,"column":20}}]},"101":{"line":1132,"type":"binary-expr","locations":[{"start":{"line":1132,"column":32},"end":{"line":1132,"column":72}},{"start":{"line":1132,"column":76},"end":{"line":1132,"column":129}}]},"102":{"line":1133,"type":"binary-expr","locations":[{"start":{"line":1133,"column":27},"end":{"line":1133,"column":42}},{"start":{"line":1133,"column":46},"end":{"line":1133,"column":97}}]},"103":{"line":1139,"type":"if","locations":[{"start":{"line":1139,"column":8},"end":{"line":1139,"column":8}},{"start":{"line":1139,"column":8},"end":{"line":1139,"column":8}}]},"104":{"line":1139,"type":"binary-expr","locations":[{"start":{"line":1139,"column":12},"end":{"line":1139,"column":35}},{"start":{"line":1139,"column":39},"end":{"line":1139,"column":51}}]},"105":{"line":1147,"type":"if","locations":[{"start":{"line":1147,"column":16},"end":{"line":1147,"column":16}},{"start":{"line":1147,"column":16},"end":{"line":1147,"column":16}}]},"106":{"line":1163,"type":"if","locations":[{"start":{"line":1163,"column":8},"end":{"line":1163,"column":8}},{"start":{"line":1163,"column":8},"end":{"line":1163,"column":8}}]},"107":{"line":1229,"type":"binary-expr","locations":[{"start":{"line":1229,"column":16},"end":{"line":1229,"column":28}},{"start":{"line":1229,"column":32},"end":{"line":1229,"column":71}},{"start":{"line":1229,"column":76},"end":{"line":1229,"column":78}}]}},"code":["/**"," * @fileoverview Main ESLint object."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const assert = require(\"assert\"),","    EventEmitter = require(\"events\").EventEmitter,","    escope = require(\"escope\"),","    levn = require(\"levn\"),","    blankScriptAST = require(\"../conf/blank-script.json\"),","    DEFAULT_PARSER = require(\"../conf/eslint-recommended\").parser,","    replacements = require(\"../conf/replacements.json\"),","    CodePathAnalyzer = require(\"./code-path-analysis/code-path-analyzer\"),","    ConfigOps = require(\"./config/config-ops\"),","    validator = require(\"./config/config-validator\"),","    Environments = require(\"./config/environments\"),","    CommentEventGenerator = require(\"./util/comment-event-generator\"),","    NodeEventGenerator = require(\"./util/node-event-generator\"),","    SourceCode = require(\"./util/source-code\"),","    Traverser = require(\"./util/traverser\"),","    RuleContext = require(\"./rule-context\"),","    rules = require(\"./rules\"),","    timing = require(\"./timing\"),","","    pkg = require(\"../package.json\");","","","//------------------------------------------------------------------------------","// Typedefs","//------------------------------------------------------------------------------","","/**"," * The result of a parsing operation from parseForESLint()"," * @typedef {Object} CustomParseResult"," * @property {ASTNode} ast The ESTree AST Program node."," * @property {Object} services An object containing additional services related"," *      to the parser."," */","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Parses a list of \"name:boolean_value\" or/and \"name\" options divided by comma or"," * whitespace."," * @param {string} string The string to parse."," * @param {Comment} comment The comment node which has the string."," * @returns {Object} Result map object of names and boolean values"," */","function parseBooleanConfig(string, comment) {","    const items = {};","","    // Collapse whitespace around `:` and `,` to make parsing easier","    string = string.replace(/\\s*([:,])\\s*/g, \"$1\");","","    string.split(/\\s|,+/).forEach(name => {","        if (!name) {","            return;","        }","        const pos = name.indexOf(\":\");","        let value;","","        if (pos !== -1) {","            value = name.substring(pos + 1, name.length);","            name = name.substring(0, pos);","        }","","        items[name] = {","            value: (value === \"true\"),","            comment","        };","","    });","    return items;","}","","/**"," * Parses a JSON-like config."," * @param {string} string The string to parse."," * @param {Object} location Start line and column of comments for potential error message."," * @param {Object[]} messages The messages queue for potential error message."," * @returns {Object} Result map object"," */","function parseJsonConfig(string, location, messages) {","    let items = {};","","    // Parses a JSON-like comment by the same way as parsing CLI option.","    try {","        items = levn.parse(\"Object\", string) || {};","","        // Some tests say that it should ignore invalid comments such as `/*eslint no-alert:abc*/`.","        // Also, commaless notations have invalid severity:","        //     \"no-alert: 2 no-console: 2\" --> {\"no-alert\": \"2 no-console: 2\"}","        // Should ignore that case as well.","        if (ConfigOps.isEverySeverityValid(items)) {","            return items;","        }","    } catch (ex) {","","        // ignore to parse the string by a fallback.","    }","","    // Optionator cannot parse commaless notations.","    // But we are supporting that. So this is a fallback for that.","    items = {};","    string = string.replace(/([a-zA-Z0-9\\-/]+):/g, \"\\\"$1\\\":\").replace(/(]|[0-9])\\s+(?=\")/, \"$1,\");","    try {","        items = JSON.parse(`{${string}}`);","    } catch (ex) {","","        messages.push({","            ruleId: null,","            fatal: true,","            severity: 2,","            source: null,","            message: `Failed to parse JSON from '${string}': ${ex.message}`,","            line: location.start.line,","            column: location.start.column + 1","        });","","    }","","    return items;","}","","/**"," * Parses a config of values separated by comma."," * @param {string} string The string to parse."," * @returns {Object} Result map of values and true values"," */","function parseListConfig(string) {","    const items = {};","","    // Collapse whitespace around ,","    string = string.replace(/\\s*,\\s*/g, \",\");","","    string.split(/,+/).forEach(name => {","        name = name.trim();","        if (!name) {","            return;","        }","        items[name] = true;","    });","    return items;","}","","/**"," * Ensures that variables representing built-in properties of the Global Object,"," * and any globals declared by special block comments, are present in the global"," * scope."," * @param {ASTNode} program The top node of the AST."," * @param {Scope} globalScope The global scope."," * @param {Object} config The existing configuration data."," * @returns {void}"," */","function addDeclaredGlobals(program, globalScope, config) {","    const declaredGlobals = {},","        exportedGlobals = {},","        explicitGlobals = {},","        builtin = Environments.get(\"builtin\");","","    Object.assign(declaredGlobals, builtin);","","    Object.keys(config.env).forEach(name => {","        if (config.env[name]) {","            const env = Environments.get(name),","                environmentGlobals = env && env.globals;","","            if (environmentGlobals) {","                Object.assign(declaredGlobals, environmentGlobals);","            }","        }","    });","","    Object.assign(exportedGlobals, config.exported);","    Object.assign(declaredGlobals, config.globals);","    Object.assign(explicitGlobals, config.astGlobals);","","    Object.keys(declaredGlobals).forEach(name => {","        let variable = globalScope.set.get(name);","","        if (!variable) {","            variable = new escope.Variable(name, globalScope);","            variable.eslintExplicitGlobal = false;","            globalScope.variables.push(variable);","            globalScope.set.set(name, variable);","        }","        variable.writeable = declaredGlobals[name];","    });","","    Object.keys(explicitGlobals).forEach(name => {","        let variable = globalScope.set.get(name);","","        if (!variable) {","            variable = new escope.Variable(name, globalScope);","            variable.eslintExplicitGlobal = true;","            variable.eslintExplicitGlobalComment = explicitGlobals[name].comment;","            globalScope.variables.push(variable);","            globalScope.set.set(name, variable);","        }","        variable.writeable = explicitGlobals[name].value;","    });","","    // mark all exported variables as such","    Object.keys(exportedGlobals).forEach(name => {","        const variable = globalScope.set.get(name);","","        if (variable) {","            variable.eslintUsed = true;","        }","    });","","    /*","     * \"through\" contains all references which definitions cannot be found.","     * Since we augment the global scope using configuration, we need to update","     * references and remove the ones that were added by configuration.","     */","    globalScope.through = globalScope.through.filter(reference => {","        const name = reference.identifier.name;","        const variable = globalScope.set.get(name);","","        if (variable) {","","            /*","             * Links the variable and the reference.","             * And this reference is removed from `Scope#through`.","             */","            reference.resolved = variable;","            variable.references.push(reference);","","            return false;","        }","","        return true;","    });","}","","/**"," * Add data to reporting configuration to disable reporting for list of rules"," * starting from start location"," * @param  {Object[]} reportingConfig Current reporting configuration"," * @param  {Object} start Position to start"," * @param  {string[]} rulesToDisable List of rules"," * @returns {void}"," */","function disableReporting(reportingConfig, start, rulesToDisable) {","","    if (rulesToDisable.length) {","        rulesToDisable.forEach(rule => {","            reportingConfig.push({","                start,","                end: null,","                rule","            });","        });","    } else {","        reportingConfig.push({","            start,","            end: null,","            rule: null","        });","    }","}","","/**"," * Add data to reporting configuration to enable reporting for list of rules"," * starting from start location"," * @param  {Object[]} reportingConfig Current reporting configuration"," * @param  {Object} start Position to start"," * @param  {string[]} rulesToEnable List of rules"," * @returns {void}"," */","function enableReporting(reportingConfig, start, rulesToEnable) {","    let i;","","    if (rulesToEnable.length) {","        rulesToEnable.forEach(rule => {","            for (i = reportingConfig.length - 1; i >= 0; i--) {","                if (!reportingConfig[i].end && reportingConfig[i].rule === rule) {","                    reportingConfig[i].end = start;","                    break;","                }","            }","        });","    } else {","","        // find all previous disabled locations if they was started as list of rules","        let prevStart;","","        for (i = reportingConfig.length - 1; i >= 0; i--) {","            if (prevStart && prevStart !== reportingConfig[i].start) {","                break;","            }","","            if (!reportingConfig[i].end) {","                reportingConfig[i].end = start;","                prevStart = reportingConfig[i].start;","            }","        }","    }","}","","/**"," * Parses comments in file to extract file-specific config of rules, globals"," * and environments and merges them with global config; also code blocks"," * where reporting is disabled or enabled and merges them with reporting config."," * @param {string} filename The file being checked."," * @param {ASTNode} ast The top node of the AST."," * @param {Object} config The existing configuration data."," * @param {Object[]} reportingConfig The existing reporting configuration data."," * @param {Object[]} messages The messages queue."," * @returns {Object} Modified config object"," */","function modifyConfigsFromComments(filename, ast, config, reportingConfig, messages) {","","    let commentConfig = {","        exported: {},","        astGlobals: {},","        rules: {},","        env: {}","    };","    const commentRules = {};","","    ast.comments.forEach(comment => {","","        let value = comment.value.trim();","        const match = /^(eslint(-\\w+){0,3}|exported|globals?)(\\s|$)/.exec(value);","","        if (match) {","            value = value.substring(match.index + match[1].length);","","            if (comment.type === \"Block\") {","                switch (match[1]) {","                    case \"exported\":","                        Object.assign(commentConfig.exported, parseBooleanConfig(value, comment));","                        break;","","                    case \"globals\":","                    case \"global\":","                        Object.assign(commentConfig.astGlobals, parseBooleanConfig(value, comment));","                        break;","","                    case \"eslint-env\":","                        Object.assign(commentConfig.env, parseListConfig(value));","                        break;","","                    case \"eslint-disable\":","                        disableReporting(reportingConfig, comment.loc.start, Object.keys(parseListConfig(value)));","                        break;","","                    case \"eslint-enable\":","                        enableReporting(reportingConfig, comment.loc.start, Object.keys(parseListConfig(value)));","                        break;","","                    case \"eslint\": {","                        const items = parseJsonConfig(value, comment.loc, messages);","","                        Object.keys(items).forEach(name => {","                            const ruleValue = items[name];","","                            validator.validateRuleOptions(name, ruleValue, `${filename} line ${comment.loc.start.line}`);","                            commentRules[name] = ruleValue;","                        });","                        break;","                    }","","                    // no default","                }","            } else {        // comment.type === \"Line\"","                if (match[1] === \"eslint-disable-line\") {","                    disableReporting(reportingConfig, { line: comment.loc.start.line, column: 0 }, Object.keys(parseListConfig(value)));","                    enableReporting(reportingConfig, comment.loc.end, Object.keys(parseListConfig(value)));","                } else if (match[1] === \"eslint-disable-next-line\") {","                    disableReporting(reportingConfig, comment.loc.start, Object.keys(parseListConfig(value)));","                    enableReporting(reportingConfig, { line: comment.loc.start.line + 2 }, Object.keys(parseListConfig(value)));","                }","            }","        }","    });","","    // apply environment configs","    Object.keys(commentConfig.env).forEach(name => {","        const env = Environments.get(name);","","        if (env) {","            commentConfig = ConfigOps.merge(commentConfig, env);","        }","    });","    Object.assign(commentConfig.rules, commentRules);","","    return ConfigOps.merge(config, commentConfig);","}","","/**"," * Check if message of rule with ruleId should be ignored in location"," * @param  {Object[]} reportingConfig  Collection of ignore records"," * @param  {string} ruleId   Id of rule"," * @param  {Object} location Location of message"," * @returns {boolean}          True if message should be ignored, false otherwise"," */","function isDisabledByReportingConfig(reportingConfig, ruleId, location) {","","    for (let i = 0, c = reportingConfig.length; i < c; i++) {","","        const ignore = reportingConfig[i];","","        if ((!ignore.rule || ignore.rule === ruleId) &&","            (location.line > ignore.start.line || (location.line === ignore.start.line && location.column >= ignore.start.column)) &&","            (!ignore.end || (location.line < ignore.end.line || (location.line === ignore.end.line && location.column <= ignore.end.column)))) {","            return true;","        }","    }","","    return false;","}","","/**"," * Normalize ECMAScript version from the initial config"," * @param  {number} ecmaVersion ECMAScript version from the initial config"," * @param  {boolean} isModule Whether the source type is module or not"," * @returns {number} normalized ECMAScript version"," */","function normalizeEcmaVersion(ecmaVersion, isModule) {","","    // Need at least ES6 for modules","    if (isModule && (!ecmaVersion || ecmaVersion < 6)) {","        ecmaVersion = 6;","    }","","    // Calculate ECMAScript edition number from official year version starting with","    // ES2015, which corresponds with ES6 (or a difference of 2009).","    if (ecmaVersion >= 2015) {","        ecmaVersion -= 2009;","    }","","    return ecmaVersion;","}","","/**"," * Process initial config to make it safe to extend by file comment config"," * @param  {Object} config Initial config"," * @returns {Object}        Processed config"," */","function prepareConfig(config) {","","    config.globals = config.globals || config.global || {};","    delete config.global;","","    const copiedRules = {};","    let parserOptions = {};","","    if (typeof config.rules === \"object\") {","        Object.keys(config.rules).forEach(k => {","            const rule = config.rules[k];","","            if (rule === null) {","                throw new Error(`Invalid config for rule '${k}'.`);","            }","            if (Array.isArray(rule)) {","                copiedRules[k] = rule.slice();","            } else {","                copiedRules[k] = rule;","            }","        });","    }","","    // merge in environment parserOptions","    if (typeof config.env === \"object\") {","        Object.keys(config.env).forEach(envName => {","            const env = Environments.get(envName);","","            if (config.env[envName] && env && env.parserOptions) {","                parserOptions = ConfigOps.merge(parserOptions, env.parserOptions);","            }","        });","    }","","    const preparedConfig = {","        rules: copiedRules,","        parser: config.parser || DEFAULT_PARSER,","        globals: ConfigOps.merge({}, config.globals),","        env: ConfigOps.merge({}, config.env || {}),","        settings: ConfigOps.merge({}, config.settings || {}),","        parserOptions: ConfigOps.merge(parserOptions, config.parserOptions || {})","    };","    const isModule = preparedConfig.parserOptions.sourceType === \"module\";","","    if (isModule) {","        if (!preparedConfig.parserOptions.ecmaFeatures) {","            preparedConfig.parserOptions.ecmaFeatures = {};","        }","","        // can't have global return inside of modules","        preparedConfig.parserOptions.ecmaFeatures.globalReturn = false;","    }","","    preparedConfig.parserOptions.ecmaVersion = normalizeEcmaVersion(preparedConfig.parserOptions.ecmaVersion, isModule);","","    return preparedConfig;","}","","/**"," * Provide a stub rule with a given message"," * @param  {string} message The message to be displayed for the rule"," * @returns {Function}      Stub rule function"," */","function createStubRule(message) {","","    /**","     * Creates a fake rule object","     * @param {Object} context context object for each rule","     * @returns {Object} collection of node to listen on","     */","    function createRuleModule(context) {","        return {","            Program(node) {","                context.report(node, message);","            }","        };","    }","","    if (message) {","        return createRuleModule;","    }","    throw new Error(\"No message passed to stub rule\");","","}","","/**"," * Provide a rule replacement message"," * @param  {string} ruleId Name of the rule"," * @returns {string}       Message detailing rule replacement"," */","function getRuleReplacementMessage(ruleId) {","    if (ruleId in replacements.rules) {","        const newRules = replacements.rules[ruleId];","","        return `Rule '${ruleId}' was removed and replaced by: ${newRules.join(\", \")}`;","    }","","    return null;","}","","const eslintEnvPattern = /\\/\\*\\s*eslint-env\\s(.+?)\\*\\//g;","","/**"," * Checks whether or not there is a comment which has \"eslint-env *\" in a given text."," * @param {string} text - A source code text to check."," * @returns {Object|null} A result of parseListConfig() with \"eslint-env *\" comment."," */","function findEslintEnv(text) {","    let match, retv;","","    eslintEnvPattern.lastIndex = 0;","","    while ((match = eslintEnvPattern.exec(text))) {","        retv = Object.assign(retv || {}, parseListConfig(match[1]));","    }","","    return retv;","}","","/**"," * Strips Unicode BOM from a given text."," *"," * @param {string} text - A text to strip."," * @returns {string} The stripped text."," */","function stripUnicodeBOM(text) {","","    /*","     * Check Unicode BOM.","     * In JavaScript, string data is stored as UTF-16, so BOM is 0xFEFF.","     * http://www.ecma-international.org/ecma-262/6.0/#sec-unicode-format-control-characters","     */","    if (text.charCodeAt(0) === 0xFEFF) {","        return text.slice(1);","    }","    return text;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Object that is responsible for verifying JavaScript text"," * @name eslint"," */","module.exports = (function() {","","    const api = Object.create(new EventEmitter());","    let messages = [],","        currentConfig = null,","        currentScopes = null,","        scopeManager = null,","        currentFilename = null,","        traverser = null,","        reportingConfig = [],","        sourceCode = null;","","    /**","     * Parses text into an AST. Moved out here because the try-catch prevents","     * optimization of functions, so it's best to keep the try-catch as isolated","     * as possible","     * @param {string} text The text to parse.","     * @param {Object} config The ESLint configuration object.","     * @param {string} filePath The path to the file being parsed.","     * @returns {ASTNode|CustomParseResult} The AST or parse result if successful,","     *      or null if not.","     * @private","     */","    function parse(text, config, filePath) {","","        let parser,","            parserOptions = {","                loc: true,","                range: true,","                raw: true,","                tokens: true,","                comment: true,","                attachComment: true,","                filePath","            };","","        try {","            parser = require(config.parser);","        } catch (ex) {","            messages.push({","                ruleId: null,","                fatal: true,","                severity: 2,","                source: null,","                message: ex.message,","                line: 0,","                column: 0","            });","","            return null;","        }","","        // merge in any additional parser options","        if (config.parserOptions) {","            parserOptions = Object.assign({}, config.parserOptions, parserOptions);","        }","","        /*","         * Check for parsing errors first. If there's a parsing error, nothing","         * else can happen. However, a parsing error does not throw an error","         * from this method - it's just considered a fatal error message, a","         * problem that ESLint identified just like any other.","         */","        try {","            if (typeof parser.parseForESLint === \"function\") {","                return parser.parseForESLint(text, parserOptions);","            }","            return parser.parse(text, parserOptions);","","        } catch (ex) {","","            // If the message includes a leading line number, strip it:","            const message = ex.message.replace(/^line \\d+:/i, \"\").trim();","            const source = (ex.lineNumber) ? SourceCode.splitLines(text)[ex.lineNumber - 1] : null;","","            messages.push({","                ruleId: null,","                fatal: true,","                severity: 2,","                source,","                message: `Parsing error: ${message}`,","","                line: ex.lineNumber,","                column: ex.column","            });","","            return null;","        }","    }","","    /**","     * Get the severity level of a rule (0 - none, 1 - warning, 2 - error)","     * Returns 0 if the rule config is not valid (an Array or a number)","     * @param {Array|number} ruleConfig rule configuration","     * @returns {number} 0, 1, or 2, indicating rule severity","     */","    function getRuleSeverity(ruleConfig) {","        if (typeof ruleConfig === \"number\") {","            return ruleConfig;","        } else if (Array.isArray(ruleConfig)) {","            return ruleConfig[0];","        }","        return 0;","","    }","","    /**","     * Get the options for a rule (not including severity), if any","     * @param {Array|number} ruleConfig rule configuration","     * @returns {Array} of rule options, empty Array if none","     */","    function getRuleOptions(ruleConfig) {","        if (Array.isArray(ruleConfig)) {","            return ruleConfig.slice(1);","        }","        return [];","","    }","","    // set unlimited listeners (see https://github.com/eslint/eslint/issues/524)","    api.setMaxListeners(0);","","    /**","     * Resets the internal state of the object.","     * @returns {void}","     */","    api.reset = function() {","        this.removeAllListeners();","        messages = [];","        currentConfig = null;","        currentScopes = null;","        scopeManager = null;","        traverser = null;","        reportingConfig = [];","        sourceCode = null;","    };","","    /**","     * Configuration object for the `verify` API. A JS representation of the eslintrc files.","     * @typedef {Object} ESLintConfig","     * @property {Object} rules The rule configuration to verify against.","     * @property {string} [parser] Parser to use when generatig the AST.","     * @property {Object} [parserOptions] Options for the parsed used.","     * @property {Object} [settings] Global settings passed to each rule.","     * @property {Object} [env] The environment to verify in.","     * @property {Object} [globals] Available globalsto the code.","     */","","    /**","     * Verifies the text against the rules specified by the second argument.","     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.","     * @param {ESLintConfig} config An ESLintConfig instance to configure everything.","     * @param {(string|Object)} [filenameOrOptions] The optional filename of the file being checked.","     *      If this is not set, the filename will default to '<input>' in the rule context. If","     *      an object, then it has \"filename\", \"saveState\", and \"allowInlineConfig\" properties.","     * @param {boolean} [saveState] Indicates if the state from the last run should be saved.","     *      Mostly useful for testing purposes.","     * @param {boolean} [filenameOrOptions.allowInlineConfig] Allow/disallow inline comments' ability to change config once it is set. Defaults to true if not supplied.","     *      Useful if you want to validate JS without comments overriding rules.","     * @returns {Object[]} The results as an array of messages or null if no messages.","     */","    api.verify = function(textOrSourceCode, config, filenameOrOptions, saveState) {","        const text = (typeof textOrSourceCode === \"string\") ? textOrSourceCode : null;","        let ast,","            parseResult,","            shebang,","            allowInlineConfig;","","        // evaluate arguments","        if (typeof filenameOrOptions === \"object\") {","            currentFilename = filenameOrOptions.filename;","            allowInlineConfig = filenameOrOptions.allowInlineConfig;","            saveState = filenameOrOptions.saveState;","        } else {","            currentFilename = filenameOrOptions;","        }","","        if (!saveState) {","            this.reset();","        }","","        // search and apply \"eslint-env *\".","        const envInFile = findEslintEnv(text || textOrSourceCode.text);","","        config = Object.assign({}, config);","","        if (envInFile) {","            if (config.env) {","                config.env = Object.assign({}, config.env, envInFile);","            } else {","                config.env = envInFile;","            }","        }","","        // process initial config to make it safe to extend","        config = prepareConfig(config);","","        // only do this for text","        if (text !== null) {","","            // there's no input, just exit here","            if (text.trim().length === 0) {","                sourceCode = new SourceCode(text, blankScriptAST);","                return messages;","            }","","            parseResult = parse(","                stripUnicodeBOM(text).replace(/^#!([^\\r\\n]+)/, (match, captured) => {","                    shebang = captured;","                    return `//${captured}`;","                }),","                config,","                currentFilename","            );","","            // if this result is from a parseForESLint() method, normalize","            if (parseResult && parseResult.ast) {","                ast = parseResult.ast;","            } else {","                ast = parseResult;","                parseResult = null;","            }","","            if (ast) {","                sourceCode = new SourceCode(text, ast);","            }","","        } else {","            sourceCode = textOrSourceCode;","            ast = sourceCode.ast;","        }","","        // if espree failed to parse the file, there's no sense in setting up rules","        if (ast) {","","            // parse global comments and modify config","            if (allowInlineConfig !== false) {","                config = modifyConfigsFromComments(currentFilename, ast, config, reportingConfig, messages);","            }","","            // ensure that severities are normalized in the config","            ConfigOps.normalize(config);","","            // enable appropriate rules","            Object.keys(config.rules).filter(key => getRuleSeverity(config.rules[key]) > 0).forEach(key => {","                let ruleCreator;","","                ruleCreator = rules.get(key);","","                if (!ruleCreator) {","                    const replacementMsg = getRuleReplacementMessage(key);","","                    if (replacementMsg) {","                        ruleCreator = createStubRule(replacementMsg);","                    } else {","                        ruleCreator = createStubRule(`Definition for rule '${key}' was not found`);","                    }","                    rules.define(key, ruleCreator);","                }","","                const severity = getRuleSeverity(config.rules[key]);","                const options = getRuleOptions(config.rules[key]);","","                try {","                    const ruleContext = new RuleContext(","                        key, api, severity, options,","                        config.settings, config.parserOptions, config.parser,","                        ruleCreator.meta,","                        (parseResult && parseResult.services ? parseResult.services : {})","                    );","","                    const rule = ruleCreator.create ? ruleCreator.create(ruleContext)","                        : ruleCreator(ruleContext);","","                    // add all the selectors from the rule as listeners","                    Object.keys(rule).forEach(selector => {","                        api.on(selector, timing.enabled","                            ? timing.time(key, rule[selector])","                            : rule[selector]","                        );","                    });","                } catch (ex) {","                    ex.message = `Error while loading rule '${key}': ${ex.message}`;","                    throw ex;","                }","            });","","            // save config so rules can access as necessary","            currentConfig = config;","            traverser = new Traverser();","","            const ecmaFeatures = currentConfig.parserOptions.ecmaFeatures || {};","            const ecmaVersion = currentConfig.parserOptions.ecmaVersion || 5;","","            // gather scope data that may be needed by the rules","            scopeManager = escope.analyze(ast, {","                ignoreEval: true,","                nodejsScope: ecmaFeatures.globalReturn,","                impliedStrict: ecmaFeatures.impliedStrict,","                ecmaVersion,","                sourceType: currentConfig.parserOptions.sourceType || \"script\",","                fallback: Traverser.getKeys","            });","","            currentScopes = scopeManager.scopes;","","            // augment global scope with declared global variables","            addDeclaredGlobals(ast, currentScopes[0], currentConfig);","","            // remove shebang comments","            if (shebang && ast.comments.length && ast.comments[0].value === shebang) {","                ast.comments.splice(0, 1);","","                if (ast.body.length && ast.body[0].leadingComments && ast.body[0].leadingComments[0].value === shebang) {","                    ast.body[0].leadingComments.splice(0, 1);","                }","            }","","            let eventGenerator = new NodeEventGenerator(api);","","            eventGenerator = new CodePathAnalyzer(eventGenerator);","            eventGenerator = new CommentEventGenerator(eventGenerator, sourceCode);","","            /*","             * Each node has a type property. Whenever a particular type of","             * node is found, an event is fired. This allows any listeners to","             * automatically be informed that this type of node has been found","             * and react accordingly.","             */","            traverser.traverse(ast, {","                enter(node, parent) {","                    node.parent = parent;","                    eventGenerator.enterNode(node);","                },","                leave(node) {","                    eventGenerator.leaveNode(node);","                }","            });","        }","","        // sort by line and column","        messages.sort((a, b) => {","            const lineDiff = a.line - b.line;","","            if (lineDiff === 0) {","                return a.column - b.column;","            }","            return lineDiff;","","        });","","        return messages;","    };","","    /**","     * Reports a message from one of the rules.","     * @param {string} ruleId The ID of the rule causing the message.","     * @param {number} severity The severity level of the rule as configured.","     * @param {ASTNode} node The AST node that the message relates to.","     * @param {Object=} location An object containing the error line and column","     *      numbers. If location is not provided the node's start location will","     *      be used.","     * @param {string} message The actual message.","     * @param {Object} opts Optional template data which produces a formatted message","     *     with symbols being replaced by this object's values.","     * @param {Object} fix A fix command description.","     * @param {Object} meta Metadata of the rule","     * @returns {void}","     */","    api.report = function(ruleId, severity, node, location, message, opts, fix, meta) {","        if (node) {","            assert.strictEqual(typeof node, \"object\", \"Node must be an object\");","        }","","        if (typeof location === \"string\") {","            assert.ok(node, \"Node must be provided when reporting error if location is not provided\");","","            meta = fix;","            fix = opts;","            opts = message;","            message = location;","            location = node.loc.start;","        }","","        // Store end location.","        const endLocation = location.end;","","        location = location.start || location;","","        if (isDisabledByReportingConfig(reportingConfig, ruleId, location)) {","            return;","        }","","        if (opts) {","            message = message.replace(/\\{\\{\\s*([^{}]+?)\\s*\\}\\}/g, (fullMatch, term) => {","                if (term in opts) {","                    return opts[term];","                }","","                // Preserve old behavior: If parameter name not provided, don't replace it.","                return fullMatch;","            });","        }","","        const problem = {","            ruleId,","            severity,","            message,","            line: location.line,","            column: location.column + 1,   // switch to 1-base instead of 0-base","            nodeType: node && node.type,","            source: sourceCode.lines[location.line - 1] || \"\"","        };","","        // Define endLine and endColumn if exists.","        if (endLocation) {","            problem.endLine = endLocation.line;","            problem.endColumn = endLocation.column + 1;   // switch to 1-base instead of 0-base","        }","","        // ensure there's range and text properties, otherwise it's not a valid fix","        if (fix && Array.isArray(fix.range) && (typeof fix.text === \"string\")) {","","            // If rule uses fix, has metadata, but has no metadata.fixable, we should throw","            if (meta && !meta.fixable) {","                throw new Error(\"Fixable rules should export a `meta.fixable` property.\");","            }","","            problem.fix = fix;","        }","","        messages.push(problem);","    };","","    /**","     * Gets the SourceCode object representing the parsed source.","     * @returns {SourceCode} The SourceCode object.","     */","    api.getSourceCode = function() {","        return sourceCode;","    };","","    // methods that exist on SourceCode object","    const externalMethods = {","        getSource: \"getText\",","        getSourceLines: \"getLines\",","        getAllComments: \"getAllComments\",","        getNodeByRangeIndex: \"getNodeByRangeIndex\",","        getComments: \"getComments\",","        getJSDocComment: \"getJSDocComment\",","        getFirstToken: \"getFirstToken\",","        getFirstTokens: \"getFirstTokens\",","        getLastToken: \"getLastToken\",","        getLastTokens: \"getLastTokens\",","        getTokenAfter: \"getTokenAfter\",","        getTokenBefore: \"getTokenBefore\",","        getTokenByRangeStart: \"getTokenByRangeStart\",","        getTokens: \"getTokens\",","        getTokensAfter: \"getTokensAfter\",","        getTokensBefore: \"getTokensBefore\",","        getTokensBetween: \"getTokensBetween\"","    };","","    // copy over methods","    Object.keys(externalMethods).forEach(methodName => {","        const exMethodName = externalMethods[methodName];","","        // All functions expected to have less arguments than 5.","        api[methodName] = function(a, b, c, d, e) {","            if (sourceCode) {","                return sourceCode[exMethodName](a, b, c, d, e);","            }","            return null;","        };","    });","","    /**","     * Gets nodes that are ancestors of current node.","     * @returns {ASTNode[]} Array of objects representing ancestors.","     */","    api.getAncestors = function() {","        return traverser.parents();","    };","","    /**","     * Gets the scope for the current node.","     * @returns {Object} An object representing the current node's scope.","     */","    api.getScope = function() {","        const parents = traverser.parents();","","        // Don't do this for Program nodes - they have no parents","        if (parents.length) {","","            // if current node introduces a scope, add it to the list","            const current = traverser.current();","","            if (currentConfig.parserOptions.ecmaVersion >= 6) {","                if ([\"BlockStatement\", \"SwitchStatement\", \"CatchClause\", \"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"].indexOf(current.type) >= 0) {","                    parents.push(current);","                }","            } else {","                if ([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"].indexOf(current.type) >= 0) {","                    parents.push(current);","                }","            }","","            // Ascend the current node's parents","            for (let i = parents.length - 1; i >= 0; --i) {","","                // Get the innermost scope","                const scope = scopeManager.acquire(parents[i], true);","","                if (scope) {","                    if (scope.type === \"function-expression-name\") {","                        return scope.childScopes[0];","                    }","                    return scope;","","                }","","            }","","        }","","        return currentScopes[0];","    };","","    /**","     * Record that a particular variable has been used in code","     * @param {string} name The name of the variable to mark as used","     * @returns {boolean} True if the variable was found and marked as used,","     *      false if not.","     */","    api.markVariableAsUsed = function(name) {","        const hasGlobalReturn = currentConfig.parserOptions.ecmaFeatures && currentConfig.parserOptions.ecmaFeatures.globalReturn,","            specialScope = hasGlobalReturn || currentConfig.parserOptions.sourceType === \"module\";","        let scope = this.getScope(),","            i,","            len;","","        // Special Node.js scope means we need to start one level deeper","        if (scope.type === \"global\" && specialScope) {","            scope = scope.childScopes[0];","        }","","        do {","            const variables = scope.variables;","","            for (i = 0, len = variables.length; i < len; i++) {","                if (variables[i].name === name) {","                    variables[i].eslintUsed = true;","                    return true;","                }","            }","        } while ((scope = scope.upper));","","        return false;","    };","","    /**","     * Gets the filename for the currently parsed source.","     * @returns {string} The filename associated with the source being parsed.","     *     Defaults to \"<input>\" if no filename info is present.","     */","    api.getFilename = function() {","        if (typeof currentFilename === \"string\") {","            return currentFilename;","        }","        return \"<input>\";","","    };","","    /**","     * Defines a new linting rule.","     * @param {string} ruleId A unique rule identifier","     * @param {Function} ruleModule Function from context to object mapping AST node types to event handlers","     * @returns {void}","     */","    const defineRule = api.defineRule = function(ruleId, ruleModule) {","        rules.define(ruleId, ruleModule);","    };","","    /**","     * Defines many new linting rules.","     * @param {Object} rulesToDefine map from unique rule identifier to rule","     * @returns {void}","     */","    api.defineRules = function(rulesToDefine) {","        Object.getOwnPropertyNames(rulesToDefine).forEach(ruleId => {","            defineRule(ruleId, rulesToDefine[ruleId]);","        });","    };","","    /**","     * Gets the default eslint configuration.","     * @returns {Object} Object mapping rule IDs to their default configurations","     */","    api.defaults = function() {","        return require(\"../conf/eslint-recommended\");","    };","","    /**","     * Gets an object with all loaded rules.","     * @returns {Map} All loaded rules","     */","    api.getRules = function() {","        return rules.getAllLoadedRules();","    };","","    api.version = pkg.version;","","    /**","     * Gets variables that are declared by a specified node.","     *","     * The variables are its `defs[].node` or `defs[].parent` is same as the specified node.","     * Specifically, below:","     *","     * - `VariableDeclaration` - variables of its all declarators.","     * - `VariableDeclarator` - variables.","     * - `FunctionDeclaration`/`FunctionExpression` - its function name and parameters.","     * - `ArrowFunctionExpression` - its parameters.","     * - `ClassDeclaration`/`ClassExpression` - its class name.","     * - `CatchClause` - variables of its exception.","     * - `ImportDeclaration` - variables of  its all specifiers.","     * - `ImportSpecifier`/`ImportDefaultSpecifier`/`ImportNamespaceSpecifier` - a variable.","     * - others - always an empty array.","     *","     * @param {ASTNode} node A node to get.","     * @returns {escope.Variable[]} Variables that are declared by the node.","     */","    api.getDeclaredVariables = function(node) {","        return (scopeManager && scopeManager.getDeclaredVariables(node)) || [];","    };","","    return api;","","}());",""],"l":{"12":1,"57":1,"58":0,"61":0,"63":0,"64":0,"65":0,"67":0,"68":0,"70":0,"71":0,"72":0,"75":0,"81":0,"91":1,"92":0,"95":0,"96":0,"102":0,"103":0,"112":0,"113":0,"114":0,"115":0,"118":0,"130":0,"138":1,"139":0,"142":0,"144":0,"145":0,"146":0,"147":0,"149":0,"151":0,"163":1,"164":0,"169":0,"171":0,"172":0,"173":0,"176":0,"177":0,"182":0,"183":0,"184":0,"186":0,"187":0,"189":0,"190":0,"191":0,"192":0,"193":0,"195":0,"198":0,"199":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"208":0,"212":0,"213":0,"215":0,"216":0,"225":0,"226":0,"227":0,"229":0,"235":0,"236":0,"238":0,"241":0,"253":1,"255":0,"256":0,"257":0,"264":0,"280":1,"281":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"295":0,"297":0,"298":0,"299":0,"302":0,"303":0,"304":0,"321":1,"323":0,"329":0,"331":0,"333":0,"334":0,"336":0,"337":0,"339":0,"340":0,"342":0,"343":0,"347":0,"348":0,"351":0,"352":0,"355":0,"356":0,"359":0,"360":0,"363":0,"365":0,"366":0,"368":0,"369":0,"371":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"389":0,"390":0,"392":0,"393":0,"396":0,"398":0,"408":1,"410":0,"412":0,"414":0,"417":0,"421":0,"430":1,"433":0,"434":0,"439":0,"440":0,"443":0,"451":1,"453":0,"454":0,"456":0,"457":0,"459":0,"460":0,"461":0,"463":0,"464":0,"466":0,"467":0,"469":0,"475":0,"476":0,"477":0,"479":0,"480":0,"485":0,"493":0,"495":0,"496":0,"497":0,"501":0,"504":0,"506":0,"514":1,"521":1,"522":0,"524":0,"529":0,"530":0,"532":0,"541":1,"542":0,"543":0,"545":0,"548":0,"551":1,"558":1,"559":0,"561":0,"563":0,"564":0,"567":0,"576":1,"583":0,"584":0,"586":0,"597":1,"599":1,"600":1,"620":1,"622":0,"633":0,"634":0,"636":0,"646":0,"650":0,"651":0,"660":0,"661":0,"662":0,"664":0,"669":0,"670":0,"672":0,"683":0,"693":1,"694":0,"695":0,"696":0,"697":0,"699":0,"708":1,"709":0,"710":0,"712":0,"717":1,"723":1,"724":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"731":0,"758":1,"759":0,"760":0,"766":0,"767":0,"768":0,"769":0,"771":0,"774":0,"775":0,"779":0,"781":0,"783":0,"784":0,"785":0,"787":0,"792":0,"795":0,"798":0,"799":0,"800":0,"803":0,"805":0,"806":0,"813":0,"814":0,"816":0,"817":0,"820":0,"821":0,"825":0,"826":0,"830":0,"833":0,"834":0,"838":0,"841":0,"842":0,"844":0,"846":0,"847":0,"849":0,"850":0,"852":0,"854":0,"857":0,"858":0,"860":0,"861":0,"868":0,"872":0,"873":0,"879":0,"880":0,"885":0,"886":0,"888":0,"889":0,"892":0,"901":0,"904":0,"907":0,"908":0,"910":0,"911":0,"915":0,"917":0,"918":0,"926":0,"928":0,"929":0,"932":0,"938":0,"939":0,"941":0,"942":0,"944":0,"948":0,"966":1,"967":0,"968":0,"971":0,"972":0,"974":0,"975":0,"976":0,"977":0,"978":0,"982":0,"984":0,"986":0,"987":0,"990":0,"991":0,"992":0,"993":0,"997":0,"1001":0,"1012":0,"1013":0,"1014":0,"1018":0,"1021":0,"1022":0,"1025":0,"1028":0,"1035":1,"1036":0,"1040":1,"1061":1,"1062":17,"1065":17,"1066":0,"1067":0,"1069":0,"1077":1,"1078":0,"1085":1,"1086":0,"1089":0,"1092":0,"1094":0,"1095":0,"1096":0,"1099":0,"1100":0,"1105":0,"1108":0,"1110":0,"1111":0,"1112":0,"1114":0,"1122":0,"1131":1,"1132":0,"1134":0,"1139":0,"1140":0,"1143":0,"1144":0,"1146":0,"1147":0,"1148":0,"1149":0,"1154":0,"1162":1,"1163":0,"1164":0,"1166":0,"1176":1,"1177":0,"1185":1,"1186":0,"1187":0,"1195":1,"1196":0,"1203":1,"1204":0,"1207":1,"1228":1,"1229":0,"1232":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/conf/eslint-recommended.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/conf/eslint-recommended.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":264,"column":2}}},"branchMap":{},"code":["/**"," * @fileoverview Configuration applied when a user configuration extends from"," * eslint:recommended."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","/* eslint sort-keys: [\"error\", \"asc\"], quote-props: [\"error\", \"consistent\"] */","/* eslint-disable sort-keys */","","module.exports = {","    parser: \"espree\",","    ecmaFeatures: {},","","    rules: {","","        /* eslint-enable sort-keys */","        \"accessor-pairs\": \"off\",","        \"array-bracket-spacing\": \"off\",","        \"array-callback-return\": \"off\",","        \"arrow-body-style\": \"off\",","        \"arrow-parens\": \"off\",","        \"arrow-spacing\": \"off\",","        \"block-scoped-var\": \"off\",","        \"block-spacing\": \"off\",","        \"brace-style\": \"off\",","        \"callback-return\": \"off\",","        \"camelcase\": \"off\",","        \"capitalized-comments\": \"off\",","        \"class-methods-use-this\": \"off\",","        \"comma-dangle\": \"off\",","        \"comma-spacing\": \"off\",","        \"comma-style\": \"off\",","        \"complexity\": \"off\",","        \"computed-property-spacing\": \"off\",","        \"consistent-return\": \"off\",","        \"consistent-this\": \"off\",","        \"constructor-super\": \"error\",","        \"curly\": \"off\",","        \"default-case\": \"off\",","        \"dot-location\": \"off\",","        \"dot-notation\": \"off\",","        \"eol-last\": \"off\",","        \"eqeqeq\": \"off\",","        \"func-call-spacing\": \"off\",","        \"func-name-matching\": \"off\",","        \"func-names\": \"off\",","        \"func-style\": \"off\",","        \"generator-star-spacing\": \"off\",","        \"global-require\": \"off\",","        \"guard-for-in\": \"off\",","        \"handle-callback-err\": \"off\",","        \"id-blacklist\": \"off\",","        \"id-length\": \"off\",","        \"id-match\": \"off\",","        \"indent\": \"off\",","        \"init-declarations\": \"off\",","        \"jsx-quotes\": \"off\",","        \"key-spacing\": \"off\",","        \"keyword-spacing\": \"off\",","        \"line-comment-position\": \"off\",","        \"linebreak-style\": \"off\",","        \"lines-around-comment\": \"off\",","        \"lines-around-directive\": \"off\",","        \"max-depth\": \"off\",","        \"max-len\": \"off\",","        \"max-lines\": \"off\",","        \"max-nested-callbacks\": \"off\",","        \"max-params\": \"off\",","        \"max-statements\": \"off\",","        \"max-statements-per-line\": \"off\",","        \"multiline-ternary\": \"off\",","        \"new-cap\": \"off\",","        \"new-parens\": \"off\",","        \"newline-after-var\": \"off\",","        \"newline-before-return\": \"off\",","        \"newline-per-chained-call\": \"off\",","        \"no-alert\": \"off\",","        \"no-array-constructor\": \"off\",","        \"no-await-in-loop\": \"off\",","        \"no-bitwise\": \"off\",","        \"no-caller\": \"off\",","        \"no-case-declarations\": \"error\",","        \"no-catch-shadow\": \"off\",","        \"no-class-assign\": \"error\",","        \"no-compare-neg-zero\": \"off\",","        \"no-cond-assign\": \"error\",","        \"no-confusing-arrow\": \"off\",","        \"no-console\": \"error\",","        \"no-const-assign\": \"error\",","        \"no-constant-condition\": \"error\",","        \"no-continue\": \"off\",","        \"no-control-regex\": \"error\",","        \"no-debugger\": \"error\",","        \"no-delete-var\": \"error\",","        \"no-div-regex\": \"off\",","        \"no-dupe-args\": \"error\",","        \"no-dupe-class-members\": \"error\",","        \"no-dupe-keys\": \"error\",","        \"no-duplicate-case\": \"error\",","        \"no-duplicate-imports\": \"off\",","        \"no-else-return\": \"off\",","        \"no-empty\": \"error\",","        \"no-empty-character-class\": \"error\",","        \"no-empty-function\": \"off\",","        \"no-empty-pattern\": \"error\",","        \"no-eq-null\": \"off\",","        \"no-eval\": \"off\",","        \"no-ex-assign\": \"error\",","        \"no-extend-native\": \"off\",","        \"no-extra-bind\": \"off\",","        \"no-extra-boolean-cast\": \"error\",","        \"no-extra-label\": \"off\",","        \"no-extra-parens\": \"off\",","        \"no-extra-semi\": \"error\",","        \"no-fallthrough\": \"error\",","        \"no-floating-decimal\": \"off\",","        \"no-func-assign\": \"error\",","        \"no-global-assign\": \"error\",","        \"no-implicit-coercion\": \"off\",","        \"no-implicit-globals\": \"off\",","        \"no-implied-eval\": \"off\",","        \"no-inline-comments\": \"off\",","        \"no-inner-declarations\": \"error\",","        \"no-invalid-regexp\": \"error\",","        \"no-invalid-this\": \"off\",","        \"no-irregular-whitespace\": \"error\",","        \"no-iterator\": \"off\",","        \"no-label-var\": \"off\",","        \"no-labels\": \"off\",","        \"no-lone-blocks\": \"off\",","        \"no-lonely-if\": \"off\",","        \"no-loop-func\": \"off\",","        \"no-magic-numbers\": \"off\",","        \"no-mixed-operators\": \"off\",","        \"no-mixed-requires\": \"off\",","        \"no-mixed-spaces-and-tabs\": \"error\",","        \"no-multi-assign\": \"off\",","        \"no-multi-spaces\": \"off\",","        \"no-multi-str\": \"off\",","        \"no-multiple-empty-lines\": \"off\",","        \"no-native-reassign\": \"off\",","        \"no-negated-condition\": \"off\",","        \"no-negated-in-lhs\": \"off\",","        \"no-nested-ternary\": \"off\",","        \"no-new\": \"off\",","        \"no-new-func\": \"off\",","        \"no-new-object\": \"off\",","        \"no-new-require\": \"off\",","        \"no-new-symbol\": \"error\",","        \"no-new-wrappers\": \"off\",","        \"no-obj-calls\": \"error\",","        \"no-octal\": \"error\",","        \"no-octal-escape\": \"off\",","        \"no-param-reassign\": \"off\",","        \"no-path-concat\": \"off\",","        \"no-plusplus\": \"off\",","        \"no-process-env\": \"off\",","        \"no-process-exit\": \"off\",","        \"no-proto\": \"off\",","        \"no-prototype-builtins\": \"off\",","        \"no-redeclare\": \"error\",","        \"no-regex-spaces\": \"error\",","        \"no-restricted-globals\": \"off\",","        \"no-restricted-imports\": \"off\",","        \"no-restricted-modules\": \"off\",","        \"no-restricted-properties\": \"off\",","        \"no-restricted-syntax\": \"off\",","        \"no-return-assign\": \"off\",","        \"no-return-await\": \"off\",","        \"no-script-url\": \"off\",","        \"no-self-assign\": \"error\",","        \"no-self-compare\": \"off\",","        \"no-sequences\": \"off\",","        \"no-shadow\": \"off\",","        \"no-shadow-restricted-names\": \"off\",","        \"no-spaced-func\": \"off\",","        \"no-sparse-arrays\": \"error\",","        \"no-sync\": \"off\",","        \"no-tabs\": \"off\",","        \"no-template-curly-in-string\": \"off\",","        \"no-ternary\": \"off\",","        \"no-this-before-super\": \"error\",","        \"no-throw-literal\": \"off\",","        \"no-trailing-spaces\": \"off\",","        \"no-undef\": \"error\",","        \"no-undef-init\": \"off\",","        \"no-undefined\": \"off\",","        \"no-underscore-dangle\": \"off\",","        \"no-unexpected-multiline\": \"error\",","        \"no-unmodified-loop-condition\": \"off\",","        \"no-unneeded-ternary\": \"off\",","        \"no-unreachable\": \"error\",","        \"no-unsafe-finally\": \"error\",","        \"no-unsafe-negation\": \"error\",","        \"no-unused-expressions\": \"off\",","        \"no-unused-labels\": \"error\",","        \"no-unused-vars\": \"error\",","        \"no-use-before-define\": \"off\",","        \"no-useless-call\": \"off\",","        \"no-useless-computed-key\": \"off\",","        \"no-useless-concat\": \"off\",","        \"no-useless-constructor\": \"off\",","        \"no-useless-escape\": \"off\",","        \"no-useless-rename\": \"off\",","        \"no-useless-return\": \"off\",","        \"no-var\": \"off\",","        \"no-void\": \"off\",","        \"no-warning-comments\": \"off\",","        \"no-whitespace-before-property\": \"off\",","        \"no-with\": \"off\",","        \"nonblock-statement-body-position\": \"off\",","        \"object-curly-newline\": \"off\",","        \"object-curly-spacing\": [\"off\", \"never\"],","        \"object-property-newline\": \"off\",","        \"object-shorthand\": \"off\",","        \"one-var\": \"off\",","        \"one-var-declaration-per-line\": \"off\",","        \"operator-assignment\": \"off\",","        \"operator-linebreak\": \"off\",","        \"padded-blocks\": \"off\",","        \"prefer-arrow-callback\": \"off\",","        \"prefer-const\": \"off\",","        \"prefer-destructuring\": \"off\",","        \"prefer-numeric-literals\": \"off\",","        \"prefer-promise-reject-errors\": \"off\",","        \"prefer-reflect\": \"off\",","        \"prefer-rest-params\": \"off\",","        \"prefer-spread\": \"off\",","        \"prefer-template\": \"off\",","        \"quote-props\": \"off\",","        \"quotes\": \"off\",","        \"radix\": \"off\",","        \"require-await\": \"off\",","        \"require-jsdoc\": \"off\",","        \"require-yield\": \"error\",","        \"rest-spread-spacing\": \"off\",","        \"semi\": \"off\",","        \"semi-spacing\": \"off\",","        \"sort-imports\": \"off\",","        \"sort-keys\": \"off\",","        \"sort-vars\": \"off\",","        \"space-before-blocks\": \"off\",","        \"space-before-function-paren\": \"off\",","        \"space-in-parens\": \"off\",","        \"space-infix-ops\": \"off\",","        \"space-unary-ops\": \"off\",","        \"spaced-comment\": \"off\",","        \"strict\": \"off\",","        \"symbol-description\": \"off\",","        \"template-curly-spacing\": \"off\",","        \"template-tag-spacing\": \"off\",","        \"unicode-bom\": \"off\",","        \"use-isnan\": \"error\",","        \"valid-jsdoc\": \"off\",","        \"valid-typeof\": \"error\",","        \"vars-on-top\": \"off\",","        \"wrap-iife\": \"off\",","        \"wrap-regex\": \"off\",","        \"yield-star-spacing\": \"off\",","        \"yoda\": \"off\"","    }","};",""],"l":{"12":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":1,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":1,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":1,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":1},"b":{"1":[0,0,0,0,0,0,0],"2":[0,0],"3":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0,0,0,0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0,0,0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"isCaseNode","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":26}}},"2":{"name":"isForkingByTrueOrFalse","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":38}}},"3":{"name":"getBooleanValueIfSimpleConstant","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":47}}},"4":{"name":"isIdentifierReference","line":85,"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":37}}},"5":{"name":"forwardCurrentToHead","line":137,"loc":{"start":{"line":137,"column":0},"end":{"line":137,"column":46}}},"6":{"name":"leaveFromCurrentSegment","line":193,"loc":{"start":{"line":193,"column":0},"end":{"line":193,"column":49}}},"7":{"name":"preprocess","line":223,"loc":{"start":{"line":223,"column":0},"end":{"line":223,"column":36}}},"8":{"name":"processCodePathToEnter","line":330,"loc":{"start":{"line":330,"column":0},"end":{"line":330,"column":48}}},"9":{"name":"processCodePathToExit","line":421,"loc":{"start":{"line":421,"column":0},"end":{"line":421,"column":47}}},"10":{"name":"postprocess","line":529,"loc":{"start":{"line":529,"column":0},"end":{"line":529,"column":37}}},"11":{"name":"(anonymous_11)","line":573,"loc":{"start":{"line":573,"column":15},"end":{"line":573,"column":32}}},"12":{"name":"(anonymous_12)","line":589,"loc":{"start":{"line":589,"column":13},"end":{"line":589,"column":20}}},"13":{"name":"(anonymous_13)","line":614,"loc":{"start":{"line":614,"column":13},"end":{"line":614,"column":20}}},"14":{"name":"(anonymous_14)","line":638,"loc":{"start":{"line":638,"column":12},"end":{"line":638,"column":37}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":17,"column":39}},"2":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"3":{"start":{"line":30,"column":4},"end":{"line":30,"column":30}},"4":{"start":{"line":40,"column":0},"end":{"line":57,"column":1}},"5":{"start":{"line":41,"column":4},"end":{"line":41,"column":31}},"6":{"start":{"line":43,"column":4},"end":{"line":56,"column":5}},"7":{"start":{"line":49,"column":12},"end":{"line":49,"column":40}},"8":{"start":{"line":52,"column":12},"end":{"line":52,"column":24}},"9":{"start":{"line":55,"column":12},"end":{"line":55,"column":25}},"10":{"start":{"line":70,"column":0},"end":{"line":75,"column":1}},"11":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"12":{"start":{"line":72,"column":8},"end":{"line":72,"column":35}},"13":{"start":{"line":74,"column":4},"end":{"line":74,"column":18}},"14":{"start":{"line":85,"column":0},"end":{"line":122,"column":1}},"15":{"start":{"line":86,"column":4},"end":{"line":86,"column":31}},"16":{"start":{"line":88,"column":4},"end":{"line":121,"column":5}},"17":{"start":{"line":98,"column":12},"end":{"line":98,"column":25}},"18":{"start":{"line":106,"column":12},"end":{"line":106,"column":38}},"19":{"start":{"line":110,"column":12},"end":{"line":114,"column":14}},"20":{"start":{"line":117,"column":12},"end":{"line":117,"column":39}},"21":{"start":{"line":120,"column":12},"end":{"line":120,"column":24}},"22":{"start":{"line":137,"column":0},"end":{"line":183,"column":1}},"23":{"start":{"line":138,"column":4},"end":{"line":138,"column":39}},"24":{"start":{"line":139,"column":4},"end":{"line":139,"column":46}},"25":{"start":{"line":140,"column":4},"end":{"line":140,"column":50}},"26":{"start":{"line":141,"column":4},"end":{"line":141,"column":44}},"27":{"start":{"line":142,"column":4},"end":{"line":142,"column":70}},"28":{"start":{"line":143,"column":4},"end":{"line":143,"column":39}},"29":{"start":{"line":146,"column":4},"end":{"line":160,"column":5}},"30":{"start":{"line":147,"column":8},"end":{"line":147,"column":44}},"31":{"start":{"line":148,"column":8},"end":{"line":148,"column":38}},"32":{"start":{"line":150,"column":8},"end":{"line":159,"column":9}},"33":{"start":{"line":151,"column":12},"end":{"line":151,"column":68}},"34":{"start":{"line":153,"column":12},"end":{"line":158,"column":13}},"35":{"start":{"line":154,"column":16},"end":{"line":157,"column":26}},"36":{"start":{"line":163,"column":4},"end":{"line":163,"column":41}},"37":{"start":{"line":166,"column":4},"end":{"line":181,"column":5}},"38":{"start":{"line":167,"column":8},"end":{"line":167,"column":44}},"39":{"start":{"line":168,"column":8},"end":{"line":168,"column":38}},"40":{"start":{"line":170,"column":8},"end":{"line":180,"column":9}},"41":{"start":{"line":171,"column":12},"end":{"line":171,"column":67}},"42":{"start":{"line":173,"column":12},"end":{"line":173,"column":50}},"43":{"start":{"line":174,"column":12},"end":{"line":179,"column":13}},"44":{"start":{"line":175,"column":16},"end":{"line":178,"column":26}},"45":{"start":{"line":193,"column":0},"end":{"line":210,"column":1}},"46":{"start":{"line":194,"column":4},"end":{"line":194,"column":55}},"47":{"start":{"line":195,"column":4},"end":{"line":195,"column":50}},"48":{"start":{"line":197,"column":4},"end":{"line":207,"column":5}},"49":{"start":{"line":198,"column":8},"end":{"line":198,"column":50}},"50":{"start":{"line":200,"column":8},"end":{"line":200,"column":64}},"51":{"start":{"line":201,"column":8},"end":{"line":206,"column":9}},"52":{"start":{"line":202,"column":12},"end":{"line":205,"column":22}},"53":{"start":{"line":209,"column":4},"end":{"line":209,"column":31}},"54":{"start":{"line":223,"column":0},"end":{"line":321,"column":1}},"55":{"start":{"line":224,"column":4},"end":{"line":224,"column":39}},"56":{"start":{"line":225,"column":4},"end":{"line":225,"column":46}},"57":{"start":{"line":226,"column":4},"end":{"line":226,"column":31}},"58":{"start":{"line":228,"column":4},"end":{"line":320,"column":5}},"59":{"start":{"line":230,"column":12},"end":{"line":232,"column":13}},"60":{"start":{"line":231,"column":16},"end":{"line":231,"column":41}},"61":{"start":{"line":233,"column":12},"end":{"line":233,"column":18}},"62":{"start":{"line":243,"column":12},"end":{"line":247,"column":13}},"63":{"start":{"line":244,"column":16},"end":{"line":244,"column":41}},"64":{"start":{"line":245,"column":19},"end":{"line":247,"column":13}},"65":{"start":{"line":246,"column":16},"end":{"line":246,"column":40}},"66":{"start":{"line":248,"column":12},"end":{"line":248,"column":18}},"67":{"start":{"line":251,"column":12},"end":{"line":253,"column":13}},"68":{"start":{"line":252,"column":16},"end":{"line":252,"column":62}},"69":{"start":{"line":254,"column":12},"end":{"line":254,"column":18}},"70":{"start":{"line":257,"column":12},"end":{"line":261,"column":13}},"71":{"start":{"line":258,"column":16},"end":{"line":258,"column":39}},"72":{"start":{"line":259,"column":19},"end":{"line":261,"column":13}},"73":{"start":{"line":260,"column":16},"end":{"line":260,"column":41}},"74":{"start":{"line":262,"column":12},"end":{"line":262,"column":18}},"75":{"start":{"line":265,"column":12},"end":{"line":270,"column":13}},"76":{"start":{"line":266,"column":16},"end":{"line":266,"column":75}},"77":{"start":{"line":268,"column":16},"end":{"line":268,"column":45}},"78":{"start":{"line":269,"column":16},"end":{"line":269,"column":38}},"79":{"start":{"line":271,"column":12},"end":{"line":271,"column":18}},"80":{"start":{"line":274,"column":12},"end":{"line":279,"column":13}},"81":{"start":{"line":275,"column":16},"end":{"line":275,"column":40}},"82":{"start":{"line":277,"column":16},"end":{"line":277,"column":45}},"83":{"start":{"line":278,"column":16},"end":{"line":278,"column":77}},"84":{"start":{"line":280,"column":12},"end":{"line":280,"column":18}},"85":{"start":{"line":283,"column":12},"end":{"line":289,"column":13}},"86":{"start":{"line":284,"column":16},"end":{"line":284,"column":73}},"87":{"start":{"line":285,"column":19},"end":{"line":289,"column":13}},"88":{"start":{"line":286,"column":16},"end":{"line":286,"column":38}},"89":{"start":{"line":287,"column":19},"end":{"line":289,"column":13}},"90":{"start":{"line":288,"column":16},"end":{"line":288,"column":36}},"91":{"start":{"line":290,"column":12},"end":{"line":290,"column":18}},"92":{"start":{"line":294,"column":12},"end":{"line":301,"column":13}},"93":{"start":{"line":295,"column":16},"end":{"line":295,"column":40}},"94":{"start":{"line":296,"column":19},"end":{"line":301,"column":13}},"95":{"start":{"line":297,"column":16},"end":{"line":297,"column":41}},"96":{"start":{"line":299,"column":16},"end":{"line":299,"column":45}},"97":{"start":{"line":300,"column":16},"end":{"line":300,"column":40}},"98":{"start":{"line":302,"column":12},"end":{"line":302,"column":18}},"99":{"start":{"line":311,"column":12},"end":{"line":315,"column":13}},"100":{"start":{"line":312,"column":16},"end":{"line":312,"column":40}},"101":{"start":{"line":313,"column":16},"end":{"line":313,"column":39}},"102":{"start":{"line":314,"column":16},"end":{"line":314,"column":33}},"103":{"start":{"line":316,"column":12},"end":{"line":316,"column":18}},"104":{"start":{"line":319,"column":12},"end":{"line":319,"column":18}},"105":{"start":{"line":330,"column":0},"end":{"line":412,"column":1}},"106":{"start":{"line":331,"column":4},"end":{"line":331,"column":37}},"107":{"start":{"line":332,"column":4},"end":{"line":332,"column":56}},"108":{"start":{"line":333,"column":4},"end":{"line":333,"column":31}},"109":{"start":{"line":335,"column":4},"end":{"line":407,"column":5}},"110":{"start":{"line":340,"column":12},"end":{"line":345,"column":13}},"111":{"start":{"line":343,"column":16},"end":{"line":343,"column":53}},"112":{"start":{"line":344,"column":16},"end":{"line":344,"column":52}},"113":{"start":{"line":348,"column":12},"end":{"line":352,"column":14}},"114":{"start":{"line":353,"column":12},"end":{"line":353,"column":48}},"115":{"start":{"line":356,"column":12},"end":{"line":356,"column":57}},"116":{"start":{"line":357,"column":12},"end":{"line":357,"column":69}},"117":{"start":{"line":358,"column":12},"end":{"line":358,"column":18}},"118":{"start":{"line":361,"column":12},"end":{"line":361,"column":81}},"119":{"start":{"line":362,"column":12},"end":{"line":362,"column":18}},"120":{"start":{"line":366,"column":12},"end":{"line":366,"column":51}},"121":{"start":{"line":367,"column":12},"end":{"line":367,"column":18}},"122":{"start":{"line":370,"column":12},"end":{"line":372,"column":41}},"123":{"start":{"line":373,"column":12},"end":{"line":373,"column":18}},"124":{"start":{"line":376,"column":12},"end":{"line":376,"column":58}},"125":{"start":{"line":377,"column":12},"end":{"line":377,"column":18}},"126":{"start":{"line":386,"column":12},"end":{"line":388,"column":13}},"127":{"start":{"line":387,"column":16},"end":{"line":387,"column":33}},"128":{"start":{"line":389,"column":12},"end":{"line":389,"column":18}},"129":{"start":{"line":396,"column":12},"end":{"line":396,"column":70}},"130":{"start":{"line":397,"column":12},"end":{"line":397,"column":18}},"131":{"start":{"line":400,"column":12},"end":{"line":402,"column":13}},"132":{"start":{"line":401,"column":16},"end":{"line":401,"column":63}},"133":{"start":{"line":403,"column":12},"end":{"line":403,"column":18}},"134":{"start":{"line":406,"column":12},"end":{"line":406,"column":18}},"135":{"start":{"line":410,"column":4},"end":{"line":410,"column":41}},"136":{"start":{"line":411,"column":4},"end":{"line":411,"column":40}},"137":{"start":{"line":421,"column":0},"end":{"line":520,"column":1}},"138":{"start":{"line":422,"column":4},"end":{"line":422,"column":39}},"139":{"start":{"line":423,"column":4},"end":{"line":423,"column":46}},"140":{"start":{"line":424,"column":4},"end":{"line":424,"column":28}},"141":{"start":{"line":426,"column":4},"end":{"line":513,"column":5}},"142":{"start":{"line":430,"column":12},"end":{"line":430,"column":37}},"143":{"start":{"line":431,"column":12},"end":{"line":431,"column":18}},"144":{"start":{"line":434,"column":12},"end":{"line":434,"column":37}},"145":{"start":{"line":435,"column":12},"end":{"line":435,"column":18}},"146":{"start":{"line":444,"column":12},"end":{"line":446,"column":13}},"147":{"start":{"line":445,"column":16},"end":{"line":445,"column":59}},"148":{"start":{"line":447,"column":12},"end":{"line":449,"column":13}},"149":{"start":{"line":448,"column":16},"end":{"line":448,"column":35}},"150":{"start":{"line":450,"column":12},"end":{"line":450,"column":18}},"151":{"start":{"line":453,"column":12},"end":{"line":453,"column":34}},"152":{"start":{"line":454,"column":12},"end":{"line":454,"column":18}},"153":{"start":{"line":457,"column":12},"end":{"line":457,"column":49}},"154":{"start":{"line":458,"column":12},"end":{"line":458,"column":59}},"155":{"start":{"line":459,"column":12},"end":{"line":459,"column":31}},"156":{"start":{"line":460,"column":12},"end":{"line":460,"column":18}},"157":{"start":{"line":463,"column":12},"end":{"line":463,"column":49}},"158":{"start":{"line":464,"column":12},"end":{"line":464,"column":62}},"159":{"start":{"line":465,"column":12},"end":{"line":465,"column":31}},"160":{"start":{"line":466,"column":12},"end":{"line":466,"column":18}},"161":{"start":{"line":469,"column":12},"end":{"line":469,"column":49}},"162":{"start":{"line":470,"column":12},"end":{"line":470,"column":31}},"163":{"start":{"line":471,"column":12},"end":{"line":471,"column":31}},"164":{"start":{"line":472,"column":12},"end":{"line":472,"column":18}},"165":{"start":{"line":475,"column":12},"end":{"line":475,"column":49}},"166":{"start":{"line":476,"column":12},"end":{"line":476,"column":30}},"167":{"start":{"line":477,"column":12},"end":{"line":477,"column":31}},"168":{"start":{"line":478,"column":12},"end":{"line":478,"column":18}},"169":{"start":{"line":481,"column":12},"end":{"line":484,"column":13}},"170":{"start":{"line":482,"column":16},"end":{"line":482,"column":57}},"171":{"start":{"line":483,"column":16},"end":{"line":483,"column":35}},"172":{"start":{"line":485,"column":12},"end":{"line":485,"column":18}},"173":{"start":{"line":490,"column":12},"end":{"line":490,"column":53}},"174":{"start":{"line":491,"column":12},"end":{"line":491,"column":18}},"175":{"start":{"line":498,"column":12},"end":{"line":498,"column":35}},"176":{"start":{"line":499,"column":12},"end":{"line":499,"column":18}},"177":{"start":{"line":502,"column":12},"end":{"line":502,"column":35}},"178":{"start":{"line":503,"column":12},"end":{"line":503,"column":18}},"179":{"start":{"line":506,"column":12},"end":{"line":508,"column":13}},"180":{"start":{"line":507,"column":16},"end":{"line":507,"column":40}},"181":{"start":{"line":509,"column":12},"end":{"line":509,"column":18}},"182":{"start":{"line":512,"column":12},"end":{"line":512,"column":18}},"183":{"start":{"line":516,"column":4},"end":{"line":518,"column":5}},"184":{"start":{"line":517,"column":8},"end":{"line":517,"column":45}},"185":{"start":{"line":519,"column":4},"end":{"line":519,"column":39}},"186":{"start":{"line":529,"column":0},"end":{"line":558,"column":1}},"187":{"start":{"line":530,"column":4},"end":{"line":557,"column":5}},"188":{"start":{"line":535,"column":12},"end":{"line":535,"column":45}},"189":{"start":{"line":538,"column":12},"end":{"line":538,"column":52}},"190":{"start":{"line":541,"column":12},"end":{"line":541,"column":52}},"191":{"start":{"line":544,"column":12},"end":{"line":544,"column":55}},"192":{"start":{"line":545,"column":12},"end":{"line":545,"column":67}},"193":{"start":{"line":546,"column":12},"end":{"line":546,"column":36}},"194":{"start":{"line":548,"column":12},"end":{"line":548,"column":67}},"195":{"start":{"line":549,"column":12},"end":{"line":551,"column":13}},"196":{"start":{"line":550,"column":16},"end":{"line":550,"column":73}},"197":{"start":{"line":552,"column":12},"end":{"line":552,"column":18}},"198":{"start":{"line":556,"column":12},"end":{"line":556,"column":18}},"199":{"start":{"line":574,"column":8},"end":{"line":574,"column":39}},"200":{"start":{"line":575,"column":8},"end":{"line":575,"column":46}},"201":{"start":{"line":576,"column":8},"end":{"line":576,"column":29}},"202":{"start":{"line":577,"column":8},"end":{"line":577,"column":48}},"203":{"start":{"line":578,"column":8},"end":{"line":578,"column":32}},"204":{"start":{"line":579,"column":8},"end":{"line":579,"column":49}},"205":{"start":{"line":590,"column":8},"end":{"line":590,"column":32}},"206":{"start":{"line":593,"column":8},"end":{"line":595,"column":9}},"207":{"start":{"line":594,"column":12},"end":{"line":594,"column":35}},"208":{"start":{"line":599,"column":8},"end":{"line":599,"column":43}},"209":{"start":{"line":602,"column":8},"end":{"line":602,"column":38}},"210":{"start":{"line":604,"column":8},"end":{"line":604,"column":32}},"211":{"start":{"line":615,"column":8},"end":{"line":615,"column":32}},"212":{"start":{"line":619,"column":8},"end":{"line":619,"column":42}},"213":{"start":{"line":622,"column":8},"end":{"line":622,"column":38}},"214":{"start":{"line":625,"column":8},"end":{"line":625,"column":32}},"215":{"start":{"line":627,"column":8},"end":{"line":627,"column":32}},"216":{"start":{"line":639,"column":8},"end":{"line":647,"column":9}},"217":{"start":{"line":640,"column":12},"end":{"line":640,"column":85}},"218":{"start":{"line":641,"column":12},"end":{"line":646,"column":14}},"219":{"start":{"line":651,"column":0},"end":{"line":651,"column":34}}},"branchMap":{"1":{"line":43,"type":"switch","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":37}},{"start":{"line":45,"column":8},"end":{"line":45,"column":27}},{"start":{"line":46,"column":8},"end":{"line":46,"column":30}},{"start":{"line":47,"column":8},"end":{"line":47,"column":32}},{"start":{"line":48,"column":8},"end":{"line":49,"column":40}},{"start":{"line":51,"column":8},"end":{"line":52,"column":24}},{"start":{"line":54,"column":8},"end":{"line":55,"column":25}}]},"2":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"3":{"line":88,"type":"switch","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":32}},{"start":{"line":90,"column":8},"end":{"line":90,"column":30}},{"start":{"line":91,"column":8},"end":{"line":91,"column":33}},{"start":{"line":92,"column":8},"end":{"line":92,"column":28}},{"start":{"line":93,"column":8},"end":{"line":93,"column":27}},{"start":{"line":94,"column":8},"end":{"line":94,"column":31}},{"start":{"line":95,"column":8},"end":{"line":95,"column":38}},{"start":{"line":96,"column":8},"end":{"line":96,"column":40}},{"start":{"line":97,"column":8},"end":{"line":98,"column":25}},{"start":{"line":100,"column":8},"end":{"line":100,"column":35}},{"start":{"line":101,"column":8},"end":{"line":101,"column":34}},{"start":{"line":102,"column":8},"end":{"line":102,"column":39}},{"start":{"line":103,"column":8},"end":{"line":103,"column":32}},{"start":{"line":104,"column":8},"end":{"line":104,"column":31}},{"start":{"line":105,"column":8},"end":{"line":106,"column":38}},{"start":{"line":108,"column":8},"end":{"line":108,"column":24}},{"start":{"line":109,"column":8},"end":{"line":114,"column":14}},{"start":{"line":116,"column":8},"end":{"line":117,"column":39}},{"start":{"line":119,"column":8},"end":{"line":120,"column":24}}]},"4":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":16},"end":{"line":111,"column":35}},{"start":{"line":112,"column":16},"end":{"line":112,"column":31}},{"start":{"line":113,"column":16},"end":{"line":113,"column":32}}]},"5":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":8},"end":{"line":150,"column":8}},{"start":{"line":150,"column":8},"end":{"line":150,"column":8}}]},"6":{"line":150,"type":"binary-expr","locations":[{"start":{"line":150,"column":12},"end":{"line":150,"column":42}},{"start":{"line":150,"column":46},"end":{"line":150,"column":60}}]},"7":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":12},"end":{"line":153,"column":12}},{"start":{"line":153,"column":12},"end":{"line":153,"column":12}}]},"8":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":8},"end":{"line":170,"column":8}},{"start":{"line":170,"column":8},"end":{"line":170,"column":8}}]},"9":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":12},"end":{"line":170,"column":42}},{"start":{"line":170,"column":46},"end":{"line":170,"column":57}}]},"10":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":12},"end":{"line":174,"column":12}},{"start":{"line":174,"column":12},"end":{"line":174,"column":12}}]},"11":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":8},"end":{"line":201,"column":8}},{"start":{"line":201,"column":8},"end":{"line":201,"column":8}}]},"12":{"line":228,"type":"switch","locations":[{"start":{"line":229,"column":8},"end":{"line":233,"column":18}},{"start":{"line":235,"column":8},"end":{"line":235,"column":37}},{"start":{"line":236,"column":8},"end":{"line":248,"column":18}},{"start":{"line":250,"column":8},"end":{"line":254,"column":18}},{"start":{"line":256,"column":8},"end":{"line":262,"column":18}},{"start":{"line":264,"column":8},"end":{"line":271,"column":18}},{"start":{"line":273,"column":8},"end":{"line":280,"column":18}},{"start":{"line":282,"column":8},"end":{"line":290,"column":18}},{"start":{"line":292,"column":8},"end":{"line":292,"column":30}},{"start":{"line":293,"column":8},"end":{"line":302,"column":18}},{"start":{"line":304,"column":8},"end":{"line":316,"column":18}},{"start":{"line":318,"column":8},"end":{"line":319,"column":18}}]},"13":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":12},"end":{"line":230,"column":12}},{"start":{"line":230,"column":12},"end":{"line":230,"column":12}}]},"14":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":12},"end":{"line":243,"column":12}},{"start":{"line":243,"column":12},"end":{"line":243,"column":12}}]},"15":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":19},"end":{"line":245,"column":19}},{"start":{"line":245,"column":19},"end":{"line":245,"column":19}}]},"16":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":12},"end":{"line":251,"column":12}},{"start":{"line":251,"column":12},"end":{"line":251,"column":12}}]},"17":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":12},"end":{"line":257,"column":12}},{"start":{"line":257,"column":12},"end":{"line":257,"column":12}}]},"18":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":19},"end":{"line":259,"column":19}},{"start":{"line":259,"column":19},"end":{"line":259,"column":19}}]},"19":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":12},"end":{"line":265,"column":12}},{"start":{"line":265,"column":12},"end":{"line":265,"column":12}}]},"20":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":12},"end":{"line":274,"column":12}},{"start":{"line":274,"column":12},"end":{"line":274,"column":12}}]},"21":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":12},"end":{"line":283,"column":12}},{"start":{"line":283,"column":12},"end":{"line":283,"column":12}}]},"22":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":19},"end":{"line":285,"column":19}},{"start":{"line":285,"column":19},"end":{"line":285,"column":19}}]},"23":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":19},"end":{"line":287,"column":19}},{"start":{"line":287,"column":19},"end":{"line":287,"column":19}}]},"24":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":12},"end":{"line":294,"column":12}},{"start":{"line":294,"column":12},"end":{"line":294,"column":12}}]},"25":{"line":296,"type":"if","locations":[{"start":{"line":296,"column":19},"end":{"line":296,"column":19}},{"start":{"line":296,"column":19},"end":{"line":296,"column":19}}]},"26":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":12},"end":{"line":311,"column":12}},{"start":{"line":311,"column":12},"end":{"line":311,"column":12}}]},"27":{"line":332,"type":"binary-expr","locations":[{"start":{"line":332,"column":16},"end":{"line":332,"column":24}},{"start":{"line":332,"column":28},"end":{"line":332,"column":55}}]},"28":{"line":335,"type":"switch","locations":[{"start":{"line":336,"column":8},"end":{"line":336,"column":23}},{"start":{"line":337,"column":8},"end":{"line":337,"column":35}},{"start":{"line":338,"column":8},"end":{"line":338,"column":34}},{"start":{"line":339,"column":8},"end":{"line":358,"column":18}},{"start":{"line":360,"column":8},"end":{"line":362,"column":18}},{"start":{"line":364,"column":8},"end":{"line":364,"column":37}},{"start":{"line":365,"column":8},"end":{"line":367,"column":18}},{"start":{"line":369,"column":8},"end":{"line":373,"column":18}},{"start":{"line":375,"column":8},"end":{"line":377,"column":18}},{"start":{"line":379,"column":8},"end":{"line":389,"column":18}},{"start":{"line":391,"column":8},"end":{"line":391,"column":30}},{"start":{"line":392,"column":8},"end":{"line":392,"column":32}},{"start":{"line":393,"column":8},"end":{"line":393,"column":28}},{"start":{"line":394,"column":8},"end":{"line":394,"column":30}},{"start":{"line":395,"column":8},"end":{"line":397,"column":18}},{"start":{"line":399,"column":8},"end":{"line":403,"column":18}},{"start":{"line":405,"column":8},"end":{"line":406,"column":18}}]},"29":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":12},"end":{"line":340,"column":12}},{"start":{"line":340,"column":12},"end":{"line":340,"column":12}}]},"30":{"line":386,"type":"if","locations":[{"start":{"line":386,"column":12},"end":{"line":386,"column":12}},{"start":{"line":386,"column":12},"end":{"line":386,"column":12}}]},"31":{"line":386,"type":"binary-expr","locations":[{"start":{"line":386,"column":16},"end":{"line":386,"column":44}},{"start":{"line":386,"column":48},"end":{"line":386,"column":72}}]},"32":{"line":400,"type":"if","locations":[{"start":{"line":400,"column":12},"end":{"line":400,"column":12}},{"start":{"line":400,"column":12},"end":{"line":400,"column":12}}]},"33":{"line":426,"type":"switch","locations":[{"start":{"line":427,"column":8},"end":{"line":427,"column":27}},{"start":{"line":428,"column":8},"end":{"line":428,"column":37}},{"start":{"line":429,"column":8},"end":{"line":431,"column":18}},{"start":{"line":433,"column":8},"end":{"line":435,"column":18}},{"start":{"line":437,"column":8},"end":{"line":450,"column":18}},{"start":{"line":452,"column":8},"end":{"line":454,"column":18}},{"start":{"line":456,"column":8},"end":{"line":460,"column":18}},{"start":{"line":462,"column":8},"end":{"line":466,"column":18}},{"start":{"line":468,"column":8},"end":{"line":472,"column":18}},{"start":{"line":474,"column":8},"end":{"line":478,"column":18}},{"start":{"line":480,"column":8},"end":{"line":485,"column":18}},{"start":{"line":487,"column":8},"end":{"line":487,"column":30}},{"start":{"line":488,"column":8},"end":{"line":488,"column":32}},{"start":{"line":489,"column":8},"end":{"line":491,"column":18}},{"start":{"line":493,"column":8},"end":{"line":493,"column":30}},{"start":{"line":494,"column":8},"end":{"line":494,"column":32}},{"start":{"line":495,"column":8},"end":{"line":495,"column":28}},{"start":{"line":496,"column":8},"end":{"line":496,"column":30}},{"start":{"line":497,"column":8},"end":{"line":499,"column":18}},{"start":{"line":501,"column":8},"end":{"line":503,"column":18}},{"start":{"line":505,"column":8},"end":{"line":509,"column":18}},{"start":{"line":511,"column":8},"end":{"line":512,"column":18}}]},"34":{"line":444,"type":"if","locations":[{"start":{"line":444,"column":12},"end":{"line":444,"column":12}},{"start":{"line":444,"column":12},"end":{"line":444,"column":12}}]},"35":{"line":447,"type":"if","locations":[{"start":{"line":447,"column":12},"end":{"line":447,"column":12}},{"start":{"line":447,"column":12},"end":{"line":447,"column":12}}]},"36":{"line":458,"type":"binary-expr","locations":[{"start":{"line":458,"column":28},"end":{"line":458,"column":38}},{"start":{"line":458,"column":42},"end":{"line":458,"column":57}}]},"37":{"line":464,"type":"binary-expr","locations":[{"start":{"line":464,"column":31},"end":{"line":464,"column":41}},{"start":{"line":464,"column":45},"end":{"line":464,"column":60}}]},"38":{"line":481,"type":"if","locations":[{"start":{"line":481,"column":12},"end":{"line":481,"column":12}},{"start":{"line":481,"column":12},"end":{"line":481,"column":12}}]},"39":{"line":506,"type":"if","locations":[{"start":{"line":506,"column":12},"end":{"line":506,"column":12}},{"start":{"line":506,"column":12},"end":{"line":506,"column":12}}]},"40":{"line":516,"type":"if","locations":[{"start":{"line":516,"column":4},"end":{"line":516,"column":4}},{"start":{"line":516,"column":4},"end":{"line":516,"column":4}}]},"41":{"line":530,"type":"switch","locations":[{"start":{"line":531,"column":8},"end":{"line":531,"column":23}},{"start":{"line":532,"column":8},"end":{"line":532,"column":35}},{"start":{"line":533,"column":8},"end":{"line":533,"column":34}},{"start":{"line":534,"column":8},"end":{"line":553,"column":9}},{"start":{"line":555,"column":8},"end":{"line":556,"column":18}}]},"42":{"line":549,"type":"if","locations":[{"start":{"line":549,"column":12},"end":{"line":549,"column":12}},{"start":{"line":549,"column":12},"end":{"line":549,"column":12}}]},"43":{"line":593,"type":"if","locations":[{"start":{"line":593,"column":8},"end":{"line":593,"column":8}},{"start":{"line":593,"column":8},"end":{"line":593,"column":8}}]},"44":{"line":639,"type":"if","locations":[{"start":{"line":639,"column":8},"end":{"line":639,"column":8}},{"start":{"line":639,"column":8},"end":{"line":639,"column":8}}]},"45":{"line":639,"type":"binary-expr","locations":[{"start":{"line":639,"column":12},"end":{"line":639,"column":33}},{"start":{"line":639,"column":37},"end":{"line":639,"column":56}}]}},"code":["/**"," * @fileoverview A class of the code path analyzer."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const assert = require(\"assert\"),","    CodePath = require(\"./code-path\"),","    CodePathSegment = require(\"./code-path-segment\"),","    IdGenerator = require(\"./id-generator\"),","    debug = require(\"./debug-helpers\"),","    astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given node is a `case` node (not `default` node)."," *"," * @param {ASTNode} node - A `SwitchCase` node to check."," * @returns {boolean} `true` if the node is a `case` node (not `default` node)."," */","function isCaseNode(node) {","    return Boolean(node.test);","}","","/**"," * Checks whether or not a given logical expression node goes different path"," * between the `true` case and the `false` case."," *"," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node is a test of a choice statement."," */","function isForkingByTrueOrFalse(node) {","    const parent = node.parent;","","    switch (parent.type) {","        case \"ConditionalExpression\":","        case \"IfStatement\":","        case \"WhileStatement\":","        case \"DoWhileStatement\":","        case \"ForStatement\":","            return parent.test === node;","","        case \"LogicalExpression\":","            return true;","","        default:","            return false;","    }","}","","/**"," * Gets the boolean value of a given literal node."," *"," * This is used to detect infinity loops (e.g. `while (true) {}`)."," * Statements preceded by an infinity loop are unreachable if the loop didn't"," * have any `break` statement."," *"," * @param {ASTNode} node - A node to get."," * @returns {boolean|undefined} a boolean value if the node is a Literal node,"," *   otherwise `undefined`."," */","function getBooleanValueIfSimpleConstant(node) {","    if (node.type === \"Literal\") {","        return Boolean(node.value);","    }","    return void 0;","}","","/**"," * Checks that a given identifier node is a reference or not."," *"," * This is used to detect the first throwable node in a `try` block."," *"," * @param {ASTNode} node - An Identifier node to check."," * @returns {boolean} `true` if the node is a reference."," */","function isIdentifierReference(node) {","    const parent = node.parent;","","    switch (parent.type) {","        case \"LabeledStatement\":","        case \"BreakStatement\":","        case \"ContinueStatement\":","        case \"ArrayPattern\":","        case \"RestElement\":","        case \"ImportSpecifier\":","        case \"ImportDefaultSpecifier\":","        case \"ImportNamespaceSpecifier\":","        case \"CatchClause\":","            return false;","","        case \"FunctionDeclaration\":","        case \"FunctionExpression\":","        case \"ArrowFunctionExpression\":","        case \"ClassDeclaration\":","        case \"ClassExpression\":","        case \"VariableDeclarator\":","            return parent.id !== node;","","        case \"Property\":","        case \"MethodDefinition\":","            return (","                parent.key !== node ||","                parent.computed ||","                parent.shorthand","            );","","        case \"AssignmentPattern\":","            return parent.key !== node;","","        default:","            return true;","    }","}","","/**"," * Updates the current segment with the head segment."," * This is similar to local branches and tracking branches of git."," *"," * To separate the current and the head is in order to not make useless segments."," *"," * In this process, both \"onCodePathSegmentStart\" and \"onCodePathSegmentEnd\""," * events are fired."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function forwardCurrentToHead(analyzer, node) {","    const codePath = analyzer.codePath;","    const state = CodePath.getState(codePath);","    const currentSegments = state.currentSegments;","    const headSegments = state.headSegments;","    const end = Math.max(currentSegments.length, headSegments.length);","    let i, currentSegment, headSegment;","","    // Fires leaving events.","    for (i = 0; i < end; ++i) {","        currentSegment = currentSegments[i];","        headSegment = headSegments[i];","","        if (currentSegment !== headSegment && currentSegment) {","            debug.dump(`onCodePathSegmentEnd ${currentSegment.id}`);","","            if (currentSegment.reachable) {","                analyzer.emitter.emit(","                    \"onCodePathSegmentEnd\",","                    currentSegment,","                    node);","            }","        }","    }","","    // Update state.","    state.currentSegments = headSegments;","","    // Fires entering events.","    for (i = 0; i < end; ++i) {","        currentSegment = currentSegments[i];","        headSegment = headSegments[i];","","        if (currentSegment !== headSegment && headSegment) {","            debug.dump(`onCodePathSegmentStart ${headSegment.id}`);","","            CodePathSegment.markUsed(headSegment);","            if (headSegment.reachable) {","                analyzer.emitter.emit(","                    \"onCodePathSegmentStart\",","                    headSegment,","                    node);","            }","        }","    }","","}","","/**"," * Updates the current segment with empty."," * This is called at the last of functions or the program."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function leaveFromCurrentSegment(analyzer, node) {","    const state = CodePath.getState(analyzer.codePath);","    const currentSegments = state.currentSegments;","","    for (let i = 0; i < currentSegments.length; ++i) {","        const currentSegment = currentSegments[i];","","        debug.dump(`onCodePathSegmentEnd ${currentSegment.id}`);","        if (currentSegment.reachable) {","            analyzer.emitter.emit(","                \"onCodePathSegmentEnd\",","                currentSegment,","                node);","        }","    }","","    state.currentSegments = [];","}","","/**"," * Updates the code path due to the position of a given node in the parent node"," * thereof."," *"," * For example, if the node is `parent.consequent`, this creates a fork from the"," * current path."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function preprocess(analyzer, node) {","    const codePath = analyzer.codePath;","    const state = CodePath.getState(codePath);","    const parent = node.parent;","","    switch (parent.type) {","        case \"LogicalExpression\":","            if (parent.right === node) {","                state.makeLogicalRight();","            }","            break;","","        case \"ConditionalExpression\":","        case \"IfStatement\":","","            /*","             * Fork if this node is at `consequent`/`alternate`.","             * `popForkContext()` exists at `IfStatement:exit` and","             * `ConditionalExpression:exit`.","             */","            if (parent.consequent === node) {","                state.makeIfConsequent();","            } else if (parent.alternate === node) {","                state.makeIfAlternate();","            }","            break;","","        case \"SwitchCase\":","            if (parent.consequent[0] === node) {","                state.makeSwitchCaseBody(false, !parent.test);","            }","            break;","","        case \"TryStatement\":","            if (parent.handler === node) {","                state.makeCatchBlock();","            } else if (parent.finalizer === node) {","                state.makeFinallyBlock();","            }","            break;","","        case \"WhileStatement\":","            if (parent.test === node) {","                state.makeWhileTest(getBooleanValueIfSimpleConstant(node));","            } else {","                assert(parent.body === node);","                state.makeWhileBody();","            }","            break;","","        case \"DoWhileStatement\":","            if (parent.body === node) {","                state.makeDoWhileBody();","            } else {","                assert(parent.test === node);","                state.makeDoWhileTest(getBooleanValueIfSimpleConstant(node));","            }","            break;","","        case \"ForStatement\":","            if (parent.test === node) {","                state.makeForTest(getBooleanValueIfSimpleConstant(node));","            } else if (parent.update === node) {","                state.makeForUpdate();","            } else if (parent.body === node) {","                state.makeForBody();","            }","            break;","","        case \"ForInStatement\":","        case \"ForOfStatement\":","            if (parent.left === node) {","                state.makeForInOfLeft();","            } else if (parent.right === node) {","                state.makeForInOfRight();","            } else {","                assert(parent.body === node);","                state.makeForInOfBody();","            }","            break;","","        case \"AssignmentPattern\":","","            /*","             * Fork if this node is at `right`.","             * `left` is executed always, so it uses the current path.","             * `popForkContext()` exists at `AssignmentPattern:exit`.","             */","            if (parent.right === node) {","                state.pushForkContext();","                state.forkBypassPath();","                state.forkPath();","            }","            break;","","        default:","            break;","    }","}","","/**"," * Updates the code path due to the type of a given node in entering."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function processCodePathToEnter(analyzer, node) {","    let codePath = analyzer.codePath;","    let state = codePath && CodePath.getState(codePath);","    const parent = node.parent;","","    switch (node.type) {","        case \"Program\":","        case \"FunctionDeclaration\":","        case \"FunctionExpression\":","        case \"ArrowFunctionExpression\":","            if (codePath) {","","                // Emits onCodePathSegmentStart events if updated.","                forwardCurrentToHead(analyzer, node);","                debug.dumpState(node, state, false);","            }","","            // Create the code path of this scope.","            codePath = analyzer.codePath = new CodePath(","                analyzer.idGenerator.next(),","                codePath,","                analyzer.onLooped","            );","            state = CodePath.getState(codePath);","","            // Emits onCodePathStart events.","            debug.dump(`onCodePathStart ${codePath.id}`);","            analyzer.emitter.emit(\"onCodePathStart\", codePath, node);","            break;","","        case \"LogicalExpression\":","            state.pushChoiceContext(node.operator, isForkingByTrueOrFalse(node));","            break;","","        case \"ConditionalExpression\":","        case \"IfStatement\":","            state.pushChoiceContext(\"test\", false);","            break;","","        case \"SwitchStatement\":","            state.pushSwitchContext(","                node.cases.some(isCaseNode),","                astUtils.getLabel(node));","            break;","","        case \"TryStatement\":","            state.pushTryContext(Boolean(node.finalizer));","            break;","","        case \"SwitchCase\":","","            /*","             * Fork if this node is after the 2st node in `cases`.","             * It's similar to `else` blocks.","             * The next `test` node is processed in this path.","             */","            if (parent.discriminant !== node && parent.cases[0] !== node) {","                state.forkPath();","            }","            break;","","        case \"WhileStatement\":","        case \"DoWhileStatement\":","        case \"ForStatement\":","        case \"ForInStatement\":","        case \"ForOfStatement\":","            state.pushLoopContext(node.type, astUtils.getLabel(node));","            break;","","        case \"LabeledStatement\":","            if (!astUtils.isBreakableStatement(node.body)) {","                state.pushBreakContext(false, node.label.name);","            }","            break;","","        default:","            break;","    }","","    // Emits onCodePathSegmentStart events if updated.","    forwardCurrentToHead(analyzer, node);","    debug.dumpState(node, state, false);","}","","/**"," * Updates the code path due to the type of a given node in leaving."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function processCodePathToExit(analyzer, node) {","    const codePath = analyzer.codePath;","    const state = CodePath.getState(codePath);","    let dontForward = false;","","    switch (node.type) {","        case \"IfStatement\":","        case \"ConditionalExpression\":","        case \"LogicalExpression\":","            state.popChoiceContext();","            break;","","        case \"SwitchStatement\":","            state.popSwitchContext();","            break;","","        case \"SwitchCase\":","","            /*","             * This is the same as the process at the 1st `consequent` node in","             * `preprocess` function.","             * Must do if this `consequent` is empty.","             */","            if (node.consequent.length === 0) {","                state.makeSwitchCaseBody(true, !node.test);","            }","            if (state.forkContext.reachable) {","                dontForward = true;","            }","            break;","","        case \"TryStatement\":","            state.popTryContext();","            break;","","        case \"BreakStatement\":","            forwardCurrentToHead(analyzer, node);","            state.makeBreak(node.label && node.label.name);","            dontForward = true;","            break;","","        case \"ContinueStatement\":","            forwardCurrentToHead(analyzer, node);","            state.makeContinue(node.label && node.label.name);","            dontForward = true;","            break;","","        case \"ReturnStatement\":","            forwardCurrentToHead(analyzer, node);","            state.makeReturn();","            dontForward = true;","            break;","","        case \"ThrowStatement\":","            forwardCurrentToHead(analyzer, node);","            state.makeThrow();","            dontForward = true;","            break;","","        case \"Identifier\":","            if (isIdentifierReference(node)) {","                state.makeFirstThrowablePathInTryBlock();","                dontForward = true;","            }","            break;","","        case \"CallExpression\":","        case \"MemberExpression\":","        case \"NewExpression\":","            state.makeFirstThrowablePathInTryBlock();","            break;","","        case \"WhileStatement\":","        case \"DoWhileStatement\":","        case \"ForStatement\":","        case \"ForInStatement\":","        case \"ForOfStatement\":","            state.popLoopContext();","            break;","","        case \"AssignmentPattern\":","            state.popForkContext();","            break;","","        case \"LabeledStatement\":","            if (!astUtils.isBreakableStatement(node.body)) {","                state.popBreakContext();","            }","            break;","","        default:","            break;","    }","","    // Emits onCodePathSegmentStart events if updated.","    if (!dontForward) {","        forwardCurrentToHead(analyzer, node);","    }","    debug.dumpState(node, state, true);","}","","/**"," * Updates the code path to finalize the current code path."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function postprocess(analyzer, node) {","    switch (node.type) {","        case \"Program\":","        case \"FunctionDeclaration\":","        case \"FunctionExpression\":","        case \"ArrowFunctionExpression\": {","            let codePath = analyzer.codePath;","","            // Mark the current path as the final node.","            CodePath.getState(codePath).makeFinal();","","            // Emits onCodePathSegmentEnd event of the current segments.","            leaveFromCurrentSegment(analyzer, node);","","            // Emits onCodePathEnd event of this code path.","            debug.dump(`onCodePathEnd ${codePath.id}`);","            analyzer.emitter.emit(\"onCodePathEnd\", codePath, node);","            debug.dumpDot(codePath);","","            codePath = analyzer.codePath = analyzer.codePath.upper;","            if (codePath) {","                debug.dumpState(node, CodePath.getState(codePath), true);","            }","            break;","        }","","        default:","            break;","    }","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * The class to analyze code paths."," * This class implements the EventGenerator interface."," */","class CodePathAnalyzer {","","    /**","     * @param {EventGenerator} eventGenerator - An event generator to wrap.","     */","    constructor(eventGenerator) {","        this.original = eventGenerator;","        this.emitter = eventGenerator.emitter;","        this.codePath = null;","        this.idGenerator = new IdGenerator(\"s\");","        this.currentNode = null;","        this.onLooped = this.onLooped.bind(this);","    }","","    /**","     * Does the process to enter a given AST node.","     * This updates state of analysis and calls `enterNode` of the wrapped.","     *","     * @param {ASTNode} node - A node which is entering.","     * @returns {void}","     */","    enterNode(node) {","        this.currentNode = node;","","        // Updates the code path due to node's position in its parent node.","        if (node.parent) {","            preprocess(this, node);","        }","","        // Updates the code path.","        // And emits onCodePathStart/onCodePathSegmentStart events.","        processCodePathToEnter(this, node);","","        // Emits node events.","        this.original.enterNode(node);","","        this.currentNode = null;","    }","","    /**","     * Does the process to leave a given AST node.","     * This updates state of analysis and calls `leaveNode` of the wrapped.","     *","     * @param {ASTNode} node - A node which is leaving.","     * @returns {void}","     */","    leaveNode(node) {","        this.currentNode = node;","","        // Updates the code path.","        // And emits onCodePathStart/onCodePathSegmentStart events.","        processCodePathToExit(this, node);","","        // Emits node events.","        this.original.leaveNode(node);","","        // Emits the last onCodePathStart/onCodePathSegmentStart events.","        postprocess(this, node);","","        this.currentNode = null;","    }","","    /**","     * This is called on a code path looped.","     * Then this raises a looped event.","     *","     * @param {CodePathSegment} fromSegment - A segment of prev.","     * @param {CodePathSegment} toSegment - A segment of next.","     * @returns {void}","     */","    onLooped(fromSegment, toSegment) {","        if (fromSegment.reachable && toSegment.reachable) {","            debug.dump(`onCodePathSegmentLoop ${fromSegment.id} -> ${toSegment.id}`);","            this.emitter.emit(","                \"onCodePathSegmentLoop\",","                fromSegment,","                toSegment,","                this.currentNode","            );","        }","    }","}","","module.exports = CodePathAnalyzer;",""],"l":{"12":1,"29":1,"30":0,"40":1,"41":0,"43":0,"49":0,"52":0,"55":0,"70":1,"71":0,"72":0,"74":0,"85":1,"86":0,"88":0,"98":0,"106":0,"110":0,"117":0,"120":0,"137":1,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"146":0,"147":0,"148":0,"150":0,"151":0,"153":0,"154":0,"163":0,"166":0,"167":0,"168":0,"170":0,"171":0,"173":0,"174":0,"175":0,"193":1,"194":0,"195":0,"197":0,"198":0,"200":0,"201":0,"202":0,"209":0,"223":1,"224":0,"225":0,"226":0,"228":0,"230":0,"231":0,"233":0,"243":0,"244":0,"245":0,"246":0,"248":0,"251":0,"252":0,"254":0,"257":0,"258":0,"259":0,"260":0,"262":0,"265":0,"266":0,"268":0,"269":0,"271":0,"274":0,"275":0,"277":0,"278":0,"280":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"290":0,"294":0,"295":0,"296":0,"297":0,"299":0,"300":0,"302":0,"311":0,"312":0,"313":0,"314":0,"316":0,"319":0,"330":1,"331":0,"332":0,"333":0,"335":0,"340":0,"343":0,"344":0,"348":0,"353":0,"356":0,"357":0,"358":0,"361":0,"362":0,"366":0,"367":0,"370":0,"373":0,"376":0,"377":0,"386":0,"387":0,"389":0,"396":0,"397":0,"400":0,"401":0,"403":0,"406":0,"410":0,"411":0,"421":1,"422":0,"423":0,"424":0,"426":0,"430":0,"431":0,"434":0,"435":0,"444":0,"445":0,"447":0,"448":0,"450":0,"453":0,"454":0,"457":0,"458":0,"459":0,"460":0,"463":0,"464":0,"465":0,"466":0,"469":0,"470":0,"471":0,"472":0,"475":0,"476":0,"477":0,"478":0,"481":0,"482":0,"483":0,"485":0,"490":0,"491":0,"498":0,"499":0,"502":0,"503":0,"506":0,"507":0,"509":0,"512":0,"516":0,"517":0,"519":0,"529":1,"530":0,"535":0,"538":0,"541":0,"544":0,"545":0,"546":0,"548":0,"549":0,"550":0,"552":0,"556":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"590":0,"593":0,"594":0,"599":0,"602":0,"604":0,"615":0,"619":0,"622":0,"625":0,"627":0,"639":0,"640":0,"641":0,"651":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/code-path.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/code-path.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":15},"end":{"line":29,"column":37}}},"2":{"name":"(anonymous_2)","line":68,"loc":{"start":{"line":68,"column":19},"end":{"line":68,"column":30}}},"3":{"name":"(anonymous_3)","line":76,"loc":{"start":{"line":76,"column":22},"end":{"line":76,"column":25}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":21},"end":{"line":85,"column":24}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":24},"end":{"line":95,"column":27}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":22},"end":{"line":103,"column":25}}},"7":{"name":"(anonymous_7)","line":111,"loc":{"start":{"line":111,"column":23},"end":{"line":111,"column":26}}},"8":{"name":"(anonymous_8)","line":135,"loc":{"start":{"line":135,"column":20},"end":{"line":135,"column":40}}},"9":{"name":"(anonymous_9)","line":154,"loc":{"start":{"line":154,"column":16},"end":{"line":154,"column":19}}},"10":{"name":"(anonymous_10)","line":161,"loc":{"start":{"line":161,"column":17},"end":{"line":161,"column":20}}},"11":{"name":"isVisited","line":171,"loc":{"start":{"line":171,"column":8},"end":{"line":171,"column":40}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":46}},"3":{"start":{"line":36,"column":8},"end":{"line":36,"column":21}},"4":{"start":{"line":42,"column":8},"end":{"line":42,"column":27}},"5":{"start":{"line":48,"column":8},"end":{"line":48,"column":33}},"6":{"start":{"line":51,"column":8},"end":{"line":54,"column":79}},"7":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"8":{"start":{"line":58,"column":12},"end":{"line":58,"column":44}},"9":{"start":{"line":69,"column":8},"end":{"line":69,"column":33}},"10":{"start":{"line":77,"column":8},"end":{"line":77,"column":44}},"11":{"start":{"line":86,"column":8},"end":{"line":86,"column":43}},"12":{"start":{"line":96,"column":8},"end":{"line":96,"column":49}},"13":{"start":{"line":104,"column":8},"end":{"line":104,"column":47}},"14":{"start":{"line":112,"column":8},"end":{"line":112,"column":45}},"15":{"start":{"line":136,"column":8},"end":{"line":139,"column":9}},"16":{"start":{"line":137,"column":12},"end":{"line":137,"column":31}},"17":{"start":{"line":138,"column":12},"end":{"line":138,"column":27}},"18":{"start":{"line":141,"column":8},"end":{"line":141,"column":32}},"19":{"start":{"line":142,"column":8},"end":{"line":142,"column":75}},"20":{"start":{"line":143,"column":8},"end":{"line":143,"column":41}},"21":{"start":{"line":145,"column":8},"end":{"line":145,"column":24}},"22":{"start":{"line":146,"column":8},"end":{"line":146,"column":22}},"23":{"start":{"line":147,"column":8},"end":{"line":147,"column":20}},"24":{"start":{"line":148,"column":8},"end":{"line":148,"column":27}},"25":{"start":{"line":149,"column":8},"end":{"line":149,"column":44}},"26":{"start":{"line":150,"column":8},"end":{"line":150,"column":42}},"27":{"start":{"line":151,"column":8},"end":{"line":151,"column":34}},"28":{"start":{"line":152,"column":8},"end":{"line":152,"column":27}},"29":{"start":{"line":153,"column":8},"end":{"line":164,"column":10}},"30":{"start":{"line":155,"column":16},"end":{"line":159,"column":17}},"31":{"start":{"line":156,"column":20},"end":{"line":156,"column":34}},"32":{"start":{"line":158,"column":20},"end":{"line":158,"column":64}},"33":{"start":{"line":162,"column":16},"end":{"line":162,"column":30}},"34":{"start":{"line":171,"column":8},"end":{"line":176,"column":9}},"35":{"start":{"line":172,"column":12},"end":{"line":175,"column":14}},"36":{"start":{"line":178,"column":8},"end":{"line":229,"column":9}},"37":{"start":{"line":179,"column":12},"end":{"line":179,"column":43}},"38":{"start":{"line":180,"column":12},"end":{"line":180,"column":30}},"39":{"start":{"line":181,"column":12},"end":{"line":181,"column":28}},"40":{"start":{"line":183,"column":12},"end":{"line":216,"column":13}},"41":{"start":{"line":186,"column":16},"end":{"line":189,"column":17}},"42":{"start":{"line":187,"column":20},"end":{"line":187,"column":32}},"43":{"start":{"line":188,"column":20},"end":{"line":188,"column":29}},"44":{"start":{"line":192,"column":16},"end":{"line":198,"column":17}},"45":{"start":{"line":196,"column":20},"end":{"line":196,"column":32}},"46":{"start":{"line":197,"column":20},"end":{"line":197,"column":29}},"47":{"start":{"line":201,"column":16},"end":{"line":203,"column":17}},"48":{"start":{"line":202,"column":20},"end":{"line":202,"column":42}},"49":{"start":{"line":204,"column":16},"end":{"line":204,"column":43}},"50":{"start":{"line":207,"column":16},"end":{"line":215,"column":17}},"51":{"start":{"line":208,"column":20},"end":{"line":208,"column":61}},"52":{"start":{"line":209,"column":20},"end":{"line":211,"column":21}},"53":{"start":{"line":210,"column":24},"end":{"line":210,"column":42}},"54":{"start":{"line":212,"column":20},"end":{"line":214,"column":21}},"55":{"start":{"line":213,"column":24},"end":{"line":213,"column":30}},"56":{"start":{"line":219,"column":12},"end":{"line":219,"column":50}},"57":{"start":{"line":220,"column":12},"end":{"line":228,"column":13}},"58":{"start":{"line":221,"column":16},"end":{"line":221,"column":29}},"59":{"start":{"line":222,"column":16},"end":{"line":222,"column":61}},"60":{"start":{"line":223,"column":19},"end":{"line":228,"column":13}},"61":{"start":{"line":224,"column":16},"end":{"line":224,"column":54}},"62":{"start":{"line":225,"column":16},"end":{"line":225,"column":28}},"63":{"start":{"line":227,"column":16},"end":{"line":227,"column":28}},"64":{"start":{"line":233,"column":0},"end":{"line":233,"column":26}}},"branchMap":{"1":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"2":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":136,"column":8}},{"start":{"line":136,"column":8},"end":{"line":136,"column":8}}]},"3":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":18},"end":{"line":141,"column":25}},{"start":{"line":141,"column":29},"end":{"line":141,"column":31}}]},"4":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":29},"end":{"line":142,"column":42}},{"start":{"line":142,"column":46},"end":{"line":142,"column":74}}]},"5":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":16},"end":{"line":155,"column":16}},{"start":{"line":155,"column":16},"end":{"line":155,"column":16}}]},"6":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":16},"end":{"line":173,"column":39}},{"start":{"line":174,"column":16},"end":{"line":174,"column":56}}]},"7":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":12},"end":{"line":183,"column":12}},{"start":{"line":183,"column":12},"end":{"line":183,"column":12}}]},"8":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":16},"end":{"line":186,"column":16}},{"start":{"line":186,"column":16},"end":{"line":186,"column":16}}]},"9":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":16},"end":{"line":192,"column":16}},{"start":{"line":192,"column":16},"end":{"line":192,"column":16}}]},"10":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":20},"end":{"line":192,"column":44}},{"start":{"line":193,"column":20},"end":{"line":193,"column":51}},{"start":{"line":194,"column":20},"end":{"line":194,"column":58}}]},"11":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":16},"end":{"line":201,"column":16}},{"start":{"line":201,"column":16},"end":{"line":201,"column":16}}]},"12":{"line":201,"type":"binary-expr","locations":[{"start":{"line":201,"column":20},"end":{"line":201,"column":34}},{"start":{"line":201,"column":38},"end":{"line":201,"column":89}}]},"13":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":16},"end":{"line":207,"column":16}},{"start":{"line":207,"column":16},"end":{"line":207,"column":16}}]},"14":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":20},"end":{"line":209,"column":20}},{"start":{"line":209,"column":20},"end":{"line":209,"column":20}}]},"15":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":20},"end":{"line":212,"column":20}},{"start":{"line":212,"column":20},"end":{"line":212,"column":20}}]},"16":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":12},"end":{"line":220,"column":12}},{"start":{"line":220,"column":12},"end":{"line":220,"column":12}}]},"17":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":19},"end":{"line":223,"column":19}},{"start":{"line":223,"column":19},"end":{"line":223,"column":19}}]}},"code":["/**"," * @fileoverview A class of the code path."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const CodePathState = require(\"./code-path-state\");","const IdGenerator = require(\"./id-generator\");","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A code path."," */","class CodePath {","","    /**","     * @param {string} id - An identifier.","     * @param {CodePath|null} upper - The code path of the upper function scope.","     * @param {Function} onLooped - A callback function to notify looping.","     */","    constructor(id, upper, onLooped) {","","        /**","         * The identifier of this code path.","         * Rules use it to store additional information of each rule.","         * @type {string}","         */","        this.id = id;","","        /**","         * The code path of the upper function scope.","         * @type {CodePath|null}","         */","        this.upper = upper;","","        /**","         * The code paths of nested function scopes.","         * @type {CodePath[]}","         */","        this.childCodePaths = [];","","        // Initializes internal state.","        Object.defineProperty(","            this,","            \"internal\",","            { value: new CodePathState(new IdGenerator(`${id}_`), onLooped) });","","        // Adds this into `childCodePaths` of `upper`.","        if (upper) {","            upper.childCodePaths.push(this);","        }","    }","","    /**","     * Gets the state of a given code path.","     *","     * @param {CodePath} codePath - A code path to get.","     * @returns {CodePathState} The state of the code path.","     */","    static getState(codePath) {","        return codePath.internal;","    }","","    /**","     * The initial code path segment.","     * @type {CodePathSegment}","     */","    get initialSegment() {","        return this.internal.initialSegment;","    }","","    /**","     * Final code path segments.","     * This array is a mix of `returnedSegments` and `thrownSegments`.","     * @type {CodePathSegment[]}","     */","    get finalSegments() {","        return this.internal.finalSegments;","    }","","    /**","     * Final code path segments which is with `return` statements.","     * This array contains the last path segment if it's reachable.","     * Since the reachable last path returns `undefined`.","     * @type {CodePathSegment[]}","     */","    get returnedSegments() {","        return this.internal.returnedForkContext;","    }","","    /**","     * Final code path segments which is with `throw` statements.","     * @type {CodePathSegment[]}","     */","    get thrownSegments() {","        return this.internal.thrownForkContext;","    }","","    /**","     * Current code path segments.","     * @type {CodePathSegment[]}","     */","    get currentSegments() {","        return this.internal.currentSegments;","    }","","    /**","     * Traverses all segments in this code path.","     *","     *     codePath.traverseSegments(function(segment, controller) {","     *         // do something.","     *     });","     *","     * This method enumerates segments in order from the head.","     *","     * The `controller` object has two methods.","     *","     * - `controller.skip()` - Skip the following segments in this branch.","     * - `controller.break()` - Skip all following segments.","     *","     * @param {Object} [options] - Omittable.","     * @param {CodePathSegment} [options.first] - The first segment to traverse.","     * @param {CodePathSegment} [options.last] - The last segment to traverse.","     * @param {Function} callback - A callback function.","     * @returns {void}","     */","    traverseSegments(options, callback) {","        if (typeof options === \"function\") {","            callback = options;","            options = null;","        }","","        options = options || {};","        const startSegment = options.first || this.internal.initialSegment;","        const lastSegment = options.last;","","        let item = null;","        let index = 0;","        let end = 0;","        let segment = null;","        const visited = Object.create(null);","        const stack = [[startSegment, 0]];","        let skippedSegment = null;","        let broken = false;","        const controller = {","            skip() {","                if (stack.length <= 1) {","                    broken = true;","                } else {","                    skippedSegment = stack[stack.length - 2][0];","                }","            },","            break() {","                broken = true;","            }","        };","","        /**","         * Checks a given previous segment has been visited.","         * @param {CodePathSegment} prevSegment - A previous segment to check.","         * @returns {boolean} `true` if the segment has been visited.","         */","        function isVisited(prevSegment) {","            return (","                visited[prevSegment.id] ||","                segment.isLoopedPrevSegment(prevSegment)","            );","        }","","        while (stack.length > 0) {","            item = stack[stack.length - 1];","            segment = item[0];","            index = item[1];","","            if (index === 0) {","","                // Skip if this segment has been visited already.","                if (visited[segment.id]) {","                    stack.pop();","                    continue;","                }","","                // Skip if all previous segments have not been visited.","                if (segment !== startSegment &&","                    segment.prevSegments.length > 0 &&","                    !segment.prevSegments.every(isVisited)","                ) {","                    stack.pop();","                    continue;","                }","","                // Reset the flag of skipping if all branches have been skipped.","                if (skippedSegment && segment.prevSegments.indexOf(skippedSegment) !== -1) {","                    skippedSegment = null;","                }","                visited[segment.id] = true;","","                // Call the callback when the first time.","                if (!skippedSegment) {","                    callback.call(this, segment, controller); // eslint-disable-line callback-return","                    if (segment === lastSegment) {","                        controller.skip();","                    }","                    if (broken) {","                        break;","                    }","                }","            }","","            // Update the stack.","            end = segment.nextSegments.length - 1;","            if (index < end) {","                item[1] += 1;","                stack.push([segment.nextSegments[index], 0]);","            } else if (index === end) {","                item[0] = segment.nextSegments[index];","                item[1] = 0;","            } else {","                stack.pop();","            }","        }","    }","}","","module.exports = CodePath;",""],"l":{"12":1,"13":1,"36":0,"42":0,"48":0,"51":0,"57":0,"58":0,"69":0,"77":0,"86":0,"96":0,"104":0,"112":0,"136":0,"137":0,"138":0,"141":0,"142":0,"143":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"155":0,"156":0,"158":0,"162":0,"171":1,"172":0,"178":0,"179":0,"180":0,"181":0,"183":0,"186":0,"187":0,"188":0,"192":0,"196":0,"197":0,"201":0,"202":0,"204":0,"207":0,"208":0,"209":0,"210":0,"212":0,"213":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"227":0,"233":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/code-path-state.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/code-path-state.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0,0],"47":[0,0,0,0,0,0],"48":[0,0,0,0,0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},"fnMap":{"1":{"name":"addToReturnedOrThrown","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":60}}},"2":{"name":"getContinueContext","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":42}}},"3":{"name":"getBreakContext","line":75,"loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":39}}},"4":{"name":"getReturnContext","line":95,"loc":{"start":{"line":95,"column":0},"end":{"line":95,"column":33}}},"5":{"name":"getThrowContext","line":114,"loc":{"start":{"line":114,"column":0},"end":{"line":114,"column":32}}},"6":{"name":"remove","line":136,"loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":23}}},"7":{"name":"removeConnection","line":151,"loc":{"start":{"line":151,"column":0},"end":{"line":151,"column":54}}},"8":{"name":"makeLooped","line":171,"loc":{"start":{"line":171,"column":0},"end":{"line":171,"column":53}}},"9":{"name":"finalizeTestSegmentsOfFor","line":206,"loc":{"start":{"line":206,"column":0},"end":{"line":206,"column":65}}},"10":{"name":"(anonymous_10)","line":232,"loc":{"start":{"line":232,"column":15},"end":{"line":232,"column":39}}},"11":{"name":"(anonymous_11)","line":258,"loc":{"start":{"line":258,"column":20},"end":{"line":258,"column":23}}},"12":{"name":"(anonymous_12)","line":267,"loc":{"start":{"line":267,"column":25},"end":{"line":267,"column":28}}},"13":{"name":"(anonymous_13)","line":280,"loc":{"start":{"line":280,"column":19},"end":{"line":280,"column":37}}},"14":{"name":"(anonymous_14)","line":293,"loc":{"start":{"line":293,"column":18},"end":{"line":293,"column":21}}},"15":{"name":"(anonymous_15)","line":306,"loc":{"start":{"line":306,"column":12},"end":{"line":306,"column":15}}},"16":{"name":"(anonymous_16)","line":316,"loc":{"start":{"line":316,"column":18},"end":{"line":316,"column":21}}},"17":{"name":"(anonymous_17)","line":355,"loc":{"start":{"line":355,"column":21},"end":{"line":355,"column":47}}},"18":{"name":"(anonymous_18)","line":371,"loc":{"start":{"line":371,"column":20},"end":{"line":371,"column":23}}},"19":{"name":"(anonymous_19)","line":459,"loc":{"start":{"line":459,"column":20},"end":{"line":459,"column":23}}},"20":{"name":"(anonymous_20)","line":503,"loc":{"start":{"line":503,"column":20},"end":{"line":503,"column":23}}},"21":{"name":"(anonymous_21)","line":530,"loc":{"start":{"line":530,"column":19},"end":{"line":530,"column":22}}},"22":{"name":"(anonymous_22)","line":560,"loc":{"start":{"line":560,"column":21},"end":{"line":560,"column":38}}},"23":{"name":"(anonymous_23)","line":584,"loc":{"start":{"line":584,"column":20},"end":{"line":584,"column":23}}},"24":{"name":"(anonymous_24)","line":660,"loc":{"start":{"line":660,"column":22},"end":{"line":660,"column":43}}},"25":{"name":"(anonymous_25)","line":711,"loc":{"start":{"line":711,"column":18},"end":{"line":711,"column":33}}},"26":{"name":"(anonymous_26)","line":732,"loc":{"start":{"line":732,"column":17},"end":{"line":732,"column":20}}},"27":{"name":"(anonymous_27)","line":786,"loc":{"start":{"line":786,"column":18},"end":{"line":786,"column":21}}},"28":{"name":"(anonymous_28)","line":815,"loc":{"start":{"line":815,"column":20},"end":{"line":815,"column":23}}},"29":{"name":"(anonymous_29)","line":873,"loc":{"start":{"line":873,"column":36},"end":{"line":873,"column":39}}},"30":{"name":"(anonymous_30)","line":906,"loc":{"start":{"line":906,"column":19},"end":{"line":906,"column":33}}},"31":{"name":"(anonymous_31)","line":978,"loc":{"start":{"line":978,"column":18},"end":{"line":978,"column":21}}},"32":{"name":"(anonymous_32)","line":1049,"loc":{"start":{"line":1049,"column":17},"end":{"line":1049,"column":24}}},"33":{"name":"(anonymous_33)","line":1065,"loc":{"start":{"line":1065,"column":17},"end":{"line":1065,"column":20}}},"34":{"name":"(anonymous_34)","line":1087,"loc":{"start":{"line":1087,"column":19},"end":{"line":1087,"column":22}}},"35":{"name":"(anonymous_35)","line":1103,"loc":{"start":{"line":1103,"column":19},"end":{"line":1103,"column":26}}},"36":{"name":"(anonymous_36)","line":1124,"loc":{"start":{"line":1124,"column":15},"end":{"line":1124,"column":22}}},"37":{"name":"(anonymous_37)","line":1142,"loc":{"start":{"line":1142,"column":17},"end":{"line":1142,"column":20}}},"38":{"name":"(anonymous_38)","line":1169,"loc":{"start":{"line":1169,"column":15},"end":{"line":1169,"column":18}}},"39":{"name":"(anonymous_39)","line":1221,"loc":{"start":{"line":1221,"column":19},"end":{"line":1221,"column":22}}},"40":{"name":"(anonymous_40)","line":1238,"loc":{"start":{"line":1238,"column":20},"end":{"line":1238,"column":23}}},"41":{"name":"(anonymous_41)","line":1257,"loc":{"start":{"line":1257,"column":19},"end":{"line":1257,"column":22}}},"42":{"name":"(anonymous_42)","line":1285,"loc":{"start":{"line":1285,"column":20},"end":{"line":1285,"column":39}}},"43":{"name":"(anonymous_43)","line":1300,"loc":{"start":{"line":1300,"column":19},"end":{"line":1300,"column":22}}},"44":{"name":"(anonymous_44)","line":1328,"loc":{"start":{"line":1328,"column":13},"end":{"line":1328,"column":21}}},"45":{"name":"(anonymous_45)","line":1354,"loc":{"start":{"line":1354,"column":16},"end":{"line":1354,"column":24}}},"46":{"name":"(anonymous_46)","line":1389,"loc":{"start":{"line":1389,"column":14},"end":{"line":1389,"column":17}}},"47":{"name":"(anonymous_47)","line":1406,"loc":{"start":{"line":1406,"column":13},"end":{"line":1406,"column":16}}},"48":{"name":"(anonymous_48)","line":1419,"loc":{"start":{"line":1419,"column":13},"end":{"line":1419,"column":16}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":44}},"2":{"start":{"line":32,"column":0},"end":{"line":41,"column":1}},"3":{"start":{"line":33,"column":4},"end":{"line":40,"column":5}},"4":{"start":{"line":34,"column":8},"end":{"line":34,"column":36}},"5":{"start":{"line":36,"column":8},"end":{"line":36,"column":27}},"6":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"7":{"start":{"line":38,"column":12},"end":{"line":38,"column":30}},"8":{"start":{"line":50,"column":0},"end":{"line":66,"column":1}},"9":{"start":{"line":51,"column":4},"end":{"line":53,"column":5}},"10":{"start":{"line":52,"column":8},"end":{"line":52,"column":33}},"11":{"start":{"line":55,"column":4},"end":{"line":55,"column":36}},"12":{"start":{"line":57,"column":4},"end":{"line":62,"column":5}},"13":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"14":{"start":{"line":59,"column":12},"end":{"line":59,"column":27}},"15":{"start":{"line":61,"column":8},"end":{"line":61,"column":32}},"16":{"start":{"line":65,"column":4},"end":{"line":65,"column":16},"skip":true},"17":{"start":{"line":75,"column":0},"end":{"line":87,"column":1}},"18":{"start":{"line":76,"column":4},"end":{"line":76,"column":37}},"19":{"start":{"line":78,"column":4},"end":{"line":83,"column":5}},"20":{"start":{"line":79,"column":8},"end":{"line":81,"column":9}},"21":{"start":{"line":80,"column":12},"end":{"line":80,"column":27}},"22":{"start":{"line":82,"column":8},"end":{"line":82,"column":32}},"23":{"start":{"line":86,"column":4},"end":{"line":86,"column":16},"skip":true},"24":{"start":{"line":95,"column":0},"end":{"line":106,"column":1}},"25":{"start":{"line":96,"column":4},"end":{"line":96,"column":35}},"26":{"start":{"line":98,"column":4},"end":{"line":103,"column":5}},"27":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"28":{"start":{"line":100,"column":12},"end":{"line":100,"column":27}},"29":{"start":{"line":102,"column":8},"end":{"line":102,"column":32}},"30":{"start":{"line":105,"column":4},"end":{"line":105,"column":17}},"31":{"start":{"line":114,"column":0},"end":{"line":127,"column":1}},"32":{"start":{"line":115,"column":4},"end":{"line":115,"column":35}},"33":{"start":{"line":117,"column":4},"end":{"line":124,"column":5}},"34":{"start":{"line":118,"column":8},"end":{"line":122,"column":9}},"35":{"start":{"line":121,"column":12},"end":{"line":121,"column":27}},"36":{"start":{"line":123,"column":8},"end":{"line":123,"column":32}},"37":{"start":{"line":126,"column":4},"end":{"line":126,"column":17}},"38":{"start":{"line":136,"column":0},"end":{"line":138,"column":1}},"39":{"start":{"line":137,"column":4},"end":{"line":137,"column":32}},"40":{"start":{"line":151,"column":0},"end":{"line":161,"column":1}},"41":{"start":{"line":152,"column":4},"end":{"line":160,"column":5}},"42":{"start":{"line":153,"column":8},"end":{"line":153,"column":44}},"43":{"start":{"line":154,"column":8},"end":{"line":154,"column":44}},"44":{"start":{"line":156,"column":8},"end":{"line":156,"column":54}},"45":{"start":{"line":157,"column":8},"end":{"line":157,"column":57}},"46":{"start":{"line":158,"column":8},"end":{"line":158,"column":54}},"47":{"start":{"line":159,"column":8},"end":{"line":159,"column":57}},"48":{"start":{"line":171,"column":0},"end":{"line":193,"column":1}},"49":{"start":{"line":172,"column":4},"end":{"line":172,"column":65}},"50":{"start":{"line":174,"column":4},"end":{"line":192,"column":5}},"51":{"start":{"line":175,"column":8},"end":{"line":175,"column":44}},"52":{"start":{"line":176,"column":8},"end":{"line":176,"column":40}},"53":{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},"54":{"start":{"line":179,"column":12},"end":{"line":179,"column":53}},"55":{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},"56":{"start":{"line":182,"column":12},"end":{"line":182,"column":53}},"57":{"start":{"line":184,"column":8},"end":{"line":184,"column":52}},"58":{"start":{"line":185,"column":8},"end":{"line":185,"column":52}},"59":{"start":{"line":187,"column":8},"end":{"line":189,"column":9}},"60":{"start":{"line":188,"column":12},"end":{"line":188,"column":76}},"61":{"start":{"line":191,"column":8},"end":{"line":191,"column":51}},"62":{"start":{"line":206,"column":0},"end":{"line":216,"column":1}},"63":{"start":{"line":207,"column":4},"end":{"line":210,"column":5}},"64":{"start":{"line":208,"column":8},"end":{"line":208,"column":48}},"65":{"start":{"line":209,"column":8},"end":{"line":209,"column":49}},"66":{"start":{"line":212,"column":4},"end":{"line":214,"column":5}},"67":{"start":{"line":213,"column":8},"end":{"line":213,"column":73}},"68":{"start":{"line":215,"column":4},"end":{"line":215,"column":78}},"69":{"start":{"line":233,"column":8},"end":{"line":233,"column":39}},"70":{"start":{"line":234,"column":8},"end":{"line":234,"column":37}},"71":{"start":{"line":235,"column":8},"end":{"line":235,"column":60}},"72":{"start":{"line":236,"column":8},"end":{"line":236,"column":34}},"73":{"start":{"line":237,"column":8},"end":{"line":237,"column":34}},"74":{"start":{"line":238,"column":8},"end":{"line":238,"column":31}},"75":{"start":{"line":239,"column":8},"end":{"line":239,"column":32}},"76":{"start":{"line":240,"column":8},"end":{"line":240,"column":33}},"77":{"start":{"line":242,"column":8},"end":{"line":242,"column":34}},"78":{"start":{"line":243,"column":8},"end":{"line":243,"column":57}},"79":{"start":{"line":246,"column":8},"end":{"line":246,"column":46}},"80":{"start":{"line":247,"column":8},"end":{"line":247,"column":55}},"81":{"start":{"line":248,"column":8},"end":{"line":248,"column":51}},"82":{"start":{"line":250,"column":8},"end":{"line":250,"column":81}},"83":{"start":{"line":251,"column":8},"end":{"line":251,"column":79}},"84":{"start":{"line":259,"column":8},"end":{"line":259,"column":37}},"85":{"start":{"line":268,"column":8},"end":{"line":268,"column":41}},"86":{"start":{"line":270,"column":8},"end":{"line":270,"column":40}},"87":{"start":{"line":281,"column":8},"end":{"line":284,"column":10}},"88":{"start":{"line":286,"column":8},"end":{"line":286,"column":32}},"89":{"start":{"line":294,"column":8},"end":{"line":294,"column":45}},"90":{"start":{"line":296,"column":8},"end":{"line":296,"column":45}},"91":{"start":{"line":297,"column":8},"end":{"line":297,"column":66}},"92":{"start":{"line":299,"column":8},"end":{"line":299,"column":27}},"93":{"start":{"line":307,"column":8},"end":{"line":307,"column":70}},"94":{"start":{"line":317,"column":8},"end":{"line":317,"column":58}},"95":{"start":{"line":356,"column":8},"end":{"line":363,"column":10}},"96":{"start":{"line":372,"column":8},"end":{"line":372,"column":43}},"97":{"start":{"line":374,"column":8},"end":{"line":374,"column":43}},"98":{"start":{"line":376,"column":8},"end":{"line":376,"column":45}},"99":{"start":{"line":377,"column":8},"end":{"line":377,"column":46}},"100":{"start":{"line":379,"column":8},"end":{"line":442,"column":9}},"101":{"start":{"line":388,"column":16},"end":{"line":391,"column":17}},"102":{"start":{"line":389,"column":20},"end":{"line":389,"column":62}},"103":{"start":{"line":390,"column":20},"end":{"line":390,"column":63}},"104":{"start":{"line":397,"column":16},"end":{"line":405,"column":17}},"105":{"start":{"line":398,"column":20},"end":{"line":398,"column":61}},"106":{"start":{"line":400,"column":20},"end":{"line":400,"column":82}},"107":{"start":{"line":401,"column":20},"end":{"line":401,"column":84}},"108":{"start":{"line":402,"column":20},"end":{"line":402,"column":51}},"109":{"start":{"line":404,"column":20},"end":{"line":404,"column":35}},"110":{"start":{"line":407,"column":16},"end":{"line":407,"column":22}},"111":{"start":{"line":410,"column":16},"end":{"line":427,"column":17}},"112":{"start":{"line":416,"column":20},"end":{"line":416,"column":52}},"113":{"start":{"line":417,"column":20},"end":{"line":417,"column":62}},"114":{"start":{"line":425,"column":20},"end":{"line":425,"column":53}},"115":{"start":{"line":426,"column":20},"end":{"line":426,"column":63}},"116":{"start":{"line":429,"column":16},"end":{"line":429,"column":22}},"117":{"start":{"line":437,"column":16},"end":{"line":437,"column":31}},"118":{"start":{"line":441,"column":16},"end":{"line":441,"column":47},"skip":true},"119":{"start":{"line":445,"column":8},"end":{"line":445,"column":56}},"120":{"start":{"line":447,"column":8},"end":{"line":447,"column":57}},"121":{"start":{"line":448,"column":8},"end":{"line":448,"column":65}},"122":{"start":{"line":450,"column":8},"end":{"line":450,"column":23}},"123":{"start":{"line":460,"column":8},"end":{"line":460,"column":43}},"124":{"start":{"line":461,"column":8},"end":{"line":461,"column":45}},"125":{"start":{"line":463,"column":8},"end":{"line":495,"column":9}},"126":{"start":{"line":469,"column":12},"end":{"line":471,"column":63}},"127":{"start":{"line":473,"column":12},"end":{"line":473,"column":69}},"128":{"start":{"line":474,"column":12},"end":{"line":474,"column":36}},"129":{"start":{"line":476,"column":12},"end":{"line":476,"column":38}},"130":{"start":{"line":484,"column":12},"end":{"line":492,"column":13}},"131":{"start":{"line":487,"column":16},"end":{"line":487,"column":63}},"132":{"start":{"line":491,"column":16},"end":{"line":491,"column":62}},"133":{"start":{"line":494,"column":12},"end":{"line":494,"column":66}},"134":{"start":{"line":504,"column":8},"end":{"line":504,"column":43}},"135":{"start":{"line":505,"column":8},"end":{"line":505,"column":45}},"136":{"start":{"line":512,"column":8},"end":{"line":515,"column":9}},"137":{"start":{"line":513,"column":12},"end":{"line":513,"column":58}},"138":{"start":{"line":514,"column":12},"end":{"line":514,"column":59}},"139":{"start":{"line":517,"column":8},"end":{"line":517,"column":34}},"140":{"start":{"line":520,"column":8},"end":{"line":522,"column":10}},"141":{"start":{"line":531,"column":8},"end":{"line":531,"column":43}},"142":{"start":{"line":532,"column":8},"end":{"line":532,"column":45}},"143":{"start":{"line":538,"column":8},"end":{"line":538,"column":40}},"144":{"start":{"line":539,"column":8},"end":{"line":539,"column":54}},"145":{"start":{"line":540,"column":8},"end":{"line":540,"column":33}},"146":{"start":{"line":543,"column":8},"end":{"line":545,"column":10}},"147":{"start":{"line":561,"column":8},"end":{"line":569,"column":10}},"148":{"start":{"line":571,"column":8},"end":{"line":571,"column":43}},"149":{"start":{"line":585,"column":8},"end":{"line":585,"column":43}},"150":{"start":{"line":587,"column":8},"end":{"line":587,"column":43}},"151":{"start":{"line":589,"column":8},"end":{"line":589,"column":45}},"152":{"start":{"line":590,"column":8},"end":{"line":590,"column":75}},"153":{"start":{"line":592,"column":8},"end":{"line":605,"column":9}},"154":{"start":{"line":599,"column":12},"end":{"line":602,"column":13}},"155":{"start":{"line":600,"column":16},"end":{"line":600,"column":68}},"156":{"start":{"line":601,"column":16},"end":{"line":601,"column":75}},"157":{"start":{"line":604,"column":12},"end":{"line":604,"column":19}},"158":{"start":{"line":607,"column":8},"end":{"line":607,"column":46}},"159":{"start":{"line":609,"column":8},"end":{"line":609,"column":30}},"160":{"start":{"line":610,"column":8},"end":{"line":610,"column":50}},"161":{"start":{"line":616,"column":8},"end":{"line":616,"column":44}},"162":{"start":{"line":622,"column":8},"end":{"line":639,"column":9}},"163":{"start":{"line":623,"column":12},"end":{"line":638,"column":13}},"164":{"start":{"line":629,"column":16},"end":{"line":629,"column":87}},"165":{"start":{"line":630,"column":16},"end":{"line":630,"column":80}},"166":{"start":{"line":637,"column":16},"end":{"line":637,"column":56}},"167":{"start":{"line":642,"column":8},"end":{"line":644,"column":9}},"168":{"start":{"line":643,"column":12},"end":{"line":643,"column":54}},"169":{"start":{"line":650,"column":8},"end":{"line":650,"column":72}},"170":{"start":{"line":661,"column":8},"end":{"line":661,"column":43}},"171":{"start":{"line":663,"column":8},"end":{"line":665,"column":9}},"172":{"start":{"line":664,"column":12},"end":{"line":664,"column":19}},"173":{"start":{"line":672,"column":8},"end":{"line":672,"column":51}},"174":{"start":{"line":673,"column":8},"end":{"line":673,"column":51}},"175":{"start":{"line":675,"column":8},"end":{"line":675,"column":59}},"176":{"start":{"line":682,"column":8},"end":{"line":694,"column":9}},"177":{"start":{"line":683,"column":12},"end":{"line":683,"column":61}},"178":{"start":{"line":684,"column":12},"end":{"line":688,"column":13}},"179":{"start":{"line":685,"column":16},"end":{"line":685,"column":44}},"180":{"start":{"line":687,"column":16},"end":{"line":687,"column":63}},"181":{"start":{"line":690,"column":12},"end":{"line":693,"column":13}},"182":{"start":{"line":691,"column":16},"end":{"line":691,"column":45}},"183":{"start":{"line":692,"column":16},"end":{"line":692,"column":63}},"184":{"start":{"line":696,"column":8},"end":{"line":696,"column":42}},"185":{"start":{"line":697,"column":8},"end":{"line":697,"column":32}},"186":{"start":{"line":712,"column":8},"end":{"line":724,"column":10}},"187":{"start":{"line":733,"column":8},"end":{"line":733,"column":40}},"188":{"start":{"line":735,"column":8},"end":{"line":735,"column":40}},"189":{"start":{"line":737,"column":8},"end":{"line":742,"column":9}},"190":{"start":{"line":740,"column":12},"end":{"line":740,"column":34}},"191":{"start":{"line":741,"column":12},"end":{"line":741,"column":19}},"192":{"start":{"line":749,"column":8},"end":{"line":749,"column":53}},"193":{"start":{"line":750,"column":8},"end":{"line":750,"column":49}},"194":{"start":{"line":752,"column":8},"end":{"line":754,"column":9}},"195":{"start":{"line":753,"column":12},"end":{"line":753,"column":19}},"196":{"start":{"line":757,"column":8},"end":{"line":757,"column":51}},"197":{"start":{"line":759,"column":8},"end":{"line":759,"column":50}},"198":{"start":{"line":760,"column":8},"end":{"line":760,"column":82}},"199":{"start":{"line":761,"column":8},"end":{"line":761,"column":80}},"200":{"start":{"line":764,"column":8},"end":{"line":766,"column":9}},"201":{"start":{"line":765,"column":12},"end":{"line":765,"column":76}},"202":{"start":{"line":767,"column":8},"end":{"line":769,"column":9}},"203":{"start":{"line":768,"column":12},"end":{"line":768,"column":73}},"204":{"start":{"line":772,"column":8},"end":{"line":772,"column":53}},"205":{"start":{"line":776,"column":8},"end":{"line":778,"column":9}},"206":{"start":{"line":777,"column":12},"end":{"line":777,"column":47}},"207":{"start":{"line":787,"column":8},"end":{"line":787,"column":40}},"208":{"start":{"line":788,"column":8},"end":{"line":788,"column":45}},"209":{"start":{"line":789,"column":8},"end":{"line":789,"column":49}},"210":{"start":{"line":792,"column":8},"end":{"line":792,"column":35}},"211":{"start":{"line":793,"column":8},"end":{"line":793,"column":70}},"212":{"start":{"line":794,"column":8},"end":{"line":794,"column":61}},"213":{"start":{"line":797,"column":8},"end":{"line":797,"column":37}},"214":{"start":{"line":798,"column":8},"end":{"line":798,"column":54}},"215":{"start":{"line":801,"column":8},"end":{"line":801,"column":31}},"216":{"start":{"line":802,"column":8},"end":{"line":802,"column":30}},"217":{"start":{"line":803,"column":8},"end":{"line":803,"column":45}},"218":{"start":{"line":816,"column":8},"end":{"line":816,"column":40}},"219":{"start":{"line":817,"column":8},"end":{"line":817,"column":43}},"220":{"start":{"line":818,"column":8},"end":{"line":818,"column":53}},"221":{"start":{"line":819,"column":8},"end":{"line":819,"column":49}},"222":{"start":{"line":820,"column":8},"end":{"line":820,"column":55}},"223":{"start":{"line":823,"column":8},"end":{"line":832,"column":9}},"224":{"start":{"line":826,"column":12},"end":{"line":826,"column":34}},"225":{"start":{"line":827,"column":12},"end":{"line":827,"column":43}},"226":{"start":{"line":829,"column":12},"end":{"line":829,"column":67}},"227":{"start":{"line":831,"column":12},"end":{"line":831,"column":65}},"228":{"start":{"line":833,"column":8},"end":{"line":833,"column":37}},"229":{"start":{"line":835,"column":8},"end":{"line":839,"column":9}},"230":{"start":{"line":838,"column":12},"end":{"line":838,"column":19}},"231":{"start":{"line":845,"column":8},"end":{"line":845,"column":54}},"232":{"start":{"line":846,"column":8},"end":{"line":846,"column":14}},"233":{"start":{"line":848,"column":8},"end":{"line":861,"column":9}},"234":{"start":{"line":849,"column":12},"end":{"line":849,"column":72}},"235":{"start":{"line":851,"column":12},"end":{"line":853,"column":13}},"236":{"start":{"line":852,"column":16},"end":{"line":852,"column":75}},"237":{"start":{"line":854,"column":12},"end":{"line":856,"column":13}},"238":{"start":{"line":855,"column":16},"end":{"line":855,"column":73}},"239":{"start":{"line":858,"column":12},"end":{"line":860,"column":43}},"240":{"start":{"line":863,"column":8},"end":{"line":863,"column":35}},"241":{"start":{"line":864,"column":8},"end":{"line":864,"column":39}},"242":{"start":{"line":874,"column":8},"end":{"line":874,"column":45}},"243":{"start":{"line":876,"column":8},"end":{"line":878,"column":9}},"244":{"start":{"line":877,"column":12},"end":{"line":877,"column":19}},"245":{"start":{"line":880,"column":8},"end":{"line":880,"column":46}},"246":{"start":{"line":882,"column":8},"end":{"line":887,"column":9}},"247":{"start":{"line":886,"column":12},"end":{"line":886,"column":19}},"248":{"start":{"line":889,"column":8},"end":{"line":889,"column":56}},"249":{"start":{"line":890,"column":8},"end":{"line":890,"column":62}},"250":{"start":{"line":907,"column":8},"end":{"line":907,"column":45}},"251":{"start":{"line":908,"column":8},"end":{"line":908,"column":64}},"252":{"start":{"line":910,"column":8},"end":{"line":970,"column":9}},"253":{"start":{"line":912,"column":16},"end":{"line":912,"column":54}},"254":{"start":{"line":913,"column":16},"end":{"line":920,"column":18}},"255":{"start":{"line":921,"column":16},"end":{"line":921,"column":22}},"256":{"start":{"line":924,"column":16},"end":{"line":924,"column":54}},"257":{"start":{"line":925,"column":16},"end":{"line":933,"column":18}},"258":{"start":{"line":934,"column":16},"end":{"line":934,"column":22}},"259":{"start":{"line":937,"column":16},"end":{"line":937,"column":54}},"260":{"start":{"line":938,"column":16},"end":{"line":950,"column":18}},"261":{"start":{"line":951,"column":16},"end":{"line":951,"column":22}},"262":{"start":{"line":955,"column":16},"end":{"line":964,"column":18}},"263":{"start":{"line":965,"column":16},"end":{"line":965,"column":22}},"264":{"start":{"line":969,"column":16},"end":{"line":969,"column":59},"skip":true},"265":{"start":{"line":979,"column":8},"end":{"line":979,"column":41}},"266":{"start":{"line":981,"column":8},"end":{"line":981,"column":41}},"267":{"start":{"line":983,"column":8},"end":{"line":983,"column":45}},"268":{"start":{"line":984,"column":8},"end":{"line":984,"column":75}},"269":{"start":{"line":985,"column":8},"end":{"line":985,"column":26}},"270":{"start":{"line":988,"column":8},"end":{"line":1033,"column":9}},"271":{"start":{"line":991,"column":16},"end":{"line":991,"column":56}},"272":{"start":{"line":992,"column":16},"end":{"line":995,"column":50}},"273":{"start":{"line":996,"column":16},"end":{"line":996,"column":22}},"274":{"start":{"line":999,"column":16},"end":{"line":999,"column":56}},"275":{"start":{"line":1001,"column":16},"end":{"line":1004,"column":17}},"276":{"start":{"line":1002,"column":20},"end":{"line":1002,"column":72}},"277":{"start":{"line":1003,"column":20},"end":{"line":1003,"column":73}},"278":{"start":{"line":1005,"column":16},"end":{"line":1007,"column":17}},"279":{"start":{"line":1006,"column":20},"end":{"line":1006,"column":77}},"280":{"start":{"line":1010,"column":16},"end":{"line":1010,"column":80}},"281":{"start":{"line":1012,"column":16},"end":{"line":1017,"column":17}},"282":{"start":{"line":1013,"column":20},"end":{"line":1016,"column":47}},"283":{"start":{"line":1018,"column":16},"end":{"line":1018,"column":22}},"284":{"start":{"line":1023,"column":16},"end":{"line":1023,"column":56}},"285":{"start":{"line":1024,"column":16},"end":{"line":1027,"column":42}},"286":{"start":{"line":1028,"column":16},"end":{"line":1028,"column":22}},"287":{"start":{"line":1032,"column":16},"end":{"line":1032,"column":47},"skip":true},"288":{"start":{"line":1036,"column":8},"end":{"line":1040,"column":9}},"289":{"start":{"line":1037,"column":12},"end":{"line":1037,"column":73}},"290":{"start":{"line":1039,"column":12},"end":{"line":1039,"column":71}},"291":{"start":{"line":1050,"column":8},"end":{"line":1050,"column":41}},"292":{"start":{"line":1051,"column":8},"end":{"line":1051,"column":45}},"293":{"start":{"line":1052,"column":8},"end":{"line":1052,"column":57}},"294":{"start":{"line":1055,"column":8},"end":{"line":1055,"column":28}},"295":{"start":{"line":1056,"column":8},"end":{"line":1056,"column":52}},"296":{"start":{"line":1057,"column":8},"end":{"line":1057,"column":46}},"297":{"start":{"line":1066,"column":8},"end":{"line":1066,"column":41}},"298":{"start":{"line":1067,"column":8},"end":{"line":1067,"column":49}},"299":{"start":{"line":1068,"column":8},"end":{"line":1068,"column":45}},"300":{"start":{"line":1070,"column":8},"end":{"line":1073,"column":9}},"301":{"start":{"line":1071,"column":12},"end":{"line":1071,"column":64}},"302":{"start":{"line":1072,"column":12},"end":{"line":1072,"column":65}},"303":{"start":{"line":1076,"column":8},"end":{"line":1078,"column":9}},"304":{"start":{"line":1077,"column":12},"end":{"line":1077,"column":77}},"305":{"start":{"line":1079,"column":8},"end":{"line":1079,"column":79}},"306":{"start":{"line":1088,"column":8},"end":{"line":1088,"column":41}},"307":{"start":{"line":1089,"column":8},"end":{"line":1089,"column":45}},"308":{"start":{"line":1090,"column":8},"end":{"line":1090,"column":58}},"309":{"start":{"line":1093,"column":8},"end":{"line":1093,"column":45}},"310":{"start":{"line":1094,"column":8},"end":{"line":1094,"column":46}},"311":{"start":{"line":1104,"column":8},"end":{"line":1104,"column":41}},"312":{"start":{"line":1105,"column":8},"end":{"line":1105,"column":45}},"313":{"start":{"line":1107,"column":8},"end":{"line":1107,"column":28}},"314":{"start":{"line":1110,"column":8},"end":{"line":1115,"column":9}},"315":{"start":{"line":1111,"column":12},"end":{"line":1111,"column":62}},"316":{"start":{"line":1112,"column":12},"end":{"line":1112,"column":77}},"317":{"start":{"line":1114,"column":12},"end":{"line":1114,"column":50}},"318":{"start":{"line":1125,"column":8},"end":{"line":1125,"column":41}},"319":{"start":{"line":1126,"column":8},"end":{"line":1126,"column":45}},"320":{"start":{"line":1127,"column":8},"end":{"line":1127,"column":51}},"321":{"start":{"line":1128,"column":8},"end":{"line":1128,"column":58}},"322":{"start":{"line":1131,"column":8},"end":{"line":1131,"column":28}},"323":{"start":{"line":1132,"column":8},"end":{"line":1132,"column":54}},"324":{"start":{"line":1133,"column":8},"end":{"line":1133,"column":75}},"325":{"start":{"line":1134,"column":8},"end":{"line":1134,"column":46}},"326":{"start":{"line":1143,"column":8},"end":{"line":1143,"column":41}},"327":{"start":{"line":1144,"column":8},"end":{"line":1144,"column":49}},"328":{"start":{"line":1145,"column":8},"end":{"line":1145,"column":45}},"329":{"start":{"line":1148,"column":8},"end":{"line":1155,"column":9}},"330":{"start":{"line":1149,"column":12},"end":{"line":1152,"column":34}},"331":{"start":{"line":1154,"column":12},"end":{"line":1154,"column":57}},"332":{"start":{"line":1158,"column":8},"end":{"line":1158,"column":68}},"333":{"start":{"line":1160,"column":8},"end":{"line":1160,"column":79}},"334":{"start":{"line":1161,"column":8},"end":{"line":1161,"column":48}},"335":{"start":{"line":1170,"column":8},"end":{"line":1170,"column":41}},"336":{"start":{"line":1171,"column":8},"end":{"line":1171,"column":49}},"337":{"start":{"line":1172,"column":8},"end":{"line":1172,"column":45}},"338":{"start":{"line":1175,"column":8},"end":{"line":1192,"column":9}},"339":{"start":{"line":1176,"column":12},"end":{"line":1176,"column":59}},"340":{"start":{"line":1179,"column":12},"end":{"line":1184,"column":13}},"341":{"start":{"line":1180,"column":16},"end":{"line":1183,"column":42}},"342":{"start":{"line":1185,"column":15},"end":{"line":1192,"column":9}},"343":{"start":{"line":1186,"column":12},"end":{"line":1189,"column":34}},"344":{"start":{"line":1191,"column":12},"end":{"line":1191,"column":57}},"345":{"start":{"line":1194,"column":8},"end":{"line":1194,"column":53}},"346":{"start":{"line":1196,"column":8},"end":{"line":1210,"column":9}},"347":{"start":{"line":1202,"column":12},"end":{"line":1202,"column":70}},"348":{"start":{"line":1204,"column":12},"end":{"line":1204,"column":59}},"349":{"start":{"line":1205,"column":12},"end":{"line":1207,"column":13}},"350":{"start":{"line":1206,"column":16},"end":{"line":1206,"column":65}},"351":{"start":{"line":1209,"column":12},"end":{"line":1209,"column":59}},"352":{"start":{"line":1211,"column":8},"end":{"line":1211,"column":84}},"353":{"start":{"line":1212,"column":8},"end":{"line":1212,"column":46}},"354":{"start":{"line":1222,"column":8},"end":{"line":1222,"column":41}},"355":{"start":{"line":1223,"column":8},"end":{"line":1223,"column":45}},"356":{"start":{"line":1224,"column":8},"end":{"line":1224,"column":66}},"357":{"start":{"line":1227,"column":8},"end":{"line":1227,"column":48}},"358":{"start":{"line":1228,"column":8},"end":{"line":1228,"column":75}},"359":{"start":{"line":1229,"column":8},"end":{"line":1229,"column":46}},"360":{"start":{"line":1239,"column":8},"end":{"line":1239,"column":41}},"361":{"start":{"line":1240,"column":8},"end":{"line":1240,"column":45}},"362":{"start":{"line":1241,"column":8},"end":{"line":1241,"column":55}},"363":{"start":{"line":1243,"column":8},"end":{"line":1243,"column":39}},"364":{"start":{"line":1244,"column":8},"end":{"line":1244,"column":52}},"365":{"start":{"line":1247,"column":8},"end":{"line":1247,"column":53}},"366":{"start":{"line":1248,"column":8},"end":{"line":1248,"column":47}},"367":{"start":{"line":1258,"column":8},"end":{"line":1258,"column":41}},"368":{"start":{"line":1259,"column":8},"end":{"line":1259,"column":45}},"369":{"start":{"line":1260,"column":8},"end":{"line":1260,"column":55}},"370":{"start":{"line":1262,"column":8},"end":{"line":1262,"column":44}},"371":{"start":{"line":1263,"column":8},"end":{"line":1263,"column":51}},"372":{"start":{"line":1266,"column":8},"end":{"line":1266,"column":65}},"373":{"start":{"line":1269,"column":8},"end":{"line":1269,"column":56}},"374":{"start":{"line":1270,"column":8},"end":{"line":1270,"column":46}},"375":{"start":{"line":1286,"column":8},"end":{"line":1291,"column":10}},"376":{"start":{"line":1292,"column":8},"end":{"line":1292,"column":33}},"377":{"start":{"line":1301,"column":8},"end":{"line":1301,"column":42}},"378":{"start":{"line":1302,"column":8},"end":{"line":1302,"column":45}},"379":{"start":{"line":1304,"column":8},"end":{"line":1304,"column":42}},"380":{"start":{"line":1307,"column":8},"end":{"line":1314,"column":9}},"381":{"start":{"line":1308,"column":12},"end":{"line":1308,"column":64}},"382":{"start":{"line":1310,"column":12},"end":{"line":1313,"column":13}},"383":{"start":{"line":1311,"column":16},"end":{"line":1311,"column":56}},"384":{"start":{"line":1312,"column":16},"end":{"line":1312,"column":75}},"385":{"start":{"line":1316,"column":8},"end":{"line":1316,"column":23}},"386":{"start":{"line":1329,"column":8},"end":{"line":1329,"column":45}},"387":{"start":{"line":1331,"column":8},"end":{"line":1333,"column":9}},"388":{"start":{"line":1332,"column":12},"end":{"line":1332,"column":19}},"389":{"start":{"line":1335,"column":8},"end":{"line":1335,"column":53}},"390":{"start":{"line":1338,"column":8},"end":{"line":1340,"column":9}},"391":{"start":{"line":1339,"column":12},"end":{"line":1339,"column":60}},"392":{"start":{"line":1342,"column":8},"end":{"line":1342,"column":69}},"393":{"start":{"line":1355,"column":8},"end":{"line":1355,"column":45}},"394":{"start":{"line":1357,"column":8},"end":{"line":1359,"column":9}},"395":{"start":{"line":1358,"column":12},"end":{"line":1358,"column":19}},"396":{"start":{"line":1361,"column":8},"end":{"line":1361,"column":56}},"397":{"start":{"line":1364,"column":8},"end":{"line":1377,"column":9}},"398":{"start":{"line":1365,"column":12},"end":{"line":1376,"column":13}},"399":{"start":{"line":1366,"column":16},"end":{"line":1366,"column":81}},"400":{"start":{"line":1369,"column":16},"end":{"line":1373,"column":17}},"401":{"start":{"line":1372,"column":20},"end":{"line":1372,"column":68}},"402":{"start":{"line":1375,"column":16},"end":{"line":1375,"column":66}},"403":{"start":{"line":1378,"column":8},"end":{"line":1378,"column":69}},"404":{"start":{"line":1390,"column":8},"end":{"line":1390,"column":45}},"405":{"start":{"line":1392,"column":8},"end":{"line":1395,"column":9}},"406":{"start":{"line":1393,"column":12},"end":{"line":1393,"column":77}},"407":{"start":{"line":1394,"column":12},"end":{"line":1394,"column":73}},"408":{"start":{"line":1407,"column":8},"end":{"line":1407,"column":45}},"409":{"start":{"line":1409,"column":8},"end":{"line":1412,"column":9}},"410":{"start":{"line":1410,"column":12},"end":{"line":1410,"column":74}},"411":{"start":{"line":1411,"column":12},"end":{"line":1411,"column":73}},"412":{"start":{"line":1420,"column":8},"end":{"line":1420,"column":46}},"413":{"start":{"line":1422,"column":8},"end":{"line":1424,"column":9}},"414":{"start":{"line":1423,"column":12},"end":{"line":1423,"column":51}},"415":{"start":{"line":1428,"column":0},"end":{"line":1428,"column":31}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"4":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]},"5":{"line":79,"type":"cond-expr","locations":[{"start":{"line":79,"column":20},"end":{"line":79,"column":43}},{"start":{"line":79,"column":46},"end":{"line":79,"column":63}}]},"6":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":8}},{"start":{"line":99,"column":8},"end":{"line":99,"column":8}}]},"7":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":32}},{"start":{"line":99,"column":36},"end":{"line":99,"column":66}}]},"8":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":8},"end":{"line":118,"column":8}},{"start":{"line":118,"column":8},"end":{"line":118,"column":8}}]},"9":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":12},"end":{"line":118,"column":38}},{"start":{"line":119,"column":13},"end":{"line":119,"column":33}},{"start":{"line":119,"column":37},"end":{"line":119,"column":65}}]},"10":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":8},"end":{"line":178,"column":8}},{"start":{"line":178,"column":8},"end":{"line":178,"column":8}}]},"11":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":181,"column":8}},{"start":{"line":181,"column":8},"end":{"line":181,"column":8}}]},"12":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":8},"end":{"line":187,"column":8}},{"start":{"line":187,"column":8},"end":{"line":187,"column":8}}]},"13":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":4},"end":{"line":207,"column":4}},{"start":{"line":207,"column":4},"end":{"line":207,"column":4}}]},"14":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":4},"end":{"line":212,"column":4}},{"start":{"line":212,"column":4},"end":{"line":212,"column":4}}]},"15":{"line":270,"type":"binary-expr","locations":[{"start":{"line":270,"column":15},"end":{"line":270,"column":22}},{"start":{"line":270,"column":26},"end":{"line":270,"column":39}}]},"16":{"line":379,"type":"switch","locations":[{"start":{"line":380,"column":12},"end":{"line":380,"column":22}},{"start":{"line":381,"column":12},"end":{"line":407,"column":22}},{"start":{"line":409,"column":12},"end":{"line":429,"column":22}},{"start":{"line":431,"column":12},"end":{"line":437,"column":31}},{"start":{"line":440,"column":12},"end":{"line":441,"column":47},"skip":true}]},"17":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":16},"end":{"line":388,"column":16}},{"start":{"line":388,"column":16},"end":{"line":388,"column":16}}]},"18":{"line":397,"type":"if","locations":[{"start":{"line":397,"column":16},"end":{"line":397,"column":16}},{"start":{"line":397,"column":16},"end":{"line":397,"column":16}}]},"19":{"line":410,"type":"if","locations":[{"start":{"line":410,"column":16},"end":{"line":410,"column":16}},{"start":{"line":410,"column":16},"end":{"line":410,"column":16}}]},"20":{"line":463,"type":"if","locations":[{"start":{"line":463,"column":8},"end":{"line":463,"column":8}},{"start":{"line":463,"column":8},"end":{"line":463,"column":8}}]},"21":{"line":470,"type":"cond-expr","locations":[{"start":{"line":470,"column":40},"end":{"line":470,"column":63}},{"start":{"line":471,"column":38},"end":{"line":471,"column":62}}]},"22":{"line":484,"type":"if","locations":[{"start":{"line":484,"column":12},"end":{"line":484,"column":12}},{"start":{"line":484,"column":12},"end":{"line":484,"column":12}}]},"23":{"line":512,"type":"if","locations":[{"start":{"line":512,"column":8},"end":{"line":512,"column":8}},{"start":{"line":512,"column":8},"end":{"line":512,"column":8}}]},"24":{"line":592,"type":"if","locations":[{"start":{"line":592,"column":8},"end":{"line":592,"column":8}},{"start":{"line":592,"column":8},"end":{"line":592,"column":8}}]},"25":{"line":599,"type":"if","locations":[{"start":{"line":599,"column":12},"end":{"line":599,"column":12}},{"start":{"line":599,"column":12},"end":{"line":599,"column":12}}]},"26":{"line":622,"type":"if","locations":[{"start":{"line":622,"column":8},"end":{"line":622,"column":8}},{"start":{"line":622,"column":8},"end":{"line":622,"column":8}}]},"27":{"line":623,"type":"if","locations":[{"start":{"line":623,"column":12},"end":{"line":623,"column":12}},{"start":{"line":623,"column":12},"end":{"line":623,"column":12}}]},"28":{"line":663,"type":"if","locations":[{"start":{"line":663,"column":8},"end":{"line":663,"column":8}},{"start":{"line":663,"column":8},"end":{"line":663,"column":8}}]},"29":{"line":682,"type":"if","locations":[{"start":{"line":682,"column":8},"end":{"line":682,"column":8}},{"start":{"line":682,"column":8},"end":{"line":682,"column":8}}]},"30":{"line":684,"type":"if","locations":[{"start":{"line":684,"column":12},"end":{"line":684,"column":12}},{"start":{"line":684,"column":12},"end":{"line":684,"column":12}}]},"31":{"line":690,"type":"if","locations":[{"start":{"line":690,"column":12},"end":{"line":690,"column":12}},{"start":{"line":690,"column":12},"end":{"line":690,"column":12}}]},"32":{"line":690,"type":"binary-expr","locations":[{"start":{"line":690,"column":16},"end":{"line":690,"column":24}},{"start":{"line":690,"column":28},"end":{"line":690,"column":48}}]},"33":{"line":717,"type":"cond-expr","locations":[{"start":{"line":718,"column":18},"end":{"line":718,"column":56}},{"start":{"line":719,"column":18},"end":{"line":719,"column":22}}]},"34":{"line":737,"type":"if","locations":[{"start":{"line":737,"column":8},"end":{"line":737,"column":8}},{"start":{"line":737,"column":8},"end":{"line":737,"column":8}}]},"35":{"line":752,"type":"if","locations":[{"start":{"line":752,"column":8},"end":{"line":752,"column":8}},{"start":{"line":752,"column":8},"end":{"line":752,"column":8}}]},"36":{"line":752,"type":"binary-expr","locations":[{"start":{"line":752,"column":12},"end":{"line":752,"column":26}},{"start":{"line":752,"column":30},"end":{"line":752,"column":42}}]},"37":{"line":764,"type":"if","locations":[{"start":{"line":764,"column":8},"end":{"line":764,"column":8}},{"start":{"line":764,"column":8},"end":{"line":764,"column":8}}]},"38":{"line":767,"type":"if","locations":[{"start":{"line":767,"column":8},"end":{"line":767,"column":8}},{"start":{"line":767,"column":8},"end":{"line":767,"column":8}}]},"39":{"line":776,"type":"if","locations":[{"start":{"line":776,"column":8},"end":{"line":776,"column":8}},{"start":{"line":776,"column":8},"end":{"line":776,"column":8}}]},"40":{"line":776,"type":"binary-expr","locations":[{"start":{"line":776,"column":12},"end":{"line":776,"column":41}},{"start":{"line":776,"column":45},"end":{"line":776,"column":76}}]},"41":{"line":823,"type":"if","locations":[{"start":{"line":823,"column":8},"end":{"line":823,"column":8}},{"start":{"line":823,"column":8},"end":{"line":823,"column":8}}]},"42":{"line":835,"type":"if","locations":[{"start":{"line":835,"column":8},"end":{"line":835,"column":8}},{"start":{"line":835,"column":8},"end":{"line":835,"column":8}}]},"43":{"line":835,"type":"binary-expr","locations":[{"start":{"line":835,"column":12},"end":{"line":835,"column":26}},{"start":{"line":835,"column":30},"end":{"line":835,"column":42}}]},"44":{"line":876,"type":"if","locations":[{"start":{"line":876,"column":8},"end":{"line":876,"column":8}},{"start":{"line":876,"column":8},"end":{"line":876,"column":8}}]},"45":{"line":882,"type":"if","locations":[{"start":{"line":882,"column":8},"end":{"line":882,"column":8}},{"start":{"line":882,"column":8},"end":{"line":882,"column":8}}]},"46":{"line":882,"type":"binary-expr","locations":[{"start":{"line":882,"column":12},"end":{"line":882,"column":28}},{"start":{"line":883,"column":12},"end":{"line":883,"column":38}},{"start":{"line":884,"column":12},"end":{"line":884,"column":44}}]},"47":{"line":910,"type":"switch","locations":[{"start":{"line":911,"column":12},"end":{"line":921,"column":22}},{"start":{"line":923,"column":12},"end":{"line":934,"column":22}},{"start":{"line":936,"column":12},"end":{"line":951,"column":22}},{"start":{"line":953,"column":12},"end":{"line":953,"column":34}},{"start":{"line":954,"column":12},"end":{"line":965,"column":22}},{"start":{"line":968,"column":12},"end":{"line":969,"column":59},"skip":true}]},"48":{"line":988,"type":"switch","locations":[{"start":{"line":989,"column":12},"end":{"line":989,"column":34}},{"start":{"line":990,"column":12},"end":{"line":996,"column":22}},{"start":{"line":998,"column":12},"end":{"line":1019,"column":13}},{"start":{"line":1021,"column":12},"end":{"line":1021,"column":34}},{"start":{"line":1022,"column":12},"end":{"line":1028,"column":22}},{"start":{"line":1031,"column":12},"end":{"line":1032,"column":47},"skip":true}]},"49":{"line":1001,"type":"if","locations":[{"start":{"line":1001,"column":16},"end":{"line":1001,"column":16}},{"start":{"line":1001,"column":16},"end":{"line":1001,"column":16}}]},"50":{"line":1005,"type":"if","locations":[{"start":{"line":1005,"column":16},"end":{"line":1005,"column":16}},{"start":{"line":1005,"column":16},"end":{"line":1005,"column":16}}]},"51":{"line":1036,"type":"if","locations":[{"start":{"line":1036,"column":8},"end":{"line":1036,"column":8}},{"start":{"line":1036,"column":8},"end":{"line":1036,"column":8}}]},"52":{"line":1070,"type":"if","locations":[{"start":{"line":1070,"column":8},"end":{"line":1070,"column":8}},{"start":{"line":1070,"column":8},"end":{"line":1070,"column":8}}]},"53":{"line":1076,"type":"if","locations":[{"start":{"line":1076,"column":8},"end":{"line":1076,"column":8}},{"start":{"line":1076,"column":8},"end":{"line":1076,"column":8}}]},"54":{"line":1110,"type":"if","locations":[{"start":{"line":1110,"column":8},"end":{"line":1110,"column":8}},{"start":{"line":1110,"column":8},"end":{"line":1110,"column":8}}]},"55":{"line":1148,"type":"if","locations":[{"start":{"line":1148,"column":8},"end":{"line":1148,"column":8}},{"start":{"line":1148,"column":8},"end":{"line":1148,"column":8}}]},"56":{"line":1175,"type":"if","locations":[{"start":{"line":1175,"column":8},"end":{"line":1175,"column":8}},{"start":{"line":1175,"column":8},"end":{"line":1175,"column":8}}]},"57":{"line":1179,"type":"if","locations":[{"start":{"line":1179,"column":12},"end":{"line":1179,"column":12}},{"start":{"line":1179,"column":12},"end":{"line":1179,"column":12}}]},"58":{"line":1185,"type":"if","locations":[{"start":{"line":1185,"column":15},"end":{"line":1185,"column":15}},{"start":{"line":1185,"column":15},"end":{"line":1185,"column":15}}]},"59":{"line":1196,"type":"if","locations":[{"start":{"line":1196,"column":8},"end":{"line":1196,"column":8}},{"start":{"line":1196,"column":8},"end":{"line":1196,"column":8}}]},"60":{"line":1205,"type":"if","locations":[{"start":{"line":1205,"column":12},"end":{"line":1205,"column":12}},{"start":{"line":1205,"column":12},"end":{"line":1205,"column":12}}]},"61":{"line":1211,"type":"binary-expr","locations":[{"start":{"line":1211,"column":39},"end":{"line":1211,"column":67}},{"start":{"line":1211,"column":71},"end":{"line":1211,"column":83}}]},"62":{"line":1307,"type":"if","locations":[{"start":{"line":1307,"column":8},"end":{"line":1307,"column":8}},{"start":{"line":1307,"column":8},"end":{"line":1307,"column":8}}]},"63":{"line":1310,"type":"if","locations":[{"start":{"line":1310,"column":12},"end":{"line":1310,"column":12}},{"start":{"line":1310,"column":12},"end":{"line":1310,"column":12}}]},"64":{"line":1331,"type":"if","locations":[{"start":{"line":1331,"column":8},"end":{"line":1331,"column":8}},{"start":{"line":1331,"column":8},"end":{"line":1331,"column":8}}]},"65":{"line":1338,"type":"if","locations":[{"start":{"line":1338,"column":8},"end":{"line":1338,"column":8}},{"start":{"line":1338,"column":8},"end":{"line":1338,"column":8},"skip":true}]},"66":{"line":1357,"type":"if","locations":[{"start":{"line":1357,"column":8},"end":{"line":1357,"column":8}},{"start":{"line":1357,"column":8},"end":{"line":1357,"column":8}}]},"67":{"line":1364,"type":"if","locations":[{"start":{"line":1364,"column":8},"end":{"line":1364,"column":8}},{"start":{"line":1364,"column":8},"end":{"line":1364,"column":8},"skip":true}]},"68":{"line":1365,"type":"if","locations":[{"start":{"line":1365,"column":12},"end":{"line":1365,"column":12}},{"start":{"line":1365,"column":12},"end":{"line":1365,"column":12}}]},"69":{"line":1369,"type":"if","locations":[{"start":{"line":1369,"column":16},"end":{"line":1369,"column":16}},{"start":{"line":1369,"column":16},"end":{"line":1369,"column":16}}]},"70":{"line":1369,"type":"binary-expr","locations":[{"start":{"line":1369,"column":20},"end":{"line":1369,"column":53}},{"start":{"line":1370,"column":20},"end":{"line":1370,"column":53}}]},"71":{"line":1392,"type":"if","locations":[{"start":{"line":1392,"column":8},"end":{"line":1392,"column":8}},{"start":{"line":1392,"column":8},"end":{"line":1392,"column":8}}]},"72":{"line":1409,"type":"if","locations":[{"start":{"line":1409,"column":8},"end":{"line":1409,"column":8}},{"start":{"line":1409,"column":8},"end":{"line":1409,"column":8}}]},"73":{"line":1422,"type":"if","locations":[{"start":{"line":1422,"column":8},"end":{"line":1422,"column":8}},{"start":{"line":1422,"column":8},"end":{"line":1422,"column":8}}]},"74":{"line":1422,"type":"binary-expr","locations":[{"start":{"line":1422,"column":12},"end":{"line":1422,"column":31}},{"start":{"line":1422,"column":35},"end":{"line":1422,"column":56}}]}},"code":["/**"," * @fileoverview A class to manage state of generating a code path."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const CodePathSegment = require(\"./code-path-segment\"),","    ForkContext = require(\"./fork-context\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Adds given segments into the `dest` array."," * If the `others` array does not includes the given segments, adds to the `all`"," * array as well."," *"," * This adds only reachable and used segments."," *"," * @param {CodePathSegment[]} dest - A destination array (`returnedSegments` or `thrownSegments`)."," * @param {CodePathSegment[]} others - Another destination array (`returnedSegments` or `thrownSegments`)."," * @param {CodePathSegment[]} all - The unified destination array (`finalSegments`)."," * @param {CodePathSegment[]} segments - Segments to add."," * @returns {void}"," */","function addToReturnedOrThrown(dest, others, all, segments) {","    for (let i = 0; i < segments.length; ++i) {","        const segment = segments[i];","","        dest.push(segment);","        if (others.indexOf(segment) === -1) {","            all.push(segment);","        }","    }","}","","/**"," * Gets a loop-context for a `continue` statement."," *"," * @param {CodePathState} state - A state to get."," * @param {string} label - The label of a `continue` statement."," * @returns {LoopContext} A loop-context for a `continue` statement."," */","function getContinueContext(state, label) {","    if (!label) {","        return state.loopContext;","    }","","    let context = state.loopContext;","","    while (context) {","        if (context.label === label) {","            return context;","        }","        context = context.upper;","    }","","    /* istanbul ignore next: foolproof (syntax error) */","    return null;","}","","/**"," * Gets a context for a `break` statement."," *"," * @param {CodePathState} state - A state to get."," * @param {string} label - The label of a `break` statement."," * @returns {LoopContext|SwitchContext} A context for a `break` statement."," */","function getBreakContext(state, label) {","    let context = state.breakContext;","","    while (context) {","        if (label ? context.label === label : context.breakable) {","            return context;","        }","        context = context.upper;","    }","","    /* istanbul ignore next: foolproof (syntax error) */","    return null;","}","","/**"," * Gets a context for a `return` statement."," *"," * @param {CodePathState} state - A state to get."," * @returns {TryContext|CodePathState} A context for a `return` statement."," */","function getReturnContext(state) {","    let context = state.tryContext;","","    while (context) {","        if (context.hasFinalizer && context.position !== \"finally\") {","            return context;","        }","        context = context.upper;","    }","","    return state;","}","","/**"," * Gets a context for a `throw` statement."," *"," * @param {CodePathState} state - A state to get."," * @returns {TryContext|CodePathState} A context for a `throw` statement."," */","function getThrowContext(state) {","    let context = state.tryContext;","","    while (context) {","        if (context.position === \"try\" ||","            (context.hasFinalizer && context.position === \"catch\")","        ) {","            return context;","        }","        context = context.upper;","    }","","    return state;","}","","/**"," * Removes a given element from a given array."," *"," * @param {any[]} xs - An array to remove the specific element."," * @param {any} x - An element to be removed."," * @returns {void}"," */","function remove(xs, x) {","    xs.splice(xs.indexOf(x), 1);","}","","/**"," * Disconnect given segments."," *"," * This is used in a process for switch statements."," * If there is the \"default\" chunk before other cases, the order is different"," * between node's and running's."," *"," * @param {CodePathSegment[]} prevSegments - Forward segments to disconnect."," * @param {CodePathSegment[]} nextSegments - Backward segments to disconnect."," * @returns {void}"," */","function removeConnection(prevSegments, nextSegments) {","    for (let i = 0; i < prevSegments.length; ++i) {","        const prevSegment = prevSegments[i];","        const nextSegment = nextSegments[i];","","        remove(prevSegment.nextSegments, nextSegment);","        remove(prevSegment.allNextSegments, nextSegment);","        remove(nextSegment.prevSegments, prevSegment);","        remove(nextSegment.allPrevSegments, prevSegment);","    }","}","","/**"," * Creates looping path."," *"," * @param {CodePathState} state - The instance."," * @param {CodePathSegment[]} fromSegments - Segments which are source."," * @param {CodePathSegment[]} toSegments - Segments which are destination."," * @returns {void}"," */","function makeLooped(state, fromSegments, toSegments) {","    const end = Math.min(fromSegments.length, toSegments.length);","","    for (let i = 0; i < end; ++i) {","        const fromSegment = fromSegments[i];","        const toSegment = toSegments[i];","","        if (toSegment.reachable) {","            fromSegment.nextSegments.push(toSegment);","        }","        if (fromSegment.reachable) {","            toSegment.prevSegments.push(fromSegment);","        }","        fromSegment.allNextSegments.push(toSegment);","        toSegment.allPrevSegments.push(fromSegment);","","        if (toSegment.allPrevSegments.length >= 2) {","            CodePathSegment.markPrevSegmentAsLooped(toSegment, fromSegment);","        }","","        state.notifyLooped(fromSegment, toSegment);","    }","}","","/**"," * Finalizes segments of `test` chunk of a ForStatement."," *"," * - Adds `false` paths to paths which are leaving from the loop."," * - Sets `true` paths to paths which go to the body."," *"," * @param {LoopContext} context - A loop context to modify."," * @param {ChoiceContext} choiceContext - A choice context of this loop."," * @param {CodePathSegment[]} head - The current head paths."," * @returns {void}"," */","function finalizeTestSegmentsOfFor(context, choiceContext, head) {","    if (!choiceContext.processed) {","        choiceContext.trueForkContext.add(head);","        choiceContext.falseForkContext.add(head);","    }","","    if (context.test !== true) {","        context.brokenForkContext.addAll(choiceContext.falseForkContext);","    }","    context.endOfTestSegments = choiceContext.trueForkContext.makeNext(0, -1);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A class which manages state to analyze code paths."," */","class CodePathState {","","    /**","     * @param {IdGenerator} idGenerator - An id generator to generate id for code","     *   path segments.","     * @param {Function} onLooped - A callback function to notify looping.","     */","    constructor(idGenerator, onLooped) {","        this.idGenerator = idGenerator;","        this.notifyLooped = onLooped;","        this.forkContext = ForkContext.newRoot(idGenerator);","        this.choiceContext = null;","        this.switchContext = null;","        this.tryContext = null;","        this.loopContext = null;","        this.breakContext = null;","","        this.currentSegments = [];","        this.initialSegment = this.forkContext.head[ 0 ];","","        // returnedSegments and thrownSegments push elements into finalSegments also.","        const final = this.finalSegments = [];","        const returned = this.returnedForkContext = [];","        const thrown = this.thrownForkContext = [];","","        returned.add = addToReturnedOrThrown.bind(null, returned, thrown, final);","        thrown.add = addToReturnedOrThrown.bind(null, thrown, returned, final);","    }","","    /**","     * The head segments.","     * @type {CodePathSegment[]}","     */","    get headSegments() {","        return this.forkContext.head;","    }","","    /**","     * The parent forking context.","     * This is used for the root of new forks.","     * @type {ForkContext}","     */","    get parentForkContext() {","        const current = this.forkContext;","","        return current && current.upper;","    }","","    /**","     * Creates and stacks new forking context.","     *","     * @param {boolean} forkLeavingPath - A flag which shows being in a","     *   \"finally\" block.","     * @returns {ForkContext} The created context.","     */","    pushForkContext(forkLeavingPath) {","        this.forkContext = ForkContext.newEmpty(","            this.forkContext,","            forkLeavingPath","        );","","        return this.forkContext;","    }","","    /**","     * Pops and merges the last forking context.","     * @returns {ForkContext} The last context.","     */","    popForkContext() {","        const lastContext = this.forkContext;","","        this.forkContext = lastContext.upper;","        this.forkContext.replaceHead(lastContext.makeNext(0, -1));","","        return lastContext;","    }","","    /**","     * Creates a new path.","     * @returns {void}","     */","    forkPath() {","        this.forkContext.add(this.parentForkContext.makeNext(-1, -1));","    }","","    /**","     * Creates a bypass path.","     * This is used for such as IfStatement which does not have \"else\" chunk.","     *","     * @returns {void}","     */","    forkBypassPath() {","        this.forkContext.add(this.parentForkContext.head);","    }","","    //--------------------------------------------------------------------------","    // ConditionalExpression, LogicalExpression, IfStatement","    //--------------------------------------------------------------------------","","    /**","     * Creates a context for ConditionalExpression, LogicalExpression,","     * IfStatement, WhileStatement, DoWhileStatement, or ForStatement.","     *","     * LogicalExpressions have cases that it goes different paths between the","     * `true` case and the `false` case.","     *","     * For Example:","     *","     *     if (a || b) {","     *         foo();","     *     } else {","     *         bar();","     *     }","     *","     * In this case, `b` is evaluated always in the code path of the `else`","     * block, but it's not so in the code path of the `if` block.","     * So there are 3 paths.","     *","     *     a -> foo();","     *     a -> b -> foo();","     *     a -> b -> bar();","     *","     * @param {string} kind - A kind string.","     *   If the new context is LogicalExpression's, this is `\"&&\"` or `\"||\"`.","     *   If it's IfStatement's or ConditionalExpression's, this is `\"test\"`.","     *   Otherwise, this is `\"loop\"`.","     * @param {boolean} isForkingAsResult - A flag that shows that goes different","     *   paths between `true` and `false`.","     * @returns {void}","     */","    pushChoiceContext(kind, isForkingAsResult) {","        this.choiceContext = {","            upper: this.choiceContext,","            kind,","            isForkingAsResult,","            trueForkContext: ForkContext.newEmpty(this.forkContext),","            falseForkContext: ForkContext.newEmpty(this.forkContext),","            processed: false","        };","    }","","    /**","     * Pops the last choice context and finalizes it.","     *","     * @returns {ChoiceContext} The popped context.","     */","    popChoiceContext() {","        const context = this.choiceContext;","","        this.choiceContext = context.upper;","","        const forkContext = this.forkContext;","        const headSegments = forkContext.head;","","        switch (context.kind) {","            case \"&&\":","            case \"||\":","","                /*","                 * If any result were not transferred from child contexts,","                 * this sets the head segments to both cases.","                 * The head segments are the path of the right-hand operand.","                 */","                if (!context.processed) {","                    context.trueForkContext.add(headSegments);","                    context.falseForkContext.add(headSegments);","                }","","                /*","                 * Transfers results to upper context if this context is in","                 * test chunk.","                 */","                if (context.isForkingAsResult) {","                    const parentContext = this.choiceContext;","","                    parentContext.trueForkContext.addAll(context.trueForkContext);","                    parentContext.falseForkContext.addAll(context.falseForkContext);","                    parentContext.processed = true;","","                    return context;","                }","","                break;","","            case \"test\":","                if (!context.processed) {","","                    /*","                     * The head segments are the path of the `if` block here.","                     * Updates the `true` path with the end of the `if` block.","                     */","                    context.trueForkContext.clear();","                    context.trueForkContext.add(headSegments);","                } else {","","                    /*","                     * The head segments are the path of the `else` block here.","                     * Updates the `false` path with the end of the `else`","                     * block.","                     */","                    context.falseForkContext.clear();","                    context.falseForkContext.add(headSegments);","                }","","                break;","","            case \"loop\":","","                /*","                 * Loops are addressed in popLoopContext().","                 * This is called from popLoopContext().","                 */","                return context;","","            /* istanbul ignore next */","            default:","                throw new Error(\"unreachable\");","        }","","        // Merges all paths.","        const prevForkContext = context.trueForkContext;","","        prevForkContext.addAll(context.falseForkContext);","        forkContext.replaceHead(prevForkContext.makeNext(0, -1));","","        return context;","    }","","    /**","     * Makes a code path segment of the right-hand operand of a logical","     * expression.","     *","     * @returns {void}","     */","    makeLogicalRight() {","        const context = this.choiceContext;","        const forkContext = this.forkContext;","","        if (context.processed) {","","            /*","             * This got segments already from the child choice context.","             * Creates the next path from own true/false fork context.","             */","            const prevForkContext =","                context.kind === \"&&\" ? context.trueForkContext","                /* kind === \"||\" */ : context.falseForkContext;","","            forkContext.replaceHead(prevForkContext.makeNext(0, -1));","            prevForkContext.clear();","","            context.processed = false;","        } else {","","            /*","             * This did not get segments from the child choice context.","             * So addresses the head segments.","             * The head segments are the path of the left-hand operand.","             */","            if (context.kind === \"&&\") {","","                // The path does short-circuit if false.","                context.falseForkContext.add(forkContext.head);","            } else {","","                // The path does short-circuit if true.","                context.trueForkContext.add(forkContext.head);","            }","","            forkContext.replaceHead(forkContext.makeNext(-1, -1));","        }","    }","","    /**","     * Makes a code path segment of the `if` block.","     *","     * @returns {void}","     */","    makeIfConsequent() {","        const context = this.choiceContext;","        const forkContext = this.forkContext;","","        /*","         * If any result were not transferred from child contexts,","         * this sets the head segments to both cases.","         * The head segments are the path of the test expression.","         */","        if (!context.processed) {","            context.trueForkContext.add(forkContext.head);","            context.falseForkContext.add(forkContext.head);","        }","","        context.processed = false;","","        // Creates new path from the `true` case.","        forkContext.replaceHead(","            context.trueForkContext.makeNext(0, -1)","        );","    }","","    /**","     * Makes a code path segment of the `else` block.","     *","     * @returns {void}","     */","    makeIfAlternate() {","        const context = this.choiceContext;","        const forkContext = this.forkContext;","","        /*","         * The head segments are the path of the `if` block.","         * Updates the `true` path with the end of the `if` block.","         */","        context.trueForkContext.clear();","        context.trueForkContext.add(forkContext.head);","        context.processed = true;","","        // Creates new path from the `false` case.","        forkContext.replaceHead(","            context.falseForkContext.makeNext(0, -1)","        );","    }","","    //--------------------------------------------------------------------------","    // SwitchStatement","    //--------------------------------------------------------------------------","","    /**","     * Creates a context object of SwitchStatement and stacks it.","     *","     * @param {boolean} hasCase - `true` if the switch statement has one or more","     *   case parts.","     * @param {string|null} label - The label text.","     * @returns {void}","     */","    pushSwitchContext(hasCase, label) {","        this.switchContext = {","            upper: this.switchContext,","            hasCase,","            defaultSegments: null,","            defaultBodySegments: null,","            foundDefault: false,","            lastIsDefault: false,","            countForks: 0","        };","","        this.pushBreakContext(true, label);","    }","","    /**","     * Pops the last context of SwitchStatement and finalizes it.","     *","     * - Disposes all forking stack for `case` and `default`.","     * - Creates the next code path segment from `context.brokenForkContext`.","     * - If the last `SwitchCase` node is not a `default` part, creates a path","     *   to the `default` body.","     *","     * @returns {void}","     */","    popSwitchContext() {","        const context = this.switchContext;","","        this.switchContext = context.upper;","","        const forkContext = this.forkContext;","        const brokenForkContext = this.popBreakContext().brokenForkContext;","","        if (context.countForks === 0) {","","            /*","             * When there is only one `default` chunk and there is one or more","             * `break` statements, even if forks are nothing, it needs to merge","             * those.","             */","            if (!brokenForkContext.empty) {","                brokenForkContext.add(forkContext.makeNext(-1, -1));","                forkContext.replaceHead(brokenForkContext.makeNext(0, -1));","            }","","            return;","        }","","        const lastSegments = forkContext.head;","","        this.forkBypassPath();","        const lastCaseSegments = forkContext.head;","","        /*","         * `brokenForkContext` is used to make the next segment.","         * It must add the last segment into `brokenForkContext`.","         */","        brokenForkContext.add(lastSegments);","","        /*","         * A path which is failed in all case test should be connected to path","         * of `default` chunk.","         */","        if (!context.lastIsDefault) {","            if (context.defaultBodySegments) {","","                /*","                 * Remove a link from `default` label to its chunk.","                 * It's false route.","                 */","                removeConnection(context.defaultSegments, context.defaultBodySegments);","                makeLooped(this, lastCaseSegments, context.defaultBodySegments);","            } else {","","                /*","                 * It handles the last case body as broken if `default` chunk","                 * does not exist.","                 */","                brokenForkContext.add(lastCaseSegments);","            }","        }","","        // Pops the segment context stack until the entry segment.","        for (let i = 0; i < context.countForks; ++i) {","            this.forkContext = this.forkContext.upper;","        }","","        /*","         * Creates a path from all brokenForkContext paths.","         * This is a path after switch statement.","         */","        this.forkContext.replaceHead(brokenForkContext.makeNext(0, -1));","    }","","    /**","     * Makes a code path segment for a `SwitchCase` node.","     *","     * @param {boolean} isEmpty - `true` if the body is empty.","     * @param {boolean} isDefault - `true` if the body is the default case.","     * @returns {void}","     */","    makeSwitchCaseBody(isEmpty, isDefault) {","        const context = this.switchContext;","","        if (!context.hasCase) {","            return;","        }","","        /*","         * Merge forks.","         * The parent fork context has two segments.","         * Those are from the current case and the body of the previous case.","         */","        const parentForkContext = this.forkContext;","        const forkContext = this.pushForkContext();","","        forkContext.add(parentForkContext.makeNext(0, -1));","","        /*","         * Save `default` chunk info.","         * If the `default` label is not at the last, we must make a path from","         * the last `case` to the `default` chunk.","         */","        if (isDefault) {","            context.defaultSegments = parentForkContext.head;","            if (isEmpty) {","                context.foundDefault = true;","            } else {","                context.defaultBodySegments = forkContext.head;","            }","        } else {","            if (!isEmpty && context.foundDefault) {","                context.foundDefault = false;","                context.defaultBodySegments = forkContext.head;","            }","        }","","        context.lastIsDefault = isDefault;","        context.countForks += 1;","    }","","    //--------------------------------------------------------------------------","    // TryStatement","    //--------------------------------------------------------------------------","","    /**","     * Creates a context object of TryStatement and stacks it.","     *","     * @param {boolean} hasFinalizer - `true` if the try statement has a","     *   `finally` block.","     * @returns {void}","     */","    pushTryContext(hasFinalizer) {","        this.tryContext = {","            upper: this.tryContext,","            position: \"try\",","            hasFinalizer,","","            returnedForkContext: hasFinalizer","                ? ForkContext.newEmpty(this.forkContext)","                : null,","","            thrownForkContext: ForkContext.newEmpty(this.forkContext),","            lastOfTryIsReachable: false,","            lastOfCatchIsReachable: false","        };","    }","","    /**","     * Pops the last context of TryStatement and finalizes it.","     *","     * @returns {void}","     */","    popTryContext() {","        const context = this.tryContext;","","        this.tryContext = context.upper;","","        if (context.position === \"catch\") {","","            // Merges two paths from the `try` block and `catch` block merely.","            this.popForkContext();","            return;","        }","","        /*","         * The following process is executed only when there is the `finally`","         * block.","         */","","        const returned = context.returnedForkContext;","        const thrown = context.thrownForkContext;","","        if (returned.empty && thrown.empty) {","            return;","        }","","        // Separate head to normal paths and leaving paths.","        const headSegments = this.forkContext.head;","","        this.forkContext = this.forkContext.upper;","        const normalSegments = headSegments.slice(0, headSegments.length / 2 | 0);","        const leavingSegments = headSegments.slice(headSegments.length / 2 | 0);","","        // Forwards the leaving path to upper contexts.","        if (!returned.empty) {","            getReturnContext(this).returnedForkContext.add(leavingSegments);","        }","        if (!thrown.empty) {","            getThrowContext(this).thrownForkContext.add(leavingSegments);","        }","","        // Sets the normal path as the next.","        this.forkContext.replaceHead(normalSegments);","","        // If both paths of the `try` block and the `catch` block are","        // unreachable, the next path becomes unreachable as well.","        if (!context.lastOfTryIsReachable && !context.lastOfCatchIsReachable) {","            this.forkContext.makeUnreachable();","        }","    }","","    /**","     * Makes a code path segment for a `catch` block.","     *","     * @returns {void}","     */","    makeCatchBlock() {","        const context = this.tryContext;","        const forkContext = this.forkContext;","        const thrown = context.thrownForkContext;","","        // Update state.","        context.position = \"catch\";","        context.thrownForkContext = ForkContext.newEmpty(forkContext);","        context.lastOfTryIsReachable = forkContext.reachable;","","        // Merge thrown paths.","        thrown.add(forkContext.head);","        const thrownSegments = thrown.makeNext(0, -1);","","        // Fork to a bypass and the merged thrown path.","        this.pushForkContext();","        this.forkBypassPath();","        this.forkContext.add(thrownSegments);","    }","","    /**","     * Makes a code path segment for a `finally` block.","     *","     * In the `finally` block, parallel paths are created. The parallel paths","     * are used as leaving-paths. The leaving-paths are paths from `return`","     * statements and `throw` statements in a `try` block or a `catch` block.","     *","     * @returns {void}","     */","    makeFinallyBlock() {","        const context = this.tryContext;","        let forkContext = this.forkContext;","        const returned = context.returnedForkContext;","        const thrown = context.thrownForkContext;","        const headOfLeavingSegments = forkContext.head;","","        // Update state.","        if (context.position === \"catch\") {","","            // Merges two paths from the `try` block and `catch` block.","            this.popForkContext();","            forkContext = this.forkContext;","","            context.lastOfCatchIsReachable = forkContext.reachable;","        } else {","            context.lastOfTryIsReachable = forkContext.reachable;","        }","        context.position = \"finally\";","","        if (returned.empty && thrown.empty) {","","            // This path does not leave.","            return;","        }","","        /*","         * Create a parallel segment from merging returned and thrown.","         * This segment will leave at the end of this finally block.","         */","        const segments = forkContext.makeNext(-1, -1);","        let j;","","        for (let i = 0; i < forkContext.count; ++i) {","            const prevSegsOfLeavingSegment = [headOfLeavingSegments[i]];","","            for (j = 0; j < returned.segmentsList.length; ++j) {","                prevSegsOfLeavingSegment.push(returned.segmentsList[j][i]);","            }","            for (j = 0; j < thrown.segmentsList.length; ++j) {","                prevSegsOfLeavingSegment.push(thrown.segmentsList[j][i]);","            }","","            segments.push(CodePathSegment.newNext(","                this.idGenerator.next(),","                prevSegsOfLeavingSegment));","        }","","        this.pushForkContext(true);","        this.forkContext.add(segments);","    }","","    /**","     * Makes a code path segment from the first throwable node to the `catch`","     * block or the `finally` block.","     *","     * @returns {void}","     */","    makeFirstThrowablePathInTryBlock() {","        const forkContext = this.forkContext;","","        if (!forkContext.reachable) {","            return;","        }","","        const context = getThrowContext(this);","","        if (context === this ||","            context.position !== \"try\" ||","            !context.thrownForkContext.empty","        ) {","            return;","        }","","        context.thrownForkContext.add(forkContext.head);","        forkContext.replaceHead(forkContext.makeNext(-1, -1));","    }","","    //--------------------------------------------------------------------------","    // Loop Statements","    //--------------------------------------------------------------------------","","    /**","     * Creates a context object of a loop statement and stacks it.","     *","     * @param {string} type - The type of the node which was triggered. One of","     *   `WhileStatement`, `DoWhileStatement`, `ForStatement`, `ForInStatement`,","     *   and `ForStatement`.","     * @param {string|null} label - A label of the node which was triggered.","     * @returns {void}","     */","    pushLoopContext(type, label) {","        const forkContext = this.forkContext;","        const breakContext = this.pushBreakContext(true, label);","","        switch (type) {","            case \"WhileStatement\":","                this.pushChoiceContext(\"loop\", false);","                this.loopContext = {","                    upper: this.loopContext,","                    type,","                    label,","                    test: void 0,","                    continueDestSegments: null,","                    brokenForkContext: breakContext.brokenForkContext","                };","                break;","","            case \"DoWhileStatement\":","                this.pushChoiceContext(\"loop\", false);","                this.loopContext = {","                    upper: this.loopContext,","                    type,","                    label,","                    test: void 0,","                    entrySegments: null,","                    continueForkContext: ForkContext.newEmpty(forkContext),","                    brokenForkContext: breakContext.brokenForkContext","                };","                break;","","            case \"ForStatement\":","                this.pushChoiceContext(\"loop\", false);","                this.loopContext = {","                    upper: this.loopContext,","                    type,","                    label,","                    test: void 0,","                    endOfInitSegments: null,","                    testSegments: null,","                    endOfTestSegments: null,","                    updateSegments: null,","                    endOfUpdateSegments: null,","                    continueDestSegments: null,","                    brokenForkContext: breakContext.brokenForkContext","                };","                break;","","            case \"ForInStatement\":","            case \"ForOfStatement\":","                this.loopContext = {","                    upper: this.loopContext,","                    type,","                    label,","                    prevSegments: null,","                    leftSegments: null,","                    endOfLeftSegments: null,","                    continueDestSegments: null,","                    brokenForkContext: breakContext.brokenForkContext","                };","                break;","","            /* istanbul ignore next */","            default:","                throw new Error(`unknown type: \"${type}\"`);","        }","    }","","    /**","     * Pops the last context of a loop statement and finalizes it.","     *","     * @returns {void}","     */","    popLoopContext() {","        const context = this.loopContext;","","        this.loopContext = context.upper;","","        const forkContext = this.forkContext;","        const brokenForkContext = this.popBreakContext().brokenForkContext;","        let choiceContext;","","        // Creates a looped path.","        switch (context.type) {","            case \"WhileStatement\":","            case \"ForStatement\":","                choiceContext = this.popChoiceContext();","                makeLooped(","                    this,","                    forkContext.head,","                    context.continueDestSegments);","                break;","","            case \"DoWhileStatement\": {","                choiceContext = this.popChoiceContext();","","                if (!choiceContext.processed) {","                    choiceContext.trueForkContext.add(forkContext.head);","                    choiceContext.falseForkContext.add(forkContext.head);","                }","                if (context.test !== true) {","                    brokenForkContext.addAll(choiceContext.falseForkContext);","                }","","                // `true` paths go to looping.","                const segmentsList = choiceContext.trueForkContext.segmentsList;","","                for (let i = 0; i < segmentsList.length; ++i) {","                    makeLooped(","                        this,","                        segmentsList[i],","                        context.entrySegments);","                }","                break;","            }","","            case \"ForInStatement\":","            case \"ForOfStatement\":","                brokenForkContext.add(forkContext.head);","                makeLooped(","                    this,","                    forkContext.head,","                    context.leftSegments);","                break;","","            /* istanbul ignore next */","            default:","                throw new Error(\"unreachable\");","        }","","        // Go next.","        if (brokenForkContext.empty) {","            forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","        } else {","            forkContext.replaceHead(brokenForkContext.makeNext(0, -1));","        }","    }","","    /**","     * Makes a code path segment for the test part of a WhileStatement.","     *","     * @param {boolean|undefined} test - The test value (only when constant).","     * @returns {void}","     */","    makeWhileTest(test) {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const testSegments = forkContext.makeNext(0, -1);","","        // Update state.","        context.test = test;","        context.continueDestSegments = testSegments;","        forkContext.replaceHead(testSegments);","    }","","    /**","     * Makes a code path segment for the body part of a WhileStatement.","     *","     * @returns {void}","     */","    makeWhileBody() {","        const context = this.loopContext;","        const choiceContext = this.choiceContext;","        const forkContext = this.forkContext;","","        if (!choiceContext.processed) {","            choiceContext.trueForkContext.add(forkContext.head);","            choiceContext.falseForkContext.add(forkContext.head);","        }","","        // Update state.","        if (context.test !== true) {","            context.brokenForkContext.addAll(choiceContext.falseForkContext);","        }","        forkContext.replaceHead(choiceContext.trueForkContext.makeNext(0, -1));","    }","","    /**","     * Makes a code path segment for the body part of a DoWhileStatement.","     *","     * @returns {void}","     */","    makeDoWhileBody() {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const bodySegments = forkContext.makeNext(-1, -1);","","        // Update state.","        context.entrySegments = bodySegments;","        forkContext.replaceHead(bodySegments);","    }","","    /**","     * Makes a code path segment for the test part of a DoWhileStatement.","     *","     * @param {boolean|undefined} test - The test value (only when constant).","     * @returns {void}","     */","    makeDoWhileTest(test) {","        const context = this.loopContext;","        const forkContext = this.forkContext;","","        context.test = test;","","        // Creates paths of `continue` statements.","        if (!context.continueForkContext.empty) {","            context.continueForkContext.add(forkContext.head);","            const testSegments = context.continueForkContext.makeNext(0, -1);","","            forkContext.replaceHead(testSegments);","        }","    }","","    /**","     * Makes a code path segment for the test part of a ForStatement.","     *","     * @param {boolean|undefined} test - The test value (only when constant).","     * @returns {void}","     */","    makeForTest(test) {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const endOfInitSegments = forkContext.head;","        const testSegments = forkContext.makeNext(-1, -1);","","        // Update state.","        context.test = test;","        context.endOfInitSegments = endOfInitSegments;","        context.continueDestSegments = context.testSegments = testSegments;","        forkContext.replaceHead(testSegments);","    }","","    /**","     * Makes a code path segment for the update part of a ForStatement.","     *","     * @returns {void}","     */","    makeForUpdate() {","        const context = this.loopContext;","        const choiceContext = this.choiceContext;","        const forkContext = this.forkContext;","","        // Make the next paths of the test.","        if (context.testSegments) {","            finalizeTestSegmentsOfFor(","                context,","                choiceContext,","                forkContext.head);","        } else {","            context.endOfInitSegments = forkContext.head;","        }","","        // Update state.","        const updateSegments = forkContext.makeDisconnected(-1, -1);","","        context.continueDestSegments = context.updateSegments = updateSegments;","        forkContext.replaceHead(updateSegments);","    }","","    /**","     * Makes a code path segment for the body part of a ForStatement.","     *","     * @returns {void}","     */","    makeForBody() {","        const context = this.loopContext;","        const choiceContext = this.choiceContext;","        const forkContext = this.forkContext;","","        // Update state.","        if (context.updateSegments) {","            context.endOfUpdateSegments = forkContext.head;","","            // `update` -> `test`","            if (context.testSegments) {","                makeLooped(","                    this,","                    context.endOfUpdateSegments,","                    context.testSegments);","            }","        } else if (context.testSegments) {","            finalizeTestSegmentsOfFor(","                context,","                choiceContext,","                forkContext.head);","        } else {","            context.endOfInitSegments = forkContext.head;","        }","","        let bodySegments = context.endOfTestSegments;","","        if (!bodySegments) {","","            /*","             * If there is not the `test` part, the `body` path comes from the","             * `init` part and the `update` part.","             */","            const prevForkContext = ForkContext.newEmpty(forkContext);","","            prevForkContext.add(context.endOfInitSegments);","            if (context.endOfUpdateSegments) {","                prevForkContext.add(context.endOfUpdateSegments);","            }","","            bodySegments = prevForkContext.makeNext(0, -1);","        }","        context.continueDestSegments = context.continueDestSegments || bodySegments;","        forkContext.replaceHead(bodySegments);","    }","","    /**","     * Makes a code path segment for the left part of a ForInStatement and a","     * ForOfStatement.","     *","     * @returns {void}","     */","    makeForInOfLeft() {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const leftSegments = forkContext.makeDisconnected(-1, -1);","","        // Update state.","        context.prevSegments = forkContext.head;","        context.leftSegments = context.continueDestSegments = leftSegments;","        forkContext.replaceHead(leftSegments);","    }","","    /**","     * Makes a code path segment for the right part of a ForInStatement and a","     * ForOfStatement.","     *","     * @returns {void}","     */","    makeForInOfRight() {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const temp = ForkContext.newEmpty(forkContext);","","        temp.add(context.prevSegments);","        const rightSegments = temp.makeNext(-1, -1);","","        // Update state.","        context.endOfLeftSegments = forkContext.head;","        forkContext.replaceHead(rightSegments);","    }","","    /**","     * Makes a code path segment for the body part of a ForInStatement and a","     * ForOfStatement.","     *","     * @returns {void}","     */","    makeForInOfBody() {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const temp = ForkContext.newEmpty(forkContext);","","        temp.add(context.endOfLeftSegments);","        const bodySegments = temp.makeNext(-1, -1);","","        // Make a path: `right` -> `left`.","        makeLooped(this, forkContext.head, context.leftSegments);","","        // Update state.","        context.brokenForkContext.add(forkContext.head);","        forkContext.replaceHead(bodySegments);","    }","","    //--------------------------------------------------------------------------","    // Control Statements","    //--------------------------------------------------------------------------","","    /**","     * Creates new context for BreakStatement.","     *","     * @param {boolean} breakable - The flag to indicate it can break by","     *      an unlabeled BreakStatement.","     * @param {string|null} label - The label of this context.","     * @returns {Object} The new context.","     */","    pushBreakContext(breakable, label) {","        this.breakContext = {","            upper: this.breakContext,","            breakable,","            label,","            brokenForkContext: ForkContext.newEmpty(this.forkContext)","        };","        return this.breakContext;","    }","","    /**","     * Removes the top item of the break context stack.","     *","     * @returns {Object} The removed context.","     */","    popBreakContext() {","        const context = this.breakContext;","        const forkContext = this.forkContext;","","        this.breakContext = context.upper;","","        // Process this context here for other than switches and loops.","        if (!context.breakable) {","            const brokenForkContext = context.brokenForkContext;","","            if (!brokenForkContext.empty) {","                brokenForkContext.add(forkContext.head);","                forkContext.replaceHead(brokenForkContext.makeNext(0, -1));","            }","        }","","        return context;","    }","","    /**","     * Makes a path for a `break` statement.","     *","     * It registers the head segment to a context of `break`.","     * It makes new unreachable segment, then it set the head with the segment.","     *","     * @param {string} label - A label of the break statement.","     * @returns {void}","     */","    makeBreak(label) {","        const forkContext = this.forkContext;","","        if (!forkContext.reachable) {","            return;","        }","","        const context = getBreakContext(this, label);","","        /* istanbul ignore else: foolproof (syntax error) */","        if (context) {","            context.brokenForkContext.add(forkContext.head);","        }","","        forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","    }","","    /**","     * Makes a path for a `continue` statement.","     *","     * It makes a looping path.","     * It makes new unreachable segment, then it set the head with the segment.","     *","     * @param {string} label - A label of the continue statement.","     * @returns {void}","     */","    makeContinue(label) {","        const forkContext = this.forkContext;","","        if (!forkContext.reachable) {","            return;","        }","","        const context = getContinueContext(this, label);","","        /* istanbul ignore else: foolproof (syntax error) */","        if (context) {","            if (context.continueDestSegments) {","                makeLooped(this, forkContext.head, context.continueDestSegments);","","                // If the context is a for-in/of loop, this effects a break also.","                if (context.type === \"ForInStatement\" ||","                    context.type === \"ForOfStatement\"","                ) {","                    context.brokenForkContext.add(forkContext.head);","                }","            } else {","                context.continueForkContext.add(forkContext.head);","            }","        }","        forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","    }","","    /**","     * Makes a path for a `return` statement.","     *","     * It registers the head segment to a context of `return`.","     * It makes new unreachable segment, then it set the head with the segment.","     *","     * @returns {void}","     */","    makeReturn() {","        const forkContext = this.forkContext;","","        if (forkContext.reachable) {","            getReturnContext(this).returnedForkContext.add(forkContext.head);","            forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","        }","    }","","    /**","     * Makes a path for a `throw` statement.","     *","     * It registers the head segment to a context of `throw`.","     * It makes new unreachable segment, then it set the head with the segment.","     *","     * @returns {void}","     */","    makeThrow() {","        const forkContext = this.forkContext;","","        if (forkContext.reachable) {","            getThrowContext(this).thrownForkContext.add(forkContext.head);","            forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","        }","    }","","    /**","     * Makes the final path.","     * @returns {void}","     */","    makeFinal() {","        const segments = this.currentSegments;","","        if (segments.length > 0 && segments[0].reachable) {","            this.returnedForkContext.add(segments);","        }","    }","}","","module.exports = CodePathState;",""],"l":{"12":1,"32":1,"33":0,"34":0,"36":0,"37":0,"38":0,"50":1,"51":0,"52":0,"55":0,"57":0,"58":0,"59":0,"61":0,"65":1,"75":1,"76":0,"78":0,"79":0,"80":0,"82":0,"86":1,"95":1,"96":0,"98":0,"99":0,"100":0,"102":0,"105":0,"114":1,"115":0,"117":0,"118":0,"121":0,"123":0,"126":0,"136":1,"137":0,"151":1,"152":0,"153":0,"154":0,"156":0,"157":0,"158":0,"159":0,"171":1,"172":0,"174":0,"175":0,"176":0,"178":0,"179":0,"181":0,"182":0,"184":0,"185":0,"187":0,"188":0,"191":0,"206":1,"207":0,"208":0,"209":0,"212":0,"213":0,"215":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"242":0,"243":0,"246":0,"247":0,"248":0,"250":0,"251":0,"259":0,"268":0,"270":0,"281":0,"286":0,"294":0,"296":0,"297":0,"299":0,"307":0,"317":0,"356":0,"372":0,"374":0,"376":0,"377":0,"379":0,"388":0,"389":0,"390":0,"397":0,"398":0,"400":0,"401":0,"402":0,"404":0,"407":0,"410":0,"416":0,"417":0,"425":0,"426":0,"429":0,"437":0,"441":1,"445":0,"447":0,"448":0,"450":0,"460":0,"461":0,"463":0,"469":0,"473":0,"474":0,"476":0,"484":0,"487":0,"491":0,"494":0,"504":0,"505":0,"512":0,"513":0,"514":0,"517":0,"520":0,"531":0,"532":0,"538":0,"539":0,"540":0,"543":0,"561":0,"571":0,"585":0,"587":0,"589":0,"590":0,"592":0,"599":0,"600":0,"601":0,"604":0,"607":0,"609":0,"610":0,"616":0,"622":0,"623":0,"629":0,"630":0,"637":0,"642":0,"643":0,"650":0,"661":0,"663":0,"664":0,"672":0,"673":0,"675":0,"682":0,"683":0,"684":0,"685":0,"687":0,"690":0,"691":0,"692":0,"696":0,"697":0,"712":0,"733":0,"735":0,"737":0,"740":0,"741":0,"749":0,"750":0,"752":0,"753":0,"757":0,"759":0,"760":0,"761":0,"764":0,"765":0,"767":0,"768":0,"772":0,"776":0,"777":0,"787":0,"788":0,"789":0,"792":0,"793":0,"794":0,"797":0,"798":0,"801":0,"802":0,"803":0,"816":0,"817":0,"818":0,"819":0,"820":0,"823":0,"826":0,"827":0,"829":0,"831":0,"833":0,"835":0,"838":0,"845":0,"846":0,"848":0,"849":0,"851":0,"852":0,"854":0,"855":0,"858":0,"863":0,"864":0,"874":0,"876":0,"877":0,"880":0,"882":0,"886":0,"889":0,"890":0,"907":0,"908":0,"910":0,"912":0,"913":0,"921":0,"924":0,"925":0,"934":0,"937":0,"938":0,"951":0,"955":0,"965":0,"969":1,"979":0,"981":0,"983":0,"984":0,"985":0,"988":0,"991":0,"992":0,"996":0,"999":0,"1001":0,"1002":0,"1003":0,"1005":0,"1006":0,"1010":0,"1012":0,"1013":0,"1018":0,"1023":0,"1024":0,"1028":0,"1032":1,"1036":0,"1037":0,"1039":0,"1050":0,"1051":0,"1052":0,"1055":0,"1056":0,"1057":0,"1066":0,"1067":0,"1068":0,"1070":0,"1071":0,"1072":0,"1076":0,"1077":0,"1079":0,"1088":0,"1089":0,"1090":0,"1093":0,"1094":0,"1104":0,"1105":0,"1107":0,"1110":0,"1111":0,"1112":0,"1114":0,"1125":0,"1126":0,"1127":0,"1128":0,"1131":0,"1132":0,"1133":0,"1134":0,"1143":0,"1144":0,"1145":0,"1148":0,"1149":0,"1154":0,"1158":0,"1160":0,"1161":0,"1170":0,"1171":0,"1172":0,"1175":0,"1176":0,"1179":0,"1180":0,"1185":0,"1186":0,"1191":0,"1194":0,"1196":0,"1202":0,"1204":0,"1205":0,"1206":0,"1209":0,"1211":0,"1212":0,"1222":0,"1223":0,"1224":0,"1227":0,"1228":0,"1229":0,"1239":0,"1240":0,"1241":0,"1243":0,"1244":0,"1247":0,"1248":0,"1258":0,"1259":0,"1260":0,"1262":0,"1263":0,"1266":0,"1269":0,"1270":0,"1286":0,"1292":0,"1301":0,"1302":0,"1304":0,"1307":0,"1308":0,"1310":0,"1311":0,"1312":0,"1316":0,"1329":0,"1331":0,"1332":0,"1335":0,"1338":0,"1339":0,"1342":0,"1355":0,"1357":0,"1358":0,"1361":0,"1364":0,"1365":0,"1366":0,"1369":0,"1372":0,"1375":0,"1378":0,"1390":0,"1392":0,"1393":0,"1394":0,"1407":0,"1409":0,"1410":0,"1411":0,"1420":0,"1422":0,"1423":0,"1428":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/code-path-segment.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/code-path-segment.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"flattenUnusedSegments","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":41}}},"2":{"name":"isReachable","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":30}}},"3":{"name":"(anonymous_3)","line":80,"loc":{"start":{"line":80,"column":15},"end":{"line":80,"column":48}}},"4":{"name":"(anonymous_4)","line":142,"loc":{"start":{"line":142,"column":23},"end":{"line":142,"column":33}}},"5":{"name":"(anonymous_5)","line":152,"loc":{"start":{"line":152,"column":18},"end":{"line":152,"column":23}}},"6":{"name":"(anonymous_6)","line":163,"loc":{"start":{"line":163,"column":18},"end":{"line":163,"column":40}}},"7":{"name":"(anonymous_7)","line":177,"loc":{"start":{"line":177,"column":25},"end":{"line":177,"column":47}}},"8":{"name":"(anonymous_8)","line":196,"loc":{"start":{"line":196,"column":26},"end":{"line":196,"column":48}}},"9":{"name":"(anonymous_9)","line":208,"loc":{"start":{"line":208,"column":19},"end":{"line":208,"column":29}}},"10":{"name":"(anonymous_10)","line":237,"loc":{"start":{"line":237,"column":34},"end":{"line":237,"column":57}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":24,"column":0},"end":{"line":53,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":37}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":20}},"5":{"start":{"line":28,"column":4},"end":{"line":50,"column":5}},"6":{"start":{"line":29,"column":8},"end":{"line":29,"column":36}},"7":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"8":{"start":{"line":33,"column":12},"end":{"line":33,"column":21}},"9":{"start":{"line":37,"column":8},"end":{"line":49,"column":9}},"10":{"start":{"line":38,"column":12},"end":{"line":45,"column":13}},"11":{"start":{"line":39,"column":16},"end":{"line":39,"column":63}},"12":{"start":{"line":41,"column":16},"end":{"line":44,"column":17}},"13":{"start":{"line":42,"column":20},"end":{"line":42,"column":48}},"14":{"start":{"line":43,"column":20},"end":{"line":43,"column":43}},"15":{"start":{"line":47,"column":12},"end":{"line":47,"column":36}},"16":{"start":{"line":48,"column":12},"end":{"line":48,"column":31}},"17":{"start":{"line":52,"column":4},"end":{"line":52,"column":16}},"18":{"start":{"line":61,"column":0},"end":{"line":63,"column":1}},"19":{"start":{"line":62,"column":4},"end":{"line":62,"column":29}},"20":{"start":{"line":87,"column":8},"end":{"line":87,"column":21}},"21":{"start":{"line":93,"column":8},"end":{"line":93,"column":31}},"22":{"start":{"line":99,"column":8},"end":{"line":99,"column":64}},"23":{"start":{"line":106,"column":8},"end":{"line":106,"column":34}},"24":{"start":{"line":113,"column":8},"end":{"line":113,"column":47}},"25":{"start":{"line":119,"column":8},"end":{"line":119,"column":35}},"26":{"start":{"line":122,"column":8},"end":{"line":127,"column":11}},"27":{"start":{"line":130,"column":8},"end":{"line":133,"column":9}},"28":{"start":{"line":131,"column":12},"end":{"line":131,"column":37},"skip":true},"29":{"start":{"line":132,"column":12},"end":{"line":132,"column":41},"skip":true},"30":{"start":{"line":143,"column":8},"end":{"line":143,"column":72}},"31":{"start":{"line":153,"column":8},"end":{"line":153,"column":49}},"32":{"start":{"line":164,"column":8},"end":{"line":167,"column":47}},"33":{"start":{"line":178,"column":8},"end":{"line":178,"column":95}},"34":{"start":{"line":182,"column":8},"end":{"line":182,"column":42}},"35":{"start":{"line":184,"column":8},"end":{"line":184,"column":23}},"36":{"start":{"line":197,"column":8},"end":{"line":197,"column":78}},"37":{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},"38":{"start":{"line":210,"column":12},"end":{"line":210,"column":19}},"39":{"start":{"line":212,"column":8},"end":{"line":212,"column":37}},"40":{"start":{"line":214,"column":8},"end":{"line":214,"column":14}},"41":{"start":{"line":216,"column":8},"end":{"line":227,"column":9}},"42":{"start":{"line":217,"column":12},"end":{"line":222,"column":13}},"43":{"start":{"line":218,"column":16},"end":{"line":218,"column":63}},"44":{"start":{"line":220,"column":16},"end":{"line":220,"column":58}},"45":{"start":{"line":221,"column":16},"end":{"line":221,"column":55}},"46":{"start":{"line":224,"column":12},"end":{"line":226,"column":13}},"47":{"start":{"line":225,"column":16},"end":{"line":225,"column":73}},"48":{"start":{"line":238,"column":8},"end":{"line":238,"column":62}},"49":{"start":{"line":242,"column":0},"end":{"line":242,"column":33}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":16}},{"start":{"line":41,"column":16},"end":{"line":41,"column":16}}]},"4":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":8},"skip":true},{"start":{"line":130,"column":8},"end":{"line":130,"column":8}}]},"5":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":8},"end":{"line":209,"column":8}},{"start":{"line":209,"column":8},"end":{"line":209,"column":8}}]},"6":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":8},"end":{"line":216,"column":8}},{"start":{"line":216,"column":8},"end":{"line":216,"column":8}}]}},"code":["/**"," * @fileoverview A class of the code path segment."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const debug = require(\"./debug-helpers\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Replaces unused segments with the previous segments of each unused segment."," *"," * @param {CodePathSegment[]} segments - An array of segments to replace."," * @returns {CodePathSegment[]} The replaced array."," */","function flattenUnusedSegments(segments) {","    const done = Object.create(null);","    const retv = [];","","    for (let i = 0; i < segments.length; ++i) {","        const segment = segments[i];","","        // Ignores duplicated.","        if (done[segment.id]) {","            continue;","        }","","        // Use previous segments if unused.","        if (!segment.internal.used) {","            for (let j = 0; j < segment.allPrevSegments.length; ++j) {","                const prevSegment = segment.allPrevSegments[j];","","                if (!done[prevSegment.id]) {","                    done[prevSegment.id] = true;","                    retv.push(prevSegment);","                }","            }","        } else {","            done[segment.id] = true;","            retv.push(segment);","        }","    }","","    return retv;","}","","/**"," * Checks whether or not a given segment is reachable."," *"," * @param {CodePathSegment} segment - A segment to check."," * @returns {boolean} `true` if the segment is reachable."," */","function isReachable(segment) {","    return segment.reachable;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A code path segment."," */","class CodePathSegment {","","    /**","     * @param {string} id - An identifier.","     * @param {CodePathSegment[]} allPrevSegments - An array of the previous segments.","     *   This array includes unreachable segments.","     * @param {boolean} reachable - A flag which shows this is reachable.","     */","    constructor(id, allPrevSegments, reachable) {","","        /**","         * The identifier of this code path.","         * Rules use it to store additional information of each rule.","         * @type {string}","         */","        this.id = id;","","        /**","         * An array of the next segments.","         * @type {CodePathSegment[]}","         */","        this.nextSegments = [];","","        /**","         * An array of the previous segments.","         * @type {CodePathSegment[]}","         */","        this.prevSegments = allPrevSegments.filter(isReachable);","","        /**","         * An array of the next segments.","         * This array includes unreachable segments.","         * @type {CodePathSegment[]}","         */","        this.allNextSegments = [];","","        /**","         * An array of the previous segments.","         * This array includes unreachable segments.","         * @type {CodePathSegment[]}","         */","        this.allPrevSegments = allPrevSegments;","","        /**","         * A flag which shows this is reachable.","         * @type {boolean}","         */","        this.reachable = reachable;","","        // Internal data.","        Object.defineProperty(this, \"internal\", {","            value: {","                used: false,","                loopedPrevSegments: []","            }","        });","","        /* istanbul ignore if */","        if (debug.enabled) {","            this.internal.nodes = [];","            this.internal.exitNodes = [];","        }","    }","","    /**","     * Checks a given previous segment is coming from the end of a loop.","     *","     * @param {CodePathSegment} segment - A previous segment to check.","     * @returns {boolean} `true` if the segment is coming from the end of a loop.","     */","    isLoopedPrevSegment(segment) {","        return this.internal.loopedPrevSegments.indexOf(segment) !== -1;","    }","","    /**","     * Creates the root segment.","     *","     * @param {string} id - An identifier.","     * @returns {CodePathSegment} The created segment.","     */","    static newRoot(id) {","        return new CodePathSegment(id, [], true);","    }","","    /**","     * Creates a segment that follows given segments.","     *","     * @param {string} id - An identifier.","     * @param {CodePathSegment[]} allPrevSegments - An array of the previous segments.","     * @returns {CodePathSegment} The created segment.","     */","    static newNext(id, allPrevSegments) {","        return new CodePathSegment(","            id,","            flattenUnusedSegments(allPrevSegments),","            allPrevSegments.some(isReachable));","    }","","    /**","     * Creates an unreachable segment that follows given segments.","     *","     * @param {string} id - An identifier.","     * @param {CodePathSegment[]} allPrevSegments - An array of the previous segments.","     * @returns {CodePathSegment} The created segment.","     */","    static newUnreachable(id, allPrevSegments) {","        const segment = new CodePathSegment(id, flattenUnusedSegments(allPrevSegments), false);","","        // In `if (a) return a; foo();` case, the unreachable segment preceded by","        // the return statement is not used but must not be remove.","        CodePathSegment.markUsed(segment);","","        return segment;","    }","","    /**","     * Creates a segment that follows given segments.","     * This factory method does not connect with `allPrevSegments`.","     * But this inherits `reachable` flag.","     *","     * @param {string} id - An identifier.","     * @param {CodePathSegment[]} allPrevSegments - An array of the previous segments.","     * @returns {CodePathSegment} The created segment.","     */","    static newDisconnected(id, allPrevSegments) {","        return new CodePathSegment(id, [], allPrevSegments.some(isReachable));","    }","","    /**","     * Makes a given segment being used.","     *","     * And this function registers the segment into the previous segments as a next.","     *","     * @param {CodePathSegment} segment - A segment to mark.","     * @returns {void}","     */","    static markUsed(segment) {","        if (segment.internal.used) {","            return;","        }","        segment.internal.used = true;","","        let i;","","        if (segment.reachable) {","            for (i = 0; i < segment.allPrevSegments.length; ++i) {","                const prevSegment = segment.allPrevSegments[i];","","                prevSegment.allNextSegments.push(segment);","                prevSegment.nextSegments.push(segment);","            }","        } else {","            for (i = 0; i < segment.allPrevSegments.length; ++i) {","                segment.allPrevSegments[i].allNextSegments.push(segment);","            }","        }","    }","","    /**","     * Marks a previous segment as looped.","     *","     * @param {CodePathSegment} segment - A segment.","     * @param {CodePathSegment} prevSegment - A previous segment to mark.","     * @returns {void}","     */","    static markPrevSegmentAsLooped(segment, prevSegment) {","        segment.internal.loopedPrevSegments.push(prevSegment);","    }","}","","module.exports = CodePathSegment;",""],"l":{"12":1,"24":1,"25":0,"26":0,"28":0,"29":0,"32":0,"33":0,"37":0,"38":0,"39":0,"41":0,"42":0,"43":0,"47":0,"48":0,"52":0,"61":1,"62":0,"87":0,"93":0,"99":0,"106":0,"113":0,"119":0,"122":0,"130":0,"131":1,"132":1,"143":0,"153":0,"164":0,"178":0,"182":0,"184":0,"197":0,"209":0,"210":0,"212":0,"214":0,"216":0,"217":0,"218":0,"220":0,"221":0,"224":0,"225":0,"238":0,"242":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/debug-helpers.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/debug-helpers.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},"b":{"1":[0,0],"2":[1,0],"3":[0,0],"4":[0,0],"5":[1,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"getId","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":24}},"skip":true},"2":{"name":"(anonymous_2)","line":56,"loc":{"start":{"line":56,"column":67},"end":{"line":56,"column":98}},"skip":true},"3":{"name":"(anonymous_3)","line":82,"loc":{"start":{"line":82,"column":65},"end":{"line":82,"column":84}},"skip":true},"4":{"name":"(anonymous_4)","line":147,"loc":{"start":{"line":147,"column":17},"end":{"line":147,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"2":{"start":{"line":24,"column":0},"end":{"line":26,"column":1},"skip":true},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":55},"skip":true},"4":{"start":{"line":32,"column":0},"end":{"line":200,"column":2}},"5":{"start":{"line":57,"column":8},"end":{"line":65,"column":9},"skip":true},"6":{"start":{"line":58,"column":12},"end":{"line":58,"column":66},"skip":true},"7":{"start":{"line":60,"column":12},"end":{"line":64,"column":13},"skip":true},"8":{"start":{"line":61,"column":16},"end":{"line":61,"column":49},"skip":true},"9":{"start":{"line":63,"column":16},"end":{"line":63,"column":45},"skip":true},"10":{"start":{"line":67,"column":8},"end":{"line":70,"column":21},"skip":true},"11":{"start":{"line":83,"column":8},"end":{"line":87,"column":102},"skip":true},"12":{"start":{"line":89,"column":8},"end":{"line":91,"column":9},"skip":true},"13":{"start":{"line":90,"column":12},"end":{"line":90,"column":114},"skip":true},"14":{"start":{"line":92,"column":8},"end":{"line":94,"column":9},"skip":true},"15":{"start":{"line":93,"column":12},"end":{"line":93,"column":89},"skip":true},"16":{"start":{"line":96,"column":8},"end":{"line":96,"column":45},"skip":true},"17":{"start":{"line":97,"column":8},"end":{"line":97,"column":62},"skip":true},"18":{"start":{"line":99,"column":8},"end":{"line":132,"column":9},"skip":true},"19":{"start":{"line":100,"column":12},"end":{"line":100,"column":41},"skip":true},"20":{"start":{"line":102,"column":12},"end":{"line":102,"column":29},"skip":true},"21":{"start":{"line":104,"column":12},"end":{"line":108,"column":13},"skip":true},"22":{"start":{"line":105,"column":16},"end":{"line":105,"column":35},"skip":true},"23":{"start":{"line":107,"column":16},"end":{"line":107,"column":107},"skip":true},"24":{"start":{"line":110,"column":12},"end":{"line":129,"column":13},"skip":true},"25":{"start":{"line":111,"column":16},"end":{"line":126,"column":30},"skip":true},"26":{"start":{"line":113,"column":24},"end":{"line":117,"column":25},"skip":true},"27":{"start":{"line":114,"column":47},"end":{"line":114,"column":84},"skip":true},"28":{"start":{"line":115,"column":44},"end":{"line":115,"column":82},"skip":true},"29":{"start":{"line":116,"column":37},"end":{"line":116,"column":54},"skip":true},"30":{"start":{"line":120,"column":24},"end":{"line":124,"column":25},"skip":true},"31":{"start":{"line":121,"column":47},"end":{"line":121,"column":89},"skip":true},"32":{"start":{"line":122,"column":44},"end":{"line":122,"column":87},"skip":true},"33":{"start":{"line":123,"column":37},"end":{"line":123,"column":64},"skip":true},"34":{"start":{"line":128,"column":16},"end":{"line":128,"column":31},"skip":true},"35":{"start":{"line":131,"column":12},"end":{"line":131,"column":29},"skip":true},"36":{"start":{"line":134,"column":8},"end":{"line":134,"column":30},"skip":true},"37":{"start":{"line":135,"column":8},"end":{"line":135,"column":20},"skip":true},"38":{"start":{"line":136,"column":8},"end":{"line":136,"column":27},"skip":true},"39":{"start":{"line":148,"column":8},"end":{"line":148,"column":53}},"40":{"start":{"line":149,"column":8},"end":{"line":149,"column":53}},"41":{"start":{"line":150,"column":8},"end":{"line":150,"column":48}},"42":{"start":{"line":151,"column":8},"end":{"line":151,"column":60}},"43":{"start":{"line":153,"column":8},"end":{"line":178,"column":9}},"44":{"start":{"line":154,"column":12},"end":{"line":154,"column":37}},"45":{"start":{"line":155,"column":12},"end":{"line":155,"column":36}},"46":{"start":{"line":156,"column":12},"end":{"line":156,"column":34}},"47":{"start":{"line":158,"column":12},"end":{"line":160,"column":13}},"48":{"start":{"line":159,"column":16},"end":{"line":159,"column":25}},"49":{"start":{"line":161,"column":12},"end":{"line":161,"column":39}},"50":{"start":{"line":163,"column":12},"end":{"line":163,"column":63}},"51":{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},"52":{"start":{"line":166,"column":16},"end":{"line":166,"column":25}},"53":{"start":{"line":169,"column":12},"end":{"line":173,"column":13}},"54":{"start":{"line":170,"column":16},"end":{"line":170,"column":46}},"55":{"start":{"line":172,"column":16},"end":{"line":172,"column":62}},"56":{"start":{"line":174,"column":12},"end":{"line":174,"column":36}},"57":{"start":{"line":176,"column":12},"end":{"line":176,"column":48}},"58":{"start":{"line":177,"column":12},"end":{"line":177,"column":41}},"59":{"start":{"line":180,"column":8},"end":{"line":187,"column":11}},"60":{"start":{"line":181,"column":12},"end":{"line":185,"column":13}},"61":{"start":{"line":182,"column":16},"end":{"line":182,"column":34}},"62":{"start":{"line":184,"column":16},"end":{"line":184,"column":55}},"63":{"start":{"line":186,"column":12},"end":{"line":186,"column":26}},"64":{"start":{"line":189,"column":8},"end":{"line":196,"column":11}},"65":{"start":{"line":190,"column":12},"end":{"line":194,"column":13}},"66":{"start":{"line":191,"column":16},"end":{"line":191,"column":35}},"67":{"start":{"line":193,"column":16},"end":{"line":193,"column":56}},"68":{"start":{"line":195,"column":12},"end":{"line":195,"column":26}},"69":{"start":{"line":198,"column":8},"end":{"line":198,"column":26}}},"branchMap":{"1":{"line":25,"type":"cond-expr","locations":[{"start":{"line":25,"column":45},"end":{"line":25,"column":47},"skip":true},{"start":{"line":25,"column":50},"end":{"line":25,"column":53},"skip":true}]},"2":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":32},"end":{"line":56,"column":37}},{"start":{"line":56,"column":67},"end":{"line":71,"column":5},"skip":true}]},"3":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":12},"skip":true},{"start":{"line":60,"column":12},"end":{"line":60,"column":12},"skip":true}]},"4":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":37},"end":{"line":69,"column":44},"skip":true},{"start":{"line":69,"column":47},"end":{"line":69,"column":49},"skip":true}]},"5":{"line":82,"type":"cond-expr","locations":[{"start":{"line":82,"column":30},"end":{"line":82,"column":35}},{"start":{"line":82,"column":65},"end":{"line":137,"column":5},"skip":true}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":8},"skip":true},{"start":{"line":89,"column":8},"end":{"line":89,"column":8},"skip":true}]},"7":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8},"skip":true},{"start":{"line":92,"column":8},"end":{"line":92,"column":8},"skip":true}]},"8":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":104,"column":12},"skip":true},{"start":{"line":104,"column":12},"end":{"line":104,"column":12},"skip":true}]},"9":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":12},"end":{"line":110,"column":12},"skip":true},{"start":{"line":110,"column":12},"end":{"line":110,"column":12},"skip":true}]},"10":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":16},"end":{"line":110,"column":49},"skip":true},{"start":{"line":110,"column":53},"end":{"line":110,"column":90},"skip":true}]},"11":{"line":113,"type":"switch","locations":[{"start":{"line":114,"column":28},"end":{"line":114,"column":84},"skip":true},{"start":{"line":115,"column":28},"end":{"line":115,"column":82},"skip":true},{"start":{"line":116,"column":28},"end":{"line":116,"column":54},"skip":true}]},"12":{"line":120,"type":"switch","locations":[{"start":{"line":121,"column":28},"end":{"line":121,"column":89},"skip":true},{"start":{"line":122,"column":28},"end":{"line":122,"column":87},"skip":true},{"start":{"line":123,"column":28},"end":{"line":123,"column":64},"skip":true}]},"13":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":21},"end":{"line":149,"column":29}},{"start":{"line":149,"column":33},"end":{"line":149,"column":52}}]},"14":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":12},"end":{"line":158,"column":12}},{"start":{"line":158,"column":12},"end":{"line":158,"column":12}}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":16},"end":{"line":158,"column":32}},{"start":{"line":158,"column":36},"end":{"line":158,"column":47}}]},"16":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":165,"column":12}},{"start":{"line":165,"column":12},"end":{"line":165,"column":12}}]},"17":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":169,"column":12}},{"start":{"line":169,"column":12},"end":{"line":169,"column":12}}]},"18":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":12},"end":{"line":181,"column":12}},{"start":{"line":181,"column":12},"end":{"line":181,"column":12}}]},"19":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":12},"end":{"line":190,"column":12}},{"start":{"line":190,"column":12},"end":{"line":190,"column":12}}]}},"code":["/**"," * @fileoverview Helpers to debug for code path analysis."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const debug = require(\"debug\")(\"eslint:code-path\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets id of a given segment."," * @param {CodePathSegment} segment - A segment to get."," * @returns {string} Id of the segment."," */","/* istanbul ignore next */","function getId(segment) { // eslint-disable-line require-jsdoc","    return segment.id + (segment.reachable ? \"\" : \"!\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    /**","     * A flag that debug dumping is enabled or not.","     * @type {boolean}","     */","    enabled: debug.enabled,","","    /**","     * Dumps given objects.","     *","     * @param {...any} args - objects to dump.","     * @returns {void}","     */","    dump: debug,","","    /**","     * Dumps the current analyzing state.","     *","     * @param {ASTNode} node - A node to dump.","     * @param {CodePathState} state - A state to dump.","     * @param {boolean} leaving - A flag whether or not it's leaving","     * @returns {void}","     */","    dumpState: !debug.enabled ? debug : /* istanbul ignore next */ function(node, state, leaving) {","        for (let i = 0; i < state.currentSegments.length; ++i) {","            const segInternal = state.currentSegments[i].internal;","","            if (leaving) {","                segInternal.exitNodes.push(node);","            } else {","                segInternal.nodes.push(node);","            }","        }","","        debug([","            `${state.currentSegments.map(getId).join(\",\")})`,","            `${node.type}${leaving ? \":exit\" : \"\"}`","        ].join(\" \"));","    },","","    /**","     * Dumps a DOT code of a given code path.","     * The DOT code can be visialized with Graphvis.","     *","     * @param {CodePath} codePath - A code path to dump.","     * @returns {void}","     * @see http://www.graphviz.org","     * @see http://www.webgraphviz.com","     */","    dumpDot: !debug.enabled ? debug : /* istanbul ignore next */ function(codePath) {","        let text =","            \"\\n\" +","            \"digraph {\\n\" +","            \"node[shape=box,style=\\\"rounded,filled\\\",fillcolor=white];\\n\" +","            \"initial[label=\\\"\\\",shape=circle,style=filled,fillcolor=black,width=0.25,height=0.25];\\n\";","","        if (codePath.returnedSegments.length > 0) {","            text += \"final[label=\\\"\\\",shape=doublecircle,style=filled,fillcolor=black,width=0.25,height=0.25];\\n\";","        }","        if (codePath.thrownSegments.length > 0) {","            text += \"thrown[label=\\\"✘\\\",shape=circle,width=0.3,height=0.3,fixedsize];\\n\";","        }","","        const traceMap = Object.create(null);","        const arrows = this.makeDotArrows(codePath, traceMap);","","        for (const id in traceMap) { // eslint-disable-line guard-for-in","            const segment = traceMap[id];","","            text += `${id}[`;","","            if (segment.reachable) {","                text += \"label=\\\"\";","            } else {","                text += \"style=\\\"rounded,dashed,filled\\\",fillcolor=\\\"#FF9800\\\",label=\\\"<<unreachable>>\\\\n\";","            }","","            if (segment.internal.nodes.length > 0 || segment.internal.exitNodes.length > 0) {","                text += [].concat(","                    segment.internal.nodes.map(node => {","                        switch (node.type) {","                            case \"Identifier\": return `${node.type} (${node.name})`;","                            case \"Literal\": return `${node.type} (${node.value})`;","                            default: return node.type;","                        }","                    }),","                    segment.internal.exitNodes.map(node => {","                        switch (node.type) {","                            case \"Identifier\": return `${node.type}:exit (${node.name})`;","                            case \"Literal\": return `${node.type}:exit (${node.value})`;","                            default: return `${node.type}:exit`;","                        }","                    })","                ).join(\"\\\\n\");","            } else {","                text += \"????\";","            }","","            text += \"\\\"];\\n\";","        }","","        text += `${arrows}\\n`;","        text += \"}\";","        debug(\"DOT\", text);","    },","","    /**","     * Makes a DOT code of a given code path.","     * The DOT code can be visialized with Graphvis.","     *","     * @param {CodePath} codePath - A code path to make DOT.","     * @param {Object} traceMap - Optional. A map to check whether or not segments had been done.","     * @returns {string} A DOT code of the code path.","     */","    makeDotArrows(codePath, traceMap) {","        const stack = [[codePath.initialSegment, 0]];","        const done = traceMap || Object.create(null);","        let lastId = codePath.initialSegment.id;","        let text = `initial->${codePath.initialSegment.id}`;","","        while (stack.length > 0) {","            const item = stack.pop();","            const segment = item[0];","            const index = item[1];","","            if (done[segment.id] && index === 0) {","                continue;","            }","            done[segment.id] = segment;","","            const nextSegment = segment.allNextSegments[index];","","            if (!nextSegment) {","                continue;","            }","","            if (lastId === segment.id) {","                text += `->${nextSegment.id}`;","            } else {","                text += `;\\n${segment.id}->${nextSegment.id}`;","            }","            lastId = nextSegment.id;","","            stack.unshift([segment, 1 + index]);","            stack.push([nextSegment, 0]);","        }","","        codePath.returnedSegments.forEach(finalSegment => {","            if (lastId === finalSegment.id) {","                text += \"->final\";","            } else {","                text += `;\\n${finalSegment.id}->final`;","            }","            lastId = null;","        });","","        codePath.thrownSegments.forEach(finalSegment => {","            if (lastId === finalSegment.id) {","                text += \"->thrown\";","            } else {","                text += `;\\n${finalSegment.id}->thrown`;","            }","            lastId = null;","        });","","        return `${text};`;","    }","};",""],"l":{"12":1,"24":1,"25":1,"32":1,"57":1,"58":1,"60":1,"61":1,"63":1,"67":1,"83":1,"89":1,"90":1,"92":1,"93":1,"96":1,"97":1,"99":1,"100":1,"102":1,"104":1,"105":1,"107":1,"110":1,"111":1,"113":1,"114":1,"115":1,"116":1,"120":1,"121":1,"122":1,"123":1,"128":1,"131":1,"134":1,"135":1,"136":1,"148":0,"149":0,"150":0,"151":0,"153":0,"154":0,"155":0,"156":0,"158":0,"159":0,"161":0,"163":0,"165":0,"166":0,"169":0,"170":0,"172":0,"174":0,"176":0,"177":0,"180":0,"181":0,"182":0,"184":0,"186":0,"189":0,"190":0,"191":0,"193":0,"195":0,"198":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/fork-context.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/fork-context.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"isReachable","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":30}}},"2":{"name":"makeSegments","line":46,"loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":51}}},"3":{"name":"mergeExtraSegments","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":47}}},"4":{"name":"(anonymous_4)","line":110,"loc":{"start":{"line":110,"column":15},"end":{"line":110,"column":43}}},"5":{"name":"(anonymous_5)","line":121,"loc":{"start":{"line":121,"column":12},"end":{"line":121,"column":15}}},"6":{"name":"(anonymous_6)","line":131,"loc":{"start":{"line":131,"column":13},"end":{"line":131,"column":16}}},"7":{"name":"(anonymous_7)","line":139,"loc":{"start":{"line":139,"column":17},"end":{"line":139,"column":20}}},"8":{"name":"(anonymous_8)","line":152,"loc":{"start":{"line":152,"column":12},"end":{"line":152,"column":25}}},"9":{"name":"(anonymous_9)","line":164,"loc":{"start":{"line":164,"column":19},"end":{"line":164,"column":32}}},"10":{"name":"(anonymous_10)","line":177,"loc":{"start":{"line":177,"column":20},"end":{"line":177,"column":33}}},"11":{"name":"(anonymous_11)","line":188,"loc":{"start":{"line":188,"column":7},"end":{"line":188,"column":18}}},"12":{"name":"(anonymous_12)","line":201,"loc":{"start":{"line":201,"column":15},"end":{"line":201,"column":26}}},"13":{"name":"(anonymous_13)","line":213,"loc":{"start":{"line":213,"column":10},"end":{"line":213,"column":20}}},"14":{"name":"(anonymous_14)","line":228,"loc":{"start":{"line":228,"column":9},"end":{"line":228,"column":12}}},"15":{"name":"(anonymous_15)","line":238,"loc":{"start":{"line":238,"column":18},"end":{"line":238,"column":32}}},"16":{"name":"(anonymous_16)","line":253,"loc":{"start":{"line":253,"column":19},"end":{"line":253,"column":52}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":17,"column":53}},"2":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"3":{"start":{"line":30,"column":4},"end":{"line":30,"column":29}},"4":{"start":{"line":46,"column":0},"end":{"line":69,"column":1}},"5":{"start":{"line":47,"column":4},"end":{"line":47,"column":38}},"6":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},"7":{"start":{"line":50,"column":8},"end":{"line":50,"column":36}},"8":{"start":{"line":52,"column":4},"end":{"line":54,"column":5}},"9":{"start":{"line":53,"column":8},"end":{"line":53,"column":32}},"10":{"start":{"line":56,"column":4},"end":{"line":56,"column":24}},"11":{"start":{"line":58,"column":4},"end":{"line":66,"column":5}},"12":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"13":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"14":{"start":{"line":62,"column":12},"end":{"line":62,"column":45}},"15":{"start":{"line":65,"column":8},"end":{"line":65,"column":75}},"16":{"start":{"line":68,"column":4},"end":{"line":68,"column":20}},"17":{"start":{"line":81,"column":0},"end":{"line":94,"column":1}},"18":{"start":{"line":82,"column":4},"end":{"line":92,"column":5}},"19":{"start":{"line":83,"column":8},"end":{"line":83,"column":26}},"20":{"start":{"line":85,"column":8},"end":{"line":90,"column":9}},"21":{"start":{"line":86,"column":12},"end":{"line":89,"column":15}},"22":{"start":{"line":91,"column":8},"end":{"line":91,"column":26}},"23":{"start":{"line":93,"column":4},"end":{"line":93,"column":20}},"24":{"start":{"line":111,"column":8},"end":{"line":111,"column":39}},"25":{"start":{"line":112,"column":8},"end":{"line":112,"column":27}},"26":{"start":{"line":113,"column":8},"end":{"line":113,"column":27}},"27":{"start":{"line":114,"column":8},"end":{"line":114,"column":31}},"28":{"start":{"line":122,"column":8},"end":{"line":122,"column":39}},"29":{"start":{"line":124,"column":8},"end":{"line":124,"column":62}},"30":{"start":{"line":132,"column":8},"end":{"line":132,"column":46}},"31":{"start":{"line":140,"column":8},"end":{"line":140,"column":35}},"32":{"start":{"line":142,"column":8},"end":{"line":142,"column":65}},"33":{"start":{"line":153,"column":8},"end":{"line":153,"column":71}},"34":{"start":{"line":165,"column":8},"end":{"line":165,"column":78}},"35":{"start":{"line":178,"column":8},"end":{"line":178,"column":79}},"36":{"start":{"line":189,"column":8},"end":{"line":189,"column":85}},"37":{"start":{"line":191,"column":8},"end":{"line":191,"column":67}},"38":{"start":{"line":202,"column":8},"end":{"line":202,"column":85}},"39":{"start":{"line":204,"column":8},"end":{"line":204,"column":76}},"40":{"start":{"line":214,"column":8},"end":{"line":214,"column":45}},"41":{"start":{"line":216,"column":8},"end":{"line":216,"column":44}},"42":{"start":{"line":218,"column":8},"end":{"line":220,"column":9}},"43":{"start":{"line":219,"column":12},"end":{"line":219,"column":46}},"44":{"start":{"line":229,"column":8},"end":{"line":229,"column":31}},"45":{"start":{"line":239,"column":8},"end":{"line":239,"column":62}},"46":{"start":{"line":241,"column":8},"end":{"line":241,"column":67}},"47":{"start":{"line":243,"column":8},"end":{"line":243,"column":23}},"48":{"start":{"line":254,"column":8},"end":{"line":257,"column":61}},"49":{"start":{"line":261,"column":0},"end":{"line":261,"column":29}}},"branchMap":{"1":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]},"3":{"line":124,"type":"cond-expr","locations":[{"start":{"line":124,"column":35},"end":{"line":124,"column":37}},{"start":{"line":124,"column":40},"end":{"line":124,"column":61}}]},"4":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":15},"end":{"line":142,"column":34}},{"start":{"line":142,"column":38},"end":{"line":142,"column":64}}]},"5":{"line":257,"type":"cond-expr","locations":[{"start":{"line":257,"column":31},"end":{"line":257,"column":32}},{"start":{"line":257,"column":35},"end":{"line":257,"column":36}}]}},"code":["/**"," * @fileoverview A class to operate forking."," *"," * This is state of forking."," * This has a fork list and manages it."," *"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const assert = require(\"assert\"),","    CodePathSegment = require(\"./code-path-segment\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets whether or not a given segment is reachable."," *"," * @param {CodePathSegment} segment - A segment to get."," * @returns {boolean} `true` if the segment is reachable."," */","function isReachable(segment) {","    return segment.reachable;","}","","/**"," * Creates new segments from the specific range of `context.segmentsList`."," *"," * When `context.segmentsList` is `[[a, b], [c, d], [e, f]]`, `begin` is `0`, and"," * `end` is `-1`, this creates `[g, h]`. This `g` is from `a`, `c`, and `e`."," * This `h` is from `b`, `d`, and `f`."," *"," * @param {ForkContext} context - An instance."," * @param {number} begin - The first index of the previous segments."," * @param {number} end - The last index of the previous segments."," * @param {Function} create - A factory function of new segments."," * @returns {CodePathSegment[]} New segments."," */","function makeSegments(context, begin, end, create) {","    const list = context.segmentsList;","","    if (begin < 0) {","        begin = list.length + begin;","    }","    if (end < 0) {","        end = list.length + end;","    }","","    const segments = [];","","    for (let i = 0; i < context.count; ++i) {","        const allPrevSegments = [];","","        for (let j = begin; j <= end; ++j) {","            allPrevSegments.push(list[j][i]);","        }","","        segments.push(create(context.idGenerator.next(), allPrevSegments));","    }","","    return segments;","}","","/**"," * `segments` becomes doubly in a `finally` block. Then if a code path exits by a"," * control statement (such as `break`, `continue`) from the `finally` block, the"," * destination's segments may be half of the source segments. In that case, this"," * merges segments."," *"," * @param {ForkContext} context - An instance."," * @param {CodePathSegment[]} segments - Segments to merge."," * @returns {CodePathSegment[]} The merged segments."," */","function mergeExtraSegments(context, segments) {","    while (segments.length > context.count) {","        const merged = [];","","        for (let i = 0, length = segments.length / 2 | 0; i < length; ++i) {","            merged.push(CodePathSegment.newNext(","                context.idGenerator.next(),","                [segments[i], segments[i + length]]","            ));","        }","        segments = merged;","    }","    return segments;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A class to manage forking."," */","class ForkContext {","","    /**","     * @param {IdGenerator} idGenerator - An identifier generator for segments.","     * @param {ForkContext|null} upper - An upper fork context.","     * @param {number} count - A number of parallel segments.","     */","    constructor(idGenerator, upper, count) {","        this.idGenerator = idGenerator;","        this.upper = upper;","        this.count = count;","        this.segmentsList = [];","    }","","    /**","     * The head segments.","     * @type {CodePathSegment[]}","     */","    get head() {","        const list = this.segmentsList;","","        return list.length === 0 ? [] : list[list.length - 1];","    }","","    /**","     * A flag which shows empty.","     * @type {boolean}","     */","    get empty() {","        return this.segmentsList.length === 0;","    }","","    /**","     * A flag which shows reachable.","     * @type {boolean}","     */","    get reachable() {","        const segments = this.head;","","        return segments.length > 0 && segments.some(isReachable);","    }","","    /**","     * Creates new segments from this context.","     *","     * @param {number} begin - The first index of previous segments.","     * @param {number} end - The last index of previous segments.","     * @returns {CodePathSegment[]} New segments.","     */","    makeNext(begin, end) {","        return makeSegments(this, begin, end, CodePathSegment.newNext);","    }","","    /**","     * Creates new segments from this context.","     * The new segments is always unreachable.","     *","     * @param {number} begin - The first index of previous segments.","     * @param {number} end - The last index of previous segments.","     * @returns {CodePathSegment[]} New segments.","     */","    makeUnreachable(begin, end) {","        return makeSegments(this, begin, end, CodePathSegment.newUnreachable);","    }","","    /**","     * Creates new segments from this context.","     * The new segments don't have connections for previous segments.","     * But these inherit the reachable flag from this context.","     *","     * @param {number} begin - The first index of previous segments.","     * @param {number} end - The last index of previous segments.","     * @returns {CodePathSegment[]} New segments.","     */","    makeDisconnected(begin, end) {","        return makeSegments(this, begin, end, CodePathSegment.newDisconnected);","    }","","    /**","     * Adds segments into this context.","     * The added segments become the head.","     *","     * @param {CodePathSegment[]} segments - Segments to add.","     * @returns {void}","     */","    add(segments) {","        assert(segments.length >= this.count, `${segments.length} >= ${this.count}`);","","        this.segmentsList.push(mergeExtraSegments(this, segments));","    }","","    /**","     * Replaces the head segments with given segments.","     * The current head segments are removed.","     *","     * @param {CodePathSegment[]} segments - Segments to add.","     * @returns {void}","     */","    replaceHead(segments) {","        assert(segments.length >= this.count, `${segments.length} >= ${this.count}`);","","        this.segmentsList.splice(-1, 1, mergeExtraSegments(this, segments));","    }","","    /**","     * Adds all segments of a given fork context into this context.","     *","     * @param {ForkContext} context - A fork context to add.","     * @returns {void}","     */","    addAll(context) {","        assert(context.count === this.count);","","        const source = context.segmentsList;","","        for (let i = 0; i < source.length; ++i) {","            this.segmentsList.push(source[i]);","        }","    }","","    /**","     * Clears all secments in this context.","     *","     * @returns {void}","     */","    clear() {","        this.segmentsList = [];","    }","","    /**","     * Creates the root fork context.","     *","     * @param {IdGenerator} idGenerator - An identifier generator for segments.","     * @returns {ForkContext} New fork context.","     */","    static newRoot(idGenerator) {","        const context = new ForkContext(idGenerator, null, 1);","","        context.add([CodePathSegment.newRoot(idGenerator.next())]);","","        return context;","    }","","    /**","     * Creates an empty fork context preceded by a given context.","     *","     * @param {ForkContext} parentContext - The parent fork context.","     * @param {boolean} forkLeavingPath - A flag which shows inside of `finally` block.","     * @returns {ForkContext} New fork context.","     */","    static newEmpty(parentContext, forkLeavingPath) {","        return new ForkContext(","            parentContext.idGenerator,","            parentContext,","            (forkLeavingPath ? 2 : 1) * parentContext.count);","    }","}","","module.exports = ForkContext;",""],"l":{"16":1,"29":1,"30":0,"46":1,"47":0,"49":0,"50":0,"52":0,"53":0,"56":0,"58":0,"59":0,"61":0,"62":0,"65":0,"68":0,"81":1,"82":0,"83":0,"85":0,"86":0,"91":0,"93":0,"111":0,"112":0,"113":0,"114":0,"122":0,"124":0,"132":0,"140":0,"142":0,"153":0,"165":0,"178":0,"189":0,"191":0,"202":0,"204":0,"214":0,"216":0,"218":0,"219":0,"229":0,"239":0,"241":0,"243":0,"254":0,"261":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/id-generator.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/code-path-analysis/id-generator.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":15},"end":{"line":24,"column":24}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":11}}}},"statementMap":{"1":{"start":{"line":25,"column":8},"end":{"line":25,"column":37}},"2":{"start":{"line":26,"column":8},"end":{"line":26,"column":19}},"3":{"start":{"line":35,"column":8},"end":{"line":35,"column":32}},"4":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"5":{"start":{"line":39,"column":12},"end":{"line":39,"column":23},"skip":true},"6":{"start":{"line":42,"column":8},"end":{"line":42,"column":36}},"7":{"start":{"line":46,"column":0},"end":{"line":46,"column":29}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8},"skip":true},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]}},"code":["/**"," * @fileoverview A class of identifiers generator for code path segments."," *"," * Each rule uses the identifier of code path segments to store additional"," * information of the code path."," *"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A generator for unique ids."," */","class IdGenerator {","","    /**","     * @param {string} prefix - Optional. A prefix of generated ids.","     */","    constructor(prefix) {","        this.prefix = String(prefix);","        this.n = 0;","    }","","    /**","     * Generates id.","     *","     * @returns {string} A generated id.","     */","    next() {","        this.n = 1 + this.n | 0;","","        /* istanbul ignore if */","        if (this.n < 0) {","            this.n = 1;","        }","","        return this.prefix + this.n;","    }","}","","module.exports = IdGenerator;",""],"l":{"25":0,"26":0,"35":0,"38":0,"39":1,"42":0,"46":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/ast-utils.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/ast-utils.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":1,"40":0,"41":1,"42":0,"43":1,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":9,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":1,"67":0,"68":1,"69":0,"70":1,"71":0,"72":1,"73":0,"74":1,"75":0,"76":1,"77":0,"78":1,"79":0,"80":1,"81":0,"82":1,"83":0,"84":1,"85":0,"86":1,"87":0,"88":1,"89":0,"90":1,"91":0,"92":1,"93":1,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0],"10":[0,0],"11":[0,0,0,0,0,0],"12":[0,0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0],"31":[0,0],"32":[0,0,0],"33":[0,0],"34":[0,0],"35":[0,0,0,0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0,0,0,0,0,0,0,0,0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0,0],"46":[0,0,0,0],"47":[0,0,0,0,0,0],"48":[0,0],"49":[0,0,0],"50":[0,0],"51":[0,0,0],"52":[0,0],"53":[0,0,0],"54":[0,0,0,0,0,0,0,0,0,0,0,0],"55":[0,0],"56":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"57":[0,0],"58":[0,0,0],"59":[0,0],"60":[0,0,0],"61":[0,0],"62":[0,0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0,0,0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0,0,0,0,0],"89":[0,0,0,0,0,0,0,0,0,0,0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":9,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},"fnMap":{"1":{"name":"isModifyingReference","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":60}}},"2":{"name":"startsWithUpperCase","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":32}}},"3":{"name":"isES5Constructor","line":75,"loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":32}}},"4":{"name":"getUpperFunction","line":84,"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":32}}},"5":{"name":"isFunction","line":105,"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":26}}},"6":{"name":"isLoop","line":122,"loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":22}}},"7":{"name":"isInLoop","line":132,"loc":{"start":{"line":132,"column":0},"end":{"line":132,"column":24}}},"8":{"name":"isNullOrUndefined","line":150,"loc":{"start":{"line":150,"column":0},"end":{"line":150,"column":33}}},"9":{"name":"isCallee","line":163,"loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":24}}},"10":{"name":"isReflectApply","line":172,"loc":{"start":{"line":172,"column":0},"end":{"line":172,"column":30}}},"11":{"name":"isArrayFromMethod","line":188,"loc":{"start":{"line":188,"column":0},"end":{"line":188,"column":33}}},"12":{"name":"isMethodWhichHasThisArg","line":204,"loc":{"start":{"line":204,"column":0},"end":{"line":204,"column":39}}},"13":{"name":"negate","line":225,"loc":{"start":{"line":225,"column":0},"end":{"line":225,"column":19}}},"14":{"name":"hasJSDocThisTag","line":235,"loc":{"start":{"line":235,"column":0},"end":{"line":235,"column":43}}},"15":{"name":"isParenthesised","line":256,"loc":{"start":{"line":256,"column":0},"end":{"line":256,"column":43}}},"16":{"name":"isArrowToken","line":271,"loc":{"start":{"line":271,"column":0},"end":{"line":271,"column":29}}},"17":{"name":"isCommaToken","line":281,"loc":{"start":{"line":281,"column":0},"end":{"line":281,"column":29}}},"18":{"name":"isSemicolonToken","line":291,"loc":{"start":{"line":291,"column":0},"end":{"line":291,"column":33}}},"19":{"name":"isColonToken","line":301,"loc":{"start":{"line":301,"column":0},"end":{"line":301,"column":29}}},"20":{"name":"isOpeningParenToken","line":311,"loc":{"start":{"line":311,"column":0},"end":{"line":311,"column":36}}},"21":{"name":"isClosingParenToken","line":321,"loc":{"start":{"line":321,"column":0},"end":{"line":321,"column":36}}},"22":{"name":"isOpeningBracketToken","line":331,"loc":{"start":{"line":331,"column":0},"end":{"line":331,"column":38}}},"23":{"name":"isClosingBracketToken","line":341,"loc":{"start":{"line":341,"column":0},"end":{"line":341,"column":38}}},"24":{"name":"isOpeningBraceToken","line":351,"loc":{"start":{"line":351,"column":0},"end":{"line":351,"column":36}}},"25":{"name":"isClosingBraceToken","line":361,"loc":{"start":{"line":361,"column":0},"end":{"line":361,"column":36}}},"26":{"name":"isCommentToken","line":371,"loc":{"start":{"line":371,"column":0},"end":{"line":371,"column":31}}},"27":{"name":"isKeywordToken","line":381,"loc":{"start":{"line":381,"column":0},"end":{"line":381,"column":31}}},"28":{"name":"getOpeningParenOfParams","line":392,"loc":{"start":{"line":392,"column":0},"end":{"line":392,"column":51}}},"29":{"name":"createGlobalLinebreakMatcher","line":403,"loc":{"start":{"line":403,"column":0},"end":{"line":403,"column":40}}},"30":{"name":"(anonymous_30)","line":424,"loc":{"start":{"line":424,"column":21},"end":{"line":424,"column":35}}},"31":{"name":"(anonymous_31)","line":466,"loc":{"start":{"line":466,"column":19},"end":{"line":466,"column":26}}},"32":{"name":"(anonymous_32)","line":487,"loc":{"start":{"line":487,"column":24},"end":{"line":487,"column":31}}},"33":{"name":"(anonymous_33)","line":497,"loc":{"start":{"line":497,"column":12},"end":{"line":497,"column":19}}},"34":{"name":"(anonymous_34)","line":510,"loc":{"start":{"line":510,"column":26},"end":{"line":510,"column":39}}},"35":{"name":"(anonymous_35)","line":521,"loc":{"start":{"line":521,"column":18},"end":{"line":521,"column":35}}},"36":{"name":"(anonymous_36)","line":530,"loc":{"start":{"line":530,"column":22},"end":{"line":530,"column":29}}},"37":{"name":"(anonymous_37)","line":563,"loc":{"start":{"line":563,"column":21},"end":{"line":563,"column":39}}},"38":{"name":"(anonymous_38)","line":600,"loc":{"start":{"line":600,"column":24},"end":{"line":600,"column":43}}},"39":{"name":"(anonymous_39)","line":736,"loc":{"start":{"line":736,"column":17},"end":{"line":736,"column":24}}},"40":{"name":"(anonymous_40)","line":830,"loc":{"start":{"line":830,"column":16},"end":{"line":830,"column":23}}},"41":{"name":"(anonymous_41)","line":840,"loc":{"start":{"line":840,"column":19},"end":{"line":840,"column":26}}},"42":{"name":"(anonymous_42)","line":875,"loc":{"start":{"line":875,"column":25},"end":{"line":875,"column":32}}},"43":{"name":"(anonymous_43)","line":918,"loc":{"start":{"line":918,"column":24},"end":{"line":918,"column":31}}},"44":{"name":"(anonymous_44)","line":966,"loc":{"start":{"line":966,"column":20},"end":{"line":966,"column":27}}},"45":{"name":"(anonymous_45)","line":1019,"loc":{"start":{"line":1019,"column":27},"end":{"line":1019,"column":34}}},"46":{"name":"(anonymous_46)","line":1154,"loc":{"start":{"line":1154,"column":22},"end":{"line":1154,"column":41}}},"47":{"name":"(anonymous_47)","line":1185,"loc":{"start":{"line":1185,"column":24},"end":{"line":1185,"column":43}}},"48":{"name":"(anonymous_48)","line":1209,"loc":{"start":{"line":1209,"column":16},"end":{"line":1209,"column":23}}},"49":{"name":"(anonymous_49)","line":1245,"loc":{"start":{"line":1245,"column":17},"end":{"line":1245,"column":24}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":94}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":70}},"4":{"start":{"line":20,"column":0},"end":{"line":20,"column":42}},"5":{"start":{"line":21,"column":0},"end":{"line":21,"column":80}},"6":{"start":{"line":22,"column":0},"end":{"line":22,"column":57}},"7":{"start":{"line":23,"column":0},"end":{"line":23,"column":80}},"8":{"start":{"line":24,"column":0},"end":{"line":24,"column":39}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":110}},"10":{"start":{"line":28,"column":0},"end":{"line":28,"column":69}},"11":{"start":{"line":29,"column":0},"end":{"line":29,"column":52}},"12":{"start":{"line":32,"column":0},"end":{"line":32,"column":84}},"13":{"start":{"line":42,"column":0},"end":{"line":58,"column":1}},"14":{"start":{"line":43,"column":4},"end":{"line":43,"column":44}},"15":{"start":{"line":50,"column":4},"end":{"line":51,"column":56}},"16":{"start":{"line":53,"column":4},"end":{"line":57,"column":6}},"17":{"start":{"line":66,"column":0},"end":{"line":68,"column":1}},"18":{"start":{"line":67,"column":4},"end":{"line":67,"column":45}},"19":{"start":{"line":75,"column":0},"end":{"line":77,"column":1}},"20":{"start":{"line":76,"column":4},"end":{"line":76,"column":58}},"21":{"start":{"line":84,"column":0},"end":{"line":92,"column":1}},"22":{"start":{"line":85,"column":4},"end":{"line":90,"column":5}},"23":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"24":{"start":{"line":87,"column":12},"end":{"line":87,"column":24}},"25":{"start":{"line":89,"column":8},"end":{"line":89,"column":27}},"26":{"start":{"line":91,"column":4},"end":{"line":91,"column":16}},"27":{"start":{"line":105,"column":0},"end":{"line":107,"column":1}},"28":{"start":{"line":106,"column":4},"end":{"line":106,"column":63}},"29":{"start":{"line":122,"column":0},"end":{"line":124,"column":1}},"30":{"start":{"line":123,"column":4},"end":{"line":123,"column":59}},"31":{"start":{"line":132,"column":0},"end":{"line":142,"column":1}},"32":{"start":{"line":133,"column":4},"end":{"line":139,"column":5}},"33":{"start":{"line":134,"column":8},"end":{"line":136,"column":9}},"34":{"start":{"line":135,"column":12},"end":{"line":135,"column":24}},"35":{"start":{"line":138,"column":8},"end":{"line":138,"column":27}},"36":{"start":{"line":141,"column":4},"end":{"line":141,"column":17}},"37":{"start":{"line":150,"column":0},"end":{"line":156,"column":1}},"38":{"start":{"line":151,"column":4},"end":{"line":155,"column":6}},"39":{"start":{"line":163,"column":0},"end":{"line":165,"column":1}},"40":{"start":{"line":164,"column":4},"end":{"line":164,"column":80}},"41":{"start":{"line":172,"column":0},"end":{"line":181,"column":1}},"42":{"start":{"line":173,"column":4},"end":{"line":180,"column":6}},"43":{"start":{"line":188,"column":0},"end":{"line":197,"column":1}},"44":{"start":{"line":189,"column":4},"end":{"line":196,"column":6}},"45":{"start":{"line":204,"column":0},"end":{"line":218,"column":1}},"46":{"start":{"line":205,"column":4},"end":{"line":215,"column":5}},"47":{"start":{"line":206,"column":8},"end":{"line":208,"column":9}},"48":{"start":{"line":207,"column":12},"end":{"line":207,"column":54}},"49":{"start":{"line":209,"column":8},"end":{"line":212,"column":9}},"50":{"start":{"line":210,"column":12},"end":{"line":210,"column":33}},"51":{"start":{"line":211,"column":12},"end":{"line":211,"column":21}},"52":{"start":{"line":214,"column":8},"end":{"line":214,"column":14}},"53":{"start":{"line":217,"column":4},"end":{"line":217,"column":17}},"54":{"start":{"line":225,"column":0},"end":{"line":227,"column":1}},"55":{"start":{"line":226,"column":4},"end":{"line":226,"column":30}},"56":{"start":{"line":226,"column":20},"end":{"line":226,"column":29}},"57":{"start":{"line":235,"column":0},"end":{"line":247,"column":1}},"58":{"start":{"line":236,"column":4},"end":{"line":236,"column":58}},"59":{"start":{"line":238,"column":4},"end":{"line":240,"column":5}},"60":{"start":{"line":239,"column":8},"end":{"line":239,"column":20}},"61":{"start":{"line":246,"column":4},"end":{"line":246,"column":100}},"62":{"start":{"line":246,"column":64},"end":{"line":246,"column":98}},"63":{"start":{"line":256,"column":0},"end":{"line":263,"column":1}},"64":{"start":{"line":257,"column":4},"end":{"line":258,"column":51}},"65":{"start":{"line":260,"column":4},"end":{"line":262,"column":71}},"66":{"start":{"line":271,"column":0},"end":{"line":273,"column":1}},"67":{"start":{"line":272,"column":4},"end":{"line":272,"column":63}},"68":{"start":{"line":281,"column":0},"end":{"line":283,"column":1}},"69":{"start":{"line":282,"column":4},"end":{"line":282,"column":62}},"70":{"start":{"line":291,"column":0},"end":{"line":293,"column":1}},"71":{"start":{"line":292,"column":4},"end":{"line":292,"column":62}},"72":{"start":{"line":301,"column":0},"end":{"line":303,"column":1}},"73":{"start":{"line":302,"column":4},"end":{"line":302,"column":62}},"74":{"start":{"line":311,"column":0},"end":{"line":313,"column":1}},"75":{"start":{"line":312,"column":4},"end":{"line":312,"column":62}},"76":{"start":{"line":321,"column":0},"end":{"line":323,"column":1}},"77":{"start":{"line":322,"column":4},"end":{"line":322,"column":62}},"78":{"start":{"line":331,"column":0},"end":{"line":333,"column":1}},"79":{"start":{"line":332,"column":4},"end":{"line":332,"column":62}},"80":{"start":{"line":341,"column":0},"end":{"line":343,"column":1}},"81":{"start":{"line":342,"column":4},"end":{"line":342,"column":62}},"82":{"start":{"line":351,"column":0},"end":{"line":353,"column":1}},"83":{"start":{"line":352,"column":4},"end":{"line":352,"column":62}},"84":{"start":{"line":361,"column":0},"end":{"line":363,"column":1}},"85":{"start":{"line":362,"column":4},"end":{"line":362,"column":62}},"86":{"start":{"line":371,"column":0},"end":{"line":373,"column":1}},"87":{"start":{"line":372,"column":4},"end":{"line":372,"column":87}},"88":{"start":{"line":381,"column":0},"end":{"line":383,"column":1}},"89":{"start":{"line":382,"column":4},"end":{"line":382,"column":36}},"90":{"start":{"line":392,"column":0},"end":{"line":396,"column":1}},"91":{"start":{"line":393,"column":4},"end":{"line":395,"column":62}},"92":{"start":{"line":403,"column":0},"end":{"line":405,"column":1}},"93":{"start":{"line":404,"column":4},"end":{"line":404,"column":53}},"94":{"start":{"line":411,"column":0},"end":{"line":1256,"column":2}},"95":{"start":{"line":425,"column":8},"end":{"line":425,"column":58}},"96":{"start":{"line":467,"column":8},"end":{"line":470,"column":10}},"97":{"start":{"line":488,"column":8},"end":{"line":488,"column":52}},"98":{"start":{"line":498,"column":8},"end":{"line":500,"column":9}},"99":{"start":{"line":499,"column":12},"end":{"line":499,"column":42}},"100":{"start":{"line":501,"column":8},"end":{"line":501,"column":20}},"101":{"start":{"line":511,"column":8},"end":{"line":511,"column":55}},"102":{"start":{"line":522,"column":8},"end":{"line":522,"column":73}},"103":{"start":{"line":531,"column":8},"end":{"line":531,"column":42}},"104":{"start":{"line":533,"column":8},"end":{"line":540,"column":10}},"105":{"start":{"line":564,"column":8},"end":{"line":564,"column":30}},"106":{"start":{"line":566,"column":8},"end":{"line":574,"column":9}},"107":{"start":{"line":567,"column":12},"end":{"line":567,"column":49}},"108":{"start":{"line":569,"column":12},"end":{"line":571,"column":13}},"109":{"start":{"line":570,"column":16},"end":{"line":570,"column":32}},"110":{"start":{"line":573,"column":12},"end":{"line":573,"column":32}},"111":{"start":{"line":576,"column":8},"end":{"line":576,"column":20}},"112":{"start":{"line":601,"column":8},"end":{"line":603,"column":9}},"113":{"start":{"line":602,"column":12},"end":{"line":602,"column":25}},"114":{"start":{"line":604,"column":8},"end":{"line":604,"column":45}},"115":{"start":{"line":606,"column":8},"end":{"line":724,"column":9}},"116":{"start":{"line":607,"column":12},"end":{"line":607,"column":39}},"117":{"start":{"line":609,"column":12},"end":{"line":723,"column":13}},"118":{"start":{"line":617,"column":20},"end":{"line":617,"column":34}},"119":{"start":{"line":618,"column":20},"end":{"line":618,"column":26}},"120":{"start":{"line":627,"column":20},"end":{"line":627,"column":58}},"121":{"start":{"line":629,"column":20},"end":{"line":631,"column":21}},"122":{"start":{"line":630,"column":24},"end":{"line":630,"column":36}},"123":{"start":{"line":632,"column":20},"end":{"line":632,"column":39}},"124":{"start":{"line":633,"column":20},"end":{"line":633,"column":26}},"125":{"start":{"line":646,"column":20},"end":{"line":646,"column":49}},"126":{"start":{"line":655,"column":20},"end":{"line":665,"column":21}},"127":{"start":{"line":656,"column":24},"end":{"line":658,"column":25}},"128":{"start":{"line":657,"column":28},"end":{"line":657,"column":41}},"129":{"start":{"line":659,"column":24},"end":{"line":664,"column":25}},"130":{"start":{"line":663,"column":28},"end":{"line":663,"column":41}},"131":{"start":{"line":666,"column":20},"end":{"line":666,"column":32}},"132":{"start":{"line":671,"column":20},"end":{"line":676,"column":22}},"133":{"start":{"line":683,"column":20},"end":{"line":690,"column":22}},"134":{"start":{"line":697,"column":20},"end":{"line":703,"column":21}},"135":{"start":{"line":698,"column":24},"end":{"line":702,"column":26}},"136":{"start":{"line":704,"column":20},"end":{"line":710,"column":21}},"137":{"start":{"line":705,"column":24},"end":{"line":709,"column":26}},"138":{"start":{"line":711,"column":20},"end":{"line":717,"column":21}},"139":{"start":{"line":712,"column":24},"end":{"line":716,"column":26}},"140":{"start":{"line":718,"column":20},"end":{"line":718,"column":32}},"141":{"start":{"line":722,"column":20},"end":{"line":722,"column":32}},"142":{"start":{"line":727,"column":8},"end":{"line":727,"column":20},"skip":true},"143":{"start":{"line":737,"column":8},"end":{"line":820,"column":9}},"144":{"start":{"line":739,"column":16},"end":{"line":739,"column":25}},"145":{"start":{"line":744,"column":16},"end":{"line":744,"column":25}},"146":{"start":{"line":747,"column":16},"end":{"line":747,"column":25}},"147":{"start":{"line":750,"column":16},"end":{"line":757,"column":17}},"148":{"start":{"line":752,"column":24},"end":{"line":752,"column":33}},"149":{"start":{"line":754,"column":24},"end":{"line":754,"column":33}},"150":{"start":{"line":763,"column":16},"end":{"line":797,"column":17}},"151":{"start":{"line":765,"column":24},"end":{"line":765,"column":33}},"152":{"start":{"line":767,"column":24},"end":{"line":767,"column":33}},"153":{"start":{"line":769,"column":24},"end":{"line":769,"column":33}},"154":{"start":{"line":774,"column":24},"end":{"line":774,"column":33}},"155":{"start":{"line":781,"column":24},"end":{"line":781,"column":34}},"156":{"start":{"line":785,"column":24},"end":{"line":785,"column":34}},"157":{"start":{"line":788,"column":24},"end":{"line":788,"column":34}},"158":{"start":{"line":792,"column":24},"end":{"line":792,"column":34}},"159":{"start":{"line":794,"column":24},"end":{"line":794,"column":34}},"160":{"start":{"line":803,"column":16},"end":{"line":803,"column":26}},"161":{"start":{"line":806,"column":16},"end":{"line":806,"column":26}},"162":{"start":{"line":811,"column":16},"end":{"line":813,"column":17}},"163":{"start":{"line":812,"column":20},"end":{"line":812,"column":30}},"164":{"start":{"line":814,"column":16},"end":{"line":814,"column":26}},"165":{"start":{"line":817,"column":16},"end":{"line":817,"column":26}},"166":{"start":{"line":821,"column":8},"end":{"line":821,"column":18}},"167":{"start":{"line":831,"column":8},"end":{"line":831,"column":89}},"168":{"start":{"line":841,"column":8},"end":{"line":841,"column":74}},"169":{"start":{"line":876,"column":8},"end":{"line":876,"column":17}},"170":{"start":{"line":878,"column":8},"end":{"line":889,"column":9}},"171":{"start":{"line":881,"column":16},"end":{"line":881,"column":32}},"172":{"start":{"line":882,"column":16},"end":{"line":882,"column":22}},"173":{"start":{"line":885,"column":16},"end":{"line":885,"column":37}},"174":{"start":{"line":886,"column":16},"end":{"line":886,"column":22}},"175":{"start":{"line":891,"column":8},"end":{"line":908,"column":9}},"176":{"start":{"line":893,"column":16},"end":{"line":893,"column":42}},"177":{"start":{"line":896,"column":16},"end":{"line":898,"column":17}},"178":{"start":{"line":897,"column":20},"end":{"line":897,"column":55}},"179":{"start":{"line":899,"column":16},"end":{"line":899,"column":22}},"180":{"start":{"line":902,"column":16},"end":{"line":904,"column":17}},"181":{"start":{"line":903,"column":20},"end":{"line":903,"column":37}},"182":{"start":{"line":905,"column":16},"end":{"line":905,"column":22}},"183":{"start":{"line":910,"column":8},"end":{"line":910,"column":20}},"184":{"start":{"line":919,"column":8},"end":{"line":919,"column":30}},"185":{"start":{"line":922,"column":8},"end":{"line":943,"column":9}},"186":{"start":{"line":931,"column":12},"end":{"line":931,"column":84}},"187":{"start":{"line":933,"column":12},"end":{"line":942,"column":13}},"188":{"start":{"line":934,"column":16},"end":{"line":941,"column":17}},"189":{"start":{"line":938,"column":20},"end":{"line":938,"column":47}},"190":{"start":{"line":940,"column":20},"end":{"line":940,"column":26}},"191":{"start":{"line":945,"column":8},"end":{"line":945,"column":26}},"192":{"start":{"line":967,"column":8},"end":{"line":967,"column":108}},"193":{"start":{"line":1020,"column":8},"end":{"line":1020,"column":35}},"194":{"start":{"line":1021,"column":8},"end":{"line":1021,"column":26}},"195":{"start":{"line":1023,"column":8},"end":{"line":1025,"column":9}},"196":{"start":{"line":1024,"column":12},"end":{"line":1024,"column":34}},"197":{"start":{"line":1026,"column":8},"end":{"line":1028,"column":9}},"198":{"start":{"line":1027,"column":12},"end":{"line":1027,"column":33}},"199":{"start":{"line":1029,"column":8},"end":{"line":1031,"column":9}},"200":{"start":{"line":1030,"column":12},"end":{"line":1030,"column":37}},"201":{"start":{"line":1033,"column":8},"end":{"line":1047,"column":9}},"202":{"start":{"line":1034,"column":12},"end":{"line":1034,"column":45}},"203":{"start":{"line":1035,"column":15},"end":{"line":1047,"column":9}},"204":{"start":{"line":1036,"column":12},"end":{"line":1044,"column":13}},"205":{"start":{"line":1037,"column":16},"end":{"line":1037,"column":37}},"206":{"start":{"line":1038,"column":19},"end":{"line":1044,"column":13}},"207":{"start":{"line":1039,"column":16},"end":{"line":1039,"column":38}},"208":{"start":{"line":1040,"column":19},"end":{"line":1044,"column":13}},"209":{"start":{"line":1041,"column":16},"end":{"line":1041,"column":38}},"210":{"start":{"line":1043,"column":16},"end":{"line":1043,"column":38}},"211":{"start":{"line":1046,"column":12},"end":{"line":1046,"column":36}},"212":{"start":{"line":1049,"column":8},"end":{"line":1057,"column":9}},"213":{"start":{"line":1050,"column":12},"end":{"line":1050,"column":45}},"214":{"start":{"line":1052,"column":12},"end":{"line":1052,"column":70}},"215":{"start":{"line":1054,"column":12},"end":{"line":1056,"column":13}},"216":{"start":{"line":1055,"column":16},"end":{"line":1055,"column":41}},"217":{"start":{"line":1059,"column":8},"end":{"line":1059,"column":32}},"218":{"start":{"line":1155,"column":8},"end":{"line":1155,"column":35}},"219":{"start":{"line":1156,"column":8},"end":{"line":1156,"column":25}},"220":{"start":{"line":1157,"column":8},"end":{"line":1157,"column":23}},"221":{"start":{"line":1159,"column":8},"end":{"line":1170,"column":9}},"222":{"start":{"line":1160,"column":12},"end":{"line":1160,"column":82}},"223":{"start":{"line":1162,"column":12},"end":{"line":1162,"column":41}},"224":{"start":{"line":1163,"column":12},"end":{"line":1163,"column":37}},"225":{"start":{"line":1164,"column":15},"end":{"line":1170,"column":9}},"226":{"start":{"line":1165,"column":12},"end":{"line":1165,"column":37}},"227":{"start":{"line":1166,"column":12},"end":{"line":1166,"column":70}},"228":{"start":{"line":1168,"column":12},"end":{"line":1168,"column":35}},"229":{"start":{"line":1169,"column":12},"end":{"line":1169,"column":70}},"230":{"start":{"line":1172,"column":8},"end":{"line":1175,"column":10}},"231":{"start":{"line":1186,"column":8},"end":{"line":1186,"column":55}},"232":{"start":{"line":1187,"column":8},"end":{"line":1187,"column":55}},"233":{"start":{"line":1189,"column":8},"end":{"line":1199,"column":9}},"234":{"start":{"line":1197,"column":12},"end":{"line":1197,"column":61}},"235":{"start":{"line":1198,"column":12},"end":{"line":1198,"column":62}},"236":{"start":{"line":1201,"column":8},"end":{"line":1201,"column":83}},"237":{"start":{"line":1210,"column":8},"end":{"line":1237,"column":9}},"238":{"start":{"line":1218,"column":16},"end":{"line":1218,"column":28}},"239":{"start":{"line":1221,"column":16},"end":{"line":1221,"column":63}},"240":{"start":{"line":1224,"column":16},"end":{"line":1224,"column":47}},"241":{"start":{"line":1226,"column":16},"end":{"line":1226,"column":98}},"242":{"start":{"line":1230,"column":16},"end":{"line":1230,"column":105}},"243":{"start":{"line":1233,"column":16},"end":{"line":1233,"column":115}},"244":{"start":{"line":1236,"column":16},"end":{"line":1236,"column":29}},"245":{"start":{"line":1254,"column":8},"end":{"line":1254,"column":77}}},"branchMap":{"1":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":41},"end":{"line":50,"column":52}},{"start":{"line":51,"column":8},"end":{"line":51,"column":55}}]},"2":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":22}},{"start":{"line":54,"column":8},"end":{"line":54,"column":32}},{"start":{"line":55,"column":8},"end":{"line":55,"column":27}},{"start":{"line":56,"column":8},"end":{"line":56,"column":36}}]},"3":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":19}},{"start":{"line":76,"column":23},"end":{"line":76,"column":56}}]},"4":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"5":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":19},"end":{"line":106,"column":23}},{"start":{"line":106,"column":27},"end":{"line":106,"column":61}}]},"6":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":19},"end":{"line":123,"column":23}},{"start":{"line":123,"column":27},"end":{"line":123,"column":57}}]},"7":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":11},"end":{"line":133,"column":15}},{"start":{"line":133,"column":19},"end":{"line":133,"column":36}}]},"8":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":8},"end":{"line":134,"column":8}},{"start":{"line":134,"column":8},"end":{"line":134,"column":8}}]},"9":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":8},"end":{"line":152,"column":42}},{"start":{"line":153,"column":9},"end":{"line":153,"column":35}},{"start":{"line":153,"column":39},"end":{"line":153,"column":64}},{"start":{"line":154,"column":9},"end":{"line":154,"column":40}},{"start":{"line":154,"column":44},"end":{"line":154,"column":68}}]},"10":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":11},"end":{"line":164,"column":48}},{"start":{"line":164,"column":52},"end":{"line":164,"column":79}}]},"11":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":8},"end":{"line":174,"column":40}},{"start":{"line":175,"column":8},"end":{"line":175,"column":41}},{"start":{"line":176,"column":8},"end":{"line":176,"column":38}},{"start":{"line":177,"column":8},"end":{"line":177,"column":43}},{"start":{"line":178,"column":8},"end":{"line":178,"column":38}},{"start":{"line":179,"column":8},"end":{"line":179,"column":31}}]},"12":{"line":190,"type":"binary-expr","locations":[{"start":{"line":190,"column":8},"end":{"line":190,"column":40}},{"start":{"line":191,"column":8},"end":{"line":191,"column":41}},{"start":{"line":192,"column":8},"end":{"line":192,"column":55}},{"start":{"line":193,"column":8},"end":{"line":193,"column":43}},{"start":{"line":194,"column":8},"end":{"line":194,"column":37}},{"start":{"line":195,"column":8},"end":{"line":195,"column":31}}]},"13":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":8},"end":{"line":206,"column":8}},{"start":{"line":206,"column":8},"end":{"line":206,"column":8}}]},"14":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":8},"end":{"line":209,"column":8}},{"start":{"line":209,"column":8},"end":{"line":209,"column":8}}]},"15":{"line":209,"type":"binary-expr","locations":[{"start":{"line":209,"column":12},"end":{"line":209,"column":44}},{"start":{"line":209,"column":48},"end":{"line":209,"column":62}}]},"16":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":4},"end":{"line":238,"column":4}},{"start":{"line":238,"column":4},"end":{"line":238,"column":4}}]},"17":{"line":238,"type":"binary-expr","locations":[{"start":{"line":238,"column":8},"end":{"line":238,"column":20}},{"start":{"line":238,"column":24},"end":{"line":238,"column":63}}]},"18":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":11},"end":{"line":260,"column":46}},{"start":{"line":261,"column":8},"end":{"line":261,"column":35}},{"start":{"line":261,"column":39},"end":{"line":261,"column":78}},{"start":{"line":262,"column":8},"end":{"line":262,"column":31}},{"start":{"line":262,"column":35},"end":{"line":262,"column":70}}]},"19":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":19},"end":{"line":260,"column":32}},{"start":{"line":260,"column":36},"end":{"line":260,"column":45}}]},"20":{"line":272,"type":"binary-expr","locations":[{"start":{"line":272,"column":11},"end":{"line":272,"column":31}},{"start":{"line":272,"column":35},"end":{"line":272,"column":62}}]},"21":{"line":282,"type":"binary-expr","locations":[{"start":{"line":282,"column":11},"end":{"line":282,"column":30}},{"start":{"line":282,"column":34},"end":{"line":282,"column":61}}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":11},"end":{"line":292,"column":30}},{"start":{"line":292,"column":34},"end":{"line":292,"column":61}}]},"23":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":11},"end":{"line":302,"column":30}},{"start":{"line":302,"column":34},"end":{"line":302,"column":61}}]},"24":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":11},"end":{"line":312,"column":30}},{"start":{"line":312,"column":34},"end":{"line":312,"column":61}}]},"25":{"line":322,"type":"binary-expr","locations":[{"start":{"line":322,"column":11},"end":{"line":322,"column":30}},{"start":{"line":322,"column":34},"end":{"line":322,"column":61}}]},"26":{"line":332,"type":"binary-expr","locations":[{"start":{"line":332,"column":11},"end":{"line":332,"column":30}},{"start":{"line":332,"column":34},"end":{"line":332,"column":61}}]},"27":{"line":342,"type":"binary-expr","locations":[{"start":{"line":342,"column":11},"end":{"line":342,"column":30}},{"start":{"line":342,"column":34},"end":{"line":342,"column":61}}]},"28":{"line":352,"type":"binary-expr","locations":[{"start":{"line":352,"column":11},"end":{"line":352,"column":30}},{"start":{"line":352,"column":34},"end":{"line":352,"column":61}}]},"29":{"line":362,"type":"binary-expr","locations":[{"start":{"line":362,"column":11},"end":{"line":362,"column":30}},{"start":{"line":362,"column":34},"end":{"line":362,"column":61}}]},"30":{"line":372,"type":"binary-expr","locations":[{"start":{"line":372,"column":11},"end":{"line":372,"column":32}},{"start":{"line":372,"column":36},"end":{"line":372,"column":58}},{"start":{"line":372,"column":62},"end":{"line":372,"column":86}}]},"31":{"line":393,"type":"cond-expr","locations":[{"start":{"line":394,"column":10},"end":{"line":394,"column":64}},{"start":{"line":395,"column":10},"end":{"line":395,"column":61}}]},"32":{"line":468,"type":"binary-expr","locations":[{"start":{"line":468,"column":13},"end":{"line":468,"column":36}},{"start":{"line":468,"column":40},"end":{"line":468,"column":70}},{"start":{"line":469,"column":12},"end":{"line":469,"column":43}}]},"33":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":8},"end":{"line":498,"column":8}},{"start":{"line":498,"column":8},"end":{"line":498,"column":8}}]},"34":{"line":522,"type":"binary-expr","locations":[{"start":{"line":522,"column":15},"end":{"line":522,"column":35}},{"start":{"line":522,"column":39},"end":{"line":522,"column":72}}]},"35":{"line":534,"type":"binary-expr","locations":[{"start":{"line":534,"column":12},"end":{"line":534,"column":32}},{"start":{"line":534,"column":36},"end":{"line":534,"column":68}},{"start":{"line":535,"column":12},"end":{"line":535,"column":33}},{"start":{"line":536,"column":16},"end":{"line":536,"column":48}},{"start":{"line":537,"column":16},"end":{"line":537,"column":48}},{"start":{"line":538,"column":16},"end":{"line":538,"column":48}}]},"36":{"line":569,"type":"if","locations":[{"start":{"line":569,"column":12},"end":{"line":569,"column":12}},{"start":{"line":569,"column":12},"end":{"line":569,"column":12}}]},"37":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":8},"end":{"line":601,"column":8}},{"start":{"line":601,"column":8},"end":{"line":601,"column":8}}]},"38":{"line":601,"type":"binary-expr","locations":[{"start":{"line":601,"column":12},"end":{"line":601,"column":34}},{"start":{"line":601,"column":38},"end":{"line":601,"column":71}}]},"39":{"line":609,"type":"switch","locations":[{"start":{"line":615,"column":16},"end":{"line":615,"column":41}},{"start":{"line":616,"column":16},"end":{"line":618,"column":26}},{"start":{"line":626,"column":16},"end":{"line":634,"column":17}},{"start":{"line":644,"column":16},"end":{"line":644,"column":32}},{"start":{"line":645,"column":16},"end":{"line":646,"column":49}},{"start":{"line":653,"column":16},"end":{"line":653,"column":44}},{"start":{"line":654,"column":16},"end":{"line":666,"column":32}},{"start":{"line":670,"column":16},"end":{"line":676,"column":22}},{"start":{"line":682,"column":16},"end":{"line":690,"column":22}},{"start":{"line":696,"column":16},"end":{"line":718,"column":32}},{"start":{"line":721,"column":16},"end":{"line":722,"column":32}}]},"40":{"line":629,"type":"if","locations":[{"start":{"line":629,"column":20},"end":{"line":629,"column":20}},{"start":{"line":629,"column":20},"end":{"line":629,"column":20}}]},"41":{"line":629,"type":"binary-expr","locations":[{"start":{"line":629,"column":24},"end":{"line":629,"column":37}},{"start":{"line":629,"column":41},"end":{"line":629,"column":56}}]},"42":{"line":655,"type":"if","locations":[{"start":{"line":655,"column":20},"end":{"line":655,"column":20}},{"start":{"line":655,"column":20},"end":{"line":655,"column":20}}]},"43":{"line":656,"type":"if","locations":[{"start":{"line":656,"column":24},"end":{"line":656,"column":24}},{"start":{"line":656,"column":24},"end":{"line":656,"column":24}}]},"44":{"line":659,"type":"if","locations":[{"start":{"line":659,"column":24},"end":{"line":659,"column":24}},{"start":{"line":659,"column":24},"end":{"line":659,"column":24}}]},"45":{"line":659,"type":"binary-expr","locations":[{"start":{"line":659,"column":28},"end":{"line":659,"column":39}},{"start":{"line":660,"column":28},"end":{"line":660,"column":61}},{"start":{"line":661,"column":28},"end":{"line":661,"column":65}}]},"46":{"line":672,"type":"binary-expr","locations":[{"start":{"line":672,"column":24},"end":{"line":672,"column":35}},{"start":{"line":673,"column":24},"end":{"line":673,"column":44}},{"start":{"line":674,"column":24},"end":{"line":674,"column":55}},{"start":{"line":675,"column":24},"end":{"line":675,"column":59}}]},"47":{"line":684,"type":"binary-expr","locations":[{"start":{"line":684,"column":24},"end":{"line":684,"column":46}},{"start":{"line":685,"column":24},"end":{"line":685,"column":61}},{"start":{"line":686,"column":24},"end":{"line":686,"column":76}},{"start":{"line":687,"column":24},"end":{"line":687,"column":41}},{"start":{"line":688,"column":24},"end":{"line":688,"column":60}},{"start":{"line":689,"column":24},"end":{"line":689,"column":69}}]},"48":{"line":697,"type":"if","locations":[{"start":{"line":697,"column":20},"end":{"line":697,"column":20}},{"start":{"line":697,"column":20},"end":{"line":697,"column":20}}]},"49":{"line":699,"type":"binary-expr","locations":[{"start":{"line":699,"column":28},"end":{"line":699,"column":57}},{"start":{"line":700,"column":28},"end":{"line":700,"column":56}},{"start":{"line":701,"column":28},"end":{"line":701,"column":66}}]},"50":{"line":704,"type":"if","locations":[{"start":{"line":704,"column":20},"end":{"line":704,"column":20}},{"start":{"line":704,"column":20},"end":{"line":704,"column":20}}]},"51":{"line":706,"type":"binary-expr","locations":[{"start":{"line":706,"column":28},"end":{"line":706,"column":57}},{"start":{"line":707,"column":28},"end":{"line":707,"column":56}},{"start":{"line":708,"column":28},"end":{"line":708,"column":66}}]},"52":{"line":711,"type":"if","locations":[{"start":{"line":711,"column":20},"end":{"line":711,"column":20}},{"start":{"line":711,"column":20},"end":{"line":711,"column":20}}]},"53":{"line":713,"type":"binary-expr","locations":[{"start":{"line":713,"column":28},"end":{"line":713,"column":57}},{"start":{"line":714,"column":28},"end":{"line":714,"column":56}},{"start":{"line":715,"column":28},"end":{"line":715,"column":66}}]},"54":{"line":737,"type":"switch","locations":[{"start":{"line":738,"column":12},"end":{"line":739,"column":25}},{"start":{"line":741,"column":12},"end":{"line":741,"column":40}},{"start":{"line":742,"column":12},"end":{"line":742,"column":43}},{"start":{"line":743,"column":12},"end":{"line":744,"column":25}},{"start":{"line":746,"column":12},"end":{"line":747,"column":25}},{"start":{"line":749,"column":12},"end":{"line":757,"column":17}},{"start":{"line":761,"column":12},"end":{"line":797,"column":17}},{"start":{"line":801,"column":12},"end":{"line":801,"column":35}},{"start":{"line":802,"column":12},"end":{"line":803,"column":26}},{"start":{"line":805,"column":12},"end":{"line":806,"column":26}},{"start":{"line":808,"column":12},"end":{"line":814,"column":26}},{"start":{"line":816,"column":12},"end":{"line":817,"column":26}}]},"55":{"line":750,"type":"switch","locations":[{"start":{"line":751,"column":20},"end":{"line":752,"column":33}},{"start":{"line":753,"column":20},"end":{"line":754,"column":33}}]},"56":{"line":763,"type":"switch","locations":[{"start":{"line":764,"column":20},"end":{"line":765,"column":33}},{"start":{"line":766,"column":20},"end":{"line":767,"column":33}},{"start":{"line":768,"column":20},"end":{"line":769,"column":33}},{"start":{"line":770,"column":20},"end":{"line":770,"column":30}},{"start":{"line":771,"column":20},"end":{"line":771,"column":30}},{"start":{"line":772,"column":20},"end":{"line":772,"column":31}},{"start":{"line":773,"column":20},"end":{"line":774,"column":33}},{"start":{"line":775,"column":20},"end":{"line":775,"column":29}},{"start":{"line":776,"column":20},"end":{"line":776,"column":30}},{"start":{"line":777,"column":20},"end":{"line":777,"column":29}},{"start":{"line":778,"column":20},"end":{"line":778,"column":30}},{"start":{"line":779,"column":20},"end":{"line":779,"column":30}},{"start":{"line":780,"column":20},"end":{"line":781,"column":34}},{"start":{"line":782,"column":20},"end":{"line":782,"column":30}},{"start":{"line":783,"column":20},"end":{"line":783,"column":30}},{"start":{"line":784,"column":20},"end":{"line":785,"column":34}},{"start":{"line":786,"column":20},"end":{"line":786,"column":29}},{"start":{"line":787,"column":20},"end":{"line":788,"column":34}},{"start":{"line":789,"column":20},"end":{"line":789,"column":29}},{"start":{"line":790,"column":20},"end":{"line":790,"column":29}},{"start":{"line":791,"column":20},"end":{"line":792,"column":34}},{"start":{"line":793,"column":20},"end":{"line":794,"column":34}}]},"57":{"line":811,"type":"if","locations":[{"start":{"line":811,"column":16},"end":{"line":811,"column":16}},{"start":{"line":811,"column":16},"end":{"line":811,"column":16}}]},"58":{"line":831,"type":"binary-expr","locations":[{"start":{"line":831,"column":23},"end":{"line":831,"column":27}},{"start":{"line":831,"column":31},"end":{"line":831,"column":61}},{"start":{"line":831,"column":65},"end":{"line":831,"column":87}}]},"59":{"line":841,"type":"binary-expr","locations":[{"start":{"line":841,"column":15},"end":{"line":841,"column":31}},{"start":{"line":841,"column":35},"end":{"line":841,"column":73}}]},"60":{"line":878,"type":"switch","locations":[{"start":{"line":879,"column":12},"end":{"line":879,"column":28}},{"start":{"line":880,"column":12},"end":{"line":882,"column":22}},{"start":{"line":884,"column":12},"end":{"line":886,"column":22}}]},"61":{"line":878,"type":"binary-expr","locations":[{"start":{"line":878,"column":16},"end":{"line":878,"column":20}},{"start":{"line":878,"column":24},"end":{"line":878,"column":33}}]},"62":{"line":891,"type":"switch","locations":[{"start":{"line":892,"column":12},"end":{"line":893,"column":42}},{"start":{"line":895,"column":12},"end":{"line":899,"column":22}},{"start":{"line":901,"column":12},"end":{"line":905,"column":22}}]},"63":{"line":891,"type":"binary-expr","locations":[{"start":{"line":891,"column":16},"end":{"line":891,"column":20}},{"start":{"line":891,"column":24},"end":{"line":891,"column":33}}]},"64":{"line":896,"type":"if","locations":[{"start":{"line":896,"column":16},"end":{"line":896,"column":16}},{"start":{"line":896,"column":16},"end":{"line":896,"column":16}}]},"65":{"line":896,"type":"binary-expr","locations":[{"start":{"line":896,"column":20},"end":{"line":896,"column":49}},{"start":{"line":896,"column":53},"end":{"line":896,"column":77}}]},"66":{"line":902,"type":"if","locations":[{"start":{"line":902,"column":16},"end":{"line":902,"column":16}},{"start":{"line":902,"column":16},"end":{"line":902,"column":16}}]},"67":{"line":922,"type":"if","locations":[{"start":{"line":922,"column":8},"end":{"line":922,"column":8}},{"start":{"line":922,"column":8},"end":{"line":922,"column":8}}]},"68":{"line":923,"type":"binary-expr","locations":[{"start":{"line":923,"column":12},"end":{"line":923,"column":35}},{"start":{"line":924,"column":12},"end":{"line":924,"column":47}},{"start":{"line":925,"column":12},"end":{"line":925,"column":46}},{"start":{"line":929,"column":13},"end":{"line":929,"column":52}},{"start":{"line":929,"column":56},"end":{"line":929,"column":91}}]},"69":{"line":931,"type":"cond-expr","locations":[{"start":{"line":931,"column":57},"end":{"line":931,"column":66}},{"start":{"line":931,"column":69},"end":{"line":931,"column":83}}]},"70":{"line":934,"type":"if","locations":[{"start":{"line":934,"column":16},"end":{"line":934,"column":16}},{"start":{"line":934,"column":16},"end":{"line":934,"column":16}}]},"71":{"line":935,"type":"binary-expr","locations":[{"start":{"line":935,"column":20},"end":{"line":935,"column":60}},{"start":{"line":936,"column":20},"end":{"line":936,"column":59}}]},"72":{"line":967,"type":"binary-expr","locations":[{"start":{"line":967,"column":15},"end":{"line":967,"column":38}},{"start":{"line":967,"column":42},"end":{"line":967,"column":72}},{"start":{"line":967,"column":76},"end":{"line":967,"column":107}}]},"73":{"line":1023,"type":"if","locations":[{"start":{"line":1023,"column":8},"end":{"line":1023,"column":8}},{"start":{"line":1023,"column":8},"end":{"line":1023,"column":8}}]},"74":{"line":1023,"type":"binary-expr","locations":[{"start":{"line":1023,"column":12},"end":{"line":1023,"column":46}},{"start":{"line":1023,"column":50},"end":{"line":1023,"column":63}}]},"75":{"line":1026,"type":"if","locations":[{"start":{"line":1026,"column":8},"end":{"line":1026,"column":8}},{"start":{"line":1026,"column":8},"end":{"line":1026,"column":8}}]},"76":{"line":1029,"type":"if","locations":[{"start":{"line":1029,"column":8},"end":{"line":1029,"column":8}},{"start":{"line":1029,"column":8},"end":{"line":1029,"column":8}}]},"77":{"line":1033,"type":"if","locations":[{"start":{"line":1033,"column":8},"end":{"line":1033,"column":8}},{"start":{"line":1033,"column":8},"end":{"line":1033,"column":8}}]},"78":{"line":1035,"type":"if","locations":[{"start":{"line":1035,"column":15},"end":{"line":1035,"column":15}},{"start":{"line":1035,"column":15},"end":{"line":1035,"column":15}}]},"79":{"line":1035,"type":"binary-expr","locations":[{"start":{"line":1035,"column":19},"end":{"line":1035,"column":45}},{"start":{"line":1035,"column":49},"end":{"line":1035,"column":83}}]},"80":{"line":1036,"type":"if","locations":[{"start":{"line":1036,"column":12},"end":{"line":1036,"column":12}},{"start":{"line":1036,"column":12},"end":{"line":1036,"column":12}}]},"81":{"line":1038,"type":"if","locations":[{"start":{"line":1038,"column":19},"end":{"line":1038,"column":19}},{"start":{"line":1038,"column":19},"end":{"line":1038,"column":19}}]},"82":{"line":1040,"type":"if","locations":[{"start":{"line":1040,"column":19},"end":{"line":1040,"column":19}},{"start":{"line":1040,"column":19},"end":{"line":1040,"column":19}}]},"83":{"line":1049,"type":"if","locations":[{"start":{"line":1049,"column":8},"end":{"line":1049,"column":8}},{"start":{"line":1049,"column":8},"end":{"line":1049,"column":8}}]},"84":{"line":1054,"type":"if","locations":[{"start":{"line":1054,"column":12},"end":{"line":1054,"column":12}},{"start":{"line":1054,"column":12},"end":{"line":1054,"column":12}}]},"85":{"line":1159,"type":"if","locations":[{"start":{"line":1159,"column":8},"end":{"line":1159,"column":8}},{"start":{"line":1159,"column":8},"end":{"line":1159,"column":8}}]},"86":{"line":1164,"type":"if","locations":[{"start":{"line":1164,"column":15},"end":{"line":1164,"column":15}},{"start":{"line":1164,"column":15},"end":{"line":1164,"column":15}}]},"87":{"line":1164,"type":"binary-expr","locations":[{"start":{"line":1164,"column":19},"end":{"line":1164,"column":45}},{"start":{"line":1164,"column":49},"end":{"line":1164,"column":83}}]},"88":{"line":1190,"type":"binary-expr","locations":[{"start":{"line":1190,"column":12},"end":{"line":1190,"column":48}},{"start":{"line":1191,"column":12},"end":{"line":1191,"column":70}},{"start":{"line":1192,"column":12},"end":{"line":1192,"column":62}},{"start":{"line":1193,"column":12},"end":{"line":1193,"column":48}},{"start":{"line":1194,"column":12},"end":{"line":1194,"column":70}},{"start":{"line":1195,"column":12},"end":{"line":1195,"column":62}}]},"89":{"line":1210,"type":"switch","locations":[{"start":{"line":1211,"column":12},"end":{"line":1211,"column":30}},{"start":{"line":1212,"column":12},"end":{"line":1212,"column":34}},{"start":{"line":1213,"column":12},"end":{"line":1213,"column":33}},{"start":{"line":1214,"column":12},"end":{"line":1214,"column":36}},{"start":{"line":1215,"column":12},"end":{"line":1215,"column":44}},{"start":{"line":1216,"column":12},"end":{"line":1216,"column":35}},{"start":{"line":1217,"column":12},"end":{"line":1218,"column":28}},{"start":{"line":1220,"column":12},"end":{"line":1221,"column":63}},{"start":{"line":1223,"column":12},"end":{"line":1227,"column":13}},{"start":{"line":1229,"column":12},"end":{"line":1230,"column":105}},{"start":{"line":1232,"column":12},"end":{"line":1233,"column":115}},{"start":{"line":1235,"column":12},"end":{"line":1236,"column":29}}]},"90":{"line":1226,"type":"binary-expr","locations":[{"start":{"line":1226,"column":23},"end":{"line":1226,"column":41}},{"start":{"line":1226,"column":45},"end":{"line":1226,"column":97}}]},"91":{"line":1230,"type":"binary-expr","locations":[{"start":{"line":1230,"column":23},"end":{"line":1230,"column":61}},{"start":{"line":1230,"column":65},"end":{"line":1230,"column":104}}]},"92":{"line":1233,"type":"binary-expr","locations":[{"start":{"line":1233,"column":23},"end":{"line":1233,"column":67}},{"start":{"line":1233,"column":71},"end":{"line":1233,"column":114}}]},"93":{"line":1254,"type":"binary-expr","locations":[{"start":{"line":1254,"column":15},"end":{"line":1254,"column":38}},{"start":{"line":1254,"column":42},"end":{"line":1254,"column":61}},{"start":{"line":1254,"column":65},"end":{"line":1254,"column":76}}]}},"code":["/**"," * @fileoverview Common utils for AST."," * @author Gyandeep Singh"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const esutils = require(\"esutils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const anyFunctionPattern = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression)$/;","const anyLoopPattern = /^(?:DoWhile|For|ForIn|ForOf|While)Statement$/;","const arrayOrTypedArrayPattern = /Array$/;","const arrayMethodPattern = /^(?:every|filter|find|findIndex|forEach|map|some)$/;","const bindOrCallOrApplyPattern = /^(?:bind|call|apply)$/;","const breakableTypePattern = /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/;","const thisTagPattern = /^[\\s*]*@this/m;","","","const COMMENTS_IGNORE_PATTERN = /^\\s*(?:eslint|jshint\\s+|jslint\\s+|istanbul\\s+|globals?\\s+|exported\\s+|jscs)/;","const LINEBREAKS = new Set([\"\\r\\n\", \"\\r\", \"\\n\", \"\\u2028\", \"\\u2029\"]);","const LINEBREAK_MATCHER = /\\r\\n|[\\r\\n\\u2028\\u2029]/;","","// A set of node types that can contain a list of statements","const STATEMENT_LIST_PARENTS = new Set([\"Program\", \"BlockStatement\", \"SwitchCase\"]);","","/**"," * Checks reference if is non initializer and writable."," * @param {Reference} reference - A reference to check."," * @param {int} index - The index of the reference in the references."," * @param {Reference[]} references - The array that the reference belongs to."," * @returns {boolean} Success/Failure"," * @private"," */","function isModifyingReference(reference, index, references) {","    const identifier = reference.identifier;","","    /*","     * Destructuring assignments can have multiple default value, so","     * possibly there are multiple writeable references for the same","     * identifier.","     */","    const modifyingDifferentIdentifier = index === 0 ||","        references[index - 1].identifier !== identifier;","","    return (identifier &&","        reference.init === false &&","        reference.isWrite() &&","        modifyingDifferentIdentifier","    );","}","","/**"," * Checks whether the given string starts with uppercase or not."," *"," * @param {string} s - The string to check."," * @returns {boolean} `true` if the string starts with uppercase."," */","function startsWithUpperCase(s) {","    return s[0] !== s[0].toLocaleLowerCase();","}","","/**"," * Checks whether or not a node is a constructor."," * @param {ASTNode} node - A function node to check."," * @returns {boolean} Wehether or not a node is a constructor."," */","function isES5Constructor(node) {","    return (node.id && startsWithUpperCase(node.id.name));","}","","/**"," * Finds a function node from ancestors of a node."," * @param {ASTNode} node - A start node to find."," * @returns {Node|null} A found function node."," */","function getUpperFunction(node) {","    while (node) {","        if (anyFunctionPattern.test(node.type)) {","            return node;","        }","        node = node.parent;","    }","    return null;","}","","/**"," * Checks whether a given node is a function node or not."," * The following types are function nodes:"," *"," * - ArrowFunctionExpression"," * - FunctionDeclaration"," * - FunctionExpression"," *"," * @param {ASTNode|null} node - A node to check."," * @returns {boolean} `true` if the node is a function node."," */","function isFunction(node) {","    return Boolean(node && anyFunctionPattern.test(node.type));","}","","/**"," * Checks whether a given node is a loop node or not."," * The following types are loop nodes:"," *"," * - DoWhileStatement"," * - ForInStatement"," * - ForOfStatement"," * - ForStatement"," * - WhileStatement"," *"," * @param {ASTNode|null} node - A node to check."," * @returns {boolean} `true` if the node is a loop node."," */","function isLoop(node) {","    return Boolean(node && anyLoopPattern.test(node.type));","}","","/**"," * Checks whether the given node is in a loop or not."," *"," * @param {ASTNode} node - The node to check."," * @returns {boolean} `true` if the node is in a loop."," */","function isInLoop(node) {","    while (node && !isFunction(node)) {","        if (isLoop(node)) {","            return true;","        }","","        node = node.parent;","    }","","    return false;","}","","/**"," * Checks whether or not a node is `null` or `undefined`."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is a `null` or `undefined`."," * @public"," */","function isNullOrUndefined(node) {","    return (","        module.exports.isNullLiteral(node) ||","        (node.type === \"Identifier\" && node.name === \"undefined\") ||","        (node.type === \"UnaryExpression\" && node.operator === \"void\")","    );","}","","/**"," * Checks whether or not a node is callee."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is callee."," */","function isCallee(node) {","    return node.parent.type === \"CallExpression\" && node.parent.callee === node;","}","","/**"," * Checks whether or not a node is `Reflect.apply`."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is a `Reflect.apply`."," */","function isReflectApply(node) {","    return (","        node.type === \"MemberExpression\" &&","        node.object.type === \"Identifier\" &&","        node.object.name === \"Reflect\" &&","        node.property.type === \"Identifier\" &&","        node.property.name === \"apply\" &&","        node.computed === false","    );","}","","/**"," * Checks whether or not a node is `Array.from`."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is a `Array.from`."," */","function isArrayFromMethod(node) {","    return (","        node.type === \"MemberExpression\" &&","        node.object.type === \"Identifier\" &&","        arrayOrTypedArrayPattern.test(node.object.name) &&","        node.property.type === \"Identifier\" &&","        node.property.name === \"from\" &&","        node.computed === false","    );","}","","/**"," * Checks whether or not a node is a method which has `thisArg`."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is a method which has `thisArg`."," */","function isMethodWhichHasThisArg(node) {","    while (node) {","        if (node.type === \"Identifier\") {","            return arrayMethodPattern.test(node.name);","        }","        if (node.type === \"MemberExpression\" && !node.computed) {","            node = node.property;","            continue;","        }","","        break;","    }","","    return false;","}","","/**"," * Creates the negate function of the given function."," * @param {Function} f - The function to negate."," * @returns {Function} Negated function."," */","function negate(f) {","    return token => !f(token);","}","","/**"," * Checks whether or not a node has a `@this` tag in its comments."," * @param {ASTNode} node - A node to check."," * @param {SourceCode} sourceCode - A SourceCode instance to get comments."," * @returns {boolean} Whether or not the node has a `@this` tag in its comments."," */","function hasJSDocThisTag(node, sourceCode) {","    const jsdocComment = sourceCode.getJSDocComment(node);","","    if (jsdocComment && thisTagPattern.test(jsdocComment.value)) {","        return true;","    }","","    // Checks `@this` in its leading comments for callbacks,","    // because callbacks don't have its JSDoc comment.","    // e.g.","    //     sinon.test(/* @this sinon.Sandbox */function() { this.spy(); });","    return sourceCode.getComments(node).leading.some(comment => thisTagPattern.test(comment.value));","}","","/**"," * Determines if a node is surrounded by parentheses."," * @param {SourceCode} sourceCode The ESLint source code object"," * @param {ASTNode} node The node to be checked."," * @returns {boolean} True if the node is parenthesised."," * @private"," */","function isParenthesised(sourceCode, node) {","    const previousToken = sourceCode.getTokenBefore(node),","        nextToken = sourceCode.getTokenAfter(node);","","    return Boolean(previousToken && nextToken) &&","        previousToken.value === \"(\" && previousToken.range[1] <= node.range[0] &&","        nextToken.value === \")\" && nextToken.range[0] >= node.range[1];","}","","/**"," * Checks if the given token is an arrow token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is an arrow token."," */","function isArrowToken(token) {","    return token.value === \"=>\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a comma token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a comma token."," */","function isCommaToken(token) {","    return token.value === \",\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a semicolon token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a semicolon token."," */","function isSemicolonToken(token) {","    return token.value === \";\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a colon token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a colon token."," */","function isColonToken(token) {","    return token.value === \":\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is an opening parenthesis token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is an opening parenthesis token."," */","function isOpeningParenToken(token) {","    return token.value === \"(\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a closing parenthesis token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a closing parenthesis token."," */","function isClosingParenToken(token) {","    return token.value === \")\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is an opening square bracket token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is an opening square bracket token."," */","function isOpeningBracketToken(token) {","    return token.value === \"[\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a closing square bracket token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a closing square bracket token."," */","function isClosingBracketToken(token) {","    return token.value === \"]\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is an opening brace token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is an opening brace token."," */","function isOpeningBraceToken(token) {","    return token.value === \"{\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a closing brace token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a closing brace token."," */","function isClosingBraceToken(token) {","    return token.value === \"}\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a comment token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a comment token."," */","function isCommentToken(token) {","    return token.type === \"Line\" || token.type === \"Block\" || token.type === \"Shebang\";","}","","/**"," * Checks if the given token is a keyword token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a keyword token."," */","function isKeywordToken(token) {","    return token.type === \"Keyword\";","}","","/**"," * Gets the `(` token of the given function node."," *"," * @param {ASTNode} node - The function node to get."," * @param {SourceCode} sourceCode - The source code object to get tokens."," * @returns {Token} `(` token."," */","function getOpeningParenOfParams(node, sourceCode) {","    return node.id","        ? sourceCode.getTokenAfter(node.id, isOpeningParenToken)","        : sourceCode.getFirstToken(node, isOpeningParenToken);","}","","/**"," * Creates a version of the LINEBREAK_MATCHER regex with the global flag."," * Global regexes are mutable, so this needs to be a function instead of a constant."," * @returns {RegExp} A global regular expression that matches line terminators"," */","function createGlobalLinebreakMatcher() {","    return new RegExp(LINEBREAK_MATCHER.source, \"g\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    COMMENTS_IGNORE_PATTERN,","    LINEBREAKS,","    LINEBREAK_MATCHER,","    STATEMENT_LIST_PARENTS,","","    /**","     * Determines whether two adjacent tokens are on the same line.","     * @param {Object} left - The left token object.","     * @param {Object} right - The right token object.","     * @returns {boolean} Whether or not the tokens are on the same line.","     * @public","     */","    isTokenOnSameLine(left, right) {","        return left.loc.end.line === right.loc.start.line;","    },","","    isNullOrUndefined,","    isCallee,","    isES5Constructor,","    getUpperFunction,","    isFunction,","    isLoop,","    isInLoop,","    isArrayFromMethod,","    isParenthesised,","    createGlobalLinebreakMatcher,","","    isArrowToken,","    isClosingBraceToken,","    isClosingBracketToken,","    isClosingParenToken,","    isColonToken,","    isCommaToken,","    isCommentToken,","    isKeywordToken,","    isNotClosingBraceToken: negate(isClosingBraceToken),","    isNotClosingBracketToken: negate(isClosingBracketToken),","    isNotClosingParenToken: negate(isClosingParenToken),","    isNotColonToken: negate(isColonToken),","    isNotCommaToken: negate(isCommaToken),","    isNotOpeningBraceToken: negate(isOpeningBraceToken),","    isNotOpeningBracketToken: negate(isOpeningBracketToken),","    isNotOpeningParenToken: negate(isOpeningParenToken),","    isNotSemicolonToken: negate(isSemicolonToken),","    isOpeningBraceToken,","    isOpeningBracketToken,","    isOpeningParenToken,","    isSemicolonToken,","","    /**","     * Checks whether or not a given node is a string literal.","     * @param {ASTNode} node - A node to check.","     * @returns {boolean} `true` if the node is a string literal.","     */","    isStringLiteral(node) {","        return (","            (node.type === \"Literal\" && typeof node.value === \"string\") ||","            node.type === \"TemplateLiteral\"","        );","    },","","    /**","     * Checks whether a given node is a breakable statement or not.","     * The node is breakable if the node is one of the following type:","     *","     * - DoWhileStatement","     * - ForInStatement","     * - ForOfStatement","     * - ForStatement","     * - SwitchStatement","     * - WhileStatement","     *","     * @param {ASTNode} node - A node to check.","     * @returns {boolean} `true` if the node is breakable.","     */","    isBreakableStatement(node) {","        return breakableTypePattern.test(node.type);","    },","","    /**","     * Gets the label if the parent node of a given node is a LabeledStatement.","     *","     * @param {ASTNode} node - A node to get.","     * @returns {string|null} The label or `null`.","     */","    getLabel(node) {","        if (node.parent.type === \"LabeledStatement\") {","            return node.parent.label.name;","        }","        return null;","    },","","    /**","     * Gets references which are non initializer and writable.","     * @param {Reference[]} references - An array of references.","     * @returns {Reference[]} An array of only references which are non initializer and writable.","     * @public","     */","    getModifyingReferences(references) {","        return references.filter(isModifyingReference);","    },","","    /**","     * Validate that a string passed in is surrounded by the specified character","     * @param  {string} val The text to check.","     * @param  {string} character The character to see if it's surrounded by.","     * @returns {boolean} True if the text is surrounded by the character, false if not.","     * @private","     */","    isSurroundedBy(val, character) {","        return val[0] === character && val[val.length - 1] === character;","    },","","    /**","     * Returns whether the provided node is an ESLint directive comment or not","     * @param {LineComment|BlockComment} node The node to be checked","     * @returns {boolean} `true` if the node is an ESLint directive comment","     */","    isDirectiveComment(node) {","        const comment = node.value.trim();","","        return (","            node.type === \"Line\" && comment.indexOf(\"eslint-\") === 0 ||","            node.type === \"Block\" && (","                comment.indexOf(\"global \") === 0 ||","                comment.indexOf(\"eslint \") === 0 ||","                comment.indexOf(\"eslint-\") === 0","            )","        );","    },","","    /**","     * Gets the trailing statement of a given node.","     *","     *     if (code)","     *         consequent;","     *","     * When taking this `IfStatement`, returns `consequent;` statement.","     *","     * @param {ASTNode} A node to get.","     * @returns {ASTNode|null} The trailing statement's node.","     */","    getTrailingStatement: esutils.ast.trailingStatement,","","    /**","     * Finds the variable by a given name in a given scope and its upper scopes.","     *","     * @param {escope.Scope} initScope - A scope to start find.","     * @param {string} name - A variable name to find.","     * @returns {escope.Variable|null} A found variable or `null`.","     */","    getVariableByName(initScope, name) {","        let scope = initScope;","","        while (scope) {","            const variable = scope.set.get(name);","","            if (variable) {","                return variable;","            }","","            scope = scope.upper;","        }","","        return null;","    },","","    /**","     * Checks whether or not a given function node is the default `this` binding.","     *","     * First, this checks the node:","     *","     * - The function name does not start with uppercase (it's a constructor).","     * - The function does not have a JSDoc comment that has a @this tag.","     *","     * Next, this checks the location of the node.","     * If the location is below, this judges `this` is valid.","     *","     * - The location is not on an object literal.","     * - The location is not assigned to a variable which starts with an uppercase letter.","     * - The location is not on an ES2015 class.","     * - Its `bind`/`call`/`apply` method is not called directly.","     * - The function is not a callback of array methods (such as `.forEach()`) if `thisArg` is given.","     *","     * @param {ASTNode} node - A function node to check.","     * @param {SourceCode} sourceCode - A SourceCode instance to get comments.","     * @returns {boolean} The function node is the default `this` binding.","     */","    isDefaultThisBinding(node, sourceCode) {","        if (isES5Constructor(node) || hasJSDocThisTag(node, sourceCode)) {","            return false;","        }","        const isAnonymous = node.id === null;","","        while (node) {","            const parent = node.parent;","","            switch (parent.type) {","","                /*","                 * Looks up the destination.","                 * e.g., obj.foo = nativeFoo || function foo() { ... };","                 */","                case \"LogicalExpression\":","                case \"ConditionalExpression\":","                    node = parent;","                    break;","","                // If the upper function is IIFE, checks the destination of the return value.","                // e.g.","                //   obj.foo = (function() {","                //     // setup...","                //     return function foo() { ... };","                //   })();","                case \"ReturnStatement\": {","                    const func = getUpperFunction(parent);","","                    if (func === null || !isCallee(func)) {","                        return true;","                    }","                    node = func.parent;","                    break;","                }","","                // e.g.","                //   var obj = { foo() { ... } };","                //   var obj = { foo: function() { ... } };","                //   class A { constructor() { ... } }","                //   class A { foo() { ... } }","                //   class A { get foo() { ... } }","                //   class A { set foo() { ... } }","                //   class A { static foo() { ... } }","                case \"Property\":","                case \"MethodDefinition\":","                    return parent.value !== node;","","                // e.g.","                //   obj.foo = function foo() { ... };","                //   Foo = function() { ... };","                //   [obj.foo = function foo() { ... }] = a;","                //   [Foo = function() { ... }] = a;","                case \"AssignmentExpression\":","                case \"AssignmentPattern\":","                    if (parent.right === node) {","                        if (parent.left.type === \"MemberExpression\") {","                            return false;","                        }","                        if (isAnonymous &&","                            parent.left.type === \"Identifier\" &&","                            startsWithUpperCase(parent.left.name)","                        ) {","                            return false;","                        }","                    }","                    return true;","","                // e.g.","                //   var Foo = function() { ... };","                case \"VariableDeclarator\":","                    return !(","                        isAnonymous &&","                        parent.init === node &&","                        parent.id.type === \"Identifier\" &&","                        startsWithUpperCase(parent.id.name)","                    );","","                // e.g.","                //   var foo = function foo() { ... }.bind(obj);","                //   (function foo() { ... }).call(obj);","                //   (function foo() { ... }).apply(obj, []);","                case \"MemberExpression\":","                    return (","                        parent.object !== node ||","                        parent.property.type !== \"Identifier\" ||","                        !bindOrCallOrApplyPattern.test(parent.property.name) ||","                        !isCallee(parent) ||","                        parent.parent.arguments.length === 0 ||","                        isNullOrUndefined(parent.parent.arguments[0])","                    );","","                // e.g.","                //   Reflect.apply(function() {}, obj, []);","                //   Array.from([], function() {}, obj);","                //   list.forEach(function() {}, obj);","                case \"CallExpression\":","                    if (isReflectApply(parent.callee)) {","                        return (","                            parent.arguments.length !== 3 ||","                            parent.arguments[0] !== node ||","                            isNullOrUndefined(parent.arguments[1])","                        );","                    }","                    if (isArrayFromMethod(parent.callee)) {","                        return (","                            parent.arguments.length !== 3 ||","                            parent.arguments[1] !== node ||","                            isNullOrUndefined(parent.arguments[2])","                        );","                    }","                    if (isMethodWhichHasThisArg(parent.callee)) {","                        return (","                            parent.arguments.length !== 2 ||","                            parent.arguments[0] !== node ||","                            isNullOrUndefined(parent.arguments[1])","                        );","                    }","                    return true;","","                // Otherwise `this` is default.","                default:","                    return true;","            }","        }","","        /* istanbul ignore next */","        return true;","    },","","    /**","     * Get the precedence level based on the node type","     * @param {ASTNode} node node to evaluate","     * @returns {int} precedence level","     * @private","     */","    getPrecedence(node) {","        switch (node.type) {","            case \"SequenceExpression\":","                return 0;","","            case \"AssignmentExpression\":","            case \"ArrowFunctionExpression\":","            case \"YieldExpression\":","                return 1;","","            case \"ConditionalExpression\":","                return 3;","","            case \"LogicalExpression\":","                switch (node.operator) {","                    case \"||\":","                        return 4;","                    case \"&&\":","                        return 5;","","                    // no default","                }","","                /* falls through */","","            case \"BinaryExpression\":","","                switch (node.operator) {","                    case \"|\":","                        return 6;","                    case \"^\":","                        return 7;","                    case \"&\":","                        return 8;","                    case \"==\":","                    case \"!=\":","                    case \"===\":","                    case \"!==\":","                        return 9;","                    case \"<\":","                    case \"<=\":","                    case \">\":","                    case \">=\":","                    case \"in\":","                    case \"instanceof\":","                        return 10;","                    case \"<<\":","                    case \">>\":","                    case \">>>\":","                        return 11;","                    case \"+\":","                    case \"-\":","                        return 12;","                    case \"*\":","                    case \"/\":","                    case \"%\":","                        return 13;","                    case \"**\":","                        return 15;","","                    // no default","                }","","                /* falls through */","","            case \"UnaryExpression\":","            case \"AwaitExpression\":","                return 16;","","            case \"UpdateExpression\":","                return 17;","","            case \"CallExpression\":","","                // IIFE is allowed to have parens in any position (#655)","                if (node.callee.type === \"FunctionExpression\") {","                    return -1;","                }","                return 18;","","            case \"NewExpression\":","                return 19;","","            // no default","        }","        return 20;","    },","","    /**","     * Checks whether the given node is an empty block node or not.","     *","     * @param {ASTNode|null} node - The node to check.","     * @returns {boolean} `true` if the node is an empty block.","     */","    isEmptyBlock(node) {","        return Boolean(node && node.type === \"BlockStatement\" && node.body.length === 0);","    },","","    /**","     * Checks whether the given node is an empty function node or not.","     *","     * @param {ASTNode|null} node - The node to check.","     * @returns {boolean} `true` if the node is an empty function.","     */","    isEmptyFunction(node) {","        return isFunction(node) && module.exports.isEmptyBlock(node.body);","    },","","    /**","     * Gets the property name of a given node.","     * The node can be a MemberExpression, a Property, or a MethodDefinition.","     *","     * If the name is dynamic, this returns `null`.","     *","     * For examples:","     *","     *     a.b           // => \"b\"","     *     a[\"b\"]        // => \"b\"","     *     a['b']        // => \"b\"","     *     a[`b`]        // => \"b\"","     *     a[100]        // => \"100\"","     *     a[b]          // => null","     *     a[\"a\" + \"b\"]  // => null","     *     a[tag`b`]     // => null","     *     a[`${b}`]     // => null","     *","     *     let a = {b: 1}            // => \"b\"","     *     let a = {[\"b\"]: 1}        // => \"b\"","     *     let a = {['b']: 1}        // => \"b\"","     *     let a = {[`b`]: 1}        // => \"b\"","     *     let a = {[100]: 1}        // => \"100\"","     *     let a = {[b]: 1}          // => null","     *     let a = {[\"a\" + \"b\"]: 1}  // => null","     *     let a = {[tag`b`]: 1}     // => null","     *     let a = {[`${b}`]: 1}     // => null","     *","     * @param {ASTNode} node - The node to get.","     * @returns {string|null} The property name if static. Otherwise, null.","     */","    getStaticPropertyName(node) {","        let prop;","","        switch (node && node.type) {","            case \"Property\":","            case \"MethodDefinition\":","                prop = node.key;","                break;","","            case \"MemberExpression\":","                prop = node.property;","                break;","","            // no default","        }","","        switch (prop && prop.type) {","            case \"Literal\":","                return String(prop.value);","","            case \"TemplateLiteral\":","                if (prop.expressions.length === 0 && prop.quasis.length === 1) {","                    return prop.quasis[0].value.cooked;","                }","                break;","","            case \"Identifier\":","                if (!node.computed) {","                    return prop.name;","                }","                break;","","            // no default","        }","","        return null;","    },","","    /**","     * Get directives from directive prologue of a Program or Function node.","     * @param {ASTNode} node - The node to check.","     * @returns {ASTNode[]} The directives found in the directive prologue.","     */","    getDirectivePrologue(node) {","        const directives = [];","","        // Directive prologues only occur at the top of files or functions.","        if (","            node.type === \"Program\" ||","            node.type === \"FunctionDeclaration\" ||","            node.type === \"FunctionExpression\" ||","","            // Do not check arrow functions with implicit return.","            // `() => \"use strict\";` returns the string `\"use strict\"`.","            (node.type === \"ArrowFunctionExpression\" && node.body.type === \"BlockStatement\")","        ) {","            const statements = node.type === \"Program\" ? node.body : node.body.body;","","            for (const statement of statements) {","                if (","                    statement.type === \"ExpressionStatement\" &&","                    statement.expression.type === \"Literal\"","                ) {","                    directives.push(statement);","                } else {","                    break;","                }","            }","        }","","        return directives;","    },","","","    /**","     * Determines whether this node is a decimal integer literal. If a node is a decimal integer literal, a dot added","     after the node will be parsed as a decimal point, rather than a property-access dot.","     * @param {ASTNode} node - The node to check.","     * @returns {boolean} `true` if this node is a decimal integer.","     * @example","     *","     * 5       // true","     * 5.      // false","     * 5.0     // false","     * 05      // false","     * 0x5     // false","     * 0b101   // false","     * 0o5     // false","     * 5e0     // false","     * '5'     // false","     */","    isDecimalInteger(node) {","        return node.type === \"Literal\" && typeof node.value === \"number\" && /^(0|[1-9]\\d*)$/.test(node.raw);","    },","","    /**","     * Gets the name and kind of the given function node.","     *","     * - `function foo() {}`  .................... `function 'foo'`","     * - `(function foo() {})`  .................. `function 'foo'`","     * - `(function() {})`  ...................... `function`","     * - `function* foo() {}`  ................... `generator function 'foo'`","     * - `(function* foo() {})`  ................. `generator function 'foo'`","     * - `(function*() {})`  ..................... `generator function`","     * - `() => {}`  ............................. `arrow function`","     * - `async () => {}`  ....................... `async arrow function`","     * - `({ foo: function foo() {} })`  ......... `method 'foo'`","     * - `({ foo: function() {} })`  ............. `method 'foo'`","     * - `({ ['foo']: function() {} })`  ......... `method 'foo'`","     * - `({ [foo]: function() {} })`  ........... `method`","     * - `({ foo() {} })`  ....................... `method 'foo'`","     * - `({ foo: function* foo() {} })`  ........ `generator method 'foo'`","     * - `({ foo: function*() {} })`  ............ `generator method 'foo'`","     * - `({ ['foo']: function*() {} })`  ........ `generator method 'foo'`","     * - `({ [foo]: function*() {} })`  .......... `generator method`","     * - `({ *foo() {} })`  ...................... `generator method 'foo'`","     * - `({ foo: async function foo() {} })`  ... `async method 'foo'`","     * - `({ foo: async function() {} })`  ....... `async method 'foo'`","     * - `({ ['foo']: async function() {} })`  ... `async method 'foo'`","     * - `({ [foo]: async function() {} })`  ..... `async method`","     * - `({ async foo() {} })`  ................. `async method 'foo'`","     * - `({ get foo() {} })`  ................... `getter 'foo'`","     * - `({ set foo(a) {} })`  .................. `setter 'foo'`","     * - `class A { constructor() {} }`  ......... `constructor`","     * - `class A { foo() {} }`  ................. `method 'foo'`","     * - `class A { *foo() {} }`  ................ `generator method 'foo'`","     * - `class A { async foo() {} }`  ........... `async method 'foo'`","     * - `class A { ['foo']() {} }`  ............. `method 'foo'`","     * - `class A { *['foo']() {} }`  ............ `generator method 'foo'`","     * - `class A { async ['foo']() {} }`  ....... `async method 'foo'`","     * - `class A { [foo]() {} }`  ............... `method`","     * - `class A { *[foo]() {} }`  .............. `generator method`","     * - `class A { async [foo]() {} }`  ......... `async method`","     * - `class A { get foo() {} }`  ............. `getter 'foo'`","     * - `class A { set foo(a) {} }`  ............ `setter 'foo'`","     * - `class A { static foo() {} }`  .......... `static method 'foo'`","     * - `class A { static *foo() {} }`  ......... `static generator method 'foo'`","     * - `class A { static async foo() {} }`  .... `static async method 'foo'`","     * - `class A { static get foo() {} }`  ...... `static getter 'foo'`","     * - `class A { static set foo(a) {} }`  ..... `static setter 'foo'`","     *","     * @param {ASTNode} node - The function node to get.","     * @returns {string} The name and kind of the function node.","     */","    getFunctionNameWithKind(node) {","        const parent = node.parent;","        const tokens = [];","","        if (parent.type === \"MethodDefinition\" && parent.static) {","            tokens.push(\"static\");","        }","        if (node.async) {","            tokens.push(\"async\");","        }","        if (node.generator) {","            tokens.push(\"generator\");","        }","","        if (node.type === \"ArrowFunctionExpression\") {","            tokens.push(\"arrow\", \"function\");","        } else if (parent.type === \"Property\" || parent.type === \"MethodDefinition\") {","            if (parent.kind === \"constructor\") {","                return \"constructor\";","            } else if (parent.kind === \"get\") {","                tokens.push(\"getter\");","            } else if (parent.kind === \"set\") {","                tokens.push(\"setter\");","            } else {","                tokens.push(\"method\");","            }","        } else {","            tokens.push(\"function\");","        }","","        if (node.id) {","            tokens.push(`'${node.id.name}'`);","        } else {","            const name = module.exports.getStaticPropertyName(parent);","","            if (name) {","                tokens.push(`'${name}'`);","            }","        }","","        return tokens.join(\" \");","    },","","    /**","     * Gets the location of the given function node for reporting.","     *","     * - `function foo() {}`","     *    ^^^^^^^^^^^^","     * - `(function foo() {})`","     *     ^^^^^^^^^^^^","     * - `(function() {})`","     *     ^^^^^^^^","     * - `function* foo() {}`","     *    ^^^^^^^^^^^^^","     * - `(function* foo() {})`","     *     ^^^^^^^^^^^^^","     * - `(function*() {})`","     *     ^^^^^^^^^","     * - `() => {}`","     *       ^^","     * - `async () => {}`","     *             ^^","     * - `({ foo: function foo() {} })`","     *       ^^^^^^^^^^^^^^^^^","     * - `({ foo: function() {} })`","     *       ^^^^^^^^^^^^^","     * - `({ ['foo']: function() {} })`","     *       ^^^^^^^^^^^^^^^^^","     * - `({ [foo]: function() {} })`","     *       ^^^^^^^^^^^^^^^","     * - `({ foo() {} })`","     *       ^^^","     * - `({ foo: function* foo() {} })`","     *       ^^^^^^^^^^^^^^^^^^","     * - `({ foo: function*() {} })`","     *       ^^^^^^^^^^^^^^","     * - `({ ['foo']: function*() {} })`","     *       ^^^^^^^^^^^^^^^^^^","     * - `({ [foo]: function*() {} })`","     *       ^^^^^^^^^^^^^^^^","     * - `({ *foo() {} })`","     *       ^^^^","     * - `({ foo: async function foo() {} })`","     *       ^^^^^^^^^^^^^^^^^^^^^^^","     * - `({ foo: async function() {} })`","     *       ^^^^^^^^^^^^^^^^^^^","     * - `({ ['foo']: async function() {} })`","     *       ^^^^^^^^^^^^^^^^^^^^^^^","     * - `({ [foo]: async function() {} })`","     *       ^^^^^^^^^^^^^^^^^^^^^","     * - `({ async foo() {} })`","     *       ^^^^^^^^^","     * - `({ get foo() {} })`","     *       ^^^^^^^","     * - `({ set foo(a) {} })`","     *       ^^^^^^^","     * - `class A { constructor() {} }`","     *              ^^^^^^^^^^^","     * - `class A { foo() {} }`","     *              ^^^","     * - `class A { *foo() {} }`","     *              ^^^^","     * - `class A { async foo() {} }`","     *              ^^^^^^^^^","     * - `class A { ['foo']() {} }`","     *              ^^^^^^^","     * - `class A { *['foo']() {} }`","     *              ^^^^^^^^","     * - `class A { async ['foo']() {} }`","     *              ^^^^^^^^^^^^^","     * - `class A { [foo]() {} }`","     *              ^^^^^","     * - `class A { *[foo]() {} }`","     *              ^^^^^^","     * - `class A { async [foo]() {} }`","     *              ^^^^^^^^^^^","     * - `class A { get foo() {} }`","     *              ^^^^^^^","     * - `class A { set foo(a) {} }`","     *              ^^^^^^^","     * - `class A { static foo() {} }`","     *              ^^^^^^^^^^","     * - `class A { static *foo() {} }`","     *              ^^^^^^^^^^^","     * - `class A { static async foo() {} }`","     *              ^^^^^^^^^^^^^^^^","     * - `class A { static get foo() {} }`","     *              ^^^^^^^^^^^^^^","     * - `class A { static set foo(a) {} }`","     *              ^^^^^^^^^^^^^^","     *","     * @param {ASTNode} node - The function node to get.","     * @param {SourceCode} sourceCode - The source code object to get tokens.","     * @returns {string} The location of the function node for reporting.","     */","    getFunctionHeadLoc(node, sourceCode) {","        const parent = node.parent;","        let start = null;","        let end = null;","","        if (node.type === \"ArrowFunctionExpression\") {","            const arrowToken = sourceCode.getTokenBefore(node.body, isArrowToken);","","            start = arrowToken.loc.start;","            end = arrowToken.loc.end;","        } else if (parent.type === \"Property\" || parent.type === \"MethodDefinition\") {","            start = parent.loc.start;","            end = getOpeningParenOfParams(node, sourceCode).loc.start;","        } else {","            start = node.loc.start;","            end = getOpeningParenOfParams(node, sourceCode).loc.start;","        }","","        return {","            start: Object.assign({}, start),","            end: Object.assign({}, end)","        };","    },","","    /**","    * Gets the parenthesized text of a node. This is similar to sourceCode.getText(node), but it also includes any parentheses","    * surrounding the node.","    * @param {SourceCode} sourceCode The source code object","    * @param {ASTNode} node An expression node","    * @returns {string} The text representing the node, with all surrounding parentheses included","    */","    getParenthesisedText(sourceCode, node) {","        let leftToken = sourceCode.getFirstToken(node);","        let rightToken = sourceCode.getLastToken(node);","","        while (","            sourceCode.getTokenBefore(leftToken) &&","            sourceCode.getTokenBefore(leftToken).type === \"Punctuator\" &&","            sourceCode.getTokenBefore(leftToken).value === \"(\" &&","            sourceCode.getTokenAfter(rightToken) &&","            sourceCode.getTokenAfter(rightToken).type === \"Punctuator\" &&","            sourceCode.getTokenAfter(rightToken).value === \")\"","        ) {","            leftToken = sourceCode.getTokenBefore(leftToken);","            rightToken = sourceCode.getTokenAfter(rightToken);","        }","","        return sourceCode.getText().slice(leftToken.range[0], rightToken.range[1]);","    },","","    /*","     * Determine if a node has a possiblity to be an Error object","     * @param  {ASTNode} node  ASTNode to check","     * @returns {boolean} True if there is a chance it contains an Error obj","     */","    couldBeError(node) {","        switch (node.type) {","            case \"Identifier\":","            case \"CallExpression\":","            case \"NewExpression\":","            case \"MemberExpression\":","            case \"TaggedTemplateExpression\":","            case \"YieldExpression\":","            case \"AwaitExpression\":","                return true; // possibly an error object.","","            case \"AssignmentExpression\":","                return module.exports.couldBeError(node.right);","","            case \"SequenceExpression\": {","                const exprs = node.expressions;","","                return exprs.length !== 0 && module.exports.couldBeError(exprs[exprs.length - 1]);","            }","","            case \"LogicalExpression\":","                return module.exports.couldBeError(node.left) || module.exports.couldBeError(node.right);","","            case \"ConditionalExpression\":","                return module.exports.couldBeError(node.consequent) || module.exports.couldBeError(node.alternate);","","            default:","                return false;","        }","    },","","    /**","     * Determines whether the given node is a `null` literal.","     * @param {ASTNode} node The node to check","     * @returns {boolean} `true` if the node is a `null` literal","     */","    isNullLiteral(node) {","","        /*","         * Checking `node.value === null` does not guarantee that a literal is a null literal.","         * When parsing values that cannot be represented in the current environment (e.g. unicode","         * regexes in Node 4), `node.value` is set to `null` because it wouldn't be possible to","         * set `node.value` to a unicode regex. To make sure a literal is actually `null`, check","         * `node.regex` instead. Also see: https://github.com/eslint/eslint/issues/8020","         */","        return node.type === \"Literal\" && node.value === null && !node.regex;","    }","};",""],"l":{"12":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"27":1,"28":1,"29":1,"32":1,"42":1,"43":0,"50":0,"53":0,"66":1,"67":0,"75":1,"76":0,"84":1,"85":0,"86":0,"87":0,"89":0,"91":0,"105":1,"106":0,"122":1,"123":0,"132":1,"133":0,"134":0,"135":0,"138":0,"141":0,"150":1,"151":0,"163":1,"164":0,"172":1,"173":0,"188":1,"189":0,"204":1,"205":0,"206":0,"207":0,"209":0,"210":0,"211":0,"214":0,"217":0,"225":1,"226":9,"235":1,"236":0,"238":0,"239":0,"246":0,"256":1,"257":0,"260":0,"271":1,"272":0,"281":1,"282":0,"291":1,"292":0,"301":1,"302":0,"311":1,"312":0,"321":1,"322":0,"331":1,"332":0,"341":1,"342":0,"351":1,"352":0,"361":1,"362":0,"371":1,"372":0,"381":1,"382":0,"392":1,"393":0,"403":1,"404":1,"411":1,"425":0,"467":0,"488":0,"498":0,"499":0,"501":0,"511":0,"522":0,"531":0,"533":0,"564":0,"566":0,"567":0,"569":0,"570":0,"573":0,"576":0,"601":0,"602":0,"604":0,"606":0,"607":0,"609":0,"617":0,"618":0,"627":0,"629":0,"630":0,"632":0,"633":0,"646":0,"655":0,"656":0,"657":0,"659":0,"663":0,"666":0,"671":0,"683":0,"697":0,"698":0,"704":0,"705":0,"711":0,"712":0,"718":0,"722":0,"727":1,"737":0,"739":0,"744":0,"747":0,"750":0,"752":0,"754":0,"763":0,"765":0,"767":0,"769":0,"774":0,"781":0,"785":0,"788":0,"792":0,"794":0,"803":0,"806":0,"811":0,"812":0,"814":0,"817":0,"821":0,"831":0,"841":0,"876":0,"878":0,"881":0,"882":0,"885":0,"886":0,"891":0,"893":0,"896":0,"897":0,"899":0,"902":0,"903":0,"905":0,"910":0,"919":0,"922":0,"931":0,"933":0,"934":0,"938":0,"940":0,"945":0,"967":0,"1020":0,"1021":0,"1023":0,"1024":0,"1026":0,"1027":0,"1029":0,"1030":0,"1033":0,"1034":0,"1035":0,"1036":0,"1037":0,"1038":0,"1039":0,"1040":0,"1041":0,"1043":0,"1046":0,"1049":0,"1050":0,"1052":0,"1054":0,"1055":0,"1059":0,"1155":0,"1156":0,"1157":0,"1159":0,"1160":0,"1162":0,"1163":0,"1164":0,"1165":0,"1166":0,"1168":0,"1169":0,"1172":0,"1186":0,"1187":0,"1189":0,"1197":0,"1198":0,"1201":0,"1210":0,"1218":0,"1221":0,"1224":0,"1226":0,"1230":0,"1233":0,"1236":0,"1254":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-ops.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-ops.js","s":{"1":1,"2":1,"3":1,"4":3,"5":3,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":37,"loc":{"start":{"line":37,"column":21},"end":{"line":37,"column":24}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":27},"end":{"line":52,"column":33}}},"3":{"name":"(anonymous_3)","line":85,"loc":{"start":{"line":85,"column":21},"end":{"line":85,"column":30}}},"4":{"name":"deepmerge","line":102,"loc":{"start":{"line":102,"column":11},"end":{"line":102,"column":60}}},"5":{"name":"(anonymous_5)","line":197,"loc":{"start":{"line":197,"column":13},"end":{"line":197,"column":22}}},"6":{"name":"(anonymous_6)","line":219,"loc":{"start":{"line":219,"column":22},"end":{"line":219,"column":31}}},"7":{"name":"(anonymous_7)","line":239,"loc":{"start":{"line":239,"column":19},"end":{"line":239,"column":32}}},"8":{"name":"(anonymous_8)","line":255,"loc":{"start":{"line":255,"column":19},"end":{"line":255,"column":32}}},"9":{"name":"(anonymous_9)","line":269,"loc":{"start":{"line":269,"column":24},"end":{"line":269,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":47}},"2":{"start":{"line":14,"column":0},"end":{"line":14,"column":52}},"3":{"start":{"line":20,"column":0},"end":{"line":25,"column":57}},"4":{"start":{"line":22,"column":8},"end":{"line":22,"column":27}},"5":{"start":{"line":23,"column":8},"end":{"line":23,"column":19}},"6":{"start":{"line":31,"column":0},"end":{"line":272,"column":2}},"7":{"start":{"line":38,"column":8},"end":{"line":43,"column":10}},"8":{"start":{"line":54,"column":8},"end":{"line":54,"column":51}},"9":{"start":{"line":56,"column":8},"end":{"line":74,"column":9}},"10":{"start":{"line":58,"column":12},"end":{"line":58,"column":32}},"11":{"start":{"line":60,"column":12},"end":{"line":73,"column":15}},"12":{"start":{"line":60,"column":44},"end":{"line":60,"column":53}},"13":{"start":{"line":61,"column":16},"end":{"line":61,"column":59}},"14":{"start":{"line":63,"column":16},"end":{"line":72,"column":17}},"15":{"start":{"line":64,"column":20},"end":{"line":64,"column":69}},"16":{"start":{"line":65,"column":20},"end":{"line":67,"column":21}},"17":{"start":{"line":66,"column":24},"end":{"line":66,"column":78}},"18":{"start":{"line":69,"column":20},"end":{"line":71,"column":21}},"19":{"start":{"line":70,"column":24},"end":{"line":70,"column":90}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":25}},"21":{"start":{"line":86,"column":8},"end":{"line":89,"column":9}},"22":{"start":{"line":87,"column":12},"end":{"line":87,"column":58}},"23":{"start":{"line":88,"column":12},"end":{"line":88,"column":80}},"24":{"start":{"line":91,"column":8},"end":{"line":91,"column":22}},"25":{"start":{"line":133,"column":8},"end":{"line":133,"column":66}},"26":{"start":{"line":134,"column":8},"end":{"line":134,"column":36}},"27":{"start":{"line":136,"column":8},"end":{"line":136,"column":28}},"28":{"start":{"line":137,"column":8},"end":{"line":137,"column":26}},"29":{"start":{"line":138,"column":8},"end":{"line":185,"column":9}},"30":{"start":{"line":139,"column":12},"end":{"line":139,"column":34}},"31":{"start":{"line":142,"column":12},"end":{"line":146,"column":13}},"32":{"start":{"line":143,"column":16},"end":{"line":143,"column":38}},"33":{"start":{"line":145,"column":16},"end":{"line":145,"column":41}},"34":{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},"35":{"start":{"line":148,"column":16},"end":{"line":148,"column":28}},"36":{"start":{"line":150,"column":12},"end":{"line":169,"column":15}},"37":{"start":{"line":151,"column":16},"end":{"line":151,"column":27}},"38":{"start":{"line":152,"column":16},"end":{"line":168,"column":17}},"39":{"start":{"line":153,"column":20},"end":{"line":153,"column":31}},"40":{"start":{"line":154,"column":23},"end":{"line":168,"column":17}},"41":{"start":{"line":155,"column":20},"end":{"line":159,"column":21}},"42":{"start":{"line":156,"column":24},"end":{"line":156,"column":35}},"43":{"start":{"line":158,"column":24},"end":{"line":158,"column":74}},"44":{"start":{"line":161,"column":20},"end":{"line":167,"column":21}},"45":{"start":{"line":162,"column":24},"end":{"line":162,"column":35}},"46":{"start":{"line":164,"column":24},"end":{"line":166,"column":25}},"47":{"start":{"line":165,"column":28},"end":{"line":165,"column":40}},"48":{"start":{"line":171,"column":12},"end":{"line":175,"column":13}},"49":{"start":{"line":172,"column":16},"end":{"line":174,"column":19}},"50":{"start":{"line":173,"column":20},"end":{"line":173,"column":43}},"51":{"start":{"line":176,"column":12},"end":{"line":184,"column":15}},"52":{"start":{"line":177,"column":16},"end":{"line":183,"column":17}},"53":{"start":{"line":178,"column":20},"end":{"line":178,"column":91}},"54":{"start":{"line":179,"column":23},"end":{"line":183,"column":17}},"55":{"start":{"line":180,"column":20},"end":{"line":180,"column":40}},"56":{"start":{"line":182,"column":20},"end":{"line":182,"column":96}},"57":{"start":{"line":187,"column":8},"end":{"line":187,"column":19}},"58":{"start":{"line":199,"column":8},"end":{"line":209,"column":9}},"59":{"start":{"line":200,"column":12},"end":{"line":208,"column":15}},"60":{"start":{"line":201,"column":16},"end":{"line":201,"column":56}},"61":{"start":{"line":203,"column":16},"end":{"line":207,"column":17}},"62":{"start":{"line":204,"column":20},"end":{"line":204,"column":88}},"63":{"start":{"line":205,"column":23},"end":{"line":207,"column":17}},"64":{"start":{"line":206,"column":20},"end":{"line":206,"column":84}},"65":{"start":{"line":221,"column":8},"end":{"line":231,"column":9}},"66":{"start":{"line":222,"column":12},"end":{"line":230,"column":15}},"67":{"start":{"line":223,"column":16},"end":{"line":223,"column":56}},"68":{"start":{"line":225,"column":16},"end":{"line":229,"column":17}},"69":{"start":{"line":226,"column":20},"end":{"line":226,"column":105}},"70":{"start":{"line":227,"column":23},"end":{"line":229,"column":17}},"71":{"start":{"line":228,"column":20},"end":{"line":228,"column":101}},"72":{"start":{"line":241,"column":8},"end":{"line":241,"column":78}},"73":{"start":{"line":243,"column":8},"end":{"line":245,"column":9}},"74":{"start":{"line":244,"column":12},"end":{"line":244,"column":66}},"75":{"start":{"line":247,"column":8},"end":{"line":247,"column":64}},"76":{"start":{"line":256,"column":8},"end":{"line":256,"column":78}},"77":{"start":{"line":258,"column":8},"end":{"line":260,"column":9}},"78":{"start":{"line":259,"column":12},"end":{"line":259,"column":46}},"79":{"start":{"line":261,"column":8},"end":{"line":261,"column":57}},"80":{"start":{"line":270,"column":8},"end":{"line":270,"column":89}},"81":{"start":{"line":270,"column":51},"end":{"line":270,"column":87}}},"branchMap":{"1":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]},"2":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":63,"column":16}},{"start":{"line":63,"column":16},"end":{"line":63,"column":16}}]},"3":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":20},"end":{"line":65,"column":20}},{"start":{"line":65,"column":20},"end":{"line":65,"column":20}}]},"4":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":20},"end":{"line":69,"column":20}},{"start":{"line":69,"column":20},"end":{"line":69,"column":20}}]},"5":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"6":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":12},"end":{"line":86,"column":22}},{"start":{"line":86,"column":26},"end":{"line":86,"column":56}}]},"7":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":22},"end":{"line":133,"column":40}},{"start":{"line":133,"column":44},"end":{"line":133,"column":65}}]},"8":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":18},"end":{"line":134,"column":23}},{"start":{"line":134,"column":27},"end":{"line":134,"column":29}},{"start":{"line":134,"column":33},"end":{"line":134,"column":35}}]},"9":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":8},"end":{"line":138,"column":8}},{"start":{"line":138,"column":8},"end":{"line":138,"column":8}}]},"10":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":21},"end":{"line":139,"column":27}},{"start":{"line":139,"column":31},"end":{"line":139,"column":33}}]},"11":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":142,"column":12}},{"start":{"line":142,"column":12},"end":{"line":142,"column":12}}]},"12":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":16},"end":{"line":142,"column":22}},{"start":{"line":142,"column":26},"end":{"line":142,"column":44}},{"start":{"line":142,"column":48},"end":{"line":142,"column":62}}]},"13":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":12},"end":{"line":147,"column":12}},{"start":{"line":147,"column":12},"end":{"line":147,"column":12}}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":16},"end":{"line":147,"column":39}},{"start":{"line":147,"column":43},"end":{"line":147,"column":62}}]},"15":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":16},"end":{"line":152,"column":16}},{"start":{"line":152,"column":16},"end":{"line":152,"column":16}}]},"16":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":23},"end":{"line":154,"column":23}},{"start":{"line":154,"column":23},"end":{"line":154,"column":23}}]},"17":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":20},"end":{"line":155,"column":20}},{"start":{"line":155,"column":20},"end":{"line":155,"column":20}}]},"18":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":20},"end":{"line":161,"column":20}},{"start":{"line":161,"column":20},"end":{"line":161,"column":20}}]},"19":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":24},"end":{"line":164,"column":24}},{"start":{"line":164,"column":24},"end":{"line":164,"column":24}}]},"20":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":12},"end":{"line":171,"column":12}},{"start":{"line":171,"column":12},"end":{"line":171,"column":12}}]},"21":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":16},"end":{"line":171,"column":22}},{"start":{"line":171,"column":26},"end":{"line":171,"column":52}}]},"22":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":16},"end":{"line":177,"column":16}},{"start":{"line":177,"column":16},"end":{"line":177,"column":16}}]},"23":{"line":177,"type":"binary-expr","locations":[{"start":{"line":177,"column":20},"end":{"line":177,"column":43}},{"start":{"line":177,"column":47},"end":{"line":177,"column":73}}]},"24":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":23},"end":{"line":179,"column":23}},{"start":{"line":179,"column":23},"end":{"line":179,"column":23}}]},"25":{"line":179,"type":"binary-expr","locations":[{"start":{"line":179,"column":27},"end":{"line":179,"column":55}},{"start":{"line":179,"column":59},"end":{"line":179,"column":68}},{"start":{"line":179,"column":72},"end":{"line":179,"column":90}},{"start":{"line":179,"column":94},"end":{"line":179,"column":114}}]},"26":{"line":182,"type":"binary-expr","locations":[{"start":{"line":182,"column":41},"end":{"line":182,"column":52}},{"start":{"line":182,"column":56},"end":{"line":182,"column":58}}]},"27":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":8},"end":{"line":199,"column":8}},{"start":{"line":199,"column":8},"end":{"line":199,"column":8}}]},"28":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":16},"end":{"line":203,"column":16}},{"start":{"line":203,"column":16},"end":{"line":203,"column":16}}]},"29":{"line":204,"type":"binary-expr","locations":[{"start":{"line":204,"column":43},"end":{"line":204,"column":82}},{"start":{"line":204,"column":86},"end":{"line":204,"column":87}}]},"30":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":23},"end":{"line":205,"column":23}},{"start":{"line":205,"column":23},"end":{"line":205,"column":23}}]},"31":{"line":205,"type":"binary-expr","locations":[{"start":{"line":205,"column":27},"end":{"line":205,"column":52}},{"start":{"line":205,"column":56},"end":{"line":205,"column":89}}]},"32":{"line":206,"type":"binary-expr","locations":[{"start":{"line":206,"column":36},"end":{"line":206,"column":78}},{"start":{"line":206,"column":82},"end":{"line":206,"column":83}}]},"33":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":8},"end":{"line":221,"column":8}},{"start":{"line":221,"column":8},"end":{"line":221,"column":8}}]},"34":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":16},"end":{"line":225,"column":16}},{"start":{"line":225,"column":16},"end":{"line":225,"column":16}}]},"35":{"line":226,"type":"binary-expr","locations":[{"start":{"line":226,"column":43},"end":{"line":226,"column":76}},{"start":{"line":226,"column":80},"end":{"line":226,"column":104}}]},"36":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":23},"end":{"line":227,"column":23}},{"start":{"line":227,"column":23},"end":{"line":227,"column":23}}]},"37":{"line":227,"type":"binary-expr","locations":[{"start":{"line":227,"column":27},"end":{"line":227,"column":52}},{"start":{"line":227,"column":56},"end":{"line":227,"column":89}}]},"38":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":36},"end":{"line":228,"column":72}},{"start":{"line":228,"column":76},"end":{"line":228,"column":100}}]},"39":{"line":241,"type":"cond-expr","locations":[{"start":{"line":241,"column":51},"end":{"line":241,"column":64}},{"start":{"line":241,"column":67},"end":{"line":241,"column":77}}]},"40":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":8},"end":{"line":243,"column":8}},{"start":{"line":243,"column":8},"end":{"line":243,"column":8}}]},"41":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":23},"end":{"line":244,"column":60}},{"start":{"line":244,"column":64},"end":{"line":244,"column":65}}]},"42":{"line":247,"type":"binary-expr","locations":[{"start":{"line":247,"column":16},"end":{"line":247,"column":44}},{"start":{"line":247,"column":48},"end":{"line":247,"column":62}}]},"43":{"line":256,"type":"cond-expr","locations":[{"start":{"line":256,"column":51},"end":{"line":256,"column":64}},{"start":{"line":256,"column":67},"end":{"line":256,"column":77}}]},"44":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8}},{"start":{"line":258,"column":8},"end":{"line":258,"column":8}}]}},"code":["/**"," * @fileoverview Config file operations. This file must be usable in the browser,"," * so no Node-specific code can be here."," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Environments = require(\"./environments\");","","const debug = require(\"debug\")(\"eslint:config-ops\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","const RULE_SEVERITY_STRINGS = [\"off\", \"warn\", \"error\"],","    RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {","        map[value] = index;","        return map;","    }, {}),","    VALID_SEVERITIES = [0, 1, 2, \"off\", \"warn\", \"error\"];","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    /**","     * Creates an empty configuration object suitable for merging as a base.","     * @returns {Object} A configuration object.","     */","    createEmptyConfig() {","        return {","            globals: {},","            env: {},","            rules: {},","            parserOptions: {}","        };","    },","","    /**","     * Creates an environment config based on the specified environments.","     * @param {Object<string,boolean>} env The environment settings.","     * @returns {Object} A configuration object with the appropriate rules and globals","     *      set.","     */","    createEnvironmentConfig(env) {","","        const envConfig = this.createEmptyConfig();","","        if (env) {","","            envConfig.env = env;","","            Object.keys(env).filter(name => env[name]).forEach(name => {","                const environment = Environments.get(name);","","                if (environment) {","                    debug(`Creating config for environment ${name}`);","                    if (environment.globals) {","                        Object.assign(envConfig.globals, environment.globals);","                    }","","                    if (environment.parserOptions) {","                        Object.assign(envConfig.parserOptions, environment.parserOptions);","                    }","                }","            });","        }","","        return envConfig;","    },","","    /**","     * Given a config with environment settings, applies the globals and","     * ecmaFeatures to the configuration and returns the result.","     * @param {Object} config The configuration information.","     * @returns {Object} The updated configuration information.","     */","    applyEnvironments(config) {","        if (config.env && typeof config.env === \"object\") {","            debug(\"Apply environment settings to config\");","            return this.merge(this.createEnvironmentConfig(config.env), config);","        }","","        return config;","    },","","    /**","     * Merges two config objects. This will not only add missing keys, but will also modify values to match.","     * @param {Object} target config object","     * @param {Object} src config object. Overrides in this config object will take priority over base.","     * @param {boolean} [combine] Whether to combine arrays or not","     * @param {boolean} [isRule] Whether its a rule","     * @returns {Object} merged config object.","     */","    merge: function deepmerge(target, src, combine, isRule) {","","        /*","         The MIT License (MIT)","","         Copyright (c) 2012 Nicholas Fisher","","         Permission is hereby granted, free of charge, to any person obtaining a copy","         of this software and associated documentation files (the \"Software\"), to deal","         in the Software without restriction, including without limitation the rights","         to use, copy, modify, merge, publish, distribute, sublicense, and/or sell","         copies of the Software, and to permit persons to whom the Software is","         furnished to do so, subject to the following conditions:","","         The above copyright notice and this permission notice shall be included in","         all copies or substantial portions of the Software.","","         THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR","         IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,","         FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE","         AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER","         LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,","         OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN","         THE SOFTWARE.","         */","","        /*","         * This code is taken from deepmerge repo","         * (https://github.com/KyleAMathews/deepmerge)","         * and modified to meet our needs.","         */","        const array = Array.isArray(src) || Array.isArray(target);","        let dst = array && [] || {};","","        combine = !!combine;","        isRule = !!isRule;","        if (array) {","            target = target || [];","","            // src could be a string, so check for array","            if (isRule && Array.isArray(src) && src.length > 1) {","                dst = dst.concat(src);","            } else {","                dst = dst.concat(target);","            }","            if (typeof src !== \"object\" && !Array.isArray(src)) {","                src = [src];","            }","            Object.keys(src).forEach((e, i) => {","                e = src[i];","                if (typeof dst[i] === \"undefined\") {","                    dst[i] = e;","                } else if (typeof e === \"object\") {","                    if (isRule) {","                        dst[i] = e;","                    } else {","                        dst[i] = deepmerge(target[i], e, combine, isRule);","                    }","                } else {","                    if (!combine) {","                        dst[i] = e;","                    } else {","                        if (dst.indexOf(e) === -1) {","                            dst.push(e);","                        }","                    }","                }","            });","        } else {","            if (target && typeof target === \"object\") {","                Object.keys(target).forEach(key => {","                    dst[key] = target[key];","                });","            }","            Object.keys(src).forEach(key => {","                if (Array.isArray(src[key]) || Array.isArray(target[key])) {","                    dst[key] = deepmerge(target[key], src[key], key === \"plugins\", isRule);","                } else if (typeof src[key] !== \"object\" || !src[key] || key === \"exported\" || key === \"astGlobals\") {","                    dst[key] = src[key];","                } else {","                    dst[key] = deepmerge(target[key] || {}, src[key], combine, key === \"rules\");","                }","            });","        }","","        return dst;","    },","","    /**","     * Converts new-style severity settings (off, warn, error) into old-style","     * severity settings (0, 1, 2) for all rules. Assumption is that severity","     * values have already been validated as correct.","     * @param {Object} config The config object to normalize.","     * @returns {void}","     */","    normalize(config) {","","        if (config.rules) {","            Object.keys(config.rules).forEach(ruleId => {","                const ruleConfig = config.rules[ruleId];","","                if (typeof ruleConfig === \"string\") {","                    config.rules[ruleId] = RULE_SEVERITY[ruleConfig.toLowerCase()] || 0;","                } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"string\") {","                    ruleConfig[0] = RULE_SEVERITY[ruleConfig[0].toLowerCase()] || 0;","                }","            });","        }","    },","","    /**","     * Converts old-style severity settings (0, 1, 2) into new-style","     * severity settings (off, warn, error) for all rules. Assumption is that severity","     * values have already been validated as correct.","     * @param {Object} config The config object to normalize.","     * @returns {void}","     */","    normalizeToStrings(config) {","","        if (config.rules) {","            Object.keys(config.rules).forEach(ruleId => {","                const ruleConfig = config.rules[ruleId];","","                if (typeof ruleConfig === \"number\") {","                    config.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];","                } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"number\") {","                    ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];","                }","            });","        }","    },","","    /**","     * Determines if the severity for the given rule configuration represents an error.","     * @param {int|string|Array} ruleConfig The configuration for an individual rule.","     * @returns {boolean} True if the rule represents an error, false if not.","     */","    isErrorSeverity(ruleConfig) {","","        let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;","","        if (typeof severity === \"string\") {","            severity = RULE_SEVERITY[severity.toLowerCase()] || 0;","        }","","        return (typeof severity === \"number\" && severity === 2);","    },","","    /**","     * Checks whether a given config has valid severity or not.","     * @param {number|string|Array} ruleConfig - The configuration for an individual rule.","     * @returns {boolean} `true` if the configuration has valid severity.","     */","    isValidSeverity(ruleConfig) {","        let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;","","        if (typeof severity === \"string\") {","            severity = severity.toLowerCase();","        }","        return VALID_SEVERITIES.indexOf(severity) !== -1;","    },","","    /**","     * Checks whether every rule of a given config has valid severity or not.","     * @param {Object} config - The configuration for rules.","     * @returns {boolean} `true` if the configuration has valid severity.","     */","    isEverySeverityValid(config) {","        return Object.keys(config).every(ruleId => this.isValidSeverity(config[ruleId]));","    }","};",""],"l":{"12":1,"14":1,"20":1,"22":3,"23":3,"31":1,"38":0,"54":0,"56":0,"58":0,"60":0,"61":0,"63":0,"64":0,"65":0,"66":0,"69":0,"70":0,"76":0,"86":0,"87":0,"88":0,"91":0,"133":0,"134":0,"136":0,"137":0,"138":0,"139":0,"142":0,"143":0,"145":0,"147":0,"148":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"158":0,"161":0,"162":0,"164":0,"165":0,"171":0,"172":0,"173":0,"176":0,"177":0,"178":0,"179":0,"180":0,"182":0,"187":0,"199":0,"200":0,"201":0,"203":0,"204":0,"205":0,"206":0,"221":0,"222":0,"223":0,"225":0,"226":0,"227":0,"228":0,"241":0,"243":0,"244":0,"247":0,"256":0,"258":0,"259":0,"261":0,"270":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/environments.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/environments.js","s":{"1":1,"2":1,"3":1,"4":1,"5":26,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"load","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":16}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":7},"end":{"line":46,"column":14}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":10},"end":{"line":56,"column":22}}},"4":{"name":"(anonymous_4)","line":66,"loc":{"start":{"line":66,"column":16},"end":{"line":66,"column":37}}},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":13},"end":{"line":78,"column":16}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":48}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":29}},"3":{"start":{"line":24,"column":0},"end":{"line":28,"column":1}},"4":{"start":{"line":25,"column":4},"end":{"line":27,"column":7}},"5":{"start":{"line":26,"column":8},"end":{"line":26,"column":49}},"6":{"start":{"line":31,"column":0},"end":{"line":31,"column":7}},"7":{"start":{"line":37,"column":0},"end":{"line":82,"column":2}},"8":{"start":{"line":47,"column":8},"end":{"line":47,"column":46}},"9":{"start":{"line":57,"column":8},"end":{"line":57,"column":36}},"10":{"start":{"line":67,"column":8},"end":{"line":71,"column":9}},"11":{"start":{"line":68,"column":12},"end":{"line":70,"column":15}},"12":{"start":{"line":69,"column":16},"end":{"line":69,"column":86}},"13":{"start":{"line":79,"column":8},"end":{"line":79,"column":33}},"14":{"start":{"line":80,"column":8},"end":{"line":80,"column":15}}},"branchMap":{"1":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":15},"end":{"line":47,"column":37}},{"start":{"line":47,"column":41},"end":{"line":47,"column":45}}]},"2":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]}},"code":["/**"," * @fileoverview Environments manager"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const envs = require(\"../../conf/environments\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","let environments = new Map();","","/**"," * Loads the default environments."," * @returns {void}"," * @private"," */","function load() {","    Object.keys(envs).forEach(envName => {","        environments.set(envName, envs[envName]);","    });","}","","// always load default environments upfront","load();","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    load,","","    /**","     * Gets the environment with the given name.","     * @param {string} name The name of the environment to retrieve.","     * @returns {Object?} The environment object or null if not found.","     */","    get(name) {","        return environments.get(name) || null;","    },","","    /**","     * Defines an environment.","     * @param {string} name The name of the environment.","     * @param {Object} env The environment settings.","     * @returns {void}","     */","    define(name, env) {","        environments.set(name, env);","    },","","    /**","     * Imports all environments from a plugin.","     * @param {Object} plugin The plugin object.","     * @param {string} pluginName The name of the plugin.","     * @returns {void}","     */","    importPlugin(plugin, pluginName) {","        if (plugin.environments) {","            Object.keys(plugin.environments).forEach(envName => {","                this.define(`${pluginName}/${envName}`, plugin.environments[envName]);","            });","        }","    },","","    /**","     * Resets all environments. Only use for tests!","     * @returns {void}","     */","    testReset() {","        environments = new Map();","        load();","    }","};",""],"l":{"11":1,"17":1,"24":1,"25":1,"26":26,"31":1,"37":1,"47":0,"57":0,"67":0,"68":0,"69":0,"79":0,"80":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/conf/environments.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/conf/environments.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":17,"column":0},"end":{"line":107,"column":2}}},"branchMap":{},"code":["/**"," * @fileoverview Defines environment settings and globals."," * @author Elan Shanker"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const globals = require(\"globals\");","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    builtin: globals.es5,","    browser: {","        globals: globals.browser","    },","    node: {","        globals: globals.node,","        parserOptions: {","            ecmaFeatures: {","                globalReturn: true","            }","        }","    },","    commonjs: {","        globals: globals.commonjs,","        parserOptions: {","            ecmaFeatures: {","                globalReturn: true","            }","        }","    },","    \"shared-node-browser\": {","        globals: globals[\"shared-node-browser\"]","    },","    worker: {","        globals: globals.worker","    },","    amd: {","        globals: globals.amd","    },","    mocha: {","        globals: globals.mocha","    },","    jasmine: {","        globals: globals.jasmine","    },","    jest: {","        globals: globals.jest","    },","    phantomjs: {","        globals: globals.phantomjs","    },","    jquery: {","        globals: globals.jquery","    },","    qunit: {","        globals: globals.qunit","    },","    prototypejs: {","        globals: globals.prototypejs","    },","    shelljs: {","        globals: globals.shelljs","    },","    meteor: {","        globals: globals.meteor","    },","    mongo: {","        globals: globals.mongo","    },","    protractor: {","        globals: globals.protractor","    },","    applescript: {","        globals: globals.applescript","    },","    nashorn: {","        globals: globals.nashorn","    },","    serviceworker: {","        globals: globals.serviceworker","    },","    atomtest: {","        globals: globals.atomtest","    },","    embertest: {","        globals: globals.embertest","    },","    webextensions: {","        globals: globals.webextensions","    },","    es6: {","        globals: globals.es6,","        parserOptions: {","            ecmaVersion: 6","        }","    },","    greasemonkey: {","        globals: globals.greasemonkey","    }","};",""],"l":{"11":1,"17":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-validator.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-validator.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":1},"b":{"1":[0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"getRuleOptionsSchema","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":34}}},"2":{"name":"validateRuleSeverity","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":39}}},"3":{"name":"validateRuleSchema","line":77,"loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":46}}},"4":{"name":"validateRuleOptions","line":101,"loc":{"start":{"line":101,"column":0},"end":{"line":101,"column":50}}},"5":{"name":"validateEnvironment","line":119,"loc":{"start":{"line":119,"column":0},"end":{"line":119,"column":50}}},"6":{"name":"validate","line":152,"loc":{"start":{"line":152,"column":0},"end":{"line":152,"column":34}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":15,"column":27}},"2":{"start":{"line":17,"column":0},"end":{"line":19,"column":2}},"3":{"start":{"line":30,"column":0},"end":{"line":54,"column":1}},"4":{"start":{"line":31,"column":4},"end":{"line":32,"column":78}},"5":{"start":{"line":35,"column":4},"end":{"line":50,"column":5}},"6":{"start":{"line":36,"column":8},"end":{"line":43,"column":9}},"7":{"start":{"line":37,"column":12},"end":{"line":42,"column":14}},"8":{"start":{"line":44,"column":8},"end":{"line":48,"column":10}},"9":{"start":{"line":53,"column":4},"end":{"line":53,"column":26}},"10":{"start":{"line":61,"column":0},"end":{"line":69,"column":1}},"11":{"start":{"line":62,"column":4},"end":{"line":62,"column":67}},"12":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"13":{"start":{"line":65,"column":8},"end":{"line":65,"column":182}},"14":{"start":{"line":68,"column":4},"end":{"line":68,"column":20}},"15":{"start":{"line":77,"column":0},"end":{"line":92,"column":1}},"16":{"start":{"line":78,"column":4},"end":{"line":78,"column":44}},"17":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"18":{"start":{"line":81,"column":8},"end":{"line":81,"column":74}},"19":{"start":{"line":84,"column":4},"end":{"line":84,"column":46}},"20":{"start":{"line":86,"column":4},"end":{"line":91,"column":5}},"21":{"start":{"line":87,"column":8},"end":{"line":87,"column":35}},"22":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"23":{"start":{"line":89,"column":12},"end":{"line":89,"column":119}},"24":{"start":{"line":89,"column":61},"end":{"line":89,"column":107}},"25":{"start":{"line":101,"column":0},"end":{"line":111,"column":1}},"26":{"start":{"line":102,"column":4},"end":{"line":110,"column":5}},"27":{"start":{"line":103,"column":8},"end":{"line":103,"column":55}},"28":{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},"29":{"start":{"line":106,"column":12},"end":{"line":106,"column":83}},"30":{"start":{"line":109,"column":8},"end":{"line":109,"column":100}},"31":{"start":{"line":119,"column":0},"end":{"line":144,"column":1}},"32":{"start":{"line":122,"column":4},"end":{"line":124,"column":5}},"33":{"start":{"line":123,"column":8},"end":{"line":123,"column":15}},"34":{"start":{"line":126,"column":4},"end":{"line":128,"column":5}},"35":{"start":{"line":127,"column":8},"end":{"line":127,"column":60}},"36":{"start":{"line":130,"column":4},"end":{"line":143,"column":5}},"37":{"start":{"line":131,"column":8},"end":{"line":140,"column":11}},"38":{"start":{"line":132,"column":12},"end":{"line":139,"column":13}},"39":{"start":{"line":133,"column":16},"end":{"line":136,"column":18}},"40":{"start":{"line":138,"column":16},"end":{"line":138,"column":50}},"41":{"start":{"line":142,"column":8},"end":{"line":142,"column":57}},"42":{"start":{"line":152,"column":0},"end":{"line":161,"column":1}},"43":{"start":{"line":154,"column":4},"end":{"line":158,"column":5}},"44":{"start":{"line":155,"column":8},"end":{"line":157,"column":11}},"45":{"start":{"line":156,"column":12},"end":{"line":156,"column":62}},"46":{"start":{"line":160,"column":4},"end":{"line":160,"column":44}},"47":{"start":{"line":167,"column":0},"end":{"line":171,"column":2}}},"branchMap":{"1":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":17},"end":{"line":32,"column":21}},{"start":{"line":32,"column":25},"end":{"line":32,"column":36}},{"start":{"line":32,"column":40},"end":{"line":32,"column":44}},{"start":{"line":32,"column":48},"end":{"line":32,"column":57}},{"start":{"line":32,"column":61},"end":{"line":32,"column":77}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":8}},{"start":{"line":36,"column":8},"end":{"line":36,"column":8}}]},"4":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":11},"end":{"line":53,"column":17}},{"start":{"line":53,"column":21},"end":{"line":53,"column":25}}]},"5":{"line":62,"type":"cond-expr","locations":[{"start":{"line":62,"column":46},"end":{"line":62,"column":56}},{"start":{"line":62,"column":59},"end":{"line":62,"column":66}}]},"6":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"7":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":22}},{"start":{"line":64,"column":26},"end":{"line":64,"column":40}},{"start":{"line":64,"column":44},"end":{"line":64,"column":58}},{"start":{"line":64,"column":62},"end":{"line":64,"column":135}}]},"8":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":64},"end":{"line":64,"column":92}},{"start":{"line":64,"column":96},"end":{"line":64,"column":134}}]},"9":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"10":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":29}},{"start":{"line":80,"column":33},"end":{"line":80,"column":39}}]},"11":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]},"12":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":8}},{"start":{"line":88,"column":8},"end":{"line":88,"column":8}}]},"13":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":8}},{"start":{"line":105,"column":8},"end":{"line":105,"column":8}}]},"14":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":12},"end":{"line":105,"column":26}},{"start":{"line":105,"column":30},"end":{"line":105,"column":97}}]},"15":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":32},"end":{"line":105,"column":60}},{"start":{"line":105,"column":64},"end":{"line":105,"column":96}}]},"16":{"line":106,"type":"cond-expr","locations":[{"start":{"line":106,"column":60},"end":{"line":106,"column":76}},{"start":{"line":106,"column":79},"end":{"line":106,"column":81}}]},"17":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":4},"end":{"line":122,"column":4}},{"start":{"line":122,"column":4},"end":{"line":122,"column":4}}]},"18":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"19":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":4},"end":{"line":130,"column":4}},{"start":{"line":130,"column":4},"end":{"line":130,"column":4}}]},"20":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":132,"column":12}},{"start":{"line":132,"column":12},"end":{"line":132,"column":12}}]},"21":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]}},"code":["/**"," * @fileoverview Validates configs."," * @author Brandon Mills"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const rules = require(\"../rules\"),","    Environments = require(\"./environments\"),","    schemaValidator = require(\"is-my-json-valid\"),","    util = require(\"util\");","","const validators = {","    rules: Object.create(null)","};","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * Gets a complete options schema for a rule."," * @param {string} id The rule's unique name."," * @returns {Object} JSON Schema for the rule's options."," */","function getRuleOptionsSchema(id) {","    const rule = rules.get(id),","        schema = rule && rule.schema || rule && rule.meta && rule.meta.schema;","","    // Given a tuple of schemas, insert warning level at the beginning","    if (Array.isArray(schema)) {","        if (schema.length) {","            return {","                type: \"array\",","                items: schema,","                minItems: 0,","                maxItems: schema.length","            };","        }","        return {","            type: \"array\",","            minItems: 0,","            maxItems: 0","        };","","    }","","    // Given a full schema, leave it alone","    return schema || null;","}","","/**","* Validates a rule's severity and returns the severity value. Throws an error if the severity is invalid.","* @param {options} options The given options for the rule.","* @returns {number|string} The rule's severity value","*/","function validateRuleSeverity(options) {","    const severity = Array.isArray(options) ? options[0] : options;","","    if (severity !== 0 && severity !== 1 && severity !== 2 && !(typeof severity === \"string\" && /^(?:off|warn|error)$/i.test(severity))) {","        throw new Error(`\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '${util.inspect(severity).replace(/'/g, \"\\\"\").replace(/\\n/g, \"\")}').\\n`);","    }","","    return severity;","}","","/**","* Validates the non-severity options passed to a rule, based on its schema.","* @param {string} id The rule's unique name","* @param {array} localOptions The options for the rule, excluding severity","* @returns {void}","*/","function validateRuleSchema(id, localOptions) {","    const schema = getRuleOptionsSchema(id);","","    if (!validators.rules[id] && schema) {","        validators.rules[id] = schemaValidator(schema, { verbose: true });","    }","","    const validateRule = validators.rules[id];","","    if (validateRule) {","        validateRule(localOptions);","        if (validateRule.errors) {","            throw new Error(validateRule.errors.map(error => `\\tValue \"${error.value}\" ${error.message}.\\n`).join(\"\"));","        }","    }","}","","/**"," * Validates a rule's options against its schema."," * @param {string} id The rule's unique name."," * @param {array|number} options The given options for the rule."," * @param {string} source The name of the configuration source."," * @returns {void}"," */","function validateRuleOptions(id, options, source) {","    try {","        const severity = validateRuleSeverity(options);","","        if (severity !== 0 && !(typeof severity === \"string\" && severity.toLowerCase() === \"off\")) {","            validateRuleSchema(id, Array.isArray(options) ? options.slice(1) : []);","        }","    } catch (err) {","        throw new Error(`${source}:\\n\\tConfiguration for rule \"${id}\" is invalid:\\n${err.message}`);","    }","}","","/**"," * Validates an environment object"," * @param {Object} environment The environment config object to validate."," * @param {string} source The location to report with any errors."," * @returns {void}"," */","function validateEnvironment(environment, source) {","","    // not having an environment is ok","    if (!environment) {","        return;","    }","","    if (Array.isArray(environment)) {","        throw new Error(\"Environment must not be an array\");","    }","","    if (typeof environment === \"object\") {","        Object.keys(environment).forEach(env => {","            if (!Environments.get(env)) {","                const message = [","                    source, \":\\n\",","                    \"\\tEnvironment key \\\"\", env, \"\\\" is unknown\\n\"","                ];","","                throw new Error(message.join(\"\"));","            }","        });","    } else {","        throw new Error(\"Environment must be an object\");","    }","}","","/**"," * Validates an entire config object."," * @param {Object} config The config object to validate."," * @param {string} source The location to report with any errors."," * @returns {void}"," */","function validate(config, source) {","","    if (typeof config.rules === \"object\") {","        Object.keys(config.rules).forEach(id => {","            validateRuleOptions(id, config.rules[id], source);","        });","    }","","    validateEnvironment(config.env, source);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    getRuleOptionsSchema,","    validate,","    validateRuleOptions","};",""],"l":{"12":1,"17":1,"30":1,"31":0,"35":0,"36":0,"37":0,"44":0,"53":0,"61":1,"62":0,"64":0,"65":0,"68":0,"77":1,"78":0,"80":0,"81":0,"84":0,"86":0,"87":0,"88":0,"89":0,"101":1,"102":0,"103":0,"105":0,"106":0,"109":0,"119":1,"122":0,"123":0,"126":0,"127":0,"130":0,"131":0,"132":0,"133":0,"138":0,"142":0,"152":1,"154":0,"155":0,"156":0,"160":0,"167":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules.js","s":{"1":1,"2":1,"3":1,"4":244,"5":1,"6":1,"7":1,"8":244,"9":1,"10":0,"11":0,"12":0,"13":0,"14":1,"15":244,"16":244,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":1,"27":0,"28":0,"29":1},"b":{"1":[0,0],"2":[244,0]},"f":{"1":244,"2":1,"3":0,"4":244,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"define","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":36}}},"2":{"name":"load","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":29}}},"3":{"name":"importPlugin","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":42}}},"4":{"name":"getHandler","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":28}}},"5":{"name":"getAllLoadedRules","line":82,"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":29}}},"6":{"name":"testClear","line":98,"loc":{"start":{"line":98,"column":0},"end":{"line":98,"column":21}}},"7":{"name":"(anonymous_7)","line":114,"loc":{"start":{"line":114,"column":13},"end":{"line":114,"column":16}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}},"3":{"start":{"line":30,"column":0},"end":{"line":32,"column":1}},"4":{"start":{"line":31,"column":4},"end":{"line":31,"column":31}},"5":{"start":{"line":40,"column":0},"end":{"line":46,"column":1}},"6":{"start":{"line":41,"column":4},"end":{"line":41,"column":46}},"7":{"start":{"line":43,"column":4},"end":{"line":45,"column":7}},"8":{"start":{"line":44,"column":8},"end":{"line":44,"column":41}},"9":{"start":{"line":54,"column":0},"end":{"line":63,"column":1}},"10":{"start":{"line":55,"column":4},"end":{"line":62,"column":5}},"11":{"start":{"line":56,"column":8},"end":{"line":61,"column":11}},"12":{"start":{"line":57,"column":12},"end":{"line":58,"column":44}},"13":{"start":{"line":60,"column":12},"end":{"line":60,"column":42}},"14":{"start":{"line":70,"column":0},"end":{"line":76,"column":1}},"15":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"16":{"start":{"line":72,"column":8},"end":{"line":72,"column":38}},"17":{"start":{"line":74,"column":4},"end":{"line":74,"column":25}},"18":{"start":{"line":82,"column":0},"end":{"line":91,"column":1}},"19":{"start":{"line":83,"column":4},"end":{"line":83,"column":31}},"20":{"start":{"line":85,"column":4},"end":{"line":89,"column":7}},"21":{"start":{"line":86,"column":8},"end":{"line":86,"column":38}},"22":{"start":{"line":88,"column":8},"end":{"line":88,"column":33}},"23":{"start":{"line":90,"column":4},"end":{"line":90,"column":20}},"24":{"start":{"line":98,"column":0},"end":{"line":100,"column":1}},"25":{"start":{"line":99,"column":4},"end":{"line":99,"column":32}},"26":{"start":{"line":102,"column":0},"end":{"line":118,"column":2}},"27":{"start":{"line":115,"column":8},"end":{"line":115,"column":20}},"28":{"start":{"line":116,"column":8},"end":{"line":116,"column":15}},"29":{"start":{"line":125,"column":0},"end":{"line":125,"column":7}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"2":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]}},"code":["/**"," * @fileoverview Defines a storage for rules."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const loadRules = require(\"./load-rules\");","","//------------------------------------------------------------------------------","// Privates","//------------------------------------------------------------------------------","","let rules = Object.create(null);","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Registers a rule module for rule id in storage."," * @param {string} ruleId Rule id (file name)."," * @param {Function} ruleModule Rule handler."," * @returns {void}"," */","function define(ruleId, ruleModule) {","    rules[ruleId] = ruleModule;","}","","/**"," * Loads and registers all rules from passed rules directory."," * @param {string} [rulesDir] Path to rules directory, may be relative. Defaults to `lib/rules`."," * @param {string} cwd Current working directory"," * @returns {void}"," */","function load(rulesDir, cwd) {","    const newRules = loadRules(rulesDir, cwd);","","    Object.keys(newRules).forEach(ruleId => {","        define(ruleId, newRules[ruleId]);","    });","}","","/**"," * Registers all given rules of a plugin."," * @param {Object} plugin The plugin object to import."," * @param {string} pluginName The name of the plugin without prefix (`eslint-plugin-`)."," * @returns {void}"," */","function importPlugin(plugin, pluginName) {","    if (plugin.rules) {","        Object.keys(plugin.rules).forEach(ruleId => {","            const qualifiedRuleId = `${pluginName}/${ruleId}`,","                rule = plugin.rules[ruleId];","","            define(qualifiedRuleId, rule);","        });","    }","}","","/**"," * Access rule handler by id (file name)."," * @param {string} ruleId Rule id (file name)."," * @returns {Function} Rule handler."," */","function getHandler(ruleId) {","    if (typeof rules[ruleId] === \"string\") {","        return require(rules[ruleId]);","    }","    return rules[ruleId];","","}","","/**"," * Get an object with all currently loaded rules"," * @returns {Map} All loaded rules"," */","function getAllLoadedRules() {","    const allRules = new Map();","","    Object.keys(rules).forEach(name => {","        const rule = getHandler(name);","","        allRules.set(name, rule);","    });","    return allRules;","}","","/**"," * Reset rules storage."," * Should be used only in tests."," * @returns {void}"," */","function testClear() {","    rules = Object.create(null);","}","","module.exports = {","    define,","    load,","    importPlugin,","    get: getHandler,","    getAllLoadedRules,","    testClear,","","    /**","     * Resets rules to its starting state. Use for tests only.","     * @returns {void}","     */","    testReset() {","        testClear();","        load();","    }","};","","//------------------------------------------------------------------------------","// Initialization","//------------------------------------------------------------------------------","","// loads built-in rules","load();",""],"l":{"12":1,"18":1,"30":1,"31":244,"40":1,"41":1,"43":1,"44":244,"54":1,"55":0,"56":0,"57":0,"60":0,"70":1,"71":244,"72":244,"74":0,"82":1,"83":0,"85":0,"86":0,"88":0,"90":0,"98":1,"99":0,"102":1,"115":0,"116":0,"125":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/load-rules.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/load-rules.js","s":{"1":1,"2":1,"3":2,"4":2,"5":0,"6":2,"7":2,"8":490,"9":2,"10":488,"11":2},"b":{"1":[2,0],"2":[2,488]},"f":{"1":2},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":17},"end":{"line":25,"column":41}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":27}},"2":{"start":{"line":25,"column":0},"end":{"line":41,"column":2}},"3":{"start":{"line":26,"column":4},"end":{"line":30,"column":5}},"4":{"start":{"line":27,"column":8},"end":{"line":27,"column":49}},"5":{"start":{"line":29,"column":8},"end":{"line":29,"column":47}},"6":{"start":{"line":32,"column":4},"end":{"line":32,"column":38}},"7":{"start":{"line":34,"column":4},"end":{"line":39,"column":7}},"8":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"9":{"start":{"line":36,"column":12},"end":{"line":36,"column":19}},"10":{"start":{"line":38,"column":8},"end":{"line":38,"column":61}},"11":{"start":{"line":40,"column":4},"end":{"line":40,"column":17}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]}},"code":["/**"," * @fileoverview Module for loading rules from files and directories."," * @author Michael Ficarra"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\");","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Load all rule modules from specified directory."," * @param {string} [rulesDir] Path to rules directory, may be relative. Defaults to `lib/rules`."," * @param {string} cwd Current working directory"," * @returns {Object} Loaded rule modules by rule ids (file names)."," */","module.exports = function(rulesDir, cwd) {","    if (!rulesDir) {","        rulesDir = path.join(__dirname, \"rules\");","    } else {","        rulesDir = path.resolve(cwd, rulesDir);","    }","","    const rules = Object.create(null);","","    fs.readdirSync(rulesDir).forEach(file => {","        if (path.extname(file) !== \".js\") {","            return;","        }","        rules[file.slice(0, -3)] = path.join(rulesDir, file);","    });","    return rules;","};",""],"l":{"12":1,"25":1,"26":2,"27":2,"29":0,"32":2,"34":2,"35":490,"36":2,"38":488,"40":2}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/comment-event-generator.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/comment-event-generator.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"emitComments","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":58}}},"2":{"name":"emitCommentsEnter","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":48}}},"3":{"name":"emitCommentsExit","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":47}}},"4":{"name":"(anonymous_4)","line":81,"loc":{"start":{"line":81,"column":15},"end":{"line":81,"column":52}}},"5":{"name":"(anonymous_5)","line":94,"loc":{"start":{"line":94,"column":13},"end":{"line":94,"column":20}}},"6":{"name":"(anonymous_6)","line":107,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":20}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":34,"column":1}},"2":{"start":{"line":22,"column":4},"end":{"line":33,"column":5}},"3":{"start":{"line":23,"column":8},"end":{"line":32,"column":11}},"4":{"start":{"line":24,"column":12},"end":{"line":24,"column":49}},"5":{"start":{"line":26,"column":12},"end":{"line":31,"column":13}},"6":{"start":{"line":27,"column":16},"end":{"line":27,"column":38}},"7":{"start":{"line":29,"column":16},"end":{"line":29,"column":36}},"8":{"start":{"line":30,"column":16},"end":{"line":30,"column":58}},"9":{"start":{"line":42,"column":0},"end":{"line":48,"column":1}},"10":{"start":{"line":43,"column":4},"end":{"line":47,"column":19}},"11":{"start":{"line":56,"column":0},"end":{"line":62,"column":1}},"12":{"start":{"line":57,"column":4},"end":{"line":61,"column":24}},"13":{"start":{"line":82,"column":8},"end":{"line":82,"column":47}},"14":{"start":{"line":83,"column":8},"end":{"line":83,"column":54}},"15":{"start":{"line":84,"column":8},"end":{"line":84,"column":37}},"16":{"start":{"line":85,"column":8},"end":{"line":85,"column":35}},"17":{"start":{"line":86,"column":8},"end":{"line":86,"column":34}},"18":{"start":{"line":95,"column":8},"end":{"line":95,"column":59}},"19":{"start":{"line":97,"column":8},"end":{"line":97,"column":50}},"20":{"start":{"line":98,"column":8},"end":{"line":98,"column":38}},"21":{"start":{"line":99,"column":8},"end":{"line":99,"column":51}},"22":{"start":{"line":108,"column":8},"end":{"line":108,"column":59}},"23":{"start":{"line":110,"column":8},"end":{"line":110,"column":50}},"24":{"start":{"line":111,"column":8},"end":{"line":111,"column":38}},"25":{"start":{"line":112,"column":8},"end":{"line":112,"column":49}},"26":{"start":{"line":116,"column":0},"end":{"line":116,"column":39}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":12}},{"start":{"line":26,"column":12},"end":{"line":26,"column":12}}]}},"code":["/**"," * @fileoverview The event generator for comments."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Check collection of comments to prevent double event for comment as"," * leading and trailing, then emit event if passing"," * @param {ASTNode[]} comments - Collection of comment nodes"," * @param {EventEmitter} emitter - The event emitter which is the destination of events."," * @param {Object[]} locs - List of locations of previous comment nodes"," * @param {string} eventName - Event name postfix"," * @returns {void}"," */","function emitComments(comments, emitter, locs, eventName) {","    if (comments.length > 0) {","        comments.forEach(node => {","            const index = locs.indexOf(node.loc);","","            if (index >= 0) {","                locs.splice(index, 1);","            } else {","                locs.push(node.loc);","                emitter.emit(node.type + eventName, node);","            }","        });","    }","}","","/**"," * Shortcut to check and emit enter of comment nodes"," * @param {CommentEventGenerator} generator - A generator to emit."," * @param {ASTNode[]} comments - Collection of comment nodes"," * @returns {void}"," */","function emitCommentsEnter(generator, comments) {","    emitComments(","        comments,","        generator.emitter,","        generator.commentLocsEnter,","        \"Comment\");","}","","/**"," * Shortcut to check and emit exit of comment nodes"," * @param {CommentEventGenerator} generator - A generator to emit."," * @param {ASTNode[]} comments Collection of comment nodes"," * @returns {void}"," */","function emitCommentsExit(generator, comments) {","    emitComments(","        comments,","        generator.emitter,","        generator.commentLocsExit,","        \"Comment:exit\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * The event generator for comments."," * This is the decorator pattern."," * This generates events of comments before/after events which are generated the original generator."," *"," * Comment event generator class"," */","class CommentEventGenerator {","","    /**","     * @param {EventGenerator} originalEventGenerator - An event generator which is the decoration target.","     * @param {SourceCode} sourceCode - A source code which has comments.","     */","    constructor(originalEventGenerator, sourceCode) {","        this.original = originalEventGenerator;","        this.emitter = originalEventGenerator.emitter;","        this.sourceCode = sourceCode;","        this.commentLocsEnter = [];","        this.commentLocsExit = [];","    }","","    /**","     * Emits an event of entering comments.","     * @param {ASTNode} node - A node which was entered.","     * @returns {void}","     */","    enterNode(node) {","        const comments = this.sourceCode.getComments(node);","","        emitCommentsEnter(this, comments.leading);","        this.original.enterNode(node);","        emitCommentsEnter(this, comments.trailing);","    }","","    /**","     * Emits an event of leaving comments.","     * @param {ASTNode} node - A node which was left.","     * @returns {void}","     */","    leaveNode(node) {","        const comments = this.sourceCode.getComments(node);","","        emitCommentsExit(this, comments.trailing);","        this.original.leaveNode(node);","        emitCommentsExit(this, comments.leading);","    }","}","","module.exports = CommentEventGenerator;",""],"l":{"21":1,"22":0,"23":0,"24":0,"26":0,"27":0,"29":0,"30":0,"42":1,"43":0,"56":1,"57":0,"82":0,"83":0,"84":0,"85":0,"86":0,"95":0,"97":0,"98":0,"99":0,"108":0,"110":0,"111":0,"112":0,"116":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/node-event-generator.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/node-event-generator.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1},"b":{"1":[0,0,0,0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0,0,0,0,0,0,0,0,0],"5":[0,0,0,0,0,0,0,0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"getPossibleTypes","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":42}}},"2":{"name":"countClassAttributes","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":46}}},"3":{"name":"countIdentifiers","line":115,"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":42}}},"4":{"name":"compareSpecificity","line":146,"loc":{"start":{"line":146,"column":0},"end":{"line":146,"column":50}}},"5":{"name":"tryParseSelector","line":158,"loc":{"start":{"line":158,"column":0},"end":{"line":158,"column":39}}},"6":{"name":"(anonymous_6)","line":210,"loc":{"start":{"line":210,"column":15},"end":{"line":210,"column":25}}},"7":{"name":"(anonymous_7)","line":263,"loc":{"start":{"line":263,"column":17},"end":{"line":263,"column":34}}},"8":{"name":"(anonymous_8)","line":275,"loc":{"start":{"line":275,"column":18},"end":{"line":275,"column":33}}},"9":{"name":"(anonymous_9)","line":304,"loc":{"start":{"line":304,"column":13},"end":{"line":304,"column":20}}},"10":{"name":"(anonymous_10)","line":316,"loc":{"start":{"line":316,"column":13},"end":{"line":316,"column":20}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":33}},"3":{"start":{"line":40,"column":0},"end":{"line":79,"column":1}},"4":{"start":{"line":41,"column":4},"end":{"line":78,"column":5}},"5":{"start":{"line":43,"column":12},"end":{"line":43,"column":42}},"6":{"start":{"line":46,"column":12},"end":{"line":46,"column":86}},"7":{"start":{"line":48,"column":12},"end":{"line":50,"column":13}},"8":{"start":{"line":48,"column":62},"end":{"line":48,"column":79}},"9":{"start":{"line":49,"column":16},"end":{"line":49,"column":68}},"10":{"start":{"line":51,"column":12},"end":{"line":51,"column":24}},"11":{"start":{"line":55,"column":12},"end":{"line":55,"column":133}},"12":{"start":{"line":55,"column":114},"end":{"line":55,"column":131}},"13":{"start":{"line":58,"column":12},"end":{"line":60,"column":13}},"14":{"start":{"line":59,"column":16},"end":{"line":59,"column":28}},"15":{"start":{"line":66,"column":12},"end":{"line":66,"column":71}},"16":{"start":{"line":73,"column":12},"end":{"line":73,"column":58}},"17":{"start":{"line":76,"column":12},"end":{"line":76,"column":24}},"18":{"start":{"line":86,"column":0},"end":{"line":108,"column":1}},"19":{"start":{"line":87,"column":4},"end":{"line":107,"column":5}},"20":{"start":{"line":92,"column":12},"end":{"line":92,"column":106}},"21":{"start":{"line":97,"column":12},"end":{"line":97,"column":121}},"22":{"start":{"line":97,"column":75},"end":{"line":97,"column":116}},"23":{"start":{"line":103,"column":12},"end":{"line":103,"column":21}},"24":{"start":{"line":106,"column":12},"end":{"line":106,"column":21}},"25":{"start":{"line":115,"column":0},"end":{"line":134,"column":1}},"26":{"start":{"line":116,"column":4},"end":{"line":133,"column":5}},"27":{"start":{"line":121,"column":12},"end":{"line":121,"column":98}},"28":{"start":{"line":126,"column":12},"end":{"line":126,"column":117}},"29":{"start":{"line":126,"column":75},"end":{"line":126,"column":112}},"30":{"start":{"line":129,"column":12},"end":{"line":129,"column":21}},"31":{"start":{"line":132,"column":12},"end":{"line":132,"column":21}},"32":{"start":{"line":146,"column":0},"end":{"line":150,"column":1}},"33":{"start":{"line":147,"column":4},"end":{"line":149,"column":66}},"34":{"start":{"line":158,"column":0},"end":{"line":167,"column":1}},"35":{"start":{"line":159,"column":4},"end":{"line":166,"column":5}},"36":{"start":{"line":160,"column":8},"end":{"line":160,"column":64}},"37":{"start":{"line":162,"column":8},"end":{"line":164,"column":9}},"38":{"start":{"line":163,"column":12},"end":{"line":163,"column":115}},"39":{"start":{"line":165,"column":8},"end":{"line":165,"column":18}},"40":{"start":{"line":174,"column":0},"end":{"line":185,"column":3}},"41":{"start":{"line":175,"column":4},"end":{"line":175,"column":57}},"42":{"start":{"line":177,"column":4},"end":{"line":184,"column":6}},"43":{"start":{"line":211,"column":8},"end":{"line":211,"column":31}},"44":{"start":{"line":212,"column":8},"end":{"line":212,"column":34}},"45":{"start":{"line":213,"column":8},"end":{"line":213,"column":50}},"46":{"start":{"line":214,"column":8},"end":{"line":214,"column":49}},"47":{"start":{"line":215,"column":8},"end":{"line":215,"column":40}},"48":{"start":{"line":216,"column":8},"end":{"line":216,"column":39}},"49":{"start":{"line":218,"column":8},"end":{"line":232,"column":43}},"50":{"start":{"line":234,"column":8},"end":{"line":249,"column":11}},"51":{"start":{"line":235,"column":12},"end":{"line":235,"column":56}},"52":{"start":{"line":237,"column":12},"end":{"line":248,"column":13}},"53":{"start":{"line":238,"column":16},"end":{"line":245,"column":19}},"54":{"start":{"line":239,"column":20},"end":{"line":239,"column":115}},"55":{"start":{"line":241,"column":20},"end":{"line":243,"column":21}},"56":{"start":{"line":242,"column":24},"end":{"line":242,"column":50}},"57":{"start":{"line":244,"column":20},"end":{"line":244,"column":57}},"58":{"start":{"line":247,"column":16},"end":{"line":247,"column":106}},"59":{"start":{"line":251,"column":8},"end":{"line":251,"column":60}},"60":{"start":{"line":252,"column":8},"end":{"line":252,"column":59}},"61":{"start":{"line":253,"column":8},"end":{"line":253,"column":101}},"62":{"start":{"line":253,"column":62},"end":{"line":253,"column":99}},"63":{"start":{"line":254,"column":8},"end":{"line":254,"column":100}},"64":{"start":{"line":254,"column":61},"end":{"line":254,"column":98}},"65":{"start":{"line":264,"column":8},"end":{"line":266,"column":9}},"66":{"start":{"line":265,"column":12},"end":{"line":265,"column":58}},"67":{"start":{"line":276,"column":8},"end":{"line":276,"column":129}},"68":{"start":{"line":277,"column":8},"end":{"line":277,"column":97}},"69":{"start":{"line":283,"column":8},"end":{"line":283,"column":37}},"70":{"start":{"line":284,"column":8},"end":{"line":284,"column":38}},"71":{"start":{"line":286,"column":8},"end":{"line":296,"column":9}},"72":{"start":{"line":287,"column":12},"end":{"line":295,"column":13}},"73":{"start":{"line":292,"column":16},"end":{"line":292,"column":84}},"74":{"start":{"line":294,"column":16},"end":{"line":294,"column":86}},"75":{"start":{"line":305,"column":8},"end":{"line":307,"column":9}},"76":{"start":{"line":306,"column":12},"end":{"line":306,"column":54}},"77":{"start":{"line":308,"column":8},"end":{"line":308,"column":41}},"78":{"start":{"line":317,"column":8},"end":{"line":317,"column":40}},"79":{"start":{"line":318,"column":8},"end":{"line":318,"column":37}},"80":{"start":{"line":322,"column":0},"end":{"line":322,"column":36}}},"branchMap":{"1":{"line":41,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":43,"column":42}},{"start":{"line":45,"column":8},"end":{"line":52,"column":9}},{"start":{"line":54,"column":8},"end":{"line":67,"column":9}},{"start":{"line":69,"column":8},"end":{"line":69,"column":21}},{"start":{"line":70,"column":8},"end":{"line":70,"column":26}},{"start":{"line":71,"column":8},"end":{"line":71,"column":23}},{"start":{"line":72,"column":8},"end":{"line":73,"column":58}},{"start":{"line":75,"column":8},"end":{"line":76,"column":24}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":12}},{"start":{"line":48,"column":12},"end":{"line":48,"column":12}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":12}},{"start":{"line":58,"column":12},"end":{"line":58,"column":12}}]},"4":{"line":87,"type":"switch","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":21}},{"start":{"line":89,"column":8},"end":{"line":89,"column":26}},{"start":{"line":90,"column":8},"end":{"line":90,"column":23}},{"start":{"line":91,"column":8},"end":{"line":92,"column":106}},{"start":{"line":94,"column":8},"end":{"line":94,"column":24}},{"start":{"line":95,"column":8},"end":{"line":95,"column":19}},{"start":{"line":96,"column":8},"end":{"line":97,"column":121}},{"start":{"line":99,"column":8},"end":{"line":99,"column":25}},{"start":{"line":100,"column":8},"end":{"line":100,"column":21}},{"start":{"line":101,"column":8},"end":{"line":101,"column":25}},{"start":{"line":102,"column":8},"end":{"line":103,"column":21}},{"start":{"line":105,"column":8},"end":{"line":106,"column":21}}]},"5":{"line":116,"type":"switch","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":21}},{"start":{"line":118,"column":8},"end":{"line":118,"column":26}},{"start":{"line":119,"column":8},"end":{"line":119,"column":23}},{"start":{"line":120,"column":8},"end":{"line":121,"column":98}},{"start":{"line":123,"column":8},"end":{"line":123,"column":24}},{"start":{"line":124,"column":8},"end":{"line":124,"column":19}},{"start":{"line":125,"column":8},"end":{"line":126,"column":117}},{"start":{"line":128,"column":8},"end":{"line":129,"column":21}},{"start":{"line":131,"column":8},"end":{"line":132,"column":21}}]},"6":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":11},"end":{"line":147,"column":62}},{"start":{"line":148,"column":8},"end":{"line":148,"column":61}},{"start":{"line":149,"column":9},"end":{"line":149,"column":64}}]},"7":{"line":149,"type":"cond-expr","locations":[{"start":{"line":149,"column":58},"end":{"line":149,"column":60}},{"start":{"line":149,"column":63},"end":{"line":149,"column":64}}]},"8":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":8},"end":{"line":162,"column":8}},{"start":{"line":162,"column":8},"end":{"line":162,"column":8}}]},"9":{"line":218,"type":"cond-expr","locations":[{"start":{"line":221,"column":14},"end":{"line":221,"column":34}},{"start":{"line":232,"column":14},"end":{"line":232,"column":42}}]},"10":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":12},"end":{"line":237,"column":12}},{"start":{"line":237,"column":12},"end":{"line":237,"column":12}}]},"11":{"line":239,"type":"cond-expr","locations":[{"start":{"line":239,"column":54},"end":{"line":239,"column":82}},{"start":{"line":239,"column":85},"end":{"line":239,"column":114}}]},"12":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":20},"end":{"line":241,"column":20}},{"start":{"line":241,"column":20},"end":{"line":241,"column":20}}]},"13":{"line":247,"type":"cond-expr","locations":[{"start":{"line":247,"column":35},"end":{"line":247,"column":60}},{"start":{"line":247,"column":63},"end":{"line":247,"column":89}}]},"14":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":8},"end":{"line":264,"column":8}},{"start":{"line":264,"column":8},"end":{"line":264,"column":8}}]},"15":{"line":276,"type":"binary-expr","locations":[{"start":{"line":276,"column":36},"end":{"line":276,"column":122}},{"start":{"line":276,"column":126},"end":{"line":276,"column":128}}]},"16":{"line":276,"type":"cond-expr","locations":[{"start":{"line":276,"column":46},"end":{"line":276,"column":74}},{"start":{"line":276,"column":77},"end":{"line":276,"column":106}}]},"17":{"line":277,"type":"cond-expr","locations":[{"start":{"line":277,"column":42},"end":{"line":277,"column":67}},{"start":{"line":277,"column":70},"end":{"line":277,"column":96}}]},"18":{"line":286,"type":"binary-expr","locations":[{"start":{"line":286,"column":15},"end":{"line":286,"column":64}},{"start":{"line":286,"column":68},"end":{"line":286,"column":115}}]},"19":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":12},"end":{"line":287,"column":12}},{"start":{"line":287,"column":12},"end":{"line":287,"column":12}}]},"20":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":16},"end":{"line":288,"column":66}},{"start":{"line":289,"column":16},"end":{"line":289,"column":63}},{"start":{"line":290,"column":16},"end":{"line":290,"column":122}}]},"21":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8}},{"start":{"line":305,"column":8},"end":{"line":305,"column":8}}]}},"code":["/**"," * @fileoverview The event generator for AST nodes."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const esquery = require(\"esquery\");","const lodash = require(\"lodash\");","","//------------------------------------------------------------------------------","// Typedefs","//------------------------------------------------------------------------------","","/**"," * An object describing an AST selector"," * @typedef {Object} ASTSelector"," * @property {string} rawSelector The string that was parsed into this selector"," * @property {boolean} isExit `true` if this should be emitted when exiting the node rather than when entering"," * @property {Object} parsedSelector An object (from esquery) describing the matching behavior of the selector"," * @property {string[]|null} listenerTypes A list of node types that could possibly cause the selector to match,"," * or `null` if all node types could cause a match"," * @property {number} attributeCount The total number of classes, pseudo-classes, and attribute queries in this selector"," * @property {number} identifierCount The total number of identifier queries in this selector"," */","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**","* Gets the possible types of a selector","* @param {Object} parsedSelector An object (from esquery) describing the matching behavior of the selector","* @returns {string[]|null} The node types that could possibly trigger this selector, or `null` if all node types could trigger it","*/","function getPossibleTypes(parsedSelector) {","    switch (parsedSelector.type) {","        case \"identifier\":","            return [parsedSelector.value];","","        case \"matches\": {","            const typesForComponents = parsedSelector.selectors.map(getPossibleTypes);","","            if (typesForComponents.every(typesForComponent => typesForComponent)) {","                return lodash.union.apply(null, typesForComponents);","            }","            return null;","        }","","        case \"compound\": {","            const typesForComponents = parsedSelector.selectors.map(getPossibleTypes).filter(typesForComponent => typesForComponent);","","            // If all of the components could match any type, then the compound could also match any type.","            if (!typesForComponents.length) {","                return null;","            }","","            /*","             * If at least one of the components could only match a particular type, the compound could only match","             * the intersection of those types.","             */","            return lodash.intersection.apply(null, typesForComponents);","        }","","        case \"child\":","        case \"descendant\":","        case \"sibling\":","        case \"adjacent\":","            return getPossibleTypes(parsedSelector.right);","","        default:","            return null;","","    }","}","","/**"," * Counts the number of class, pseudo-class, and attribute queries in this selector"," * @param {Object} parsedSelector An object (from esquery) describing the selector's matching behavior"," * @returns {number} The number of class, pseudo-class, and attribute queries in this selector"," */","function countClassAttributes(parsedSelector) {","    switch (parsedSelector.type) {","        case \"child\":","        case \"descendant\":","        case \"sibling\":","        case \"adjacent\":","            return countClassAttributes(parsedSelector.left) + countClassAttributes(parsedSelector.right);","","        case \"compound\":","        case \"not\":","        case \"matches\":","            return parsedSelector.selectors.reduce((sum, childSelector) => sum + countClassAttributes(childSelector), 0);","","        case \"attribute\":","        case \"field\":","        case \"nth-child\":","        case \"nth-last-child\":","            return 1;","","        default:","            return 0;","    }","}","","/**"," * Counts the number of identifier queries in this selector"," * @param {Object} parsedSelector An object (from esquery) describing the selector's matching behavior"," * @returns {number} The number of identifier queries"," */","function countIdentifiers(parsedSelector) {","    switch (parsedSelector.type) {","        case \"child\":","        case \"descendant\":","        case \"sibling\":","        case \"adjacent\":","            return countIdentifiers(parsedSelector.left) + countIdentifiers(parsedSelector.right);","","        case \"compound\":","        case \"not\":","        case \"matches\":","            return parsedSelector.selectors.reduce((sum, childSelector) => sum + countIdentifiers(childSelector), 0);","","        case \"identifier\":","            return 1;","","        default:","            return 0;","    }","}","","/**"," * Compares the specificity of two selector objects, with CSS-like rules."," * @param {ASTSelector} selectorA An AST selector descriptor"," * @param {ASTSelector} selectorB Another AST selector descriptor"," * @returns {number}"," * a value less than 0 if selectorA is less specific than selectorB"," * a value greater than 0 if selectorA is more specific than selectorB"," * a value less than 0 if selectorA and selectorB have the same specificity, and selectorA <= selectorB alphabetically"," * a value greater than 0 if selectorA and selectorB have the same specificity, and selectorA > selectorB alphabetically"," */","function compareSpecificity(selectorA, selectorB) {","    return selectorA.attributeCount - selectorB.attributeCount ||","        selectorA.identifierCount - selectorB.identifierCount ||","        (selectorA.rawSelector <= selectorB.rawSelector ? -1 : 1);","}","","/**"," * Parses a raw selector string, and throws a useful error if parsing fails."," * @param {string} rawSelector A raw AST selector"," * @returns {Object} An object (from esquery) describing the matching behavior of this selector"," * @throws {Error} An error if the selector is invalid"," */","function tryParseSelector(rawSelector) {","    try {","        return esquery.parse(rawSelector.replace(/:exit$/, \"\"));","    } catch (err) {","        if (typeof err.offset === \"number\") {","            throw new Error(`Syntax error in selector \"${rawSelector}\" at position ${err.offset}: ${err.message}`);","        }","        throw err;","    }","}","","/**"," * Parses a raw selector string, and returns the parsed selector along with specificity and type information."," * @param {string} rawSelector A raw AST selector"," * @returns {ASTSelector} A selector descriptor"," */","const parseSelector = lodash.memoize(rawSelector => {","    const parsedSelector = tryParseSelector(rawSelector);","","    return {","        rawSelector,","        isExit: rawSelector.endsWith(\":exit\"),","        parsedSelector,","        listenerTypes: getPossibleTypes(parsedSelector),","        attributeCount: countClassAttributes(parsedSelector),","        identifierCount: countIdentifiers(parsedSelector)","    };","});","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * The event generator for AST nodes."," * This implements below interface."," *"," * ```ts"," * interface EventGenerator {"," *     emitter: EventEmitter;"," *     enterNode(node: ASTNode): void;"," *     leaveNode(node: ASTNode): void;"," * }"," * ```"," */","class NodeEventGenerator {","","    /**","    * @param {EventEmitter} emitter - An event emitter which is the destination of events. This emitter must already","    * have registered listeners for all of the events that it needs to listen for.","    * @returns {NodeEventGenerator} new instance","    */","    constructor(emitter) {","        this.emitter = emitter;","        this.currentAncestry = [];","        this.enterSelectorsByNodeType = new Map();","        this.exitSelectorsByNodeType = new Map();","        this.anyTypeEnterSelectors = [];","        this.anyTypeExitSelectors = [];","","        const eventNames = typeof emitter.eventNames === \"function\"","","            // Use the built-in eventNames() function if available (Node 6+)","            ? emitter.eventNames()","","            /*","             * Otherwise, use the private _events property.","             * Using a private property isn't ideal here, but this seems to","             * be the best way to get a list of event names without overriding","             * addEventListener, which would hurt performance. This property","             * is widely used and unlikely to be removed in a future version","             * (see https://github.com/nodejs/node/issues/1817). Also, future","             * node versions will have eventNames() anyway.","             */","            : Object.keys(emitter._events); // eslint-disable-line no-underscore-dangle","","        eventNames.forEach(rawSelector => {","            const selector = parseSelector(rawSelector);","","            if (selector.listenerTypes) {","                selector.listenerTypes.forEach(nodeType => {","                    const typeMap = selector.isExit ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType;","","                    if (!typeMap.has(nodeType)) {","                        typeMap.set(nodeType, []);","                    }","                    typeMap.get(nodeType).push(selector);","                });","            } else {","                (selector.isExit ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors).push(selector);","            }","        });","","        this.anyTypeEnterSelectors.sort(compareSpecificity);","        this.anyTypeExitSelectors.sort(compareSpecificity);","        this.enterSelectorsByNodeType.forEach(selectorList => selectorList.sort(compareSpecificity));","        this.exitSelectorsByNodeType.forEach(selectorList => selectorList.sort(compareSpecificity));","    }","","    /**","     * Checks a selector against a node, and emits it if it matches","     * @param {ASTNode} node The node to check","     * @param {ASTSelector} selector An AST selector descriptor","     * @returns {void}","     */","    applySelector(node, selector) {","        if (esquery.matches(node, selector.parsedSelector, this.currentAncestry)) {","            this.emitter.emit(selector.rawSelector, node);","        }","    }","","    /**","     * Applies all appropriate selectors to a node, in specificity order","     * @param {ASTNode} node The node to check","     * @param {boolean} isExit `false` if the node is currently being entered, `true` if it's currently being exited","     * @returns {void}","     */","    applySelectors(node, isExit) {","        const selectorsByNodeType = (isExit ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType).get(node.type) || [];","        const anyTypeSelectors = isExit ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors;","","        /*","         * selectorsByNodeType and anyTypeSelectors were already sorted by specificity in the constructor.","         * Iterate through each of them, applying selectors in the right order.","         */","        let selectorsByTypeIndex = 0;","        let anyTypeSelectorsIndex = 0;","","        while (selectorsByTypeIndex < selectorsByNodeType.length || anyTypeSelectorsIndex < anyTypeSelectors.length) {","            if (","                selectorsByTypeIndex >= selectorsByNodeType.length ||","                anyTypeSelectorsIndex < anyTypeSelectors.length &&","                compareSpecificity(anyTypeSelectors[anyTypeSelectorsIndex], selectorsByNodeType[selectorsByTypeIndex]) < 0","            ) {","                this.applySelector(node, anyTypeSelectors[anyTypeSelectorsIndex++]);","            } else {","                this.applySelector(node, selectorsByNodeType[selectorsByTypeIndex++]);","            }","        }","    }","","    /**","     * Emits an event of entering AST node.","     * @param {ASTNode} node - A node which was entered.","     * @returns {void}","     */","    enterNode(node) {","        if (node.parent) {","            this.currentAncestry.unshift(node.parent);","        }","        this.applySelectors(node, false);","    }","","    /**","     * Emits an event of leaving AST node.","     * @param {ASTNode} node - A node which was left.","     * @returns {void}","     */","    leaveNode(node) {","        this.applySelectors(node, true);","        this.currentAncestry.shift();","    }","}","","module.exports = NodeEventGenerator;",""],"l":{"12":1,"13":1,"40":1,"41":0,"43":0,"46":0,"48":0,"49":0,"51":0,"55":0,"58":0,"59":0,"66":0,"73":0,"76":0,"86":1,"87":0,"92":0,"97":0,"103":0,"106":0,"115":1,"116":0,"121":0,"126":0,"129":0,"132":0,"146":1,"147":0,"158":1,"159":0,"160":0,"162":0,"163":0,"165":0,"174":1,"175":0,"177":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"218":0,"234":0,"235":0,"237":0,"238":0,"239":0,"241":0,"242":0,"244":0,"247":0,"251":0,"252":0,"253":0,"254":0,"264":0,"265":0,"276":0,"277":0,"283":0,"284":0,"286":0,"287":0,"292":0,"294":0,"305":0,"306":0,"308":0,"317":0,"318":0,"322":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/source-code.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/source-code.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0,0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"validate","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":23}}},"2":{"name":"findJSDocComment","line":53,"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":42}}},"3":{"name":"looksLikeExport","line":77,"loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":34}}},"4":{"name":"sortedMerge","line":88,"loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":39}}},"5":{"name":"SourceCode","line":115,"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":31}}},"6":{"name":"(anonymous_6)","line":183,"loc":{"start":{"line":183,"column":24},"end":{"line":183,"column":39}}},"7":{"name":"(anonymous_7)","line":197,"loc":{"start":{"line":197,"column":11},"end":{"line":197,"column":43}}},"8":{"name":"(anonymous_8)","line":211,"loc":{"start":{"line":211,"column":12},"end":{"line":211,"column":15}}},"9":{"name":"(anonymous_9)","line":219,"loc":{"start":{"line":219,"column":18},"end":{"line":219,"column":21}}},"10":{"name":"(anonymous_10)","line":229,"loc":{"start":{"line":229,"column":15},"end":{"line":229,"column":22}}},"11":{"name":"(anonymous_11)","line":258,"loc":{"start":{"line":258,"column":19},"end":{"line":258,"column":26}}},"12":{"name":"(anonymous_12)","line":298,"loc":{"start":{"line":298,"column":23},"end":{"line":298,"column":31}}},"13":{"name":"(anonymous_13)","line":304,"loc":{"start":{"line":304,"column":17},"end":{"line":304,"column":32}}},"14":{"name":"(anonymous_14)","line":312,"loc":{"start":{"line":312,"column":17},"end":{"line":312,"column":24}}},"15":{"name":"(anonymous_15)","line":331,"loc":{"start":{"line":331,"column":24},"end":{"line":331,"column":40}}},"16":{"name":"(anonymous_16)","line":342,"loc":{"start":{"line":342,"column":19},"end":{"line":342,"column":27}}},"17":{"name":"(anonymous_17)","line":379,"loc":{"start":{"line":379,"column":19},"end":{"line":379,"column":25}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":14,"column":31}},"2":{"start":{"line":27,"column":0},"end":{"line":44,"column":1}},"3":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"4":{"start":{"line":30,"column":8},"end":{"line":30,"column":60}},"5":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":62}},"7":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"8":{"start":{"line":38,"column":8},"end":{"line":38,"column":64}},"9":{"start":{"line":41,"column":4},"end":{"line":43,"column":5}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":60}},"11":{"start":{"line":53,"column":0},"end":{"line":69,"column":1}},"12":{"start":{"line":55,"column":4},"end":{"line":66,"column":5}},"13":{"start":{"line":56,"column":8},"end":{"line":65,"column":9}},"14":{"start":{"line":57,"column":12},"end":{"line":64,"column":13}},"15":{"start":{"line":59,"column":16},"end":{"line":61,"column":17}},"16":{"start":{"line":60,"column":20},"end":{"line":60,"column":39}},"17":{"start":{"line":62,"column":16},"end":{"line":62,"column":22}},"18":{"start":{"line":68,"column":4},"end":{"line":68,"column":16}},"19":{"start":{"line":77,"column":0},"end":{"line":80,"column":1}},"20":{"start":{"line":78,"column":4},"end":{"line":79,"column":86}},"21":{"start":{"line":88,"column":0},"end":{"line":102,"column":1}},"22":{"start":{"line":89,"column":4},"end":{"line":89,"column":22}},"23":{"start":{"line":90,"column":4},"end":{"line":90,"column":23}},"24":{"start":{"line":91,"column":4},"end":{"line":91,"column":25}},"25":{"start":{"line":93,"column":4},"end":{"line":99,"column":5}},"26":{"start":{"line":94,"column":8},"end":{"line":98,"column":9}},"27":{"start":{"line":95,"column":12},"end":{"line":95,"column":46}},"28":{"start":{"line":97,"column":12},"end":{"line":97,"column":50}},"29":{"start":{"line":101,"column":4},"end":{"line":101,"column":18}},"30":{"start":{"line":115,"column":0},"end":{"line":175,"column":1}},"31":{"start":{"line":116,"column":4},"end":{"line":116,"column":18}},"32":{"start":{"line":122,"column":4},"end":{"line":122,"column":50}},"33":{"start":{"line":129,"column":4},"end":{"line":129,"column":53}},"34":{"start":{"line":135,"column":4},"end":{"line":135,"column":19}},"35":{"start":{"line":142,"column":4},"end":{"line":142,"column":20}},"36":{"start":{"line":143,"column":4},"end":{"line":143,"column":32}},"37":{"start":{"line":145,"column":4},"end":{"line":145,"column":70}},"38":{"start":{"line":146,"column":4},"end":{"line":146,"column":14}},"39":{"start":{"line":157,"column":4},"end":{"line":160,"column":5}},"40":{"start":{"line":158,"column":8},"end":{"line":158,"column":111}},"41":{"start":{"line":159,"column":8},"end":{"line":159,"column":66}},"42":{"start":{"line":161,"column":4},"end":{"line":161,"column":94}},"43":{"start":{"line":163,"column":4},"end":{"line":163,"column":67}},"44":{"start":{"line":166,"column":4},"end":{"line":166,"column":64}},"45":{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},"46":{"start":{"line":169,"column":8},"end":{"line":169,"column":67}},"47":{"start":{"line":173,"column":4},"end":{"line":173,"column":24}},"48":{"start":{"line":174,"column":4},"end":{"line":174,"column":30}},"49":{"start":{"line":183,"column":0},"end":{"line":185,"column":2}},"50":{"start":{"line":184,"column":4},"end":{"line":184,"column":63}},"51":{"start":{"line":187,"column":0},"end":{"line":413,"column":2}},"52":{"start":{"line":198,"column":8},"end":{"line":201,"column":9}},"53":{"start":{"line":199,"column":12},"end":{"line":200,"column":51}},"54":{"start":{"line":202,"column":8},"end":{"line":202,"column":25}},"55":{"start":{"line":212,"column":8},"end":{"line":212,"column":26}},"56":{"start":{"line":220,"column":8},"end":{"line":220,"column":33}},"57":{"start":{"line":231,"column":8},"end":{"line":231,"column":57}},"58":{"start":{"line":232,"column":8},"end":{"line":232,"column":61}},"59":{"start":{"line":239,"column":8},"end":{"line":243,"column":9}},"60":{"start":{"line":240,"column":12},"end":{"line":242,"column":13}},"61":{"start":{"line":241,"column":16},"end":{"line":241,"column":48}},"62":{"start":{"line":245,"column":8},"end":{"line":248,"column":10}},"63":{"start":{"line":260,"column":8},"end":{"line":260,"column":33}},"64":{"start":{"line":262,"column":8},"end":{"line":290,"column":9}},"65":{"start":{"line":265,"column":16},"end":{"line":267,"column":17}},"66":{"start":{"line":266,"column":20},"end":{"line":266,"column":91}},"67":{"start":{"line":268,"column":16},"end":{"line":268,"column":83}},"68":{"start":{"line":271,"column":16},"end":{"line":271,"column":101}},"69":{"start":{"line":276,"column":16},"end":{"line":284,"column":17}},"70":{"start":{"line":277,"column":20},"end":{"line":279,"column":21}},"71":{"start":{"line":278,"column":24},"end":{"line":278,"column":47}},"72":{"start":{"line":281,"column":20},"end":{"line":281,"column":150}},"73":{"start":{"line":282,"column":23},"end":{"line":284,"column":17}},"74":{"start":{"line":283,"column":20},"end":{"line":283,"column":87}},"75":{"start":{"line":289,"column":16},"end":{"line":289,"column":28}},"76":{"start":{"line":299,"column":8},"end":{"line":300,"column":32}},"77":{"start":{"line":301,"column":8},"end":{"line":301,"column":42}},"78":{"start":{"line":303,"column":8},"end":{"line":317,"column":11}},"79":{"start":{"line":305,"column":16},"end":{"line":310,"column":17}},"80":{"start":{"line":306,"column":20},"end":{"line":306,"column":34}},"81":{"start":{"line":307,"column":20},"end":{"line":307,"column":42}},"82":{"start":{"line":309,"column":20},"end":{"line":309,"column":32}},"83":{"start":{"line":313,"column":16},"end":{"line":315,"column":17}},"84":{"start":{"line":314,"column":20},"end":{"line":314,"column":33}},"85":{"start":{"line":319,"column":8},"end":{"line":319,"column":79}},"86":{"start":{"line":332,"column":8},"end":{"line":332,"column":70}},"87":{"start":{"line":334,"column":8},"end":{"line":334,"column":59}},"88":{"start":{"line":343,"column":8},"end":{"line":345,"column":9}},"89":{"start":{"line":344,"column":12},"end":{"line":344,"column":68}},"90":{"start":{"line":347,"column":8},"end":{"line":349,"column":9}},"91":{"start":{"line":348,"column":12},"end":{"line":348,"column":131}},"92":{"start":{"line":358,"column":8},"end":{"line":360,"column":9}},"93":{"start":{"line":359,"column":12},"end":{"line":359,"column":97}},"94":{"start":{"line":366,"column":8},"end":{"line":366,"column":80}},"95":{"start":{"line":368,"column":8},"end":{"line":368,"column":91}},"96":{"start":{"line":380,"column":8},"end":{"line":382,"column":9}},"97":{"start":{"line":381,"column":12},"end":{"line":381,"column":111}},"98":{"start":{"line":384,"column":8},"end":{"line":386,"column":9}},"99":{"start":{"line":385,"column":12},"end":{"line":385,"column":123}},"100":{"start":{"line":388,"column":8},"end":{"line":390,"column":9}},"101":{"start":{"line":389,"column":12},"end":{"line":389,"column":147}},"102":{"start":{"line":392,"column":8},"end":{"line":392,"column":67}},"103":{"start":{"line":393,"column":8},"end":{"line":393,"column":124}},"104":{"start":{"line":394,"column":8},"end":{"line":394,"column":58}},"105":{"start":{"line":404,"column":8},"end":{"line":409,"column":9}},"106":{"start":{"line":408,"column":12},"end":{"line":408,"column":169}},"107":{"start":{"line":411,"column":8},"end":{"line":411,"column":29}},"108":{"start":{"line":416,"column":0},"end":{"line":416,"column":28}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"4":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"6":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":12}},{"start":{"line":57,"column":12},"end":{"line":57,"column":12}}]},"7":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":44}},{"start":{"line":57,"column":48},"end":{"line":57,"column":83}}]},"8":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":16}},{"start":{"line":59,"column":16},"end":{"line":59,"column":16}}]},"9":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":11},"end":{"line":78,"column":54}},{"start":{"line":78,"column":58},"end":{"line":78,"column":99}},{"start":{"line":79,"column":8},"end":{"line":79,"column":47}},{"start":{"line":79,"column":51},"end":{"line":79,"column":85}}]},"10":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":11},"end":{"line":93,"column":37}},{"start":{"line":93,"column":41},"end":{"line":93,"column":71}}]},"11":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8}},{"start":{"line":94,"column":8},"end":{"line":94,"column":8}}]},"12":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":43}},{"start":{"line":94,"column":47},"end":{"line":94,"column":73}},{"start":{"line":94,"column":77},"end":{"line":94,"column":138}}]},"13":{"line":129,"type":"cond-expr","locations":[{"start":{"line":129,"column":31},"end":{"line":129,"column":44}},{"start":{"line":129,"column":47},"end":{"line":129,"column":51}}]},"14":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":8},"end":{"line":198,"column":8}},{"start":{"line":198,"column":8},"end":{"line":198,"column":8}}]},"15":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":61},"end":{"line":199,"column":72}},{"start":{"line":199,"column":76},"end":{"line":199,"column":77}}]},"16":{"line":200,"type":"binary-expr","locations":[{"start":{"line":200,"column":33},"end":{"line":200,"column":43}},{"start":{"line":200,"column":47},"end":{"line":200,"column":48}}]},"17":{"line":231,"type":"binary-expr","locations":[{"start":{"line":231,"column":30},"end":{"line":231,"column":50}},{"start":{"line":231,"column":54},"end":{"line":231,"column":56}}]},"18":{"line":232,"type":"binary-expr","locations":[{"start":{"line":232,"column":33},"end":{"line":232,"column":54}},{"start":{"line":232,"column":58},"end":{"line":232,"column":60}}]},"19":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":8},"end":{"line":239,"column":8}},{"start":{"line":239,"column":8},"end":{"line":239,"column":8}}]},"20":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":12},"end":{"line":240,"column":12}},{"start":{"line":240,"column":12},"end":{"line":240,"column":12}}]},"21":{"line":262,"type":"switch","locations":[{"start":{"line":263,"column":12},"end":{"line":263,"column":36}},{"start":{"line":264,"column":12},"end":{"line":268,"column":83}},{"start":{"line":270,"column":12},"end":{"line":271,"column":101}},{"start":{"line":273,"column":12},"end":{"line":273,"column":43}},{"start":{"line":274,"column":12},"end":{"line":284,"column":17}},{"start":{"line":288,"column":12},"end":{"line":289,"column":28}}]},"22":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":16},"end":{"line":265,"column":16}},{"start":{"line":265,"column":16},"end":{"line":265,"column":16}}]},"23":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":16},"end":{"line":276,"column":16}},{"start":{"line":276,"column":16},"end":{"line":276,"column":16}}]},"24":{"line":276,"type":"binary-expr","locations":[{"start":{"line":276,"column":20},"end":{"line":276,"column":52}},{"start":{"line":276,"column":56},"end":{"line":276,"column":87}}]},"25":{"line":277,"type":"binary-expr","locations":[{"start":{"line":277,"column":27},"end":{"line":277,"column":33}},{"start":{"line":277,"column":37},"end":{"line":277,"column":60}},{"start":{"line":277,"column":64},"end":{"line":277,"column":93}},{"start":{"line":277,"column":97},"end":{"line":277,"column":131}},{"start":{"line":277,"column":135},"end":{"line":277,"column":161}}]},"26":{"line":281,"type":"cond-expr","locations":[{"start":{"line":281,"column":79},"end":{"line":281,"column":142}},{"start":{"line":281,"column":145},"end":{"line":281,"column":149}}]},"27":{"line":281,"type":"binary-expr","locations":[{"start":{"line":281,"column":27},"end":{"line":281,"column":33}},{"start":{"line":281,"column":38},"end":{"line":281,"column":75}}]},"28":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":23},"end":{"line":282,"column":23}},{"start":{"line":282,"column":23},"end":{"line":282,"column":23}}]},"29":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":16},"end":{"line":305,"column":16}},{"start":{"line":305,"column":16},"end":{"line":305,"column":16}}]},"30":{"line":305,"type":"binary-expr","locations":[{"start":{"line":305,"column":20},"end":{"line":305,"column":42}},{"start":{"line":305,"column":46},"end":{"line":305,"column":67}}]},"31":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":16},"end":{"line":313,"column":16}},{"start":{"line":313,"column":16},"end":{"line":313,"column":16}}]},"32":{"line":319,"type":"cond-expr","locations":[{"start":{"line":319,"column":24},"end":{"line":319,"column":71}},{"start":{"line":319,"column":74},"end":{"line":319,"column":78}}]},"33":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":8},"end":{"line":343,"column":8}},{"start":{"line":343,"column":8},"end":{"line":343,"column":8}}]},"34":{"line":347,"type":"if","locations":[{"start":{"line":347,"column":8},"end":{"line":347,"column":8}},{"start":{"line":347,"column":8},"end":{"line":347,"column":8}}]},"35":{"line":347,"type":"binary-expr","locations":[{"start":{"line":347,"column":12},"end":{"line":347,"column":21}},{"start":{"line":347,"column":25},"end":{"line":347,"column":49}}]},"36":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":8},"end":{"line":358,"column":8}},{"start":{"line":358,"column":8},"end":{"line":358,"column":8}}]},"37":{"line":380,"type":"if","locations":[{"start":{"line":380,"column":8},"end":{"line":380,"column":8}},{"start":{"line":380,"column":8},"end":{"line":380,"column":8}}]},"38":{"line":380,"type":"binary-expr","locations":[{"start":{"line":380,"column":12},"end":{"line":380,"column":35}},{"start":{"line":380,"column":39},"end":{"line":380,"column":67}},{"start":{"line":380,"column":71},"end":{"line":380,"column":101}}]},"39":{"line":384,"type":"if","locations":[{"start":{"line":384,"column":8},"end":{"line":384,"column":8}},{"start":{"line":384,"column":8},"end":{"line":384,"column":8}}]},"40":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":8},"end":{"line":388,"column":8}},{"start":{"line":388,"column":8},"end":{"line":388,"column":8}}]},"41":{"line":393,"type":"cond-expr","locations":[{"start":{"line":393,"column":73},"end":{"line":393,"column":89}},{"start":{"line":393,"column":92},"end":{"line":393,"column":123}}]},"42":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":8},"end":{"line":404,"column":8}},{"start":{"line":404,"column":8},"end":{"line":404,"column":8}}]},"43":{"line":405,"type":"binary-expr","locations":[{"start":{"line":405,"column":12},"end":{"line":405,"column":53}},{"start":{"line":405,"column":57},"end":{"line":405,"column":85}},{"start":{"line":406,"column":12},"end":{"line":406,"column":51}},{"start":{"line":406,"column":55},"end":{"line":406,"column":84}}]}},"code":["/**"," * @fileoverview Abstraction of JavaScript source code."," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const TokenStore = require(\"../token-store\"),","    Traverser = require(\"./traverser\"),","    astUtils = require(\"../ast-utils\"),","    lodash = require(\"lodash\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * Validates that the given AST has the required information."," * @param {ASTNode} ast The Program node of the AST to check."," * @throws {Error} If the AST doesn't contain the correct information."," * @returns {void}"," * @private"," */","function validate(ast) {","","    if (!ast.tokens) {","        throw new Error(\"AST is missing the tokens array.\");","    }","","    if (!ast.comments) {","        throw new Error(\"AST is missing the comments array.\");","    }","","    if (!ast.loc) {","        throw new Error(\"AST is missing location information.\");","    }","","    if (!ast.range) {","        throw new Error(\"AST is missing range information\");","    }","}","","/**"," * Finds a JSDoc comment node in an array of comment nodes."," * @param {ASTNode[]} comments The array of comment nodes to search."," * @param {int} line Line number to look around"," * @returns {ASTNode} The node if found, null if not."," * @private"," */","function findJSDocComment(comments, line) {","","    if (comments) {","        for (let i = comments.length - 1; i >= 0; i--) {","            if (comments[i].type === \"Block\" && comments[i].value.charAt(0) === \"*\") {","","                if (line - comments[i].loc.end.line <= 1) {","                    return comments[i];","                }","                break;","","            }","        }","    }","","    return null;","}","","/**"," * Check to see if its a ES6 export declaration"," * @param {ASTNode} astNode - any node"," * @returns {boolean} whether the given node represents a export declaration"," * @private"," */","function looksLikeExport(astNode) {","    return astNode.type === \"ExportDefaultDeclaration\" || astNode.type === \"ExportNamedDeclaration\" ||","        astNode.type === \"ExportAllDeclaration\" || astNode.type === \"ExportSpecifier\";","}","","/**"," * Merges two sorted lists into a larger sorted list in O(n) time"," * @param {Token[]} tokens The list of tokens"," * @param {Token[]} comments The list of comments"," * @returns {Token[]} A sorted list of tokens and comments"," */","function sortedMerge(tokens, comments) {","    const result = [];","    let tokenIndex = 0;","    let commentIndex = 0;","","    while (tokenIndex < tokens.length || commentIndex < comments.length) {","        if (commentIndex >= comments.length || tokenIndex < tokens.length && tokens[tokenIndex].range[0] < comments[commentIndex].range[0]) {","            result.push(tokens[tokenIndex++]);","        } else {","            result.push(comments[commentIndex++]);","        }","    }","","    return result;","}","","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Represents parsed source code."," * @param {string} text - The source code text."," * @param {ASTNode} ast - The Program node of the AST representing the code. This AST should be created from the text that BOM was stripped."," * @constructor"," */","function SourceCode(text, ast) {","    validate(ast);","","    /**","     * The flag to indicate that the source code has Unicode BOM.","     * @type boolean","     */","    this.hasBOM = (text.charCodeAt(0) === 0xFEFF);","","    /**","     * The original text source code.","     * BOM was stripped from this text.","     * @type string","     */","    this.text = (this.hasBOM ? text.slice(1) : text);","","    /**","     * The parsed AST for the source code.","     * @type ASTNode","     */","    this.ast = ast;","","    /**","     * The source code split into lines according to ECMA-262 specification.","     * This is done to avoid each rule needing to do so separately.","     * @type string[]","     */","    this.lines = [];","    this.lineStartIndices = [0];","","    const lineEndingPattern = astUtils.createGlobalLinebreakMatcher();","    let match;","","    /*","     * Previously, this was implemented using a regex that","     * matched a sequence of non-linebreak characters followed by a","     * linebreak, then adding the lengths of the matches. However,","     * this caused a catastrophic backtracking issue when the end","     * of a file contained a large number of non-newline characters.","     * To avoid this, the current implementation just matches newlines","     * and uses match.index to get the correct line start indices.","     */","    while ((match = lineEndingPattern.exec(this.text))) {","        this.lines.push(this.text.slice(this.lineStartIndices[this.lineStartIndices.length - 1], match.index));","        this.lineStartIndices.push(match.index + match[0].length);","    }","    this.lines.push(this.text.slice(this.lineStartIndices[this.lineStartIndices.length - 1]));","","    this.tokensAndComments = sortedMerge(ast.tokens, ast.comments);","","    // create token store methods","    const tokenStore = new TokenStore(ast.tokens, ast.comments);","","    for (const methodName of TokenStore.PUBLIC_METHODS) {","        this[methodName] = tokenStore[methodName].bind(tokenStore);","    }","","    // don't allow modification of this object","    Object.freeze(this);","    Object.freeze(this.lines);","}","","/**"," * Split the source code into multiple lines based on the line delimiters"," * @param {string} text Source code as a string"," * @returns {string[]} Array of source code lines"," * @public"," */","SourceCode.splitLines = function(text) {","    return text.split(astUtils.createGlobalLinebreakMatcher());","};","","SourceCode.prototype = {","    constructor: SourceCode,","","    /**","     * Gets the source code for the given node.","     * @param {ASTNode=} node The AST node to get the text for.","     * @param {int=} beforeCount The number of characters before the node to retrieve.","     * @param {int=} afterCount The number of characters after the node to retrieve.","     * @returns {string} The text representing the AST node.","     */","    getText(node, beforeCount, afterCount) {","        if (node) {","            return this.text.slice(Math.max(node.range[0] - (beforeCount || 0), 0),","                node.range[1] + (afterCount || 0));","        }","        return this.text;","","","    },","","    /**","     * Gets the entire source text split into an array of lines.","     * @returns {Array} The source text as an array of lines.","     */","    getLines() {","        return this.lines;","    },","","    /**","     * Retrieves an array containing all comments in the source code.","     * @returns {ASTNode[]} An array of comment nodes.","     */","    getAllComments() {","        return this.ast.comments;","    },","","    /**","     * Gets all comments for the given node.","     * @param {ASTNode} node The AST node to get the comments for.","     * @returns {Object} The list of comments indexed by their position.","     * @public","     */","    getComments(node) {","","        let leadingComments = node.leadingComments || [];","        const trailingComments = node.trailingComments || [];","","        /*","         * espree adds a \"comments\" array on Program nodes rather than","         * leadingComments/trailingComments. Comments are only left in the","         * Program node comments array if there is no executable code.","         */","        if (node.type === \"Program\") {","            if (node.body.length === 0) {","                leadingComments = node.comments;","            }","        }","","        return {","            leading: leadingComments,","            trailing: trailingComments","        };","    },","","    /**","     * Retrieves the JSDoc comment for a given node.","     * @param {ASTNode} node The AST node to get the comment for.","     * @returns {ASTNode} The BlockComment node containing the JSDoc for the","     *      given node or null if not found.","     * @public","     */","    getJSDocComment(node) {","","        let parent = node.parent;","","        switch (node.type) {","            case \"ClassDeclaration\":","            case \"FunctionDeclaration\":","                if (looksLikeExport(parent)) {","                    return findJSDocComment(parent.leadingComments, parent.loc.start.line);","                }","                return findJSDocComment(node.leadingComments, node.loc.start.line);","","            case \"ClassExpression\":","                return findJSDocComment(parent.parent.leadingComments, parent.parent.loc.start.line);","","            case \"ArrowFunctionExpression\":","            case \"FunctionExpression\":","","                if (parent.type !== \"CallExpression\" && parent.type !== \"NewExpression\") {","                    while (parent && !parent.leadingComments && !/Function/.test(parent.type) && parent.type !== \"MethodDefinition\" && parent.type !== \"Property\") {","                        parent = parent.parent;","                    }","","                    return parent && (parent.type !== \"FunctionDeclaration\") ? findJSDocComment(parent.leadingComments, parent.loc.start.line) : null;","                } else if (node.leadingComments) {","                    return findJSDocComment(node.leadingComments, node.loc.start.line);","                }","","            // falls through","","            default:","                return null;","        }","    },","","    /**","     * Gets the deepest node containing a range index.","     * @param {int} index Range index of the desired node.","     * @returns {ASTNode} The node if found or null if not found.","     */","    getNodeByRangeIndex(index) {","        let result = null,","            resultParent = null;","        const traverser = new Traverser();","","        traverser.traverse(this.ast, {","            enter(node, parent) {","                if (node.range[0] <= index && index < node.range[1]) {","                    result = node;","                    resultParent = parent;","                } else {","                    this.skip();","                }","            },","            leave(node) {","                if (node === result) {","                    this.break();","                }","            }","        });","","        return result ? Object.assign({ parent: resultParent }, result) : null;","    },","","    /**","     * Determines if two tokens have at least one whitespace character","     * between them. This completely disregards comments in making the","     * determination, so comments count as zero-length substrings.","     * @param {Token} first The token to check after.","     * @param {Token} second The token to check before.","     * @returns {boolean} True if there is only space between tokens, false","     *  if there is anything other than whitespace between tokens.","     */","    isSpaceBetweenTokens(first, second) {","        const text = this.text.slice(first.range[1], second.range[0]);","","        return /\\s/.test(text.replace(/\\/\\*.*?\\*\\//g, \"\"));","    },","","    /**","    * Converts a source text index into a (line, column) pair.","    * @param {number} index The index of a character in a file","    * @returns {Object} A {line, column} location object with a 0-indexed column","    */","    getLocFromIndex(index) {","        if (typeof index !== \"number\") {","            throw new TypeError(\"Expected `index` to be a number.\");","        }","","        if (index < 0 || index > this.text.length) {","            throw new RangeError(`Index out of range (requested index ${index}, but source text has length ${this.text.length}).`);","        }","","        /*","         * For an argument of this.text.length, return the location one \"spot\" past the last character","         * of the file. If the last character is a linebreak, the location will be column 0 of the next","         * line; otherwise, the location will be in the next column on the same line.","         *","         * See getIndexFromLoc for the motivation for this special case.","         */","        if (index === this.text.length) {","            return { line: this.lines.length, column: this.lines[this.lines.length - 1].length };","        }","","        /*","         * To figure out which line rangeIndex is on, determine the last index at which rangeIndex could","         * be inserted into lineIndices to keep the list sorted.","         */","        const lineNumber = lodash.sortedLastIndex(this.lineStartIndices, index);","","        return { line: lineNumber, column: index - this.lineStartIndices[lineNumber - 1] };","","    },","","    /**","    * Converts a (line, column) pair into a range index.","    * @param {Object} loc A line/column location","    * @param {number} loc.line The line number of the location (1-indexed)","    * @param {number} loc.column The column number of the location (0-indexed)","    * @returns {number} The range index of the location in the file.","    */","    getIndexFromLoc(loc) {","        if (typeof loc !== \"object\" || typeof loc.line !== \"number\" || typeof loc.column !== \"number\") {","            throw new TypeError(\"Expected `loc` to be an object with numeric `line` and `column` properties.\");","        }","","        if (loc.line <= 0) {","            throw new RangeError(`Line number out of range (line ${loc.line} requested). Line numbers should be 1-based.`);","        }","","        if (loc.line > this.lineStartIndices.length) {","            throw new RangeError(`Line number out of range (line ${loc.line} requested, but only ${this.lineStartIndices.length} lines present).`);","        }","","        const lineStartIndex = this.lineStartIndices[loc.line - 1];","        const lineEndIndex = loc.line === this.lineStartIndices.length ? this.text.length : this.lineStartIndices[loc.line];","        const positionIndex = lineStartIndex + loc.column;","","        /*","         * By design, getIndexFromLoc({ line: lineNum, column: 0 }) should return the start index of","         * the given line, provided that the line number is valid element of this.lines. Since the","         * last element of this.lines is an empty string for files with trailing newlines, add a","         * special case where getting the index for the first location after the end of the file","         * will return the length of the file, rather than throwing an error. This allows rules to","         * use getIndexFromLoc consistently without worrying about edge cases at the end of a file.","         */","        if (","            loc.line === this.lineStartIndices.length && positionIndex > lineEndIndex ||","            loc.line < this.lineStartIndices.length && positionIndex >= lineEndIndex","        ) {","            throw new RangeError(`Column number out of range (column ${loc.column} requested, but the length of line ${loc.line} is ${lineEndIndex - lineStartIndex}).`);","        }","","        return positionIndex;","    }","};","","","module.exports = SourceCode;",""],"l":{"11":1,"27":1,"29":0,"30":0,"33":0,"34":0,"37":0,"38":0,"41":0,"42":0,"53":1,"55":0,"56":0,"57":0,"59":0,"60":0,"62":0,"68":0,"77":1,"78":0,"88":1,"89":0,"90":0,"91":0,"93":0,"94":0,"95":0,"97":0,"101":0,"115":1,"116":0,"122":0,"129":0,"135":0,"142":0,"143":0,"145":0,"146":0,"157":0,"158":0,"159":0,"161":0,"163":0,"166":0,"168":0,"169":0,"173":0,"174":0,"183":1,"184":0,"187":1,"198":0,"199":0,"202":0,"212":0,"220":0,"231":0,"232":0,"239":0,"240":0,"241":0,"245":0,"260":0,"262":0,"265":0,"266":0,"268":0,"271":0,"276":0,"277":0,"278":0,"281":0,"282":0,"283":0,"289":0,"299":0,"301":0,"303":0,"305":0,"306":0,"307":0,"309":0,"313":0,"314":0,"319":0,"332":0,"334":0,"343":0,"344":0,"347":0,"348":0,"358":0,"359":0,"366":0,"368":0,"380":0,"381":0,"384":0,"385":0,"388":0,"389":0,"392":0,"393":0,"394":0,"404":0,"408":0,"411":0,"416":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"createIndexMap","line":55,"loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":42}}},"2":{"name":"createCursorWithSkip","line":97,"loc":{"start":{"line":97,"column":0},"end":{"line":97,"column":91}}},"3":{"name":"createCursorWithCount","line":133,"loc":{"start":{"line":133,"column":0},"end":{"line":133,"column":92}}},"4":{"name":"createCursorWithPadding","line":185,"loc":{"start":{"line":185,"column":0},"end":{"line":185,"column":104}}},"5":{"name":"(anonymous_5)","line":226,"loc":{"start":{"line":226,"column":15},"end":{"line":226,"column":34}}},"6":{"name":"(anonymous_6)","line":243,"loc":{"start":{"line":243,"column":24},"end":{"line":243,"column":42}}},"7":{"name":"(anonymous_7)","line":269,"loc":{"start":{"line":269,"column":17},"end":{"line":269,"column":33}}},"8":{"name":"(anonymous_8)","line":290,"loc":{"start":{"line":290,"column":16},"end":{"line":290,"column":32}}},"9":{"name":"(anonymous_9)","line":311,"loc":{"start":{"line":311,"column":18},"end":{"line":311,"column":34}}},"10":{"name":"(anonymous_10)","line":332,"loc":{"start":{"line":332,"column":17},"end":{"line":332,"column":33}}},"11":{"name":"(anonymous_11)","line":354,"loc":{"start":{"line":354,"column":24},"end":{"line":354,"column":47}}},"12":{"name":"(anonymous_12)","line":376,"loc":{"start":{"line":376,"column":23},"end":{"line":376,"column":46}}},"13":{"name":"(anonymous_13)","line":397,"loc":{"start":{"line":397,"column":27},"end":{"line":397,"column":40}}},"14":{"name":"(anonymous_14)","line":410,"loc":{"start":{"line":410,"column":26},"end":{"line":410,"column":39}}},"15":{"name":"(anonymous_15)","line":427,"loc":{"start":{"line":427,"column":18},"end":{"line":427,"column":34}}},"16":{"name":"(anonymous_16)","line":448,"loc":{"start":{"line":448,"column":17},"end":{"line":448,"column":33}}},"17":{"name":"(anonymous_17)","line":469,"loc":{"start":{"line":469,"column":19},"end":{"line":469,"column":35}}},"18":{"name":"(anonymous_18)","line":490,"loc":{"start":{"line":490,"column":18},"end":{"line":490,"column":34}}},"19":{"name":"(anonymous_19)","line":512,"loc":{"start":{"line":512,"column":25},"end":{"line":512,"column":48}}},"20":{"name":"(anonymous_20)","line":534,"loc":{"start":{"line":534,"column":24},"end":{"line":534,"column":47}}},"21":{"name":"(anonymous_21)","line":562,"loc":{"start":{"line":562,"column":13},"end":{"line":562,"column":45}}},"22":{"name":"(anonymous_22)","line":591,"loc":{"start":{"line":591,"column":20},"end":{"line":591,"column":43}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}},"3":{"start":{"line":13,"column":0},"end":{"line":13,"column":61}},"4":{"start":{"line":14,"column":0},"end":{"line":14,"column":59}},"5":{"start":{"line":20,"column":0},"end":{"line":42,"column":3}},"6":{"start":{"line":55,"column":0},"end":{"line":79,"column":1}},"7":{"start":{"line":56,"column":4},"end":{"line":56,"column":36}},"8":{"start":{"line":57,"column":4},"end":{"line":57,"column":23}},"9":{"start":{"line":58,"column":4},"end":{"line":58,"column":25}},"10":{"start":{"line":59,"column":4},"end":{"line":59,"column":22}},"11":{"start":{"line":60,"column":4},"end":{"line":60,"column":21}},"12":{"start":{"line":62,"column":4},"end":{"line":76,"column":5}},"13":{"start":{"line":63,"column":8},"end":{"line":63,"column":113}},"14":{"start":{"line":64,"column":8},"end":{"line":68,"column":9}},"15":{"start":{"line":65,"column":12},"end":{"line":65,"column":39}},"16":{"start":{"line":66,"column":12},"end":{"line":66,"column":43}},"17":{"start":{"line":67,"column":12},"end":{"line":67,"column":28}},"18":{"start":{"line":70,"column":8},"end":{"line":70,"column":105}},"19":{"start":{"line":71,"column":8},"end":{"line":75,"column":9}},"20":{"start":{"line":72,"column":12},"end":{"line":72,"column":39}},"21":{"start":{"line":73,"column":12},"end":{"line":73,"column":43}},"22":{"start":{"line":74,"column":12},"end":{"line":74,"column":30}},"23":{"start":{"line":78,"column":4},"end":{"line":78,"column":15}},"24":{"start":{"line":97,"column":0},"end":{"line":115,"column":1}},"25":{"start":{"line":98,"column":4},"end":{"line":98,"column":32}},"26":{"start":{"line":99,"column":4},"end":{"line":99,"column":17}},"27":{"start":{"line":100,"column":4},"end":{"line":100,"column":22}},"28":{"start":{"line":102,"column":4},"end":{"line":110,"column":5}},"29":{"start":{"line":103,"column":8},"end":{"line":103,"column":24}},"30":{"start":{"line":104,"column":11},"end":{"line":110,"column":5}},"31":{"start":{"line":105,"column":8},"end":{"line":105,"column":22}},"32":{"start":{"line":106,"column":11},"end":{"line":110,"column":5}},"33":{"start":{"line":107,"column":8},"end":{"line":107,"column":49}},"34":{"start":{"line":108,"column":8},"end":{"line":108,"column":29}},"35":{"start":{"line":109,"column":8},"end":{"line":109,"column":37}},"36":{"start":{"line":111,"column":4},"end":{"line":111,"column":76}},"37":{"start":{"line":112,"column":4},"end":{"line":112,"column":92}},"38":{"start":{"line":114,"column":4},"end":{"line":114,"column":113}},"39":{"start":{"line":133,"column":0},"end":{"line":154,"column":1}},"40":{"start":{"line":134,"column":4},"end":{"line":134,"column":32}},"41":{"start":{"line":135,"column":4},"end":{"line":135,"column":18}},"42":{"start":{"line":136,"column":4},"end":{"line":136,"column":28}},"43":{"start":{"line":137,"column":4},"end":{"line":137,"column":22}},"44":{"start":{"line":139,"column":4},"end":{"line":149,"column":5}},"45":{"start":{"line":140,"column":8},"end":{"line":140,"column":25}},"46":{"start":{"line":141,"column":8},"end":{"line":141,"column":27}},"47":{"start":{"line":142,"column":11},"end":{"line":149,"column":5}},"48":{"start":{"line":143,"column":8},"end":{"line":143,"column":22}},"49":{"start":{"line":144,"column":11},"end":{"line":149,"column":5}},"50":{"start":{"line":145,"column":8},"end":{"line":145,"column":49}},"51":{"start":{"line":146,"column":8},"end":{"line":146,"column":31}},"52":{"start":{"line":147,"column":8},"end":{"line":147,"column":53}},"53":{"start":{"line":148,"column":8},"end":{"line":148,"column":37}},"54":{"start":{"line":150,"column":4},"end":{"line":150,"column":78}},"55":{"start":{"line":151,"column":4},"end":{"line":151,"column":92}},"56":{"start":{"line":153,"column":4},"end":{"line":153,"column":132}},"57":{"start":{"line":185,"column":0},"end":{"line":193,"column":1}},"58":{"start":{"line":186,"column":4},"end":{"line":188,"column":5}},"59":{"start":{"line":187,"column":8},"end":{"line":187,"column":84}},"60":{"start":{"line":189,"column":4},"end":{"line":191,"column":5}},"61":{"start":{"line":190,"column":8},"end":{"line":190,"column":116}},"62":{"start":{"line":192,"column":4},"end":{"line":192,"column":109}},"63":{"start":{"line":210,"column":0},"end":{"line":602,"column":2}},"64":{"start":{"line":227,"column":8},"end":{"line":227,"column":29}},"65":{"start":{"line":228,"column":8},"end":{"line":228,"column":42}},"66":{"start":{"line":229,"column":8},"end":{"line":229,"column":57}},"67":{"start":{"line":244,"column":8},"end":{"line":244,"column":67}},"68":{"start":{"line":245,"column":8},"end":{"line":252,"column":24}},"69":{"start":{"line":254,"column":8},"end":{"line":256,"column":9}},"70":{"start":{"line":255,"column":12},"end":{"line":255,"column":25}},"71":{"start":{"line":257,"column":8},"end":{"line":257,"column":20}},"72":{"start":{"line":270,"column":8},"end":{"line":278,"column":24}},"73":{"start":{"line":291,"column":8},"end":{"line":299,"column":24}},"74":{"start":{"line":312,"column":8},"end":{"line":320,"column":24}},"75":{"start":{"line":333,"column":8},"end":{"line":341,"column":24}},"76":{"start":{"line":355,"column":8},"end":{"line":363,"column":24}},"77":{"start":{"line":377,"column":8},"end":{"line":385,"column":24}},"78":{"start":{"line":398,"column":8},"end":{"line":398,"column":74}},"79":{"start":{"line":411,"column":8},"end":{"line":411,"column":73}},"80":{"start":{"line":428,"column":8},"end":{"line":436,"column":25}},"81":{"start":{"line":449,"column":8},"end":{"line":457,"column":35}},"82":{"start":{"line":470,"column":8},"end":{"line":478,"column":35}},"83":{"start":{"line":491,"column":8},"end":{"line":499,"column":25}},"84":{"start":{"line":513,"column":8},"end":{"line":521,"column":25}},"85":{"start":{"line":535,"column":8},"end":{"line":543,"column":35}},"86":{"start":{"line":563,"column":8},"end":{"line":571,"column":25}},"87":{"start":{"line":592,"column":8},"end":{"line":600,"column":25}},"88":{"start":{"line":604,"column":0},"end":{"line":604,"column":47}}},"branchMap":{"1":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":11},"end":{"line":62,"column":37}},{"start":{"line":62,"column":41},"end":{"line":62,"column":71}}]},"2":{"line":63,"type":"cond-expr","locations":[{"start":{"line":63,"column":55},"end":{"line":63,"column":86}},{"start":{"line":63,"column":89},"end":{"line":63,"column":112}}]},"3":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":15},"end":{"line":64,"column":41}},{"start":{"line":64,"column":45},"end":{"line":64,"column":94}}]},"4":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":51},"end":{"line":70,"column":78}},{"start":{"line":70,"column":81},"end":{"line":70,"column":104}}]},"5":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":15},"end":{"line":71,"column":45}},{"start":{"line":71,"column":49},"end":{"line":71,"column":102}}]},"6":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"7":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":11},"end":{"line":104,"column":11}},{"start":{"line":104,"column":11},"end":{"line":104,"column":11}}]},"8":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":11},"end":{"line":106,"column":11}},{"start":{"line":106,"column":11},"end":{"line":106,"column":11}}]},"9":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":17},"end":{"line":109,"column":28}},{"start":{"line":109,"column":32},"end":{"line":109,"column":36}}]},"10":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":11},"end":{"line":112,"column":18}},{"start":{"line":112,"column":22},"end":{"line":112,"column":50}}]},"11":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":4},"end":{"line":139,"column":4}},{"start":{"line":139,"column":4},"end":{"line":139,"column":4}}]},"12":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":11},"end":{"line":142,"column":11}},{"start":{"line":142,"column":11},"end":{"line":142,"column":11}}]},"13":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":11},"end":{"line":144,"column":11}},{"start":{"line":144,"column":11},"end":{"line":144,"column":11}}]},"14":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":17},"end":{"line":148,"column":28}},{"start":{"line":148,"column":32},"end":{"line":148,"column":36}}]},"15":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":11},"end":{"line":151,"column":18}},{"start":{"line":151,"column":22},"end":{"line":151,"column":50}}]},"16":{"line":153,"type":"cond-expr","locations":[{"start":{"line":153,"column":120},"end":{"line":153,"column":125}},{"start":{"line":153,"column":128},"end":{"line":153,"column":130}}]},"17":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":4},"end":{"line":186,"column":4}},{"start":{"line":186,"column":4},"end":{"line":186,"column":4}}]},"18":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":8},"end":{"line":186,"column":42}},{"start":{"line":186,"column":46},"end":{"line":186,"column":79}}]},"19":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":4},"end":{"line":189,"column":4}},{"start":{"line":189,"column":4},"end":{"line":189,"column":4}}]},"20":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":8},"end":{"line":189,"column":39}},{"start":{"line":189,"column":43},"end":{"line":189,"column":77}}]},"21":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":32},"end":{"line":244,"column":39}},{"start":{"line":244,"column":43},"end":{"line":244,"column":66}}]},"22":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":8},"end":{"line":254,"column":8}},{"start":{"line":254,"column":8},"end":{"line":254,"column":8}}]},"23":{"line":254,"type":"binary-expr","locations":[{"start":{"line":254,"column":12},"end":{"line":254,"column":17}},{"start":{"line":254,"column":21},"end":{"line":254,"column":46}}]}},"code":["/**"," * @fileoverview Object to handle access and retrieval of tokens."," * @author Brandon Mills"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const assert = require(\"assert\");","const cursors = require(\"./cursors\");","const ForwardTokenCursor = require(\"./forward-token-cursor\");","const PaddedTokenCursor = require(\"./padded-token-cursor\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const PUBLIC_METHODS = Object.freeze([","    \"getTokenByRangeStart\",","","    \"getFirstToken\",","    \"getLastToken\",","    \"getTokenBefore\",","    \"getTokenAfter\",","    \"getFirstTokenBetween\",","    \"getLastTokenBetween\",","","    \"getFirstTokens\",","    \"getLastTokens\",","    \"getTokensBefore\",","    \"getTokensAfter\",","    \"getFirstTokensBetween\",","    \"getLastTokensBetween\",","","    \"getTokens\",","    \"getTokensBetween\",","","    \"getTokenOrCommentBefore\",","    \"getTokenOrCommentAfter\"","]);","","/**"," * Creates the map from locations to indices in `tokens`."," *"," * The first/last location of tokens is mapped to the index of the token."," * The first/last location of comments is mapped to the index of the next token of each comment."," *"," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @returns {Object} The map from locations to indices in `tokens`."," * @private"," */","function createIndexMap(tokens, comments) {","    const map = Object.create(null);","    let tokenIndex = 0;","    let commentIndex = 0;","    let nextStart = 0;","    let range = null;","","    while (tokenIndex < tokens.length || commentIndex < comments.length) {","        nextStart = (commentIndex < comments.length) ? comments[commentIndex].range[0] : Number.MAX_SAFE_INTEGER;","        while (tokenIndex < tokens.length && (range = tokens[tokenIndex].range)[0] < nextStart) {","            map[range[0]] = tokenIndex;","            map[range[1] - 1] = tokenIndex;","            tokenIndex += 1;","        }","","        nextStart = (tokenIndex < tokens.length) ? tokens[tokenIndex].range[0] : Number.MAX_SAFE_INTEGER;","        while (commentIndex < comments.length && (range = comments[commentIndex].range)[0] < nextStart) {","            map[range[0]] = tokenIndex;","            map[range[1] - 1] = tokenIndex;","            commentIndex += 1;","        }","    }","","    return map;","}","","/**"," * Creates the cursor iterates tokens with options."," *"," * @param {CursorFactory} factory - The cursor factory to initialize cursor."," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @param {Object} indexMap - The map from locations to indices in `tokens`."," * @param {number} startLoc - The start location of the iteration range."," * @param {number} endLoc - The end location of the iteration range."," * @param {number|Function|Object} [opts=0] - The option object. If this is a number then it's `opts.skip`. If this is a function then it's `opts.filter`."," * @param {boolean} [opts.includeComments=false] - The flag to iterate comments as well."," * @param {Function|null} [opts.filter=null] - The predicate function to choose tokens."," * @param {number} [opts.skip=0] - The count of tokens the cursor skips."," * @returns {Cursor} The created cursor."," * @private"," */","function createCursorWithSkip(factory, tokens, comments, indexMap, startLoc, endLoc, opts) {","    let includeComments = false;","    let skip = 0;","    let filter = null;","","    if (typeof opts === \"number\") {","        skip = opts | 0;","    } else if (typeof opts === \"function\") {","        filter = opts;","    } else if (opts) {","        includeComments = !!opts.includeComments;","        skip = opts.skip | 0;","        filter = opts.filter || null;","    }","    assert(skip >= 0, \"options.skip should be zero or a positive integer.\");","    assert(!filter || typeof filter === \"function\", \"options.filter should be a function.\");","","    return factory.createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, skip, -1);","}","","/**"," * Creates the cursor iterates tokens with options."," *"," * @param {CursorFactory} factory - The cursor factory to initialize cursor."," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @param {Object} indexMap - The map from locations to indices in `tokens`."," * @param {number} startLoc - The start location of the iteration range."," * @param {number} endLoc - The end location of the iteration range."," * @param {number|Function|Object} [opts=0] - The option object. If this is a number then it's `opts.count`. If this is a function then it's `opts.filter`."," * @param {boolean} [opts.includeComments] - The flag to iterate comments as well."," * @param {Function|null} [opts.filter=null] - The predicate function to choose tokens."," * @param {number} [opts.count=0] - The maximum count of tokens the cursor iterates. Zero is no iteration for backward compatibility."," * @returns {Cursor} The created cursor."," * @private"," */","function createCursorWithCount(factory, tokens, comments, indexMap, startLoc, endLoc, opts) {","    let includeComments = false;","    let count = 0;","    let countExists = false;","    let filter = null;","","    if (typeof opts === \"number\") {","        count = opts | 0;","        countExists = true;","    } else if (typeof opts === \"function\") {","        filter = opts;","    } else if (opts) {","        includeComments = !!opts.includeComments;","        count = opts.count | 0;","        countExists = typeof opts.count === \"number\";","        filter = opts.filter || null;","    }","    assert(count >= 0, \"options.count should be zero or a positive integer.\");","    assert(!filter || typeof filter === \"function\", \"options.filter should be a function.\");","","    return factory.createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, 0, countExists ? count : -1);","}","","/**"," * Creates the cursor iterates tokens with options."," * This is overload function of the below."," *"," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @param {Object} indexMap - The map from locations to indices in `tokens`."," * @param {number} startLoc - The start location of the iteration range."," * @param {number} endLoc - The end location of the iteration range."," * @param {Function|Object} opts - The option object. If this is a function then it's `opts.filter`."," * @param {boolean} [opts.includeComments] - The flag to iterate comments as well."," * @param {Function|null} [opts.filter=null] - The predicate function to choose tokens."," * @param {number} [opts.count=0] - The maximum count of tokens the cursor iterates. Zero is no iteration for backward compatibility."," * @returns {Cursor} The created cursor."," * @private"," */","/**"," * Creates the cursor iterates tokens with options."," *"," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @param {Object} indexMap - The map from locations to indices in `tokens`."," * @param {number} startLoc - The start location of the iteration range."," * @param {number} endLoc - The end location of the iteration range."," * @param {number} [beforeCount=0] - The number of tokens before the node to retrieve."," * @param {boolean} [afterCount=0] - The number of tokens after the node to retrieve."," * @returns {Cursor} The created cursor."," * @private"," */","function createCursorWithPadding(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {","    if (typeof beforeCount === \"undefined\" && typeof afterCount === \"undefined\") {","        return new ForwardTokenCursor(tokens, comments, indexMap, startLoc, endLoc);","    }","    if (typeof beforeCount === \"number\" || typeof beforeCount === \"undefined\") {","        return new PaddedTokenCursor(tokens, comments, indexMap, startLoc, endLoc, beforeCount | 0, afterCount | 0);","    }","    return createCursorWithCount(cursors.forward, tokens, comments, indexMap, startLoc, endLoc, beforeCount);","}","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The token store."," *"," * This class provides methods to get tokens by locations as fast as possible."," * The methods are a part of public API, so we should be careful if it changes this class."," *"," * People can get tokens in O(1) by the hash map which is mapping from the location of tokens/comments to tokens."," * Also people can get a mix of tokens and comments in O(log k), the k is the number of comments."," * Assuming that comments to be much fewer than tokens, this does not make hash map from token's locations to comments to reduce memory cost."," * This uses binary-searching instead for comments."," */","module.exports = class TokenStore {","","    /**","     * Initializes this token store.","     *","     * ※ `comments` needs to be cloned for backward compatibility.","     * After this initialization, ESLint removes a shebang's comment from `comments`.","     * However, so far we had been concatenating 'tokens' and 'comments' before,","     * so the shebang's comment had remained in the concatenated array.","     * As a result, both the result of `getTokenOrCommentAfter` and `getTokenOrCommentBefore`","     * methods had included the shebang's comment.","     * And some rules depends on this behavior.","     *","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     */","    constructor(tokens, comments) {","        this.tokens = tokens;","        this.comments = comments.slice(0);","        this.indexMap = createIndexMap(tokens, comments);","    }","","    //--------------------------------------------------------------------------","    // Gets single token.","    //--------------------------------------------------------------------------","","    /**","     * Gets the token starting at the specified index.","     * @param {number} offset - Index of the start of the token's range.","     * @param {Object} [options=0] - The option object.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @returns {Token|null} The token starting at index, or null if no such token.","     */","    getTokenByRangeStart(offset, options) {","        const includeComments = options && options.includeComments;","        const token = cursors.forward.createBaseCursor(","            this.tokens,","            this.comments,","            this.indexMap,","            offset,","            -1,","            includeComments","        ).getOneToken();","","        if (token && token.range[0] === offset) {","            return token;","        }","        return null;","    }","","    /**","     * Gets the first token of the given node.","     * @param {ASTNode} node - The AST node.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getFirstToken(node, options) {","        return createCursorWithSkip(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            options","        ).getOneToken();","    }","","    /**","     * Gets the last token of the given node.","     * @param {ASTNode} node - The AST node.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getLastToken(node, options) {","        return createCursorWithSkip(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            options","        ).getOneToken();","    }","","    /**","     * Gets the token that precedes a given node or token.","     * @param {ASTNode|Token|Comment} node - The AST node or token.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getTokenBefore(node, options) {","        return createCursorWithSkip(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            -1,","            node.range[0],","            options","        ).getOneToken();","    }","","    /**","     * Gets the token that follows a given node or token.","     * @param {ASTNode|Token|Comment} node - The AST node or token.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getTokenAfter(node, options) {","        return createCursorWithSkip(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[1],","            -1,","            options","        ).getOneToken();","    }","","    /**","     * Gets the first token between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left - Node before the desired token range.","     * @param {ASTNode|Token|Comment} right - Node after the desired token range.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getFirstTokenBetween(left, right, options) {","        return createCursorWithSkip(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            options","        ).getOneToken();","    }","","    /**","     * Gets the last token between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left Node before the desired token range.","     * @param {ASTNode|Token|Comment} right Node after the desired token range.","     * @param {number|Function|Object} [options=0] The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} Tokens between left and right.","     */","    getLastTokenBetween(left, right, options) {","        return createCursorWithSkip(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            options","        ).getOneToken();","    }","","    /**","     * Gets the token that precedes a given node or token in the token stream.","     * This is defined for backward compatibility. Use `includeComments` option instead.","     * TODO: We have a plan to remove this in a future major version.","     * @param {ASTNode|Token|Comment} node The AST node or token.","     * @param {number} [skip=0] A number of tokens to skip.","     * @returns {Token|null} An object representing the token.","     * @deprecated","     */","    getTokenOrCommentBefore(node, skip) {","        return this.getTokenBefore(node, { includeComments: true, skip });","    }","","    /**","     * Gets the token that follows a given node or token in the token stream.","     * This is defined for backward compatibility. Use `includeComments` option instead.","     * TODO: We have a plan to remove this in a future major version.","     * @param {ASTNode|Token|Comment} node The AST node or token.","     * @param {number} [skip=0] A number of tokens to skip.","     * @returns {Token|null} An object representing the token.","     * @deprecated","     */","    getTokenOrCommentAfter(node, skip) {","        return this.getTokenAfter(node, { includeComments: true, skip });","    }","","    //--------------------------------------------------------------------------","    // Gets multiple tokens.","    //--------------------------------------------------------------------------","","    /**","     * Gets the first `count` tokens of the given node.","     * @param {ASTNode} node - The AST node.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens.","     */","    getFirstTokens(node, options) {","        return createCursorWithCount(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            options","        ).getAllTokens();","    }","","    /**","     * Gets the last `count` tokens of the given node.","     * @param {ASTNode} node - The AST node.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens.","     */","    getLastTokens(node, options) {","        return createCursorWithCount(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            options","        ).getAllTokens().reverse();","    }","","    /**","     * Gets the `count` tokens that precedes a given node or token.","     * @param {ASTNode|Token|Comment} node - The AST node or token.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens.","     */","    getTokensBefore(node, options) {","        return createCursorWithCount(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            -1,","            node.range[0],","            options","        ).getAllTokens().reverse();","    }","","    /**","     * Gets the `count` tokens that follows a given node or token.","     * @param {ASTNode|Token|Comment} node - The AST node or token.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens.","     */","    getTokensAfter(node, options) {","        return createCursorWithCount(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[1],","            -1,","            options","        ).getAllTokens();","    }","","    /**","     * Gets the first `count` tokens between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left - Node before the desired token range.","     * @param {ASTNode|Token|Comment} right - Node after the desired token range.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens between left and right.","     */","    getFirstTokensBetween(left, right, options) {","        return createCursorWithCount(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            options","        ).getAllTokens();","    }","","    /**","     * Gets the last `count` tokens between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left Node before the desired token range.","     * @param {ASTNode|Token|Comment} right Node after the desired token range.","     * @param {number|Function|Object} [options=0] The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens between left and right.","     */","    getLastTokensBetween(left, right, options) {","        return createCursorWithCount(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            options","        ).getAllTokens().reverse();","    }","","    /**","     * Gets all tokens that are related to the given node.","     * @param {ASTNode} node - The AST node.","     * @param {Function|Object} options The option object. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Array of objects representing tokens.","     */","    /**","     * Gets all tokens that are related to the given node.","     * @param {ASTNode} node - The AST node.","     * @param {int} [beforeCount=0] - The number of tokens before the node to retrieve.","     * @param {int} [afterCount=0] - The number of tokens after the node to retrieve.","     * @returns {Token[]} Array of objects representing tokens.","     */","    getTokens(node, beforeCount, afterCount) {","        return createCursorWithPadding(","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            beforeCount,","            afterCount","        ).getAllTokens();","    }","","    /**","     * Gets all of the tokens between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left Node before the desired token range.","     * @param {ASTNode|Token|Comment} right Node after the desired token range.","     * @param {Function|Object} options The option object. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens between left and right.","     */","    /**","     * Gets all of the tokens between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left Node before the desired token range.","     * @param {ASTNode|Token|Comment} right Node after the desired token range.","     * @param {int} [padding=0] Number of extra tokens on either side of center.","     * @returns {Token[]} Tokens between left and right.","     */","    getTokensBetween(left, right, padding) {","        return createCursorWithPadding(","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            padding,","            padding","        ).getAllTokens();","    }","};","","module.exports.PUBLIC_METHODS = PUBLIC_METHODS;",""],"l":{"11":1,"12":1,"13":1,"14":1,"20":1,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"70":0,"71":0,"72":0,"73":0,"74":0,"78":0,"97":1,"98":0,"99":0,"100":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"111":0,"112":0,"114":0,"133":1,"134":0,"135":0,"136":0,"137":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"150":0,"151":0,"153":0,"185":1,"186":0,"187":0,"189":0,"190":0,"192":0,"210":1,"227":0,"228":0,"229":0,"244":0,"245":0,"254":0,"255":0,"257":0,"270":0,"291":0,"312":0,"333":0,"355":0,"377":0,"398":0,"411":0,"428":0,"449":0,"470":0,"491":0,"513":0,"535":0,"563":0,"592":0,"604":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/cursors.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/cursors.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":2,"9":2,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":2,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":34,"loc":{"start":{"line":34,"column":15},"end":{"line":34,"column":49}}},"2":{"name":"(anonymous_2)","line":50,"loc":{"start":{"line":50,"column":20},"end":{"line":50,"column":84}}},"3":{"name":"(anonymous_3)","line":70,"loc":{"start":{"line":70,"column":16},"end":{"line":70,"column":101}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":78}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":63}},"3":{"start":{"line":13,"column":0},"end":{"line":13,"column":48}},"4":{"start":{"line":14,"column":0},"end":{"line":14,"column":76}},"5":{"start":{"line":15,"column":0},"end":{"line":15,"column":61}},"6":{"start":{"line":16,"column":0},"end":{"line":16,"column":46}},"7":{"start":{"line":17,"column":0},"end":{"line":17,"column":44}},"8":{"start":{"line":35,"column":8},"end":{"line":35,"column":39}},"9":{"start":{"line":36,"column":8},"end":{"line":36,"column":53}},"10":{"start":{"line":51,"column":8},"end":{"line":51,"column":84}},"11":{"start":{"line":53,"column":8},"end":{"line":53,"column":72}},"12":{"start":{"line":71,"column":8},"end":{"line":71,"column":106}},"13":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"14":{"start":{"line":74,"column":12},"end":{"line":74,"column":54}},"15":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"16":{"start":{"line":77,"column":12},"end":{"line":77,"column":50}},"17":{"start":{"line":79,"column":8},"end":{"line":81,"column":9}},"18":{"start":{"line":80,"column":12},"end":{"line":80,"column":52}},"19":{"start":{"line":83,"column":8},"end":{"line":83,"column":22}},"20":{"start":{"line":91,"column":0},"end":{"line":91,"column":83}},"21":{"start":{"line":92,"column":0},"end":{"line":92,"column":86}}},"branchMap":{"1":{"line":51,"type":"cond-expr","locations":[{"start":{"line":51,"column":41},"end":{"line":51,"column":64}},{"start":{"line":51,"column":67},"end":{"line":51,"column":83}}]},"2":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":8}},{"start":{"line":73,"column":8},"end":{"line":73,"column":8}}]},"3":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":76,"column":8}},{"start":{"line":76,"column":8},"end":{"line":76,"column":8}}]},"4":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]}},"code":["/**"," * @fileoverview Define 2 token factories; forward and backward."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const BackwardTokenCommentCursor = require(\"./backward-token-comment-cursor\");","const BackwardTokenCursor = require(\"./backward-token-cursor\");","const FilterCursor = require(\"./filter-cursor\");","const ForwardTokenCommentCursor = require(\"./forward-token-comment-cursor\");","const ForwardTokenCursor = require(\"./forward-token-cursor\");","const LimitCursor = require(\"./limit-cursor\");","const SkipCursor = require(\"./skip-cursor\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * The cursor factory."," * @private"," */","class CursorFactory {","","    /**","     * Initializes this cursor.","     * @param {Function} TokenCursor - The class of the cursor which iterates tokens only.","     * @param {Function} TokenCommentCursor - The class of the cursor which iterates the mix of tokens and comments.","     */","    constructor(TokenCursor, TokenCommentCursor) {","        this.TokenCursor = TokenCursor;","        this.TokenCommentCursor = TokenCommentCursor;","    }","","    /**","     * Creates a base cursor instance that can be decorated by createCursor.","     *","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     * @param {boolean} includeComments - The flag to iterate comments as well.","     * @returns {Cursor} The created base cursor.","     */","    createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments) {","        const Cursor = includeComments ? this.TokenCommentCursor : this.TokenCursor;","","        return new Cursor(tokens, comments, indexMap, startLoc, endLoc);","    }","","    /**","     * Creates a cursor that iterates tokens with normalized options.","     *","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     * @param {boolean} includeComments - The flag to iterate comments as well.","     * @param {Function|null} filter - The predicate function to choose tokens.","     * @param {number} skip - The count of tokens the cursor skips.","     * @param {number} count - The maximum count of tokens the cursor iterates. Zero is no iteration for backward compatibility.","     * @returns {Cursor} The created cursor.","     */","    createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, skip, count) {","        let cursor = this.createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments);","","        if (filter) {","            cursor = new FilterCursor(cursor, filter);","        }","        if (skip >= 1) {","            cursor = new SkipCursor(cursor, skip);","        }","        if (count >= 0) {","            cursor = new LimitCursor(cursor, count);","        }","","        return cursor;","    }","}","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","exports.forward = new CursorFactory(ForwardTokenCursor, ForwardTokenCommentCursor);","exports.backward = new CursorFactory(BackwardTokenCursor, BackwardTokenCommentCursor);",""],"l":{"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"35":2,"36":2,"51":0,"53":0,"71":0,"73":0,"74":0,"76":0,"77":0,"79":0,"80":0,"83":0,"91":1,"92":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/backward-token-comment-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/backward-token-comment-cursor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":62}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":12},"end":{"line":41,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":57,"column":2}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":33}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":71}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":63}},"9":{"start":{"line":37,"column":8},"end":{"line":37,"column":31}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":83}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":91}},"12":{"start":{"line":45,"column":8},"end":{"line":53,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":33}},"14":{"start":{"line":47,"column":12},"end":{"line":47,"column":33}},"15":{"start":{"line":48,"column":15},"end":{"line":53,"column":9}},"16":{"start":{"line":49,"column":12},"end":{"line":49,"column":35}},"17":{"start":{"line":50,"column":12},"end":{"line":50,"column":35}},"18":{"start":{"line":52,"column":12},"end":{"line":52,"column":32}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":101}}},"branchMap":{"1":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":47},"end":{"line":42,"column":75}},{"start":{"line":42,"column":78},"end":{"line":42,"column":82}}]},"2":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":51},"end":{"line":43,"column":83}},{"start":{"line":43,"column":86},"end":{"line":43,"column":90}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"4":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":17}},{"start":{"line":45,"column":22},"end":{"line":45,"column":30}},{"start":{"line":45,"column":34},"end":{"line":45,"column":67}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":15},"end":{"line":48,"column":15}},{"start":{"line":48,"column":15},"end":{"line":48,"column":15}}]},"6":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":15},"end":{"line":55,"column":36}},{"start":{"line":55,"column":41},"end":{"line":55,"column":59}},{"start":{"line":55,"column":63},"end":{"line":55,"column":99}}]}},"code":["/**"," * @fileoverview Define the cursor which iterates tokens and comments in reverse."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","const utils = require(\"./utils\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens and comments in reverse."," */","module.exports = class BackwardTokenCommentCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc) {","        super();","        this.tokens = tokens;","        this.comments = comments;","        this.tokenIndex = utils.getLastIndex(tokens, indexMap, endLoc);","        this.commentIndex = utils.search(comments, endLoc) - 1;","        this.border = startLoc;","    }","","    /** @inheritdoc */","    moveNext() {","        const token = (this.tokenIndex >= 0) ? this.tokens[this.tokenIndex] : null;","        const comment = (this.commentIndex >= 0) ? this.comments[this.commentIndex] : null;","","        if (token && (!comment || token.range[1] > comment.range[1])) {","            this.current = token;","            this.tokenIndex -= 1;","        } else if (comment) {","            this.current = comment;","            this.commentIndex -= 1;","        } else {","            this.current = null;","        }","","        return Boolean(this.current) && (this.border === -1 || this.current.range[0] >= this.border);","    }","};",""],"l":{"11":1,"12":1,"21":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"42":0,"43":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"52":0,"55":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/cursor.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":39,"loc":{"start":{"line":39,"column":15},"end":{"line":39,"column":18}}},"2":{"name":"(anonymous_2)","line":48,"loc":{"start":{"line":48,"column":15},"end":{"line":48,"column":18}}},"3":{"name":"(anonymous_3)","line":57,"loc":{"start":{"line":57,"column":16},"end":{"line":57,"column":19}}},"4":{"name":"(anonymous_4)","line":73,"loc":{"start":{"line":73,"column":12},"end":{"line":73,"column":15}}}},"statementMap":{"1":{"start":{"line":34,"column":0},"end":{"line":76,"column":2}},"2":{"start":{"line":40,"column":8},"end":{"line":40,"column":28}},"3":{"start":{"line":49,"column":8},"end":{"line":49,"column":53}},"4":{"start":{"line":58,"column":8},"end":{"line":58,"column":26}},"5":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"6":{"start":{"line":61,"column":12},"end":{"line":61,"column":38}},"7":{"start":{"line":64,"column":8},"end":{"line":64,"column":22}},"8":{"start":{"line":74,"column":8},"end":{"line":74,"column":44}}},"branchMap":{"1":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":33},"end":{"line":49,"column":45}},{"start":{"line":49,"column":48},"end":{"line":49,"column":52}}]}},"code":["/**"," * @fileoverview Define the abstract class about cursors which iterate tokens."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The abstract class about cursors which iterate tokens."," *"," * This class has 2 abstract methods."," *"," * - `current: Token | Comment | null` ... The current token."," * - `moveNext(): boolean` ... Moves this cursor to the next token. If the next token didn't exist, it returns `false`."," *"," * This is similar to ES2015 Iterators."," * However, Iterators were slow (at 2017-01), so I created this class as similar to C# IEnumerable."," *"," * There are the following known sub classes."," *"," * - ForwardTokenCursor .......... The cursor which iterates tokens only."," * - BackwardTokenCursor ......... The cursor which iterates tokens only in reverse."," * - ForwardTokenCommentCursor ... The cursor which iterates tokens and comments."," * - BackwardTokenCommentCursor .. The cursor which iterates tokens and comments in reverse."," * - DecorativeCursor"," *     - FilterCursor ............ The cursor which ignores the specified tokens."," *     - SkipCursor .............. The cursor which ignores the first few tokens."," *     - LimitCursor ............. The cursor which limits the count of tokens."," *"," */","module.exports = class Cursor {","","    /**","     * Initializes this cursor.","     */","    constructor() {","        this.current = null;","    }","","    /**","     * Gets the first token.","     * This consumes this cursor.","     * @returns {Token|Comment} The first token or null.","     */","    getOneToken() {","        return this.moveNext() ? this.current : null;","    }","","    /**","     * Gets the first tokens.","     * This consumes this cursor.","     * @returns {(Token|Comment)[]} All tokens.","     */","    getAllTokens() {","        const tokens = [];","","        while (this.moveNext()) {","            tokens.push(this.current);","        }","","        return tokens;","    }","","    /**","     * Moves this cursor to the next token.","     * @returns {boolean} `true` if the next token exists.","     * @abstract","     */","    /* istanbul ignore next */","    moveNext() { // eslint-disable-line class-methods-use-this","        throw new Error(\"Not implemented.\");","    }","};",""],"l":{"34":1,"40":0,"49":0,"58":0,"60":0,"61":0,"64":0,"74":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/utils.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/utils.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"getStartLocation","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":33}}},"2":{"name":"search","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":51}}},"3":{"name":"getFirstIndex","line":57,"loc":{"start":{"line":57,"column":24},"end":{"line":57,"column":75}}},"4":{"name":"getLastIndex","line":84,"loc":{"start":{"line":84,"column":23},"end":{"line":84,"column":71}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":24,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":26}},"4":{"start":{"line":40,"column":0},"end":{"line":46,"column":2}},"5":{"start":{"line":41,"column":4},"end":{"line":45,"column":6}},"6":{"start":{"line":57,"column":0},"end":{"line":73,"column":2}},"7":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"8":{"start":{"line":59,"column":8},"end":{"line":59,"column":34}},"9":{"start":{"line":61,"column":4},"end":{"line":71,"column":5}},"10":{"start":{"line":62,"column":8},"end":{"line":62,"column":45}},"11":{"start":{"line":63,"column":8},"end":{"line":63,"column":83}},"12":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"13":{"start":{"line":68,"column":12},"end":{"line":68,"column":25}},"14":{"start":{"line":70,"column":8},"end":{"line":70,"column":25}},"15":{"start":{"line":72,"column":4},"end":{"line":72,"column":13}},"16":{"start":{"line":84,"column":0},"end":{"line":100,"column":2}},"17":{"start":{"line":85,"column":4},"end":{"line":87,"column":5}},"18":{"start":{"line":86,"column":8},"end":{"line":86,"column":36}},"19":{"start":{"line":88,"column":4},"end":{"line":98,"column":5}},"20":{"start":{"line":89,"column":8},"end":{"line":89,"column":43}},"21":{"start":{"line":90,"column":8},"end":{"line":90,"column":83}},"22":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"23":{"start":{"line":95,"column":12},"end":{"line":95,"column":29}},"24":{"start":{"line":97,"column":8},"end":{"line":97,"column":21}},"25":{"start":{"line":99,"column":4},"end":{"line":99,"column":29}}},"branchMap":{"1":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"2":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"3":{"line":63,"type":"cond-expr","locations":[{"start":{"line":63,"column":62},"end":{"line":63,"column":75}},{"start":{"line":63,"column":78},"end":{"line":63,"column":82}}]},"4":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":23},"end":{"line":63,"column":33}},{"start":{"line":63,"column":37},"end":{"line":63,"column":58}}]},"5":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"6":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":12},"end":{"line":67,"column":17}},{"start":{"line":67,"column":21},"end":{"line":67,"column":47}}]},"7":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":85,"column":4}},{"start":{"line":85,"column":4},"end":{"line":85,"column":4}}]},"8":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"9":{"line":90,"type":"cond-expr","locations":[{"start":{"line":90,"column":62},"end":{"line":90,"column":75}},{"start":{"line":90,"column":78},"end":{"line":90,"column":82}}]},"10":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":23},"end":{"line":90,"column":33}},{"start":{"line":90,"column":37},"end":{"line":90,"column":58}}]},"11":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8}},{"start":{"line":94,"column":8},"end":{"line":94,"column":8}}]},"12":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":17}},{"start":{"line":94,"column":21},"end":{"line":94,"column":44}}]}},"code":["/**"," * @fileoverview Define utilify functions for token store."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets `token.range[0]` from the given token."," *"," * @param {Node|Token|Comment} token - The token to get."," * @returns {number} The start location."," * @private"," */","function getStartLocation(token) {","    return token.range[0];","}","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * Binary-searches the index of the first token which is after the given location."," * If it was not found, this returns `tokens.length`."," *"," * @param {(Token|Comment)[]} tokens - It searches the token in this list."," * @param {number} location - The location to search."," * @returns {number} The found index or `tokens.length`."," */","exports.search = function search(tokens, location) {","    return lodash.sortedIndexBy(","        tokens,","        { range: [location] },","        getStartLocation","    );","};","","/**"," * Gets the index of the `startLoc` in `tokens`."," * `startLoc` can be the value of `node.range[1]`, so this checks about `startLoc - 1` as well."," *"," * @param {(Token|Comment)[]} tokens - The tokens to find an index."," * @param {Object} indexMap - The map from locations to indices."," * @param {number} startLoc - The location to get an index."," * @returns {number} The index."," */","exports.getFirstIndex = function getFirstIndex(tokens, indexMap, startLoc) {","    if (startLoc in indexMap) {","        return indexMap[startLoc];","    }","    if ((startLoc - 1) in indexMap) {","        const index = indexMap[startLoc - 1];","        const token = (index >= 0 && index < tokens.length) ? tokens[index] : null;","","        // For the map of \"comment's location -> token's index\", it points the next token of a comment.","        // In that case, +1 is unnecessary.","        if (token && token.range[0] >= startLoc) {","            return index;","        }","        return index + 1;","    }","    return 0;","};","","/**"," * Gets the index of the `endLoc` in `tokens`."," * The information of end locations are recorded at `endLoc - 1` in `indexMap`, so this checks about `endLoc - 1` as well."," *"," * @param {(Token|Comment)[]} tokens - The tokens to find an index."," * @param {Object} indexMap - The map from locations to indices."," * @param {number} endLoc - The location to get an index."," * @returns {number} The index."," */","exports.getLastIndex = function getLastIndex(tokens, indexMap, endLoc) {","    if (endLoc in indexMap) {","        return indexMap[endLoc] - 1;","    }","    if ((endLoc - 1) in indexMap) {","        const index = indexMap[endLoc - 1];","        const token = (index >= 0 && index < tokens.length) ? tokens[index] : null;","","        // For the map of \"comment's location -> token's index\", it points the next token of a comment.","        // In that case, -1 is necessary.","        if (token && token.range[1] > endLoc) {","            return index - 1;","        }","        return index;","    }","    return tokens.length - 1;","};",""],"l":{"11":1,"24":1,"25":0,"40":1,"41":0,"57":1,"58":0,"59":0,"61":0,"62":0,"63":0,"67":0,"68":0,"70":0,"72":0,"84":1,"85":0,"86":0,"88":0,"89":0,"90":0,"94":0,"95":0,"97":0,"99":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/backward-token-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/backward-token-cursor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":62}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":12},"end":{"line":39,"column":15}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":15},"end":{"line":53,"column":18}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":56,"column":2}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":66}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":72}},"8":{"start":{"line":40,"column":8},"end":{"line":44,"column":9}},"9":{"start":{"line":41,"column":12},"end":{"line":41,"column":51}},"10":{"start":{"line":42,"column":12},"end":{"line":42,"column":28}},"11":{"start":{"line":43,"column":12},"end":{"line":43,"column":24}},"12":{"start":{"line":45,"column":8},"end":{"line":45,"column":21}},"13":{"start":{"line":54,"column":8},"end":{"line":54,"column":78}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"2":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":47},"end":{"line":54,"column":70}},{"start":{"line":54,"column":73},"end":{"line":54,"column":77}}]}},"code":["/**"," * @fileoverview Define the cursor which iterates tokens only in reverse."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","const utils = require(\"./utils\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens only in reverse."," */","module.exports = class BackwardTokenCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc) {","        super();","        this.tokens = tokens;","        this.index = utils.getLastIndex(tokens, indexMap, endLoc);","        this.indexEnd = utils.getFirstIndex(tokens, indexMap, startLoc);","    }","","    /** @inheritdoc */","    moveNext() {","        if (this.index >= this.indexEnd) {","            this.current = this.tokens[this.index];","            this.index -= 1;","            return true;","        }","        return false;","    }","","    //","    // Shorthand for performance.","    //","","    /** @inheritdoc */","    getOneToken() {","        return (this.index >= this.indexEnd) ? this.tokens[this.index] : null;","    }","};",""],"l":{"11":1,"12":1,"21":1,"32":0,"33":0,"34":0,"35":0,"40":0,"41":0,"42":0,"43":0,"45":0,"54":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/filter-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/filter-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":35}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":43,"column":2}},"3":{"start":{"line":28,"column":8},"end":{"line":28,"column":22}},"4":{"start":{"line":29,"column":8},"end":{"line":29,"column":35}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":41}},"6":{"start":{"line":36,"column":8},"end":{"line":40,"column":9}},"7":{"start":{"line":37,"column":12},"end":{"line":39,"column":13}},"8":{"start":{"line":38,"column":16},"end":{"line":38,"column":28}},"9":{"start":{"line":41,"column":8},"end":{"line":41,"column":21}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":12}},{"start":{"line":37,"column":12},"end":{"line":37,"column":12}}]}},"code":["/**"," * @fileoverview Define the cursor which ignores specified tokens."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const DecorativeCursor = require(\"./decorative-cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The decorative cursor which ignores specified tokens."," */","module.exports = class FilterCursor extends DecorativeCursor {","","    /**","     * Initializes this cursor.","     * @param {Cursor} cursor - The cursor to be decorated.","     * @param {Function} predicate - The predicate function to decide tokens this cursor iterates.","     */","    constructor(cursor, predicate) {","        super(cursor);","        this.predicate = predicate;","    }","","    /** @inheritdoc */","    moveNext() {","        const predicate = this.predicate;","","        while (super.moveNext()) {","            if (predicate(this.current)) {","                return true;","            }","        }","        return false;","    }","};",""],"l":{"11":1,"20":1,"28":0,"29":0,"34":0,"36":0,"37":0,"38":0,"41":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/decorative-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/decorative-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":15},"end":{"line":26,"column":24}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":12},"end":{"line":32,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":20,"column":0},"end":{"line":39,"column":2}},"3":{"start":{"line":27,"column":8},"end":{"line":27,"column":16}},"4":{"start":{"line":28,"column":8},"end":{"line":28,"column":29}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":44}},"6":{"start":{"line":35,"column":8},"end":{"line":35,"column":43}},"7":{"start":{"line":37,"column":8},"end":{"line":37,"column":20}}},"branchMap":{},"code":["/**"," * @fileoverview Define the abstract class about cursors which manipulate another cursor."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The abstract class about cursors which manipulate another cursor."," */","module.exports = class DecorativeCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Cursor} cursor - The cursor to be decorated.","     */","    constructor(cursor) {","        super();","        this.cursor = cursor;","    }","","    /** @inheritdoc */","    moveNext() {","        const retv = this.cursor.moveNext();","","        this.current = this.cursor.current;","","        return retv;","    }","};",""],"l":{"11":1,"20":1,"27":0,"28":0,"33":0,"35":0,"37":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/forward-token-comment-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/forward-token-comment-cursor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":62}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":12},"end":{"line":41,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":57,"column":2}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":33}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":74}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":61}},"9":{"start":{"line":37,"column":8},"end":{"line":37,"column":29}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":99}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":109}},"12":{"start":{"line":45,"column":8},"end":{"line":53,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":33}},"14":{"start":{"line":47,"column":12},"end":{"line":47,"column":33}},"15":{"start":{"line":48,"column":15},"end":{"line":53,"column":9}},"16":{"start":{"line":49,"column":12},"end":{"line":49,"column":35}},"17":{"start":{"line":50,"column":12},"end":{"line":50,"column":35}},"18":{"start":{"line":52,"column":12},"end":{"line":52,"column":32}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":101}}},"branchMap":{"1":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":63},"end":{"line":42,"column":91}},{"start":{"line":42,"column":94},"end":{"line":42,"column":98}}]},"2":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":69},"end":{"line":43,"column":101}},{"start":{"line":43,"column":104},"end":{"line":43,"column":108}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"4":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":17}},{"start":{"line":45,"column":22},"end":{"line":45,"column":30}},{"start":{"line":45,"column":34},"end":{"line":45,"column":67}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":15},"end":{"line":48,"column":15}},{"start":{"line":48,"column":15},"end":{"line":48,"column":15}}]},"6":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":15},"end":{"line":55,"column":36}},{"start":{"line":55,"column":41},"end":{"line":55,"column":59}},{"start":{"line":55,"column":63},"end":{"line":55,"column":99}}]}},"code":["/**"," * @fileoverview Define the cursor which iterates tokens and comments."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","const utils = require(\"./utils\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens and comments."," */","module.exports = class ForwardTokenCommentCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc) {","        super();","        this.tokens = tokens;","        this.comments = comments;","        this.tokenIndex = utils.getFirstIndex(tokens, indexMap, startLoc);","        this.commentIndex = utils.search(comments, startLoc);","        this.border = endLoc;","    }","","    /** @inheritdoc */","    moveNext() {","        const token = (this.tokenIndex < this.tokens.length) ? this.tokens[this.tokenIndex] : null;","        const comment = (this.commentIndex < this.comments.length) ? this.comments[this.commentIndex] : null;","","        if (token && (!comment || token.range[0] < comment.range[0])) {","            this.current = token;","            this.tokenIndex += 1;","        } else if (comment) {","            this.current = comment;","            this.commentIndex += 1;","        } else {","            this.current = null;","        }","","        return Boolean(this.current) && (this.border === -1 || this.current.range[1] <= this.border);","    }","};",""],"l":{"11":1,"12":1,"21":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"42":0,"43":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"52":0,"55":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/forward-token-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/forward-token-cursor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":62}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":12},"end":{"line":39,"column":15}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":15},"end":{"line":53,"column":18}}},"4":{"name":"(anonymous_4)","line":58,"loc":{"start":{"line":58,"column":16},"end":{"line":58,"column":19}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":61,"column":2}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":69}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":69}},"8":{"start":{"line":40,"column":8},"end":{"line":44,"column":9}},"9":{"start":{"line":41,"column":12},"end":{"line":41,"column":51}},"10":{"start":{"line":42,"column":12},"end":{"line":42,"column":28}},"11":{"start":{"line":43,"column":12},"end":{"line":43,"column":24}},"12":{"start":{"line":45,"column":8},"end":{"line":45,"column":21}},"13":{"start":{"line":54,"column":8},"end":{"line":54,"column":78}},"14":{"start":{"line":59,"column":8},"end":{"line":59,"column":64}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"2":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":47},"end":{"line":54,"column":70}},{"start":{"line":54,"column":73},"end":{"line":54,"column":77}}]}},"code":["/**"," * @fileoverview Define the cursor which iterates tokens only."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","const utils = require(\"./utils\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens only."," */","module.exports = class ForwardTokenCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc) {","        super();","        this.tokens = tokens;","        this.index = utils.getFirstIndex(tokens, indexMap, startLoc);","        this.indexEnd = utils.getLastIndex(tokens, indexMap, endLoc);","    }","","    /** @inheritdoc */","    moveNext() {","        if (this.index <= this.indexEnd) {","            this.current = this.tokens[this.index];","            this.index += 1;","            return true;","        }","        return false;","    }","","    //","    // Shorthand for performance.","    //","","    /** @inheritdoc */","    getOneToken() {","        return (this.index <= this.indexEnd) ? this.tokens[this.index] : null;","    }","","    /** @inheritdoc */","    getAllTokens() {","        return this.tokens.slice(this.index, this.indexEnd + 1);","    }","};",""],"l":{"11":1,"12":1,"21":1,"32":0,"33":0,"34":0,"35":0,"40":0,"41":0,"42":0,"43":0,"45":0,"54":0,"59":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/limit-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/limit-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":31}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":40,"column":2}},"3":{"start":{"line":28,"column":8},"end":{"line":28,"column":22}},"4":{"start":{"line":29,"column":8},"end":{"line":29,"column":27}},"5":{"start":{"line":34,"column":8},"end":{"line":37,"column":9}},"6":{"start":{"line":35,"column":12},"end":{"line":35,"column":28}},"7":{"start":{"line":36,"column":12},"end":{"line":36,"column":36}},"8":{"start":{"line":38,"column":8},"end":{"line":38,"column":21}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":8}},{"start":{"line":34,"column":8},"end":{"line":34,"column":8}}]}},"code":["/**"," * @fileoverview Define the cursor which limits the number of tokens."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const DecorativeCursor = require(\"./decorative-cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The decorative cursor which limits the number of tokens."," */","module.exports = class LimitCursor extends DecorativeCursor {","","    /**","     * Initializes this cursor.","     * @param {Cursor} cursor - The cursor to be decorated.","     * @param {number} count - The count of tokens this cursor iterates.","     */","    constructor(cursor, count) {","        super(cursor);","        this.count = count;","    }","","    /** @inheritdoc */","    moveNext() {","        if (this.count > 0) {","            this.count -= 1;","            return super.moveNext();","        }","        return false;","    }","};",""],"l":{"11":1,"20":1,"28":0,"29":0,"34":0,"35":0,"36":0,"38":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/skip-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/skip-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":31}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":42,"column":2}},"3":{"start":{"line":28,"column":8},"end":{"line":28,"column":22}},"4":{"start":{"line":29,"column":8},"end":{"line":29,"column":27}},"5":{"start":{"line":34,"column":8},"end":{"line":39,"column":9}},"6":{"start":{"line":35,"column":12},"end":{"line":35,"column":28}},"7":{"start":{"line":36,"column":12},"end":{"line":38,"column":13}},"8":{"start":{"line":37,"column":16},"end":{"line":37,"column":29}},"9":{"start":{"line":40,"column":8},"end":{"line":40,"column":32}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":12}},{"start":{"line":36,"column":12},"end":{"line":36,"column":12}}]}},"code":["/**"," * @fileoverview Define the cursor which ignores the first few tokens."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const DecorativeCursor = require(\"./decorative-cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The decorative cursor which ignores the first few tokens."," */","module.exports = class SkipCursor extends DecorativeCursor {","","    /**","     * Initializes this cursor.","     * @param {Cursor} cursor - The cursor to be decorated.","     * @param {number} count - The count of tokens this cursor skips.","     */","    constructor(cursor, count) {","        super(cursor);","        this.count = count;","    }","","    /** @inheritdoc */","    moveNext() {","        while (this.count > 0) {","            this.count -= 1;","            if (!super.moveNext()) {","                return false;","            }","        }","        return super.moveNext();","    }","};",""],"l":{"11":1,"20":1,"28":0,"29":0,"34":0,"35":0,"36":0,"37":0,"40":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/padded-token-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/token-store/padded-token-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":33,"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":87}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":61}},"2":{"start":{"line":21,"column":0},"end":{"line":38,"column":2}},"3":{"start":{"line":34,"column":8},"end":{"line":34,"column":60}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":59}},"5":{"start":{"line":36,"column":8},"end":{"line":36,"column":80}}},"branchMap":{},"code":["/**"," * @fileoverview Define the cursor which iterates tokens only, with inflated range."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const ForwardTokenCursor = require(\"./forward-token-cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens only, with inflated range."," * This is for the backward compatibility of padding options."," */","module.exports = class PaddedTokenCursor extends ForwardTokenCursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     * @param {number} beforeCount - The number of tokens this cursor iterates before start.","     * @param {number} afterCount - The number of tokens this cursor iterates after end.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {","        super(tokens, comments, indexMap, startLoc, endLoc);","        this.index = Math.max(0, this.index - beforeCount);","        this.indexEnd = Math.min(tokens.length - 1, this.indexEnd + afterCount);","    }","};",""],"l":{"11":1,"21":1,"34":0,"35":0,"36":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/traverser.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/traverser.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":28}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":18},"end":{"line":40,"column":25}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":21,"column":3}},"3":{"start":{"line":30,"column":8},"end":{"line":30,"column":45}},"4":{"start":{"line":31,"column":8},"end":{"line":31,"column":45}},"5":{"start":{"line":41,"column":8},"end":{"line":41,"column":72}},"6":{"start":{"line":41,"column":47},"end":{"line":41,"column":70}},"7":{"start":{"line":45,"column":0},"end":{"line":45,"column":27}}},"branchMap":{},"code":["/**"," * @fileoverview Wrapper around estraverse"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const estraverse = require(\"estraverse\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const KEY_BLACKLIST = new Set([","    \"parent\",","    \"leadingComments\",","    \"trailingComments\"","]);","","/**"," * Wrapper around an estraverse controller that ensures the correct keys"," * are visited."," * @constructor"," */","class Traverser extends estraverse.Controller {","    traverse(node, visitor) {","        visitor.fallback = Traverser.getKeys;","        return super.traverse(node, visitor);","    }","","    /**","     * Calculates the keys to use for traversal.","     * @param {ASTNode} node The node to read keys from.","     * @returns {string[]} An array of keys to visit on the node.","     * @private","     */","    static getKeys(node) {","        return Object.keys(node).filter(key => !KEY_BLACKLIST.has(key));","    }","}","","module.exports = Traverser;",""],"l":{"11":1,"17":1,"30":0,"31":0,"41":0,"45":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rule-context.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rule-context.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":22,"24":0,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":22,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":80,"loc":{"start":{"line":80,"column":15},"end":{"line":80,"column":110}}},"2":{"name":"(anonymous_2)","line":104,"loc":{"start":{"line":104,"column":17},"end":{"line":104,"column":20}}},"3":{"name":"(anonymous_3)","line":118,"loc":{"start":{"line":118,"column":10},"end":{"line":118,"column":54}}},"4":{"name":"(anonymous_4)","line":158,"loc":{"start":{"line":158,"column":21},"end":{"line":158,"column":36}}},"5":{"name":"(anonymous_5)","line":159,"loc":{"start":{"line":159,"column":17},"end":{"line":159,"column":41}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":47}},"2":{"start":{"line":17,"column":0},"end":{"line":42,"column":2}},"3":{"start":{"line":83,"column":8},"end":{"line":83,"column":25}},"4":{"start":{"line":84,"column":8},"end":{"line":84,"column":31}},"5":{"start":{"line":85,"column":8},"end":{"line":85,"column":33}},"6":{"start":{"line":86,"column":8},"end":{"line":86,"column":43}},"7":{"start":{"line":87,"column":8},"end":{"line":87,"column":37}},"8":{"start":{"line":88,"column":8},"end":{"line":88,"column":25}},"9":{"start":{"line":91,"column":8},"end":{"line":91,"column":79}},"10":{"start":{"line":94,"column":8},"end":{"line":94,"column":29}},"11":{"start":{"line":95,"column":8},"end":{"line":95,"column":33}},"12":{"start":{"line":97,"column":8},"end":{"line":97,"column":28}},"13":{"start":{"line":105,"column":8},"end":{"line":105,"column":43}},"14":{"start":{"line":121,"column":8},"end":{"line":142,"column":9}},"15":{"start":{"line":122,"column":12},"end":{"line":122,"column":48}},"16":{"start":{"line":123,"column":12},"end":{"line":123,"column":27}},"17":{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},"18":{"start":{"line":127,"column":16},"end":{"line":127,"column":48}},"19":{"start":{"line":130,"column":12},"end":{"line":139,"column":14}},"20":{"start":{"line":141,"column":12},"end":{"line":141,"column":19}},"21":{"start":{"line":145,"column":8},"end":{"line":153,"column":10}},"22":{"start":{"line":158,"column":0},"end":{"line":162,"column":26}},"23":{"start":{"line":159,"column":4},"end":{"line":161,"column":6}},"24":{"start":{"line":160,"column":8},"end":{"line":160,"column":48}},"25":{"start":{"line":164,"column":0},"end":{"line":164,"column":29}}},"branchMap":{"1":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":8}},{"start":{"line":121,"column":8},"end":{"line":121,"column":8}}]},"2":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":12}},{"start":{"line":126,"column":12},"end":{"line":126,"column":12}}]},"3":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":30}},{"start":{"line":134,"column":34},"end":{"line":134,"column":59}}]}},"code":["/**"," * @fileoverview RuleContext utility for rules"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const ruleFixer = require(\"./util/rule-fixer\");","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const PASSTHROUGHS = [","    \"getAncestors\",","    \"getDeclaredVariables\",","    \"getFilename\",","    \"getScope\",","    \"markVariableAsUsed\",","","    // DEPRECATED","    \"getAllComments\",","    \"getComments\",","    \"getFirstToken\",","    \"getFirstTokens\",","    \"getJSDocComment\",","    \"getLastToken\",","    \"getLastTokens\",","    \"getNodeByRangeIndex\",","    \"getSource\",","    \"getSourceLines\",","    \"getTokenAfter\",","    \"getTokenBefore\",","    \"getTokenByRangeStart\",","    \"getTokens\",","    \"getTokensAfter\",","    \"getTokensBefore\",","    \"getTokensBetween\"","];","","//------------------------------------------------------------------------------","// Typedefs","//------------------------------------------------------------------------------","","/**"," * An error message description"," * @typedef {Object} MessageDescriptor"," * @property {string} nodeType The type of node."," * @property {Location} loc The location of the problem."," * @property {string} message The problem message."," * @property {Object} [data] Optional data to use to fill in placeholders in the"," *      message."," * @property {Function} fix The function to call that creates a fix command."," */","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","/**"," * Rule context class"," * Acts as an abstraction layer between rules and the main eslint object."," */","class RuleContext {","","    /**","     * @param {string} ruleId The ID of the rule using this object.","     * @param {eslint} eslint The eslint object.","     * @param {number} severity The configured severity level of the rule.","     * @param {Array} options The configuration information to be added to the rule.","     * @param {Object} settings The configuration settings passed from the config file.","     * @param {Object} parserOptions The parserOptions settings passed from the config file.","     * @param {Object} parserPath The parser setting passed from the config file.","     * @param {Object} meta The metadata of the rule","     * @param {Object} parserServices The parser services for the rule.","     */","    constructor(ruleId, eslint, severity, options, settings, parserOptions, parserPath, meta, parserServices) {","","        // public.","        this.id = ruleId;","        this.options = options;","        this.settings = settings;","        this.parserOptions = parserOptions;","        this.parserPath = parserPath;","        this.meta = meta;","","        // create a separate copy and freeze it (it's not nice to freeze other people's objects)","        this.parserServices = Object.freeze(Object.assign({}, parserServices));","","        // private.","        this.eslint = eslint;","        this.severity = severity;","","        Object.freeze(this);","    }","","    /**","     * Passthrough to eslint.getSourceCode().","     * @returns {SourceCode} The SourceCode object for the code.","     */","    getSourceCode() {","        return this.eslint.getSourceCode();","    }","","    /**","     * Passthrough to eslint.report() that automatically assigns the rule ID and severity.","     * @param {ASTNode|MessageDescriptor} nodeOrDescriptor The AST node related to the message or a message","     *      descriptor.","     * @param {Object=} location The location of the error.","     * @param {string} message The message to display to the user.","     * @param {Object} opts Optional template data which produces a formatted message","     *     with symbols being replaced by this object's values.","     * @returns {void}","     */","    report(nodeOrDescriptor, location, message, opts) {","","        // check to see if it's a new style call","        if (arguments.length === 1) {","            const descriptor = nodeOrDescriptor;","            let fix = null;","","            // if there's a fix specified, get it","            if (typeof descriptor.fix === \"function\") {","                fix = descriptor.fix(ruleFixer);","            }","","            this.eslint.report(","                this.id,","                this.severity,","                descriptor.node,","                descriptor.loc || descriptor.node.loc.start,","                descriptor.message,","                descriptor.data,","                fix,","                this.meta","            );","","            return;","        }","","        // old style call","        this.eslint.report(","            this.id,","            this.severity,","            nodeOrDescriptor,","            location,","            message,","            opts,","            this.meta","        );","    }","}","","// Copy over passthrough methods. All functions will have 5 or fewer parameters.","PASSTHROUGHS.forEach(function(name) {","    this[name] = function(a, b, c, d, e) {","        return this.eslint[name](a, b, c, d, e);","    };","}, RuleContext.prototype);","","module.exports = RuleContext;",""],"l":{"11":1,"17":1,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"91":0,"94":0,"95":0,"97":0,"105":0,"121":0,"122":0,"123":0,"126":0,"127":0,"130":0,"141":0,"145":0,"158":1,"159":22,"160":0,"164":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/rule-fixer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/rule-fixer.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"insertTextAt","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":35}}},"2":{"name":"(anonymous_2)","line":48,"loc":{"start":{"line":48,"column":19},"end":{"line":48,"column":39}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":24},"end":{"line":60,"column":38}}},"4":{"name":"(anonymous_4)","line":71,"loc":{"start":{"line":71,"column":20},"end":{"line":71,"column":40}}},"5":{"name":"(anonymous_5)","line":83,"loc":{"start":{"line":83,"column":25},"end":{"line":83,"column":39}}},"6":{"name":"(anonymous_6)","line":94,"loc":{"start":{"line":94,"column":15},"end":{"line":94,"column":35}}},"7":{"name":"(anonymous_7)","line":106,"loc":{"start":{"line":106,"column":20},"end":{"line":106,"column":34}}},"8":{"name":"(anonymous_8)","line":119,"loc":{"start":{"line":119,"column":10},"end":{"line":119,"column":24}}},"9":{"name":"(anonymous_9)","line":130,"loc":{"start":{"line":130,"column":15},"end":{"line":130,"column":23}}}},"statementMap":{"1":{"start":{"line":24,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":25,"column":4},"end":{"line":28,"column":6}},"3":{"start":{"line":39,"column":0},"end":{"line":137,"column":3}},"4":{"start":{"line":49,"column":8},"end":{"line":49,"column":66}},"5":{"start":{"line":61,"column":8},"end":{"line":61,"column":44}},"6":{"start":{"line":72,"column":8},"end":{"line":72,"column":67}},"7":{"start":{"line":84,"column":8},"end":{"line":84,"column":44}},"8":{"start":{"line":95,"column":8},"end":{"line":95,"column":62}},"9":{"start":{"line":107,"column":8},"end":{"line":110,"column":10}},"10":{"start":{"line":120,"column":8},"end":{"line":120,"column":51}},"11":{"start":{"line":131,"column":8},"end":{"line":134,"column":10}},"12":{"start":{"line":140,"column":0},"end":{"line":140,"column":27}}},"branchMap":{},"code":["/**"," * @fileoverview An object that creates fix commands for rules."," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","// none!","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Creates a fix command that inserts text at the specified index in the source text."," * @param {int} index The 0-based index at which to insert the new text."," * @param {string} text The text to insert."," * @returns {Object} The fix command."," * @private"," */","function insertTextAt(index, text) {","    return {","        range: [index, index],","        text","    };","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Creates code fixing commands for rules."," */","","const ruleFixer = Object.freeze({","","    /**","     * Creates a fix command that inserts text after the given node or token.","     * The fix is not applied until applyFixes() is called.","     * @param {ASTNode|Token} nodeOrToken The node or token to insert after.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    insertTextAfter(nodeOrToken, text) {","        return this.insertTextAfterRange(nodeOrToken.range, text);","    },","","    /**","     * Creates a fix command that inserts text after the specified range in the source text.","     * The fix is not applied until applyFixes() is called.","     * @param {int[]} range The range to replace, first item is start of range, second","     *      is end of range.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    insertTextAfterRange(range, text) {","        return insertTextAt(range[1], text);","    },","","    /**","     * Creates a fix command that inserts text before the given node or token.","     * The fix is not applied until applyFixes() is called.","     * @param {ASTNode|Token} nodeOrToken The node or token to insert before.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    insertTextBefore(nodeOrToken, text) {","        return this.insertTextBeforeRange(nodeOrToken.range, text);","    },","","    /**","     * Creates a fix command that inserts text before the specified range in the source text.","     * The fix is not applied until applyFixes() is called.","     * @param {int[]} range The range to replace, first item is start of range, second","     *      is end of range.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    insertTextBeforeRange(range, text) {","        return insertTextAt(range[0], text);","    },","","    /**","     * Creates a fix command that replaces text at the node or token.","     * The fix is not applied until applyFixes() is called.","     * @param {ASTNode|Token} nodeOrToken The node or token to remove.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    replaceText(nodeOrToken, text) {","        return this.replaceTextRange(nodeOrToken.range, text);","    },","","    /**","     * Creates a fix command that replaces text at the specified range in the source text.","     * The fix is not applied until applyFixes() is called.","     * @param {int[]} range The range to replace, first item is start of range, second","     *      is end of range.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    replaceTextRange(range, text) {","        return {","            range,","            text","        };","    },","","    /**","     * Creates a fix command that removes the node or token from the source.","     * The fix is not applied until applyFixes() is called.","     * @param {ASTNode|Token} nodeOrToken The node or token to remove.","     * @returns {Object} The fix command.","     */","    remove(nodeOrToken) {","        return this.removeRange(nodeOrToken.range);","    },","","    /**","     * Creates a fix command that removes the specified range of text from the source.","     * The fix is not applied until applyFixes() is called.","     * @param {int[]} range The range to remove, first item is start of range, second","     *      is end of range.","     * @returns {Object} The fix command.","     */","    removeRange(range) {","        return {","            range,","            text: \"\"","        };","    }","","});","","","module.exports = ruleFixer;",""],"l":{"24":1,"25":0,"39":1,"49":0,"61":0,"72":0,"84":0,"95":0,"107":0,"120":0,"131":0,"140":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/timing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/timing.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,1]},"f":{"1":0,"2":0,"3":0,"4":1,"5":0,"6":0},"fnMap":{"1":{"name":"alignLeft","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":33}},"skip":true},"2":{"name":"alignRight","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":34}},"skip":true},"3":{"name":"display","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":23}},"skip":true},"4":{"name":"(anonymous_4)","line":105,"loc":{"start":{"line":105,"column":18},"end":{"line":105,"column":29}},"skip":true},"5":{"name":"time","line":116,"loc":{"start":{"line":116,"column":4},"end":{"line":116,"column":27}},"skip":true},"6":{"name":"(anonymous_6)","line":121,"loc":{"start":{"line":121,"column":15},"end":{"line":121,"column":26}},"skip":true}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":23,"column":1},"skip":true},"2":{"start":{"line":22,"column":4},"end":{"line":22,"column":65},"skip":true},"3":{"start":{"line":34,"column":0},"end":{"line":36,"column":1},"skip":true},"4":{"start":{"line":35,"column":4},"end":{"line":35,"column":65},"skip":true},"5":{"start":{"line":42,"column":0},"end":{"line":42,"column":37}},"6":{"start":{"line":44,"column":0},"end":{"line":44,"column":50}},"7":{"start":{"line":45,"column":0},"end":{"line":45,"column":50}},"8":{"start":{"line":54,"column":0},"end":{"line":102,"column":1},"skip":true},"9":{"start":{"line":55,"column":4},"end":{"line":55,"column":18},"skip":true},"10":{"start":{"line":56,"column":4},"end":{"line":64,"column":22},"skip":true},"11":{"start":{"line":58,"column":12},"end":{"line":58,"column":35},"skip":true},"12":{"start":{"line":60,"column":12},"end":{"line":60,"column":26},"skip":true},"13":{"start":{"line":61,"column":12},"end":{"line":61,"column":31},"skip":true},"14":{"start":{"line":63,"column":24},"end":{"line":63,"column":35},"skip":true},"15":{"start":{"line":66,"column":4},"end":{"line":69,"column":7},"skip":true},"16":{"start":{"line":67,"column":8},"end":{"line":67,"column":58},"skip":true},"17":{"start":{"line":68,"column":8},"end":{"line":68,"column":35},"skip":true},"18":{"start":{"line":71,"column":4},"end":{"line":71,"column":26},"skip":true},"19":{"start":{"line":73,"column":4},"end":{"line":73,"column":22},"skip":true},"20":{"start":{"line":75,"column":4},"end":{"line":85,"column":7},"skip":true},"21":{"start":{"line":76,"column":8},"end":{"line":76,"column":31},"skip":true},"22":{"start":{"line":78,"column":8},"end":{"line":84,"column":9},"skip":true},"23":{"start":{"line":79,"column":12},"end":{"line":79,"column":36},"skip":true},"24":{"start":{"line":81,"column":12},"end":{"line":83,"column":13},"skip":true},"25":{"start":{"line":82,"column":16},"end":{"line":82,"column":30},"skip":true},"26":{"start":{"line":87,"column":4},"end":{"line":91,"column":6},"skip":true},"27":{"start":{"line":88,"column":8},"end":{"line":90,"column":24},"skip":true},"28":{"start":{"line":89,"column":34},"end":{"line":89,"column":67},"skip":true},"29":{"start":{"line":93,"column":4},"end":{"line":99,"column":18},"skip":true},"30":{"start":{"line":94,"column":8},"end":{"line":96,"column":9},"skip":true},"31":{"start":{"line":95,"column":12},"end":{"line":95,"column":16},"skip":true},"32":{"start":{"line":98,"column":8},"end":{"line":98,"column":45},"skip":true},"33":{"start":{"line":101,"column":4},"end":{"line":101,"column":34},"skip":true},"34":{"start":{"line":105,"column":0},"end":{"line":141,"column":5},"skip":true},"35":{"start":{"line":107,"column":4},"end":{"line":107,"column":37},"skip":true},"36":{"start":{"line":116,"column":4},"end":{"line":128,"column":5},"skip":true},"37":{"start":{"line":117,"column":8},"end":{"line":119,"column":9},"skip":true},"38":{"start":{"line":118,"column":12},"end":{"line":118,"column":26},"skip":true},"39":{"start":{"line":121,"column":8},"end":{"line":127,"column":10},"skip":true},"40":{"start":{"line":122,"column":12},"end":{"line":122,"column":37},"skip":true},"41":{"start":{"line":124,"column":12},"end":{"line":124,"column":66},"skip":true},"42":{"start":{"line":125,"column":12},"end":{"line":125,"column":34},"skip":true},"43":{"start":{"line":126,"column":12},"end":{"line":126,"column":49},"skip":true},"44":{"start":{"line":130,"column":4},"end":{"line":134,"column":5},"skip":true},"45":{"start":{"line":131,"column":8},"end":{"line":133,"column":11},"skip":true},"46":{"start":{"line":132,"column":12},"end":{"line":132,"column":26},"skip":true},"47":{"start":{"line":136,"column":4},"end":{"line":139,"column":6},"skip":true}},"branchMap":{"1":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":54},"end":{"line":22,"column":56},"skip":true},{"start":{"line":22,"column":60},"end":{"line":22,"column":63},"skip":true}]},"2":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":48},"end":{"line":35,"column":50},"skip":true},{"start":{"line":35,"column":54},"end":{"line":35,"column":57},"skip":true}]},"3":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":12},"end":{"line":81,"column":12},"skip":true},{"start":{"line":81,"column":12},"end":{"line":81,"column":12},"skip":true}]},"4":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":16},"end":{"line":81,"column":26},"skip":true},{"start":{"line":81,"column":30},"end":{"line":81,"column":43},"skip":true}]},"5":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8},"skip":true},{"start":{"line":94,"column":8},"end":{"line":94,"column":8},"skip":true}]},"6":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":23},"skip":true},{"start":{"line":94,"column":27},"end":{"line":94,"column":54},"skip":true}]},"7":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8},"skip":true},{"start":{"line":117,"column":8},"end":{"line":117,"column":8},"skip":true}]},"8":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":4},"end":{"line":130,"column":4},"skip":true},{"start":{"line":130,"column":4},"end":{"line":130,"column":4},"skip":true}]}},"code":["/**"," * @fileoverview Tracks performance of individual rules."," * @author Brandon Mills"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/* istanbul ignore next */","/**"," * Align the string to left"," * @param {string} str string to evaluate"," * @param {int} len length of the string"," * @param {string} ch delimiter character"," * @returns {string} modified string"," * @private"," */","function alignLeft(str, len, ch) {","    return str + new Array(len - str.length + 1).join(ch || \" \");","}","","/* istanbul ignore next */","/**"," * Align the string to right"," * @param {string} str string to evaluate"," * @param {int} len length of the string"," * @param {string} ch delimiter character"," * @returns {string} modified string"," * @private"," */","function alignRight(str, len, ch) {","    return new Array(len - str.length + 1).join(ch || \" \") + str;","}","","//------------------------------------------------------------------------------","// Module definition","//------------------------------------------------------------------------------","","const enabled = !!process.env.TIMING;","","const HEADERS = [\"Rule\", \"Time (ms)\", \"Relative\"];","const ALIGN = [alignLeft, alignRight, alignRight];","","/* istanbul ignore next */","/**"," * display the data"," * @param {Object} data Data object to be displayed"," * @returns {string} modified string"," * @private"," */","function display(data) {","    let total = 0;","    const rows = Object.keys(data)","        .map(key => {","            const time = data[key];","","            total += time;","            return [key, time];","        })","        .sort((a, b) => b[1] - a[1])","        .slice(0, 10);","","    rows.forEach(row => {","        row.push(`${(row[1] * 100 / total).toFixed(1)}%`);","        row[1] = row[1].toFixed(3);","    });","","    rows.unshift(HEADERS);","","    const widths = [];","","    rows.forEach(row => {","        const len = row.length;","","        for (let i = 0; i < len; i++) {","            const n = row[i].length;","","            if (!widths[i] || n > widths[i]) {","                widths[i] = n;","            }","        }","    });","","    const table = rows.map(row =>","        row","            .map((cell, index) => ALIGN[index](cell, widths[index]))","            .join(\" | \")","    );","","    table.splice(1, 0, widths.map((w, index) => {","        if (index !== 0 && index !== widths.length - 1) {","            w++;","        }","","        return ALIGN[index](\":\", w + 1, \"-\");","    }).join(\"|\"));","","    console.log(table.join(\"\\n\"));      // eslint-disable-line no-console","}","","/* istanbul ignore next */","module.exports = (function() {","","    const data = Object.create(null);","","    /**","     * Time the run","     * @param {*} key key from the data object","     * @param {Function} fn function to be called","     * @returns {Function} function to be executed","     * @private","     */","    function time(key, fn) {","        if (typeof data[key] === \"undefined\") {","            data[key] = 0;","        }","","        return function() {","            let t = process.hrtime();","","            fn.apply(null, Array.prototype.slice.call(arguments));","            t = process.hrtime(t);","            data[key] += t[0] * 1e3 + t[1] / 1e6;","        };","    }","","    if (enabled) {","        process.on(\"exit\", () => {","            display(data);","        });","    }","","    return {","        time,","        enabled","    };","","}());",""],"l":{"21":1,"22":1,"34":1,"35":1,"42":1,"44":1,"45":1,"54":1,"55":1,"56":1,"58":1,"60":1,"61":1,"63":1,"66":1,"67":1,"68":1,"71":1,"73":1,"75":1,"76":1,"78":1,"79":1,"81":1,"82":1,"87":1,"88":1,"89":1,"93":1,"94":1,"95":1,"98":1,"101":1,"105":1,"107":1,"116":1,"117":1,"118":1,"121":1,"122":1,"124":1,"125":1,"126":1,"130":1,"131":1,"132":1,"136":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/cli-engine.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/cli-engine.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":1,"83":0,"84":1,"85":0,"86":0,"87":0,"88":1,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1,"135":0,"136":0,"137":0,"138":1,"139":0,"140":0,"141":0,"142":0,"143":1,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":1,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":1,"201":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"calculateStatsPerFile","line":92,"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":41}}},"2":{"name":"calculateStatsPerRun","line":112,"loc":{"start":{"line":112,"column":0},"end":{"line":112,"column":39}}},"3":{"name":"multipassFix","line":136,"loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":45}}},"4":{"name":"processText","line":206,"loc":{"start":{"line":206,"column":0},"end":{"line":206,"column":75}}},"5":{"name":"processFile","line":300,"loc":{"start":{"line":300,"column":0},"end":{"line":300,"column":54}}},"6":{"name":"createIgnoreResult","line":316,"loc":{"start":{"line":316,"column":0},"end":{"line":316,"column":47}}},"7":{"name":"isErrorMessage","line":353,"loc":{"start":{"line":353,"column":0},"end":{"line":353,"column":33}}},"8":{"name":"getCacheFile","line":369,"loc":{"start":{"line":369,"column":0},"end":{"line":369,"column":38}}},"9":{"name":"getCacheFileForDirectory","line":384,"loc":{"start":{"line":384,"column":4},"end":{"line":384,"column":40}}},"10":{"name":"CLIEngine","line":440,"loc":{"start":{"line":440,"column":0},"end":{"line":440,"column":28}}},"11":{"name":"(anonymous_11)","line":487,"loc":{"start":{"line":487,"column":25},"end":{"line":487,"column":42}}},"12":{"name":"(anonymous_12)","line":526,"loc":{"start":{"line":526,"column":28},"end":{"line":526,"column":46}}},"13":{"name":"(anonymous_13)","line":551,"loc":{"start":{"line":551,"column":24},"end":{"line":551,"column":41}}},"14":{"name":"(anonymous_14)","line":567,"loc":{"start":{"line":567,"column":13},"end":{"line":567,"column":34}}},"15":{"name":"(anonymous_15)","line":577,"loc":{"start":{"line":577,"column":27},"end":{"line":577,"column":38}}},"16":{"name":"(anonymous_16)","line":586,"loc":{"start":{"line":586,"column":18},"end":{"line":586,"column":29}}},"17":{"name":"hashOfConfigFor","line":598,"loc":{"start":{"line":598,"column":8},"end":{"line":598,"column":43}}},"18":{"name":"executeOnFile","line":629,"loc":{"start":{"line":629,"column":8},"end":{"line":629,"column":54}}},"19":{"name":"(anonymous_19)","line":737,"loc":{"start":{"line":737,"column":17},"end":{"line":737,"column":47}}},"20":{"name":"(anonymous_20)","line":773,"loc":{"start":{"line":773,"column":20},"end":{"line":773,"column":31}}},"21":{"name":"(anonymous_21)","line":784,"loc":{"start":{"line":784,"column":17},"end":{"line":784,"column":28}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":33,"column":37}},"2":{"start":{"line":35,"column":0},"end":{"line":35,"column":52}},"3":{"start":{"line":92,"column":0},"end":{"line":104,"column":1}},"4":{"start":{"line":93,"column":4},"end":{"line":103,"column":7}},"5":{"start":{"line":94,"column":8},"end":{"line":98,"column":9}},"6":{"start":{"line":95,"column":12},"end":{"line":95,"column":30}},"7":{"start":{"line":97,"column":12},"end":{"line":97,"column":32}},"8":{"start":{"line":99,"column":8},"end":{"line":99,"column":20}},"9":{"start":{"line":112,"column":0},"end":{"line":121,"column":1}},"10":{"start":{"line":113,"column":4},"end":{"line":120,"column":7}},"11":{"start":{"line":114,"column":8},"end":{"line":114,"column":45}},"12":{"start":{"line":115,"column":8},"end":{"line":115,"column":49}},"13":{"start":{"line":116,"column":8},"end":{"line":116,"column":20}},"14":{"start":{"line":136,"column":0},"end":{"line":194,"column":1}},"15":{"start":{"line":137,"column":4},"end":{"line":137,"column":26}},"16":{"start":{"line":138,"column":4},"end":{"line":141,"column":23}},"17":{"start":{"line":152,"column":4},"end":{"line":176,"column":6}},"18":{"start":{"line":153,"column":8},"end":{"line":153,"column":21}},"19":{"start":{"line":155,"column":8},"end":{"line":155,"column":75}},"20":{"start":{"line":156,"column":8},"end":{"line":156,"column":56}},"21":{"start":{"line":158,"column":8},"end":{"line":158,"column":84}},"22":{"start":{"line":159,"column":8},"end":{"line":159,"column":83}},"23":{"start":{"line":163,"column":8},"end":{"line":165,"column":9}},"24":{"start":{"line":164,"column":12},"end":{"line":164,"column":18}},"25":{"start":{"line":168,"column":8},"end":{"line":168,"column":43}},"26":{"start":{"line":171,"column":8},"end":{"line":171,"column":34}},"27":{"start":{"line":183,"column":4},"end":{"line":185,"column":5}},"28":{"start":{"line":184,"column":8},"end":{"line":184,"column":68}},"29":{"start":{"line":189,"column":4},"end":{"line":189,"column":30}},"30":{"start":{"line":190,"column":4},"end":{"line":190,"column":30}},"31":{"start":{"line":192,"column":4},"end":{"line":192,"column":23}},"32":{"start":{"line":206,"column":0},"end":{"line":289,"column":1}},"33":{"start":{"line":209,"column":4},"end":{"line":209,"column":19}},"34":{"start":{"line":211,"column":4},"end":{"line":215,"column":20}},"35":{"start":{"line":217,"column":4},"end":{"line":220,"column":5}},"36":{"start":{"line":218,"column":8},"end":{"line":218,"column":42}},"37":{"start":{"line":219,"column":8},"end":{"line":219,"column":47}},"38":{"start":{"line":222,"column":4},"end":{"line":222,"column":36}},"39":{"start":{"line":223,"column":4},"end":{"line":223,"column":33}},"40":{"start":{"line":224,"column":4},"end":{"line":224,"column":52}},"41":{"start":{"line":226,"column":4},"end":{"line":228,"column":5}},"42":{"start":{"line":227,"column":8},"end":{"line":227,"column":40}},"43":{"start":{"line":230,"column":4},"end":{"line":230,"column":43}},"44":{"start":{"line":232,"column":4},"end":{"line":237,"column":5}},"45":{"start":{"line":233,"column":8},"end":{"line":236,"column":9}},"46":{"start":{"line":234,"column":12},"end":{"line":234,"column":72}},"47":{"start":{"line":235,"column":12},"end":{"line":235,"column":18}},"48":{"start":{"line":239,"column":4},"end":{"line":269,"column":5}},"49":{"start":{"line":240,"column":8},"end":{"line":240,"column":33}},"50":{"start":{"line":241,"column":8},"end":{"line":241,"column":66}},"51":{"start":{"line":242,"column":8},"end":{"line":242,"column":39}},"52":{"start":{"line":244,"column":8},"end":{"line":249,"column":11}},"53":{"start":{"line":245,"column":12},"end":{"line":248,"column":16}},"54":{"start":{"line":253,"column":8},"end":{"line":253,"column":72}},"55":{"start":{"line":257,"column":8},"end":{"line":268,"column":9}},"56":{"start":{"line":258,"column":12},"end":{"line":261,"column":15}},"57":{"start":{"line":262,"column":12},"end":{"line":262,"column":44}},"58":{"start":{"line":264,"column":12},"end":{"line":267,"column":15}},"59":{"start":{"line":271,"column":4},"end":{"line":271,"column":50}},"60":{"start":{"line":273,"column":4},"end":{"line":278,"column":6}},"61":{"start":{"line":280,"column":4},"end":{"line":282,"column":5}},"62":{"start":{"line":281,"column":8},"end":{"line":281,"column":43}},"63":{"start":{"line":284,"column":4},"end":{"line":286,"column":5}},"64":{"start":{"line":285,"column":8},"end":{"line":285,"column":29}},"65":{"start":{"line":288,"column":4},"end":{"line":288,"column":18}},"66":{"start":{"line":300,"column":0},"end":{"line":307,"column":1}},"67":{"start":{"line":302,"column":4},"end":{"line":303,"column":99}},"68":{"start":{"line":305,"column":4},"end":{"line":305,"column":18}},"69":{"start":{"line":316,"column":0},"end":{"line":344,"column":1}},"70":{"start":{"line":317,"column":4},"end":{"line":317,"column":16}},"71":{"start":{"line":318,"column":4},"end":{"line":318,"column":57}},"72":{"start":{"line":319,"column":4},"end":{"line":319,"column":94}},"73":{"start":{"line":320,"column":4},"end":{"line":320,"column":102}},"74":{"start":{"line":322,"column":4},"end":{"line":330,"column":5}},"75":{"start":{"line":323,"column":8},"end":{"line":323,"column":147}},"76":{"start":{"line":324,"column":11},"end":{"line":330,"column":5}},"77":{"start":{"line":325,"column":8},"end":{"line":325,"column":101}},"78":{"start":{"line":326,"column":11},"end":{"line":330,"column":5}},"79":{"start":{"line":327,"column":8},"end":{"line":327,"column":105}},"80":{"start":{"line":329,"column":8},"end":{"line":329,"column":104}},"81":{"start":{"line":332,"column":4},"end":{"line":343,"column":6}},"82":{"start":{"line":353,"column":0},"end":{"line":355,"column":1}},"83":{"start":{"line":354,"column":4},"end":{"line":354,"column":34}},"84":{"start":{"line":369,"column":0},"end":{"line":429,"column":1}},"85":{"start":{"line":375,"column":4},"end":{"line":375,"column":42}},"86":{"start":{"line":377,"column":4},"end":{"line":377,"column":59}},"87":{"start":{"line":378,"column":4},"end":{"line":378,"column":78}},"88":{"start":{"line":384,"column":4},"end":{"line":386,"column":5}},"89":{"start":{"line":385,"column":8},"end":{"line":385,"column":67}},"90":{"start":{"line":388,"column":4},"end":{"line":388,"column":18}},"91":{"start":{"line":390,"column":4},"end":{"line":394,"column":5}},"92":{"start":{"line":391,"column":8},"end":{"line":391,"column":52}},"93":{"start":{"line":393,"column":8},"end":{"line":393,"column":25}},"94":{"start":{"line":402,"column":4},"end":{"line":415,"column":5}},"95":{"start":{"line":409,"column":8},"end":{"line":411,"column":9}},"96":{"start":{"line":410,"column":12},"end":{"line":410,"column":46}},"97":{"start":{"line":414,"column":8},"end":{"line":414,"column":33}},"98":{"start":{"line":424,"column":4},"end":{"line":426,"column":5}},"99":{"start":{"line":425,"column":8},"end":{"line":425,"column":42}},"100":{"start":{"line":428,"column":4},"end":{"line":428,"column":29}},"101":{"start":{"line":440,"column":0},"end":{"line":478,"column":1}},"102":{"start":{"line":442,"column":4},"end":{"line":447,"column":6}},"103":{"start":{"line":453,"column":4},"end":{"line":453,"column":27}},"104":{"start":{"line":455,"column":4},"end":{"line":455,"column":107}},"105":{"start":{"line":463,"column":4},"end":{"line":463,"column":55}},"106":{"start":{"line":466,"column":4},"end":{"line":473,"column":5}},"107":{"start":{"line":467,"column":8},"end":{"line":467,"column":37}},"108":{"start":{"line":469,"column":8},"end":{"line":472,"column":11}},"109":{"start":{"line":470,"column":12},"end":{"line":470,"column":52}},"110":{"start":{"line":471,"column":12},"end":{"line":471,"column":38}},"111":{"start":{"line":475,"column":4},"end":{"line":477,"column":7}},"112":{"start":{"line":476,"column":8},"end":{"line":476,"column":77}},"113":{"start":{"line":487,"column":0},"end":{"line":519,"column":2}},"114":{"start":{"line":489,"column":4},"end":{"line":489,"column":22}},"115":{"start":{"line":492,"column":4},"end":{"line":492,"column":33}},"116":{"start":{"line":495,"column":4},"end":{"line":518,"column":5}},"117":{"start":{"line":498,"column":8},"end":{"line":498,"column":44}},"118":{"start":{"line":501,"column":8},"end":{"line":507,"column":9}},"119":{"start":{"line":502,"column":12},"end":{"line":502,"column":72}},"120":{"start":{"line":504,"column":12},"end":{"line":504,"column":54}},"121":{"start":{"line":506,"column":12},"end":{"line":506,"column":53}},"122":{"start":{"line":509,"column":8},"end":{"line":514,"column":9}},"123":{"start":{"line":510,"column":12},"end":{"line":510,"column":42}},"124":{"start":{"line":512,"column":12},"end":{"line":512,"column":105}},"125":{"start":{"line":513,"column":12},"end":{"line":513,"column":21}},"126":{"start":{"line":517,"column":8},"end":{"line":517,"column":20}},"127":{"start":{"line":526,"column":0},"end":{"line":544,"column":2}},"128":{"start":{"line":527,"column":4},"end":{"line":527,"column":24}},"129":{"start":{"line":529,"column":4},"end":{"line":541,"column":7}},"130":{"start":{"line":530,"column":8},"end":{"line":530,"column":72}},"131":{"start":{"line":532,"column":8},"end":{"line":540,"column":9}},"132":{"start":{"line":533,"column":12},"end":{"line":539,"column":14}},"133":{"start":{"line":543,"column":4},"end":{"line":543,"column":20}},"134":{"start":{"line":551,"column":0},"end":{"line":555,"column":2}},"135":{"start":{"line":552,"column":4},"end":{"line":554,"column":7}},"136":{"start":{"line":552,"column":36},"end":{"line":552,"column":67}},"137":{"start":{"line":553,"column":8},"end":{"line":553,"column":57}},"138":{"start":{"line":557,"column":0},"end":{"line":793,"column":2}},"139":{"start":{"line":568,"column":8},"end":{"line":568,"column":43}},"140":{"start":{"line":578,"column":8},"end":{"line":578,"column":72}},"141":{"start":{"line":587,"column":8},"end":{"line":590,"column":47}},"142":{"start":{"line":591,"column":8},"end":{"line":591,"column":23}},"143":{"start":{"line":598,"column":8},"end":{"line":620,"column":9}},"144":{"start":{"line":599,"column":12},"end":{"line":599,"column":60}},"145":{"start":{"line":601,"column":12},"end":{"line":603,"column":13}},"146":{"start":{"line":602,"column":16},"end":{"line":602,"column":32}},"147":{"start":{"line":606,"column":12},"end":{"line":617,"column":13}},"148":{"start":{"line":612,"column":16},"end":{"line":612,"column":43}},"149":{"start":{"line":614,"column":16},"end":{"line":614,"column":50}},"150":{"start":{"line":616,"column":16},"end":{"line":616,"column":80}},"151":{"start":{"line":619,"column":12},"end":{"line":619,"column":35}},"152":{"start":{"line":629,"column":8},"end":{"line":700,"column":9}},"153":{"start":{"line":630,"column":12},"end":{"line":631,"column":27}},"154":{"start":{"line":633,"column":12},"end":{"line":636,"column":13}},"155":{"start":{"line":634,"column":16},"end":{"line":634,"column":72}},"156":{"start":{"line":635,"column":16},"end":{"line":635,"column":23}},"157":{"start":{"line":638,"column":12},"end":{"line":668,"column":13}},"158":{"start":{"line":645,"column":16},"end":{"line":645,"column":67}},"159":{"start":{"line":646,"column":16},"end":{"line":646,"column":51}},"160":{"start":{"line":648,"column":16},"end":{"line":648,"column":57}},"161":{"start":{"line":650,"column":16},"end":{"line":650,"column":89}},"162":{"start":{"line":652,"column":16},"end":{"line":665,"column":17}},"163":{"start":{"line":653,"column":20},"end":{"line":653,"column":77}},"164":{"start":{"line":661,"column":20},"end":{"line":661,"column":58}},"165":{"start":{"line":664,"column":20},"end":{"line":664,"column":27}},"166":{"start":{"line":667,"column":16},"end":{"line":667,"column":36}},"167":{"start":{"line":670,"column":12},"end":{"line":670,"column":44}},"168":{"start":{"line":672,"column":12},"end":{"line":672,"column":69}},"169":{"start":{"line":674,"column":12},"end":{"line":697,"column":13}},"170":{"start":{"line":681,"column":16},"end":{"line":696,"column":17}},"171":{"start":{"line":682,"column":20},"end":{"line":682,"column":73}},"172":{"start":{"line":685,"column":20},"end":{"line":685,"column":52}},"173":{"start":{"line":694,"column":20},"end":{"line":694,"column":64}},"174":{"start":{"line":695,"column":20},"end":{"line":695,"column":50}},"175":{"start":{"line":699,"column":12},"end":{"line":699,"column":30}},"176":{"start":{"line":702,"column":8},"end":{"line":702,"column":37}},"177":{"start":{"line":706,"column":8},"end":{"line":706,"column":58}},"178":{"start":{"line":707,"column":8},"end":{"line":707,"column":72}},"179":{"start":{"line":709,"column":8},"end":{"line":711,"column":11}},"180":{"start":{"line":710,"column":12},"end":{"line":710,"column":63}},"181":{"start":{"line":713,"column":8},"end":{"line":713,"column":52}},"182":{"start":{"line":715,"column":8},"end":{"line":719,"column":9}},"183":{"start":{"line":718,"column":12},"end":{"line":718,"column":34}},"184":{"start":{"line":721,"column":8},"end":{"line":721,"column":66}},"185":{"start":{"line":723,"column":8},"end":{"line":727,"column":10}},"186":{"start":{"line":739,"column":8},"end":{"line":742,"column":53}},"187":{"start":{"line":745,"column":8},"end":{"line":747,"column":9}},"188":{"start":{"line":746,"column":12},"end":{"line":746,"column":59}},"189":{"start":{"line":749,"column":8},"end":{"line":755,"column":9}},"190":{"start":{"line":750,"column":12},"end":{"line":752,"column":13}},"191":{"start":{"line":751,"column":16},"end":{"line":751,"column":72}},"192":{"start":{"line":754,"column":12},"end":{"line":754,"column":108}},"193":{"start":{"line":757,"column":8},"end":{"line":757,"column":52}},"194":{"start":{"line":759,"column":8},"end":{"line":763,"column":10}},"195":{"start":{"line":774,"column":8},"end":{"line":774,"column":54}},"196":{"start":{"line":776,"column":8},"end":{"line":776,"column":48}},"197":{"start":{"line":785,"column":8},"end":{"line":785,"column":70}},"198":{"start":{"line":786,"column":8},"end":{"line":786,"column":60}},"199":{"start":{"line":788,"column":8},"end":{"line":788,"column":51}},"200":{"start":{"line":795,"column":0},"end":{"line":795,"column":32}},"201":{"start":{"line":797,"column":0},"end":{"line":797,"column":27}}},"branchMap":{"1":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8}},{"start":{"line":94,"column":8},"end":{"line":94,"column":8}}]},"2":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":25}},{"start":{"line":94,"column":29},"end":{"line":94,"column":51}}]},"3":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":8},"end":{"line":163,"column":8}},{"start":{"line":163,"column":8},"end":{"line":163,"column":8}}]},"4":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":12},"end":{"line":163,"column":33}},{"start":{"line":163,"column":37},"end":{"line":163,"column":54}}]},"5":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":16},"end":{"line":168,"column":21}},{"start":{"line":168,"column":25},"end":{"line":168,"column":42}}]},"6":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":8},"end":{"line":174,"column":25}},{"start":{"line":175,"column":8},"end":{"line":175,"column":31}}]},"7":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":4},"end":{"line":183,"column":4}},{"start":{"line":183,"column":4},"end":{"line":183,"column":4}}]},"8":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":4},"end":{"line":217,"column":4}},{"start":{"line":217,"column":4},"end":{"line":217,"column":4}}]},"9":{"line":222,"type":"binary-expr","locations":[{"start":{"line":222,"column":15},"end":{"line":222,"column":23}},{"start":{"line":222,"column":27},"end":{"line":222,"column":35}}]},"10":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"11":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":233,"column":8}},{"start":{"line":233,"column":8},"end":{"line":233,"column":8}}]},"12":{"line":233,"type":"binary-expr","locations":[{"start":{"line":233,"column":12},"end":{"line":233,"column":44}},{"start":{"line":233,"column":48},"end":{"line":233,"column":121}}]},"13":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":239,"column":4}},{"start":{"line":239,"column":4},"end":{"line":239,"column":4}}]},"14":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":8},"end":{"line":257,"column":8}},{"start":{"line":257,"column":8},"end":{"line":257,"column":8}}]},"15":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":4},"end":{"line":280,"column":4}},{"start":{"line":280,"column":4},"end":{"line":280,"column":4}}]},"16":{"line":280,"type":"binary-expr","locations":[{"start":{"line":280,"column":8},"end":{"line":280,"column":19}},{"start":{"line":280,"column":23},"end":{"line":280,"column":40}}]},"17":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":4},"end":{"line":284,"column":4}},{"start":{"line":284,"column":4},"end":{"line":284,"column":4}}]},"18":{"line":284,"type":"binary-expr","locations":[{"start":{"line":284,"column":8},"end":{"line":284,"column":51}},{"start":{"line":284,"column":55},"end":{"line":284,"column":91}}]},"19":{"line":319,"type":"binary-expr","locations":[{"start":{"line":319,"column":28},"end":{"line":319,"column":35}},{"start":{"line":319,"column":39},"end":{"line":319,"column":93}}]},"20":{"line":320,"type":"binary-expr","locations":[{"start":{"line":320,"column":32},"end":{"line":320,"column":39}},{"start":{"line":320,"column":43},"end":{"line":320,"column":101}}]},"21":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":4},"end":{"line":322,"column":4}},{"start":{"line":322,"column":4},"end":{"line":322,"column":4}}]},"22":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":11},"end":{"line":324,"column":11}},{"start":{"line":324,"column":11},"end":{"line":324,"column":11}}]},"23":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":11},"end":{"line":326,"column":11}},{"start":{"line":326,"column":11},"end":{"line":326,"column":11}}]},"24":{"line":402,"type":"if","locations":[{"start":{"line":402,"column":4},"end":{"line":402,"column":4}},{"start":{"line":402,"column":4},"end":{"line":402,"column":4}}]},"25":{"line":409,"type":"if","locations":[{"start":{"line":409,"column":8},"end":{"line":409,"column":8}},{"start":{"line":409,"column":8},"end":{"line":409,"column":8}}]},"26":{"line":409,"type":"binary-expr","locations":[{"start":{"line":409,"column":12},"end":{"line":409,"column":35}},{"start":{"line":409,"column":39},"end":{"line":409,"column":58}}]},"27":{"line":424,"type":"if","locations":[{"start":{"line":424,"column":4},"end":{"line":424,"column":4}},{"start":{"line":424,"column":4},"end":{"line":424,"column":4}}]},"28":{"line":455,"type":"binary-expr","locations":[{"start":{"line":455,"column":35},"end":{"line":455,"column":61}},{"start":{"line":455,"column":65},"end":{"line":455,"column":87}}]},"29":{"line":466,"type":"if","locations":[{"start":{"line":466,"column":4},"end":{"line":466,"column":4}},{"start":{"line":466,"column":4},"end":{"line":466,"column":4}}]},"30":{"line":475,"type":"binary-expr","locations":[{"start":{"line":475,"column":16},"end":{"line":475,"column":34}},{"start":{"line":475,"column":38},"end":{"line":475,"column":40}}]},"31":{"line":492,"type":"binary-expr","locations":[{"start":{"line":492,"column":13},"end":{"line":492,"column":19}},{"start":{"line":492,"column":23},"end":{"line":492,"column":32}}]},"32":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":4},"end":{"line":495,"column":4}},{"start":{"line":495,"column":4},"end":{"line":495,"column":4}}]},"33":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":8},"end":{"line":501,"column":8}},{"start":{"line":501,"column":8},"end":{"line":501,"column":8}}]},"34":{"line":502,"type":"cond-expr","locations":[{"start":{"line":502,"column":39},"end":{"line":502,"column":55}},{"start":{"line":502,"column":58},"end":{"line":502,"column":71}}]},"35":{"line":532,"type":"if","locations":[{"start":{"line":532,"column":8},"end":{"line":532,"column":8}},{"start":{"line":532,"column":8},"end":{"line":532,"column":8}}]},"36":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":12},"end":{"line":601,"column":12}},{"start":{"line":601,"column":12},"end":{"line":601,"column":12}}]},"37":{"line":606,"type":"if","locations":[{"start":{"line":606,"column":12},"end":{"line":606,"column":12}},{"start":{"line":606,"column":12},"end":{"line":606,"column":12}}]},"38":{"line":633,"type":"if","locations":[{"start":{"line":633,"column":12},"end":{"line":633,"column":12}},{"start":{"line":633,"column":12},"end":{"line":633,"column":12}}]},"39":{"line":638,"type":"if","locations":[{"start":{"line":638,"column":12},"end":{"line":638,"column":12}},{"start":{"line":638,"column":12},"end":{"line":638,"column":12}}]},"40":{"line":646,"type":"binary-expr","locations":[{"start":{"line":646,"column":29},"end":{"line":646,"column":44}},{"start":{"line":646,"column":48},"end":{"line":646,"column":50}}]},"41":{"line":650,"type":"binary-expr","locations":[{"start":{"line":650,"column":32},"end":{"line":650,"column":50}},{"start":{"line":650,"column":54},"end":{"line":650,"column":88}}]},"42":{"line":652,"type":"if","locations":[{"start":{"line":652,"column":16},"end":{"line":652,"column":16}},{"start":{"line":652,"column":16},"end":{"line":652,"column":16}}]},"43":{"line":674,"type":"if","locations":[{"start":{"line":674,"column":12},"end":{"line":674,"column":12}},{"start":{"line":674,"column":12},"end":{"line":674,"column":12}}]},"44":{"line":681,"type":"if","locations":[{"start":{"line":681,"column":16},"end":{"line":681,"column":16}},{"start":{"line":681,"column":16},"end":{"line":681,"column":16}}]},"45":{"line":681,"type":"binary-expr","locations":[{"start":{"line":681,"column":20},"end":{"line":681,"column":38}},{"start":{"line":681,"column":42},"end":{"line":681,"column":62}}]},"46":{"line":715,"type":"if","locations":[{"start":{"line":715,"column":8},"end":{"line":715,"column":8}},{"start":{"line":715,"column":8},"end":{"line":715,"column":8}}]},"47":{"line":745,"type":"if","locations":[{"start":{"line":745,"column":8},"end":{"line":745,"column":8}},{"start":{"line":745,"column":8},"end":{"line":745,"column":8}}]},"48":{"line":745,"type":"binary-expr","locations":[{"start":{"line":745,"column":12},"end":{"line":745,"column":20}},{"start":{"line":745,"column":24},"end":{"line":745,"column":50}}]},"49":{"line":749,"type":"if","locations":[{"start":{"line":749,"column":8},"end":{"line":749,"column":8}},{"start":{"line":749,"column":8},"end":{"line":749,"column":8}}]},"50":{"line":749,"type":"binary-expr","locations":[{"start":{"line":749,"column":12},"end":{"line":749,"column":20}},{"start":{"line":749,"column":24},"end":{"line":749,"column":55}}]},"51":{"line":750,"type":"if","locations":[{"start":{"line":750,"column":12},"end":{"line":750,"column":12}},{"start":{"line":750,"column":12},"end":{"line":750,"column":12}}]}},"code":["/**"," * @fileoverview Main CLI object."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","/*"," * The CLI object should *not* call process.exit() directly. It should only return"," * exit codes. This allows other programs to use the CLI object and still control"," * when the program exits."," */","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    rules = require(\"./rules\"),","    eslint = require(\"./eslint\"),","    defaultOptions = require(\"../conf/cli-options\"),","    IgnoredPaths = require(\"./ignored-paths\"),","    Config = require(\"./config\"),","    Plugins = require(\"./config/plugins\"),","    fileEntryCache = require(\"file-entry-cache\"),","    globUtil = require(\"./util/glob-util\"),","    SourceCodeFixer = require(\"./util/source-code-fixer\"),","    validator = require(\"./config/config-validator\"),","    stringify = require(\"json-stable-stringify\"),","    hash = require(\"./util/hash\"),","","    pkg = require(\"../package.json\");","","const debug = require(\"debug\")(\"eslint:cli-engine\");","","//------------------------------------------------------------------------------","// Typedefs","//------------------------------------------------------------------------------","","/**"," * The options to configure a CLI engine with."," * @typedef {Object} CLIEngineOptions"," * @property {boolean} allowInlineConfig Enable or disable inline configuration comments."," * @property {boolean|Object} baseConfig Base config object. True enables recommend rules and environments."," * @property {boolean} cache Enable result caching."," * @property {string} cacheLocation The cache file to use instead of .eslintcache."," * @property {string} configFile The configuration file to use."," * @property {string} cwd The value to use for the current working directory."," * @property {string[]} envs An array of environments to load."," * @property {string[]} extensions An array of file extensions to check."," * @property {boolean} fix Execute in autofix mode."," * @property {string[]} globals An array of global variables to declare."," * @property {boolean} ignore False disables use of .eslintignore."," * @property {string} ignorePath The ignore file to use instead of .eslintignore."," * @property {string} ignorePattern A glob pattern of files to ignore."," * @property {boolean} useEslintrc False disables looking for .eslintrc"," * @property {string} parser The name of the parser to use."," * @property {Object} parserOptions An object of parserOption settings to use."," * @property {string[]} plugins An array of plugins to load."," * @property {Object<string,*>} rules An object of rules to use."," * @property {string[]} rulePaths An array of directories to load custom rules from."," */","","/**"," * A linting warning or error."," * @typedef {Object} LintMessage"," * @property {string} message The message to display to the user."," */","","/**"," * A linting result."," * @typedef {Object} LintResult"," * @property {string} filePath The path to the file that was linted."," * @property {LintMessage[]} messages All of the messages for the result."," * @property {number} errorCount Number or errors for the result."," * @property {number} warningCount Number or warnings for the result."," * @property {string=} [source] The source code of the file that was linted."," * @property {string=} [output] The source code of the file that was linted, with as many fixes applied as possible."," */","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * It will calculate the error and warning count for collection of messages per file"," * @param {Object[]} messages - Collection of messages"," * @returns {Object} Contains the stats"," * @private"," */","function calculateStatsPerFile(messages) {","    return messages.reduce((stat, message) => {","        if (message.fatal || message.severity === 2) {","            stat.errorCount++;","        } else {","            stat.warningCount++;","        }","        return stat;","    }, {","        errorCount: 0,","        warningCount: 0","    });","}","","/**"," * It will calculate the error and warning count for collection of results from all files"," * @param {Object[]} results - Collection of messages from all the files"," * @returns {Object} Contains the stats"," * @private"," */","function calculateStatsPerRun(results) {","    return results.reduce((stat, result) => {","        stat.errorCount += result.errorCount;","        stat.warningCount += result.warningCount;","        return stat;","    }, {","        errorCount: 0,","        warningCount: 0","    });","}","","/**"," * Performs multiple autofix passes over the text until as many fixes as possible"," * have been applied."," * @param {string} text The source text to apply fixes to."," * @param {Object} config The ESLint config object to use."," * @param {Object} options The ESLint options object to use."," * @param {string} options.filename The filename from which the text was read."," * @param {boolean} options.allowInlineConfig Flag indicating if inline comments"," *      should be allowed."," * @returns {Object} The result of the fix operation as returned from the"," *      SourceCodeFixer."," * @private"," */","function multipassFix(text, config, options) {","    const MAX_PASSES = 10;","    let messages = [],","        fixedResult,","        fixed = false,","        passNumber = 0;","","    /**","     * This loop continues until one of the following is true:","     *","     * 1. No more fixes have been applied.","     * 2. Ten passes have been made.","     *","     * That means anytime a fix is successfully applied, there will be another pass.","     * Essentially, guaranteeing a minimum of two passes.","     */","    do {","        passNumber++;","","        debug(`Linting code for ${options.filename} (pass ${passNumber})`);","        messages = eslint.verify(text, config, options);","","        debug(`Generating fixed text for ${options.filename} (pass ${passNumber})`);","        fixedResult = SourceCodeFixer.applyFixes(eslint.getSourceCode(), messages);","","        // stop if there are any syntax errors.","        // 'fixedResult.output' is a empty string.","        if (messages.length === 1 && messages[0].fatal) {","            break;","        }","","        // keep track if any fixes were ever applied - important for return value","        fixed = fixed || fixedResult.fixed;","","        // update to use the fixed output instead of the original text","        text = fixedResult.output;","","    } while (","        fixedResult.fixed &&","        passNumber < MAX_PASSES","    );","","","    /*","     * If the last result had fixes, we need to lint again to be sure we have","     * the most up-to-date information.","     */","    if (fixedResult.fixed) {","        fixedResult.messages = eslint.verify(text, config, options);","    }","","","    // ensure the last result properly reflects if fixes were done","    fixedResult.fixed = fixed;","    fixedResult.output = text;","","    return fixedResult;","","}","","/**"," * Processes an source code using ESLint."," * @param {string} text The source code to check."," * @param {Object} configHelper The configuration options for ESLint."," * @param {string} filename An optional string representing the texts filename."," * @param {boolean} fix Indicates if fixes should be processed."," * @param {boolean} allowInlineConfig Allow/ignore comments that change config."," * @returns {LintResult} The results for linting on this text."," * @private"," */","function processText(text, configHelper, filename, fix, allowInlineConfig) {","","    // clear all existing settings for a new file","    eslint.reset();","","    let filePath,","        messages,","        fileExtension,","        processor,","        fixedResult;","","    if (filename) {","        filePath = path.resolve(filename);","        fileExtension = path.extname(filename);","    }","","    filename = filename || \"<text>\";","    debug(`Linting ${filename}`);","    const config = configHelper.getConfig(filePath);","","    if (config.plugins) {","        Plugins.loadAll(config.plugins);","    }","","    const loadedPlugins = Plugins.getAll();","","    for (const plugin in loadedPlugins) {","        if (loadedPlugins[plugin].processors && Object.keys(loadedPlugins[plugin].processors).indexOf(fileExtension) >= 0) {","            processor = loadedPlugins[plugin].processors[fileExtension];","            break;","        }","    }","","    if (processor) {","        debug(\"Using processor\");","        const parsedBlocks = processor.preprocess(text, filename);","        const unprocessedMessages = [];","","        parsedBlocks.forEach(block => {","            unprocessedMessages.push(eslint.verify(block, config, {","                filename,","                allowInlineConfig","            }));","        });","","        // TODO(nzakas): Figure out how fixes might work for processors","","        messages = processor.postprocess(unprocessedMessages, filename);","","    } else {","","        if (fix) {","            fixedResult = multipassFix(text, config, {","                filename,","                allowInlineConfig","            });","            messages = fixedResult.messages;","        } else {","            messages = eslint.verify(text, config, {","                filename,","                allowInlineConfig","            });","        }","    }","","    const stats = calculateStatsPerFile(messages);","","    const result = {","        filePath: filename,","        messages,","        errorCount: stats.errorCount,","        warningCount: stats.warningCount","    };","","    if (fixedResult && fixedResult.fixed) {","        result.output = fixedResult.output;","    }","","    if (result.errorCount + result.warningCount > 0 && typeof result.output === \"undefined\") {","        result.source = text;","    }","","    return result;","}","","/**"," * Processes an individual file using ESLint. Files used here are known to"," * exist, so no need to check that here."," * @param {string} filename The filename of the file being checked."," * @param {Object} configHelper The configuration options for ESLint."," * @param {Object} options The CLIEngine options object."," * @returns {LintResult} The results for linting on this file."," * @private"," */","function processFile(filename, configHelper, options) {","","    const text = fs.readFileSync(path.resolve(filename), \"utf8\"),","        result = processText(text, configHelper, filename, options.fix, options.allowInlineConfig);","","    return result;","","}","","/**"," * Returns result with warning by ignore settings"," * @param {string} filePath - File path of checked code"," * @param {string} baseDir  - Absolute path of base directory"," * @returns {LintResult} Result with single warning"," * @private"," */","function createIgnoreResult(filePath, baseDir) {","    let message;","    const isHidden = /^\\./.test(path.basename(filePath));","    const isInNodeModules = baseDir && /^node_modules/.test(path.relative(baseDir, filePath));","    const isInBowerComponents = baseDir && /^bower_components/.test(path.relative(baseDir, filePath));","","    if (isHidden) {","        message = \"File ignored by default.  Use a negated ignore pattern (like \\\"--ignore-pattern '!<relative/path/to/filename>'\\\") to override.\";","    } else if (isInNodeModules) {","        message = \"File ignored by default. Use \\\"--ignore-pattern '!node_modules/*'\\\" to override.\";","    } else if (isInBowerComponents) {","        message = \"File ignored by default. Use \\\"--ignore-pattern '!bower_components/*'\\\" to override.\";","    } else {","        message = \"File ignored because of a matching ignore pattern. Use \\\"--no-ignore\\\" to override.\";","    }","","    return {","        filePath: path.resolve(filePath),","        messages: [","            {","                fatal: false,","                severity: 1,","                message","            }","        ],","        errorCount: 0,","        warningCount: 1","    };","}","","","/**"," * Checks if the given message is an error message."," * @param {Object} message The message to check."," * @returns {boolean} Whether or not the message is an error message."," * @private"," */","function isErrorMessage(message) {","    return message.severity === 2;","}","","","/**"," * return the cacheFile to be used by eslint, based on whether the provided parameter is"," * a directory or looks like a directory (ends in `path.sep`), in which case the file"," * name will be the `cacheFile/.cache_hashOfCWD`"," *"," * if cacheFile points to a file or looks like a file then in will just use that file"," *"," * @param {string} cacheFile The name of file to be used to store the cache"," * @param {string} cwd Current working directory"," * @returns {string} the resolved path to the cache file"," */","function getCacheFile(cacheFile, cwd) {","","    /*","     * make sure the path separators are normalized for the environment/os","     * keeping the trailing path separator if present","     */","    cacheFile = path.normalize(cacheFile);","","    const resolvedCacheFile = path.resolve(cwd, cacheFile);","    const looksLikeADirectory = cacheFile[cacheFile.length - 1 ] === path.sep;","","    /**","     * return the name for the cache file in case the provided parameter is a directory","     * @returns {string} the resolved path to the cacheFile","     */","    function getCacheFileForDirectory() {","        return path.join(resolvedCacheFile, `.cache_${hash(cwd)}`);","    }","","    let fileStats;","","    try {","        fileStats = fs.lstatSync(resolvedCacheFile);","    } catch (ex) {","        fileStats = null;","    }","","","    /*","     * in case the file exists we need to verify if the provided path","     * is a directory or a file. If it is a directory we want to create a file","     * inside that directory","     */","    if (fileStats) {","","        /*","         * is a directory or is a file, but the original file the user provided","         * looks like a directory but `path.resolve` removed the `last path.sep`","         * so we need to still treat this like a directory","         */","        if (fileStats.isDirectory() || looksLikeADirectory) {","            return getCacheFileForDirectory();","        }","","        // is file so just use that file","        return resolvedCacheFile;","    }","","    /*","     * here we known the file or directory doesn't exist,","     * so we will try to infer if its a directory if it looks like a directory","     * for the current operating system.","     */","","    // if the last character passed is a path separator we assume is a directory","    if (looksLikeADirectory) {","        return getCacheFileForDirectory();","    }","","    return resolvedCacheFile;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Creates a new instance of the core CLI engine."," * @param {CLIEngineOptions} options The options for this instance."," * @constructor"," */","function CLIEngine(options) {","","    options = Object.assign(","        Object.create(null),","        defaultOptions,","        { cwd: process.cwd() },","        options","    );","","    /**","     * Stored options for this instance","     * @type {Object}","     */","    this.options = options;","","    const cacheFile = getCacheFile(this.options.cacheLocation || this.options.cacheFile, this.options.cwd);","","    /**","     * Cache used to avoid operating on files that haven't changed since the","     * last successful execution (e.g., file passed linting with no errors and","     * no warnings).","     * @type {Object}","     */","    this._fileCache = fileEntryCache.create(cacheFile);","","    // load in additional rules","    if (this.options.rulePaths) {","        const cwd = this.options.cwd;","","        this.options.rulePaths.forEach(rulesdir => {","            debug(`Loading rules from ${rulesdir}`);","            rules.load(rulesdir, cwd);","        });","    }","","    Object.keys(this.options.rules || {}).forEach(name => {","        validator.validateRuleOptions(name, this.options.rules[name], \"CLI\");","    });","}","","/**"," * Returns the formatter representing the given format or null if no formatter"," * with the given name can be found."," * @param {string} [format] The name of the format to load or the path to a"," *      custom formatter."," * @returns {Function} The formatter function or null if not found."," */","CLIEngine.getFormatter = function(format) {","","    let formatterPath;","","    // default is stylish","    format = format || \"stylish\";","","    // only strings are valid formatters","    if (typeof format === \"string\") {","","        // replace \\ with / for Windows compatibility","        format = format.replace(/\\\\/g, \"/\");","","        // if there's a slash, then it's a file","        if (format.indexOf(\"/\") > -1) {","            const cwd = this.options ? this.options.cwd : process.cwd();","","            formatterPath = path.resolve(cwd, format);","        } else {","            formatterPath = `./formatters/${format}`;","        }","","        try {","            return require(formatterPath);","        } catch (ex) {","            ex.message = `There was a problem loading formatter: ${formatterPath}\\nError: ${ex.message}`;","            throw ex;","        }","","    } else {","        return null;","    }","};","","/**"," * Returns results that only contains errors."," * @param {LintResult[]} results The results to filter."," * @returns {LintResult[]} The filtered results."," */","CLIEngine.getErrorResults = function(results) {","    const filtered = [];","","    results.forEach(result => {","        const filteredMessages = result.messages.filter(isErrorMessage);","","        if (filteredMessages.length > 0) {","            filtered.push(","                Object.assign(result, {","                    messages: filteredMessages,","                    errorCount: filteredMessages.length,","                    warningCount: 0","                })","            );","        }","    });","","    return filtered;","};","","/**"," * Outputs fixes from the given results to files."," * @param {Object} report The report object created by CLIEngine."," * @returns {void}"," */","CLIEngine.outputFixes = function(report) {","    report.results.filter(result => result.hasOwnProperty(\"output\")).forEach(result => {","        fs.writeFileSync(result.filePath, result.output);","    });","};","","CLIEngine.prototype = {","","    constructor: CLIEngine,","","    /**","     * Add a plugin by passing it's configuration","     * @param {string} name Name of the plugin.","     * @param {Object} pluginobject Plugin configuration object.","     * @returns {void}","     */","    addPlugin(name, pluginobject) {","        Plugins.define(name, pluginobject);","    },","","    /**","     * Resolves the patterns passed into executeOnFiles() into glob-based patterns","     * for easier handling.","     * @param {string[]} patterns The file patterns passed on the command line.","     * @returns {string[]} The equivalent glob patterns.","     */","    resolveFileGlobPatterns(patterns) {","        return globUtil.resolveFileGlobPatterns(patterns, this.options);","    },","","    /**","     * Executes the current configuration on an array of file and directory names.","     * @param {string[]} patterns An array of file and directory names.","     * @returns {Object} The results for all files that were linted.","     */","    executeOnFiles(patterns) {","        const results = [],","            options = this.options,","            fileCache = this._fileCache,","            configHelper = new Config(options);","        let prevConfig; // the previous configuration used","","        /**","         * Calculates the hash of the config file used to validate a given file","         * @param  {string} filename The path of the file to retrieve a config object for to calculate the hash","         * @returns {string}         the hash of the config","         */","        function hashOfConfigFor(filename) {","            const config = configHelper.getConfig(filename);","","            if (!prevConfig) {","                prevConfig = {};","            }","","            // reuse the previously hashed config if the config hasn't changed","            if (prevConfig.config !== config) {","","                /*","                 * config changed so we need to calculate the hash of the config","                 * and the hash of the plugins being used","                 */","                prevConfig.config = config;","","                const eslintVersion = pkg.version;","","                prevConfig.hash = hash(`${eslintVersion}_${stringify(config)}`);","            }","","            return prevConfig.hash;","        }","","        /**","         * Executes the linter on a file defined by the `filename`. Skips","         * unsupported file extensions and any files that are already linted.","         * @param {string} filename The resolved filename of the file to be linted","         * @param {boolean} warnIgnored always warn when a file is ignored","         * @returns {void}","         */","        function executeOnFile(filename, warnIgnored) {","            let hashOfConfig,","                descriptor;","","            if (warnIgnored) {","                results.push(createIgnoreResult(filename, options.cwd));","                return;","            }","","            if (options.cache) {","","                /*","                 * get the descriptor for this file","                 * with the metadata and the flag that determines if","                 * the file has changed","                 */","                descriptor = fileCache.getFileDescriptor(filename);","                const meta = descriptor.meta || {};","","                hashOfConfig = hashOfConfigFor(filename);","","                const changed = descriptor.changed || meta.hashOfConfig !== hashOfConfig;","","                if (!changed) {","                    debug(`Skipping file since hasn't changed: ${filename}`);","","                    /*","                     * Add the the cached results (always will be 0 error and","                     * 0 warnings). We should not cache results for files that","                     * failed, in order to guarantee that next execution will","                     * process those files as well.","                     */","                    results.push(descriptor.meta.results);","","                    // move to the next file","                    return;","                }","            } else {","                fileCache.destroy();","            }","","            debug(`Processing ${filename}`);","","            const res = processFile(filename, configHelper, options);","","            if (options.cache) {","","                /*","                 * if a file contains errors or warnings we don't want to","                 * store the file in the cache so we can guarantee that","                 * next execution will also operate on this file","                 */","                if (res.errorCount > 0 || res.warningCount > 0) {","                    debug(`File has problems, skipping it: ${filename}`);","","                    // remove the entry from the cache","                    fileCache.removeEntry(filename);","                } else {","","                    /*","                     * since the file passed we store the result here","                     * TODO: check this as we might not need to store the","                     * successful runs as it will always should be 0 errors and","                     * 0 warnings.","                     */","                    descriptor.meta.hashOfConfig = hashOfConfig;","                    descriptor.meta.results = res;","                }","            }","","            results.push(res);","        }","","        const startTime = Date.now();","","","","        patterns = this.resolveFileGlobPatterns(patterns);","        const fileList = globUtil.listFilesToProcess(patterns, options);","","        fileList.forEach(fileInfo => {","            executeOnFile(fileInfo.filename, fileInfo.ignored);","        });","","        const stats = calculateStatsPerRun(results);","","        if (options.cache) {","","            // persist the cache to disk","            fileCache.reconcile();","        }","","        debug(`Linting complete in: ${Date.now() - startTime}ms`);","","        return {","            results,","            errorCount: stats.errorCount,","            warningCount: stats.warningCount","        };","    },","","    /**","     * Executes the current configuration on text.","     * @param {string} text A string of JavaScript code to lint.","     * @param {string} filename An optional string representing the texts filename.","     * @param {boolean} warnIgnored Always warn when a file is ignored","     * @returns {Object} The results for the linting.","     */","    executeOnText(text, filename, warnIgnored) {","","        const results = [],","            options = this.options,","            configHelper = new Config(options),","            ignoredPaths = new IgnoredPaths(options);","","        // resolve filename based on options.cwd (for reporting, ignoredPaths also resolves)","        if (filename && !path.isAbsolute(filename)) {","            filename = path.resolve(options.cwd, filename);","        }","","        if (filename && ignoredPaths.contains(filename)) {","            if (warnIgnored) {","                results.push(createIgnoreResult(filename, options.cwd));","            }","        } else {","            results.push(processText(text, configHelper, filename, options.fix, options.allowInlineConfig));","        }","","        const stats = calculateStatsPerRun(results);","","        return {","            results,","            errorCount: stats.errorCount,","            warningCount: stats.warningCount","        };","    },","","    /**","     * Returns a configuration object for the given file based on the CLI options.","     * This is the same logic used by the ESLint CLI executable to determine","     * configuration for each file it processes.","     * @param {string} filePath The path of the file to retrieve a config object for.","     * @returns {Object} A configuration object for the file.","     */","    getConfigForFile(filePath) {","        const configHelper = new Config(this.options);","","        return configHelper.getConfig(filePath);","    },","","    /**","     * Checks if a given path is ignored by ESLint.","     * @param {string} filePath The path of the file to check.","     * @returns {boolean} Whether or not the given path is ignored.","     */","    isPathIgnored(filePath) {","        const resolvedPath = path.resolve(this.options.cwd, filePath);","        const ignoredPaths = new IgnoredPaths(this.options);","","        return ignoredPaths.contains(resolvedPath);","    },","","    getFormatter: CLIEngine.getFormatter","","};","","CLIEngine.version = pkg.version;","","module.exports = CLIEngine;",""],"l":{"18":1,"35":1,"92":1,"93":0,"94":0,"95":0,"97":0,"99":0,"112":1,"113":0,"114":0,"115":0,"116":0,"136":1,"137":0,"138":0,"152":0,"153":0,"155":0,"156":0,"158":0,"159":0,"163":0,"164":0,"168":0,"171":0,"183":0,"184":0,"189":0,"190":0,"192":0,"206":1,"209":0,"211":0,"217":0,"218":0,"219":0,"222":0,"223":0,"224":0,"226":0,"227":0,"230":0,"232":0,"233":0,"234":0,"235":0,"239":0,"240":0,"241":0,"242":0,"244":0,"245":0,"253":0,"257":0,"258":0,"262":0,"264":0,"271":0,"273":0,"280":0,"281":0,"284":0,"285":0,"288":0,"300":1,"302":0,"305":0,"316":1,"317":0,"318":0,"319":0,"320":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"329":0,"332":0,"353":1,"354":0,"369":1,"375":0,"377":0,"378":0,"384":1,"385":0,"388":0,"390":0,"391":0,"393":0,"402":0,"409":0,"410":0,"414":0,"424":0,"425":0,"428":0,"440":1,"442":0,"453":0,"455":0,"463":0,"466":0,"467":0,"469":0,"470":0,"471":0,"475":0,"476":0,"487":1,"489":0,"492":0,"495":0,"498":0,"501":0,"502":0,"504":0,"506":0,"509":0,"510":0,"512":0,"513":0,"517":0,"526":1,"527":0,"529":0,"530":0,"532":0,"533":0,"543":0,"551":1,"552":0,"553":0,"557":1,"568":0,"578":0,"587":0,"591":0,"598":1,"599":0,"601":0,"602":0,"606":0,"612":0,"614":0,"616":0,"619":0,"629":1,"630":0,"633":0,"634":0,"635":0,"638":0,"645":0,"646":0,"648":0,"650":0,"652":0,"653":0,"661":0,"664":0,"667":0,"670":0,"672":0,"674":0,"681":0,"682":0,"685":0,"694":0,"695":0,"699":0,"702":0,"706":0,"707":0,"709":0,"710":0,"713":0,"715":0,"718":0,"721":0,"723":0,"739":0,"745":0,"746":0,"749":0,"750":0,"751":0,"754":0,"757":0,"759":0,"774":0,"776":0,"785":0,"786":0,"788":0,"795":1,"797":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/conf/cli-options.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/conf/cli-options.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":29,"column":2}}},"branchMap":{},"code":["/**"," * @fileoverview Default CLIEngineOptions."," * @author Ian VanSchooten"," */","","\"use strict\";","","module.exports = {","    configFile: null,","    baseConfig: false,","    rulePaths: [],","    useEslintrc: true,","    envs: [],","    globals: [],","    rules: {},","    extensions: [\".js\"],","    ignore: true,","    ignorePath: null,","    parser: \"\",     // must be empty","    cache: false,","","    // in order to honor the cacheFile option if specified","    // this option should not have a default value otherwise","    // it will always be used","    cacheLocation: \"\",","    cacheFile: \".eslintcache\",","    fix: false,","    allowInlineConfig: true","};",""],"l":{"8":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/ignored-paths.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/ignored-paths.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"findIgnoreFile","line":52,"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":29}}},"2":{"name":"mergeDefaultOptions","line":65,"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":38}}},"3":{"name":"(anonymous_3)","line":82,"loc":{"start":{"line":82,"column":15},"end":{"line":82,"column":25}}},"4":{"name":"addPattern","line":91,"loc":{"start":{"line":91,"column":8},"end":{"line":91,"column":41}}},"5":{"name":"addIgnoreFile","line":101,"loc":{"start":{"line":101,"column":8},"end":{"line":101,"column":45}}},"6":{"name":"(anonymous_6)","line":178,"loc":{"start":{"line":178,"column":12},"end":{"line":178,"column":33}}},"7":{"name":"(anonymous_7)","line":200,"loc":{"start":{"line":200,"column":32},"end":{"line":200,"column":35}}},"8":{"name":"(anonymous_8)","line":226,"loc":{"start":{"line":226,"column":15},"end":{"line":226,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":16,"column":43}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":55}},"3":{"start":{"line":25,"column":0},"end":{"line":25,"column":47}},"4":{"start":{"line":32,"column":0},"end":{"line":35,"column":2}},"5":{"start":{"line":36,"column":0},"end":{"line":39,"column":2}},"6":{"start":{"line":52,"column":0},"end":{"line":58,"column":1}},"7":{"start":{"line":53,"column":4},"end":{"line":53,"column":37}},"8":{"start":{"line":55,"column":4},"end":{"line":55,"column":69}},"9":{"start":{"line":57,"column":4},"end":{"line":57,"column":66}},"10":{"start":{"line":65,"column":0},"end":{"line":68,"column":1}},"11":{"start":{"line":66,"column":4},"end":{"line":66,"column":30}},"12":{"start":{"line":67,"column":4},"end":{"line":67,"column":55}},"13":{"start":{"line":83,"column":8},"end":{"line":83,"column":47}},"14":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"15":{"start":{"line":92,"column":12},"end":{"line":92,"column":42}},"16":{"start":{"line":101,"column":8},"end":{"line":104,"column":9}},"17":{"start":{"line":102,"column":12},"end":{"line":102,"column":42}},"18":{"start":{"line":103,"column":12},"end":{"line":103,"column":61}},"19":{"start":{"line":106,"column":8},"end":{"line":106,"column":86}},"20":{"start":{"line":107,"column":8},"end":{"line":107,"column":35}},"21":{"start":{"line":109,"column":8},"end":{"line":112,"column":10}},"22":{"start":{"line":116,"column":8},"end":{"line":116,"column":40}},"23":{"start":{"line":117,"column":8},"end":{"line":117,"column":41}},"24":{"start":{"line":119,"column":8},"end":{"line":126,"column":9}},"25":{"start":{"line":125,"column":12},"end":{"line":125,"column":56}},"26":{"start":{"line":128,"column":8},"end":{"line":128,"column":58}},"27":{"start":{"line":130,"column":8},"end":{"line":167,"column":9}},"28":{"start":{"line":131,"column":12},"end":{"line":131,"column":27}},"29":{"start":{"line":133,"column":12},"end":{"line":154,"column":13}},"30":{"start":{"line":134,"column":16},"end":{"line":134,"column":52}},"31":{"start":{"line":136,"column":16},"end":{"line":142,"column":17}},"32":{"start":{"line":137,"column":20},"end":{"line":137,"column":52}},"33":{"start":{"line":138,"column":20},"end":{"line":138,"column":52}},"34":{"start":{"line":140,"column":20},"end":{"line":140,"column":102}},"35":{"start":{"line":141,"column":20},"end":{"line":141,"column":28}},"36":{"start":{"line":144,"column":16},"end":{"line":144,"column":67}},"37":{"start":{"line":145,"column":16},"end":{"line":145,"column":57}},"38":{"start":{"line":147,"column":16},"end":{"line":153,"column":17}},"39":{"start":{"line":148,"column":20},"end":{"line":148,"column":44}},"40":{"start":{"line":149,"column":20},"end":{"line":149,"column":62}},"41":{"start":{"line":151,"column":20},"end":{"line":151,"column":63}},"42":{"start":{"line":152,"column":20},"end":{"line":152,"column":43}},"43":{"start":{"line":156,"column":12},"end":{"line":161,"column":13}},"44":{"start":{"line":157,"column":16},"end":{"line":157,"column":46}},"45":{"start":{"line":158,"column":16},"end":{"line":158,"column":83}},"46":{"start":{"line":159,"column":16},"end":{"line":159,"column":58}},"47":{"start":{"line":160,"column":16},"end":{"line":160,"column":59}},"48":{"start":{"line":163,"column":12},"end":{"line":166,"column":13}},"49":{"start":{"line":164,"column":16},"end":{"line":164,"column":66}},"50":{"start":{"line":165,"column":16},"end":{"line":165,"column":67}},"51":{"start":{"line":169,"column":8},"end":{"line":169,"column":31}},"52":{"start":{"line":180,"column":8},"end":{"line":180,"column":27}},"53":{"start":{"line":181,"column":8},"end":{"line":181,"column":70}},"54":{"start":{"line":182,"column":8},"end":{"line":182,"column":86}},"55":{"start":{"line":184,"column":8},"end":{"line":186,"column":9}},"56":{"start":{"line":185,"column":12},"end":{"line":185,"column":85}},"57":{"start":{"line":188,"column":8},"end":{"line":190,"column":9}},"58":{"start":{"line":189,"column":12},"end":{"line":189,"column":84}},"59":{"start":{"line":192,"column":8},"end":{"line":192,"column":22}},"60":{"start":{"line":202,"column":8},"end":{"line":202,"column":53}},"61":{"start":{"line":204,"column":8},"end":{"line":208,"column":9}},"62":{"start":{"line":207,"column":12},"end":{"line":207,"column":37}},"63":{"start":{"line":210,"column":8},"end":{"line":212,"column":9}},"64":{"start":{"line":211,"column":12},"end":{"line":211,"column":35}},"65":{"start":{"line":214,"column":8},"end":{"line":214,"column":41}},"66":{"start":{"line":224,"column":8},"end":{"line":224,"column":38}},"67":{"start":{"line":226,"column":8},"end":{"line":234,"column":10}},"68":{"start":{"line":227,"column":12},"end":{"line":227,"column":74}},"69":{"start":{"line":229,"column":12},"end":{"line":231,"column":13}},"70":{"start":{"line":230,"column":16},"end":{"line":230,"column":29}},"71":{"start":{"line":233,"column":12},"end":{"line":233,"column":37}},"72":{"start":{"line":238,"column":0},"end":{"line":238,"column":30}}},"branchMap":{"1":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":10},"end":{"line":53,"column":13}},{"start":{"line":53,"column":17},"end":{"line":53,"column":36}}]},"2":{"line":57,"type":"cond-expr","locations":[{"start":{"line":57,"column":46},"end":{"line":57,"column":60}},{"start":{"line":57,"column":63},"end":{"line":57,"column":65}}]},"3":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":15},"end":{"line":66,"column":22}},{"start":{"line":66,"column":26},"end":{"line":66,"column":28}}]},"4":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":62},"end":{"line":106,"column":78}},{"start":{"line":106,"column":82},"end":{"line":106,"column":84}}]},"5":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":119,"column":8}},{"start":{"line":119,"column":8},"end":{"line":119,"column":8}}]},"6":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":8}},{"start":{"line":130,"column":8},"end":{"line":130,"column":8}}]},"7":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":12},"end":{"line":133,"column":12}},{"start":{"line":133,"column":12},"end":{"line":133,"column":12}}]},"8":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":12},"end":{"line":156,"column":12}},{"start":{"line":156,"column":12},"end":{"line":156,"column":12}}]},"9":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":12},"end":{"line":163,"column":12}},{"start":{"line":163,"column":12},"end":{"line":163,"column":12}}]},"10":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":8},"end":{"line":184,"column":8}},{"start":{"line":184,"column":8},"end":{"line":184,"column":8}}]},"11":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":13},"end":{"line":184,"column":44}},{"start":{"line":184,"column":50},"end":{"line":184,"column":72}}]},"12":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":21},"end":{"line":185,"column":27}},{"start":{"line":185,"column":32},"end":{"line":185,"column":83}}]},"13":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":8},"end":{"line":188,"column":8}},{"start":{"line":188,"column":8},"end":{"line":188,"column":8}}]},"14":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":13},"end":{"line":188,"column":44}},{"start":{"line":188,"column":50},"end":{"line":188,"column":71}}]},"15":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":21},"end":{"line":189,"column":27}},{"start":{"line":189,"column":32},"end":{"line":189,"column":82}}]},"16":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":8},"end":{"line":204,"column":8}},{"start":{"line":204,"column":8},"end":{"line":204,"column":8}}]},"17":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":8},"end":{"line":210,"column":8}},{"start":{"line":210,"column":8},"end":{"line":210,"column":8}}]},"18":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":12},"end":{"line":229,"column":12}},{"start":{"line":229,"column":12},"end":{"line":229,"column":12}}]}},"code":["/**"," * @fileoverview Responsible for loading ignore config files and managing ignore patterns"," * @author Jonathan Rajavuori"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    ignore = require(\"ignore\"),","    shell = require(\"shelljs\"),","    pathUtil = require(\"./util/path-util\");","","const debug = require(\"debug\")(\"eslint:ignored-paths\");","","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const ESLINT_IGNORE_FILENAME = \".eslintignore\";","","/**"," * Adds `\"*\"` at the end of `\"node_modules/\"`,"," * so that subtle directories could be re-included by .gitignore patterns"," * such as `\"!node_modules/should_not_ignored\"`"," */","const DEFAULT_IGNORE_DIRS = [","    \"/node_modules/*\",","    \"/bower_components/*\"","];","const DEFAULT_OPTIONS = {","    dotfiles: false,","    cwd: process.cwd()","};","","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","","/**"," * Find an ignore file in the current directory."," * @param {string} cwd Current working directory"," * @returns {string} Path of ignore file or an empty string."," */","function findIgnoreFile(cwd) {","    cwd = cwd || DEFAULT_OPTIONS.cwd;","","    const ignoreFilePath = path.resolve(cwd, ESLINT_IGNORE_FILENAME);","","    return shell.test(\"-f\", ignoreFilePath) ? ignoreFilePath : \"\";","}","","/**"," * Merge options with defaults"," * @param {Object} options Options to merge with DEFAULT_OPTIONS constant"," * @returns {Object} Merged options"," */","function mergeDefaultOptions(options) {","    options = (options || {});","    return Object.assign({}, DEFAULT_OPTIONS, options);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * IgnoredPaths class"," */","class IgnoredPaths {","","    /**","     * @param {Object} options object containing 'ignore', 'ignorePath' and 'patterns' properties","     */","    constructor(options) {","        options = mergeDefaultOptions(options);","","        /**","         * add pattern to node-ignore instance","         * @param {Object} ig, instance of node-ignore","         * @param {string} pattern, pattern do add to ig","         * @returns {array} raw ignore rules","         */","        function addPattern(ig, pattern) {","            return ig.addPattern(pattern);","        }","","        /**","         * add ignore file to node-ignore instance","         * @param {Object} ig, instance of node-ignore","         * @param {string} filepath, file to add to ig","         * @returns {array} raw ignore rules","         */","        function addIgnoreFile(ig, filepath) {","            ig.ignoreFiles.push(filepath);","            return ig.add(fs.readFileSync(filepath, \"utf8\"));","        }","","        this.defaultPatterns = [].concat(DEFAULT_IGNORE_DIRS, options.patterns || []);","        this.baseDir = options.cwd;","","        this.ig = {","            custom: ignore(),","            default: ignore()","        };","","        // Add a way to keep track of ignored files.  This was present in node-ignore","        // 2.x, but dropped for now as of 3.0.10.","        this.ig.custom.ignoreFiles = [];","        this.ig.default.ignoreFiles = [];","","        if (options.dotfiles !== true) {","","            /*","             * ignore files beginning with a dot, but not files in a parent or","             * ancestor directory (which in relative format will begin with `../`).","             */","            addPattern(this.ig.default, [\".*\", \"!../\"]);","        }","","        addPattern(this.ig.default, this.defaultPatterns);","","        if (options.ignore !== false) {","            let ignorePath;","","            if (options.ignorePath) {","                debug(\"Using specific ignore file\");","","                try {","                    fs.statSync(options.ignorePath);","                    ignorePath = options.ignorePath;","                } catch (e) {","                    e.message = `Cannot read ignore file: ${options.ignorePath}\\nError: ${e.message}`;","                    throw e;","                }","            } else {","                debug(`Looking for ignore file in ${options.cwd}`);","                ignorePath = findIgnoreFile(options.cwd);","","                try {","                    fs.statSync(ignorePath);","                    debug(`Loaded ignore file ${ignorePath}`);","                } catch (e) {","                    debug(\"Could not find ignore file in cwd\");","                    this.options = options;","                }","            }","","            if (ignorePath) {","                debug(`Adding ${ignorePath}`);","                this.baseDir = path.dirname(path.resolve(options.cwd, ignorePath));","                addIgnoreFile(this.ig.custom, ignorePath);","                addIgnoreFile(this.ig.default, ignorePath);","            }","","            if (options.ignorePattern) {","                addPattern(this.ig.custom, options.ignorePattern);","                addPattern(this.ig.default, options.ignorePattern);","            }","        }","","        this.options = options;","    }","","    /**","     * Determine whether a file path is included in the default or custom ignore patterns","     * @param {string} filepath Path to check","     * @param {string} [category=null] check 'default', 'custom' or both (null)","     * @returns {boolean} true if the file path matches one or more patterns, false otherwise","     */","    contains(filepath, category) {","","        let result = false;","        const absolutePath = path.resolve(this.options.cwd, filepath);","        const relativePath = pathUtil.getRelativePath(absolutePath, this.options.cwd);","","        if ((typeof category === \"undefined\") || (category === \"default\")) {","            result = result || (this.ig.default.filter([relativePath]).length === 0);","        }","","        if ((typeof category === \"undefined\") || (category === \"custom\")) {","            result = result || (this.ig.custom.filter([relativePath]).length === 0);","        }","","        return result;","","    }","","    /**","     * Returns a list of dir patterns for glob to ignore","     * @returns {function()} method to check whether a folder should be ignored by glob.","     */","    getIgnoredFoldersGlobChecker() {","","        const ig = ignore().add(DEFAULT_IGNORE_DIRS);","","        if (this.options.dotfiles !== true) {","","            // Ignore hidden folders.  (This cannot be \".*\", or else it's not possible to unignore hidden files)","            ig.add([\".*/*\", \"!../\"]);","        }","","        if (this.options.ignore) {","            ig.add(this.ig.custom);","        }","","        const filter = ig.createFilter();","","        /**","         * TODO","         * 1.","         * Actually, it should be `this.options.baseDir`, which is the base dir of `ignore-path`,","         * as well as Line 177.","         * But doing this leads to a breaking change and fails tests.","         * Related to #6759","         */","        const base = this.options.cwd;","","        return function(absolutePath) {","            const relative = pathUtil.getRelativePath(absolutePath, base);","","            if (!relative) {","                return false;","            }","","            return !filter(relative);","        };","    }","}","","module.exports = IgnoredPaths;",""],"l":{"12":1,"18":1,"25":1,"32":1,"36":1,"52":1,"53":0,"55":0,"57":0,"65":1,"66":0,"67":0,"83":0,"91":1,"92":0,"101":1,"102":0,"103":0,"106":0,"107":0,"109":0,"116":0,"117":0,"119":0,"125":0,"128":0,"130":0,"131":0,"133":0,"134":0,"136":0,"137":0,"138":0,"140":0,"141":0,"144":0,"145":0,"147":0,"148":0,"149":0,"151":0,"152":0,"156":0,"157":0,"158":0,"159":0,"160":0,"163":0,"164":0,"165":0,"169":0,"180":0,"181":0,"182":0,"184":0,"185":0,"188":0,"189":0,"192":0,"202":0,"204":0,"207":0,"210":0,"211":0,"214":0,"224":0,"226":0,"227":0,"229":0,"230":0,"233":0,"238":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/path-util.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/path-util.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"convertPathToPosix","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":38}}},"2":{"name":"getRelativePath","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":44}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":29}},"2":{"start":{"line":23,"column":0},"end":{"line":28,"column":1}},"3":{"start":{"line":24,"column":4},"end":{"line":24,"column":56}},"4":{"start":{"line":25,"column":4},"end":{"line":25,"column":65}},"5":{"start":{"line":27,"column":4},"end":{"line":27,"column":25}},"6":{"start":{"line":50,"column":0},"end":{"line":65,"column":1}},"7":{"start":{"line":51,"column":4},"end":{"line":51,"column":21}},"8":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"9":{"start":{"line":54,"column":8},"end":{"line":54,"column":42}},"10":{"start":{"line":56,"column":4},"end":{"line":63,"column":5}},"11":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"12":{"start":{"line":58,"column":12},"end":{"line":58,"column":66}},"13":{"start":{"line":60,"column":8},"end":{"line":60,"column":56}},"14":{"start":{"line":62,"column":8},"end":{"line":62,"column":51}},"15":{"start":{"line":64,"column":4},"end":{"line":64,"column":24}},"16":{"start":{"line":71,"column":0},"end":{"line":74,"column":2}}},"branchMap":{"1":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]}},"code":["/**"," * @fileoverview Common helpers for operations on filenames and paths"," * @author Ian VanSchooten"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const path = require(\"path\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * Replace Windows with posix style paths"," *"," * @param {string} filepath   Path to convert"," * @returns {string}          Converted filepath"," */","function convertPathToPosix(filepath) {","    const normalizedFilepath = path.normalize(filepath);","    const posixFilepath = normalizedFilepath.replace(/\\\\/g, \"/\");","","    return posixFilepath;","}","","/**"," * Converts an absolute filepath to a relative path from a given base path"," *"," * For example, if the filepath is `/my/awesome/project/foo.bar`,"," * and the base directory is `/my/awesome/project/`,"," * then this function should return `foo.bar`."," *"," * path.relative() does something similar, but it requires a baseDir (`from` argument)."," * This function makes it optional and just removes a leading slash if the baseDir is not given."," *"," * It does not take into account symlinks (for now)."," *"," * @param {string} filepath  Path to convert to relative path.  If already relative,"," *                           it will be assumed to be relative to process.cwd(),"," *                           converted to absolute, and then processed."," * @param {string} [baseDir] Absolute base directory to resolve the filepath from."," *                           If not provided, all this function will do is remove"," *                           a leading slash."," * @returns {string} Relative filepath"," */","function getRelativePath(filepath, baseDir) {","    let relativePath;","","    if (!path.isAbsolute(filepath)) {","        filepath = path.resolve(filepath);","    }","    if (baseDir) {","        if (!path.isAbsolute(baseDir)) {","            throw new Error(\"baseDir should be an absolute path\");","        }","        relativePath = path.relative(baseDir, filepath);","    } else {","        relativePath = filepath.replace(/^\\//, \"\");","    }","    return relativePath;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    convertPathToPosix,","    getRelativePath","};",""],"l":{"11":1,"23":1,"24":0,"25":0,"27":0,"50":1,"51":0,"53":0,"54":0,"56":0,"57":0,"58":0,"60":0,"62":0,"64":0,"71":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":1},"b":{"1":[1,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"isObject","line":39,"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}}},"2":{"name":"loadConfig","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":34}}},"3":{"name":"getPersonalConfig","line":76,"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":29}}},"4":{"name":"hasRules","line":96,"loc":{"start":{"line":96,"column":0},"end":{"line":96,"column":27}}},"5":{"name":"getLocalConfig","line":106,"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":47}}},"6":{"name":"(anonymous_6)","line":190,"loc":{"start":{"line":190,"column":15},"end":{"line":190,"column":25}}},"7":{"name":"(anonymous_7)","line":243,"loc":{"start":{"line":243,"column":13},"end":{"line":243,"column":24}}},"8":{"name":"(anonymous_8)","line":328,"loc":{"start":{"line":328,"column":24},"end":{"line":328,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":19,"column":45}},"2":{"start":{"line":21,"column":0},"end":{"line":21,"column":48}},"3":{"start":{"line":27,"column":0},"end":{"line":27,"column":45}},"4":{"start":{"line":39,"column":0},"end":{"line":41,"column":1}},"5":{"start":{"line":40,"column":4},"end":{"line":40,"column":77}},"6":{"start":{"line":49,"column":0},"end":{"line":69,"column":1}},"7":{"start":{"line":50,"column":4},"end":{"line":51,"column":22}},"8":{"start":{"line":53,"column":4},"end":{"line":66,"column":5}},"9":{"start":{"line":55,"column":8},"end":{"line":64,"column":9}},"10":{"start":{"line":56,"column":12},"end":{"line":56,"column":34}},"11":{"start":{"line":58,"column":12},"end":{"line":60,"column":13}},"12":{"start":{"line":59,"column":16},"end":{"line":59,"column":67}},"13":{"start":{"line":62,"column":12},"end":{"line":62,"column":36}},"14":{"start":{"line":63,"column":12},"end":{"line":63,"column":47}},"15":{"start":{"line":68,"column":4},"end":{"line":68,"column":18}},"16":{"start":{"line":76,"column":0},"end":{"line":89,"column":1}},"17":{"start":{"line":77,"column":4},"end":{"line":77,"column":15}},"18":{"start":{"line":79,"column":4},"end":{"line":86,"column":5}},"19":{"start":{"line":80,"column":8},"end":{"line":80,"column":81}},"20":{"start":{"line":82,"column":8},"end":{"line":85,"column":9}},"21":{"start":{"line":83,"column":12},"end":{"line":83,"column":43}},"22":{"start":{"line":84,"column":12},"end":{"line":84,"column":42}},"23":{"start":{"line":88,"column":4},"end":{"line":88,"column":26}},"24":{"start":{"line":96,"column":0},"end":{"line":98,"column":1}},"25":{"start":{"line":97,"column":4},"end":{"line":97,"column":66}},"26":{"start":{"line":106,"column":0},"end":{"line":175,"column":1}},"27":{"start":{"line":107,"column":4},"end":{"line":109,"column":87}},"28":{"start":{"line":110,"column":4},"end":{"line":112,"column":17}},"29":{"start":{"line":114,"column":4},"end":{"line":145,"column":5}},"30":{"start":{"line":116,"column":8},"end":{"line":116,"column":52}},"31":{"start":{"line":120,"column":8},"end":{"line":122,"column":9}},"32":{"start":{"line":121,"column":12},"end":{"line":121,"column":21}},"33":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"34":{"start":{"line":126,"column":12},"end":{"line":126,"column":21}},"35":{"start":{"line":129,"column":8},"end":{"line":129,"column":44}},"36":{"start":{"line":130,"column":8},"end":{"line":130,"column":56}},"37":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"38":{"start":{"line":134,"column":12},"end":{"line":134,"column":21}},"39":{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},"40":{"start":{"line":139,"column":12},"end":{"line":139,"column":53}},"41":{"start":{"line":142,"column":8},"end":{"line":142,"column":21}},"42":{"start":{"line":143,"column":8},"end":{"line":143,"column":42}},"43":{"start":{"line":144,"column":8},"end":{"line":144,"column":54}},"44":{"start":{"line":147,"column":4},"end":{"line":172,"column":5}},"45":{"start":{"line":155,"column":8},"end":{"line":155,"column":51}},"46":{"start":{"line":157,"column":8},"end":{"line":171,"column":9}},"47":{"start":{"line":158,"column":12},"end":{"line":158,"column":61}},"48":{"start":{"line":159,"column":15},"end":{"line":171,"column":9}},"49":{"start":{"line":162,"column":12},"end":{"line":162,"column":78}},"50":{"start":{"line":164,"column":12},"end":{"line":164,"column":62}},"51":{"start":{"line":165,"column":12},"end":{"line":168,"column":14}},"52":{"start":{"line":170,"column":12},"end":{"line":170,"column":32}},"53":{"start":{"line":174,"column":4},"end":{"line":174,"column":18}},"54":{"start":{"line":191,"column":8},"end":{"line":191,"column":32}},"55":{"start":{"line":193,"column":8},"end":{"line":193,"column":37}},"56":{"start":{"line":194,"column":8},"end":{"line":194,"column":45}},"57":{"start":{"line":195,"column":8},"end":{"line":195,"column":24}},"58":{"start":{"line":196,"column":8},"end":{"line":196,"column":37}},"59":{"start":{"line":197,"column":8},"end":{"line":197,"column":57}},"60":{"start":{"line":199,"column":8},"end":{"line":199,"column":94}},"61":{"start":{"line":201,"column":8},"end":{"line":201,"column":59}},"62":{"start":{"line":203,"column":8},"end":{"line":206,"column":15}},"63":{"start":{"line":204,"column":12},"end":{"line":204,"column":32}},"64":{"start":{"line":205,"column":12},"end":{"line":205,"column":24}},"65":{"start":{"line":214,"column":8},"end":{"line":220,"column":15}},"66":{"start":{"line":215,"column":12},"end":{"line":215,"column":41}},"67":{"start":{"line":217,"column":12},"end":{"line":217,"column":74}},"68":{"start":{"line":219,"column":12},"end":{"line":219,"column":27}},"69":{"start":{"line":222,"column":8},"end":{"line":222,"column":45}},"70":{"start":{"line":224,"column":8},"end":{"line":224,"column":31}},"71":{"start":{"line":226,"column":8},"end":{"line":233,"column":9}},"72":{"start":{"line":227,"column":12},"end":{"line":227,"column":60}},"73":{"start":{"line":228,"column":12},"end":{"line":232,"column":13}},"74":{"start":{"line":229,"column":16},"end":{"line":229,"column":63}},"75":{"start":{"line":231,"column":16},"end":{"line":231,"column":95}},"76":{"start":{"line":244,"column":8},"end":{"line":244,"column":79}},"77":{"start":{"line":245,"column":8},"end":{"line":246,"column":23}},"78":{"start":{"line":248,"column":8},"end":{"line":248,"column":73}},"79":{"start":{"line":250,"column":8},"end":{"line":250,"column":39}},"80":{"start":{"line":252,"column":8},"end":{"line":255,"column":9}},"81":{"start":{"line":253,"column":12},"end":{"line":253,"column":45}},"82":{"start":{"line":254,"column":12},"end":{"line":254,"column":26}},"83":{"start":{"line":258,"column":8},"end":{"line":264,"column":9}},"84":{"start":{"line":259,"column":12},"end":{"line":259,"column":60}},"85":{"start":{"line":260,"column":12},"end":{"line":260,"column":57}},"86":{"start":{"line":262,"column":12},"end":{"line":262,"column":63}},"87":{"start":{"line":263,"column":12},"end":{"line":263,"column":28}},"88":{"start":{"line":267,"column":8},"end":{"line":267,"column":54}},"89":{"start":{"line":270,"column":8},"end":{"line":270,"column":53}},"90":{"start":{"line":273,"column":8},"end":{"line":277,"column":9}},"91":{"start":{"line":274,"column":12},"end":{"line":274,"column":54}},"92":{"start":{"line":276,"column":12},"end":{"line":276,"column":69}},"93":{"start":{"line":280,"column":8},"end":{"line":280,"column":59}},"94":{"start":{"line":281,"column":8},"end":{"line":281,"column":60}},"95":{"start":{"line":284,"column":8},"end":{"line":287,"column":9}},"96":{"start":{"line":285,"column":12},"end":{"line":285,"column":48}},"97":{"start":{"line":286,"column":12},"end":{"line":286,"column":76}},"98":{"start":{"line":290,"column":8},"end":{"line":290,"column":68}},"99":{"start":{"line":294,"column":8},"end":{"line":298,"column":9}},"100":{"start":{"line":295,"column":12},"end":{"line":297,"column":15}},"101":{"start":{"line":300,"column":8},"end":{"line":304,"column":9}},"102":{"start":{"line":301,"column":12},"end":{"line":303,"column":15}},"103":{"start":{"line":307,"column":8},"end":{"line":311,"column":9}},"104":{"start":{"line":308,"column":12},"end":{"line":308,"column":50}},"105":{"start":{"line":309,"column":12},"end":{"line":309,"column":50}},"106":{"start":{"line":310,"column":12},"end":{"line":310,"column":80}},"107":{"start":{"line":314,"column":8},"end":{"line":316,"column":9}},"108":{"start":{"line":315,"column":12},"end":{"line":315,"column":57}},"109":{"start":{"line":318,"column":8},"end":{"line":318,"column":39}},"110":{"start":{"line":320,"column":8},"end":{"line":320,"column":22}},"111":{"start":{"line":330,"column":8},"end":{"line":332,"column":9}},"112":{"start":{"line":331,"column":12},"end":{"line":331,"column":95}},"113":{"start":{"line":334,"column":8},"end":{"line":334,"column":78}},"114":{"start":{"line":338,"column":0},"end":{"line":338,"column":24}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":28},"end":{"line":27,"column":36}},{"start":{"line":27,"column":40},"end":{"line":27,"column":44}}]},"2":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":11},"end":{"line":40,"column":35}},{"start":{"line":40,"column":39},"end":{"line":40,"column":59}},{"start":{"line":40,"column":63},"end":{"line":40,"column":76}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"4":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"5":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":12}},{"start":{"line":58,"column":12},"end":{"line":58,"column":12}}]},"6":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"7":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"8":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":11},"end":{"line":88,"column":17}},{"start":{"line":88,"column":21},"end":{"line":88,"column":25}}]},"9":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":11},"end":{"line":97,"column":24}},{"start":{"line":97,"column":28},"end":{"line":97,"column":65}}]},"10":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":8},"end":{"line":120,"column":8}},{"start":{"line":120,"column":8},"end":{"line":120,"column":8}}]},"11":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":12},"end":{"line":120,"column":65}},{"start":{"line":120,"column":69},"end":{"line":120,"column":106}}]},"12":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":8}},{"start":{"line":125,"column":8},"end":{"line":125,"column":8}}]},"13":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":12},"end":{"line":125,"column":20}},{"start":{"line":125,"column":24},"end":{"line":125,"column":78}}]},"14":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":8},"end":{"line":133,"column":8}},{"start":{"line":133,"column":8},"end":{"line":133,"column":8}}]},"15":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":8},"end":{"line":138,"column":8}},{"start":{"line":138,"column":8},"end":{"line":138,"column":8}}]},"16":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":4},"end":{"line":147,"column":4}},{"start":{"line":147,"column":4},"end":{"line":147,"column":4}}]},"17":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":8},"end":{"line":147,"column":14}},{"start":{"line":147,"column":18},"end":{"line":147,"column":47}}]},"18":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":157,"column":8}},{"start":{"line":157,"column":8},"end":{"line":157,"column":8}}]},"19":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":15},"end":{"line":159,"column":15}},{"start":{"line":159,"column":15},"end":{"line":159,"column":15}}]},"20":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":19},"end":{"line":159,"column":48}},{"start":{"line":159,"column":52},"end":{"line":159,"column":82}}]},"21":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":18},"end":{"line":191,"column":25}},{"start":{"line":191,"column":29},"end":{"line":191,"column":31}}]},"22":{"line":197,"type":"binary-expr","locations":[{"start":{"line":197,"column":29},"end":{"line":197,"column":50}},{"start":{"line":197,"column":54},"end":{"line":197,"column":56}}]},"23":{"line":199,"type":"cond-expr","locations":[{"start":{"line":199,"column":47},"end":{"line":199,"column":77}},{"start":{"line":199,"column":80},"end":{"line":199,"column":93}}]},"24":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":20},"end":{"line":203,"column":32}},{"start":{"line":203,"column":36},"end":{"line":203,"column":38}}]},"25":{"line":214,"type":"binary-expr","locations":[{"start":{"line":214,"column":24},"end":{"line":214,"column":39}},{"start":{"line":214,"column":43},"end":{"line":214,"column":45}}]},"26":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":33},"end":{"line":217,"column":49}},{"start":{"line":217,"column":53},"end":{"line":217,"column":72}}]},"27":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":8},"end":{"line":226,"column":8}},{"start":{"line":226,"column":8},"end":{"line":226,"column":8}}]},"28":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":12},"end":{"line":228,"column":12}},{"start":{"line":228,"column":12},"end":{"line":228,"column":12}}]},"29":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":16},"end":{"line":228,"column":39}},{"start":{"line":228,"column":43},"end":{"line":228,"column":85}},{"start":{"line":228,"column":89},"end":{"line":228,"column":116}}]},"30":{"line":244,"type":"cond-expr","locations":[{"start":{"line":244,"column":37},"end":{"line":244,"column":59}},{"start":{"line":244,"column":62},"end":{"line":244,"column":78}}]},"31":{"line":248,"type":"cond-expr","locations":[{"start":{"line":248,"column":52},"end":{"line":248,"column":60}},{"start":{"line":248,"column":63},"end":{"line":248,"column":69}}]},"32":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":8},"end":{"line":252,"column":8}},{"start":{"line":252,"column":8},"end":{"line":252,"column":8}}]},"33":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8}},{"start":{"line":258,"column":8},"end":{"line":258,"column":8}}]},"34":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":8},"end":{"line":273,"column":8}},{"start":{"line":273,"column":8},"end":{"line":273,"column":8}}]},"35":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":8},"end":{"line":284,"column":8}},{"start":{"line":284,"column":8},"end":{"line":284,"column":8}}]},"36":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":8},"end":{"line":294,"column":8}},{"start":{"line":294,"column":8},"end":{"line":294,"column":8}}]},"37":{"line":294,"type":"binary-expr","locations":[{"start":{"line":294,"column":12},"end":{"line":294,"column":23}},{"start":{"line":294,"column":27},"end":{"line":294,"column":41}}]},"38":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":8},"end":{"line":300,"column":8}},{"start":{"line":300,"column":8},"end":{"line":300,"column":8}}]},"39":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":8},"end":{"line":307,"column":8}},{"start":{"line":307,"column":8},"end":{"line":307,"column":8}}]},"40":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":8},"end":{"line":314,"column":8}},{"start":{"line":314,"column":8},"end":{"line":314,"column":8}}]},"41":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":8},"end":{"line":330,"column":8}},{"start":{"line":330,"column":8},"end":{"line":330,"column":8}}]}},"code":["/**"," * @fileoverview Responsible for loading config files"," * @author Seth McLaughlin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const path = require(\"path\"),","    ConfigOps = require(\"./config/config-ops\"),","    ConfigFile = require(\"./config/config-file\"),","    Plugins = require(\"./config/plugins\"),","    FileFinder = require(\"./file-finder\"),","    userHome = require(\"user-home\"),","    isResolvable = require(\"is-resolvable\"),","    pathIsInside = require(\"path-is-inside\");","","const debug = require(\"debug\")(\"eslint:config\");","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const PERSONAL_CONFIG_DIR = userHome || null;","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Check if item is an javascript object"," * @param {*} item object to check for"," * @returns {boolean} True if its an object"," * @private"," */","function isObject(item) {","    return typeof item === \"object\" && !Array.isArray(item) && item !== null;","}","","/**"," * Load and parse a JSON config object from a file."," * @param {string|Object} configToLoad the path to the JSON config file or the config object itself."," * @returns {Object} the parsed config object (empty object if there was a parse error)"," * @private"," */","function loadConfig(configToLoad) {","    let config = {},","        filePath = \"\";","","    if (configToLoad) {","","        if (isObject(configToLoad)) {","            config = configToLoad;","","            if (config.extends) {","                config = ConfigFile.applyExtends(config, filePath);","            }","        } else {","            filePath = configToLoad;","            config = ConfigFile.load(filePath);","        }","","    }","","    return config;","}","","/**"," * Get personal config object from ~/.eslintrc."," * @returns {Object} the personal config object (null if there is no personal config)"," * @private"," */","function getPersonalConfig() {","    let config;","","    if (PERSONAL_CONFIG_DIR) {","        const filename = ConfigFile.getFilenameForDirectory(PERSONAL_CONFIG_DIR);","","        if (filename) {","            debug(\"Using personal config\");","            config = loadConfig(filename);","        }","    }","","    return config || null;","}","","/**"," * Determine if rules were explicitly passed in as options."," * @param {Object} options The options used to create our configuration."," * @returns {boolean} True if rules were passed in as options, false otherwise."," */","function hasRules(options) {","    return options.rules && Object.keys(options.rules).length > 0;","}","","/**"," * Get a local config object."," * @param {Object} thisConfig A Config object."," * @param {string} directory The directory to start looking in for a local config file."," * @returns {Object} The local config object, or an empty object if there is no local config."," */","function getLocalConfig(thisConfig, directory) {","    const localConfigFiles = thisConfig.findLocalConfigFiles(directory),","        numFiles = localConfigFiles.length,","        projectConfigPath = ConfigFile.getFilenameForDirectory(thisConfig.options.cwd);","    let found,","        config = {},","        rootPath;","","    for (let i = 0; i < numFiles; i++) {","","        const localConfigFile = localConfigFiles[i];","","        // Don't consider the personal config file in the home directory,","        // except if the home directory is the same as the current working directory","        if (path.dirname(localConfigFile) === PERSONAL_CONFIG_DIR && localConfigFile !== projectConfigPath) {","            continue;","        }","","        // If root flag is set, don't consider file if it is above root","        if (rootPath && !pathIsInside(path.dirname(localConfigFile), rootPath)) {","            continue;","        }","","        debug(`Loading ${localConfigFile}`);","        const localConfig = loadConfig(localConfigFile);","","        // Don't consider a local config file found if the config is null","        if (!localConfig) {","            continue;","        }","","        // Check for root flag","        if (localConfig.root === true) {","            rootPath = path.dirname(localConfigFile);","        }","","        found = true;","        debug(`Using ${localConfigFile}`);","        config = ConfigOps.merge(localConfig, config);","    }","","    if (!found && !thisConfig.useSpecificConfig) {","","        /*","         * - Is there a personal config in the user's home directory? If so,","         *   merge that with the passed-in config.","         * - Otherwise, if no rules were manually passed in, throw and error.","         * - Note: This function is not called if useEslintrc is false.","         */","        const personalConfig = getPersonalConfig();","","        if (personalConfig) {","            config = ConfigOps.merge(config, personalConfig);","        } else if (!hasRules(thisConfig.options) && !thisConfig.options.baseConfig) {","","            // No config file, no manual configuration, and no rules, so error.","            const noConfigError = new Error(\"No ESLint configuration found.\");","","            noConfigError.messageTemplate = \"no-config-found\";","            noConfigError.messageData = {","                directory,","                filesExamined: localConfigFiles","            };","","            throw noConfigError;","        }","    }","","    return config;","}","","//------------------------------------------------------------------------------","// API","//------------------------------------------------------------------------------","","/**"," * Configuration class"," */","class Config {","","    /**","     * Config options","     * @param {Object} options Options to be passed in","     */","    constructor(options) {","        options = options || {};","","        this.ignore = options.ignore;","        this.ignorePath = options.ignorePath;","        this.cache = {};","        this.parser = options.parser;","        this.parserOptions = options.parserOptions || {};","","        this.baseConfig = options.baseConfig ? loadConfig(options.baseConfig) : { rules: {} };","","        this.useEslintrc = (options.useEslintrc !== false);","","        this.env = (options.envs || []).reduce((envs, name) => {","            envs[ name ] = true;","            return envs;","        }, {});","","        /*","         * Handle declared globals.","         * For global variable foo, handle \"foo:false\" and \"foo:true\" to set","         * whether global is writable.","         * If user declares \"foo\", convert to \"foo:false\".","         */","        this.globals = (options.globals || []).reduce((globals, def) => {","            const parts = def.split(\":\");","","            globals[parts[0]] = (parts.length > 1 && parts[1] === \"true\");","","            return globals;","        }, {});","","        const useConfig = options.configFile;","","        this.options = options;","","        if (useConfig) {","            debug(`Using command line config ${useConfig}`);","            if (isResolvable(useConfig) || isResolvable(`eslint-config-${useConfig}`) || useConfig.charAt(0) === \"@\") {","                this.useSpecificConfig = loadConfig(useConfig);","            } else {","                this.useSpecificConfig = loadConfig(path.resolve(this.options.cwd, useConfig));","            }","        }","    }","","    /**","     * Build a config object merging the base config (conf/eslint-recommended),","     * the environments config (conf/environments.js) and eventually the user","     * config.","     * @param {string} filePath a file in whose directory we start looking for a local config","     * @returns {Object} config object","     */","    getConfig(filePath) {","        const directory = filePath ? path.dirname(filePath) : this.options.cwd;","        let config,","            userConfig;","","        debug(`Constructing config for ${filePath ? filePath : \"text\"}`);","","        config = this.cache[directory];","","        if (config) {","            debug(\"Using config from cache\");","            return config;","        }","","        // Step 1: Determine user-specified config from .eslintrc.* and package.json files","        if (this.useEslintrc) {","            debug(\"Using .eslintrc and package.json files\");","            userConfig = getLocalConfig(this, directory);","        } else {","            debug(\"Not using .eslintrc or package.json files\");","            userConfig = {};","        }","","        // Step 2: Create a copy of the baseConfig","        config = ConfigOps.merge({}, this.baseConfig);","","        // Step 3: Merge in the user-specified configuration from .eslintrc and package.json","        config = ConfigOps.merge(config, userConfig);","","        // Step 4: Merge in command line config file","        if (this.useSpecificConfig) {","            debug(\"Merging command line config file\");","","            config = ConfigOps.merge(config, this.useSpecificConfig);","        }","","        // Step 5: Merge in command line environments","        debug(\"Merging command line environment settings\");","        config = ConfigOps.merge(config, { env: this.env });","","        // Step 6: Merge in command line rules","        if (this.options.rules) {","            debug(\"Merging command line rules\");","            config = ConfigOps.merge(config, { rules: this.options.rules });","        }","","        // Step 7: Merge in command line globals","        config = ConfigOps.merge(config, { globals: this.globals });","","        // Only override parser if it is passed explicitly through the command line or if it's not","        // defined yet (because the final object will at least have the parser key)","        if (this.parser || !config.parser) {","            config = ConfigOps.merge(config, {","                parser: this.parser","            });","        }","","        if (this.parserOptions) {","            config = ConfigOps.merge(config, {","                parserOptions: this.parserOptions","            });","        }","","        // Step 8: Merge in command line plugins","        if (this.options.plugins) {","            debug(\"Merging command line plugins\");","            Plugins.loadAll(this.options.plugins);","            config = ConfigOps.merge(config, { plugins: this.options.plugins });","        }","","        // Step 9: Apply environments to the config if present","        if (config.env) {","            config = ConfigOps.applyEnvironments(config);","        }","","        this.cache[directory] = config;","","        return config;","    }","","    /**","     * Find local config files from directory and parent directories.","     * @param {string} directory The directory to start searching from.","     * @returns {string[]} The paths of local config files found.","     */","    findLocalConfigFiles(directory) {","","        if (!this.localConfigFinder) {","            this.localConfigFinder = new FileFinder(ConfigFile.CONFIG_FILES, this.options.cwd);","        }","","        return this.localConfigFinder.findAllInDirectoryAndParents(directory);","    }","}","","module.exports = Config;",""],"l":{"12":1,"21":1,"27":1,"39":1,"40":0,"49":1,"50":0,"53":0,"55":0,"56":0,"58":0,"59":0,"62":0,"63":0,"68":0,"76":1,"77":0,"79":0,"80":0,"82":0,"83":0,"84":0,"88":0,"96":1,"97":0,"106":1,"107":0,"110":0,"114":0,"116":0,"120":0,"121":0,"125":0,"126":0,"129":0,"130":0,"133":0,"134":0,"138":0,"139":0,"142":0,"143":0,"144":0,"147":0,"155":0,"157":0,"158":0,"159":0,"162":0,"164":0,"165":0,"170":0,"174":0,"191":0,"193":0,"194":0,"195":0,"196":0,"197":0,"199":0,"201":0,"203":0,"204":0,"205":0,"214":0,"215":0,"217":0,"219":0,"222":0,"224":0,"226":0,"227":0,"228":0,"229":0,"231":0,"244":0,"245":0,"248":0,"250":0,"252":0,"253":0,"254":0,"258":0,"259":0,"260":0,"262":0,"263":0,"267":0,"270":0,"273":0,"274":0,"276":0,"280":0,"281":0,"284":0,"285":0,"286":0,"290":0,"294":0,"295":0,"300":0,"301":0,"307":0,"308":0,"309":0,"310":0,"314":0,"315":0,"318":0,"320":0,"330":0,"331":0,"334":0,"338":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-file.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-file.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":1,"78":0,"79":0,"80":0,"81":0,"82":1,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":0,"103":1,"104":0,"105":0,"106":0,"107":0,"108":0,"109":1,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":1,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":1,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":1,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":1,"171":0,"172":0,"173":0,"174":0,"175":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"sortByKey","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":25}}},"2":{"name":"readFile","line":69,"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":28}}},"3":{"name":"isFilePath","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":30}}},"4":{"name":"loadYAMLConfigFile","line":92,"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":38}}},"5":{"name":"loadJSONConfigFile","line":116,"loc":{"start":{"line":116,"column":0},"end":{"line":116,"column":38}}},"6":{"name":"loadLegacyConfigFile","line":135,"loc":{"start":{"line":135,"column":0},"end":{"line":135,"column":40}}},"7":{"name":"loadJSConfigFile","line":157,"loc":{"start":{"line":157,"column":0},"end":{"line":157,"column":36}}},"8":{"name":"loadPackageJSONConfigFile","line":175,"loc":{"start":{"line":175,"column":0},"end":{"line":175,"column":45}}},"9":{"name":"configMissingError","line":192,"loc":{"start":{"line":192,"column":0},"end":{"line":192,"column":40}}},"10":{"name":"loadConfigFile","line":209,"loc":{"start":{"line":209,"column":0},"end":{"line":209,"column":30}}},"11":{"name":"writeJSONConfigFile","line":254,"loc":{"start":{"line":254,"column":0},"end":{"line":254,"column":47}}},"12":{"name":"writeYAMLConfigFile","line":269,"loc":{"start":{"line":269,"column":0},"end":{"line":269,"column":47}}},"13":{"name":"writeJSConfigFile","line":287,"loc":{"start":{"line":287,"column":0},"end":{"line":287,"column":45}}},"14":{"name":"write","line":303,"loc":{"start":{"line":303,"column":0},"end":{"line":303,"column":33}}},"15":{"name":"getBaseDir","line":331,"loc":{"start":{"line":331,"column":0},"end":{"line":331,"column":36}}},"16":{"name":"getLookupPath","line":356,"loc":{"start":{"line":356,"column":0},"end":{"line":356,"column":39}}},"17":{"name":"getEslintCoreConfigPath","line":368,"loc":{"start":{"line":368,"column":0},"end":{"line":368,"column":39}}},"18":{"name":"applyExtends","line":399,"loc":{"start":{"line":399,"column":0},"end":{"line":399,"column":52}}},"19":{"name":"normalizePackageName","line":449,"loc":{"start":{"line":449,"column":0},"end":{"line":449,"column":44}}},"20":{"name":"resolve","line":497,"loc":{"start":{"line":497,"column":0},"end":{"line":497,"column":39}}},"21":{"name":"load","line":531,"loc":{"start":{"line":531,"column":0},"end":{"line":531,"column":55}}},"22":{"name":"(anonymous_22)","line":602,"loc":{"start":{"line":602,"column":27},"end":{"line":602,"column":39}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":27,"column":50}},"2":{"start":{"line":29,"column":0},"end":{"line":29,"column":53}},"3":{"start":{"line":44,"column":0},"end":{"line":46,"column":1}},"4":{"start":{"line":45,"column":4},"end":{"line":45,"column":34}},"5":{"start":{"line":52,"column":0},"end":{"line":59,"column":2}},"6":{"start":{"line":61,"column":0},"end":{"line":61,"column":38}},"7":{"start":{"line":69,"column":0},"end":{"line":71,"column":1}},"8":{"start":{"line":70,"column":4},"end":{"line":70,"column":55}},"9":{"start":{"line":81,"column":0},"end":{"line":83,"column":1}},"10":{"start":{"line":82,"column":4},"end":{"line":82,"column":73}},"11":{"start":{"line":92,"column":0},"end":{"line":107,"column":1}},"12":{"start":{"line":93,"column":4},"end":{"line":93,"column":51}},"13":{"start":{"line":96,"column":4},"end":{"line":96,"column":36}},"14":{"start":{"line":98,"column":4},"end":{"line":106,"column":5}},"15":{"start":{"line":101,"column":8},"end":{"line":101,"column":55}},"16":{"start":{"line":103,"column":8},"end":{"line":103,"column":54}},"17":{"start":{"line":104,"column":8},"end":{"line":104,"column":80}},"18":{"start":{"line":105,"column":8},"end":{"line":105,"column":16}},"19":{"start":{"line":116,"column":0},"end":{"line":126,"column":1}},"20":{"start":{"line":117,"column":4},"end":{"line":117,"column":51}},"21":{"start":{"line":119,"column":4},"end":{"line":125,"column":5}},"22":{"start":{"line":120,"column":8},"end":{"line":120,"column":61}},"23":{"start":{"line":122,"column":8},"end":{"line":122,"column":54}},"24":{"start":{"line":123,"column":8},"end":{"line":123,"column":80}},"25":{"start":{"line":124,"column":8},"end":{"line":124,"column":16}},"26":{"start":{"line":135,"column":0},"end":{"line":148,"column":1}},"27":{"start":{"line":136,"column":4},"end":{"line":136,"column":46}},"28":{"start":{"line":139,"column":4},"end":{"line":139,"column":36}},"29":{"start":{"line":141,"column":4},"end":{"line":147,"column":5}},"30":{"start":{"line":142,"column":8},"end":{"line":142,"column":97}},"31":{"start":{"line":144,"column":8},"end":{"line":144,"column":54}},"32":{"start":{"line":145,"column":8},"end":{"line":145,"column":80}},"33":{"start":{"line":146,"column":8},"end":{"line":146,"column":16}},"34":{"start":{"line":157,"column":0},"end":{"line":166,"column":1}},"35":{"start":{"line":158,"column":4},"end":{"line":158,"column":49}},"36":{"start":{"line":159,"column":4},"end":{"line":165,"column":5}},"37":{"start":{"line":160,"column":8},"end":{"line":160,"column":41}},"38":{"start":{"line":162,"column":8},"end":{"line":162,"column":60}},"39":{"start":{"line":163,"column":8},"end":{"line":163,"column":80}},"40":{"start":{"line":164,"column":8},"end":{"line":164,"column":16}},"41":{"start":{"line":175,"column":0},"end":{"line":184,"column":1}},"42":{"start":{"line":176,"column":4},"end":{"line":176,"column":59}},"43":{"start":{"line":177,"column":4},"end":{"line":183,"column":5}},"44":{"start":{"line":178,"column":8},"end":{"line":178,"column":65}},"45":{"start":{"line":180,"column":8},"end":{"line":180,"column":62}},"46":{"start":{"line":181,"column":8},"end":{"line":181,"column":80}},"47":{"start":{"line":182,"column":8},"end":{"line":182,"column":16}},"48":{"start":{"line":192,"column":0},"end":{"line":200,"column":1}},"49":{"start":{"line":193,"column":4},"end":{"line":193,"column":85}},"50":{"start":{"line":195,"column":4},"end":{"line":195,"column":52}},"51":{"start":{"line":196,"column":4},"end":{"line":198,"column":6}},"52":{"start":{"line":199,"column":4},"end":{"line":199,"column":17}},"53":{"start":{"line":209,"column":0},"end":{"line":245,"column":1}},"54":{"start":{"line":210,"column":4},"end":{"line":210,"column":35}},"55":{"start":{"line":211,"column":4},"end":{"line":211,"column":15}},"56":{"start":{"line":213,"column":4},"end":{"line":242,"column":5}},"57":{"start":{"line":215,"column":12},"end":{"line":215,"column":48}},"58":{"start":{"line":216,"column":12},"end":{"line":221,"column":13}},"59":{"start":{"line":217,"column":16},"end":{"line":217,"column":57}},"60":{"start":{"line":218,"column":16},"end":{"line":220,"column":17}},"61":{"start":{"line":219,"column":20},"end":{"line":219,"column":66}},"62":{"start":{"line":222,"column":12},"end":{"line":222,"column":18}},"63":{"start":{"line":225,"column":12},"end":{"line":232,"column":13}},"64":{"start":{"line":226,"column":16},"end":{"line":226,"column":61}},"65":{"start":{"line":227,"column":16},"end":{"line":229,"column":17}},"66":{"start":{"line":228,"column":20},"end":{"line":228,"column":32}},"67":{"start":{"line":231,"column":16},"end":{"line":231,"column":54}},"68":{"start":{"line":233,"column":12},"end":{"line":233,"column":18}},"69":{"start":{"line":237,"column":12},"end":{"line":237,"column":50}},"70":{"start":{"line":238,"column":12},"end":{"line":238,"column":18}},"71":{"start":{"line":241,"column":12},"end":{"line":241,"column":52}},"72":{"start":{"line":244,"column":4},"end":{"line":244,"column":66}},"73":{"start":{"line":254,"column":0},"end":{"line":260,"column":1}},"74":{"start":{"line":255,"column":4},"end":{"line":255,"column":51}},"75":{"start":{"line":257,"column":4},"end":{"line":257,"column":68}},"76":{"start":{"line":259,"column":4},"end":{"line":259,"column":48}},"77":{"start":{"line":269,"column":0},"end":{"line":278,"column":1}},"78":{"start":{"line":270,"column":4},"end":{"line":270,"column":51}},"79":{"start":{"line":273,"column":4},"end":{"line":273,"column":36}},"80":{"start":{"line":275,"column":4},"end":{"line":275,"column":62}},"81":{"start":{"line":277,"column":4},"end":{"line":277,"column":48}},"82":{"start":{"line":287,"column":0},"end":{"line":293,"column":1}},"83":{"start":{"line":288,"column":4},"end":{"line":288,"column":49}},"84":{"start":{"line":290,"column":4},"end":{"line":290,"column":91}},"85":{"start":{"line":292,"column":4},"end":{"line":292,"column":48}},"86":{"start":{"line":303,"column":0},"end":{"line":321,"column":1}},"87":{"start":{"line":304,"column":4},"end":{"line":320,"column":5}},"88":{"start":{"line":306,"column":12},"end":{"line":306,"column":48}},"89":{"start":{"line":307,"column":12},"end":{"line":307,"column":18}},"90":{"start":{"line":310,"column":12},"end":{"line":310,"column":50}},"91":{"start":{"line":311,"column":12},"end":{"line":311,"column":18}},"92":{"start":{"line":315,"column":12},"end":{"line":315,"column":50}},"93":{"start":{"line":316,"column":12},"end":{"line":316,"column":18}},"94":{"start":{"line":319,"column":12},"end":{"line":319,"column":65}},"95":{"start":{"line":331,"column":0},"end":{"line":347,"column":1}},"96":{"start":{"line":334,"column":4},"end":{"line":334,"column":61}},"97":{"start":{"line":336,"column":4},"end":{"line":340,"column":5}},"98":{"start":{"line":339,"column":8},"end":{"line":339,"column":55}},"99":{"start":{"line":346,"column":4},"end":{"line":346,"column":34}},"100":{"start":{"line":356,"column":0},"end":{"line":360,"column":1}},"101":{"start":{"line":357,"column":4},"end":{"line":357,"column":47}},"102":{"start":{"line":359,"column":4},"end":{"line":359,"column":46}},"103":{"start":{"line":368,"column":0},"end":{"line":387,"column":1}},"104":{"start":{"line":369,"column":4},"end":{"line":376,"column":5}},"105":{"start":{"line":375,"column":8},"end":{"line":375,"column":75}},"106":{"start":{"line":378,"column":4},"end":{"line":384,"column":5}},"107":{"start":{"line":383,"column":8},"end":{"line":383,"column":67}},"108":{"start":{"line":386,"column":4},"end":{"line":386,"column":35}},"109":{"start":{"line":399,"column":0},"end":{"line":440,"column":1}},"110":{"start":{"line":400,"column":4},"end":{"line":400,"column":39}},"111":{"start":{"line":403,"column":4},"end":{"line":405,"column":5}},"112":{"start":{"line":404,"column":8},"end":{"line":404,"column":41}},"113":{"start":{"line":408,"column":4},"end":{"line":437,"column":15}},"114":{"start":{"line":409,"column":8},"end":{"line":435,"column":9}},"115":{"start":{"line":410,"column":12},"end":{"line":422,"column":13}},"116":{"start":{"line":411,"column":16},"end":{"line":411,"column":65}},"117":{"start":{"line":412,"column":19},"end":{"line":422,"column":13}},"118":{"start":{"line":418,"column":16},"end":{"line":421,"column":18}},"119":{"start":{"line":423,"column":12},"end":{"line":423,"column":43}},"120":{"start":{"line":424,"column":12},"end":{"line":424,"column":87}},"121":{"start":{"line":433,"column":12},"end":{"line":433,"column":58}},"122":{"start":{"line":434,"column":12},"end":{"line":434,"column":20}},"123":{"start":{"line":439,"column":4},"end":{"line":439,"column":18}},"124":{"start":{"line":449,"column":0},"end":{"line":484,"column":1}},"125":{"start":{"line":456,"column":4},"end":{"line":458,"column":5}},"126":{"start":{"line":457,"column":8},"end":{"line":457,"column":49}},"127":{"start":{"line":460,"column":4},"end":{"line":481,"column":5}},"128":{"start":{"line":466,"column":8},"end":{"line":467,"column":67}},"129":{"start":{"line":469,"column":8},"end":{"line":478,"column":9}},"130":{"start":{"line":470,"column":12},"end":{"line":470,"column":76}},"131":{"start":{"line":471,"column":15},"end":{"line":478,"column":9}},"132":{"start":{"line":477,"column":12},"end":{"line":477,"column":72}},"133":{"start":{"line":479,"column":11},"end":{"line":481,"column":5}},"134":{"start":{"line":480,"column":8},"end":{"line":480,"column":35}},"135":{"start":{"line":483,"column":4},"end":{"line":483,"column":16}},"136":{"start":{"line":497,"column":0},"end":{"line":520,"column":1}},"137":{"start":{"line":498,"column":4},"end":{"line":500,"column":5}},"138":{"start":{"line":499,"column":8},"end":{"line":499,"column":70}},"139":{"start":{"line":501,"column":4},"end":{"line":501,"column":30}},"140":{"start":{"line":503,"column":4},"end":{"line":512,"column":5}},"141":{"start":{"line":504,"column":8},"end":{"line":504,"column":40}},"142":{"start":{"line":505,"column":8},"end":{"line":505,"column":77}},"143":{"start":{"line":506,"column":8},"end":{"line":506,"column":123}},"144":{"start":{"line":508,"column":8},"end":{"line":508,"column":82}},"145":{"start":{"line":509,"column":8},"end":{"line":509,"column":64}},"146":{"start":{"line":510,"column":8},"end":{"line":510,"column":86}},"147":{"start":{"line":511,"column":8},"end":{"line":511,"column":56}},"148":{"start":{"line":513,"column":4},"end":{"line":513,"column":76}},"149":{"start":{"line":514,"column":4},"end":{"line":514,"column":60}},"150":{"start":{"line":515,"column":4},"end":{"line":515,"column":82}},"151":{"start":{"line":516,"column":4},"end":{"line":516,"column":24}},"152":{"start":{"line":531,"column":0},"end":{"line":578,"column":1}},"153":{"start":{"line":532,"column":4},"end":{"line":534,"column":44}},"154":{"start":{"line":535,"column":4},"end":{"line":535,"column":46}},"155":{"start":{"line":537,"column":4},"end":{"line":575,"column":5}},"156":{"start":{"line":540,"column":8},"end":{"line":542,"column":9}},"157":{"start":{"line":541,"column":12},"end":{"line":541,"column":44}},"158":{"start":{"line":545,"column":8},"end":{"line":547,"column":9}},"159":{"start":{"line":546,"column":12},"end":{"line":546,"column":33}},"160":{"start":{"line":550,"column":8},"end":{"line":556,"column":9}},"161":{"start":{"line":551,"column":12},"end":{"line":555,"column":13}},"162":{"start":{"line":552,"column":16},"end":{"line":552,"column":75}},"163":{"start":{"line":554,"column":16},"end":{"line":554,"column":76}},"164":{"start":{"line":559,"column":8},"end":{"line":559,"column":45}},"165":{"start":{"line":565,"column":8},"end":{"line":567,"column":9}},"166":{"start":{"line":566,"column":12},"end":{"line":566,"column":61}},"167":{"start":{"line":569,"column":8},"end":{"line":573,"column":9}},"168":{"start":{"line":572,"column":12},"end":{"line":572,"column":57}},"169":{"start":{"line":577,"column":4},"end":{"line":577,"column":18}},"170":{"start":{"line":584,"column":0},"end":{"line":613,"column":2}},"171":{"start":{"line":603,"column":8},"end":{"line":609,"column":9}},"172":{"start":{"line":604,"column":12},"end":{"line":604,"column":67}},"173":{"start":{"line":606,"column":12},"end":{"line":608,"column":13}},"174":{"start":{"line":607,"column":16},"end":{"line":607,"column":32}},"175":{"start":{"line":611,"column":8},"end":{"line":611,"column":20}}},"branchMap":{"1":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":27},"end":{"line":45,"column":28}},{"start":{"line":45,"column":31},"end":{"line":45,"column":33}}]},"2":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":11},"end":{"line":82,"column":36}},{"start":{"line":82,"column":40},"end":{"line":82,"column":72}}]},"3":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":15},"end":{"line":101,"column":48}},{"start":{"line":101,"column":52},"end":{"line":101,"column":54}}]},"4":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":15},"end":{"line":142,"column":63}},{"start":{"line":142,"column":94},"end":{"line":142,"column":96},"skip":true}]},"5":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":15},"end":{"line":178,"column":56}},{"start":{"line":178,"column":60},"end":{"line":178,"column":64}}]},"6":{"line":213,"type":"switch","locations":[{"start":{"line":214,"column":8},"end":{"line":222,"column":18}},{"start":{"line":224,"column":8},"end":{"line":233,"column":18}},{"start":{"line":235,"column":8},"end":{"line":235,"column":21}},{"start":{"line":236,"column":8},"end":{"line":238,"column":18}},{"start":{"line":240,"column":8},"end":{"line":241,"column":52}}]},"7":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":12},"end":{"line":216,"column":12}},{"start":{"line":216,"column":12},"end":{"line":216,"column":12}}]},"8":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":16},"end":{"line":218,"column":16}},{"start":{"line":218,"column":16},"end":{"line":218,"column":16}}]},"9":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":12},"end":{"line":225,"column":12}},{"start":{"line":225,"column":12},"end":{"line":225,"column":12}}]},"10":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":16},"end":{"line":227,"column":16}},{"start":{"line":227,"column":16},"end":{"line":227,"column":16}}]},"11":{"line":304,"type":"switch","locations":[{"start":{"line":305,"column":8},"end":{"line":307,"column":18}},{"start":{"line":309,"column":8},"end":{"line":311,"column":18}},{"start":{"line":313,"column":8},"end":{"line":313,"column":21}},{"start":{"line":314,"column":8},"end":{"line":316,"column":18}},{"start":{"line":318,"column":8},"end":{"line":319,"column":65}}]},"12":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":4},"end":{"line":336,"column":4}},{"start":{"line":336,"column":4},"end":{"line":336,"column":4}}]},"13":{"line":336,"type":"binary-expr","locations":[{"start":{"line":336,"column":8},"end":{"line":336,"column":22}},{"start":{"line":336,"column":26},"end":{"line":336,"column":67}}]},"14":{"line":369,"type":"if","locations":[{"start":{"line":369,"column":4},"end":{"line":369,"column":4}},{"start":{"line":369,"column":4},"end":{"line":369,"column":4}}]},"15":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":4},"end":{"line":378,"column":4}},{"start":{"line":378,"column":4},"end":{"line":378,"column":4}}]},"16":{"line":403,"type":"if","locations":[{"start":{"line":403,"column":4},"end":{"line":403,"column":4}},{"start":{"line":403,"column":4},"end":{"line":403,"column":4}}]},"17":{"line":410,"type":"if","locations":[{"start":{"line":410,"column":12},"end":{"line":410,"column":12}},{"start":{"line":410,"column":12},"end":{"line":410,"column":12}}]},"18":{"line":412,"type":"if","locations":[{"start":{"line":412,"column":19},"end":{"line":412,"column":19}},{"start":{"line":412,"column":19},"end":{"line":412,"column":19}}]},"19":{"line":418,"type":"cond-expr","locations":[{"start":{"line":419,"column":22},"end":{"line":419,"column":32}},{"start":{"line":420,"column":22},"end":{"line":420,"column":81}}]},"20":{"line":420,"type":"binary-expr","locations":[{"start":{"line":420,"column":32},"end":{"line":420,"column":42}},{"start":{"line":420,"column":46},"end":{"line":420,"column":68}}]},"21":{"line":456,"type":"if","locations":[{"start":{"line":456,"column":4},"end":{"line":456,"column":4}},{"start":{"line":456,"column":4},"end":{"line":456,"column":4}}]},"22":{"line":460,"type":"if","locations":[{"start":{"line":460,"column":4},"end":{"line":460,"column":4}},{"start":{"line":460,"column":4},"end":{"line":460,"column":4}}]},"23":{"line":469,"type":"if","locations":[{"start":{"line":469,"column":8},"end":{"line":469,"column":8}},{"start":{"line":469,"column":8},"end":{"line":469,"column":8}}]},"24":{"line":471,"type":"if","locations":[{"start":{"line":471,"column":15},"end":{"line":471,"column":15}},{"start":{"line":471,"column":15},"end":{"line":471,"column":15}}]},"25":{"line":479,"type":"if","locations":[{"start":{"line":479,"column":11},"end":{"line":479,"column":11}},{"start":{"line":479,"column":11},"end":{"line":479,"column":11}}]},"26":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":4},"end":{"line":498,"column":4}},{"start":{"line":498,"column":4},"end":{"line":498,"column":4}}]},"27":{"line":499,"type":"binary-expr","locations":[{"start":{"line":499,"column":40},"end":{"line":499,"column":50}},{"start":{"line":499,"column":54},"end":{"line":499,"column":56}}]},"28":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":4},"end":{"line":503,"column":4}},{"start":{"line":503,"column":4},"end":{"line":503,"column":4}}]},"29":{"line":537,"type":"if","locations":[{"start":{"line":537,"column":4},"end":{"line":537,"column":4}},{"start":{"line":537,"column":4},"end":{"line":537,"column":4}}]},"30":{"line":540,"type":"if","locations":[{"start":{"line":540,"column":8},"end":{"line":540,"column":8}},{"start":{"line":540,"column":8},"end":{"line":540,"column":8}}]},"31":{"line":545,"type":"if","locations":[{"start":{"line":545,"column":8},"end":{"line":545,"column":8}},{"start":{"line":545,"column":8},"end":{"line":545,"column":8}}]},"32":{"line":550,"type":"if","locations":[{"start":{"line":550,"column":8},"end":{"line":550,"column":8}},{"start":{"line":550,"column":8},"end":{"line":550,"column":8}}]},"33":{"line":551,"type":"if","locations":[{"start":{"line":551,"column":12},"end":{"line":551,"column":12}},{"start":{"line":551,"column":12},"end":{"line":551,"column":12}}]},"34":{"line":552,"type":"binary-expr","locations":[{"start":{"line":552,"column":45},"end":{"line":552,"column":52}},{"start":{"line":552,"column":56},"end":{"line":552,"column":58}}]},"35":{"line":565,"type":"if","locations":[{"start":{"line":565,"column":8},"end":{"line":565,"column":8}},{"start":{"line":565,"column":8},"end":{"line":565,"column":8}}]},"36":{"line":569,"type":"if","locations":[{"start":{"line":569,"column":8},"end":{"line":569,"column":8}},{"start":{"line":569,"column":8},"end":{"line":569,"column":8}}]},"37":{"line":569,"type":"binary-expr","locations":[{"start":{"line":569,"column":12},"end":{"line":569,"column":22}},{"start":{"line":569,"column":26},"end":{"line":569,"column":43}}]},"38":{"line":606,"type":"if","locations":[{"start":{"line":606,"column":12},"end":{"line":606,"column":12}},{"start":{"line":606,"column":12},"end":{"line":606,"column":12}}]}},"code":["/**"," * @fileoverview Helper to locate and load configuration files."," * @author Nicholas C. Zakas"," */","","/* eslint no-use-before-define: 0 */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    shell = require(\"shelljs\"),","    ConfigOps = require(\"./config-ops\"),","    validator = require(\"./config-validator\"),","    Plugins = require(\"./plugins\"),","    pathUtil = require(\"../util/path-util\"),","    ModuleResolver = require(\"../util/module-resolver\"),","    pathIsInside = require(\"path-is-inside\"),","    stripBom = require(\"strip-bom\"),","    stripComments = require(\"strip-json-comments\"),","    stringify = require(\"json-stable-stringify\"),","    defaultOptions = require(\"../../conf/eslint-recommended\"),","    requireUncached = require(\"require-uncached\");","","const debug = require(\"debug\")(\"eslint:config-file\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Determines sort order for object keys for json-stable-stringify"," *"," * see: https://github.com/substack/json-stable-stringify#cmp"," *"," * @param   {Object} a The first comparison object ({key: akey, value: avalue})"," * @param   {Object} b The second comparison object ({key: bkey, value: bvalue})"," * @returns {number}   1 or -1, used in stringify cmp method"," */","function sortByKey(a, b) {","    return a.key > b.key ? 1 : -1;","}","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","const CONFIG_FILES = [","    \".eslintrc.js\",","    \".eslintrc.yaml\",","    \".eslintrc.yml\",","    \".eslintrc.json\",","    \".eslintrc\",","    \"package.json\"","];","","const resolver = new ModuleResolver();","","/**"," * Convenience wrapper for synchronously reading file contents."," * @param {string} filePath The filename to read."," * @returns {string} The file contents."," * @private"," */","function readFile(filePath) {","    return stripBom(fs.readFileSync(filePath, \"utf8\"));","}","","/**"," * Determines if a given string represents a filepath or not using the same"," * conventions as require(), meaning that the first character must be nonalphanumeric"," * and not the @ sign which is used for scoped packages to be considered a file path."," * @param {string} filePath The string to check."," * @returns {boolean} True if it's a filepath, false if not."," * @private"," */","function isFilePath(filePath) {","    return path.isAbsolute(filePath) || !/\\w|@/.test(filePath.charAt(0));","}","","/**"," * Loads a YAML configuration from a file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadYAMLConfigFile(filePath) {","    debug(`Loading YAML config file: ${filePath}`);","","    // lazy load YAML to improve performance when not used","    const yaml = require(\"js-yaml\");","","    try {","","        // empty YAML file can be null, so always use","        return yaml.safeLoad(readFile(filePath)) || {};","    } catch (e) {","        debug(`Error reading YAML file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Loads a JSON configuration from a file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadJSONConfigFile(filePath) {","    debug(`Loading JSON config file: ${filePath}`);","","    try {","        return JSON.parse(stripComments(readFile(filePath)));","    } catch (e) {","        debug(`Error reading JSON file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Loads a legacy (.eslintrc) configuration from a file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadLegacyConfigFile(filePath) {","    debug(`Loading config file: ${filePath}`);","","    // lazy load YAML to improve performance when not used","    const yaml = require(\"js-yaml\");","","    try {","        return yaml.safeLoad(stripComments(readFile(filePath))) || /* istanbul ignore next */ {};","    } catch (e) {","        debug(`Error reading YAML file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Loads a JavaScript configuration from a file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadJSConfigFile(filePath) {","    debug(`Loading JS config file: ${filePath}`);","    try {","        return requireUncached(filePath);","    } catch (e) {","        debug(`Error reading JavaScript file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Loads a configuration from a package.json file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadPackageJSONConfigFile(filePath) {","    debug(`Loading package.json config file: ${filePath}`);","    try {","        return loadJSONConfigFile(filePath).eslintConfig || null;","    } catch (e) {","        debug(`Error reading package.json file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Creates an error to notify about a missing config to extend from."," * @param {string} configName The name of the missing config."," * @returns {Error} The error object to throw"," * @private"," */","function configMissingError(configName) {","    const error = new Error(`Failed to load config \"${configName}\" to extend from.`);","","    error.messageTemplate = \"extend-config-missing\";","    error.messageData = {","        configName","    };","    return error;","}","","/**"," * Loads a configuration file regardless of the source. Inspects the file path"," * to determine the correctly way to load the config file."," * @param {Object} file The path to the configuration."," * @returns {Object} The configuration information."," * @private"," */","function loadConfigFile(file) {","    const filePath = file.filePath;","    let config;","","    switch (path.extname(filePath)) {","        case \".js\":","            config = loadJSConfigFile(filePath);","            if (file.configName) {","                config = config.configs[file.configName];","                if (!config) {","                    throw configMissingError(file.configFullName);","                }","            }","            break;","","        case \".json\":","            if (path.basename(filePath) === \"package.json\") {","                config = loadPackageJSONConfigFile(filePath);","                if (config === null) {","                    return null;","                }","            } else {","                config = loadJSONConfigFile(filePath);","            }","            break;","","        case \".yaml\":","        case \".yml\":","            config = loadYAMLConfigFile(filePath);","            break;","","        default:","            config = loadLegacyConfigFile(filePath);","    }","","    return ConfigOps.merge(ConfigOps.createEmptyConfig(), config);","}","","/**"," * Writes a configuration file in JSON format."," * @param {Object} config The configuration object to write."," * @param {string} filePath The filename to write to."," * @returns {void}"," * @private"," */","function writeJSONConfigFile(config, filePath) {","    debug(`Writing JSON config file: ${filePath}`);","","    const content = stringify(config, { cmp: sortByKey, space: 4 });","","    fs.writeFileSync(filePath, content, \"utf8\");","}","","/**"," * Writes a configuration file in YAML format."," * @param {Object} config The configuration object to write."," * @param {string} filePath The filename to write to."," * @returns {void}"," * @private"," */","function writeYAMLConfigFile(config, filePath) {","    debug(`Writing YAML config file: ${filePath}`);","","    // lazy load YAML to improve performance when not used","    const yaml = require(\"js-yaml\");","","    const content = yaml.safeDump(config, { sortKeys: true });","","    fs.writeFileSync(filePath, content, \"utf8\");","}","","/**"," * Writes a configuration file in JavaScript format."," * @param {Object} config The configuration object to write."," * @param {string} filePath The filename to write to."," * @returns {void}"," * @private"," */","function writeJSConfigFile(config, filePath) {","    debug(`Writing JS config file: ${filePath}`);","","    const content = `module.exports = ${stringify(config, { cmp: sortByKey, space: 4 })};`;","","    fs.writeFileSync(filePath, content, \"utf8\");","}","","/**"," * Writes a configuration file."," * @param {Object} config The configuration object to write."," * @param {string} filePath The filename to write to."," * @returns {void}"," * @throws {Error} When an unknown file type is specified."," * @private"," */","function write(config, filePath) {","    switch (path.extname(filePath)) {","        case \".js\":","            writeJSConfigFile(config, filePath);","            break;","","        case \".json\":","            writeJSONConfigFile(config, filePath);","            break;","","        case \".yaml\":","        case \".yml\":","            writeYAMLConfigFile(config, filePath);","            break;","","        default:","            throw new Error(\"Can't write to unknown file type.\");","    }","}","","/**"," * Determines the base directory for node packages referenced in a config file."," * This does not include node_modules in the path so it can be used for all"," * references relative to a config file."," * @param {string} configFilePath The config file referencing the file."," * @returns {string} The base directory for the file path."," * @private"," */","function getBaseDir(configFilePath) {","","    // calculates the path of the project including ESLint as dependency","    const projectPath = path.resolve(__dirname, \"../../../\");","","    if (configFilePath && pathIsInside(configFilePath, projectPath)) {","","        // be careful of https://github.com/substack/node-resolve/issues/78","        return path.join(path.resolve(configFilePath));","    }","","    /*","     * default to ESLint project path since it's unlikely that plugins will be","     * in this directory","     */","    return path.join(projectPath);","}","","/**"," * Determines the lookup path, including node_modules, for package"," * references relative to a config file."," * @param {string} configFilePath The config file referencing the file."," * @returns {string} The lookup path for the file path."," * @private"," */","function getLookupPath(configFilePath) {","    const basedir = getBaseDir(configFilePath);","","    return path.join(basedir, \"node_modules\");","}","","/**"," * Resolves a eslint core config path"," * @param {string} name The eslint config name."," * @returns {string} The resolved path of the config."," * @private"," */","function getEslintCoreConfigPath(name) {","    if (name === \"eslint:recommended\") {","","       /*","        * Add an explicit substitution for eslint:recommended to","        * conf/eslint-recommended.js.","        */","        return path.resolve(__dirname, \"../../conf/eslint-recommended.js\");","    }","","    if (name === \"eslint:all\") {","","       /*","        * Add an explicit substitution for eslint:all to conf/eslint-all.js","        */","        return path.resolve(__dirname, \"../../conf/eslint-all.js\");","    }","","    throw configMissingError(name);","}","","/**"," * Applies values from the \"extends\" field in a configuration file."," * @param {Object} config The configuration information."," * @param {string} filePath The file path from which the configuration information"," *      was loaded."," * @param {string} [relativeTo] The path to resolve relative to."," * @returns {Object} A new configuration object with all of the \"extends\" fields"," *      loaded and merged."," * @private"," */","function applyExtends(config, filePath, relativeTo) {","    let configExtends = config.extends;","","    // normalize into an array for easier handling","    if (!Array.isArray(config.extends)) {","        configExtends = [config.extends];","    }","","    // Make the last element in an array take the highest precedence","    config = configExtends.reduceRight((previousValue, parentPath) => {","        try {","            if (parentPath.startsWith(\"eslint:\")) {","                parentPath = getEslintCoreConfigPath(parentPath);","            } else if (isFilePath(parentPath)) {","","                /*","                 * If the `extends` path is relative, use the directory of the current configuration","                 * file as the reference point. Otherwise, use as-is.","                 */","                parentPath = (path.isAbsolute(parentPath)","                    ? parentPath","                    : path.join(relativeTo || path.dirname(filePath), parentPath)","                );","            }","            debug(`Loading ${parentPath}`);","            return ConfigOps.merge(load(parentPath, false, relativeTo), previousValue);","        } catch (e) {","","            /*","             * If the file referenced by `extends` failed to load, add the path","             * to the configuration file that referenced it to the error","             * message so the user is able to see where it was referenced from,","             * then re-throw.","             */","            e.message += `\\nReferenced from: ${filePath}`;","            throw e;","        }","","    }, config);","","    return config;","}","","/**"," * Brings package name to correct format based on prefix"," * @param {string} name The name of the package."," * @param {string} prefix Can be either \"eslint-plugin\" or \"eslint-config"," * @returns {string} Normalized name of the package"," * @private"," */","function normalizePackageName(name, prefix) {","","    /*","     * On Windows, name can come in with Windows slashes instead of Unix slashes.","     * Normalize to Unix first to avoid errors later on.","     * https://github.com/eslint/eslint/issues/5644","     */","    if (name.indexOf(\"\\\\\") > -1) {","        name = pathUtil.convertPathToPosix(name);","    }","","    if (name.charAt(0) === \"@\") {","","        /*","         * it's a scoped package","         * package name is \"eslint-config\", or just a username","         */","        const scopedPackageShortcutRegex = new RegExp(`^(@[^/]+)(?:/(?:${prefix})?)?$`),","            scopedPackageNameRegex = new RegExp(`^${prefix}(-|$)`);","","        if (scopedPackageShortcutRegex.test(name)) {","            name = name.replace(scopedPackageShortcutRegex, `$1/${prefix}`);","        } else if (!scopedPackageNameRegex.test(name.split(\"/\")[1])) {","","            /*","             * for scoped packages, insert the eslint-config after the first / unless","             * the path is already @scope/eslint or @scope/eslint-config-xxx","             */","            name = name.replace(/^@([^/]+)\\/(.*)$/, `@$1/${prefix}-$2`);","        }","    } else if (name.indexOf(`${prefix}-`) !== 0) {","        name = `${prefix}-${name}`;","    }","","    return name;","}","","/**"," * Resolves a configuration file path into the fully-formed path, whether filename"," * or package name."," * @param {string} filePath The filepath to resolve."," * @param {string} [relativeTo] The path to resolve relative to."," * @returns {Object} An object containing 3 properties:"," * - 'filePath' (required) the resolved path that can be used directly to load the configuration."," * - 'configName' the name of the configuration inside the plugin."," * - 'configFullName' the name of the configuration as used in the eslint config (e.g. 'plugin:node/recommended')."," * @private"," */","function resolve(filePath, relativeTo) {","    if (isFilePath(filePath)) {","        return { filePath: path.resolve(relativeTo || \"\", filePath) };","    }","    let normalizedPackageName;","","    if (filePath.startsWith(\"plugin:\")) {","        const configFullName = filePath;","        const pluginName = filePath.substr(7, filePath.lastIndexOf(\"/\") - 7);","        const configName = filePath.substr(filePath.lastIndexOf(\"/\") + 1, filePath.length - filePath.lastIndexOf(\"/\") - 1);","","        normalizedPackageName = normalizePackageName(pluginName, \"eslint-plugin\");","        debug(`Attempting to resolve ${normalizedPackageName}`);","        filePath = resolver.resolve(normalizedPackageName, getLookupPath(relativeTo));","        return { filePath, configName, configFullName };","    }","    normalizedPackageName = normalizePackageName(filePath, \"eslint-config\");","    debug(`Attempting to resolve ${normalizedPackageName}`);","    filePath = resolver.resolve(normalizedPackageName, getLookupPath(relativeTo));","    return { filePath };","","","","}","","/**"," * Loads a configuration file from the given file path."," * @param {string} filePath The filename or package name to load the configuration"," *      information from."," * @param {boolean} [applyEnvironments=false] Set to true to merge in environment settings."," * @param {string} [relativeTo] The path to resolve relative to."," * @returns {Object} The configuration information."," * @private"," */","function load(filePath, applyEnvironments, relativeTo) {","    const resolvedPath = resolve(filePath, relativeTo),","        dirname = path.dirname(resolvedPath.filePath),","        lookupPath = getLookupPath(dirname);","    let config = loadConfigFile(resolvedPath);","","    if (config) {","","        // ensure plugins are properly loaded first","        if (config.plugins) {","            Plugins.loadAll(config.plugins);","        }","","        // remove parser from config if it is the default parser","        if (config.parser === defaultOptions.parser) {","            config.parser = null;","        }","","        // include full path of parser if present","        if (config.parser) {","            if (isFilePath(config.parser)) {","                config.parser = path.resolve(dirname || \"\", config.parser);","            } else {","                config.parser = resolver.resolve(config.parser, lookupPath);","            }","        }","","        // validate the configuration before continuing","        validator.validate(config, filePath);","","        /*","         * If an `extends` property is defined, it represents a configuration file to use as","         * a \"parent\". Load the referenced file and merge the configuration recursively.","         */","        if (config.extends) {","            config = applyExtends(config, filePath, dirname);","        }","","        if (config.env && applyEnvironments) {","","            // Merge in environment-specific globals and parserOptions.","            config = ConfigOps.applyEnvironments(config);","        }","","    }","","    return config;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    getBaseDir,","    getLookupPath,","    load,","    resolve,","    write,","    applyExtends,","    normalizePackageName,","    CONFIG_FILES,","","    /**","     * Retrieves the configuration filename for a given directory. It loops over all","     * of the valid configuration filenames in order to find the first one that exists.","     * @param {string} directory The directory to check for a config file.","     * @returns {?string} The filename of the configuration file for the directory","     *      or null if there is no configuration file in the directory.","     */","    getFilenameForDirectory(directory) {","        for (let i = 0, len = CONFIG_FILES.length; i < len; i++) {","            const filename = path.join(directory, CONFIG_FILES[i]);","","            if (shell.test(\"-f\", filename)) {","                return filename;","            }","        }","","        return null;","    }","};",""],"l":{"14":1,"29":1,"44":1,"45":0,"52":1,"61":1,"69":1,"70":0,"81":1,"82":0,"92":1,"93":0,"96":0,"98":0,"101":0,"103":0,"104":0,"105":0,"116":1,"117":0,"119":0,"120":0,"122":0,"123":0,"124":0,"135":1,"136":0,"139":0,"141":0,"142":0,"144":0,"145":0,"146":0,"157":1,"158":0,"159":0,"160":0,"162":0,"163":0,"164":0,"175":1,"176":0,"177":0,"178":0,"180":0,"181":0,"182":0,"192":1,"193":0,"195":0,"196":0,"199":0,"209":1,"210":0,"211":0,"213":0,"215":0,"216":0,"217":0,"218":0,"219":0,"222":0,"225":0,"226":0,"227":0,"228":0,"231":0,"233":0,"237":0,"238":0,"241":0,"244":0,"254":1,"255":0,"257":0,"259":0,"269":1,"270":0,"273":0,"275":0,"277":0,"287":1,"288":0,"290":0,"292":0,"303":1,"304":0,"306":0,"307":0,"310":0,"311":0,"315":0,"316":0,"319":0,"331":1,"334":0,"336":0,"339":0,"346":0,"356":1,"357":0,"359":0,"368":1,"369":0,"375":0,"378":0,"383":0,"386":0,"399":1,"400":0,"403":0,"404":0,"408":0,"409":0,"410":0,"411":0,"412":0,"418":0,"423":0,"424":0,"433":0,"434":0,"439":0,"449":1,"456":0,"457":0,"460":0,"466":0,"469":0,"470":0,"471":0,"477":0,"479":0,"480":0,"483":0,"497":1,"498":0,"499":0,"501":0,"503":0,"504":0,"505":0,"506":0,"508":0,"509":0,"510":0,"511":0,"513":0,"514":0,"515":0,"516":0,"531":1,"532":0,"535":0,"537":0,"540":0,"541":0,"545":0,"546":0,"550":0,"551":0,"552":0,"554":0,"559":0,"565":0,"566":0,"569":0,"572":0,"577":0,"584":1,"603":0,"604":0,"606":0,"607":0,"611":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/plugins.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/plugins.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"removePrefix","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":34}}},"2":{"name":"getNamespace","line":39,"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":34}}},"3":{"name":"removeNamespace","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":37}}},"4":{"name":"(anonymous_4)","line":68,"loc":{"start":{"line":68,"column":10},"end":{"line":68,"column":31}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":7},"end":{"line":91,"column":20}}},"6":{"name":"(anonymous_6)","line":99,"loc":{"start":{"line":99,"column":10},"end":{"line":99,"column":13}}},"7":{"name":"(anonymous_7)","line":109,"loc":{"start":{"line":109,"column":8},"end":{"line":109,"column":21}}},"8":{"name":"(anonymous_8)","line":161,"loc":{"start":{"line":161,"column":11},"end":{"line":161,"column":25}}},"9":{"name":"(anonymous_9)","line":169,"loc":{"start":{"line":169,"column":13},"end":{"line":169,"column":16}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":12,"column":32}},"2":{"start":{"line":14,"column":0},"end":{"line":14,"column":49}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":34}},"4":{"start":{"line":22,"column":0},"end":{"line":23,"column":32}},"5":{"start":{"line":30,"column":0},"end":{"line":32,"column":1}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":119}},"7":{"start":{"line":39,"column":0},"end":{"line":41,"column":1}},"8":{"start":{"line":40,"column":4},"end":{"line":40,"column":89}},"9":{"start":{"line":48,"column":0},"end":{"line":50,"column":1}},"10":{"start":{"line":49,"column":4},"end":{"line":49,"column":51}},"11":{"start":{"line":56,"column":0},"end":{"line":172,"column":2}},"12":{"start":{"line":69,"column":8},"end":{"line":72,"column":66}},"13":{"start":{"line":75,"column":8},"end":{"line":75,"column":36}},"14":{"start":{"line":76,"column":8},"end":{"line":76,"column":53}},"15":{"start":{"line":77,"column":8},"end":{"line":77,"column":46}},"16":{"start":{"line":81,"column":8},"end":{"line":81,"column":50}},"17":{"start":{"line":82,"column":8},"end":{"line":82,"column":67}},"18":{"start":{"line":83,"column":8},"end":{"line":83,"column":60}},"19":{"start":{"line":92,"column":8},"end":{"line":92,"column":43}},"20":{"start":{"line":100,"column":8},"end":{"line":100,"column":23}},"21":{"start":{"line":110,"column":8},"end":{"line":114,"column":86}},"22":{"start":{"line":115,"column":8},"end":{"line":115,"column":26}},"23":{"start":{"line":117,"column":8},"end":{"line":125,"column":9}},"24":{"start":{"line":118,"column":12},"end":{"line":118,"column":97}},"25":{"start":{"line":120,"column":12},"end":{"line":120,"column":65}},"26":{"start":{"line":121,"column":12},"end":{"line":123,"column":14}},"27":{"start":{"line":124,"column":12},"end":{"line":124,"column":34}},"28":{"start":{"line":127,"column":8},"end":{"line":152,"column":9}},"29":{"start":{"line":128,"column":12},"end":{"line":149,"column":13}},"30":{"start":{"line":129,"column":16},"end":{"line":129,"column":43}},"31":{"start":{"line":131,"column":16},"end":{"line":145,"column":17}},"32":{"start":{"line":134,"column":20},"end":{"line":134,"column":46}},"33":{"start":{"line":138,"column":20},"end":{"line":138,"column":64}},"34":{"start":{"line":139,"column":20},"end":{"line":139,"column":114}},"35":{"start":{"line":140,"column":20},"end":{"line":140,"column":72}},"36":{"start":{"line":141,"column":20},"end":{"line":143,"column":22}},"37":{"start":{"line":144,"column":20},"end":{"line":144,"column":43}},"38":{"start":{"line":148,"column":16},"end":{"line":148,"column":36}},"39":{"start":{"line":151,"column":12},"end":{"line":151,"column":44}},"40":{"start":{"line":162,"column":8},"end":{"line":162,"column":45}},"41":{"start":{"line":170,"column":8},"end":{"line":170,"column":38}}},"branchMap":{"1":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":58},"end":{"line":31,"column":105}},{"start":{"line":31,"column":108},"end":{"line":31,"column":118}}]},"2":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":47},"end":{"line":40,"column":83}},{"start":{"line":40,"column":86},"end":{"line":40,"column":88}}]},"3":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":15},"end":{"line":92,"column":34}},{"start":{"line":92,"column":38},"end":{"line":92,"column":42}}]},"4":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8}},{"start":{"line":117,"column":8},"end":{"line":117,"column":8}}]},"5":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":127,"column":8}},{"start":{"line":127,"column":8},"end":{"line":127,"column":8}}]}},"code":["/**"," * @fileoverview Plugins manager"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Environments = require(\"./environments\"),","    Rules = require(\"../rules\");","","const debug = require(\"debug\")(\"eslint:plugins\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","let plugins = Object.create(null);","","const PLUGIN_NAME_PREFIX = \"eslint-plugin-\",","    NAMESPACE_REGEX = /^@.*\\//i;","","/**"," * Removes the prefix `eslint-plugin-` from a plugin name."," * @param {string} pluginName The name of the plugin which may have the prefix."," * @returns {string} The name of the plugin without prefix."," */","function removePrefix(pluginName) {","    return pluginName.indexOf(PLUGIN_NAME_PREFIX) === 0 ? pluginName.substring(PLUGIN_NAME_PREFIX.length) : pluginName;","}","","/**"," * Gets the scope (namespace) of a plugin."," * @param {string} pluginName The name of the plugin which may have the prefix."," * @returns {string} The name of the plugins namepace if it has one."," */","function getNamespace(pluginName) {","    return pluginName.match(NAMESPACE_REGEX) ? pluginName.match(NAMESPACE_REGEX)[0] : \"\";","}","","/**"," * Removes the namespace from a plugin name."," * @param {string} pluginName The name of the plugin which may have the prefix."," * @returns {string} The name of the plugin without the namespace."," */","function removeNamespace(pluginName) {","    return pluginName.replace(NAMESPACE_REGEX, \"\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    removePrefix,","    getNamespace,","    removeNamespace,","","    /**","     * Defines a plugin with a given name rather than loading from disk.","     * @param {string} pluginName The name of the plugin to load.","     * @param {Object} plugin The plugin object.","     * @returns {void}","     */","    define(pluginName, plugin) {","        const pluginNamespace = getNamespace(pluginName),","            pluginNameWithoutNamespace = removeNamespace(pluginName),","            pluginNameWithoutPrefix = removePrefix(pluginNameWithoutNamespace),","            shortName = pluginNamespace + pluginNameWithoutPrefix;","","        // load up environments and rules","        plugins[shortName] = plugin;","        Environments.importPlugin(plugin, shortName);","        Rules.importPlugin(plugin, shortName);","","        // load up environments and rules for the name that '@scope/' was omitted","        // 3 lines below will be removed by 4.0.0","        plugins[pluginNameWithoutPrefix] = plugin;","        Environments.importPlugin(plugin, pluginNameWithoutPrefix);","        Rules.importPlugin(plugin, pluginNameWithoutPrefix);","    },","","    /**","     * Gets a plugin with the given name.","     * @param {string} pluginName The name of the plugin to retrieve.","     * @returns {Object} The plugin or null if not loaded.","     */","    get(pluginName) {","        return plugins[pluginName] || null;","    },","","    /**","     * Returns all plugins that are loaded.","     * @returns {Object} The plugins cache.","     */","    getAll() {","        return plugins;","    },","","    /**","     * Loads a plugin with the given name.","     * @param {string} pluginName The name of the plugin to load.","     * @returns {void}","     * @throws {Error} If the plugin cannot be loaded.","     */","    load(pluginName) {","        const pluginNamespace = getNamespace(pluginName),","            pluginNameWithoutNamespace = removeNamespace(pluginName),","            pluginNameWithoutPrefix = removePrefix(pluginNameWithoutNamespace),","            shortName = pluginNamespace + pluginNameWithoutPrefix,","            longName = pluginNamespace + PLUGIN_NAME_PREFIX + pluginNameWithoutPrefix;","        let plugin = null;","","        if (pluginName.match(/\\s+/)) {","            const whitespaceError = new Error(`Whitespace found in plugin name '${pluginName}'`);","","            whitespaceError.messageTemplate = \"whitespace-found\";","            whitespaceError.messageData = {","                pluginName: longName","            };","            throw whitespaceError;","        }","","        if (!plugins[shortName]) {","            try {","                plugin = require(longName);","            } catch (pluginLoadErr) {","                try {","","                    // Check whether the plugin exists","                    require.resolve(longName);","                } catch (missingPluginErr) {","","                    // If the plugin can't be resolved, display the missing plugin error (usually a config or install error)","                    debug(`Failed to load plugin ${longName}.`);","                    missingPluginErr.message = `Failed to load plugin ${pluginName}: ${missingPluginErr.message}`;","                    missingPluginErr.messageTemplate = \"plugin-missing\";","                    missingPluginErr.messageData = {","                        pluginName: longName","                    };","                    throw missingPluginErr;","                }","","                // Otherwise, the plugin exists and is throwing on module load for some reason, so print the stack trace.","                throw pluginLoadErr;","            }","","            this.define(pluginName, plugin);","        }","    },","","    /**","     * Loads all plugins from an array.","     * @param {string[]} pluginNames An array of plugins names.","     * @returns {void}","     * @throws {Error} If a plugin cannot be loaded.","     */","    loadAll(pluginNames) {","        pluginNames.forEach(this.load, this);","    },","","    /**","     * Resets plugin information. Use for tests only.","     * @returns {void}","     */","    testReset() {","        plugins = Object.create(null);","    }","};",""],"l":{"11":1,"14":1,"20":1,"22":1,"30":1,"31":0,"39":1,"40":0,"48":1,"49":0,"56":1,"69":0,"75":0,"76":0,"77":0,"81":0,"82":0,"83":0,"92":0,"100":0,"110":0,"115":0,"117":0,"118":0,"120":0,"121":0,"124":0,"127":0,"128":0,"129":0,"131":0,"134":0,"138":0,"139":0,"140":0,"141":0,"144":0,"148":0,"151":0,"162":0,"170":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/module-resolver.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/module-resolver.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[1,0],"2":[1,1],"3":[0,0]},"f":{"1":1,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":42,"loc":{"start":{"line":42,"column":15},"end":{"line":42,"column":25}}},"2":{"name":"(anonymous_2)","line":55,"loc":{"start":{"line":55,"column":11},"end":{"line":55,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"2":{"start":{"line":18,"column":0},"end":{"line":29,"column":2}},"3":{"start":{"line":43,"column":8},"end":{"line":43,"column":73}},"4":{"start":{"line":62,"column":8},"end":{"line":62,"column":62}},"5":{"start":{"line":64,"column":8},"end":{"line":64,"column":45}},"6":{"start":{"line":71,"column":8},"end":{"line":71,"column":59}},"7":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"8":{"start":{"line":74,"column":12},"end":{"line":74,"column":60}},"9":{"start":{"line":77,"column":8},"end":{"line":77,"column":22}},"10":{"start":{"line":85,"column":0},"end":{"line":85,"column":32}}},"branchMap":{"1":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":32},"end":{"line":28,"column":71}},{"start":{"line":28,"column":74},"end":{"line":28,"column":101}}]},"2":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":58},"end":{"line":43,"column":65}},{"start":{"line":43,"column":69},"end":{"line":43,"column":71}}]},"3":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":8}},{"start":{"line":73,"column":8},"end":{"line":73,"column":8}}]}},"code":["/**"," * @fileoverview Implements the Node.js require.resolve algorithm"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Module = require(\"module\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","const DEFAULT_OPTIONS = {","","    /*","     * module.paths is an array of paths to search for resolving things relative","     * to this file. Module.globalPaths contains all of the special Node.js","     * directories that can also be searched for modules.","     *","     * Need to check for existence of module.paths because Jest seems not to","     * include it. See https://github.com/eslint/eslint/issues/5791.","     */","    lookupPaths: module.paths ? module.paths.concat(Module.globalPaths) : Module.globalPaths.concat()","};","","/**"," * Resolves modules based on a set of options."," */","class ModuleResolver {","","    /**","     * Resolves modules based on a set of options.","     * @param {Object} options The options for resolving modules.","     * @param {string[]} options.lookupPaths An array of paths to include in the","     *      lookup with the highest priority paths coming first.","     */","    constructor(options) {","        this.options = Object.assign({}, DEFAULT_OPTIONS, options || {});","    }","","    /**","     * Resolves the file location of a given module relative to the configured","     * lookup paths.","     * @param {string} name The module name to resolve.","     * @param {string} extraLookupPath An extra path to look into for the module.","     *      This path is used with the highest priority.","     * @returns {string} The resolved file path for the module.","     * @throws {Error} If the module cannot be resolved.","     */","    resolve(name, extraLookupPath) {","","        /*","         * First, clone the lookup paths so we're not messing things up for","         * subsequent calls to this function. Then, move the extraLookupPath to the","         * top of the lookup paths list so it will be searched first.","         */","        const lookupPaths = this.options.lookupPaths.concat();","","        lookupPaths.unshift(extraLookupPath);","","        /**","         * Module._findPath is an internal method to Node.js, then one they use to","         * lookup file paths when require() is called. So, we are hooking into the","         * exact same logic that Node.js uses.","         */","        const result = Module._findPath(name, lookupPaths);   // eslint-disable-line no-underscore-dangle","","        if (!result) {","            throw new Error(`Cannot find module '${name}'`);","        }","","        return result;","    }","}","","//------------------------------------------------------------------------------","// Public API","//------------------------------------------------------------------------------","","module.exports = ModuleResolver;",""],"l":{"12":1,"18":1,"43":1,"62":0,"64":0,"71":0,"73":0,"74":0,"77":0,"85":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/file-finder.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/file-finder.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"getDirectoryEntries","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":40}}},"2":{"name":"normalizeDirectoryEntries","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":73}}},"3":{"name":"(anonymous_3)","line":69,"loc":{"start":{"line":69,"column":15},"end":{"line":69,"column":28}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":32},"end":{"line":84,"column":44}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":27}},"2":{"start":{"line":26,"column":0},"end":{"line":32,"column":1}},"3":{"start":{"line":27,"column":4},"end":{"line":31,"column":5}},"4":{"start":{"line":28,"column":8},"end":{"line":28,"column":41}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":18}},"6":{"start":{"line":41,"column":0},"end":{"line":54,"column":1}},"7":{"start":{"line":42,"column":4},"end":{"line":42,"column":24}},"8":{"start":{"line":44,"column":4},"end":{"line":52,"column":7}},"9":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"10":{"start":{"line":46,"column":12},"end":{"line":46,"column":65}},"11":{"start":{"line":48,"column":12},"end":{"line":50,"column":13}},"12":{"start":{"line":49,"column":16},"end":{"line":49,"column":48}},"13":{"start":{"line":53,"column":4},"end":{"line":53,"column":20}},"14":{"start":{"line":70,"column":8},"end":{"line":70,"column":64}},"15":{"start":{"line":71,"column":8},"end":{"line":71,"column":40}},"16":{"start":{"line":72,"column":8},"end":{"line":72,"column":24}},"17":{"start":{"line":85,"column":8},"end":{"line":85,"column":33}},"18":{"start":{"line":87,"column":8},"end":{"line":91,"column":9}},"19":{"start":{"line":88,"column":12},"end":{"line":88,"column":58}},"20":{"start":{"line":90,"column":12},"end":{"line":90,"column":33}},"21":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"22":{"start":{"line":94,"column":12},"end":{"line":94,"column":36}},"23":{"start":{"line":97,"column":8},"end":{"line":97,"column":24}},"24":{"start":{"line":98,"column":8},"end":{"line":98,"column":41}},"25":{"start":{"line":99,"column":8},"end":{"line":99,"column":25}},"26":{"start":{"line":101,"column":8},"end":{"line":130,"column":51}},"27":{"start":{"line":102,"column":12},"end":{"line":102,"column":41}},"28":{"start":{"line":103,"column":12},"end":{"line":103,"column":34}},"29":{"start":{"line":105,"column":12},"end":{"line":105,"column":109}},"30":{"start":{"line":107,"column":12},"end":{"line":121,"column":13}},"31":{"start":{"line":108,"column":16},"end":{"line":120,"column":17}},"32":{"start":{"line":110,"column":20},"end":{"line":119,"column":21}},"33":{"start":{"line":111,"column":24},"end":{"line":111,"column":64}},"34":{"start":{"line":114,"column":24},"end":{"line":116,"column":25}},"35":{"start":{"line":115,"column":28},"end":{"line":115,"column":58}},"36":{"start":{"line":118,"column":24},"end":{"line":118,"column":30}},"37":{"start":{"line":122,"column":12},"end":{"line":122,"column":36}},"38":{"start":{"line":125,"column":12},"end":{"line":125,"column":48}},"39":{"start":{"line":127,"column":12},"end":{"line":129,"column":13}},"40":{"start":{"line":128,"column":16},"end":{"line":128,"column":38}},"41":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"42":{"start":{"line":134,"column":12},"end":{"line":134,"column":62}},"43":{"start":{"line":137,"column":8},"end":{"line":137,"column":30}},"44":{"start":{"line":141,"column":0},"end":{"line":141,"column":28}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":12}},{"start":{"line":48,"column":12},"end":{"line":48,"column":12}}]},"3":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":48},"end":{"line":70,"column":53}},{"start":{"line":70,"column":56},"end":{"line":70,"column":63}}]},"4":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":19},"end":{"line":71,"column":22}},{"start":{"line":71,"column":26},"end":{"line":71,"column":39}}]},"5":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":8}},{"start":{"line":87,"column":8},"end":{"line":87,"column":8}}]},"6":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":8}},{"start":{"line":93,"column":8},"end":{"line":93,"column":8}}]},"7":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":12},"end":{"line":107,"column":12}},{"start":{"line":107,"column":12},"end":{"line":107,"column":12}}]},"8":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":20},"end":{"line":110,"column":20}},{"start":{"line":110,"column":20},"end":{"line":110,"column":20}}]},"9":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":12},"end":{"line":127,"column":12}},{"start":{"line":127,"column":12},"end":{"line":127,"column":12}}]}},"code":["/**"," * @fileoverview Util class to find config files."," * @author Aliaksei Shytkin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Get the entries for a directory. Including a try-catch may be detrimental to"," * function performance, so move it out here a separate function."," * @param {string} directory The directory to search in."," * @returns {string[]} The entries in the directory or an empty array on error."," * @private"," */","function getDirectoryEntries(directory) {","    try {","        return fs.readdirSync(directory);","    } catch (ex) {","        return [];","    }","}","","/**"," * Create a hash of filenames from a directory listing"," * @param {string[]} entries Array of directory entries."," * @param {string} directory Path to a current directory."," * @param {string[]} supportedConfigs List of support filenames."," * @returns {Object} Hashmap of filenames"," */","function normalizeDirectoryEntries(entries, directory, supportedConfigs) {","    const fileHash = {};","","    entries.forEach(entry => {","        if (supportedConfigs.indexOf(entry) >= 0) {","            const resolvedEntry = path.resolve(directory, entry);","","            if (fs.statSync(resolvedEntry).isFile()) {","                fileHash[entry] = resolvedEntry;","            }","        }","    });","    return fileHash;","}","","//------------------------------------------------------------------------------","// API","//------------------------------------------------------------------------------","","/**"," * FileFinder class"," */","class FileFinder {","","    /**","     * @param {string[]} files The basename(s) of the file(s) to find.","     * @param {stirng} cwd Current working directory","     */","    constructor(files, cwd) {","        this.fileNames = Array.isArray(files) ? files : [files];","        this.cwd = cwd || process.cwd();","        this.cache = {};","    }","","    /**","     * Find all instances of files with the specified file names, in directory and","     * parent directories. Cache the results.","     * Does not check if a matching directory entry is a file.","     * Searches for all the file names in this.fileNames.","     * Is currently used by lib/config.js to find .eslintrc and package.json files.","     * @param  {string} directory The directory to start the search from.","     * @returns {string[]} The file paths found.","     */","    findAllInDirectoryAndParents(directory) {","        const cache = this.cache;","","        if (directory) {","            directory = path.resolve(this.cwd, directory);","        } else {","            directory = this.cwd;","        }","","        if (cache.hasOwnProperty(directory)) {","            return cache[directory];","        }","","        const dirs = [];","        const fileNames = this.fileNames;","        let searched = 0;","","        do {","            dirs[searched++] = directory;","            cache[directory] = [];","","            const filesMap = normalizeDirectoryEntries(getDirectoryEntries(directory), directory, fileNames);","","            if (Object.keys(filesMap).length) {","                for (let k = 0; k < fileNames.length; k++) {","","                    if (filesMap[fileNames[k]]) {","                        const filePath = filesMap[fileNames[k]];","","                        // Add the file path to the cache of each directory searched.","                        for (let j = 0; j < searched; j++) {","                            cache[dirs[j]].push(filePath);","                        }","","                        break;","                    }","                }","            }","            const child = directory;","","            // Assign parent directory to directory.","            directory = path.dirname(directory);","","            if (directory === child) {","                return cache[dirs[0]];","            }","        } while (!cache.hasOwnProperty(directory));","","        // Add what has been cached previously to the cache of each directory searched.","        for (let i = 0; i < searched; i++) {","            dirs.push.apply(cache[dirs[i]], cache[directory]);","        }","","        return cache[dirs[0]];","    }","}","","module.exports = FileFinder;",""],"l":{"12":1,"26":1,"27":0,"28":0,"30":0,"41":1,"42":0,"44":0,"45":0,"46":0,"48":0,"49":0,"53":0,"70":0,"71":0,"72":0,"85":0,"87":0,"88":0,"90":0,"93":0,"94":0,"97":0,"98":0,"99":0,"101":0,"102":0,"103":0,"105":0,"107":0,"108":0,"110":0,"111":0,"114":0,"115":0,"118":0,"122":0,"125":0,"127":0,"128":0,"133":0,"134":0,"137":0,"141":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/glob-util.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/glob-util.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1},"b":{"1":[0,0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"processPath","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":30}}},"2":{"name":"(anonymous_2)","line":63,"loc":{"start":{"line":63,"column":11},"end":{"line":63,"column":30}}},"3":{"name":"resolveFileGlobPatterns","line":85,"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":52}}},"4":{"name":"listFilesToProcess","line":104,"loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":51}}},"5":{"name":"addFile","line":120,"loc":{"start":{"line":120,"column":4},"end":{"line":120,"column":64}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":17,"column":47}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":51}},"3":{"start":{"line":42,"column":0},"end":{"line":73,"column":1}},"4":{"start":{"line":43,"column":4},"end":{"line":43,"column":58}},"5":{"start":{"line":44,"column":4},"end":{"line":44,"column":64}},"6":{"start":{"line":46,"column":4},"end":{"line":46,"column":63}},"7":{"start":{"line":46,"column":39},"end":{"line":46,"column":61}},"8":{"start":{"line":48,"column":4},"end":{"line":48,"column":23}},"9":{"start":{"line":50,"column":4},"end":{"line":54,"column":5}},"10":{"start":{"line":51,"column":8},"end":{"line":51,"column":40}},"11":{"start":{"line":53,"column":8},"end":{"line":53,"column":49}},"12":{"start":{"line":63,"column":4},"end":{"line":72,"column":6}},"13":{"start":{"line":64,"column":8},"end":{"line":64,"column":31}},"14":{"start":{"line":65,"column":8},"end":{"line":65,"column":57}},"15":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"16":{"start":{"line":68,"column":12},"end":{"line":68,"column":62}},"17":{"start":{"line":71,"column":8},"end":{"line":71,"column":52}},"18":{"start":{"line":85,"column":0},"end":{"line":90,"column":1}},"19":{"start":{"line":87,"column":4},"end":{"line":87,"column":55}},"20":{"start":{"line":89,"column":4},"end":{"line":89,"column":69}},"21":{"start":{"line":89,"column":32},"end":{"line":89,"column":40}},"22":{"start":{"line":104,"column":0},"end":{"line":178,"column":1}},"23":{"start":{"line":105,"column":4},"end":{"line":105,"column":42}},"24":{"start":{"line":106,"column":4},"end":{"line":107,"column":19}},"25":{"start":{"line":109,"column":4},"end":{"line":109,"column":58}},"26":{"start":{"line":120,"column":4},"end":{"line":148,"column":5}},"27":{"start":{"line":121,"column":8},"end":{"line":121,"column":28}},"28":{"start":{"line":122,"column":8},"end":{"line":122,"column":30}},"29":{"start":{"line":124,"column":8},"end":{"line":127,"column":9}},"30":{"start":{"line":125,"column":12},"end":{"line":125,"column":70}},"31":{"start":{"line":126,"column":12},"end":{"line":126,"column":51}},"32":{"start":{"line":129,"column":8},"end":{"line":137,"column":9}},"33":{"start":{"line":130,"column":12},"end":{"line":136,"column":13}},"34":{"start":{"line":131,"column":16},"end":{"line":135,"column":17}},"35":{"start":{"line":132,"column":20},"end":{"line":132,"column":35}},"36":{"start":{"line":134,"column":20},"end":{"line":134,"column":45}},"37":{"start":{"line":139,"column":8},"end":{"line":141,"column":9}},"38":{"start":{"line":140,"column":12},"end":{"line":140,"column":19}},"39":{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},"40":{"start":{"line":144,"column":12},"end":{"line":144,"column":19}},"41":{"start":{"line":146,"column":8},"end":{"line":146,"column":42}},"42":{"start":{"line":147,"column":8},"end":{"line":147,"column":31}},"43":{"start":{"line":150,"column":4},"end":{"line":150,"column":48}},"44":{"start":{"line":151,"column":4},"end":{"line":175,"column":7}},"45":{"start":{"line":152,"column":8},"end":{"line":152,"column":48}},"46":{"start":{"line":154,"column":8},"end":{"line":174,"column":9}},"47":{"start":{"line":155,"column":12},"end":{"line":155,"column":59}},"48":{"start":{"line":157,"column":12},"end":{"line":157,"column":82}},"49":{"start":{"line":161,"column":12},"end":{"line":161,"column":90}},"50":{"start":{"line":163,"column":12},"end":{"line":163,"column":134}},"51":{"start":{"line":164,"column":12},"end":{"line":164,"column":77}},"52":{"start":{"line":165,"column":12},"end":{"line":169,"column":14}},"53":{"start":{"line":171,"column":12},"end":{"line":173,"column":15}},"54":{"start":{"line":172,"column":16},"end":{"line":172,"column":75}},"55":{"start":{"line":177,"column":4},"end":{"line":177,"column":17}},"56":{"start":{"line":180,"column":0},"end":{"line":183,"column":2}}},"branchMap":{"1":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":17},"end":{"line":43,"column":24}},{"start":{"line":43,"column":28},"end":{"line":43,"column":39}},{"start":{"line":43,"column":44},"end":{"line":43,"column":57}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":22},"end":{"line":44,"column":29}},{"start":{"line":44,"column":33},"end":{"line":44,"column":51}},{"start":{"line":44,"column":56},"end":{"line":44,"column":63}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"5":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":14},"end":{"line":105,"column":21}},{"start":{"line":105,"column":25},"end":{"line":105,"column":41}}]},"6":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":17},"end":{"line":109,"column":24}},{"start":{"line":109,"column":28},"end":{"line":109,"column":39}},{"start":{"line":109,"column":44},"end":{"line":109,"column":57}}]},"7":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":8},"end":{"line":124,"column":8}},{"start":{"line":124,"column":8},"end":{"line":124,"column":8}}]},"8":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":23},"end":{"line":125,"column":47}},{"start":{"line":125,"column":52},"end":{"line":125,"column":69}}]},"9":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":8},"end":{"line":129,"column":8}},{"start":{"line":129,"column":8},"end":{"line":129,"column":8}}]},"10":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":130,"column":12}},{"start":{"line":130,"column":12},"end":{"line":130,"column":12}}]},"11":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":16},"end":{"line":131,"column":16}},{"start":{"line":131,"column":16},"end":{"line":131,"column":16}}]},"12":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":8},"end":{"line":139,"column":8}},{"start":{"line":139,"column":8},"end":{"line":139,"column":8}}]},"13":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":12},"end":{"line":139,"column":29}},{"start":{"line":139,"column":33},"end":{"line":139,"column":41}}]},"14":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"15":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":8},"end":{"line":154,"column":8}},{"start":{"line":154,"column":8},"end":{"line":154,"column":8}}]},"16":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":89},"end":{"line":163,"column":105}},{"start":{"line":163,"column":109},"end":{"line":163,"column":129}}]}},"code":["/**"," * @fileoverview Utilities for working with globs and the filesystem."," * @author Ian VanSchooten"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    GlobSync = require(\"./glob\"),","    shell = require(\"shelljs\"),","","    pathUtil = require(\"./path-util\"),","    IgnoredPaths = require(\"../ignored-paths\");","","const debug = require(\"debug\")(\"eslint:glob-util\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks if a provided path is a directory and returns a glob string matching"," * all files under that directory if so, the path itself otherwise."," *"," * Reason for this is that `glob` needs `/**` to collect all the files under a"," * directory where as our previous implementation without `glob` simply walked"," * a directory that is passed. So this is to maintain backwards compatibility."," *"," * Also makes sure all path separators are POSIX style for `glob` compatibility."," *"," * @param {Object}   [options]                    An options object"," * @param {string[]} [options.extensions=[\".js\"]] An array of accepted extensions"," * @param {string}   [options.cwd=process.cwd()]  The cwd to use to resolve relative pathnames"," * @returns {Function} A function that takes a pathname and returns a glob that"," *                     matches all files with the provided extensions if"," *                     pathname is a directory."," */","function processPath(options) {","    const cwd = (options && options.cwd) || process.cwd();","    let extensions = (options && options.extensions) || [\".js\"];","","    extensions = extensions.map(ext => ext.replace(/^\\./, \"\"));","","    let suffix = \"/**\";","","    if (extensions.length === 1) {","        suffix += `/*.${extensions[0]}`;","    } else {","        suffix += `/*.{${extensions.join(\",\")}}`;","    }","","    /**","     * A function that converts a directory name to a glob pattern","     *","     * @param {string} pathname The directory path to be modified","     * @returns {string} The glob path or the file path itself","     * @private","     */","    return function(pathname) {","        let newPath = pathname;","        const resolvedPath = path.resolve(cwd, pathname);","","        if (shell.test(\"-d\", resolvedPath)) {","            newPath = pathname.replace(/[/\\\\]$/, \"\") + suffix;","        }","","        return pathUtil.convertPathToPosix(newPath);","    };","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Resolves any directory patterns into glob-based patterns for easier handling."," * @param   {string[]} patterns    File patterns (such as passed on the command line)."," * @param   {Object} options       An options object."," * @returns {string[]} The equivalent glob patterns and filepath strings."," */","function resolveFileGlobPatterns(patterns, options) {","","    const processPathExtensions = processPath(options);","","    return patterns.filter(p => p.length).map(processPathExtensions);","}","","/**"," * Build a list of absolute filesnames on which ESLint will act."," * Ignored files are excluded from the results, as are duplicates."," *"," * @param   {string[]} globPatterns            Glob patterns."," * @param   {Object}   [options]               An options object."," * @param   {string}   [options.cwd]           CWD (considered for relative filenames)"," * @param   {boolean}  [options.ignore]        False disables use of .eslintignore."," * @param   {string}   [options.ignorePath]    The ignore file to use instead of .eslintignore."," * @param   {string}   [options.ignorePattern] A pattern of files to ignore."," * @returns {string[]} Resolved absolute filenames."," */","function listFilesToProcess(globPatterns, options) {","    options = options || { ignore: true };","    const files = [],","        added = {};","","    const cwd = (options && options.cwd) || process.cwd();","","    /**","     * Executes the linter on a file defined by the `filename`. Skips","     * unsupported file extensions and any files that are already linted.","     * @param {string} filename The file to be processed","     * @param {boolean} shouldWarnIgnored Whether or not a report should be made if","     *                                    the file is ignored","     * @param {IgnoredPaths} ignoredPaths An instance of IgnoredPaths","     * @returns {void}","     */","    function addFile(filename, shouldWarnIgnored, ignoredPaths) {","        let ignored = false;","        let isSilentlyIgnored;","","        if (ignoredPaths.contains(filename, \"default\")) {","            ignored = (options.ignore !== false) && shouldWarnIgnored;","            isSilentlyIgnored = !shouldWarnIgnored;","        }","","        if (options.ignore !== false) {","            if (ignoredPaths.contains(filename, \"custom\")) {","                if (shouldWarnIgnored) {","                    ignored = true;","                } else {","                    isSilentlyIgnored = true;","                }","            }","        }","","        if (isSilentlyIgnored && !ignored) {","            return;","        }","","        if (added[filename]) {","            return;","        }","        files.push({ filename, ignored });","        added[filename] = true;","    }","","    debug(\"Creating list of files to process.\");","    globPatterns.forEach(pattern => {","        const file = path.resolve(cwd, pattern);","","        if (shell.test(\"-f\", file)) {","            const ignoredPaths = new IgnoredPaths(options);","","            addFile(fs.realpathSync(file), !shell.test(\"-d\", file), ignoredPaths);","        } else {","","            // regex to find .hidden or /.hidden patterns, but not ./relative or ../relative","            const globIncludesDotfiles = /(?:(?:^\\.)|(?:[/\\\\]\\.))[^/\\\\.].*/.test(pattern);","","            const ignoredPaths = new IgnoredPaths(Object.assign({}, options, { dotfiles: options.dotfiles || globIncludesDotfiles }));","            const shouldIgnore = ignoredPaths.getIgnoredFoldersGlobChecker();","            const globOptions = {","                nodir: true,","                dot: true,","                cwd","            };","","            new GlobSync(pattern, globOptions, shouldIgnore).found.forEach(globMatch => {","                addFile(path.resolve(cwd, globMatch), false, ignoredPaths);","            });","        }","    });","","    return files;","}","","module.exports = {","    resolveFileGlobPatterns,","    listFilesToProcess","};",""],"l":{"11":1,"19":1,"42":1,"43":0,"44":0,"46":0,"48":0,"50":0,"51":0,"53":0,"63":0,"64":0,"65":0,"67":0,"68":0,"71":0,"85":1,"87":0,"89":0,"104":1,"105":0,"106":0,"109":0,"120":1,"121":0,"122":0,"124":0,"125":0,"126":0,"129":0,"130":0,"131":0,"132":0,"134":0,"139":0,"140":0,"143":0,"144":0,"146":0,"147":0,"150":0,"151":0,"152":0,"154":0,"155":0,"157":0,"161":0,"163":0,"164":0,"165":0,"171":0,"172":0,"177":0,"180":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/glob.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/glob.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"GlobSync","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":50}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":30},"end":{"line":44,"column":56}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":12,"column":27}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}},"3":{"start":{"line":27,"column":0},"end":{"line":38,"column":1}},"4":{"start":{"line":35,"column":4},"end":{"line":35,"column":32}},"5":{"start":{"line":37,"column":4},"end":{"line":37,"column":38}},"6":{"start":{"line":40,"column":0},"end":{"line":40,"column":30}},"7":{"start":{"line":44,"column":0},"end":{"line":60,"column":2}},"8":{"start":{"line":53,"column":4},"end":{"line":53,"column":35}},"9":{"start":{"line":55,"column":4},"end":{"line":57,"column":5}},"10":{"start":{"line":56,"column":8},"end":{"line":56,"column":20}},"11":{"start":{"line":59,"column":4},"end":{"line":59,"column":63}},"12":{"start":{"line":63,"column":0},"end":{"line":63,"column":26}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]}},"code":["/**"," * @fileoverview An inherited `glob.GlobSync` to support .gitignore patterns."," * @author Kael Zhang"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Sync = require(\"glob\").GlobSync,","    util = require(\"util\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","const IGNORE = Symbol(\"ignore\");","","/**"," * Subclass of `glob.GlobSync`"," * @param {string}     pattern      Pattern to be matched."," * @param {Object}     options      `options` for `glob`"," * @param {function()} shouldIgnore Method to check whether a directory should be ignored."," * @constructor"," */","function GlobSync(pattern, options, shouldIgnore) {","","    /**","     * We don't put this thing to argument `options` to avoid","     * further problems, such as `options` validation.","     *","     * Use `Symbol` as much as possible to avoid confliction.","     */","    this[IGNORE] = shouldIgnore;","","    Sync.call(this, pattern, options);","}","","util.inherits(GlobSync, Sync);","","/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_readdir\", \"_mark\"] }] */","","GlobSync.prototype._readdir = function(abs, inGlobStar) {","","    /**","     * `options.nodir` makes `options.mark` as `true`.","     * Mark `abs` first","     * to make sure `\"node_modules\"` will be ignored immediately with ignore pattern `\"node_modules/\"`.","","     * There is a built-in cache about marked `File.Stat` in `glob`, so that we could not worry about the extra invocation of `this._mark()`","     */","    const marked = this._mark(abs);","","    if (this[IGNORE](marked)) {","        return null;","    }","","    return Sync.prototype._readdir.call(this, abs, inGlobStar);","};","","","module.exports = GlobSync;",""],"l":{"11":1,"18":1,"27":1,"35":0,"37":0,"40":1,"44":1,"53":0,"55":0,"56":0,"59":0,"63":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/source-code-fixer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/source-code-fixer.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"compareMessagesByFixRange","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":41}}},"2":{"name":"compareMessagesByLocation","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":41}}},"3":{"name":"SourceCodeFixer","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":27}}},"4":{"name":"(anonymous_4)","line":60,"loc":{"start":{"line":60,"column":29},"end":{"line":60,"column":60}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":52}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":21}},"3":{"start":{"line":26,"column":0},"end":{"line":28,"column":1}},"4":{"start":{"line":27,"column":4},"end":{"line":27,"column":78}},"5":{"start":{"line":37,"column":0},"end":{"line":39,"column":1}},"6":{"start":{"line":38,"column":4},"end":{"line":38,"column":50}},"7":{"start":{"line":49,"column":0},"end":{"line":51,"column":1}},"8":{"start":{"line":50,"column":4},"end":{"line":50,"column":24}},"9":{"start":{"line":60,"column":0},"end":{"line":129,"column":2}},"10":{"start":{"line":62,"column":4},"end":{"line":62,"column":28}},"11":{"start":{"line":64,"column":4},"end":{"line":71,"column":5}},"12":{"start":{"line":65,"column":8},"end":{"line":65,"column":39}},"13":{"start":{"line":66,"column":8},"end":{"line":70,"column":10}},"14":{"start":{"line":74,"column":4},"end":{"line":77,"column":31}},"15":{"start":{"line":78,"column":4},"end":{"line":79,"column":21}},"16":{"start":{"line":81,"column":4},"end":{"line":87,"column":7}},"17":{"start":{"line":82,"column":8},"end":{"line":86,"column":9}},"18":{"start":{"line":83,"column":12},"end":{"line":83,"column":32}},"19":{"start":{"line":85,"column":12},"end":{"line":85,"column":44}},"20":{"start":{"line":89,"column":4},"end":{"line":120,"column":5}},"21":{"start":{"line":90,"column":8},"end":{"line":90,"column":38}},"22":{"start":{"line":92,"column":8},"end":{"line":112,"column":9}},"23":{"start":{"line":93,"column":12},"end":{"line":93,"column":36}},"24":{"start":{"line":94,"column":12},"end":{"line":94,"column":39}},"25":{"start":{"line":95,"column":12},"end":{"line":95,"column":37}},"26":{"start":{"line":98,"column":12},"end":{"line":101,"column":13}},"27":{"start":{"line":99,"column":16},"end":{"line":99,"column":48}},"28":{"start":{"line":100,"column":16},"end":{"line":100,"column":25}},"29":{"start":{"line":104,"column":12},"end":{"line":106,"column":13}},"30":{"start":{"line":105,"column":16},"end":{"line":105,"column":28}},"31":{"start":{"line":109,"column":12},"end":{"line":109,"column":75}},"32":{"start":{"line":110,"column":12},"end":{"line":110,"column":31}},"33":{"start":{"line":111,"column":12},"end":{"line":111,"column":26}},"34":{"start":{"line":113,"column":8},"end":{"line":113,"column":51}},"35":{"start":{"line":115,"column":8},"end":{"line":119,"column":10}},"36":{"start":{"line":122,"column":4},"end":{"line":122,"column":31}},"37":{"start":{"line":123,"column":4},"end":{"line":127,"column":6}},"38":{"start":{"line":131,"column":0},"end":{"line":131,"column":33}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":11},"end":{"line":27,"column":42}},{"start":{"line":27,"column":46},"end":{"line":27,"column":77}}]},"2":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":11},"end":{"line":38,"column":26}},{"start":{"line":38,"column":30},"end":{"line":38,"column":49}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"4":{"line":76,"type":"cond-expr","locations":[{"start":{"line":76,"column":35},"end":{"line":76,"column":38}},{"start":{"line":76,"column":41},"end":{"line":76,"column":43}}]},"5":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"7":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":12},"end":{"line":98,"column":12}},{"start":{"line":98,"column":12},"end":{"line":98,"column":12}}]},"8":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":32}},{"start":{"line":98,"column":36},"end":{"line":98,"column":47}}]},"9":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":104,"column":12}},{"start":{"line":104,"column":12},"end":{"line":104,"column":12}}]},"10":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":17},"end":{"line":104,"column":26}},{"start":{"line":104,"column":30},"end":{"line":104,"column":38}},{"start":{"line":104,"column":44},"end":{"line":104,"column":55}},{"start":{"line":104,"column":59},"end":{"line":104,"column":83}}]}},"code":["/**"," * @fileoverview An object that caches and applies source code fixes."," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const debug = require(\"debug\")(\"eslint:text-fixer\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const BOM = \"\\uFEFF\";","","/**"," * Compares items in a messages array by range."," * @param {Message} a The first message."," * @param {Message} b The second message."," * @returns {int} -1 if a comes before b, 1 if a comes after b, 0 if equal."," * @private"," */","function compareMessagesByFixRange(a, b) {","    return a.fix.range[0] - b.fix.range[0] || a.fix.range[1] - b.fix.range[1];","}","","/**"," * Compares items in a messages array by line and column."," * @param {Message} a The first message."," * @param {Message} b The second message."," * @returns {int} -1 if a comes before b, 1 if a comes after b, 0 if equal."," * @private"," */","function compareMessagesByLocation(a, b) {","    return a.line - b.line || a.column - b.column;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Utility for apply fixes to source code."," * @constructor"," */","function SourceCodeFixer() {","    Object.freeze(this);","}","","/**"," * Applies the fixes specified by the messages to the given text. Tries to be"," * smart about the fixes and won't apply fixes over the same area in the text."," * @param {SourceCode} sourceCode The source code to apply the changes to."," * @param {Message[]} messages The array of messages reported by ESLint."," * @returns {Object} An object containing the fixed text and any unfixed messages."," */","SourceCodeFixer.applyFixes = function(sourceCode, messages) {","","    debug(\"Applying fixes\");","","    if (!sourceCode) {","        debug(\"No source code to fix\");","        return {","            fixed: false,","            messages,","            output: \"\"","        };","    }","","    // clone the array","    const remainingMessages = [],","        fixes = [],","        bom = (sourceCode.hasBOM ? BOM : \"\"),","        text = sourceCode.text;","    let lastPos = Number.NEGATIVE_INFINITY,","        output = bom;","","    messages.forEach(problem => {","        if (problem.hasOwnProperty(\"fix\")) {","            fixes.push(problem);","        } else {","            remainingMessages.push(problem);","        }","    });","","    if (fixes.length) {","        debug(\"Found fixes to apply\");","","        for (const problem of fixes.sort(compareMessagesByFixRange)) {","            const fix = problem.fix;","            const start = fix.range[0];","            const end = fix.range[1];","","            // Remain it as a problem if it's overlapped or it's a negative range","            if (lastPos >= start || start > end) {","                remainingMessages.push(problem);","                continue;","            }","","            // Remove BOM.","            if ((start < 0 && end >= 0) || (start === 0 && fix.text.startsWith(BOM))) {","                output = \"\";","            }","","            // Make output to this fix.","            output += text.slice(Math.max(0, lastPos), Math.max(0, start));","            output += fix.text;","            lastPos = end;","        }","        output += text.slice(Math.max(0, lastPos));","","        return {","            fixed: true,","            messages: remainingMessages.sort(compareMessagesByLocation),","            output","        };","    }","","    debug(\"No fixes to apply\");","    return {","        fixed: false,","        messages,","        output: bom + text","    };","","};","","module.exports = SourceCodeFixer;",""],"l":{"11":1,"17":1,"26":1,"27":0,"37":1,"38":0,"49":1,"50":0,"60":1,"62":0,"64":0,"65":0,"66":0,"74":0,"78":0,"81":0,"82":0,"83":0,"85":0,"89":0,"90":0,"92":0,"93":0,"94":0,"95":0,"98":0,"99":0,"100":0,"104":0,"105":0,"109":0,"110":0,"111":0,"113":0,"115":0,"122":0,"123":0,"131":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/hash.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/hash.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"hash","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":19}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":38}},"2":{"start":{"line":27,"column":0},"end":{"line":29,"column":1}},"3":{"start":{"line":28,"column":4},"end":{"line":28,"column":45}},"4":{"start":{"line":35,"column":0},"end":{"line":35,"column":22}}},"branchMap":{},"code":["/**"," * @fileoverview Defining the hashing function in one place."," * @author Michael Ficarra"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const murmur = require(\"imurmurhash\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * hash the given string"," * @param  {string} str the string to hash"," * @returns {string}    the hash"," */","function hash(str) {","    return murmur(str).result().toString(36);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = hash;",""],"l":{"12":1,"27":1,"28":0,"35":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/testers/rule-tester.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/testers/rule-tester.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":1,"36":0,"37":1,"38":1,"39":1,"40":1,"41":0,"42":1,"43":14,"44":0,"45":14,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":1,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":1,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[14,14],"14":[0,14],"15":[14,14],"16":[0,14],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":14,"9":0,"10":14,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"cloneDeeplyExcludesParent","line":87,"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":38}}},"2":{"name":"freezeDeeply","line":113,"loc":{"start":{"line":113,"column":0},"end":{"line":113,"column":25}}},"3":{"name":"RuleTester","line":137,"loc":{"start":{"line":137,"column":0},"end":{"line":137,"column":34}}},"4":{"name":"(anonymous_4)","line":163,"loc":{"start":{"line":163,"column":30},"end":{"line":163,"column":47}}},"5":{"name":"(anonymous_5)","line":177,"loc":{"start":{"line":177,"column":30},"end":{"line":177,"column":41}}},"6":{"name":"(anonymous_6)","line":186,"loc":{"start":{"line":186,"column":32},"end":{"line":186,"column":43}}},"7":{"name":"defaultHandler","line":203,"loc":{"start":{"line":203,"column":0},"end":{"line":203,"column":38}}},"8":{"name":"(anonymous_8)","line":212,"loc":{"start":{"line":212,"column":11},"end":{"line":212,"column":14}}},"9":{"name":"(anonymous_9)","line":218,"loc":{"start":{"line":218,"column":11},"end":{"line":218,"column":19}}},"10":{"name":"(anonymous_10)","line":225,"loc":{"start":{"line":225,"column":11},"end":{"line":225,"column":14}}},"11":{"name":"(anonymous_11)","line":231,"loc":{"start":{"line":231,"column":11},"end":{"line":231,"column":19}}},"12":{"name":"(anonymous_12)","line":247,"loc":{"start":{"line":247,"column":14},"end":{"line":247,"column":27}}},"13":{"name":"(anonymous_13)","line":258,"loc":{"start":{"line":258,"column":7},"end":{"line":258,"column":30}}},"14":{"name":"runRuleForItem","line":290,"loc":{"start":{"line":290,"column":8},"end":{"line":290,"column":48}}},"15":{"name":"(anonymous_15)","line":359,"loc":{"start":{"line":359,"column":28},"end":{"line":359,"column":45}}},"16":{"name":"(anonymous_16)","line":363,"loc":{"start":{"line":363,"column":31},"end":{"line":363,"column":49}}},"17":{"name":"(anonymous_17)","line":374,"loc":{"start":{"line":374,"column":30},"end":{"line":374,"column":40}}},"18":{"name":"assertASTDidntChange","line":403,"loc":{"start":{"line":403,"column":8},"end":{"line":403,"column":59}}},"19":{"name":"testValidTemplate","line":419,"loc":{"start":{"line":419,"column":8},"end":{"line":419,"column":51}}},"20":{"name":"assertMessageMatches","line":438,"loc":{"start":{"line":438,"column":8},"end":{"line":438,"column":56}}},"21":{"name":"testInvalidTemplate","line":459,"loc":{"start":{"line":459,"column":8},"end":{"line":459,"column":53}}}},"statementMap":{"1":{"start":{"line":43,"column":0},"end":{"line":51,"column":59}},"2":{"start":{"line":61,"column":0},"end":{"line":61,"column":42}},"3":{"start":{"line":62,"column":0},"end":{"line":62,"column":34}},"4":{"start":{"line":68,"column":0},"end":{"line":74,"column":2}},"5":{"start":{"line":76,"column":0},"end":{"line":76,"column":63}},"6":{"start":{"line":78,"column":0},"end":{"line":78,"column":65}},"7":{"start":{"line":87,"column":0},"end":{"line":105,"column":1}},"8":{"start":{"line":88,"column":4},"end":{"line":102,"column":5}},"9":{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},"10":{"start":{"line":90,"column":12},"end":{"line":90,"column":52}},"11":{"start":{"line":93,"column":8},"end":{"line":93,"column":24}},"12":{"start":{"line":95,"column":8},"end":{"line":99,"column":9}},"13":{"start":{"line":96,"column":12},"end":{"line":98,"column":13}},"14":{"start":{"line":97,"column":16},"end":{"line":97,"column":62}},"15":{"start":{"line":101,"column":8},"end":{"line":101,"column":20}},"16":{"start":{"line":104,"column":4},"end":{"line":104,"column":13}},"17":{"start":{"line":113,"column":0},"end":{"line":126,"column":1}},"18":{"start":{"line":114,"column":4},"end":{"line":125,"column":5}},"19":{"start":{"line":115,"column":8},"end":{"line":123,"column":9}},"20":{"start":{"line":116,"column":12},"end":{"line":116,"column":36}},"21":{"start":{"line":118,"column":12},"end":{"line":122,"column":13}},"22":{"start":{"line":119,"column":16},"end":{"line":121,"column":17}},"23":{"start":{"line":120,"column":20},"end":{"line":120,"column":41}},"24":{"start":{"line":124,"column":8},"end":{"line":124,"column":25}},"25":{"start":{"line":137,"column":0},"end":{"line":156,"column":1}},"26":{"start":{"line":144,"column":4},"end":{"line":149,"column":6}},"27":{"start":{"line":155,"column":4},"end":{"line":155,"column":20}},"28":{"start":{"line":163,"column":0},"end":{"line":171,"column":2}},"29":{"start":{"line":164,"column":4},"end":{"line":166,"column":5}},"30":{"start":{"line":165,"column":8},"end":{"line":165,"column":81}},"31":{"start":{"line":167,"column":4},"end":{"line":167,"column":27}},"32":{"start":{"line":170,"column":4},"end":{"line":170,"column":52}},"33":{"start":{"line":177,"column":0},"end":{"line":179,"column":2}},"34":{"start":{"line":178,"column":4},"end":{"line":178,"column":25}},"35":{"start":{"line":186,"column":0},"end":{"line":188,"column":2}},"36":{"start":{"line":187,"column":4},"end":{"line":187,"column":58}},"37":{"start":{"line":191,"column":0},"end":{"line":191,"column":36}},"38":{"start":{"line":192,"column":0},"end":{"line":192,"column":24}},"39":{"start":{"line":194,"column":0},"end":{"line":194,"column":45}},"40":{"start":{"line":203,"column":0},"end":{"line":205,"column":1}},"41":{"start":{"line":204,"column":4},"end":{"line":204,"column":30}},"42":{"start":{"line":210,"column":0},"end":{"line":237,"column":3}},"43":{"start":{"line":213,"column":12},"end":{"line":216,"column":14}},"44":{"start":{"line":219,"column":12},"end":{"line":219,"column":41}},"45":{"start":{"line":226,"column":12},"end":{"line":229,"column":14}},"46":{"start":{"line":232,"column":12},"end":{"line":232,"column":35}},"47":{"start":{"line":239,"column":0},"end":{"line":565,"column":2}},"48":{"start":{"line":248,"column":8},"end":{"line":248,"column":32}},"49":{"start":{"line":260,"column":8},"end":{"line":263,"column":24}},"50":{"start":{"line":265,"column":8},"end":{"line":267,"column":9}},"51":{"start":{"line":266,"column":12},"end":{"line":266,"column":105}},"52":{"start":{"line":269,"column":8},"end":{"line":273,"column":11}},"53":{"start":{"line":270,"column":12},"end":{"line":272,"column":13}},"54":{"start":{"line":271,"column":16},"end":{"line":271,"column":89}},"55":{"start":{"line":275,"column":8},"end":{"line":279,"column":9}},"56":{"start":{"line":276,"column":12},"end":{"line":278,"column":49}},"57":{"start":{"line":290,"column":8},"end":{"line":394,"column":9}},"58":{"start":{"line":291,"column":12},"end":{"line":292,"column":52}},"59":{"start":{"line":294,"column":12},"end":{"line":309,"column":13}},"60":{"start":{"line":295,"column":16},"end":{"line":295,"column":28}},"61":{"start":{"line":297,"column":16},"end":{"line":297,"column":33}},"62":{"start":{"line":301,"column":16},"end":{"line":301,"column":75}},"63":{"start":{"line":305,"column":16},"end":{"line":308,"column":18}},"64":{"start":{"line":311,"column":12},"end":{"line":313,"column":13}},"65":{"start":{"line":312,"column":16},"end":{"line":312,"column":41}},"66":{"start":{"line":315,"column":12},"end":{"line":322,"column":13}},"67":{"start":{"line":316,"column":16},"end":{"line":316,"column":54}},"68":{"start":{"line":318,"column":16},"end":{"line":318,"column":35}},"69":{"start":{"line":319,"column":16},"end":{"line":319,"column":49}},"70":{"start":{"line":321,"column":16},"end":{"line":321,"column":43}},"71":{"start":{"line":324,"column":12},"end":{"line":324,"column":46}},"72":{"start":{"line":326,"column":12},"end":{"line":326,"column":68}},"73":{"start":{"line":328,"column":12},"end":{"line":336,"column":13}},"74":{"start":{"line":329,"column":16},"end":{"line":329,"column":39}},"75":{"start":{"line":331,"column":16},"end":{"line":335,"column":17}},"76":{"start":{"line":332,"column":20},"end":{"line":334,"column":115}},"77":{"start":{"line":334,"column":64},"end":{"line":334,"column":100}},"78":{"start":{"line":338,"column":12},"end":{"line":338,"column":54}},"79":{"start":{"line":345,"column":12},"end":{"line":345,"column":27}},"80":{"start":{"line":347,"column":12},"end":{"line":349,"column":15}},"81":{"start":{"line":348,"column":16},"end":{"line":348,"column":60}},"82":{"start":{"line":351,"column":12},"end":{"line":353,"column":15}},"83":{"start":{"line":352,"column":16},"end":{"line":352,"column":32}},"84":{"start":{"line":356,"column":12},"end":{"line":356,"column":42}},"85":{"start":{"line":358,"column":12},"end":{"line":393,"column":13}},"86":{"start":{"line":359,"column":16},"end":{"line":384,"column":18}},"87":{"start":{"line":360,"column":20},"end":{"line":360,"column":53}},"88":{"start":{"line":362,"column":20},"end":{"line":371,"column":21}},"89":{"start":{"line":363,"column":24},"end":{"line":370,"column":26}},"90":{"start":{"line":364,"column":28},"end":{"line":364,"column":51}},"91":{"start":{"line":365,"column":28},"end":{"line":365,"column":58}},"92":{"start":{"line":366,"column":28},"end":{"line":366,"column":59}},"93":{"start":{"line":367,"column":28},"end":{"line":367,"column":64}},"94":{"start":{"line":369,"column":28},"end":{"line":369,"column":49}},"95":{"start":{"line":372,"column":20},"end":{"line":382,"column":22}},"96":{"start":{"line":375,"column":28},"end":{"line":375,"column":51}},"97":{"start":{"line":376,"column":28},"end":{"line":376,"column":58}},"98":{"start":{"line":377,"column":28},"end":{"line":377,"column":59}},"99":{"start":{"line":378,"column":28},"end":{"line":378,"column":64}},"100":{"start":{"line":380,"column":28},"end":{"line":380,"column":56}},"101":{"start":{"line":386,"column":16},"end":{"line":390,"column":18}},"102":{"start":{"line":392,"column":16},"end":{"line":392,"column":40}},"103":{"start":{"line":403,"column":8},"end":{"line":409,"column":9}},"104":{"start":{"line":404,"column":12},"end":{"line":408,"column":13}},"105":{"start":{"line":407,"column":16},"end":{"line":407,"column":85}},"106":{"start":{"line":419,"column":8},"end":{"line":427,"column":9}},"107":{"start":{"line":420,"column":12},"end":{"line":420,"column":58}},"108":{"start":{"line":421,"column":12},"end":{"line":421,"column":45}},"109":{"start":{"line":423,"column":12},"end":{"line":424,"column":66}},"110":{"start":{"line":426,"column":12},"end":{"line":426,"column":68}},"111":{"start":{"line":438,"column":8},"end":{"line":449,"column":9}},"112":{"start":{"line":439,"column":12},"end":{"line":448,"column":13}},"113":{"start":{"line":442,"column":16},"end":{"line":445,"column":18}},"114":{"start":{"line":447,"column":16},"end":{"line":447,"column":47}},"115":{"start":{"line":459,"column":8},"end":{"line":537,"column":9}},"116":{"start":{"line":460,"column":12},"end":{"line":461,"column":77}},"117":{"start":{"line":463,"column":12},"end":{"line":463,"column":58}},"118":{"start":{"line":464,"column":12},"end":{"line":464,"column":45}},"119":{"start":{"line":468,"column":12},"end":{"line":520,"column":13}},"120":{"start":{"line":469,"column":16},"end":{"line":470,"column":105}},"121":{"start":{"line":472,"column":16},"end":{"line":474,"column":119}},"122":{"start":{"line":476,"column":16},"end":{"line":519,"column":17}},"123":{"start":{"line":477,"column":20},"end":{"line":477,"column":115}},"124":{"start":{"line":478,"column":20},"end":{"line":478,"column":138}},"125":{"start":{"line":480,"column":20},"end":{"line":518,"column":21}},"126":{"start":{"line":483,"column":24},"end":{"line":483,"column":82}},"127":{"start":{"line":484,"column":27},"end":{"line":518,"column":21}},"128":{"start":{"line":491,"column":24},"end":{"line":493,"column":25}},"129":{"start":{"line":492,"column":28},"end":{"line":492,"column":94}},"130":{"start":{"line":495,"column":24},"end":{"line":497,"column":25}},"131":{"start":{"line":496,"column":28},"end":{"line":496,"column":162}},"132":{"start":{"line":499,"column":24},"end":{"line":501,"column":25}},"133":{"start":{"line":500,"column":28},"end":{"line":500,"column":127}},"134":{"start":{"line":503,"column":24},"end":{"line":505,"column":25}},"135":{"start":{"line":504,"column":28},"end":{"line":504,"column":135}},"136":{"start":{"line":507,"column":24},"end":{"line":509,"column":25}},"137":{"start":{"line":508,"column":28},"end":{"line":508,"column":139}},"138":{"start":{"line":511,"column":24},"end":{"line":513,"column":25}},"139":{"start":{"line":512,"column":28},"end":{"line":512,"column":147}},"140":{"start":{"line":517,"column":24},"end":{"line":517,"column":103}},"141":{"start":{"line":522,"column":12},"end":{"line":534,"column":13}},"142":{"start":{"line":523,"column":16},"end":{"line":533,"column":17}},"143":{"start":{"line":524,"column":20},"end":{"line":528,"column":22}},"144":{"start":{"line":525,"column":51},"end":{"line":525,"column":62}},"145":{"start":{"line":530,"column":20},"end":{"line":530,"column":99}},"146":{"start":{"line":532,"column":20},"end":{"line":532,"column":88}},"147":{"start":{"line":536,"column":12},"end":{"line":536,"column":68}},"148":{"start":{"line":543,"column":8},"end":{"line":561,"column":11}},"149":{"start":{"line":544,"column":12},"end":{"line":551,"column":15}},"150":{"start":{"line":545,"column":16},"end":{"line":550,"column":19}},"151":{"start":{"line":546,"column":20},"end":{"line":549,"column":23}},"152":{"start":{"line":547,"column":24},"end":{"line":547,"column":55}},"153":{"start":{"line":548,"column":24},"end":{"line":548,"column":59}},"154":{"start":{"line":553,"column":12},"end":{"line":560,"column":15}},"155":{"start":{"line":554,"column":16},"end":{"line":559,"column":19}},"156":{"start":{"line":555,"column":20},"end":{"line":558,"column":23}},"157":{"start":{"line":556,"column":24},"end":{"line":556,"column":55}},"158":{"start":{"line":557,"column":24},"end":{"line":557,"column":63}},"159":{"start":{"line":563,"column":8},"end":{"line":563,"column":28}},"160":{"start":{"line":568,"column":0},"end":{"line":568,"column":28}}},"branchMap":{"1":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"2":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":29}},{"start":{"line":88,"column":33},"end":{"line":88,"column":43}}]},"3":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":8}},{"start":{"line":89,"column":8},"end":{"line":89,"column":8}}]},"4":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":12},"end":{"line":96,"column":12}},{"start":{"line":96,"column":12},"end":{"line":96,"column":12}}]},"5":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":32}},{"start":{"line":96,"column":36},"end":{"line":96,"column":58}}]},"6":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":114,"column":4}},{"start":{"line":114,"column":4},"end":{"line":114,"column":4}}]},"7":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":8},"end":{"line":114,"column":29}},{"start":{"line":114,"column":33},"end":{"line":114,"column":43}}]},"8":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"9":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":16},"end":{"line":119,"column":16}},{"start":{"line":119,"column":16},"end":{"line":119,"column":16}}]},"10":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":20},"end":{"line":119,"column":36}},{"start":{"line":119,"column":40},"end":{"line":119,"column":62}}]},"11":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"12":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":26},"end":{"line":170,"column":45}},{"start":{"line":170,"column":49},"end":{"line":170,"column":51}}]},"13":{"line":214,"type":"binary-expr","locations":[{"start":{"line":214,"column":16},"end":{"line":214,"column":36}},{"start":{"line":215,"column":17},"end":{"line":215,"column":75}}]},"14":{"line":215,"type":"cond-expr","locations":[{"start":{"line":215,"column":50},"end":{"line":215,"column":58}},{"start":{"line":215,"column":61},"end":{"line":215,"column":75}}]},"15":{"line":227,"type":"binary-expr","locations":[{"start":{"line":227,"column":16},"end":{"line":227,"column":30}},{"start":{"line":228,"column":17},"end":{"line":228,"column":63}}]},"16":{"line":228,"type":"cond-expr","locations":[{"start":{"line":228,"column":44},"end":{"line":228,"column":46}},{"start":{"line":228,"column":49},"end":{"line":228,"column":63}}]},"17":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":8},"end":{"line":265,"column":8}},{"start":{"line":265,"column":8},"end":{"line":265,"column":8}}]},"18":{"line":265,"type":"binary-expr","locations":[{"start":{"line":265,"column":12},"end":{"line":265,"column":30}},{"start":{"line":265,"column":34},"end":{"line":265,"column":58}}]},"19":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":12},"end":{"line":270,"column":12}},{"start":{"line":270,"column":12},"end":{"line":270,"column":12}}]},"20":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":8},"end":{"line":275,"column":8}},{"start":{"line":275,"column":8},"end":{"line":275,"column":8}}]},"21":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":12},"end":{"line":294,"column":12}},{"start":{"line":294,"column":12},"end":{"line":294,"column":12}}]},"22":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":12},"end":{"line":311,"column":12}},{"start":{"line":311,"column":12},"end":{"line":311,"column":12}}]},"23":{"line":315,"type":"if","locations":[{"start":{"line":315,"column":12},"end":{"line":315,"column":12}},{"start":{"line":315,"column":12},"end":{"line":315,"column":12}}]},"24":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":12},"end":{"line":328,"column":12}},{"start":{"line":328,"column":12},"end":{"line":328,"column":12}}]},"25":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":16},"end":{"line":331,"column":16}},{"start":{"line":331,"column":16},"end":{"line":331,"column":16}}]},"26":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":20},"end":{"line":362,"column":20}},{"start":{"line":362,"column":20},"end":{"line":362,"column":20}}]},"27":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":12},"end":{"line":404,"column":12}},{"start":{"line":404,"column":12},"end":{"line":404,"column":12}}]},"28":{"line":439,"type":"if","locations":[{"start":{"line":439,"column":12},"end":{"line":439,"column":12}},{"start":{"line":439,"column":12},"end":{"line":439,"column":12}}]},"29":{"line":460,"type":"binary-expr","locations":[{"start":{"line":460,"column":22},"end":{"line":460,"column":33}},{"start":{"line":460,"column":37},"end":{"line":460,"column":54}}]},"30":{"line":468,"type":"if","locations":[{"start":{"line":468,"column":12},"end":{"line":468,"column":12}},{"start":{"line":468,"column":12},"end":{"line":468,"column":12}}]},"31":{"line":470,"type":"cond-expr","locations":[{"start":{"line":470,"column":53},"end":{"line":470,"column":55}},{"start":{"line":470,"column":58},"end":{"line":470,"column":61}}]},"32":{"line":474,"type":"cond-expr","locations":[{"start":{"line":474,"column":67},"end":{"line":474,"column":69}},{"start":{"line":474,"column":72},"end":{"line":474,"column":75}}]},"33":{"line":480,"type":"if","locations":[{"start":{"line":480,"column":20},"end":{"line":480,"column":20}},{"start":{"line":480,"column":20},"end":{"line":480,"column":20}}]},"34":{"line":480,"type":"binary-expr","locations":[{"start":{"line":480,"column":24},"end":{"line":480,"column":58}},{"start":{"line":480,"column":62},"end":{"line":480,"column":94}}]},"35":{"line":484,"type":"if","locations":[{"start":{"line":484,"column":27},"end":{"line":484,"column":27}},{"start":{"line":484,"column":27},"end":{"line":484,"column":27}}]},"36":{"line":491,"type":"if","locations":[{"start":{"line":491,"column":24},"end":{"line":491,"column":24}},{"start":{"line":491,"column":24},"end":{"line":491,"column":24}}]},"37":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":24},"end":{"line":495,"column":24}},{"start":{"line":495,"column":24},"end":{"line":495,"column":24}}]},"38":{"line":499,"type":"if","locations":[{"start":{"line":499,"column":24},"end":{"line":499,"column":24}},{"start":{"line":499,"column":24},"end":{"line":499,"column":24}}]},"39":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":24},"end":{"line":503,"column":24}},{"start":{"line":503,"column":24},"end":{"line":503,"column":24}}]},"40":{"line":507,"type":"if","locations":[{"start":{"line":507,"column":24},"end":{"line":507,"column":24}},{"start":{"line":507,"column":24},"end":{"line":507,"column":24}}]},"41":{"line":511,"type":"if","locations":[{"start":{"line":511,"column":24},"end":{"line":511,"column":24}},{"start":{"line":511,"column":24},"end":{"line":511,"column":24}}]},"42":{"line":522,"type":"if","locations":[{"start":{"line":522,"column":12},"end":{"line":522,"column":12}},{"start":{"line":522,"column":12},"end":{"line":522,"column":12}}]},"43":{"line":523,"type":"if","locations":[{"start":{"line":523,"column":16},"end":{"line":523,"column":16}},{"start":{"line":523,"column":16},"end":{"line":523,"column":16}}]},"44":{"line":546,"type":"cond-expr","locations":[{"start":{"line":546,"column":62},"end":{"line":546,"column":72}},{"start":{"line":546,"column":75},"end":{"line":546,"column":80}}]}},"code":["/**"," * @fileoverview Mocha test wrapper"," * @author Ilya Volodin"," */","\"use strict\";","","/* global describe, it */","","/*"," * This is a wrapper around mocha to allow for DRY unittests for eslint"," * Format:"," * RuleTester.add(\"{ruleName}\", {"," *      valid: ["," *          \"{code}\","," *          { code: \"{code}\", options: {options}, global: {globals}, globals: {globals}, parser: \"{parser}\", settings: {settings} }"," *      ],"," *      invalid: ["," *          { code: \"{code}\", errors: {numErrors} },"," *          { code: \"{code}\", errors: [\"{errorMessage}\"] },"," *          { code: \"{code}\", options: {options}, global: {globals}, parser: \"{parser}\", settings: {settings}, errors: [{ message: \"{errorMessage}\", type: \"{errorNodeType}\"}] }"," *      ]"," *  });"," *"," * Variables:"," * {code} - String that represents the code to be tested"," * {options} - Arguments that are passed to the configurable rules."," * {globals} - An object representing a list of variables that are"," *             registered as globals"," * {parser} - String representing the parser to use"," * {settings} - An object representing global settings for all rules"," * {numErrors} - If failing case doesn't need to check error message,"," *               this integer will specify how many errors should be"," *               received"," * {errorMessage} - Message that is returned by the rule on failure"," * {errorNodeType} - AST node type that is returned by they rule as"," *                   a cause of the failure."," */","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\"),","    assert = require(\"assert\"),","    util = require(\"util\"),","    validator = require(\"../config/config-validator\"),","    validate = require(\"is-my-json-valid\"),","    eslint = require(\"../eslint\"),","    rules = require(\"../rules\"),","    metaSchema = require(\"../../conf/json-schema-schema.json\"),","    SourceCodeFixer = require(\"../util/source-code-fixer\");","","//------------------------------------------------------------------------------","// Private Members","//------------------------------------------------------------------------------","","/*"," * testerDefaultConfig must not be modified as it allows to reset the tester to"," * the initial default configuration"," */","const testerDefaultConfig = { rules: {} };","let defaultConfig = { rules: {} };","","/*"," * List every parameters possible on a test case that are not related to eslint"," * configuration"," */","const RuleTesterParameters = [","    \"code\",","    \"filename\",","    \"options\",","    \"args\",","    \"errors\"","];","","const validateSchema = validate(metaSchema, { verbose: true });","","const hasOwnProperty = Function.call.bind(Object.hasOwnProperty);","","/**"," * Clones a given value deeply."," * Note: This ignores `parent` property."," *"," * @param {any} x - A value to clone."," * @returns {any} A cloned value."," */","function cloneDeeplyExcludesParent(x) {","    if (typeof x === \"object\" && x !== null) {","        if (Array.isArray(x)) {","            return x.map(cloneDeeplyExcludesParent);","        }","","        const retv = {};","","        for (const key in x) {","            if (key !== \"parent\" && hasOwnProperty(x, key)) {","                retv[key] = cloneDeeplyExcludesParent(x[key]);","            }","        }","","        return retv;","    }","","    return x;","}","","/**"," * Freezes a given value deeply."," *"," * @param {any} x - A value to freeze."," * @returns {void}"," */","function freezeDeeply(x) {","    if (typeof x === \"object\" && x !== null) {","        if (Array.isArray(x)) {","            x.forEach(freezeDeeply);","        } else {","            for (const key in x) {","                if (key !== \"parent\" && hasOwnProperty(x, key)) {","                    freezeDeeply(x[key]);","                }","            }","        }","        Object.freeze(x);","    }","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Creates a new instance of RuleTester."," * @param {Object} [testerConfig] Optional, extra configuration for the tester"," * @constructor"," */","function RuleTester(testerConfig) {","","    /**","     * The configuration to use for this tester. Combination of the tester","     * configuration and the default configuration.","     * @type {Object}","     */","    this.testerConfig = lodash.merge(","","        // we have to clone because merge uses the first argument for recipient","        lodash.cloneDeep(defaultConfig),","        testerConfig","    );","","    /**","     * Rule definitions to define before tests.","     * @type {Object}","     */","    this.rules = {};","}","","/**"," * Set the configuration to use for all future tests"," * @param {Object} config the configuration to use."," * @returns {void}"," */","RuleTester.setDefaultConfig = function(config) {","    if (typeof config !== \"object\") {","        throw new Error(\"RuleTester.setDefaultConfig: config must be an object\");","    }","    defaultConfig = config;","","    // Make sure the rules object exists since it is assumed to exist later","    defaultConfig.rules = defaultConfig.rules || {};","};","","/**"," * Get the current configuration used for all tests"," * @returns {Object} the current configuration"," */","RuleTester.getDefaultConfig = function() {","    return defaultConfig;","};","","/**"," * Reset the configuration to the initial configuration of the tester removing"," * any changes made until now."," * @returns {void}"," */","RuleTester.resetDefaultConfig = function() {","    defaultConfig = lodash.cloneDeep(testerDefaultConfig);","};","","// default separators for testing","const DESCRIBE = Symbol(\"describe\");","const IT = Symbol(\"it\");","","RuleTester[DESCRIBE] = RuleTester[IT] = null;","","/**"," * This is `it` or `describe` if those don't exist."," * @this {Mocha}"," * @param {string} text - The description of the test case."," * @param {Function} method - The logic of the test case."," * @returns {any} Returned value of `method`."," */","function defaultHandler(text, method) {","    return method.apply(this);","}","","// If people use `mocha test.js --watch` command, `describe` and `it` function","// instances are different for each execution. So this should get fresh instance","// always.","Object.defineProperties(RuleTester, {","    describe: {","        get() {","            return (","                RuleTester[DESCRIBE] ||","                (typeof describe === \"function\" ? describe : defaultHandler)","            );","        },","        set(value) {","            RuleTester[DESCRIBE] = value;","        },","        configurable: true,","        enumerable: true","    },","    it: {","        get() {","            return (","                RuleTester[IT] ||","                (typeof it === \"function\" ? it : defaultHandler)","            );","        },","        set(value) {","            RuleTester[IT] = value;","        },","        configurable: true,","        enumerable: true","    }","});","","RuleTester.prototype = {","","    /**","     * Define a rule for one particular run of tests.","     * @param {string} name The name of the rule to define.","     * @param {Function} rule The rule definition.","     * @returns {void}","     */","    defineRule(name, rule) {","        this.rules[name] = rule;","    },","","    /**","     * Adds a new rule test to execute.","     * @param {string} ruleName The name of the rule to run.","     * @param {Function} rule The rule to test.","     * @param {Object} test The collection of tests to run.","     * @returns {void}","     */","    run(ruleName, rule, test) {","","        const testerConfig = this.testerConfig,","            requiredScenarios = [\"valid\", \"invalid\"],","            scenarioErrors = [],","            result = {};","","        if (lodash.isNil(test) || typeof test !== \"object\") {","            throw new Error(`Test Scenarios for rule ${ruleName} : Could not find test scenario object`);","        }","","        requiredScenarios.forEach(scenarioType => {","            if (lodash.isNil(test[scenarioType])) {","                scenarioErrors.push(`Could not find any ${scenarioType} test scenarios`);","            }","        });","","        if (scenarioErrors.length > 0) {","            throw new Error([","                `Test Scenarios for rule ${ruleName} is invalid:`","            ].concat(scenarioErrors).join(\"\\n\"));","        }","","        /* eslint-disable no-shadow */","","        /**","         * Run the rule for the given item","         * @param {string} ruleName name of the rule","         * @param {string|Object} item Item to run the rule against","         * @returns {Object} Eslint run result","         * @private","         */","        function runRuleForItem(ruleName, item) {","            let config = lodash.cloneDeep(testerConfig),","                code, filename, beforeAST, afterAST;","","            if (typeof item === \"string\") {","                code = item;","            } else {","                code = item.code;","","                // Assumes everything on the item is a config except for the","                // parameters used by this tester","                const itemConfig = lodash.omit(item, RuleTesterParameters);","","                // Create the config object from the tester config and this item","                // specific configurations.","                config = lodash.merge(","                    config,","                    itemConfig","                );","            }","","            if (item.filename) {","                filename = item.filename;","            }","","            if (item.options) {","                const options = item.options.concat();","","                options.unshift(1);","                config.rules[ruleName] = options;","            } else {","                config.rules[ruleName] = 1;","            }","","            eslint.defineRule(ruleName, rule);","","            const schema = validator.getRuleOptionsSchema(ruleName);","","            if (schema) {","                validateSchema(schema);","","                if (validateSchema.errors) {","                    throw new Error([","                        `Schema for rule ${ruleName} is invalid:`","                    ].concat(validateSchema.errors.map(error => `\\t${error.field}: ${error.message}`)).join(\"\\n\"));","                }","            }","","            validator.validate(config, \"rule-tester\");","","            /*","             * Setup AST getters.","             * The goal is to check whether or not AST was modified when","             * running the rule under test.","             */","            eslint.reset();","","            eslint.on(\"Program\", node => {","                beforeAST = cloneDeeplyExcludesParent(node);","            });","","            eslint.on(\"Program:exit\", node => {","                afterAST = node;","            });","","            // Freezes rule-context properties.","            const originalGet = rules.get;","","            try {","                rules.get = function(ruleId) {","                    const rule = originalGet(ruleId);","","                    if (typeof rule === \"function\") {","                        return function(context) {","                            Object.freeze(context);","                            freezeDeeply(context.options);","                            freezeDeeply(context.settings);","                            freezeDeeply(context.parserOptions);","","                            return rule(context);","                        };","                    }","                    return {","                        meta: rule.meta,","                        create(context) {","                            Object.freeze(context);","                            freezeDeeply(context.options);","                            freezeDeeply(context.settings);","                            freezeDeeply(context.parserOptions);","","                            return rule.create(context);","                        }","                    };","","                };","","                return {","                    messages: eslint.verify(code, config, filename, true),","                    beforeAST,","                    afterAST: cloneDeeplyExcludesParent(afterAST)","                };","            } finally {","                rules.get = originalGet;","            }","        }","","        /**","         * Check if the AST was changed","         * @param {ASTNode} beforeAST AST node before running","         * @param {ASTNode} afterAST AST node after running","         * @returns {void}","         * @private","         */","        function assertASTDidntChange(beforeAST, afterAST) {","            if (!lodash.isEqual(beforeAST, afterAST)) {","","                // Not using directly to avoid performance problem in node 6.1.0. See #6111","                assert.deepEqual(beforeAST, afterAST, \"Rule should not modify AST.\");","            }","        }","","        /**","         * Check if the template is valid or not","         * all valid cases go through this","         * @param {string} ruleName name of the rule","         * @param {string|Object} item Item to run the rule against","         * @returns {void}","         * @private","         */","        function testValidTemplate(ruleName, item) {","            const result = runRuleForItem(ruleName, item);","            const messages = result.messages;","","            assert.equal(messages.length, 0, util.format(\"Should have no errors but had %d: %s\",","                        messages.length, util.inspect(messages)));","","            assertASTDidntChange(result.beforeAST, result.afterAST);","        }","","        /**","         * Asserts that the message matches its expected value. If the expected","         * value is a regular expression, it is checked against the actual","         * value.","         * @param {string} actual Actual value","         * @param {string|RegExp} expected Expected value","         * @returns {void}","         * @private","         */","        function assertMessageMatches(actual, expected) {","            if (expected instanceof RegExp) {","","                // assert.js doesn't have a built-in RegExp match function","                assert.ok(","                    expected.test(actual),","                    `Expected '${actual}' to match ${expected}`","                );","            } else {","                assert.equal(actual, expected);","            }","        }","","        /**","         * Check if the template is invalid or not","         * all invalid cases go through this.","         * @param {string} ruleName name of the rule","         * @param {string|Object} item Item to run the rule against","         * @returns {void}","         * @private","         */","        function testInvalidTemplate(ruleName, item) {","            assert.ok(item.errors || item.errors === 0,","                `Did not specify errors for an invalid test of ${ruleName}`);","","            const result = runRuleForItem(ruleName, item);","            const messages = result.messages;","","","","            if (typeof item.errors === \"number\") {","                assert.equal(messages.length, item.errors, util.format(\"Should have %d error%s but had %d: %s\",","                    item.errors, item.errors === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));","            } else {","                assert.equal(messages.length, item.errors.length,","                    util.format(\"Should have %d error%s but had %d: %s\",","                    item.errors.length, item.errors.length === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));","","                for (let i = 0, l = item.errors.length; i < l; i++) {","                    assert.ok(!(\"fatal\" in messages[i]), `A fatal parsing error occurred: ${messages[i].message}`);","                    assert.equal(messages[i].ruleId, ruleName, \"Error rule name should be the same as the name of the rule being tested\");","","                    if (typeof item.errors[i] === \"string\" || item.errors[i] instanceof RegExp) {","","                        // Just an error message.","                        assertMessageMatches(messages[i].message, item.errors[i]);","                    } else if (typeof item.errors[i] === \"object\") {","","                        /*","                         * Error object.","                         * This may have a message, node type, line, and/or","                         * column.","                         */","                        if (item.errors[i].message) {","                            assertMessageMatches(messages[i].message, item.errors[i].message);","                        }","","                        if (item.errors[i].type) {","                            assert.equal(messages[i].nodeType, item.errors[i].type, `Error type should be ${item.errors[i].type}, found ${messages[i].nodeType}`);","                        }","","                        if (item.errors[i].hasOwnProperty(\"line\")) {","                            assert.equal(messages[i].line, item.errors[i].line, `Error line should be ${item.errors[i].line}`);","                        }","","                        if (item.errors[i].hasOwnProperty(\"column\")) {","                            assert.equal(messages[i].column, item.errors[i].column, `Error column should be ${item.errors[i].column}`);","                        }","","                        if (item.errors[i].hasOwnProperty(\"endLine\")) {","                            assert.equal(messages[i].endLine, item.errors[i].endLine, `Error endLine should be ${item.errors[i].endLine}`);","                        }","","                        if (item.errors[i].hasOwnProperty(\"endColumn\")) {","                            assert.equal(messages[i].endColumn, item.errors[i].endColumn, `Error endColumn should be ${item.errors[i].endColumn}`);","                        }","                    } else {","","                        // Message was an unexpected type","                        assert.fail(messages[i], null, \"Error should be a string, object, or RegExp.\");","                    }","                }","            }","","            if (item.hasOwnProperty(\"output\")) {","                if (item.output === null) {","                    assert.strictEqual(","                        messages.filter(message => message.fix).length,","                        0,","                        \"Expected no autofixes to be suggested\"","                    );","                } else {","                    const fixResult = SourceCodeFixer.applyFixes(eslint.getSourceCode(), messages);","","                    assert.equal(fixResult.output, item.output, \"Output is incorrect.\");","                }","            }","","            assertASTDidntChange(result.beforeAST, result.afterAST);","        }","","        /*","         * This creates a mocha test suite and pipes all supplied info through","         * one of the templates above.","         */","        RuleTester.describe(ruleName, () => {","            RuleTester.describe(\"valid\", () => {","                test.valid.forEach(valid => {","                    RuleTester.it(typeof valid === \"object\" ? valid.code : valid, () => {","                        eslint.defineRules(this.rules);","                        testValidTemplate(ruleName, valid);","                    });","                });","            });","","            RuleTester.describe(\"invalid\", () => {","                test.invalid.forEach(invalid => {","                    RuleTester.it(invalid.code, () => {","                        eslint.defineRules(this.rules);","                        testInvalidTemplate(ruleName, invalid);","                    });","                });","            });","        });","","        return result.suite;","    }","};","","","module.exports = RuleTester;",""],"l":{"43":1,"61":1,"62":1,"68":1,"76":1,"78":1,"87":1,"88":0,"89":0,"90":0,"93":0,"95":0,"96":0,"97":0,"101":0,"104":0,"113":1,"114":0,"115":0,"116":0,"118":0,"119":0,"120":0,"124":0,"137":1,"144":0,"155":0,"163":1,"164":0,"165":0,"167":0,"170":0,"177":1,"178":0,"186":1,"187":0,"191":1,"192":1,"194":1,"203":1,"204":0,"210":1,"213":14,"219":0,"226":14,"232":0,"239":1,"248":0,"260":0,"265":0,"266":0,"269":0,"270":0,"271":0,"275":0,"276":0,"290":1,"291":0,"294":0,"295":0,"297":0,"301":0,"305":0,"311":0,"312":0,"315":0,"316":0,"318":0,"319":0,"321":0,"324":0,"326":0,"328":0,"329":0,"331":0,"332":0,"334":0,"338":0,"345":0,"347":0,"348":0,"351":0,"352":0,"356":0,"358":0,"359":0,"360":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"369":0,"372":0,"375":0,"376":0,"377":0,"378":0,"380":0,"386":0,"392":0,"403":1,"404":0,"407":0,"419":1,"420":0,"421":0,"423":0,"426":0,"438":1,"439":0,"442":0,"447":0,"459":1,"460":0,"463":0,"464":0,"468":0,"469":0,"472":0,"476":0,"477":0,"478":0,"480":0,"483":0,"484":0,"491":0,"492":0,"495":0,"496":0,"499":0,"500":0,"503":0,"504":0,"507":0,"508":0,"511":0,"512":0,"517":0,"522":0,"523":0,"524":0,"525":0,"530":0,"532":0,"536":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"553":0,"554":0,"555":0,"556":0,"557":0,"563":0,"568":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/bin/eslint.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/bin/eslint.js","s":{"1":1,"2":1,"3":0,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1},"b":{"1":[0,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,1],"6":[0,1],"7":[0,0]},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":18,"column":51}},"2":{"start":{"line":21,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":22,"column":4},"end":{"line":22,"column":58}},"4":{"start":{"line":30,"column":0},"end":{"line":33,"column":23}},"5":{"start":{"line":39,"column":0},"end":{"line":55,"column":3}},"6":{"start":{"line":42,"column":4},"end":{"line":42,"column":37}},"7":{"start":{"line":44,"column":4},"end":{"line":52,"column":5}},"8":{"start":{"line":45,"column":8},"end":{"line":45,"column":134}},"9":{"start":{"line":47,"column":8},"end":{"line":47,"column":56}},"10":{"start":{"line":48,"column":8},"end":{"line":48,"column":60}},"11":{"start":{"line":50,"column":8},"end":{"line":50,"column":33}},"12":{"start":{"line":51,"column":8},"end":{"line":51,"column":31}},"13":{"start":{"line":54,"column":4},"end":{"line":54,"column":25}},"14":{"start":{"line":57,"column":0},"end":{"line":75,"column":1}},"15":{"start":{"line":58,"column":4},"end":{"line":60,"column":8}},"16":{"start":{"line":59,"column":8},"end":{"line":59,"column":59}},"17":{"start":{"line":61,"column":7},"end":{"line":75,"column":1}},"18":{"start":{"line":62,"column":4},"end":{"line":62,"column":67}},"19":{"start":{"line":64,"column":4},"end":{"line":72,"column":7}},"20":{"start":{"line":65,"column":8},"end":{"line":71,"column":9}},"21":{"start":{"line":66,"column":12},"end":{"line":66,"column":33}},"22":{"start":{"line":67,"column":12},"end":{"line":67,"column":39}},"23":{"start":{"line":68,"column":12},"end":{"line":68,"column":37}},"24":{"start":{"line":70,"column":12},"end":{"line":70,"column":33}},"25":{"start":{"line":74,"column":4},"end":{"line":74,"column":49}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":0},"end":{"line":21,"column":0}},{"start":{"line":21,"column":0},"end":{"line":21,"column":0}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"3":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":47}},{"start":{"line":44,"column":51},"end":{"line":44,"column":81}}]},"4":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":34},"end":{"line":48,"column":49}},{"start":{"line":48,"column":53},"end":{"line":48,"column":55}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":0},"end":{"line":57,"column":0}},{"start":{"line":57,"column":0},"end":{"line":57,"column":0}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":7},"end":{"line":61,"column":7}},{"start":{"line":61,"column":7},"end":{"line":61,"column":7}}]},"7":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":8}},{"start":{"line":65,"column":8},"end":{"line":65,"column":8}}]}},"code":["//#!/usr/bin/env node","","/**"," * @fileoverview Main CLI that is run via the eslint command."," * @author Nicholas C. Zakas"," */","","/* eslint no-console:off */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const useStdIn = (process.argv.indexOf(\"--stdin\") > -1),","    init = (process.argv.indexOf(\"--init\") > -1),","    debug = (process.argv.indexOf(\"--debug\") > -1);","","// must do this initialization *before* other requires in order to work","if (debug) {","    require(\"debug\").enable(\"eslint:*,-eslint:code-path\");","}","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","// now we can safely include the other modules that use debug","const concat = require(\"concat-stream\"),","    cli = require(\"../lib/cli\"),","    path = require(\"path\"),","    fs = require(\"fs\");","","//------------------------------------------------------------------------------","// Execution","//------------------------------------------------------------------------------","","process.once(\"uncaughtException\", err => {","","    // lazy load","    const lodash = require(\"lodash\");","","    if (typeof err.messageTemplate === \"string\" && err.messageTemplate.length > 0) {","        const template = lodash.template(fs.readFileSync(path.resolve(__dirname, `../messages/${err.messageTemplate}.txt`), \"utf-8\"));","","        console.log(\"\\nOops! Something went wrong! :(\");","        console.log(`\\n${template(err.messageData || {})}`);","    } else {","        console.log(err.message);","        console.log(err.stack);","    }","","    process.exitCode = 1;","});","","if (useStdIn) {","    process.stdin.pipe(concat({ encoding: \"string\" }, text => {","        process.exitCode = cli.execute(process.argv, text);","    }));","} else if (init) {","    const configInit = require(\"../lib/config/config-initializer\");","","    configInit.initializeConfig(err => {","        if (err) {","            process.exitCode = 1;","            console.error(err.message);","            console.error(err.stack);","        } else {","            process.exitCode = 0;","        }","    });","} else {","    process.exitCode = cli.execute(process.argv);","}",""],"l":{"16":1,"21":1,"22":0,"30":1,"39":1,"42":0,"44":0,"45":0,"47":0,"48":0,"50":0,"51":0,"54":0,"57":1,"58":0,"59":0,"61":1,"62":0,"64":0,"65":0,"66":0,"67":0,"68":0,"70":0,"74":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/cli.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/cli.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1,"28":1,"29":0,"30":0,"31":1,"32":1,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,1],"5":[0,1],"6":[0,0],"7":[0,0],"8":[1,0],"9":[1,1,1],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":1},"fnMap":{"1":{"name":"translateOptions","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":38}}},"2":{"name":"printResults","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":59}}},"3":{"name":"(anonymous_3)","line":123,"loc":{"start":{"line":123,"column":11},"end":{"line":123,"column":24}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":24,"column":31}},"2":{"start":{"line":26,"column":0},"end":{"line":26,"column":45}},"3":{"start":{"line":38,"column":0},"end":{"line":59,"column":1}},"4":{"start":{"line":39,"column":4},"end":{"line":58,"column":6}},"5":{"start":{"line":70,"column":0},"end":{"line":105,"column":1}},"6":{"start":{"line":71,"column":4},"end":{"line":71,"column":18}},"7":{"start":{"line":73,"column":4},"end":{"line":78,"column":5}},"8":{"start":{"line":74,"column":8},"end":{"line":74,"column":48}},"9":{"start":{"line":76,"column":8},"end":{"line":76,"column":29}},"10":{"start":{"line":77,"column":8},"end":{"line":77,"column":21}},"11":{"start":{"line":80,"column":4},"end":{"line":80,"column":38}},"12":{"start":{"line":82,"column":4},"end":{"line":101,"column":5}},"13":{"start":{"line":83,"column":8},"end":{"line":100,"column":9}},"14":{"start":{"line":84,"column":12},"end":{"line":84,"column":69}},"15":{"start":{"line":86,"column":12},"end":{"line":89,"column":13}},"16":{"start":{"line":87,"column":16},"end":{"line":87,"column":97}},"17":{"start":{"line":88,"column":16},"end":{"line":88,"column":29}},"18":{"start":{"line":91,"column":12},"end":{"line":97,"column":13}},"19":{"start":{"line":92,"column":16},"end":{"line":92,"column":52}},"20":{"start":{"line":93,"column":16},"end":{"line":93,"column":51}},"21":{"start":{"line":95,"column":16},"end":{"line":95,"column":82}},"22":{"start":{"line":96,"column":16},"end":{"line":96,"column":29}},"23":{"start":{"line":99,"column":12},"end":{"line":99,"column":29}},"24":{"start":{"line":103,"column":4},"end":{"line":103,"column":16}},"25":{"start":{"line":115,"column":0},"end":{"line":199,"column":2}},"26":{"start":{"line":125,"column":8},"end":{"line":125,"column":27}},"27":{"start":{"line":127,"column":8},"end":{"line":132,"column":9}},"28":{"start":{"line":128,"column":12},"end":{"line":128,"column":49}},"29":{"start":{"line":130,"column":12},"end":{"line":130,"column":37}},"30":{"start":{"line":131,"column":12},"end":{"line":131,"column":21}},"31":{"start":{"line":134,"column":8},"end":{"line":134,"column":39}},"32":{"start":{"line":136,"column":8},"end":{"line":195,"column":9}},"33":{"start":{"line":138,"column":12},"end":{"line":138,"column":63}},"34":{"start":{"line":140,"column":15},"end":{"line":195,"column":9}},"35":{"start":{"line":141,"column":12},"end":{"line":147,"column":13}},"36":{"start":{"line":142,"column":16},"end":{"line":142,"column":96}},"37":{"start":{"line":143,"column":16},"end":{"line":143,"column":25}},"38":{"start":{"line":144,"column":19},"end":{"line":147,"column":13}},"39":{"start":{"line":145,"column":16},"end":{"line":145,"column":91}},"40":{"start":{"line":146,"column":16},"end":{"line":146,"column":25}},"41":{"start":{"line":149,"column":12},"end":{"line":149,"column":75}},"42":{"start":{"line":151,"column":12},"end":{"line":151,"column":83}},"43":{"start":{"line":153,"column":12},"end":{"line":153,"column":61}},"44":{"start":{"line":154,"column":12},"end":{"line":154,"column":21}},"45":{"start":{"line":155,"column":15},"end":{"line":195,"column":9}},"46":{"start":{"line":157,"column":12},"end":{"line":157,"column":45}},"47":{"start":{"line":161,"column":12},"end":{"line":161,"column":59}},"48":{"start":{"line":164,"column":12},"end":{"line":167,"column":13}},"49":{"start":{"line":165,"column":16},"end":{"line":165,"column":82}},"50":{"start":{"line":166,"column":16},"end":{"line":166,"column":25}},"51":{"start":{"line":169,"column":12},"end":{"line":169,"column":75}},"52":{"start":{"line":171,"column":12},"end":{"line":171,"column":128}},"53":{"start":{"line":173,"column":12},"end":{"line":176,"column":13}},"54":{"start":{"line":174,"column":16},"end":{"line":174,"column":59}},"55":{"start":{"line":175,"column":16},"end":{"line":175,"column":46}},"56":{"start":{"line":178,"column":12},"end":{"line":181,"column":13}},"57":{"start":{"line":179,"column":16},"end":{"line":179,"column":69}},"58":{"start":{"line":180,"column":16},"end":{"line":180,"column":75}},"59":{"start":{"line":183,"column":12},"end":{"line":191,"column":13}},"60":{"start":{"line":184,"column":16},"end":{"line":184,"column":124}},"61":{"start":{"line":186,"column":16},"end":{"line":188,"column":17}},"62":{"start":{"line":187,"column":20},"end":{"line":187,"column":107}},"63":{"start":{"line":190,"column":16},"end":{"line":190,"column":70}},"64":{"start":{"line":192,"column":12},"end":{"line":192,"column":21}},"65":{"start":{"line":197,"column":8},"end":{"line":197,"column":17}},"66":{"start":{"line":201,"column":0},"end":{"line":201,"column":21}}},"branchMap":{"1":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":82,"column":4}},{"start":{"line":82,"column":4},"end":{"line":82,"column":4}}]},"2":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":8}},{"start":{"line":83,"column":8},"end":{"line":83,"column":8}}]},"3":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":12},"end":{"line":86,"column":12}},{"start":{"line":86,"column":12},"end":{"line":86,"column":12}}]},"4":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":136,"column":8}},{"start":{"line":136,"column":8},"end":{"line":136,"column":8}}]},"5":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":15},"end":{"line":140,"column":15}},{"start":{"line":140,"column":15},"end":{"line":140,"column":15}}]},"6":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":12},"end":{"line":141,"column":12}},{"start":{"line":141,"column":12},"end":{"line":141,"column":12}}]},"7":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":19},"end":{"line":144,"column":19}},{"start":{"line":144,"column":19},"end":{"line":144,"column":19}}]},"8":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":15},"end":{"line":155,"column":15}},{"start":{"line":155,"column":15},"end":{"line":155,"column":15}}]},"9":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":19},"end":{"line":155,"column":38}},{"start":{"line":155,"column":43},"end":{"line":155,"column":56}},{"start":{"line":155,"column":60},"end":{"line":155,"column":65}}]},"10":{"line":161,"type":"cond-expr","locations":[{"start":{"line":161,"column":39},"end":{"line":161,"column":45}},{"start":{"line":161,"column":48},"end":{"line":161,"column":55}}]},"11":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":12},"end":{"line":164,"column":12}},{"start":{"line":164,"column":12},"end":{"line":164,"column":12}}]},"12":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":16},"end":{"line":164,"column":20}},{"start":{"line":164,"column":24},"end":{"line":164,"column":42}}]},"13":{"line":171,"type":"cond-expr","locations":[{"start":{"line":171,"column":34},"end":{"line":171,"column":96}},{"start":{"line":171,"column":99},"end":{"line":171,"column":127}}]},"14":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":12},"end":{"line":173,"column":12}},{"start":{"line":173,"column":12},"end":{"line":173,"column":12}}]},"15":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":12},"end":{"line":178,"column":12}},{"start":{"line":178,"column":12},"end":{"line":178,"column":12}}]},"16":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":12},"end":{"line":183,"column":12}},{"start":{"line":183,"column":12},"end":{"line":183,"column":12}}]},"17":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":40},"end":{"line":184,"column":71}},{"start":{"line":184,"column":75},"end":{"line":184,"column":123}}]},"18":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":16},"end":{"line":186,"column":16}},{"start":{"line":186,"column":16},"end":{"line":186,"column":16}}]},"19":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":20},"end":{"line":186,"column":38}},{"start":{"line":186,"column":42},"end":{"line":186,"column":57}}]},"20":{"line":190,"type":"cond-expr","locations":[{"start":{"line":190,"column":64},"end":{"line":190,"column":65}},{"start":{"line":190,"column":68},"end":{"line":190,"column":69}}]},"21":{"line":190,"type":"binary-expr","locations":[{"start":{"line":190,"column":24},"end":{"line":190,"column":41}},{"start":{"line":190,"column":45},"end":{"line":190,"column":60}}]}},"code":["/**"," * @fileoverview Main CLI object."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","/*"," * The CLI object should *not* call process.exit() directly. It should only return"," * exit codes. This allows other programs to use the CLI object and still control"," * when the program exits."," */","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    shell = require(\"shelljs\"),","    options = require(\"./options\"),","    CLIEngine = require(\"./cli-engine\"),","    mkdirp = require(\"mkdirp\"),","    log = require(\"./logging\");","","const debug = require(\"debug\")(\"eslint:cli\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Translates the CLI options into the options expected by the CLIEngine."," * @param {Object} cliOptions The CLI options to translate."," * @returns {CLIEngineOptions} The options object for the CLIEngine."," * @private"," */","function translateOptions(cliOptions) {","    return {","        envs: cliOptions.env,","        extensions: cliOptions.ext,","        rules: cliOptions.rule,","        plugins: cliOptions.plugin,","        globals: cliOptions.global,","        ignore: cliOptions.ignore,","        ignorePath: cliOptions.ignorePath,","        ignorePattern: cliOptions.ignorePattern,","        configFile: cliOptions.config,","        rulePaths: cliOptions.rulesdir,","        useEslintrc: cliOptions.eslintrc,","        parser: cliOptions.parser,","        parserOptions: cliOptions.parserOptions,","        cache: cliOptions.cache,","        cacheFile: cliOptions.cacheFile,","        cacheLocation: cliOptions.cacheLocation,","        fix: cliOptions.fix,","        allowInlineConfig: cliOptions.inlineConfig","    };","}","","/**"," * Outputs the results of the linting."," * @param {CLIEngine} engine The CLIEngine to use."," * @param {LintResult[]} results The results to print."," * @param {string} format The name of the formatter to use or the path to the formatter."," * @param {string} outputFile The path for the output file."," * @returns {boolean} True if the printing succeeds, false if not."," * @private"," */","function printResults(engine, results, format, outputFile) {","    let formatter;","","    try {","        formatter = engine.getFormatter(format);","    } catch (e) {","        log.error(e.message);","        return false;","    }","","    const output = formatter(results);","","    if (output) {","        if (outputFile) {","            const filePath = path.resolve(process.cwd(), outputFile);","","            if (shell.test(\"-d\", filePath)) {","                log.error(\"Cannot write to output file path, it is a directory: %s\", outputFile);","                return false;","            }","","            try {","                mkdirp.sync(path.dirname(filePath));","                fs.writeFileSync(filePath, output);","            } catch (ex) {","                log.error(\"There was a problem writing the output file:\\n%s\", ex);","                return false;","            }","        } else {","            log.info(output);","        }","    }","","    return true;","","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Encapsulates all CLI behavior for eslint. Makes it easier to test as well as"," * for other Node.js programs to effectively run the CLI."," */","const cli = {","","    /**","     * Executes the CLI based on an array of arguments that is passed in.","     * @param {string|Array|Object} args The arguments to process.","     * @param {string} [text] The text to lint (used for TTY).","     * @returns {int} The exit code for the operation.","     */","    execute(args, text) {","","        let currentOptions;","","        try {","            currentOptions = options.parse(args);","        } catch (error) {","            log.error(error.message);","            return 1;","        }","","        const files = currentOptions._;","","        if (currentOptions.version) { // version from package.json","","            log.info(`v${require(\"../package.json\").version}`);","","        } else if (currentOptions.printConfig) {","            if (files.length) {","                log.error(\"The --print-config option must be used with exactly one file name.\");","                return 1;","            } else if (text) {","                log.error(\"The --print-config option is not available for piped-in code.\");","                return 1;","            }","","            const engine = new CLIEngine(translateOptions(currentOptions));","","            const fileConfig = engine.getConfigForFile(currentOptions.printConfig);","","            log.info(JSON.stringify(fileConfig, null, \"  \"));","            return 0;","        } else if (currentOptions.help || (!files.length && !text)) {","","            log.info(options.generateHelp());","","        } else {","","            debug(`Running on ${text ? \"text\" : \"files\"}`);","","            // disable --fix for piped-in code until we know how to do it correctly","            if (text && currentOptions.fix) {","                log.error(\"The --fix option is not available for piped-in code.\");","                return 1;","            }","","            const engine = new CLIEngine(translateOptions(currentOptions));","","            const report = text ? engine.executeOnText(text, currentOptions.stdinFilename, true) : engine.executeOnFiles(files);","","            if (currentOptions.fix) {","                debug(\"Fix mode enabled - applying fixes\");","                CLIEngine.outputFixes(report);","            }","","            if (currentOptions.quiet) {","                debug(\"Quiet mode enabled - filtering out warnings\");","                report.results = CLIEngine.getErrorResults(report.results);","            }","","            if (printResults(engine, report.results, currentOptions.format, currentOptions.outputFile)) {","                const tooManyWarnings = currentOptions.maxWarnings >= 0 && report.warningCount > currentOptions.maxWarnings;","","                if (!report.errorCount && tooManyWarnings) {","                    log.error(\"ESLint found too many warnings (maximum: %s).\", currentOptions.maxWarnings);","                }","","                return (report.errorCount || tooManyWarnings) ? 1 : 0;","            }","            return 1;","","","        }","","        return 0;","    }","};","","module.exports = cli;",""],"l":{"18":1,"26":1,"38":1,"39":0,"70":1,"71":0,"73":0,"74":0,"76":0,"77":0,"80":0,"82":0,"83":0,"84":0,"86":0,"87":0,"88":0,"91":0,"92":0,"93":0,"95":0,"96":0,"99":0,"103":0,"115":1,"125":1,"127":1,"128":1,"130":0,"131":0,"134":1,"136":1,"138":0,"140":1,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"149":0,"151":0,"153":0,"154":0,"155":1,"157":1,"161":0,"164":0,"165":0,"166":0,"169":0,"171":0,"173":0,"174":0,"175":0,"178":0,"179":0,"180":0,"183":0,"184":0,"186":0,"187":0,"190":0,"192":0,"197":1,"201":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/options.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/options.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":19,"column":0},"end":{"line":223,"column":3}}},"branchMap":{},"code":["/**"," * @fileoverview Options configuration for optionator."," * @author George Zahariev"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const optionator = require(\"optionator\");","","//------------------------------------------------------------------------------","// Initialization and Public Interface","//------------------------------------------------------------------------------","","// exports \"parse(args)\", \"generateHelp()\", and \"generateHelpForOption(optionName)\"","module.exports = optionator({","    prepend: \"eslint [options] file.js [file.js] [dir]\",","    defaults: {","        concatRepeatedArrays: true,","        mergeRepeatedObjects: true","    },","    options: [","        {","            heading: \"Basic configuration\"","        },","        {","            option: \"config\",","            alias: \"c\",","            type: \"path::String\",","            description: \"Use configuration from this file or shareable config\"","        },","        {","            option: \"eslintrc\",","            type: \"Boolean\",","            default: \"true\",","            description: \"Disable use of configuration from .eslintrc\"","        },","        {","            option: \"env\",","            type: \"[String]\",","            description: \"Specify environments\"","        },","        {","            option: \"ext\",","            type: \"[String]\",","            default: \".js\",","            description: \"Specify JavaScript file extensions\"","        },","        {","            option: \"global\",","            type: \"[String]\",","            description: \"Define global variables\"","        },","        {","            option: \"parser\",","            type: \"String\",","            description: \"Specify the parser to be used\"","        },","        {","            option: \"parser-options\",","            type: \"Object\",","            description: \"Specify parser options\"","        },","        {","            heading: \"Caching\"","        },","        {","            option: \"cache\",","            type: \"Boolean\",","            default: \"false\",","            description: \"Only check changed files\"","        },","        {","            option: \"cache-file\",","            type: \"path::String\",","            default: \".eslintcache\",","            description: \"Path to the cache file. Deprecated: use --cache-location\"","        },","        {","            option: \"cache-location\",","            type: \"path::String\",","            description: \"Path to the cache file or directory\"","        },","        {","            heading: \"Specifying rules and plugins\"","        },","        {","            option: \"rulesdir\",","            type: \"[path::String]\",","            description: \"Use additional rules from this directory\"","        },","        {","            option: \"plugin\",","            type: \"[String]\",","            description: \"Specify plugins\"","        },","        {","            option: \"rule\",","            type: \"Object\",","            description: \"Specify rules\"","        },","        {","            heading: \"Ignoring files\"","        },","        {","            option: \"ignore-path\",","            type: \"path::String\",","            description: \"Specify path of ignore file\"","        },","        {","            option: \"ignore\",","            type: \"Boolean\",","            default: \"true\",","            description: \"Disable use of ignore files and patterns\"","        },","        {","            option: \"ignore-pattern\",","            type: \"[String]\",","            description: \"Pattern of files to ignore (in addition to those in .eslintignore)\",","            concatRepeatedArrays: [true, {","                oneValuePerFlag: true","            }]","        },","        {","            heading: \"Using stdin\"","        },","        {","            option: \"stdin\",","            type: \"Boolean\",","            default: \"false\",","            description: \"Lint code provided on <STDIN>\"","        },","        {","            option: \"stdin-filename\",","            type: \"String\",","            description: \"Specify filename to process STDIN as\"","        },","        {","            heading: \"Handling warnings\"","        },","        {","            option: \"quiet\",","            type: \"Boolean\",","            default: \"false\",","            description: \"Report errors only\"","        },","        {","            option: \"max-warnings\",","            type: \"Int\",","            default: \"-1\",","            description: \"Number of warnings to trigger nonzero exit code\"","        },","        {","            heading: \"Output\"","        },","        {","            option: \"output-file\",","            alias: \"o\",","            type: \"path::String\",","            description: \"Specify file to write report to\"","        },","        {","            option: \"format\",","            alias: \"f\",","            type: \"String\",","            default: \"stylish\",","            description: \"Use a specific output format\"","        },","        {","            option: \"color\",","            type: \"Boolean\",","            alias: \"no-color\",","            description: \"Force enabling/disabling of color\"","        },","        {","            heading: \"Miscellaneous\"","        },","        {","            option: \"init\",","            type: \"Boolean\",","            default: \"false\",","            description: \"Run config initialization wizard\"","        },","        {","            option: \"fix\",","            type: \"Boolean\",","            default: false,","            description: \"Automatically fix problems\"","        },","        {","            option: \"debug\",","            type: \"Boolean\",","            default: false,","            description: \"Output debugging information\"","        },","        {","            option: \"help\",","            alias: \"h\",","            type: \"Boolean\",","            description: \"Show help\"","        },","        {","            option: \"version\",","            alias: \"v\",","            type: \"Boolean\",","            description: \"Output the version number\"","        },","        {","            option: \"inline-config\",","            type: \"Boolean\",","            default: \"true\",","            description: \"Prevent comments from changing config or rules\"","        },","        {","            option: \"print-config\",","            type: \"path::String\",","            description: \"Print the configuration for the given file\"","        }","    ]","});",""],"l":{"12":1,"19":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/logging.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/logging.js","s":{"1":1,"2":1,"3":0},"b":{},"f":{"1":1,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":8},"end":{"line":17,"column":11}},"skip":true},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":9},"end":{"line":25,"column":12}},"skip":true}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":28,"column":2},"skip":true},"2":{"start":{"line":18,"column":8},"end":{"line":18,"column":74},"skip":true},"3":{"start":{"line":26,"column":8},"end":{"line":26,"column":76},"skip":true}},"branchMap":{},"code":["/**"," * @fileoverview Handle logging for ESLint"," * @author Gyandeep Singh"," */","","\"use strict\";","","/* eslint no-console: \"off\" */","","/* istanbul ignore next */","module.exports = {","","    /**","     * Cover for console.log","     * @returns {void}","     */","    info() {","        console.log.apply(console, Array.prototype.slice.call(arguments));","    },","","    /**","     * Cover for console.error","     * @returns {void}","     */","    error() {","        console.error.apply(console, Array.prototype.slice.call(arguments));","    }","};",""],"l":{"11":1,"18":1,"26":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/conf/eslint-all.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/conf/eslint-all.js","s":{"1":1,"2":1,"3":244,"4":240,"5":244,"6":1},"b":{"1":[240,4]},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":36}},"2":{"start":{"line":19,"column":0},"end":{"line":24,"column":7}},"3":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":33}},"5":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"6":{"start":{"line":30,"column":0},"end":{"line":30,"column":41}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]}},"code":["/**"," * @fileoverview Config to enable all rules."," * @author Robert Fletcher"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const load = require(\"../lib/load-rules\"),","    rules = require(\"../lib/rules\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const enabledRules = Object.keys(load()).reduce((result, ruleId) => {","    if (!rules.get(ruleId).meta.deprecated) {","        result[ruleId] = \"error\";","    }","    return result;","}, {});","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = { rules: enabledRules };",""],"l":{"12":1,"19":1,"20":244,"21":240,"23":244,"30":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/accessor-pairs.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/accessor-pairs.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0},"b":{"1":[0,0],"2":[0,0,0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"isIdentifier","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":34}}},"2":{"name":"isArgumentOfMethodCall","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":63}}},"3":{"name":"isPropertyDescriptor","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":36}}},"4":{"name":"(anonymous_4)","line":93,"loc":{"start":{"line":93,"column":10},"end":{"line":93,"column":20}}},"5":{"name":"checkLonelySetGet","line":104,"loc":{"start":{"line":104,"column":8},"end":{"line":104,"column":41}}},"6":{"name":"(anonymous_6)","line":149,"loc":{"start":{"line":149,"column":28},"end":{"line":149,"column":35}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"2":{"start":{"line":19,"column":4},"end":{"line":19,"column":60}},"3":{"start":{"line":30,"column":0},"end":{"line":41,"column":1}},"4":{"start":{"line":31,"column":4},"end":{"line":31,"column":31}},"5":{"start":{"line":33,"column":4},"end":{"line":40,"column":6}},"6":{"start":{"line":48,"column":0},"end":{"line":67,"column":1}},"7":{"start":{"line":51,"column":4},"end":{"line":55,"column":5}},"8":{"start":{"line":54,"column":8},"end":{"line":54,"column":20}},"9":{"start":{"line":61,"column":4},"end":{"line":61,"column":30}},"10":{"start":{"line":63,"column":4},"end":{"line":66,"column":6}},"11":{"start":{"line":73,"column":0},"end":{"line":156,"column":2}},"12":{"start":{"line":94,"column":8},"end":{"line":94,"column":48}},"13":{"start":{"line":95,"column":8},"end":{"line":95,"column":65}},"14":{"start":{"line":96,"column":8},"end":{"line":96,"column":66}},"15":{"start":{"line":104,"column":8},"end":{"line":146,"column":9}},"16":{"start":{"line":105,"column":12},"end":{"line":105,"column":37}},"17":{"start":{"line":106,"column":12},"end":{"line":106,"column":37}},"18":{"start":{"line":107,"column":12},"end":{"line":107,"column":60}},"19":{"start":{"line":109,"column":12},"end":{"line":139,"column":13}},"20":{"start":{"line":110,"column":16},"end":{"line":110,"column":52}},"21":{"start":{"line":112,"column":16},"end":{"line":112,"column":37}},"22":{"start":{"line":114,"column":16},"end":{"line":120,"column":17}},"23":{"start":{"line":115,"column":20},"end":{"line":117,"column":21}},"24":{"start":{"line":116,"column":24},"end":{"line":116,"column":56}},"25":{"start":{"line":119,"column":20},"end":{"line":119,"column":48}},"26":{"start":{"line":122,"column":16},"end":{"line":134,"column":17}},"27":{"start":{"line":124,"column":24},"end":{"line":124,"column":44}},"28":{"start":{"line":125,"column":24},"end":{"line":125,"column":30}},"29":{"start":{"line":128,"column":24},"end":{"line":128,"column":44}},"30":{"start":{"line":129,"column":24},"end":{"line":129,"column":30}},"31":{"start":{"line":136,"column":16},"end":{"line":138,"column":17}},"32":{"start":{"line":137,"column":20},"end":{"line":137,"column":26}},"33":{"start":{"line":141,"column":12},"end":{"line":145,"column":13}},"34":{"start":{"line":142,"column":16},"end":{"line":142,"column":76}},"35":{"start":{"line":143,"column":19},"end":{"line":145,"column":13}},"36":{"start":{"line":144,"column":16},"end":{"line":144,"column":76}},"37":{"start":{"line":148,"column":8},"end":{"line":154,"column":10}},"38":{"start":{"line":150,"column":16},"end":{"line":152,"column":17}},"39":{"start":{"line":151,"column":20},"end":{"line":151,"column":44}}},"branchMap":{"1":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":11},"end":{"line":19,"column":37}},{"start":{"line":19,"column":41},"end":{"line":19,"column":59}}]},"2":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":40}},{"start":{"line":35,"column":8},"end":{"line":35,"column":49}},{"start":{"line":36,"column":8},"end":{"line":36,"column":40}},{"start":{"line":37,"column":8},"end":{"line":37,"column":50}},{"start":{"line":38,"column":8},"end":{"line":38,"column":54}},{"start":{"line":39,"column":8},"end":{"line":39,"column":40}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"4":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":67}},{"start":{"line":52,"column":8},"end":{"line":52,"column":68}}]},"5":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":11},"end":{"line":63,"column":43}},{"start":{"line":64,"column":8},"end":{"line":64,"column":59}},{"start":{"line":65,"column":8},"end":{"line":65,"column":69}}]},"6":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":23},"end":{"line":94,"column":41}},{"start":{"line":94,"column":45},"end":{"line":94,"column":47}}]},"7":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":16},"end":{"line":114,"column":16}},{"start":{"line":114,"column":16},"end":{"line":114,"column":16}}]},"8":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":20},"end":{"line":115,"column":20}},{"start":{"line":115,"column":20},"end":{"line":115,"column":20}}]},"9":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":24},"end":{"line":115,"column":36}},{"start":{"line":115,"column":40},"end":{"line":115,"column":58}}]},"10":{"line":122,"type":"switch","locations":[{"start":{"line":123,"column":20},"end":{"line":125,"column":30}},{"start":{"line":127,"column":20},"end":{"line":129,"column":30}},{"start":{"line":131,"column":20},"end":{"line":131,"column":28}}]},"11":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":16},"end":{"line":136,"column":16}},{"start":{"line":136,"column":16},"end":{"line":136,"column":16}}]},"12":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":20},"end":{"line":136,"column":32}},{"start":{"line":136,"column":36},"end":{"line":136,"column":48}}]},"13":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":12},"end":{"line":141,"column":12}},{"start":{"line":141,"column":12},"end":{"line":141,"column":12}}]},"14":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":16},"end":{"line":141,"column":34}},{"start":{"line":141,"column":38},"end":{"line":141,"column":50}},{"start":{"line":141,"column":54},"end":{"line":141,"column":67}}]},"15":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":19},"end":{"line":143,"column":19}},{"start":{"line":143,"column":19},"end":{"line":143,"column":19}}]},"16":{"line":143,"type":"binary-expr","locations":[{"start":{"line":143,"column":23},"end":{"line":143,"column":41}},{"start":{"line":143,"column":45},"end":{"line":143,"column":57}},{"start":{"line":143,"column":61},"end":{"line":143,"column":74}}]},"17":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":16},"end":{"line":150,"column":16}},{"start":{"line":150,"column":16},"end":{"line":150,"column":16}}]},"18":{"line":150,"type":"binary-expr","locations":[{"start":{"line":150,"column":20},"end":{"line":150,"column":38}},{"start":{"line":150,"column":42},"end":{"line":150,"column":60}}]}},"code":["/**"," * @fileoverview Rule to flag wrapping non-iife in parens"," * @author Gyandeep Singh"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given node is an `Identifier` node which was named a given name."," * @param {ASTNode} node - A node to check."," * @param {string} name - An expected name of the node."," * @returns {boolean} `true` if the node is an `Identifier` node which was named as expected."," */","function isIdentifier(node, name) {","    return node.type === \"Identifier\" && node.name === name;","}","","/**"," * Checks whether or not a given node is an argument of a specified method call."," * @param {ASTNode} node - A node to check."," * @param {number} index - An expected index of the node in arguments."," * @param {string} object - An expected name of the object of the method."," * @param {string} property - An expected name of the method."," * @returns {boolean} `true` if the node is an argument of the specified method call."," */","function isArgumentOfMethodCall(node, index, object, property) {","    const parent = node.parent;","","    return (","        parent.type === \"CallExpression\" &&","        parent.callee.type === \"MemberExpression\" &&","        parent.callee.computed === false &&","        isIdentifier(parent.callee.object, object) &&","        isIdentifier(parent.callee.property, property) &&","        parent.arguments[index] === node","    );","}","","/**"," * Checks whether or not a given node is a property descriptor."," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node is a property descriptor."," */","function isPropertyDescriptor(node) {","","    // Object.defineProperty(obj, \"foo\", {set: ...})","    if (isArgumentOfMethodCall(node, 2, \"Object\", \"defineProperty\") ||","        isArgumentOfMethodCall(node, 2, \"Reflect\", \"defineProperty\")","    ) {","        return true;","    }","","    /*","     * Object.defineProperties(obj, {foo: {set: ...}})","     * Object.create(proto, {foo: {set: ...}})","     */","    node = node.parent.parent;","","    return node.type === \"ObjectExpression\" && (","        isArgumentOfMethodCall(node, 1, \"Object\", \"create\") ||","        isArgumentOfMethodCall(node, 1, \"Object\", \"defineProperties\")","    );","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce getter and setter pairs in objects\",","            category: \"Best Practices\",","            recommended: false","        },","        schema: [{","            type: \"object\",","            properties: {","                getWithoutSet: {","                    type: \"boolean\"","                },","                setWithoutGet: {","                    type: \"boolean\"","                }","            },","            additionalProperties: false","        }]","    },","    create(context) {","        const config = context.options[0] || {};","        const checkGetWithoutSet = config.getWithoutSet === true;","        const checkSetWithoutGet = config.setWithoutGet !== false;","","        /**","         * Checks a object expression to see if it has setter and getter both present or none.","         * @param {ASTNode} node The node to check.","         * @returns {void}","         * @private","         */","        function checkLonelySetGet(node) {","            let isSetPresent = false;","            let isGetPresent = false;","            const isDescriptor = isPropertyDescriptor(node);","","            for (let i = 0, end = node.properties.length; i < end; i++) {","                const property = node.properties[i];","","                let propToCheck = \"\";","","                if (property.kind === \"init\") {","                    if (isDescriptor && !property.computed) {","                        propToCheck = property.key.name;","                    }","                } else {","                    propToCheck = property.kind;","                }","","                switch (propToCheck) {","                    case \"set\":","                        isSetPresent = true;","                        break;","","                    case \"get\":","                        isGetPresent = true;","                        break;","","                    default:","","                        // Do nothing","                }","","                if (isSetPresent && isGetPresent) {","                    break;","                }","            }","","            if (checkSetWithoutGet && isSetPresent && !isGetPresent) {","                context.report({ node, message: \"Getter is not present.\" });","            } else if (checkGetWithoutSet && isGetPresent && !isSetPresent) {","                context.report({ node, message: \"Setter is not present.\" });","            }","        }","","        return {","            ObjectExpression(node) {","                if (checkSetWithoutGet || checkGetWithoutSet) {","                    checkLonelySetGet(node);","                }","            }","        };","    }","};",""],"l":{"18":1,"19":0,"30":1,"31":0,"33":0,"48":1,"51":0,"54":0,"61":0,"63":0,"73":1,"94":0,"95":0,"96":0,"104":1,"105":0,"106":0,"107":0,"109":0,"110":0,"112":0,"114":0,"115":0,"116":0,"119":0,"122":0,"124":0,"125":0,"128":0,"129":0,"136":0,"137":0,"141":0,"142":0,"143":0,"144":0,"148":0,"150":0,"151":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/array-bracket-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/array-bracket-spacing.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":1,"19":0,"20":0,"21":1,"22":0,"23":1,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0,0,0],"9":[0,0],"10":[0,0,0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":42,"loc":{"start":{"line":42,"column":10},"end":{"line":42,"column":20}}},"2":{"name":"isOptionSet","line":53,"loc":{"start":{"line":53,"column":8},"end":{"line":53,"column":37}}},"3":{"name":"reportNoBeginningSpace","line":74,"loc":{"start":{"line":74,"column":8},"end":{"line":74,"column":53}}},"4":{"name":"(anonymous_4)","line":82,"loc":{"start":{"line":82,"column":19},"end":{"line":82,"column":27}}},"5":{"name":"reportNoEndingSpace","line":96,"loc":{"start":{"line":96,"column":8},"end":{"line":96,"column":50}}},"6":{"name":"(anonymous_6)","line":104,"loc":{"start":{"line":104,"column":19},"end":{"line":104,"column":27}}},"7":{"name":"reportRequiredBeginningSpace","line":118,"loc":{"start":{"line":118,"column":8},"end":{"line":118,"column":59}}},"8":{"name":"(anonymous_8)","line":126,"loc":{"start":{"line":126,"column":19},"end":{"line":126,"column":27}}},"9":{"name":"reportRequiredEndingSpace","line":138,"loc":{"start":{"line":138,"column":8},"end":{"line":138,"column":56}}},"10":{"name":"(anonymous_10)","line":146,"loc":{"start":{"line":146,"column":19},"end":{"line":146,"column":27}}},"11":{"name":"isObjectType","line":157,"loc":{"start":{"line":157,"column":8},"end":{"line":157,"column":36}}},"12":{"name":"isArrayType","line":166,"loc":{"start":{"line":166,"column":8},"end":{"line":166,"column":35}}},"13":{"name":"validateArraySpacing","line":175,"loc":{"start":{"line":175,"column":8},"end":{"line":175,"column":44}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":229,"column":2}},"3":{"start":{"line":43,"column":8},"end":{"line":44,"column":49}},"4":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"5":{"start":{"line":54,"column":12},"end":{"line":54,"column":87}},"6":{"start":{"line":57,"column":8},"end":{"line":62,"column":10}},"7":{"start":{"line":74,"column":8},"end":{"line":88,"column":9}},"8":{"start":{"line":75,"column":12},"end":{"line":87,"column":15}},"9":{"start":{"line":83,"column":20},"end":{"line":83,"column":70}},"10":{"start":{"line":85,"column":20},"end":{"line":85,"column":83}},"11":{"start":{"line":96,"column":8},"end":{"line":110,"column":9}},"12":{"start":{"line":97,"column":12},"end":{"line":109,"column":15}},"13":{"start":{"line":105,"column":20},"end":{"line":105,"column":75}},"14":{"start":{"line":107,"column":20},"end":{"line":107,"column":87}},"15":{"start":{"line":118,"column":8},"end":{"line":130,"column":9}},"16":{"start":{"line":119,"column":12},"end":{"line":129,"column":15}},"17":{"start":{"line":127,"column":20},"end":{"line":127,"column":61}},"18":{"start":{"line":138,"column":8},"end":{"line":150,"column":9}},"19":{"start":{"line":139,"column":12},"end":{"line":149,"column":15}},"20":{"start":{"line":147,"column":20},"end":{"line":147,"column":62}},"21":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"22":{"start":{"line":158,"column":12},"end":{"line":158,"column":95}},"23":{"start":{"line":166,"column":8},"end":{"line":168,"column":9}},"24":{"start":{"line":167,"column":12},"end":{"line":167,"column":93}},"25":{"start":{"line":175,"column":8},"end":{"line":218,"column":9}},"26":{"start":{"line":176,"column":12},"end":{"line":178,"column":13}},"27":{"start":{"line":177,"column":16},"end":{"line":177,"column":23}},"28":{"start":{"line":180,"column":12},"end":{"line":187,"column":70}},"29":{"start":{"line":189,"column":12},"end":{"line":193,"column":55}},"30":{"start":{"line":195,"column":12},"end":{"line":199,"column":55}},"31":{"start":{"line":201,"column":12},"end":{"line":208,"column":13}},"32":{"start":{"line":202,"column":16},"end":{"line":204,"column":17}},"33":{"start":{"line":203,"column":20},"end":{"line":203,"column":62}},"34":{"start":{"line":205,"column":16},"end":{"line":207,"column":17}},"35":{"start":{"line":206,"column":20},"end":{"line":206,"column":56}},"36":{"start":{"line":210,"column":12},"end":{"line":217,"column":13}},"37":{"start":{"line":211,"column":16},"end":{"line":213,"column":17}},"38":{"start":{"line":212,"column":20},"end":{"line":212,"column":58}},"39":{"start":{"line":214,"column":16},"end":{"line":216,"column":17}},"40":{"start":{"line":215,"column":20},"end":{"line":215,"column":52}},"41":{"start":{"line":224,"column":8},"end":{"line":227,"column":10}}},"branchMap":{"1":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":40},"end":{"line":54,"column":78}},{"start":{"line":54,"column":81},"end":{"line":54,"column":86}}]},"2":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":19},"end":{"line":158,"column":23}},{"start":{"line":158,"column":28},"end":{"line":158,"column":60}},{"start":{"line":158,"column":64},"end":{"line":158,"column":93}}]},"3":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":19},"end":{"line":167,"column":23}},{"start":{"line":167,"column":28},"end":{"line":167,"column":59}},{"start":{"line":167,"column":63},"end":{"line":167,"column":91}}]},"4":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":12},"end":{"line":176,"column":12}},{"start":{"line":176,"column":12},"end":{"line":176,"column":12}}]},"5":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":16},"end":{"line":176,"column":30}},{"start":{"line":176,"column":34},"end":{"line":176,"column":60}}]},"6":{"line":182,"type":"cond-expr","locations":[{"start":{"line":183,"column":22},"end":{"line":183,"column":68}},{"start":{"line":184,"column":22},"end":{"line":184,"column":51}}]},"7":{"line":190,"type":"cond-expr","locations":[{"start":{"line":193,"column":22},"end":{"line":193,"column":37}},{"start":{"line":193,"column":40},"end":{"line":193,"column":54}}]},"8":{"line":190,"type":"binary-expr","locations":[{"start":{"line":190,"column":16},"end":{"line":190,"column":48}},{"start":{"line":190,"column":52},"end":{"line":190,"column":78}},{"start":{"line":191,"column":16},"end":{"line":191,"column":47}},{"start":{"line":191,"column":51},"end":{"line":191,"column":76}},{"start":{"line":192,"column":16},"end":{"line":192,"column":46}},{"start":{"line":192,"column":50},"end":{"line":192,"column":76}}]},"9":{"line":196,"type":"cond-expr","locations":[{"start":{"line":199,"column":22},"end":{"line":199,"column":37}},{"start":{"line":199,"column":40},"end":{"line":199,"column":54}}]},"10":{"line":196,"type":"binary-expr","locations":[{"start":{"line":196,"column":16},"end":{"line":196,"column":48}},{"start":{"line":196,"column":52},"end":{"line":196,"column":77}},{"start":{"line":197,"column":16},"end":{"line":197,"column":47}},{"start":{"line":197,"column":51},"end":{"line":197,"column":75}},{"start":{"line":198,"column":16},"end":{"line":198,"column":46}},{"start":{"line":198,"column":50},"end":{"line":198,"column":76}}]},"11":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":12},"end":{"line":201,"column":12}},{"start":{"line":201,"column":12},"end":{"line":201,"column":12}}]},"12":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":16},"end":{"line":202,"column":16}},{"start":{"line":202,"column":16},"end":{"line":202,"column":16}}]},"13":{"line":202,"type":"binary-expr","locations":[{"start":{"line":202,"column":20},"end":{"line":202,"column":46}},{"start":{"line":202,"column":50},"end":{"line":202,"column":97}}]},"14":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":16},"end":{"line":205,"column":16}},{"start":{"line":205,"column":16},"end":{"line":205,"column":16}}]},"15":{"line":205,"type":"binary-expr","locations":[{"start":{"line":205,"column":20},"end":{"line":205,"column":47}},{"start":{"line":205,"column":51},"end":{"line":205,"column":97}}]},"16":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":12},"end":{"line":210,"column":12}},{"start":{"line":210,"column":12},"end":{"line":210,"column":12}}]},"17":{"line":210,"type":"binary-expr","locations":[{"start":{"line":210,"column":16},"end":{"line":210,"column":37}},{"start":{"line":210,"column":41},"end":{"line":210,"column":86}}]},"18":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":16},"end":{"line":211,"column":16}},{"start":{"line":211,"column":16},"end":{"line":211,"column":16}}]},"19":{"line":211,"type":"binary-expr","locations":[{"start":{"line":211,"column":20},"end":{"line":211,"column":46}},{"start":{"line":211,"column":50},"end":{"line":211,"column":101}}]},"20":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":16},"end":{"line":214,"column":16}},{"start":{"line":214,"column":16},"end":{"line":214,"column":16}}]},"21":{"line":214,"type":"binary-expr","locations":[{"start":{"line":214,"column":20},"end":{"line":214,"column":47}},{"start":{"line":214,"column":51},"end":{"line":214,"column":101}}]}},"code":["/**"," * @fileoverview Disallows or enforces spaces inside of array brackets."," * @author Jamund Ferguson"," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing inside array brackets\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        fixable: \"whitespace\",","        schema: [","            {","                enum: [\"always\", \"never\"]","            },","            {","                type: \"object\",","                properties: {","                    singleValue: {","                        type: \"boolean\"","                    },","                    objectsInArrays: {","                        type: \"boolean\"","                    },","                    arraysInArrays: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","    create(context) {","        const spaced = context.options[0] === \"always\",","            sourceCode = context.getSourceCode();","","        /**","         * Determines whether an option is set, relative to the spacing option.","         * If spaced is \"always\", then check whether option is set to false.","         * If spaced is \"never\", then check whether option is set to true.","         * @param {Object} option - The option to exclude.","         * @returns {boolean} Whether or not the property is excluded.","         */","        function isOptionSet(option) {","            return context.options[1] ? context.options[1][option] === !spaced : false;","        }","","        const options = {","            spaced,","            singleElementException: isOptionSet(\"singleValue\"),","            objectsInArraysException: isOptionSet(\"objectsInArrays\"),","            arraysInArraysException: isOptionSet(\"arraysInArrays\")","        };","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","        * Reports that there shouldn't be a space after the first token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportNoBeginningSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"There should be no space after '{{tokenValue}}'.\",","                data: {","                    tokenValue: token.value","                },","                fix(fixer) {","                    const nextToken = sourceCode.getTokenAfter(token);","","                    return fixer.removeRange([token.range[1], nextToken.range[0]]);","                }","            });","        }","","        /**","        * Reports that there shouldn't be a space before the last token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportNoEndingSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"There should be no space before '{{tokenValue}}'.\",","                data: {","                    tokenValue: token.value","                },","                fix(fixer) {","                    const previousToken = sourceCode.getTokenBefore(token);","","                    return fixer.removeRange([previousToken.range[1], token.range[0]]);","                }","            });","        }","","        /**","        * Reports that there should be a space after the first token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportRequiredBeginningSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"A space is required after '{{tokenValue}}'.\",","                data: {","                    tokenValue: token.value","                },","                fix(fixer) {","                    return fixer.insertTextAfter(token, \" \");","                }","            });","        }","","        /**","        * Reports that there should be a space before the last token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportRequiredEndingSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"A space is required before '{{tokenValue}}'.\",","                data: {","                    tokenValue: token.value","                },","                fix(fixer) {","                    return fixer.insertTextBefore(token, \" \");","                }","            });","        }","","        /**","        * Determines if a node is an object type","        * @param {ASTNode} node - The node to check.","        * @returns {boolean} Whether or not the node is an object type.","        */","        function isObjectType(node) {","            return node && (node.type === \"ObjectExpression\" || node.type === \"ObjectPattern\");","        }","","        /**","        * Determines if a node is an array type","        * @param {ASTNode} node - The node to check.","        * @returns {boolean} Whether or not the node is an array type.","        */","        function isArrayType(node) {","            return node && (node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\");","        }","","        /**","         * Validates the spacing around array brackets","         * @param {ASTNode} node - The node we're checking for spacing","         * @returns {void}","         */","        function validateArraySpacing(node) {","            if (options.spaced && node.elements.length === 0) {","                return;","            }","","            const first = sourceCode.getFirstToken(node),","                second = sourceCode.getFirstToken(node, 1),","                last = node.typeAnnotation","                    ? sourceCode.getTokenBefore(node.typeAnnotation)","                    : sourceCode.getLastToken(node),","                penultimate = sourceCode.getTokenBefore(last),","                firstElement = node.elements[0],","                lastElement = node.elements[node.elements.length - 1];","","            const openingBracketMustBeSpaced =","                options.objectsInArraysException && isObjectType(firstElement) ||","                options.arraysInArraysException && isArrayType(firstElement) ||","                options.singleElementException && node.elements.length === 1","                    ? !options.spaced : options.spaced;","","            const closingBracketMustBeSpaced =","                options.objectsInArraysException && isObjectType(lastElement) ||","                options.arraysInArraysException && isArrayType(lastElement) ||","                options.singleElementException && node.elements.length === 1","                    ? !options.spaced : options.spaced;","","            if (astUtils.isTokenOnSameLine(first, second)) {","                if (openingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(first, second)) {","                    reportRequiredBeginningSpace(node, first);","                }","                if (!openingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(first, second)) {","                    reportNoBeginningSpace(node, first);","                }","            }","","            if (first !== penultimate && astUtils.isTokenOnSameLine(penultimate, last)) {","                if (closingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(penultimate, last)) {","                    reportRequiredEndingSpace(node, last);","                }","                if (!closingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(penultimate, last)) {","                    reportNoEndingSpace(node, last);","                }","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            ArrayPattern: validateArraySpacing,","            ArrayExpression: validateArraySpacing","        };","    }","};",""],"l":{"7":1,"13":1,"43":0,"53":1,"54":0,"57":0,"74":1,"75":0,"83":0,"85":0,"96":1,"97":0,"105":0,"107":0,"118":1,"119":0,"127":0,"138":1,"139":0,"147":0,"157":1,"158":0,"166":1,"167":0,"175":1,"176":0,"177":0,"180":0,"189":0,"195":0,"201":0,"202":0,"203":0,"205":0,"206":0,"210":0,"211":0,"212":0,"214":0,"215":0,"224":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/array-callback-return.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/array-callback-return.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"isReachable","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":30}}},"2":{"name":"getLocation","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":39}}},"3":{"name":"isTargetMethod","line":58,"loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":30}}},"4":{"name":"isCallbackOfArrayMethod","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":39}}},"5":{"name":"(anonymous_5)","line":147,"loc":{"start":{"line":147,"column":10},"end":{"line":147,"column":20}}},"6":{"name":"checkLastSegment","line":166,"loc":{"start":{"line":166,"column":8},"end":{"line":166,"column":40}}},"7":{"name":"(anonymous_7)","line":186,"loc":{"start":{"line":186,"column":27},"end":{"line":186,"column":44}}},"8":{"name":"(anonymous_8)","line":202,"loc":{"start":{"line":202,"column":25},"end":{"line":202,"column":28}}},"9":{"name":"(anonymous_9)","line":207,"loc":{"start":{"line":207,"column":27},"end":{"line":207,"column":34}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"2":{"start":{"line":14,"column":0},"end":{"line":14,"column":41}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":58}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":90}},"5":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"6":{"start":{"line":30,"column":4},"end":{"line":30,"column":29}},"7":{"start":{"line":43,"column":0},"end":{"line":48,"column":1}},"8":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"9":{"start":{"line":45,"column":8},"end":{"line":45,"column":52}},"10":{"start":{"line":47,"column":4},"end":{"line":47,"column":27}},"11":{"start":{"line":58,"column":0},"end":{"line":63,"column":1}},"12":{"start":{"line":59,"column":4},"end":{"line":62,"column":6}},"13":{"start":{"line":73,"column":0},"end":{"line":130,"column":1}},"14":{"start":{"line":74,"column":4},"end":{"line":126,"column":5}},"15":{"start":{"line":75,"column":8},"end":{"line":75,"column":35}},"16":{"start":{"line":77,"column":8},"end":{"line":125,"column":9}},"17":{"start":{"line":85,"column":16},"end":{"line":85,"column":30}},"18":{"start":{"line":86,"column":16},"end":{"line":86,"column":22}},"19":{"start":{"line":95,"column":16},"end":{"line":95,"column":63}},"20":{"start":{"line":97,"column":16},"end":{"line":99,"column":17}},"21":{"start":{"line":98,"column":20},"end":{"line":98,"column":33}},"22":{"start":{"line":100,"column":16},"end":{"line":100,"column":35}},"23":{"start":{"line":101,"column":16},"end":{"line":101,"column":22}},"24":{"start":{"line":108,"column":16},"end":{"line":113,"column":17}},"25":{"start":{"line":109,"column":20},"end":{"line":112,"column":22}},"26":{"start":{"line":114,"column":16},"end":{"line":119,"column":17}},"27":{"start":{"line":115,"column":20},"end":{"line":118,"column":22}},"28":{"start":{"line":120,"column":16},"end":{"line":120,"column":29}},"29":{"start":{"line":124,"column":16},"end":{"line":124,"column":29}},"30":{"start":{"line":129,"column":4},"end":{"line":129,"column":17},"skip":true},"31":{"start":{"line":136,"column":0},"end":{"line":228,"column":2}},"32":{"start":{"line":148,"column":8},"end":{"line":154,"column":10}},"33":{"start":{"line":166,"column":8},"end":{"line":181,"column":9}},"34":{"start":{"line":167,"column":12},"end":{"line":180,"column":13}},"35":{"start":{"line":170,"column":16},"end":{"line":179,"column":19}},"36":{"start":{"line":183,"column":8},"end":{"line":226,"column":10}},"37":{"start":{"line":187,"column":16},"end":{"line":198,"column":18}},"38":{"start":{"line":203,"column":16},"end":{"line":203,"column":42}},"39":{"start":{"line":208,"column":16},"end":{"line":220,"column":17}},"40":{"start":{"line":209,"column":20},"end":{"line":209,"column":46}},"41":{"start":{"line":211,"column":20},"end":{"line":219,"column":21}},"42":{"start":{"line":212,"column":24},"end":{"line":218,"column":27}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":11},"end":{"line":47,"column":18}},{"start":{"line":47,"column":22},"end":{"line":47,"column":26}}]},"3":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":40}},{"start":{"line":61,"column":8},"end":{"line":61,"column":71}}]},"4":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":28},"end":{"line":61,"column":64}},{"start":{"line":61,"column":68},"end":{"line":61,"column":70}}]},"5":{"line":77,"type":"switch","locations":[{"start":{"line":83,"column":12},"end":{"line":83,"column":37}},{"start":{"line":84,"column":12},"end":{"line":86,"column":22}},{"start":{"line":94,"column":12},"end":{"line":102,"column":13}},{"start":{"line":107,"column":12},"end":{"line":120,"column":29}},{"start":{"line":123,"column":12},"end":{"line":124,"column":29}}]},"6":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":16},"end":{"line":97,"column":16}},{"start":{"line":97,"column":16},"end":{"line":97,"column":16}}]},"7":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":20},"end":{"line":97,"column":33}},{"start":{"line":97,"column":37},"end":{"line":97,"column":61}}]},"8":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":16}},{"start":{"line":108,"column":16},"end":{"line":108,"column":16}}]},"9":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":24},"end":{"line":110,"column":52}},{"start":{"line":111,"column":24},"end":{"line":111,"column":52}}]},"10":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":16},"end":{"line":114,"column":16}},{"start":{"line":114,"column":16},"end":{"line":114,"column":16}}]},"11":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":24},"end":{"line":116,"column":52}},{"start":{"line":117,"column":24},"end":{"line":117,"column":52}}]},"12":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":12},"end":{"line":167,"column":12}},{"start":{"line":167,"column":12},"end":{"line":167,"column":12}}]},"13":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":16},"end":{"line":167,"column":36}},{"start":{"line":168,"column":16},"end":{"line":168,"column":67}}]},"14":{"line":173,"type":"cond-expr","locations":[{"start":{"line":174,"column":26},"end":{"line":174,"column":78}},{"start":{"line":175,"column":26},"end":{"line":175,"column":67}}]},"15":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":24},"end":{"line":192,"column":56}},{"start":{"line":193,"column":24},"end":{"line":193,"column":59}},{"start":{"line":194,"column":24},"end":{"line":194,"column":53}},{"start":{"line":195,"column":24},"end":{"line":195,"column":35}},{"start":{"line":196,"column":24},"end":{"line":196,"column":39}}]},"16":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":16},"end":{"line":208,"column":16}},{"start":{"line":208,"column":16},"end":{"line":208,"column":16}}]},"17":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":20},"end":{"line":211,"column":20}},{"start":{"line":211,"column":20},"end":{"line":211,"column":20}}]}},"code":["/**"," * @fileoverview Rule to enforce return statements in callbacks of array's methods"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const TARGET_NODE_TYPE = /^(?:Arrow)?FunctionExpression$/;","const TARGET_METHODS = /^(?:every|filter|find(?:Index)?|map|reduce(?:Right)?|some|sort)$/;","","/**"," * Checks a given code path segment is reachable."," *"," * @param {CodePathSegment} segment - A segment to check."," * @returns {boolean} `true` if the segment is reachable."," */","function isReachable(segment) {","    return segment.reachable;","}","","/**"," * Gets a readable location."," *"," * - FunctionExpression -> the function name or `function` keyword."," * - ArrowFunctionExpression -> `=>` token."," *"," * @param {ASTNode} node - A function node to get."," * @param {SourceCode} sourceCode - A source code to get tokens."," * @returns {ASTNode|Token} The node or the token of a location."," */","function getLocation(node, sourceCode) {","    if (node.type === \"ArrowFunctionExpression\") {","        return sourceCode.getTokenBefore(node.body);","    }","    return node.id || node;","}","","/**"," * Checks a given node is a MemberExpression node which has the specified name's"," * property."," *"," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node is a MemberExpression node which has"," *      the specified name's property"," */","function isTargetMethod(node) {","    return (","        node.type === \"MemberExpression\" &&","        TARGET_METHODS.test(astUtils.getStaticPropertyName(node) || \"\")","    );","}","","/**"," * Checks whether or not a given node is a function expression which is the"," * callback of an array method."," *"," * @param {ASTNode} node - A node to check. This is one of"," *      FunctionExpression or ArrowFunctionExpression."," * @returns {boolean} `true` if the node is the callback of an array method."," */","function isCallbackOfArrayMethod(node) {","    while (node) {","        const parent = node.parent;","","        switch (parent.type) {","","            /*","             * Looks up the destination. e.g.,","             * foo.every(nativeFoo || function foo() { ... });","             */","            case \"LogicalExpression\":","            case \"ConditionalExpression\":","                node = parent;","                break;","","            // If the upper function is IIFE, checks the destination of the return value.","            // e.g.","            //   foo.every((function() {","            //     // setup...","            //     return function callback() { ... };","            //   })());","            case \"ReturnStatement\": {","                const func = astUtils.getUpperFunction(parent);","","                if (func === null || !astUtils.isCallee(func)) {","                    return false;","                }","                node = func.parent;","                break;","            }","","            // e.g.","            //   Array.from([], function() {});","            //   list.every(function() {});","            case \"CallExpression\":","                if (astUtils.isArrayFromMethod(parent.callee)) {","                    return (","                        parent.arguments.length >= 2 &&","                        parent.arguments[1] === node","                    );","                }","                if (isTargetMethod(parent.callee)) {","                    return (","                        parent.arguments.length >= 1 &&","                        parent.arguments[0] === node","                    );","                }","                return false;","","            // Otherwise this node is not target.","            default:","                return false;","        }","    }","","    /* istanbul ignore next: unreachable */","    return false;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce `return` statements in callbacks of array methods\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        let funcInfo = {","            upper: null,","            codePath: null,","            hasReturn: false,","            shouldCheck: false,","            node: null","        };","","        /**","         * Checks whether or not the last code path segment is reachable.","         * Then reports this function if the segment is reachable.","         *","         * If the last code path segment is reachable, there are paths which are not","         * returned or thrown.","         *","         * @param {ASTNode} node - A node to check.","         * @returns {void}","         */","        function checkLastSegment(node) {","            if (funcInfo.shouldCheck &&","                funcInfo.codePath.currentSegments.some(isReachable)","            ) {","                context.report({","                    node,","                    loc: getLocation(node, context.getSourceCode()).loc.start,","                    message: funcInfo.hasReturn","                        ? \"Expected to return a value at the end of {{name}}.\"","                        : \"Expected to return a value in {{name}}.\",","                    data: {","                        name: astUtils.getFunctionNameWithKind(funcInfo.node)","                    }","                });","            }","        }","","        return {","","            // Stacks this function's information.","            onCodePathStart(codePath, node) {","                funcInfo = {","                    upper: funcInfo,","                    codePath,","                    hasReturn: false,","                    shouldCheck:","                        TARGET_NODE_TYPE.test(node.type) &&","                        node.body.type === \"BlockStatement\" &&","                        isCallbackOfArrayMethod(node) &&","                        !node.async &&","                        !node.generator,","                    node","                };","            },","","            // Pops this function's information.","            onCodePathEnd() {","                funcInfo = funcInfo.upper;","            },","","            // Checks the return statement is valid.","            ReturnStatement(node) {","                if (funcInfo.shouldCheck) {","                    funcInfo.hasReturn = true;","","                    if (!node.argument) {","                        context.report({","                            node,","                            message: \"{{name}} expected a return value.\",","                            data: {","                                name: lodash.upperFirst(astUtils.getFunctionNameWithKind(funcInfo.node))","                            }","                        });","                    }","                }","            },","","            // Reports a given function if the last path is reachable.","            \"FunctionExpression:exit\": checkLastSegment,","            \"ArrowFunctionExpression:exit\": checkLastSegment","        };","    }","};",""],"l":{"12":1,"14":1,"20":1,"21":1,"29":1,"30":0,"43":1,"44":0,"45":0,"47":0,"58":1,"59":0,"73":1,"74":0,"75":0,"77":0,"85":0,"86":0,"95":0,"97":0,"98":0,"100":0,"101":0,"108":0,"109":0,"114":0,"115":0,"120":0,"124":0,"129":1,"136":1,"148":0,"166":1,"167":0,"170":0,"183":0,"187":0,"203":0,"208":0,"209":0,"211":0,"212":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/arrow-body-style.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/arrow-body-style.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0,0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":60,"loc":{"start":{"line":60,"column":10},"end":{"line":60,"column":20}}},"2":{"name":"validate","line":73,"loc":{"start":{"line":73,"column":8},"end":{"line":73,"column":32}}},"3":{"name":"(anonymous_3)","line":93,"loc":{"start":{"line":93,"column":27},"end":{"line":93,"column":35}}},"4":{"name":"(anonymous_4)","line":144,"loc":{"start":{"line":144,"column":27},"end":{"line":144,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":162,"column":2}},"3":{"start":{"line":61,"column":8},"end":{"line":61,"column":40}},"4":{"start":{"line":62,"column":8},"end":{"line":62,"column":47}},"5":{"start":{"line":63,"column":8},"end":{"line":63,"column":67}},"6":{"start":{"line":64,"column":8},"end":{"line":64,"column":45}},"7":{"start":{"line":65,"column":8},"end":{"line":65,"column":101}},"8":{"start":{"line":66,"column":8},"end":{"line":66,"column":51}},"9":{"start":{"line":73,"column":8},"end":{"line":156,"column":9}},"10":{"start":{"line":74,"column":12},"end":{"line":74,"column":40}},"11":{"start":{"line":76,"column":12},"end":{"line":155,"column":13}},"12":{"start":{"line":77,"column":16},"end":{"line":77,"column":49}},"13":{"start":{"line":79,"column":16},"end":{"line":81,"column":17}},"14":{"start":{"line":80,"column":20},"end":{"line":80,"column":27}},"15":{"start":{"line":83,"column":16},"end":{"line":86,"column":17}},"16":{"start":{"line":85,"column":20},"end":{"line":85,"column":27}},"17":{"start":{"line":88,"column":16},"end":{"line":137,"column":17}},"18":{"start":{"line":89,"column":20},"end":{"line":136,"column":23}},"19":{"start":{"line":94,"column":28},"end":{"line":96,"column":29}},"20":{"start":{"line":95,"column":32},"end":{"line":95,"column":44}},"21":{"start":{"line":98,"column":28},"end":{"line":98,"column":68}},"22":{"start":{"line":99,"column":28},"end":{"line":99,"column":89}},"23":{"start":{"line":100,"column":28},"end":{"line":100,"column":92}},"24":{"start":{"line":101,"column":28},"end":{"line":101,"column":87}},"25":{"start":{"line":103,"column":28},"end":{"line":110,"column":29}},"26":{"start":{"line":109,"column":32},"end":{"line":109,"column":91}},"27":{"start":{"line":112,"column":28},"end":{"line":112,"column":92}},"28":{"start":{"line":114,"column":28},"end":{"line":118,"column":29}},"29":{"start":{"line":117,"column":32},"end":{"line":117,"column":44}},"30":{"start":{"line":120,"column":28},"end":{"line":120,"column":118}},"31":{"start":{"line":121,"column":28},"end":{"line":121,"column":129}},"32":{"start":{"line":122,"column":28},"end":{"line":122,"column":123}},"33":{"start":{"line":123,"column":28},"end":{"line":123,"column":147}},"34":{"start":{"line":124,"column":28},"end":{"line":124,"column":120}},"35":{"start":{"line":125,"column":28},"end":{"line":125,"column":125}},"36":{"start":{"line":131,"column":28},"end":{"line":134,"column":30}},"37":{"start":{"line":139,"column":16},"end":{"line":154,"column":17}},"38":{"start":{"line":140,"column":20},"end":{"line":153,"column":23}},"39":{"start":{"line":145,"column":28},"end":{"line":145,"column":163}},"40":{"start":{"line":146,"column":28},"end":{"line":146,"column":97}},"41":{"start":{"line":148,"column":28},"end":{"line":151,"column":30}},"42":{"start":{"line":158,"column":8},"end":{"line":160,"column":10}}},"branchMap":{"1":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":25},"end":{"line":63,"column":36}},{"start":{"line":63,"column":40},"end":{"line":63,"column":66}}]},"2":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":46},"end":{"line":65,"column":56}},{"start":{"line":65,"column":60},"end":{"line":65,"column":100}}]},"3":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":12}},{"start":{"line":76,"column":12},"end":{"line":76,"column":12}}]},"4":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":16}},{"start":{"line":79,"column":16},"end":{"line":79,"column":16}}]},"5":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":20},"end":{"line":79,"column":42}},{"start":{"line":79,"column":46},"end":{"line":79,"column":52}}]},"6":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":16},"end":{"line":83,"column":16}},{"start":{"line":83,"column":16},"end":{"line":83,"column":16}}]},"7":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":20},"end":{"line":83,"column":28}},{"start":{"line":83,"column":32},"end":{"line":83,"column":61}},{"start":{"line":83,"column":65},"end":{"line":83,"column":104}},{"start":{"line":84,"column":20},"end":{"line":84,"column":41}},{"start":{"line":84,"column":45},"end":{"line":84,"column":94}}]},"8":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":16},"end":{"line":88,"column":16}},{"start":{"line":88,"column":16},"end":{"line":88,"column":16}}]},"9":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":20},"end":{"line":88,"column":25}},{"start":{"line":88,"column":29},"end":{"line":88,"column":37}},{"start":{"line":88,"column":41},"end":{"line":88,"column":80}}]},"10":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":28},"end":{"line":94,"column":28}},{"start":{"line":94,"column":28},"end":{"line":94,"column":28}}]},"11":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":32},"end":{"line":94,"column":54}},{"start":{"line":94,"column":58},"end":{"line":94,"column":97}},{"start":{"line":94,"column":101},"end":{"line":94,"column":123}}]},"12":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":28},"end":{"line":103,"column":28}},{"start":{"line":103,"column":28},"end":{"line":103,"column":28}}]},"13":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":28},"end":{"line":114,"column":28}},{"start":{"line":114,"column":28},"end":{"line":114,"column":28}}]},"14":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":32},"end":{"line":114,"column":51}},{"start":{"line":114,"column":55},"end":{"line":114,"column":96}},{"start":{"line":114,"column":100},"end":{"line":114,"column":143}}]},"15":{"line":123,"type":"cond-expr","locations":[{"start":{"line":123,"column":100},"end":{"line":123,"column":125}},{"start":{"line":123,"column":128},"end":{"line":123,"column":146}}]},"16":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":16},"end":{"line":139,"column":16}},{"start":{"line":139,"column":16},"end":{"line":139,"column":16}}]},"17":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":20},"end":{"line":139,"column":26}},{"start":{"line":139,"column":31},"end":{"line":139,"column":39}},{"start":{"line":139,"column":43},"end":{"line":139,"column":72}},{"start":{"line":139,"column":76},"end":{"line":139,"column":113}}]}},"code":["/**"," * @fileoverview Rule to require braces in arrow function body."," * @author Alberto Rodríguez"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require braces around arrow function bodies\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: {","            anyOf: [","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\", \"never\"]","                        }","                    ],","                    minItems: 0,","                    maxItems: 1","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"as-needed\"]","                        },","                        {","                            type: \"object\",","                            properties: {","                                requireReturnForObjectLiteral: { type: \"boolean\" }","                            },","                            additionalProperties: false","                        }","                    ],","                    minItems: 0,","                    maxItems: 2","                }","            ]","        },","","        fixable: \"code\"","    },","","    create(context) {","        const options = context.options;","        const always = options[0] === \"always\";","        const asNeeded = !options[0] || options[0] === \"as-needed\";","        const never = options[0] === \"never\";","        const requireReturnForObjectLiteral = options[1] && options[1].requireReturnForObjectLiteral;","        const sourceCode = context.getSourceCode();","","        /**","         * Determines whether a arrow function body needs braces","         * @param {ASTNode} node The arrow function node.","         * @returns {void}","         */","        function validate(node) {","            const arrowBody = node.body;","","            if (arrowBody.type === \"BlockStatement\") {","                const blockBody = arrowBody.body;","","                if (blockBody.length !== 1 && !never) {","                    return;","                }","","                if (asNeeded && requireReturnForObjectLiteral && blockBody[0].type === \"ReturnStatement\" &&","                    blockBody[0].argument && blockBody[0].argument.type === \"ObjectExpression\") {","                    return;","                }","","                if (never || asNeeded && blockBody[0].type === \"ReturnStatement\") {","                    context.report({","                        node,","                        loc: arrowBody.loc.start,","                        message: \"Unexpected block statement surrounding arrow body.\",","                        fix(fixer) {","                            if (blockBody.length !== 1 || blockBody[0].type !== \"ReturnStatement\" || !blockBody[0].argument) {","                                return null;","                            }","","                            const sourceText = sourceCode.getText();","                            const returnKeyword = sourceCode.getFirstToken(blockBody[0]);","                            const firstValueToken = sourceCode.getTokenAfter(returnKeyword);","                            let lastValueToken = sourceCode.getLastToken(blockBody[0]);","","                            if (astUtils.isSemicolonToken(lastValueToken)) {","","                                /* The last token of the returned value is the last token of the ReturnExpression (if","                                 * the ReturnExpression has no semicolon), or the second-to-last token (if the ReturnExpression","                                 * has a semicolon).","                                 */","                                lastValueToken = sourceCode.getTokenBefore(lastValueToken);","                            }","","                            const tokenAfterArrowBody = sourceCode.getTokenAfter(arrowBody);","","                            if (tokenAfterArrowBody && tokenAfterArrowBody.type === \"Punctuator\" && /^[([/`+-]/.test(tokenAfterArrowBody.value)) {","","                                // Don't do a fix if the next token would cause ASI issues when preceded by the returned value.","                                return null;","                            }","","                            const textBeforeReturn = sourceText.slice(arrowBody.range[0] + 1, returnKeyword.range[0]);","                            const textBetweenReturnAndValue = sourceText.slice(returnKeyword.range[1], firstValueToken.range[0]);","                            const rawReturnValueText = sourceText.slice(firstValueToken.range[0], lastValueToken.range[1]);","                            const returnValueText = astUtils.isOpeningBraceToken(firstValueToken) ? `(${rawReturnValueText})` : rawReturnValueText;","                            const textAfterValue = sourceText.slice(lastValueToken.range[1], blockBody[0].range[1] - 1);","                            const textAfterReturnStatement = sourceText.slice(blockBody[0].range[1], arrowBody.range[1] - 1);","","                            /*","                             * For fixes that only contain spaces around the return value, remove the extra spaces.","                             * This avoids ugly fixes that end up with extra spaces after the arrow, e.g. `() =>   0 ;`","                             */","                            return fixer.replaceText(","                                arrowBody,","                                (textBeforeReturn + textBetweenReturnAndValue).replace(/^\\s*$/, \"\") + returnValueText + (textAfterValue + textAfterReturnStatement).replace(/^\\s*$/, \"\")","                            );","                        }","                    });","                }","            } else {","                if (always || (asNeeded && requireReturnForObjectLiteral && arrowBody.type === \"ObjectExpression\")) {","                    context.report({","                        node,","                        loc: arrowBody.loc.start,","                        message: \"Expected block statement surrounding arrow body.\",","                        fix(fixer) {","                            const lastTokenBeforeBody = sourceCode.getLastTokenBetween(sourceCode.getFirstToken(node), arrowBody, astUtils.isNotOpeningParenToken);","                            const firstBodyToken = sourceCode.getTokenAfter(lastTokenBeforeBody);","","                            return fixer.replaceTextRange(","                                [firstBodyToken.range[0], node.range[1]],","                                `{return ${sourceCode.getText().slice(firstBodyToken.range[0], node.range[1])}}`","                            );","                        }","                    });","                }","            }","        }","","        return {","            ArrowFunctionExpression: validate","        };","    }","};",""],"l":{"11":1,"17":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"73":1,"74":0,"76":0,"77":0,"79":0,"80":0,"83":0,"85":0,"88":0,"89":0,"94":0,"95":0,"98":0,"99":0,"100":0,"101":0,"103":0,"109":0,"112":0,"114":0,"117":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"131":0,"139":0,"140":0,"145":0,"146":0,"148":0,"158":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/arrow-parens.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/arrow-parens.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":20}}},"2":{"name":"parens","line":59,"loc":{"start":{"line":59,"column":8},"end":{"line":59,"column":30}}},"3":{"name":"(anonymous_3)","line":75,"loc":{"start":{"line":75,"column":27},"end":{"line":75,"column":35}}},"4":{"name":"(anonymous_4)","line":97,"loc":{"start":{"line":97,"column":27},"end":{"line":97,"column":35}}},"5":{"name":"(anonymous_5)","line":116,"loc":{"start":{"line":116,"column":27},"end":{"line":116,"column":35}}},"6":{"name":"(anonymous_6)","line":138,"loc":{"start":{"line":138,"column":27},"end":{"line":138,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":150,"column":2}},"3":{"start":{"line":44,"column":8},"end":{"line":44,"column":79}},"4":{"start":{"line":45,"column":8},"end":{"line":45,"column":90}},"5":{"start":{"line":46,"column":8},"end":{"line":46,"column":60}},"6":{"start":{"line":47,"column":8},"end":{"line":47,"column":135}},"7":{"start":{"line":48,"column":8},"end":{"line":48,"column":138}},"8":{"start":{"line":49,"column":8},"end":{"line":49,"column":118}},"9":{"start":{"line":51,"column":8},"end":{"line":51,"column":51}},"10":{"start":{"line":59,"column":8},"end":{"line":144,"column":9}},"11":{"start":{"line":60,"column":12},"end":{"line":60,"column":77}},"12":{"start":{"line":63,"column":12},"end":{"line":87,"column":13}},"13":{"start":{"line":71,"column":16},"end":{"line":85,"column":17}},"14":{"start":{"line":72,"column":20},"end":{"line":84,"column":23}},"15":{"start":{"line":76,"column":28},"end":{"line":76,"column":76}},"16":{"start":{"line":77,"column":28},"end":{"line":77,"column":88}},"17":{"start":{"line":79,"column":28},"end":{"line":82,"column":49}},"18":{"start":{"line":86,"column":16},"end":{"line":86,"column":23}},"19":{"start":{"line":89,"column":12},"end":{"line":103,"column":13}},"20":{"start":{"line":93,"column":16},"end":{"line":101,"column":17}},"21":{"start":{"line":94,"column":20},"end":{"line":100,"column":23}},"22":{"start":{"line":98,"column":28},"end":{"line":98,"column":80}},"23":{"start":{"line":102,"column":16},"end":{"line":102,"column":23}},"24":{"start":{"line":106,"column":12},"end":{"line":128,"column":13}},"25":{"start":{"line":112,"column":16},"end":{"line":126,"column":17}},"26":{"start":{"line":113,"column":20},"end":{"line":125,"column":23}},"27":{"start":{"line":117,"column":28},"end":{"line":117,"column":76}},"28":{"start":{"line":118,"column":28},"end":{"line":118,"column":88}},"29":{"start":{"line":120,"column":28},"end":{"line":123,"column":49}},"30":{"start":{"line":127,"column":16},"end":{"line":127,"column":23}},"31":{"start":{"line":130,"column":12},"end":{"line":143,"column":13}},"32":{"start":{"line":131,"column":16},"end":{"line":131,"column":62}},"33":{"start":{"line":134,"column":16},"end":{"line":142,"column":17}},"34":{"start":{"line":135,"column":20},"end":{"line":141,"column":23}},"35":{"start":{"line":139,"column":28},"end":{"line":139,"column":80}},"36":{"start":{"line":146,"column":8},"end":{"line":148,"column":10}}},"branchMap":{"1":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":36},"end":{"line":49,"column":44}},{"start":{"line":49,"column":48},"end":{"line":49,"column":66}},{"start":{"line":49,"column":70},"end":{"line":49,"column":117}}]},"2":{"line":60,"type":"cond-expr","locations":[{"start":{"line":60,"column":70},"end":{"line":60,"column":71}},{"start":{"line":60,"column":74},"end":{"line":60,"column":75}}]},"3":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":63,"column":12}},{"start":{"line":63,"column":12},"end":{"line":63,"column":12}}]},"4":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":16},"end":{"line":64,"column":35}},{"start":{"line":65,"column":16},"end":{"line":65,"column":40}},{"start":{"line":66,"column":16},"end":{"line":66,"column":52}},{"start":{"line":67,"column":16},"end":{"line":67,"column":46}},{"start":{"line":68,"column":16},"end":{"line":68,"column":51}},{"start":{"line":69,"column":16},"end":{"line":69,"column":32}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":16},"end":{"line":71,"column":16}},{"start":{"line":71,"column":16},"end":{"line":71,"column":16}}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":89,"column":12}},{"start":{"line":89,"column":12},"end":{"line":89,"column":12}}]},"7":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":16},"end":{"line":90,"column":35}},{"start":{"line":91,"column":16},"end":{"line":91,"column":51}}]},"8":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":16}},{"start":{"line":93,"column":16},"end":{"line":93,"column":16}}]},"9":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":12},"end":{"line":106,"column":12}},{"start":{"line":106,"column":12},"end":{"line":106,"column":12}}]},"10":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":16},"end":{"line":106,"column":24}},{"start":{"line":107,"column":16},"end":{"line":107,"column":40}},{"start":{"line":108,"column":16},"end":{"line":108,"column":52}},{"start":{"line":109,"column":16},"end":{"line":109,"column":46}},{"start":{"line":110,"column":16},"end":{"line":110,"column":32}}]},"11":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":16},"end":{"line":112,"column":16}},{"start":{"line":112,"column":16},"end":{"line":112,"column":16}}]},"12":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":130,"column":12}},{"start":{"line":130,"column":12},"end":{"line":130,"column":12}}]},"13":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":16}},{"start":{"line":134,"column":16},"end":{"line":134,"column":16}}]}},"code":["/**"," * @fileoverview Rule to require parens in arrow function arguments."," * @author Jxck"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require parentheses around arrow function arguments\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        fixable: \"code\",","","        schema: [","            {","                enum: [\"always\", \"as-needed\"]","            },","            {","                type: \"object\",","                properties: {","                    requireForBlockBody: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const message = \"Expected parentheses around arrow function argument.\";","        const asNeededMessage = \"Unexpected parentheses around single function argument.\";","        const asNeeded = context.options[0] === \"as-needed\";","        const requireForBlockBodyMessage = \"Unexpected parentheses around single function argument having a body with no curly braces\";","        const requireForBlockBodyNoParensMessage = \"Expected parentheses around arrow function argument having a body with curly braces.\";","        const requireForBlockBody = asNeeded && context.options[1] && context.options[1].requireForBlockBody === true;","","        const sourceCode = context.getSourceCode();","","","        /**","         * Determines whether a arrow function argument end with `)`","         * @param {ASTNode} node The arrow function node.","         * @returns {void}","         */","        function parens(node) {","            const token = sourceCode.getFirstToken(node, node.async ? 1 : 0);","","            // \"as-needed\", { \"requireForBlockBody\": true }: x => x","            if (","                requireForBlockBody &&","                node.params.length === 1 &&","                node.params[0].type === \"Identifier\" &&","                !node.params[0].typeAnnotation &&","                node.body.type !== \"BlockStatement\" &&","                !node.returnType","            ) {","                if (astUtils.isOpeningParenToken(token)) {","                    context.report({","                        node,","                        message: requireForBlockBodyMessage,","                        fix(fixer) {","                            const paramToken = context.getTokenAfter(token);","                            const closingParenToken = context.getTokenAfter(paramToken);","","                            return fixer.replaceTextRange([","                                token.range[0],","                                closingParenToken.range[1]","                            ], paramToken.value);","                        }","                    });","                }","                return;","            }","","            if (","                requireForBlockBody &&","                node.body.type === \"BlockStatement\"","            ) {","                if (!astUtils.isOpeningParenToken(token)) {","                    context.report({","                        node,","                        message: requireForBlockBodyNoParensMessage,","                        fix(fixer) {","                            return fixer.replaceText(token, `(${token.value})`);","                        }","                    });","                }","                return;","            }","","            // \"as-needed\": x => x","            if (asNeeded &&","                node.params.length === 1 &&","                node.params[0].type === \"Identifier\" &&","                !node.params[0].typeAnnotation &&","                !node.returnType","            ) {","                if (astUtils.isOpeningParenToken(token)) {","                    context.report({","                        node,","                        message: asNeededMessage,","                        fix(fixer) {","                            const paramToken = context.getTokenAfter(token);","                            const closingParenToken = context.getTokenAfter(paramToken);","","                            return fixer.replaceTextRange([","                                token.range[0],","                                closingParenToken.range[1]","                            ], paramToken.value);","                        }","                    });","                }","                return;","            }","","            if (token.type === \"Identifier\") {","                const after = sourceCode.getTokenAfter(token);","","                // (x) => x","                if (after.value !== \")\") {","                    context.report({","                        node,","                        message,","                        fix(fixer) {","                            return fixer.replaceText(token, `(${token.value})`);","                        }","                    });","                }","            }","        }","","        return {","            ArrowFunctionExpression: parens","        };","    }","};",""],"l":{"11":1,"17":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"51":0,"59":1,"60":0,"63":0,"71":0,"72":0,"76":0,"77":0,"79":0,"86":0,"89":0,"93":0,"94":0,"98":0,"102":0,"106":0,"112":0,"113":0,"117":0,"118":0,"120":0,"127":0,"130":0,"131":0,"134":0,"135":0,"139":0,"146":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/arrow-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/arrow-spacing.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":20}}},"2":{"name":"getTokens","line":59,"loc":{"start":{"line":59,"column":8},"end":{"line":59,"column":33}}},"3":{"name":"countSpaces","line":74,"loc":{"start":{"line":74,"column":8},"end":{"line":74,"column":37}}},"4":{"name":"spaces","line":88,"loc":{"start":{"line":88,"column":8},"end":{"line":88,"column":30}}},"5":{"name":"(anonymous_5)","line":99,"loc":{"start":{"line":99,"column":27},"end":{"line":99,"column":35}}},"6":{"name":"(anonymous_6)","line":111,"loc":{"start":{"line":111,"column":27},"end":{"line":111,"column":35}}},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":35}}},"8":{"name":"(anonymous_8)","line":137,"loc":{"start":{"line":137,"column":27},"end":{"line":137,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":149,"column":2}},"3":{"start":{"line":46,"column":8},"end":{"line":47,"column":46}},"4":{"start":{"line":49,"column":8},"end":{"line":49,"column":46}},"5":{"start":{"line":50,"column":8},"end":{"line":50,"column":44}},"6":{"start":{"line":52,"column":8},"end":{"line":52,"column":51}},"7":{"start":{"line":59,"column":8},"end":{"line":67,"column":9}},"8":{"start":{"line":60,"column":12},"end":{"line":60,"column":86}},"9":{"start":{"line":62,"column":12},"end":{"line":66,"column":14}},"10":{"start":{"line":74,"column":8},"end":{"line":79,"column":9}},"11":{"start":{"line":75,"column":12},"end":{"line":75,"column":74}},"12":{"start":{"line":76,"column":12},"end":{"line":76,"column":72}},"13":{"start":{"line":78,"column":12},"end":{"line":78,"column":37}},"14":{"start":{"line":88,"column":8},"end":{"line":143,"column":9}},"15":{"start":{"line":89,"column":12},"end":{"line":89,"column":43}},"16":{"start":{"line":90,"column":12},"end":{"line":90,"column":51}},"17":{"start":{"line":92,"column":12},"end":{"line":116,"column":13}},"18":{"start":{"line":95,"column":16},"end":{"line":103,"column":17}},"19":{"start":{"line":96,"column":20},"end":{"line":102,"column":23}},"20":{"start":{"line":100,"column":28},"end":{"line":100,"column":77}},"21":{"start":{"line":107,"column":16},"end":{"line":115,"column":17}},"22":{"start":{"line":108,"column":20},"end":{"line":114,"column":23}},"23":{"start":{"line":112,"column":28},"end":{"line":112,"column":102}},"24":{"start":{"line":118,"column":12},"end":{"line":142,"column":13}},"25":{"start":{"line":121,"column":16},"end":{"line":129,"column":17}},"26":{"start":{"line":122,"column":20},"end":{"line":128,"column":23}},"27":{"start":{"line":126,"column":28},"end":{"line":126,"column":76}},"28":{"start":{"line":133,"column":16},"end":{"line":141,"column":17}},"29":{"start":{"line":134,"column":20},"end":{"line":140,"column":23}},"30":{"start":{"line":138,"column":28},"end":{"line":138,"column":101}},"31":{"start":{"line":145,"column":8},"end":{"line":147,"column":10}}},"branchMap":{"1":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":21},"end":{"line":47,"column":39}},{"start":{"line":47,"column":43},"end":{"line":47,"column":45}}]},"2":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":12},"end":{"line":92,"column":12}},{"start":{"line":92,"column":12},"end":{"line":92,"column":12}}]},"3":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":16},"end":{"line":95,"column":16}},{"start":{"line":95,"column":16},"end":{"line":95,"column":16}}]},"4":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":16},"end":{"line":107,"column":16}},{"start":{"line":107,"column":16},"end":{"line":107,"column":16}}]},"5":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":12},"end":{"line":118,"column":12}},{"start":{"line":118,"column":12},"end":{"line":118,"column":12}}]},"6":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":16},"end":{"line":121,"column":16}},{"start":{"line":121,"column":16},"end":{"line":121,"column":16}}]},"7":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":16},"end":{"line":133,"column":16}},{"start":{"line":133,"column":16},"end":{"line":133,"column":16}}]}},"code":["/**"," * @fileoverview Rule to define spacing before/after arrow function's arrow."," * @author Jxck"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing before and after the arrow in arrow functions\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    before: {","                        type: \"boolean\"","                    },","                    after: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        // merge rules with default","        const rule = { before: true, after: true },","            option = context.options[0] || {};","","        rule.before = option.before !== false;","        rule.after = option.after !== false;","","        const sourceCode = context.getSourceCode();","","        /**","         * Get tokens of arrow(`=>`) and before/after arrow.","         * @param {ASTNode} node The arrow function node.","         * @returns {Object} Tokens of arrow and before/after arrow.","         */","        function getTokens(node) {","            const arrow = sourceCode.getTokenBefore(node.body, astUtils.isArrowToken);","","            return {","                before: sourceCode.getTokenBefore(arrow),","                arrow,","                after: sourceCode.getTokenAfter(arrow)","            };","        }","","        /**","         * Count spaces before/after arrow(`=>`) token.","         * @param {Object} tokens Tokens before/after arrow.","         * @returns {Object} count of space before/after arrow.","         */","        function countSpaces(tokens) {","            const before = tokens.arrow.range[0] - tokens.before.range[1];","            const after = tokens.after.range[0] - tokens.arrow.range[1];","","            return { before, after };","        }","","        /**","         * Determines whether space(s) before after arrow(`=>`) is satisfy rule.","         * if before/after value is `true`, there should be space(s).","         * if before/after value is `false`, there should be no space.","         * @param {ASTNode} node The arrow function node.","         * @returns {void}","         */","        function spaces(node) {","            const tokens = getTokens(node);","            const countSpace = countSpaces(tokens);","","            if (rule.before) {","","                // should be space(s) before arrow","                if (countSpace.before === 0) {","                    context.report({","                        node: tokens.before,","                        message: \"Missing space before =>.\",","                        fix(fixer) {","                            return fixer.insertTextBefore(tokens.arrow, \" \");","                        }","                    });","                }","            } else {","","                // should be no space before arrow","                if (countSpace.before > 0) {","                    context.report({","                        node: tokens.before,","                        message: \"Unexpected space before =>.\",","                        fix(fixer) {","                            return fixer.removeRange([tokens.before.range[1], tokens.arrow.range[0]]);","                        }","                    });","                }","            }","","            if (rule.after) {","","                // should be space(s) after arrow","                if (countSpace.after === 0) {","                    context.report({","                        node: tokens.after,","                        message: \"Missing space after =>.\",","                        fix(fixer) {","                            return fixer.insertTextAfter(tokens.arrow, \" \");","                        }","                    });","                }","            } else {","","                // should be no space after arrow","                if (countSpace.after > 0) {","                    context.report({","                        node: tokens.after,","                        message: \"Unexpected space after =>.\",","                        fix(fixer) {","                            return fixer.removeRange([tokens.arrow.range[1], tokens.after.range[0]]);","                        }","                    });","                }","            }","        }","","        return {","            ArrowFunctionExpression: spaces","        };","    }","};",""],"l":{"11":1,"17":1,"46":0,"49":0,"50":0,"52":0,"59":1,"60":0,"62":0,"74":1,"75":0,"76":0,"78":0,"88":1,"89":0,"90":0,"92":0,"95":0,"96":0,"100":0,"107":0,"108":0,"112":0,"118":0,"121":0,"122":0,"126":0,"133":0,"134":0,"138":0,"145":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/block-scoped-var.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/block-scoped-var.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":1,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"enterScope","line":30,"loc":{"start":{"line":30,"column":8},"end":{"line":30,"column":34}}},"3":{"name":"exitScope","line":38,"loc":{"start":{"line":38,"column":8},"end":{"line":38,"column":29}}},"4":{"name":"report","line":47,"loc":{"start":{"line":47,"column":8},"end":{"line":47,"column":35}}},"5":{"name":"checkForVariables","line":58,"loc":{"start":{"line":58,"column":8},"end":{"line":58,"column":41}}},"6":{"name":"isOutsideOfScope","line":72,"loc":{"start":{"line":72,"column":12},"end":{"line":72,"column":49}}},"7":{"name":"(anonymous_7)","line":92,"loc":{"start":{"line":92,"column":19},"end":{"line":92,"column":26}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":115,"column":2}},"2":{"start":{"line":23,"column":8},"end":{"line":23,"column":23}},"3":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"4":{"start":{"line":31,"column":12},"end":{"line":31,"column":35}},"5":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"6":{"start":{"line":39,"column":12},"end":{"line":39,"column":24}},"7":{"start":{"line":47,"column":8},"end":{"line":51,"column":9}},"8":{"start":{"line":48,"column":12},"end":{"line":48,"column":52}},"9":{"start":{"line":50,"column":12},"end":{"line":50,"column":138}},"10":{"start":{"line":58,"column":8},"end":{"line":89,"column":9}},"11":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"12":{"start":{"line":60,"column":16},"end":{"line":60,"column":23}},"13":{"start":{"line":64,"column":12},"end":{"line":64,"column":55}},"14":{"start":{"line":72,"column":12},"end":{"line":76,"column":13}},"15":{"start":{"line":73,"column":16},"end":{"line":73,"column":59}},"16":{"start":{"line":75,"column":16},"end":{"line":75,"column":80}},"17":{"start":{"line":79,"column":12},"end":{"line":79,"column":65}},"18":{"start":{"line":81,"column":12},"end":{"line":88,"column":13}},"19":{"start":{"line":84,"column":16},"end":{"line":87,"column":37}},"20":{"start":{"line":91,"column":8},"end":{"line":112,"column":10}},"21":{"start":{"line":93,"column":16},"end":{"line":93,"column":37}}},"branchMap":{"1":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":12}},{"start":{"line":59,"column":12},"end":{"line":59,"column":12}}]},"2":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":23},"end":{"line":75,"column":49}},{"start":{"line":75,"column":53},"end":{"line":75,"column":79}}]}},"code":["/**"," * @fileoverview Rule to check for \"block scoped\" variables by binding context"," * @author Matt DuVall <http://www.mattduvall.com>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce the use of variables within the scope they are defined\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        let stack = [];","","        /**","         * Makes a block scope.","         * @param {ASTNode} node - A node of a scope.","         * @returns {void}","         */","        function enterScope(node) {","            stack.push(node.range);","        }","","        /**","         * Pops the last block scope.","         * @returns {void}","         */","        function exitScope() {","            stack.pop();","        }","","        /**","         * Reports a given reference.","         * @param {escope.Reference} reference - A reference to report.","         * @returns {void}","         */","        function report(reference) {","            const identifier = reference.identifier;","","            context.report({ node: identifier, message: \"'{{name}}' used outside of binding context.\", data: { name: identifier.name } });","        }","","        /**","         * Finds and reports references which are outside of valid scopes.","         * @param {ASTNode} node - A node to get variables.","         * @returns {void}","         */","        function checkForVariables(node) {","            if (node.kind !== \"var\") {","                return;","            }","","            // Defines a predicate to check whether or not a given reference is outside of valid scope.","            const scopeRange = stack[stack.length - 1];","","            /**","             * Check if a reference is out of scope","             * @param {ASTNode} reference node to examine","             * @returns {boolean} True is its outside the scope","             * @private","             */","            function isOutsideOfScope(reference) {","                const idRange = reference.identifier.range;","","                return idRange[0] < scopeRange[0] || idRange[1] > scopeRange[1];","            }","","            // Gets declared variables, and checks its references.","            const variables = context.getDeclaredVariables(node);","","            for (let i = 0; i < variables.length; ++i) {","","                // Reports.","                variables[i]","                    .references","                    .filter(isOutsideOfScope)","                    .forEach(report);","            }","        }","","        return {","            Program(node) {","                stack = [node.range];","            },","","            // Manages scopes.","            BlockStatement: enterScope,","            \"BlockStatement:exit\": exitScope,","            ForStatement: enterScope,","            \"ForStatement:exit\": exitScope,","            ForInStatement: enterScope,","            \"ForInStatement:exit\": exitScope,","            ForOfStatement: enterScope,","            \"ForOfStatement:exit\": exitScope,","            SwitchStatement: enterScope,","            \"SwitchStatement:exit\": exitScope,","            CatchClause: enterScope,","            \"CatchClause:exit\": exitScope,","","            // Finds and reports references which are outside of valid scope.","            VariableDeclaration: checkForVariables","        };","","    }","};",""],"l":{"11":1,"23":0,"30":1,"31":0,"38":1,"39":0,"47":1,"48":0,"50":0,"58":1,"59":0,"60":0,"64":0,"72":1,"73":0,"75":0,"79":0,"81":0,"84":0,"91":0,"93":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/block-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/block-spacing.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":20}}},"2":{"name":"getOpenBrace","line":39,"loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":36}}},"3":{"name":"isValid","line":60,"loc":{"start":{"line":60,"column":8},"end":{"line":60,"column":38}}},"4":{"name":"checkSpacingInsideBraces","line":72,"loc":{"start":{"line":72,"column":8},"end":{"line":72,"column":48}}},"5":{"name":"(anonymous_5)","line":104,"loc":{"start":{"line":104,"column":23},"end":{"line":104,"column":31}}},"6":{"name":"(anonymous_6)","line":121,"loc":{"start":{"line":121,"column":23},"end":{"line":121,"column":31}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":37}},"2":{"start":{"line":14,"column":0},"end":{"line":137,"column":2}},"3":{"start":{"line":30,"column":8},"end":{"line":32,"column":49}},"4":{"start":{"line":39,"column":8},"end":{"line":47,"column":9}},"5":{"start":{"line":40,"column":12},"end":{"line":45,"column":13}},"6":{"start":{"line":41,"column":16},"end":{"line":43,"column":17}},"7":{"start":{"line":42,"column":20},"end":{"line":42,"column":68}},"8":{"start":{"line":44,"column":16},"end":{"line":44,"column":56}},"9":{"start":{"line":46,"column":12},"end":{"line":46,"column":50}},"10":{"start":{"line":60,"column":8},"end":{"line":65,"column":9}},"11":{"start":{"line":61,"column":12},"end":{"line":64,"column":14}},"12":{"start":{"line":72,"column":8},"end":{"line":130,"column":9}},"13":{"start":{"line":75,"column":12},"end":{"line":75,"column":49}},"14":{"start":{"line":76,"column":12},"end":{"line":76,"column":61}},"15":{"start":{"line":77,"column":12},"end":{"line":77,"column":94}},"16":{"start":{"line":78,"column":12},"end":{"line":78,"column":95}},"17":{"start":{"line":81,"column":12},"end":{"line":88,"column":13}},"18":{"start":{"line":87,"column":16},"end":{"line":87,"column":23}},"19":{"start":{"line":91,"column":12},"end":{"line":93,"column":13}},"20":{"start":{"line":92,"column":16},"end":{"line":92,"column":23}},"21":{"start":{"line":96,"column":12},"end":{"line":112,"column":13}},"22":{"start":{"line":97,"column":16},"end":{"line":111,"column":19}},"23":{"start":{"line":105,"column":24},"end":{"line":107,"column":25}},"24":{"start":{"line":106,"column":28},"end":{"line":106,"column":75}},"25":{"start":{"line":109,"column":24},"end":{"line":109,"column":92}},"26":{"start":{"line":113,"column":12},"end":{"line":129,"column":13}},"27":{"start":{"line":114,"column":16},"end":{"line":128,"column":19}},"28":{"start":{"line":122,"column":24},"end":{"line":124,"column":25}},"29":{"start":{"line":123,"column":28},"end":{"line":123,"column":73}},"30":{"start":{"line":126,"column":24},"end":{"line":126,"column":92}},"31":{"start":{"line":132,"column":8},"end":{"line":135,"column":10}}},"branchMap":{"1":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":31},"end":{"line":31,"column":49}},{"start":{"line":31,"column":52},"end":{"line":31,"column":73}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":12}},{"start":{"line":40,"column":12},"end":{"line":40,"column":12}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":16}},{"start":{"line":41,"column":16},"end":{"line":41,"column":16}}]},"4":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":16},"end":{"line":62,"column":52}},{"start":{"line":63,"column":16},"end":{"line":63,"column":71}}]},"5":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":12},"end":{"line":81,"column":12}},{"start":{"line":81,"column":12},"end":{"line":81,"column":12}}]},"6":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":16},"end":{"line":81,"column":47}},{"start":{"line":82,"column":16},"end":{"line":82,"column":39}},{"start":{"line":83,"column":16},"end":{"line":83,"column":48}},{"start":{"line":84,"column":16},"end":{"line":84,"column":40}},{"start":{"line":85,"column":16},"end":{"line":85,"column":41}}]},"7":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":12},"end":{"line":91,"column":12}},{"start":{"line":91,"column":12},"end":{"line":91,"column":12}}]},"8":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":16},"end":{"line":91,"column":23}},{"start":{"line":91,"column":27},"end":{"line":91,"column":53}}]},"9":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":12},"end":{"line":96,"column":12}},{"start":{"line":96,"column":12},"end":{"line":96,"column":12}}]},"10":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":24},"end":{"line":105,"column":24}},{"start":{"line":105,"column":24},"end":{"line":105,"column":24}}]},"11":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":12},"end":{"line":113,"column":12}},{"start":{"line":113,"column":12},"end":{"line":113,"column":12}}]},"12":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":24},"end":{"line":122,"column":24}},{"start":{"line":122,"column":24},"end":{"line":122,"column":24}}]}},"code":["/**"," * @fileoverview A rule to disallow or enforce spaces inside of single line blocks."," * @author Toru Nagashima"," */","","\"use strict\";","","const util = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing inside single-line blocks\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            { enum: [\"always\", \"never\"] }","        ]","    },","","    create(context) {","        const always = (context.options[0] !== \"never\"),","            message = always ? \"Requires a space\" : \"Unexpected space(s)\",","            sourceCode = context.getSourceCode();","","        /**","         * Gets the open brace token from a given node.","         * @param {ASTNode} node - A BlockStatement/SwitchStatement node to get.","         * @returns {Token} The token of the open brace.","         */","        function getOpenBrace(node) {","            if (node.type === \"SwitchStatement\") {","                if (node.cases.length > 0) {","                    return sourceCode.getTokenBefore(node.cases[0]);","                }","                return sourceCode.getLastToken(node, 1);","            }","            return sourceCode.getFirstToken(node);","        }","","        /**","         * Checks whether or not:","         *   - given tokens are on same line.","         *   - there is/isn't a space between given tokens.","         * @param {Token} left - A token to check.","         * @param {Token} right - The token which is next to `left`.","         * @returns {boolean}","         *    When the option is `\"always\"`, `true` if there are one or more spaces between given tokens.","         *    When the option is `\"never\"`, `true` if there are not any spaces between given tokens.","         *    If given tokens are not on same line, it's always `true`.","         */","        function isValid(left, right) {","            return (","                !util.isTokenOnSameLine(left, right) ||","                sourceCode.isSpaceBetweenTokens(left, right) === always","            );","        }","","        /**","         * Reports invalid spacing style inside braces.","         * @param {ASTNode} node - A BlockStatement/SwitchStatement node to get.","         * @returns {void}","         */","        function checkSpacingInsideBraces(node) {","","            // Gets braces and the first/last token of content.","            const openBrace = getOpenBrace(node);","            const closeBrace = sourceCode.getLastToken(node);","            const firstToken = sourceCode.getTokenAfter(openBrace, { includeComments: true });","            const lastToken = sourceCode.getTokenBefore(closeBrace, { includeComments: true });","","            // Skip if the node is invalid or empty.","            if (openBrace.type !== \"Punctuator\" ||","                openBrace.value !== \"{\" ||","                closeBrace.type !== \"Punctuator\" ||","                closeBrace.value !== \"}\" ||","                firstToken === closeBrace","            ) {","                return;","            }","","            // Skip line comments for option never","            if (!always && firstToken.type === \"Line\") {","                return;","            }","","            // Check.","            if (!isValid(openBrace, firstToken)) {","                context.report({","                    node,","                    loc: openBrace.loc.start,","                    message: \"{{message}} after '{'.\",","                    data: {","                        message","                    },","                    fix(fixer) {","                        if (always) {","                            return fixer.insertTextBefore(firstToken, \" \");","                        }","","                        return fixer.removeRange([openBrace.range[1], firstToken.range[0]]);","                    }","                });","            }","            if (!isValid(lastToken, closeBrace)) {","                context.report({","                    node,","                    loc: closeBrace.loc.start,","                    message: \"{{message}} before '}'.\",","                    data: {","                        message","                    },","                    fix(fixer) {","                        if (always) {","                            return fixer.insertTextAfter(lastToken, \" \");","                        }","","                        return fixer.removeRange([lastToken.range[1], closeBrace.range[0]]);","                    }","                });","            }","        }","","        return {","            BlockStatement: checkSpacingInsideBraces,","            SwitchStatement: checkSpacingInsideBraces","        };","    }","};",""],"l":{"8":1,"14":1,"30":0,"39":1,"40":0,"41":0,"42":0,"44":0,"46":0,"60":1,"61":0,"72":1,"75":0,"76":0,"77":0,"78":0,"81":0,"87":0,"91":0,"92":0,"96":0,"97":0,"105":0,"106":0,"109":0,"113":0,"114":0,"122":0,"123":0,"126":0,"132":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/brace-style.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/brace-style.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":40,"loc":{"start":{"line":40,"column":10},"end":{"line":40,"column":20}}},"2":{"name":"removeNewlineBetween","line":62,"loc":{"start":{"line":62,"column":8},"end":{"line":62,"column":63}}},"3":{"name":"validateCurlyPair","line":77,"loc":{"start":{"line":77,"column":8},"end":{"line":77,"column":63}}},"4":{"name":"validateCurlyBeforeKeyword","line":121,"loc":{"start":{"line":121,"column":8},"end":{"line":121,"column":56}}},"5":{"name":"(anonymous_5)","line":146,"loc":{"start":{"line":146,"column":26},"end":{"line":146,"column":33}}},"6":{"name":"(anonymous_6)","line":151,"loc":{"start":{"line":151,"column":21},"end":{"line":151,"column":28}}},"7":{"name":"(anonymous_7)","line":154,"loc":{"start":{"line":154,"column":27},"end":{"line":154,"column":34}}},"8":{"name":"(anonymous_8)","line":160,"loc":{"start":{"line":160,"column":23},"end":{"line":160,"column":30}}},"9":{"name":"(anonymous_9)","line":167,"loc":{"start":{"line":167,"column":24},"end":{"line":167,"column":31}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":180,"column":2}},"3":{"start":{"line":41,"column":8},"end":{"line":43,"column":49}},"4":{"start":{"line":45,"column":8},"end":{"line":50,"column":118}},"5":{"start":{"line":62,"column":8},"end":{"line":69,"column":9}},"6":{"start":{"line":63,"column":12},"end":{"line":63,"column":74}},"7":{"start":{"line":64,"column":12},"end":{"line":64,"column":82}},"8":{"start":{"line":65,"column":12},"end":{"line":65,"column":74}},"9":{"start":{"line":68,"column":12},"end":{"line":68,"column":130}},"10":{"start":{"line":68,"column":28},"end":{"line":68,"column":129}},"11":{"start":{"line":77,"column":8},"end":{"line":114,"column":9}},"12":{"start":{"line":78,"column":12},"end":{"line":78,"column":84}},"13":{"start":{"line":79,"column":12},"end":{"line":79,"column":82}},"14":{"start":{"line":80,"column":12},"end":{"line":80,"column":84}},"15":{"start":{"line":81,"column":12},"end":{"line":81,"column":121}},"16":{"start":{"line":83,"column":12},"end":{"line":89,"column":13}},"17":{"start":{"line":84,"column":16},"end":{"line":88,"column":19}},"18":{"start":{"line":91,"column":12},"end":{"line":97,"column":13}},"19":{"start":{"line":92,"column":16},"end":{"line":96,"column":19}},"20":{"start":{"line":95,"column":34},"end":{"line":95,"column":76}},"21":{"start":{"line":99,"column":12},"end":{"line":105,"column":13}},"22":{"start":{"line":100,"column":16},"end":{"line":104,"column":19}},"23":{"start":{"line":103,"column":34},"end":{"line":103,"column":75}},"24":{"start":{"line":107,"column":12},"end":{"line":113,"column":13}},"25":{"start":{"line":108,"column":16},"end":{"line":112,"column":19}},"26":{"start":{"line":111,"column":34},"end":{"line":111,"column":76}},"27":{"start":{"line":121,"column":8},"end":{"line":139,"column":9}},"28":{"start":{"line":122,"column":12},"end":{"line":122,"column":70}},"29":{"start":{"line":124,"column":12},"end":{"line":130,"column":13}},"30":{"start":{"line":125,"column":16},"end":{"line":129,"column":19}},"31":{"start":{"line":132,"column":12},"end":{"line":138,"column":13}},"32":{"start":{"line":133,"column":16},"end":{"line":137,"column":19}},"33":{"start":{"line":136,"column":34},"end":{"line":136,"column":73}},"34":{"start":{"line":145,"column":8},"end":{"line":178,"column":10}},"35":{"start":{"line":147,"column":16},"end":{"line":149,"column":17}},"36":{"start":{"line":148,"column":20},"end":{"line":148,"column":101}},"37":{"start":{"line":152,"column":16},"end":{"line":152,"column":97}},"38":{"start":{"line":155,"column":16},"end":{"line":155,"column":67}},"39":{"start":{"line":156,"column":16},"end":{"line":156,"column":113}},"40":{"start":{"line":158,"column":16},"end":{"line":158,"column":62}},"41":{"start":{"line":161,"column":16},"end":{"line":165,"column":17}},"42":{"start":{"line":164,"column":20},"end":{"line":164,"column":89}},"43":{"start":{"line":170,"column":16},"end":{"line":170,"column":80}},"44":{"start":{"line":172,"column":16},"end":{"line":176,"column":17}},"45":{"start":{"line":175,"column":20},"end":{"line":175,"column":91}}},"branchMap":{"1":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":22},"end":{"line":41,"column":40}},{"start":{"line":41,"column":44},"end":{"line":41,"column":50}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":21},"end":{"line":42,"column":39}},{"start":{"line":42,"column":43},"end":{"line":42,"column":45}}]},"3":{"line":68,"type":"cond-expr","locations":[{"start":{"line":68,"column":83},"end":{"line":68,"column":87}},{"start":{"line":68,"column":90},"end":{"line":68,"column":128}}]},"4":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":40},"end":{"line":81,"column":62}},{"start":{"line":81,"column":66},"end":{"line":81,"column":120}}]},"5":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":12},"end":{"line":83,"column":12}},{"start":{"line":83,"column":12},"end":{"line":83,"column":12}}]},"6":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":16},"end":{"line":83,"column":34}},{"start":{"line":83,"column":38},"end":{"line":83,"column":104}}]},"7":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":12},"end":{"line":91,"column":12}},{"start":{"line":91,"column":12},"end":{"line":91,"column":12}}]},"8":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":16},"end":{"line":91,"column":34}},{"start":{"line":91,"column":38},"end":{"line":91,"column":103}},{"start":{"line":91,"column":107},"end":{"line":91,"column":127}}]},"9":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":12}},{"start":{"line":99,"column":12},"end":{"line":99,"column":12}}]},"10":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":80}},{"start":{"line":99,"column":84},"end":{"line":99,"column":123}},{"start":{"line":99,"column":127},"end":{"line":99,"column":147}}]},"11":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":12},"end":{"line":107,"column":12}},{"start":{"line":107,"column":12},"end":{"line":107,"column":12}}]},"12":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":16},"end":{"line":107,"column":56}},{"start":{"line":107,"column":60},"end":{"line":107,"column":80}},{"start":{"line":107,"column":84},"end":{"line":107,"column":149}}]},"13":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":12},"end":{"line":124,"column":12}},{"start":{"line":124,"column":12},"end":{"line":124,"column":12}}]},"14":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":16},"end":{"line":124,"column":32}},{"start":{"line":124,"column":36},"end":{"line":124,"column":89}}]},"15":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":132,"column":12}},{"start":{"line":132,"column":12},"end":{"line":132,"column":12}}]},"16":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":16},"end":{"line":132,"column":32}},{"start":{"line":132,"column":36},"end":{"line":132,"column":88}}]},"17":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":16},"end":{"line":147,"column":16}},{"start":{"line":147,"column":16},"end":{"line":147,"column":16}}]},"18":{"line":156,"type":"cond-expr","locations":[{"start":{"line":156,"column":83},"end":{"line":156,"column":96}},{"start":{"line":156,"column":99},"end":{"line":156,"column":111}}]},"19":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":16},"end":{"line":161,"column":16}},{"start":{"line":161,"column":16},"end":{"line":161,"column":16}}]},"20":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":20},"end":{"line":161,"column":61}},{"start":{"line":161,"column":65},"end":{"line":161,"column":79}}]},"21":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":16},"end":{"line":172,"column":16}},{"start":{"line":172,"column":16},"end":{"line":172,"column":16}}]},"22":{"line":172,"type":"binary-expr","locations":[{"start":{"line":172,"column":20},"end":{"line":172,"column":32}},{"start":{"line":172,"column":36},"end":{"line":172,"column":50}}]}},"code":["/**"," * @fileoverview Rule to flag block statements that do not use the one true brace style"," * @author Ian Christian Myers"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent brace style for blocks\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"1tbs\", \"stroustrup\", \"allman\"]","            },","            {","                type: \"object\",","                properties: {","                    allowSingleLine: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ],","","        fixable: \"whitespace\"","    },","","    create(context) {","        const style = context.options[0] || \"1tbs\",","            params = context.options[1] || {},","            sourceCode = context.getSourceCode();","","        const OPEN_MESSAGE = \"Opening curly brace does not appear on the same line as controlling statement.\",","            OPEN_MESSAGE_ALLMAN = \"Opening curly brace appears on the same line as controlling statement.\",","            BODY_MESSAGE = \"Statement inside of curly braces should be on next line.\",","            CLOSE_MESSAGE = \"Closing curly brace does not appear on the same line as the subsequent block.\",","            CLOSE_MESSAGE_SINGLE = \"Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.\",","            CLOSE_MESSAGE_STROUSTRUP_ALLMAN = \"Closing curly brace appears on the same line as the subsequent block.\";","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","        * Fixes a place where a newline unexpectedly appears","        * @param {Token} firstToken The token before the unexpected newline","        * @param {Token} secondToken The token after the unexpected newline","        * @returns {Function} A fixer function to remove the newlines between the tokens","        */","        function removeNewlineBetween(firstToken, secondToken) {","            const textRange = [firstToken.range[1], secondToken.range[0]];","            const textBetween = sourceCode.text.slice(textRange[0], textRange[1]);","            const NEWLINE_REGEX = astUtils.createGlobalLinebreakMatcher();","","            // Don't do a fix if there is a comment between the tokens","            return fixer => fixer.replaceTextRange(textRange, textBetween.trim() ? null : textBetween.replace(NEWLINE_REGEX, \"\"));","        }","","        /**","        * Validates a pair of curly brackets based on the user's config","        * @param {Token} openingCurly The opening curly bracket","        * @param {Token} closingCurly The closing curly bracket","        * @returns {void}","        */","        function validateCurlyPair(openingCurly, closingCurly) {","            const tokenBeforeOpeningCurly = sourceCode.getTokenBefore(openingCurly);","            const tokenAfterOpeningCurly = sourceCode.getTokenAfter(openingCurly);","            const tokenBeforeClosingCurly = sourceCode.getTokenBefore(closingCurly);","            const singleLineException = params.allowSingleLine && astUtils.isTokenOnSameLine(openingCurly, closingCurly);","","            if (style !== \"allman\" && !astUtils.isTokenOnSameLine(tokenBeforeOpeningCurly, openingCurly)) {","                context.report({","                    node: openingCurly,","                    message: OPEN_MESSAGE,","                    fix: removeNewlineBetween(tokenBeforeOpeningCurly, openingCurly)","                });","            }","","            if (style === \"allman\" && astUtils.isTokenOnSameLine(tokenBeforeOpeningCurly, openingCurly) && !singleLineException) {","                context.report({","                    node: openingCurly,","                    message: OPEN_MESSAGE_ALLMAN,","                    fix: fixer => fixer.insertTextBefore(openingCurly, \"\\n\")","                });","            }","","            if (astUtils.isTokenOnSameLine(openingCurly, tokenAfterOpeningCurly) && tokenAfterOpeningCurly !== closingCurly && !singleLineException) {","                context.report({","                    node: openingCurly,","                    message: BODY_MESSAGE,","                    fix: fixer => fixer.insertTextAfter(openingCurly, \"\\n\")","                });","            }","","            if (tokenBeforeClosingCurly !== openingCurly && !singleLineException && astUtils.isTokenOnSameLine(tokenBeforeClosingCurly, closingCurly)) {","                context.report({","                    node: closingCurly,","                    message: CLOSE_MESSAGE_SINGLE,","                    fix: fixer => fixer.insertTextBefore(closingCurly, \"\\n\")","                });","            }","        }","","        /**","        * Validates the location of a token that appears before a keyword (e.g. a newline before `else`)","        * @param {Token} curlyToken The closing curly token. This is assumed to precede a keyword token (such as `else` or `finally`).","        * @returns {void}","        */","        function validateCurlyBeforeKeyword(curlyToken) {","            const keywordToken = sourceCode.getTokenAfter(curlyToken);","","            if (style === \"1tbs\" && !astUtils.isTokenOnSameLine(curlyToken, keywordToken)) {","                context.report({","                    node: curlyToken,","                    message: CLOSE_MESSAGE,","                    fix: removeNewlineBetween(curlyToken, keywordToken)","                });","            }","","            if (style !== \"1tbs\" && astUtils.isTokenOnSameLine(curlyToken, keywordToken)) {","                context.report({","                    node: curlyToken,","                    message: CLOSE_MESSAGE_STROUSTRUP_ALLMAN,","                    fix: fixer => fixer.insertTextAfter(curlyToken, \"\\n\")","                });","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            BlockStatement(node) {","                if (!astUtils.STATEMENT_LIST_PARENTS.has(node.parent.type)) {","                    validateCurlyPair(sourceCode.getFirstToken(node), sourceCode.getLastToken(node));","                }","            },","            ClassBody(node) {","                validateCurlyPair(sourceCode.getFirstToken(node), sourceCode.getLastToken(node));","            },","            SwitchStatement(node) {","                const closingCurly = sourceCode.getLastToken(node);","                const openingCurly = sourceCode.getTokenBefore(node.cases.length ? node.cases[0] : closingCurly);","","                validateCurlyPair(openingCurly, closingCurly);","            },","            IfStatement(node) {","                if (node.consequent.type === \"BlockStatement\" && node.alternate) {","","                    // Handle the keyword after the `if` block (before `else`)","                    validateCurlyBeforeKeyword(sourceCode.getLastToken(node.consequent));","                }","            },","            TryStatement(node) {","","                // Handle the keyword after the `try` block (before `catch` or `finally`)","                validateCurlyBeforeKeyword(sourceCode.getLastToken(node.block));","","                if (node.handler && node.finalizer) {","","                    // Handle the keyword after the `catch` block (before `finally`)","                    validateCurlyBeforeKeyword(sourceCode.getLastToken(node.handler.body));","                }","            }","        };","    }","};",""],"l":{"8":1,"14":1,"41":0,"45":0,"62":1,"63":0,"64":0,"65":0,"68":0,"77":1,"78":0,"79":0,"80":0,"81":0,"83":0,"84":0,"91":0,"92":0,"95":0,"99":0,"100":0,"103":0,"107":0,"108":0,"111":0,"121":1,"122":0,"124":0,"125":0,"132":0,"133":0,"136":0,"145":0,"147":0,"148":0,"152":0,"155":0,"156":0,"158":0,"161":0,"164":0,"170":0,"172":0,"175":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/callback-return.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/callback-return.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0],"23":[0,0],"24":[0,0],"25":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"findClosestParentOfType","line":40,"loc":{"start":{"line":40,"column":8},"end":{"line":40,"column":54}}},"3":{"name":"containsOnlyIdentifiers","line":55,"loc":{"start":{"line":55,"column":8},"end":{"line":55,"column":47}}},"4":{"name":"isCallback","line":76,"loc":{"start":{"line":76,"column":8},"end":{"line":76,"column":34}}},"5":{"name":"isCallbackExpression","line":86,"loc":{"start":{"line":86,"column":8},"end":{"line":86,"column":56}}},"6":{"name":"(anonymous_6)","line":113,"loc":{"start":{"line":113,"column":26},"end":{"line":113,"column":33}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":174,"column":2}},"2":{"start":{"line":27,"column":8},"end":{"line":28,"column":49}},"3":{"start":{"line":40,"column":8},"end":{"line":48,"column":9}},"4":{"start":{"line":41,"column":12},"end":{"line":43,"column":13}},"5":{"start":{"line":42,"column":16},"end":{"line":42,"column":28}},"6":{"start":{"line":44,"column":12},"end":{"line":46,"column":13}},"7":{"start":{"line":45,"column":16},"end":{"line":45,"column":67}},"8":{"start":{"line":47,"column":12},"end":{"line":47,"column":31}},"9":{"start":{"line":55,"column":8},"end":{"line":69,"column":9}},"10":{"start":{"line":56,"column":12},"end":{"line":58,"column":13}},"11":{"start":{"line":57,"column":16},"end":{"line":57,"column":28}},"12":{"start":{"line":60,"column":12},"end":{"line":66,"column":13}},"13":{"start":{"line":61,"column":16},"end":{"line":65,"column":17}},"14":{"start":{"line":62,"column":20},"end":{"line":62,"column":32}},"15":{"start":{"line":63,"column":23},"end":{"line":65,"column":17}},"16":{"start":{"line":64,"column":20},"end":{"line":64,"column":64}},"17":{"start":{"line":68,"column":12},"end":{"line":68,"column":25}},"18":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"19":{"start":{"line":77,"column":12},"end":{"line":77,"column":115}},"20":{"start":{"line":86,"column":8},"end":{"line":106,"column":9}},"21":{"start":{"line":89,"column":12},"end":{"line":91,"column":13}},"22":{"start":{"line":90,"column":16},"end":{"line":90,"column":29}},"23":{"start":{"line":94,"column":12},"end":{"line":96,"column":13}},"24":{"start":{"line":95,"column":16},"end":{"line":95,"column":28}},"25":{"start":{"line":99,"column":12},"end":{"line":103,"column":13}},"26":{"start":{"line":100,"column":16},"end":{"line":102,"column":17}},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":32}},"28":{"start":{"line":105,"column":12},"end":{"line":105,"column":25}},"29":{"start":{"line":112,"column":8},"end":{"line":172,"column":10}},"30":{"start":{"line":116,"column":16},"end":{"line":118,"column":17}},"31":{"start":{"line":117,"column":20},"end":{"line":117,"column":27}},"32":{"start":{"line":121,"column":16},"end":{"line":121,"column":139}},"33":{"start":{"line":124,"column":16},"end":{"line":126,"column":17}},"34":{"start":{"line":125,"column":20},"end":{"line":125,"column":27}},"35":{"start":{"line":129,"column":16},"end":{"line":131,"column":17}},"36":{"start":{"line":130,"column":20},"end":{"line":130,"column":27}},"37":{"start":{"line":134,"column":16},"end":{"line":163,"column":17}},"38":{"start":{"line":137,"column":20},"end":{"line":137,"column":85}},"39":{"start":{"line":140,"column":20},"end":{"line":152,"column":21}},"40":{"start":{"line":142,"column":24},"end":{"line":142,"column":68}},"41":{"start":{"line":145,"column":24},"end":{"line":150,"column":25}},"42":{"start":{"line":149,"column":28},"end":{"line":149,"column":35}},"43":{"start":{"line":155,"column":20},"end":{"line":161,"column":21}},"44":{"start":{"line":158,"column":24},"end":{"line":160,"column":25}},"45":{"start":{"line":159,"column":28},"end":{"line":159,"column":35}},"46":{"start":{"line":166,"column":16},"end":{"line":168,"column":17}},"47":{"start":{"line":167,"column":20},"end":{"line":167,"column":102}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":26},"end":{"line":27,"column":44}},{"start":{"line":27,"column":48},"end":{"line":27,"column":74}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":12}},{"start":{"line":41,"column":12},"end":{"line":41,"column":12}}]},"3":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":12}},{"start":{"line":44,"column":12},"end":{"line":44,"column":12}}]},"4":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":12}},{"start":{"line":56,"column":12},"end":{"line":56,"column":12}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":12}},{"start":{"line":60,"column":12},"end":{"line":60,"column":12}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":16},"end":{"line":61,"column":16}},{"start":{"line":61,"column":16},"end":{"line":61,"column":16}}]},"7":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":23},"end":{"line":63,"column":23}},{"start":{"line":63,"column":23},"end":{"line":63,"column":23}}]},"8":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":19},"end":{"line":77,"column":55}},{"start":{"line":77,"column":59},"end":{"line":77,"column":114}}]},"9":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":89,"column":12}},{"start":{"line":89,"column":12},"end":{"line":89,"column":12}}]},"10":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":16},"end":{"line":89,"column":27}},{"start":{"line":89,"column":31},"end":{"line":89,"column":72}}]},"11":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":12}},{"start":{"line":94,"column":12},"end":{"line":94,"column":12}}]},"12":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":12}},{"start":{"line":99,"column":12},"end":{"line":99,"column":12}}]},"13":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":65}},{"start":{"line":99,"column":69},"end":{"line":99,"column":119}}]},"14":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":16},"end":{"line":100,"column":16}},{"start":{"line":100,"column":16},"end":{"line":100,"column":16}}]},"15":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":16},"end":{"line":116,"column":16}},{"start":{"line":116,"column":16},"end":{"line":116,"column":16}}]},"16":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":37},"end":{"line":121,"column":132}},{"start":{"line":121,"column":136},"end":{"line":121,"column":138}}]},"17":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":16},"end":{"line":124,"column":16}},{"start":{"line":124,"column":16},"end":{"line":124,"column":16}}]},"18":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16}},{"start":{"line":129,"column":16},"end":{"line":129,"column":16}}]},"19":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":16}},{"start":{"line":134,"column":16},"end":{"line":134,"column":16}}]},"20":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":20},"end":{"line":140,"column":20}},{"start":{"line":140,"column":20},"end":{"line":140,"column":20}}]},"21":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":24},"end":{"line":145,"column":24}},{"start":{"line":145,"column":24},"end":{"line":145,"column":24}}]},"22":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":28},"end":{"line":145,"column":63}},{"start":{"line":146,"column":28},"end":{"line":146,"column":64}},{"start":{"line":147,"column":28},"end":{"line":147,"column":68}}]},"23":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":20},"end":{"line":155,"column":20}},{"start":{"line":155,"column":20},"end":{"line":155,"column":20}}]},"24":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":24},"end":{"line":158,"column":24}},{"start":{"line":158,"column":24},"end":{"line":158,"column":24}}]},"25":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":16},"end":{"line":166,"column":16}},{"start":{"line":166,"column":16},"end":{"line":166,"column":16}}]}},"code":["/**"," * @fileoverview Enforce return after a callback."," * @author Jamund Ferguson"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require `return` statements after callbacks\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: [{","            type: \"array\",","            items: { type: \"string\" }","        }]","    },","","    create(context) {","","        const callbacks = context.options[0] || [\"callback\", \"cb\", \"next\"],","            sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Find the closest parent matching a list of types.","         * @param {ASTNode} node The node whose parents we are searching","         * @param {Array} types The node types to match","         * @returns {ASTNode} The matched node or undefined.","         */","        function findClosestParentOfType(node, types) {","            if (!node.parent) {","                return null;","            }","            if (types.indexOf(node.parent.type) === -1) {","                return findClosestParentOfType(node.parent, types);","            }","            return node.parent;","        }","","        /**","         * Check to see if a node contains only identifers","         * @param {ASTNode} node The node to check","         * @returns {boolean} Whether or not the node contains only identifers","         */","        function containsOnlyIdentifiers(node) {","            if (node.type === \"Identifier\") {","                return true;","            }","","            if (node.type === \"MemberExpression\") {","                if (node.object.type === \"Identifier\") {","                    return true;","                } else if (node.object.type === \"MemberExpression\") {","                    return containsOnlyIdentifiers(node.object);","                }","            }","","            return false;","        }","","        /**","         * Check to see if a CallExpression is in our callback list.","         * @param {ASTNode} node The node to check against our callback names list.","         * @returns {boolean} Whether or not this function matches our callback name.","         */","        function isCallback(node) {","            return containsOnlyIdentifiers(node.callee) && callbacks.indexOf(sourceCode.getText(node.callee)) > -1;","        }","","        /**","         * Determines whether or not the callback is part of a callback expression.","         * @param {ASTNode} node The callback node","         * @param {ASTNode} parentNode The expression node","         * @returns {boolean} Whether or not this is part of a callback expression","         */","        function isCallbackExpression(node, parentNode) {","","            // ensure the parent node exists and is an expression","            if (!parentNode || parentNode.type !== \"ExpressionStatement\") {","                return false;","            }","","            // cb()","            if (parentNode.expression === node) {","                return true;","            }","","            // special case for cb && cb() and similar","            if (parentNode.expression.type === \"BinaryExpression\" || parentNode.expression.type === \"LogicalExpression\") {","                if (parentNode.expression.right === node) {","                    return true;","                }","            }","","            return false;","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            CallExpression(node) {","","                // if we're not a callback we can return","                if (!isCallback(node)) {","                    return;","                }","","                // find the closest block, return or loop","                const closestBlock = findClosestParentOfType(node, [\"BlockStatement\", \"ReturnStatement\", \"ArrowFunctionExpression\"]) || {};","","                // if our parent is a return we know we're ok","                if (closestBlock.type === \"ReturnStatement\") {","                    return;","                }","","                // arrow functions don't always have blocks and implicitly return","                if (closestBlock.type === \"ArrowFunctionExpression\") {","                    return;","                }","","                // block statements are part of functions and most if statements","                if (closestBlock.type === \"BlockStatement\") {","","                    // find the last item in the block","                    const lastItem = closestBlock.body[closestBlock.body.length - 1];","","                    // if the callback is the last thing in a block that might be ok","                    if (isCallbackExpression(node, lastItem)) {","","                        const parentType = closestBlock.parent.type;","","                        // but only if the block is part of a function","                        if (parentType === \"FunctionExpression\" ||","                            parentType === \"FunctionDeclaration\" ||","                            parentType === \"ArrowFunctionExpression\"","                        ) {","                            return;","                        }","","                    }","","                    // ending a block with a return is also ok","                    if (lastItem.type === \"ReturnStatement\") {","","                        // but only if the callback is immediately before","                        if (isCallbackExpression(node, closestBlock.body[closestBlock.body.length - 2])) {","                            return;","                        }","                    }","","                }","","                // as long as you're the child of a function at this point you should be asked to return","                if (findClosestParentOfType(node, [\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"])) {","                    context.report({ node, message: \"Expected return with your callback function.\" });","                }","","            }","","        };","    }","};",""],"l":{"11":1,"27":0,"40":1,"41":0,"42":0,"44":0,"45":0,"47":0,"55":1,"56":0,"57":0,"60":0,"61":0,"62":0,"63":0,"64":0,"68":0,"76":1,"77":0,"86":1,"89":0,"90":0,"94":0,"95":0,"99":0,"100":0,"101":0,"105":0,"112":0,"116":0,"117":0,"121":0,"124":0,"125":0,"129":0,"130":0,"134":0,"137":0,"140":0,"142":0,"145":0,"149":0,"155":0,"158":0,"159":0,"166":0,"167":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/camelcase.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/camelcase.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":33,"loc":{"start":{"line":33,"column":10},"end":{"line":33,"column":20}}},"2":{"name":"isUnderscored","line":49,"loc":{"start":{"line":49,"column":8},"end":{"line":49,"column":37}}},"3":{"name":"report","line":61,"loc":{"start":{"line":61,"column":8},"end":{"line":61,"column":30}}},"4":{"name":"(anonymous_4)","line":77,"loc":{"start":{"line":77,"column":22},"end":{"line":77,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":143,"column":2}},"2":{"start":{"line":40,"column":8},"end":{"line":40,"column":28}},"3":{"start":{"line":41,"column":8},"end":{"line":41,"column":82}},"4":{"start":{"line":49,"column":8},"end":{"line":53,"column":9}},"5":{"start":{"line":52,"column":12},"end":{"line":52,"column":73}},"6":{"start":{"line":61,"column":8},"end":{"line":66,"column":9}},"7":{"start":{"line":62,"column":12},"end":{"line":65,"column":13}},"8":{"start":{"line":63,"column":16},"end":{"line":63,"column":36}},"9":{"start":{"line":64,"column":16},"end":{"line":64,"column":124}},"10":{"start":{"line":68,"column":8},"end":{"line":68,"column":49}},"11":{"start":{"line":69,"column":8},"end":{"line":69,"column":50}},"12":{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},"13":{"start":{"line":72,"column":12},"end":{"line":72,"column":34}},"14":{"start":{"line":75,"column":8},"end":{"line":140,"column":10}},"15":{"start":{"line":83,"column":16},"end":{"line":84,"column":115}},"16":{"start":{"line":87,"column":16},"end":{"line":137,"column":17}},"17":{"start":{"line":90,"column":20},"end":{"line":92,"column":21}},"18":{"start":{"line":91,"column":24},"end":{"line":91,"column":31}},"19":{"start":{"line":95,"column":20},"end":{"line":107,"column":21}},"20":{"start":{"line":98,"column":24},"end":{"line":98,"column":37}},"21":{"start":{"line":101,"column":27},"end":{"line":107,"column":21}},"22":{"start":{"line":106,"column":24},"end":{"line":106,"column":37}},"23":{"start":{"line":110,"column":23},"end":{"line":137,"column":17}},"24":{"start":{"line":113,"column":20},"end":{"line":115,"column":21}},"25":{"start":{"line":114,"column":24},"end":{"line":114,"column":31}},"26":{"start":{"line":117,"column":20},"end":{"line":120,"column":21}},"27":{"start":{"line":119,"column":24},"end":{"line":119,"column":31}},"28":{"start":{"line":122,"column":20},"end":{"line":124,"column":21}},"29":{"start":{"line":123,"column":24},"end":{"line":123,"column":37}},"30":{"start":{"line":127,"column":23},"end":{"line":137,"column":17}},"31":{"start":{"line":130,"column":20},"end":{"line":132,"column":21}},"32":{"start":{"line":131,"column":24},"end":{"line":131,"column":37}},"33":{"start":{"line":135,"column":23},"end":{"line":137,"column":17}},"34":{"start":{"line":136,"column":20},"end":{"line":136,"column":33}}},"branchMap":{"1":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":19},"end":{"line":52,"column":41}},{"start":{"line":52,"column":45},"end":{"line":52,"column":72}}]},"2":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":12}},{"start":{"line":62,"column":12},"end":{"line":62,"column":12}}]},"3":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":24},"end":{"line":68,"column":42}},{"start":{"line":68,"column":46},"end":{"line":68,"column":48}}]},"4":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":25},"end":{"line":69,"column":43}},{"start":{"line":69,"column":47},"end":{"line":69,"column":49}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":71,"column":8}},{"start":{"line":71,"column":8},"end":{"line":71,"column":8}}]},"6":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":12},"end":{"line":71,"column":35}},{"start":{"line":71,"column":39},"end":{"line":71,"column":61}}]},"7":{"line":84,"type":"cond-expr","locations":[{"start":{"line":84,"column":82},"end":{"line":84,"column":100}},{"start":{"line":84,"column":103},"end":{"line":84,"column":114}}]},"8":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":16},"end":{"line":87,"column":16}},{"start":{"line":87,"column":16},"end":{"line":87,"column":16}}]},"9":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":20},"end":{"line":90,"column":20}},{"start":{"line":90,"column":20},"end":{"line":90,"column":20}}]},"10":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":20},"end":{"line":95,"column":20}},{"start":{"line":95,"column":20},"end":{"line":95,"column":20}}]},"11":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":24},"end":{"line":95,"column":64}},{"start":{"line":96,"column":28},"end":{"line":96,"column":65}},{"start":{"line":97,"column":28},"end":{"line":97,"column":47}}]},"12":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":27},"end":{"line":101,"column":27}},{"start":{"line":101,"column":27},"end":{"line":101,"column":27}}]},"13":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":31},"end":{"line":101,"column":78}},{"start":{"line":102,"column":28},"end":{"line":102,"column":47}},{"start":{"line":103,"column":29},"end":{"line":103,"column":78}},{"start":{"line":104,"column":28},"end":{"line":104,"column":76}},{"start":{"line":105,"column":28},"end":{"line":105,"column":76}}]},"14":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":23},"end":{"line":110,"column":23}},{"start":{"line":110,"column":23},"end":{"line":110,"column":23}}]},"15":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":20},"end":{"line":113,"column":20}},{"start":{"line":113,"column":20},"end":{"line":113,"column":20}}]},"16":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":20},"end":{"line":117,"column":20}},{"start":{"line":117,"column":20},"end":{"line":117,"column":20}}]},"17":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":24},"end":{"line":117,"column":42}},{"start":{"line":117,"column":46},"end":{"line":117,"column":89}},{"start":{"line":118,"column":28},"end":{"line":118,"column":52}},{"start":{"line":118,"column":56},"end":{"line":118,"column":82}}]},"18":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":20},"end":{"line":122,"column":20}},{"start":{"line":122,"column":20},"end":{"line":122,"column":20}}]},"19":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":24},"end":{"line":122,"column":43}},{"start":{"line":122,"column":47},"end":{"line":122,"column":94}}]},"20":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":23},"end":{"line":127,"column":23}},{"start":{"line":127,"column":23},"end":{"line":127,"column":23}}]},"21":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":20},"end":{"line":130,"column":20}},{"start":{"line":130,"column":20},"end":{"line":130,"column":20}}]},"22":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":24},"end":{"line":130,"column":41}},{"start":{"line":130,"column":45},"end":{"line":130,"column":81}},{"start":{"line":130,"column":85},"end":{"line":130,"column":104}}]},"23":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":23},"end":{"line":135,"column":23}},{"start":{"line":135,"column":23},"end":{"line":135,"column":23}}]},"24":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":27},"end":{"line":135,"column":46}},{"start":{"line":135,"column":50},"end":{"line":135,"column":97}}]}},"code":["/**"," * @fileoverview Rule to flag non-camelcased identifiers"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce camelcase naming convention\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    properties: {","                        enum: [\"always\", \"never\"]","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        // contains reported nodes to avoid reporting twice on destructuring with shorthand notation","        const reported = [];","        const ALLOWED_PARENT_TYPES = new Set([\"CallExpression\", \"NewExpression\"]);","","        /**","         * Checks if a string contains an underscore and isn't all upper-case","         * @param {string} name The string to check.","         * @returns {boolean} if the string is underscored","         * @private","         */","        function isUnderscored(name) {","","            // if there's an underscore, it might be A_CONSTANT, which is okay","            return name.indexOf(\"_\") > -1 && name !== name.toUpperCase();","        }","","        /**","         * Reports an AST node as a rule violation.","         * @param {ASTNode} node The node to report.","         * @returns {void}","         * @private","         */","        function report(node) {","            if (reported.indexOf(node) < 0) {","                reported.push(node);","                context.report({ node, message: \"Identifier '{{name}}' is not in camel case.\", data: { name: node.name } });","            }","        }","","        const options = context.options[0] || {};","        let properties = options.properties || \"\";","","        if (properties !== \"always\" && properties !== \"never\") {","            properties = \"always\";","        }","","        return {","","            Identifier(node) {","","                /*","                 * Leading and trailing underscores are commonly used to flag","                 * private/protected identifiers, strip them","                 */","                const name = node.name.replace(/^_+|_+$/g, \"\"),","                    effectiveParent = (node.parent.type === \"MemberExpression\") ? node.parent.parent : node.parent;","","                // MemberExpressions get special rules","                if (node.parent.type === \"MemberExpression\") {","","                    // \"never\" check properties","                    if (properties === \"never\") {","                        return;","                    }","","                    // Always report underscored object names","                    if (node.parent.object.type === \"Identifier\" &&","                            node.parent.object.name === node.name &&","                            isUnderscored(name)) {","                        report(node);","","                    // Report AssignmentExpressions only if they are the left side of the assignment","                    } else if (effectiveParent.type === \"AssignmentExpression\" &&","                            isUnderscored(name) &&","                            (effectiveParent.right.type !== \"MemberExpression\" ||","                            effectiveParent.left.type === \"MemberExpression\" &&","                            effectiveParent.left.property.name === node.name)) {","                        report(node);","                    }","","                // Properties have their own rules","                } else if (node.parent.type === \"Property\") {","","                    // \"never\" check properties","                    if (properties === \"never\") {","                        return;","                    }","","                    if (node.parent.parent && node.parent.parent.type === \"ObjectPattern\" &&","                            node.parent.key === node && node.parent.value !== node) {","                        return;","                    }","","                    if (isUnderscored(name) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type)) {","                        report(node);","                    }","","                // Check if it's an import specifier","                } else if ([\"ImportSpecifier\", \"ImportNamespaceSpecifier\", \"ImportDefaultSpecifier\"].indexOf(node.parent.type) >= 0) {","","                    // Report only if the local imported identifier is underscored","                    if (node.parent.local && node.parent.local.name === node.name && isUnderscored(name)) {","                        report(node);","                    }","","                // Report anything that is underscored that isn't a CallExpression","                } else if (isUnderscored(name) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type)) {","                    report(node);","                }","            }","","        };","","    }","};",""],"l":{"12":1,"40":0,"41":0,"49":1,"52":0,"61":1,"62":0,"63":0,"64":0,"68":0,"69":0,"71":0,"72":0,"75":0,"83":0,"87":0,"90":0,"91":0,"95":0,"98":0,"101":0,"106":0,"110":0,"113":0,"114":0,"117":0,"119":0,"122":0,"123":0,"127":0,"130":0,"131":0,"135":0,"136":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/capitalized-comments.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/capitalized-comments.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":1,"21":0,"22":0,"23":1,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"getNormalizedOptions","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":49}}},"2":{"name":"getAllNormalizedOptions","line":79,"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":45}}},"3":{"name":"createRegExpForIgnorePatterns","line":95,"loc":{"start":{"line":95,"column":0},"end":{"line":95,"column":58}}},"4":{"name":"(anonymous_4)","line":137,"loc":{"start":{"line":137,"column":10},"end":{"line":137,"column":20}}},"5":{"name":"isInlineComment","line":166,"loc":{"start":{"line":166,"column":8},"end":{"line":166,"column":42}}},"6":{"name":"isConsecutiveComment","line":184,"loc":{"start":{"line":184,"column":8},"end":{"line":184,"column":47}}},"7":{"name":"isCommentValid","line":200,"loc":{"start":{"line":200,"column":8},"end":{"line":200,"column":50}}},"8":{"name":"processComment","line":263,"loc":{"start":{"line":263,"column":8},"end":{"line":263,"column":41}}},"9":{"name":"(anonymous_9)","line":276,"loc":{"start":{"line":276,"column":23},"end":{"line":276,"column":31}}},"10":{"name":"(anonymous_10)","line":295,"loc":{"start":{"line":295,"column":19},"end":{"line":295,"column":22}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":59}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"3":{"start":{"line":18,"column":0},"end":{"line":27,"column":6}},"4":{"start":{"line":34,"column":0},"end":{"line":48,"column":2}},"5":{"start":{"line":64,"column":0},"end":{"line":70,"column":1}},"6":{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},"7":{"start":{"line":66,"column":8},"end":{"line":66,"column":43}},"8":{"start":{"line":69,"column":4},"end":{"line":69,"column":72}},"9":{"start":{"line":79,"column":0},"end":{"line":84,"column":1}},"10":{"start":{"line":80,"column":4},"end":{"line":83,"column":6}},"11":{"start":{"line":95,"column":0},"end":{"line":105,"column":1}},"12":{"start":{"line":96,"column":4},"end":{"line":104,"column":7}},"13":{"start":{"line":97,"column":8},"end":{"line":97,"column":70}},"14":{"start":{"line":99,"column":8},"end":{"line":103,"column":9}},"15":{"start":{"line":100,"column":12},"end":{"line":100,"column":66}},"16":{"start":{"line":102,"column":12},"end":{"line":102,"column":64}},"17":{"start":{"line":111,"column":0},"end":{"line":302,"column":2}},"18":{"start":{"line":139,"column":8},"end":{"line":141,"column":49}},"19":{"start":{"line":143,"column":8},"end":{"line":143,"column":57}},"20":{"start":{"line":166,"column":8},"end":{"line":176,"column":9}},"21":{"start":{"line":167,"column":12},"end":{"line":168,"column":89}},"22":{"start":{"line":170,"column":12},"end":{"line":175,"column":14}},"23":{"start":{"line":184,"column":8},"end":{"line":191,"column":9}},"24":{"start":{"line":185,"column":12},"end":{"line":185,"column":105}},"25":{"start":{"line":187,"column":12},"end":{"line":190,"column":14}},"26":{"start":{"line":200,"column":8},"end":{"line":255,"column":9}},"27":{"start":{"line":203,"column":12},"end":{"line":205,"column":13}},"28":{"start":{"line":204,"column":16},"end":{"line":204,"column":28}},"29":{"start":{"line":208,"column":12},"end":{"line":209,"column":36}},"30":{"start":{"line":211,"column":12},"end":{"line":213,"column":13}},"31":{"start":{"line":212,"column":16},"end":{"line":212,"column":28}},"32":{"start":{"line":216,"column":12},"end":{"line":218,"column":13}},"33":{"start":{"line":217,"column":16},"end":{"line":217,"column":28}},"34":{"start":{"line":221,"column":12},"end":{"line":223,"column":13}},"35":{"start":{"line":222,"column":16},"end":{"line":222,"column":28}},"36":{"start":{"line":226,"column":12},"end":{"line":228,"column":13}},"37":{"start":{"line":227,"column":16},"end":{"line":227,"column":28}},"38":{"start":{"line":231,"column":12},"end":{"line":232,"column":41}},"39":{"start":{"line":234,"column":12},"end":{"line":236,"column":13}},"40":{"start":{"line":235,"column":16},"end":{"line":235,"column":28}},"41":{"start":{"line":238,"column":12},"end":{"line":238,"column":58}},"42":{"start":{"line":240,"column":12},"end":{"line":242,"column":13}},"43":{"start":{"line":241,"column":16},"end":{"line":241,"column":28}},"44":{"start":{"line":245,"column":12},"end":{"line":246,"column":82}},"45":{"start":{"line":248,"column":12},"end":{"line":252,"column":13}},"46":{"start":{"line":249,"column":16},"end":{"line":249,"column":29}},"47":{"start":{"line":250,"column":19},"end":{"line":252,"column":13}},"48":{"start":{"line":251,"column":16},"end":{"line":251,"column":29}},"49":{"start":{"line":254,"column":12},"end":{"line":254,"column":24}},"50":{"start":{"line":263,"column":8},"end":{"line":288,"column":9}},"51":{"start":{"line":264,"column":12},"end":{"line":265,"column":64}},"52":{"start":{"line":267,"column":12},"end":{"line":287,"column":13}},"53":{"start":{"line":268,"column":16},"end":{"line":270,"column":36}},"54":{"start":{"line":272,"column":16},"end":{"line":286,"column":19}},"55":{"start":{"line":277,"column":24},"end":{"line":277,"column":74}},"56":{"start":{"line":279,"column":24},"end":{"line":284,"column":26}},"57":{"start":{"line":294,"column":8},"end":{"line":300,"column":10}},"58":{"start":{"line":296,"column":16},"end":{"line":296,"column":61}},"59":{"start":{"line":298,"column":16},"end":{"line":298,"column":49}}},"branchMap":{"1":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":65,"column":4}},{"start":{"line":65,"column":4},"end":{"line":65,"column":4}}]},"2":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":39},"end":{"line":69,"column":56}},{"start":{"line":69,"column":60},"end":{"line":69,"column":70}}]},"3":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":8}},{"start":{"line":99,"column":8},"end":{"line":99,"column":8}}]},"4":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":27},"end":{"line":139,"column":45}},{"start":{"line":139,"column":49},"end":{"line":139,"column":57}}]},"5":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":16},"end":{"line":171,"column":29}},{"start":{"line":172,"column":16},"end":{"line":172,"column":25}},{"start":{"line":173,"column":16},"end":{"line":173,"column":69}},{"start":{"line":174,"column":16},"end":{"line":174,"column":65}}]},"6":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":16},"end":{"line":188,"column":38}},{"start":{"line":189,"column":16},"end":{"line":189,"column":77}}]},"7":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":12},"end":{"line":203,"column":12}},{"start":{"line":203,"column":12},"end":{"line":203,"column":12}}]},"8":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":12},"end":{"line":211,"column":12}},{"start":{"line":211,"column":12},"end":{"line":211,"column":12}}]},"9":{"line":211,"type":"binary-expr","locations":[{"start":{"line":211,"column":16},"end":{"line":211,"column":43}},{"start":{"line":211,"column":47},"end":{"line":211,"column":104}}]},"10":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":12},"end":{"line":216,"column":12}},{"start":{"line":216,"column":12},"end":{"line":216,"column":12}}]},"11":{"line":216,"type":"binary-expr","locations":[{"start":{"line":216,"column":16},"end":{"line":216,"column":44}},{"start":{"line":216,"column":48},"end":{"line":216,"column":72}}]},"12":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":12},"end":{"line":221,"column":12}},{"start":{"line":221,"column":12},"end":{"line":221,"column":12}}]},"13":{"line":221,"type":"binary-expr","locations":[{"start":{"line":221,"column":16},"end":{"line":221,"column":49}},{"start":{"line":221,"column":53},"end":{"line":221,"column":82}}]},"14":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":12},"end":{"line":226,"column":12}},{"start":{"line":226,"column":12},"end":{"line":226,"column":12}}]},"15":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":12},"end":{"line":234,"column":12}},{"start":{"line":234,"column":12},"end":{"line":234,"column":12}}]},"16":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":12},"end":{"line":240,"column":12}},{"start":{"line":240,"column":12},"end":{"line":240,"column":12}}]},"17":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":12},"end":{"line":248,"column":12}},{"start":{"line":248,"column":12},"end":{"line":248,"column":12}}]},"18":{"line":248,"type":"binary-expr","locations":[{"start":{"line":248,"column":16},"end":{"line":248,"column":39}},{"start":{"line":248,"column":43},"end":{"line":248,"column":54}}]},"19":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":19},"end":{"line":250,"column":19}},{"start":{"line":250,"column":19},"end":{"line":250,"column":19}}]},"20":{"line":250,"type":"binary-expr","locations":[{"start":{"line":250,"column":23},"end":{"line":250,"column":45}},{"start":{"line":250,"column":49},"end":{"line":250,"column":60}}]},"21":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":12},"end":{"line":267,"column":12}},{"start":{"line":267,"column":12},"end":{"line":267,"column":12}}]},"22":{"line":268,"type":"cond-expr","locations":[{"start":{"line":269,"column":22},"end":{"line":269,"column":36}},{"start":{"line":270,"column":22},"end":{"line":270,"column":35}}]},"23":{"line":283,"type":"cond-expr","locations":[{"start":{"line":283,"column":54},"end":{"line":283,"column":82}},{"start":{"line":283,"column":85},"end":{"line":283,"column":113}}]}},"code":["/**"," * @fileoverview enforce or disallow capitalization of the first letter of a comment"," * @author Kevin Partington"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const LETTER_PATTERN = require(\"../util/patterns/letters\");","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const ALWAYS_MESSAGE = \"Comments should not begin with a lowercase character\",","    NEVER_MESSAGE = \"Comments should not begin with an uppercase character\",","    DEFAULT_IGNORE_PATTERN = astUtils.COMMENTS_IGNORE_PATTERN,","    WHITESPACE = /\\s/g,","    MAYBE_URL = /^\\s*[^:/?#\\s]+:\\/\\/[^?#]/,    // TODO: Combine w/ max-len pattern?","    DEFAULTS = {","        ignorePattern: null,","        ignoreInlineComments: false,","        ignoreConsecutiveComments: false","    };","","/*"," * Base schema body for defining the basic capitalization rule, ignorePattern,"," * and ignoreInlineComments values."," * This can be used in a few different ways in the actual schema."," */","const SCHEMA_BODY = {","    type: \"object\",","    properties: {","        ignorePattern: {","            type: \"string\"","        },","        ignoreInlineComments: {","            type: \"boolean\"","        },","        ignoreConsecutiveComments: {","            type: \"boolean\"","        }","    },","    additionalProperties: false","};","","/**"," * Get normalized options for either block or line comments from the given"," * user-provided options."," * - If the user-provided options is just a string, returns a normalized"," *   set of options using default values for all other options."," * - If the user-provided options is an object, then a normalized option"," *   set is returned. Options specified in overrides will take priority"," *   over options specified in the main options object, which will in"," *   turn take priority over the rule's defaults."," *"," * @param {Object|string} rawOptions The user-provided options."," * @param {string} which Either \"line\" or \"block\"."," * @returns {Object} The normalized options."," */","function getNormalizedOptions(rawOptions, which) {","    if (!rawOptions) {","        return Object.assign({}, DEFAULTS);","    }","","    return Object.assign({}, DEFAULTS, rawOptions[which] || rawOptions);","}","","/**"," * Get normalized options for block and line comments."," *"," * @param {Object|string} rawOptions The user-provided options."," * @returns {Object} An object with \"Line\" and \"Block\" keys and corresponding"," * normalized options objects."," */","function getAllNormalizedOptions(rawOptions) {","    return {","        Line: getNormalizedOptions(rawOptions, \"line\"),","        Block: getNormalizedOptions(rawOptions, \"block\")","    };","}","","/**"," * Creates a regular expression for each ignorePattern defined in the rule"," * options."," *"," * This is done in order to avoid invoking the RegExp constructor repeatedly."," *"," * @param {Object} normalizedOptions The normalized rule options."," * @returns {void}"," */","function createRegExpForIgnorePatterns(normalizedOptions) {","    Object.keys(normalizedOptions).forEach(key => {","        const ignorePatternStr = normalizedOptions[key].ignorePattern;","","        if (ignorePatternStr) {","            const regExp = RegExp(`^\\\\s*(?:${ignorePatternStr})`);","","            normalizedOptions[key].ignorePatternRegExp = regExp;","        }","    });","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce or disallow capitalization of the first letter of a comment\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        fixable: \"code\",","        schema: [","            { enum: [\"always\", \"never\"] },","            {","                oneOf: [","                    SCHEMA_BODY,","                    {","                        type: \"object\",","                        properties: {","                            line: SCHEMA_BODY,","                            block: SCHEMA_BODY","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","","        const capitalize = context.options[0] || \"always\",","            normalizedOptions = getAllNormalizedOptions(context.options[1]),","            sourceCode = context.getSourceCode();","","        createRegExpForIgnorePatterns(normalizedOptions);","","        //----------------------------------------------------------------------","        // Helpers","        //----------------------------------------------------------------------","","        /**","         * Checks whether a comment is an inline comment.","         *","         * For the purpose of this rule, a comment is inline if:","         * 1. The comment is preceded by a token on the same line; and","         * 2. The command is followed by a token on the same line.","         *","         * Note that the comment itself need not be single-line!","         *","         * Also, it follows from this definition that only block comments can","         * be considered as possibly inline. This is because line comments","         * would consume any following tokens on the same line as the comment.","         *","         * @param {ASTNode} comment The comment node to check.","         * @returns {boolean} True if the comment is an inline comment, false","         * otherwise.","         */","        function isInlineComment(comment) {","            const previousToken = sourceCode.getTokenBefore(comment, { includeComments: true }),","                nextToken = sourceCode.getTokenAfter(comment, { includeComments: true });","","            return Boolean(","                previousToken &&","                nextToken &&","                comment.loc.start.line === previousToken.loc.end.line &&","                comment.loc.end.line === nextToken.loc.start.line","            );","        }","","        /**","         * Determine if a comment follows another comment.","         *","         * @param {ASTNode} comment The comment to check.","         * @returns {boolean} True if the comment follows a valid comment.","         */","        function isConsecutiveComment(comment) {","            const previousTokenOrComment = sourceCode.getTokenBefore(comment, { includeComments: true });","","            return Boolean(","                previousTokenOrComment &&","                [\"Block\", \"Line\"].indexOf(previousTokenOrComment.type) !== -1","            );","        }","","        /**","         * Check a comment to determine if it is valid for this rule.","         *","         * @param {ASTNode} comment The comment node to process.","         * @param {Object} options The options for checking this comment.","         * @returns {boolean} True if the comment is valid, false otherwise.","         */","        function isCommentValid(comment, options) {","","            // 1. Check for default ignore pattern.","            if (DEFAULT_IGNORE_PATTERN.test(comment.value)) {","                return true;","            }","","            // 2. Check for custom ignore pattern.","            const commentWithoutAsterisks = comment.value","                .replace(/\\*/g, \"\");","","            if (options.ignorePatternRegExp && options.ignorePatternRegExp.test(commentWithoutAsterisks)) {","                return true;","            }","","            // 3. Check for inline comments.","            if (options.ignoreInlineComments && isInlineComment(comment)) {","                return true;","            }","","            // 4. Is this a consecutive comment (and are we tolerating those)?","            if (options.ignoreConsecutiveComments && isConsecutiveComment(comment)) {","                return true;","            }","","            // 5. Does the comment start with a possible URL?","            if (MAYBE_URL.test(commentWithoutAsterisks)) {","                return true;","            }","","            // 6. Is the initial word character a letter?","            const commentWordCharsOnly = commentWithoutAsterisks","                .replace(WHITESPACE, \"\");","","            if (commentWordCharsOnly.length === 0) {","                return true;","            }","","            const firstWordChar = commentWordCharsOnly[0];","","            if (!LETTER_PATTERN.test(firstWordChar)) {","                return true;","            }","","            // 7. Check the case of the initial word character.","            const isUppercase = firstWordChar !== firstWordChar.toLocaleLowerCase(),","                isLowercase = firstWordChar !== firstWordChar.toLocaleUpperCase();","","            if (capitalize === \"always\" && isLowercase) {","                return false;","            } else if (capitalize === \"never\" && isUppercase) {","                return false;","            }","","            return true;","        }","","        /**","         * Process a comment to determine if it needs to be reported.","         *","         * @param {ASTNode} comment The comment node to process.","         * @returns {void}","         */","        function processComment(comment) {","            const options = normalizedOptions[comment.type],","                commentValid = isCommentValid(comment, options);","","            if (!commentValid) {","                const message = capitalize === \"always\"","                    ? ALWAYS_MESSAGE","                    : NEVER_MESSAGE;","","                context.report({","                    node: null,         // Intentionally using loc instead","                    loc: comment.loc,","                    message,","                    fix(fixer) {","                        const match = comment.value.match(LETTER_PATTERN);","","                        return fixer.replaceTextRange(","","                            // Offset match.index by 2 to account for the first 2 characters that start the comment (// or /*)","                            [comment.range[0] + match.index + 2, comment.range[0] + match.index + 3],","                            capitalize === \"always\" ? match[0].toLocaleUpperCase() : match[0].toLocaleLowerCase()","                        );","                    }","                });","            }","        }","","        //----------------------------------------------------------------------","        // Public","        //----------------------------------------------------------------------","","        return {","            Program() {","                const comments = sourceCode.getAllComments();","","                comments.forEach(processComment);","            }","        };","    }","};",""],"l":{"11":1,"12":1,"18":1,"34":1,"64":1,"65":0,"66":0,"69":0,"79":1,"80":0,"95":1,"96":0,"97":0,"99":0,"100":0,"102":0,"111":1,"139":0,"143":0,"166":1,"167":0,"170":0,"184":1,"185":0,"187":0,"200":1,"203":0,"204":0,"208":0,"211":0,"212":0,"216":0,"217":0,"221":0,"222":0,"226":0,"227":0,"231":0,"234":0,"235":0,"238":0,"240":0,"241":0,"245":0,"248":0,"249":0,"250":0,"251":0,"254":0,"263":1,"264":0,"267":0,"268":0,"272":0,"277":0,"279":0,"294":0,"296":0,"298":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/patterns/letters.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/patterns/letters.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":36,"column":0},"end":{"line":36,"column":6405}}},"branchMap":{},"code":["/**"," * @fileoverview Pattern for detecting any letter (even letters outside of ASCII)."," * NOTE: This file was generated using this script in JSCS based on the Unicode 7.0.0 standard: https://github.com/jscs-dev/node-jscs/blob/f5ed14427deb7e7aac84f3056a5aab2d9f3e563e/publish/helpers/generate-patterns.js"," * Do not edit this file by hand-- please use https://github.com/mathiasbynens/regenerate to regenerate the regular expression exported from this file."," * @author Kevin Partington"," * @license MIT License (from JSCS). See below."," */","","/*"," * The MIT License (MIT)"," *"," * Copyright 2013-2016 Dulin Marat and other contributors"," *"," * Permission is hereby granted, free of charge, to any person obtaining"," * a copy of this software and associated documentation files (the"," * \"Software\"), to deal in the Software without restriction, including"," * without limitation the rights to use, copy, modify, merge, publish,"," * distribute, sublicense, and/or sell copies of the Software, and to"," * permit persons to whom the Software is furnished to do so, subject to"," * the following conditions:"," *"," * The above copyright notice and this permission notice shall be"," * included in all copies or substantial portions of the Software."," *"," * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,"," * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF"," * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND"," * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE"," * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION"," * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION"," * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."," */","","\"use strict\";","","module.exports = /[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]/;","",""],"l":{"36":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/class-methods-use-this.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/class-methods-use-this.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":32,"loc":{"start":{"line":32,"column":10},"end":{"line":32,"column":20}}},"2":{"name":"enterFunction","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":33}}},"3":{"name":"isInstanceMethod","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":40}}},"4":{"name":"isIncludedInstanceMethod","line":64,"loc":{"start":{"line":64,"column":8},"end":{"line":64,"column":48}}},"5":{"name":"exitFunction","line":76,"loc":{"start":{"line":76,"column":8},"end":{"line":76,"column":36}}},"6":{"name":"markThisUsed","line":95,"loc":{"start":{"line":95,"column":8},"end":{"line":95,"column":32}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":110,"column":2}},"2":{"start":{"line":33,"column":8},"end":{"line":33,"column":87}},"3":{"start":{"line":34,"column":8},"end":{"line":34,"column":66}},"4":{"start":{"line":36,"column":8},"end":{"line":36,"column":25}},"5":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"6":{"start":{"line":45,"column":12},"end":{"line":45,"column":30}},"7":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"8":{"start":{"line":55,"column":12},"end":{"line":55,"column":99}},"9":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"10":{"start":{"line":65,"column":12},"end":{"line":65,"column":79}},"11":{"start":{"line":76,"column":8},"end":{"line":88,"column":9}},"12":{"start":{"line":77,"column":12},"end":{"line":77,"column":47}},"13":{"start":{"line":79,"column":12},"end":{"line":87,"column":13}},"14":{"start":{"line":80,"column":16},"end":{"line":86,"column":19}},"15":{"start":{"line":95,"column":8},"end":{"line":99,"column":9}},"16":{"start":{"line":96,"column":12},"end":{"line":98,"column":13}},"17":{"start":{"line":97,"column":16},"end":{"line":97,"column":47}},"18":{"start":{"line":101,"column":8},"end":{"line":108,"column":10}}},"branchMap":{"1":{"line":33,"type":"cond-expr","locations":[{"start":{"line":33,"column":44},"end":{"line":33,"column":81}},{"start":{"line":33,"column":84},"end":{"line":33,"column":86}}]},"2":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":38},"end":{"line":34,"column":58}},{"start":{"line":34,"column":62},"end":{"line":34,"column":64}}]},"3":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":19},"end":{"line":55,"column":31}},{"start":{"line":55,"column":35},"end":{"line":55,"column":62}},{"start":{"line":55,"column":66},"end":{"line":55,"column":98}}]},"4":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":19},"end":{"line":65,"column":41}},{"start":{"line":65,"column":45},"end":{"line":65,"column":78}}]},"5":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":12}},{"start":{"line":79,"column":12},"end":{"line":79,"column":12}}]},"6":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":53}},{"start":{"line":79,"column":57},"end":{"line":79,"column":72}}]},"7":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":12},"end":{"line":96,"column":12}},{"start":{"line":96,"column":12},"end":{"line":96,"column":12}}]}},"code":["/**"," * @fileoverview Rule to enforce that all class methods use 'this'."," * @author Patrick Williams"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce that class methods utilize `this`\",","            category: \"Best Practices\",","            recommended: false","        },","        schema: [{","            type: \"object\",","            properties: {","                exceptMethods: {","                    type: \"array\",","                    items: {","                        type: \"string\"","                    }","                }","            },","            additionalProperties: false","        }]","    },","    create(context) {","        const config = context.options[0] ? Object.assign({}, context.options[0]) : {};","        const exceptMethods = new Set(config.exceptMethods || []);","","        const stack = [];","","        /**","         * Initializes the current context to false and pushes it onto the stack.","         * These booleans represent whether 'this' has been used in the context.","         * @returns {void}","         * @private","         */","        function enterFunction() {","            stack.push(false);","        }","","        /**","         * Check if the node is an instance method","         * @param {ASTNode} node - node to check","         * @returns {boolean} True if its an instance method","         * @private","         */","        function isInstanceMethod(node) {","            return !node.static && node.kind !== \"constructor\" && node.type === \"MethodDefinition\";","        }","","        /**","         * Check if the node is an instance method not excluded by config","         * @param {ASTNode} node - node to check","         * @returns {boolean} True if it is an instance method, and not excluded by config","         * @private","         */","        function isIncludedInstanceMethod(node) {","            return isInstanceMethod(node) && !exceptMethods.has(node.key.name);","        }","","        /**","         * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.","         * Static methods and the constructor are exempt.","         * Then pops the context off the stack.","         * @param {ASTNode} node - A function node that was entered.","         * @returns {void}","         * @private","         */","        function exitFunction(node) {","            const methodUsesThis = stack.pop();","","            if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {","                context.report({","                    node,","                    message: \"Expected 'this' to be used by class method '{{classMethod}}'.\",","                    data: {","                        classMethod: node.parent.key.name","                    }","                });","            }","        }","","        /**","         * Mark the current context as having used 'this'.","         * @returns {void}","         * @private","         */","        function markThisUsed() {","            if (stack.length) {","                stack[stack.length - 1] = true;","            }","        }","","        return {","            FunctionDeclaration: enterFunction,","            \"FunctionDeclaration:exit\": exitFunction,","            FunctionExpression: enterFunction,","            \"FunctionExpression:exit\": exitFunction,","            ThisExpression: markThisUsed,","            Super: markThisUsed","        };","    }","};",""],"l":{"12":1,"33":0,"34":0,"36":0,"44":1,"45":0,"54":1,"55":0,"64":1,"65":0,"76":1,"77":0,"79":0,"80":0,"95":1,"96":0,"97":0,"101":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/comma-dangle.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/comma-dangle.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0,0,0,0,0,0,0,0,0],"11":[0,0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"isTrailingCommaAllowed","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":42}}},"2":{"name":"normalizeOptions","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":39}}},"3":{"name":"(anonymous_3)","line":129,"loc":{"start":{"line":129,"column":10},"end":{"line":129,"column":20}}},"4":{"name":"getLastItem","line":140,"loc":{"start":{"line":140,"column":8},"end":{"line":140,"column":35}}},"5":{"name":"getTrailingToken","line":172,"loc":{"start":{"line":172,"column":8},"end":{"line":172,"column":50}}},"6":{"name":"isMultiline","line":198,"loc":{"start":{"line":198,"column":8},"end":{"line":198,"column":35}}},"7":{"name":"forbidTrailingComma","line":219,"loc":{"start":{"line":219,"column":8},"end":{"line":219,"column":43}}},"8":{"name":"(anonymous_8)","line":233,"loc":{"start":{"line":233,"column":23},"end":{"line":233,"column":31}}},"9":{"name":"forceTrailingComma","line":252,"loc":{"start":{"line":252,"column":8},"end":{"line":252,"column":42}}},"10":{"name":"(anonymous_10)","line":270,"loc":{"start":{"line":270,"column":23},"end":{"line":270,"column":31}}},"11":{"name":"forceTrailingCommaIfMultiline","line":287,"loc":{"start":{"line":287,"column":8},"end":{"line":287,"column":53}}},"12":{"name":"allowTrailingCommaIfMultiline","line":305,"loc":{"start":{"line":305,"column":8},"end":{"line":305,"column":53}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":41}},"3":{"start":{"line":19,"column":0},"end":{"line":25,"column":3}},"4":{"start":{"line":34,"column":0},"end":{"line":40,"column":1}},"5":{"start":{"line":35,"column":4},"end":{"line":39,"column":6}},"6":{"start":{"line":48,"column":0},"end":{"line":71,"column":1}},"7":{"start":{"line":49,"column":4},"end":{"line":59,"column":5}},"8":{"start":{"line":50,"column":8},"end":{"line":58,"column":10}},"9":{"start":{"line":60,"column":4},"end":{"line":68,"column":5}},"10":{"start":{"line":61,"column":8},"end":{"line":67,"column":10}},"11":{"start":{"line":70,"column":4},"end":{"line":70,"column":27}},"12":{"start":{"line":77,"column":0},"end":{"line":337,"column":2}},"13":{"start":{"line":130,"column":8},"end":{"line":130,"column":61}},"14":{"start":{"line":131,"column":8},"end":{"line":131,"column":51}},"15":{"start":{"line":132,"column":8},"end":{"line":132,"column":64}},"16":{"start":{"line":133,"column":8},"end":{"line":133,"column":58}},"17":{"start":{"line":140,"column":8},"end":{"line":161,"column":9}},"18":{"start":{"line":141,"column":12},"end":{"line":160,"column":13}},"19":{"start":{"line":144,"column":20},"end":{"line":144,"column":56}},"20":{"start":{"line":147,"column":20},"end":{"line":147,"column":54}},"21":{"start":{"line":150,"column":20},"end":{"line":150,"column":56}},"22":{"start":{"line":154,"column":20},"end":{"line":154,"column":52}},"23":{"start":{"line":157,"column":20},"end":{"line":157,"column":55}},"24":{"start":{"line":159,"column":20},"end":{"line":159,"column":32}},"25":{"start":{"line":172,"column":8},"end":{"line":188,"column":9}},"26":{"start":{"line":173,"column":12},"end":{"line":187,"column":13}},"27":{"start":{"line":178,"column":20},"end":{"line":178,"column":60}},"28":{"start":{"line":180,"column":20},"end":{"line":180,"column":73}},"29":{"start":{"line":182,"column":20},"end":{"line":184,"column":21}},"30":{"start":{"line":183,"column":24},"end":{"line":183,"column":41}},"31":{"start":{"line":185,"column":20},"end":{"line":185,"column":61}},"32":{"start":{"line":198,"column":8},"end":{"line":209,"column":9}},"33":{"start":{"line":199,"column":12},"end":{"line":199,"column":47}},"34":{"start":{"line":201,"column":12},"end":{"line":203,"column":13}},"35":{"start":{"line":202,"column":16},"end":{"line":202,"column":29}},"36":{"start":{"line":205,"column":12},"end":{"line":205,"column":70}},"37":{"start":{"line":206,"column":12},"end":{"line":206,"column":73}},"38":{"start":{"line":208,"column":12},"end":{"line":208,"column":76}},"39":{"start":{"line":219,"column":8},"end":{"line":238,"column":9}},"40":{"start":{"line":220,"column":12},"end":{"line":220,"column":47}},"41":{"start":{"line":222,"column":12},"end":{"line":224,"column":13}},"42":{"start":{"line":223,"column":16},"end":{"line":223,"column":23}},"43":{"start":{"line":226,"column":12},"end":{"line":226,"column":67}},"44":{"start":{"line":228,"column":12},"end":{"line":237,"column":13}},"45":{"start":{"line":229,"column":16},"end":{"line":236,"column":19}},"46":{"start":{"line":234,"column":24},"end":{"line":234,"column":59}},"47":{"start":{"line":252,"column":8},"end":{"line":275,"column":9}},"48":{"start":{"line":253,"column":12},"end":{"line":253,"column":47}},"49":{"start":{"line":255,"column":12},"end":{"line":257,"column":13}},"50":{"start":{"line":256,"column":16},"end":{"line":256,"column":23}},"51":{"start":{"line":258,"column":12},"end":{"line":261,"column":13}},"52":{"start":{"line":259,"column":16},"end":{"line":259,"column":42}},"53":{"start":{"line":260,"column":16},"end":{"line":260,"column":23}},"54":{"start":{"line":263,"column":12},"end":{"line":263,"column":67}},"55":{"start":{"line":265,"column":12},"end":{"line":274,"column":13}},"56":{"start":{"line":266,"column":16},"end":{"line":273,"column":19}},"57":{"start":{"line":271,"column":24},"end":{"line":271,"column":73}},"58":{"start":{"line":287,"column":8},"end":{"line":293,"column":9}},"59":{"start":{"line":288,"column":12},"end":{"line":292,"column":13}},"60":{"start":{"line":289,"column":16},"end":{"line":289,"column":41}},"61":{"start":{"line":291,"column":16},"end":{"line":291,"column":42}},"62":{"start":{"line":305,"column":8},"end":{"line":309,"column":9}},"63":{"start":{"line":306,"column":12},"end":{"line":308,"column":13}},"64":{"start":{"line":307,"column":16},"end":{"line":307,"column":42}},"65":{"start":{"line":311,"column":8},"end":{"line":317,"column":10}},"66":{"start":{"line":319,"column":8},"end":{"line":335,"column":10}}},"branchMap":{"1":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":39}},{"start":{"line":37,"column":8},"end":{"line":37,"column":40}},{"start":{"line":38,"column":8},"end":{"line":38,"column":52}}]},"2":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"3":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":60,"column":4}},{"start":{"line":60,"column":4},"end":{"line":60,"column":4}}]},"4":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":39}},{"start":{"line":60,"column":43},"end":{"line":60,"column":63}}]},"5":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":20},"end":{"line":62,"column":38}},{"start":{"line":62,"column":42},"end":{"line":62,"column":64}}]},"6":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":21},"end":{"line":63,"column":40}},{"start":{"line":63,"column":44},"end":{"line":63,"column":67}}]},"7":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":21},"end":{"line":64,"column":40}},{"start":{"line":64,"column":44},"end":{"line":64,"column":67}}]},"8":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":21},"end":{"line":65,"column":40}},{"start":{"line":65,"column":44},"end":{"line":65,"column":67}}]},"9":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":23},"end":{"line":66,"column":44}},{"start":{"line":66,"column":48},"end":{"line":66,"column":73}}]},"10":{"line":141,"type":"switch","locations":[{"start":{"line":142,"column":16},"end":{"line":142,"column":40}},{"start":{"line":143,"column":16},"end":{"line":144,"column":56}},{"start":{"line":145,"column":16},"end":{"line":145,"column":39}},{"start":{"line":146,"column":16},"end":{"line":147,"column":54}},{"start":{"line":148,"column":16},"end":{"line":148,"column":41}},{"start":{"line":149,"column":16},"end":{"line":150,"column":56}},{"start":{"line":151,"column":16},"end":{"line":151,"column":43}},{"start":{"line":152,"column":16},"end":{"line":152,"column":42}},{"start":{"line":153,"column":16},"end":{"line":154,"column":52}},{"start":{"line":155,"column":16},"end":{"line":155,"column":38}},{"start":{"line":156,"column":16},"end":{"line":157,"column":55}},{"start":{"line":158,"column":16},"end":{"line":159,"column":32}}]},"11":{"line":173,"type":"switch","locations":[{"start":{"line":174,"column":16},"end":{"line":174,"column":40}},{"start":{"line":175,"column":16},"end":{"line":175,"column":39}},{"start":{"line":176,"column":16},"end":{"line":176,"column":38}},{"start":{"line":177,"column":16},"end":{"line":178,"column":60}},{"start":{"line":179,"column":16},"end":{"line":186,"column":17}}]},"12":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":20},"end":{"line":182,"column":20}},{"start":{"line":182,"column":20},"end":{"line":182,"column":20}}]},"13":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":12},"end":{"line":201,"column":12}},{"start":{"line":201,"column":12},"end":{"line":201,"column":12}}]},"14":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":12},"end":{"line":222,"column":12}},{"start":{"line":222,"column":12},"end":{"line":222,"column":12}}]},"15":{"line":222,"type":"binary-expr","locations":[{"start":{"line":222,"column":16},"end":{"line":222,"column":25}},{"start":{"line":222,"column":30},"end":{"line":222,"column":63}},{"start":{"line":222,"column":67},"end":{"line":222,"column":102}}]},"16":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":12},"end":{"line":228,"column":12}},{"start":{"line":228,"column":12},"end":{"line":228,"column":12}}]},"17":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":12},"end":{"line":255,"column":12}},{"start":{"line":255,"column":12},"end":{"line":255,"column":12}}]},"18":{"line":255,"type":"binary-expr","locations":[{"start":{"line":255,"column":16},"end":{"line":255,"column":25}},{"start":{"line":255,"column":30},"end":{"line":255,"column":63}},{"start":{"line":255,"column":67},"end":{"line":255,"column":102}}]},"19":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":12},"end":{"line":258,"column":12}},{"start":{"line":258,"column":12},"end":{"line":258,"column":12}}]},"20":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":12},"end":{"line":265,"column":12}},{"start":{"line":265,"column":12},"end":{"line":265,"column":12}}]},"21":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":12}},{"start":{"line":288,"column":12},"end":{"line":288,"column":12}}]},"22":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":12},"end":{"line":306,"column":12}},{"start":{"line":306,"column":12},"end":{"line":306,"column":12}}]}},"code":["/**"," * @fileoverview Rule to forbid or enforce dangling commas."," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const DEFAULT_OPTIONS = Object.freeze({","    arrays: \"never\",","    objects: \"never\",","    imports: \"never\",","    exports: \"never\",","    functions: \"ignore\"","});","","/**"," * Checks whether or not a trailing comma is allowed in a given node."," * If the `lastItem` is `RestElement` or `RestProperty`, it disallows trailing commas."," *"," * @param {ASTNode} lastItem - The node of the last element in the given node."," * @returns {boolean} `true` if a trailing comma is allowed."," */","function isTrailingCommaAllowed(lastItem) {","    return !(","        lastItem.type === \"RestElement\" ||","        lastItem.type === \"RestProperty\" ||","        lastItem.type === \"ExperimentalRestProperty\"","    );","}","","/**"," * Normalize option value."," *"," * @param {string|Object|undefined} optionValue - The 1st option value to normalize."," * @returns {Object} The normalized option value."," */","function normalizeOptions(optionValue) {","    if (typeof optionValue === \"string\") {","        return {","            arrays: optionValue,","            objects: optionValue,","            imports: optionValue,","            exports: optionValue,","","            // For backward compatibility, always ignore functions.","            functions: \"ignore\"","        };","    }","    if (typeof optionValue === \"object\" && optionValue !== null) {","        return {","            arrays: optionValue.arrays || DEFAULT_OPTIONS.arrays,","            objects: optionValue.objects || DEFAULT_OPTIONS.objects,","            imports: optionValue.imports || DEFAULT_OPTIONS.imports,","            exports: optionValue.exports || DEFAULT_OPTIONS.exports,","            functions: optionValue.functions || DEFAULT_OPTIONS.functions","        };","    }","","    return DEFAULT_OPTIONS;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow trailing commas\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"code\",","","        schema: [","            {","                defs: {","                    value: {","                        enum: [","                            \"always\",","                            \"always-multiline\",","                            \"only-multiline\",","                            \"never\"","                        ]","                    },","                    valueWithIgnore: {","                        anyOf: [","                            {","                                $ref: \"#/defs/value\"","                            },","                            {","                                enum: [\"ignore\"]","                            }","                        ]","                    }","                },","                anyOf: [","                    {","                        $ref: \"#/defs/value\"","                    },","                    {","                        type: \"object\",","                        properties: {","                            arrays: { $refs: \"#/defs/valueWithIgnore\" },","                            objects: { $refs: \"#/defs/valueWithIgnore\" },","                            imports: { $refs: \"#/defs/valueWithIgnore\" },","                            exports: { $refs: \"#/defs/valueWithIgnore\" },","                            functions: { $refs: \"#/defs/valueWithIgnore\" }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","        const options = normalizeOptions(context.options[0]);","        const sourceCode = context.getSourceCode();","        const UNEXPECTED_MESSAGE = \"Unexpected trailing comma.\";","        const MISSING_MESSAGE = \"Missing trailing comma.\";","","        /**","         * Gets the last item of the given node.","         * @param {ASTNode} node - The node to get.","         * @returns {ASTNode|null} The last node or null.","         */","        function getLastItem(node) {","            switch (node.type) {","                case \"ObjectExpression\":","                case \"ObjectPattern\":","                    return lodash.last(node.properties);","                case \"ArrayExpression\":","                case \"ArrayPattern\":","                    return lodash.last(node.elements);","                case \"ImportDeclaration\":","                case \"ExportNamedDeclaration\":","                    return lodash.last(node.specifiers);","                case \"FunctionDeclaration\":","                case \"FunctionExpression\":","                case \"ArrowFunctionExpression\":","                    return lodash.last(node.params);","                case \"CallExpression\":","                case \"NewExpression\":","                    return lodash.last(node.arguments);","                default:","                    return null;","            }","        }","","        /**","         * Gets the trailing comma token of the given node.","         * If the trailing comma does not exist, this returns the token which is","         * the insertion point of the trailing comma token.","         *","         * @param {ASTNode} node - The node to get.","         * @param {ASTNode} lastItem - The last item of the node.","         * @returns {Token} The trailing comma token or the insertion point.","         */","        function getTrailingToken(node, lastItem) {","            switch (node.type) {","                case \"ObjectExpression\":","                case \"ArrayExpression\":","                case \"CallExpression\":","                case \"NewExpression\":","                    return sourceCode.getLastToken(node, 1);","                default: {","                    const nextToken = sourceCode.getTokenAfter(lastItem);","","                    if (astUtils.isCommaToken(nextToken)) {","                        return nextToken;","                    }","                    return sourceCode.getLastToken(lastItem);","                }","            }","        }","","        /**","         * Checks whether or not a given node is multiline.","         * This rule handles a given node as multiline when the closing parenthesis","         * and the last element are not on the same line.","         *","         * @param {ASTNode} node - A node to check.","         * @returns {boolean} `true` if the node is multiline.","         */","        function isMultiline(node) {","            const lastItem = getLastItem(node);","","            if (!lastItem) {","                return false;","            }","","            const penultimateToken = getTrailingToken(node, lastItem);","            const lastToken = sourceCode.getTokenAfter(penultimateToken);","","            return lastToken.loc.end.line !== penultimateToken.loc.end.line;","        }","","        /**","         * Reports a trailing comma if it exists.","         *","         * @param {ASTNode} node - A node to check. Its type is one of","         *   ObjectExpression, ObjectPattern, ArrayExpression, ArrayPattern,","         *   ImportDeclaration, and ExportNamedDeclaration.","         * @returns {void}","         */","        function forbidTrailingComma(node) {","            const lastItem = getLastItem(node);","","            if (!lastItem || (node.type === \"ImportDeclaration\" && lastItem.type !== \"ImportSpecifier\")) {","                return;","            }","","            const trailingToken = getTrailingToken(node, lastItem);","","            if (astUtils.isCommaToken(trailingToken)) {","                context.report({","                    node: lastItem,","                    loc: trailingToken.loc.start,","                    message: UNEXPECTED_MESSAGE,","                    fix(fixer) {","                        return fixer.remove(trailingToken);","                    }","                });","            }","        }","","        /**","         * Reports the last element of a given node if it does not have a trailing","         * comma.","         *","         * If a given node is `ArrayPattern` which has `RestElement`, the trailing","         * comma is disallowed, so report if it exists.","         *","         * @param {ASTNode} node - A node to check. Its type is one of","         *   ObjectExpression, ObjectPattern, ArrayExpression, ArrayPattern,","         *   ImportDeclaration, and ExportNamedDeclaration.","         * @returns {void}","         */","        function forceTrailingComma(node) {","            const lastItem = getLastItem(node);","","            if (!lastItem || (node.type === \"ImportDeclaration\" && lastItem.type !== \"ImportSpecifier\")) {","                return;","            }","            if (!isTrailingCommaAllowed(lastItem)) {","                forbidTrailingComma(node);","                return;","            }","","            const trailingToken = getTrailingToken(node, lastItem);","","            if (trailingToken.value !== \",\") {","                context.report({","                    node: lastItem,","                    loc: trailingToken.loc.end,","                    message: MISSING_MESSAGE,","                    fix(fixer) {","                        return fixer.insertTextAfter(trailingToken, \",\");","                    }","                });","            }","        }","","        /**","         * If a given node is multiline, reports the last element of a given node","         * when it does not have a trailing comma.","         * Otherwise, reports a trailing comma if it exists.","         *","         * @param {ASTNode} node - A node to check. Its type is one of","         *   ObjectExpression, ObjectPattern, ArrayExpression, ArrayPattern,","         *   ImportDeclaration, and ExportNamedDeclaration.","         * @returns {void}","         */","        function forceTrailingCommaIfMultiline(node) {","            if (isMultiline(node)) {","                forceTrailingComma(node);","            } else {","                forbidTrailingComma(node);","            }","        }","","        /**","         * Only if a given node is not multiline, reports the last element of a given node","         * when it does not have a trailing comma.","         * Otherwise, reports a trailing comma if it exists.","         *","         * @param {ASTNode} node - A node to check. Its type is one of","         *   ObjectExpression, ObjectPattern, ArrayExpression, ArrayPattern,","         *   ImportDeclaration, and ExportNamedDeclaration.","         * @returns {void}","         */","        function allowTrailingCommaIfMultiline(node) {","            if (!isMultiline(node)) {","                forbidTrailingComma(node);","            }","        }","","        const predicate = {","            always: forceTrailingComma,","            \"always-multiline\": forceTrailingCommaIfMultiline,","            \"only-multiline\": allowTrailingCommaIfMultiline,","            never: forbidTrailingComma,","            ignore: lodash.noop","        };","","        return {","            ObjectExpression: predicate[options.objects],","            ObjectPattern: predicate[options.objects],","","            ArrayExpression: predicate[options.arrays],","            ArrayPattern: predicate[options.arrays],","","            ImportDeclaration: predicate[options.imports],","","            ExportNamedDeclaration: predicate[options.exports],","","            FunctionDeclaration: predicate[options.functions],","            FunctionExpression: predicate[options.functions],","            ArrowFunctionExpression: predicate[options.functions],","            CallExpression: predicate[options.functions],","            NewExpression: predicate[options.functions]","        };","    }","};",""],"l":{"12":1,"13":1,"19":1,"34":1,"35":0,"48":1,"49":0,"50":0,"60":0,"61":0,"70":0,"77":1,"130":0,"131":0,"132":0,"133":0,"140":1,"141":0,"144":0,"147":0,"150":0,"154":0,"157":0,"159":0,"172":1,"173":0,"178":0,"180":0,"182":0,"183":0,"185":0,"198":1,"199":0,"201":0,"202":0,"205":0,"206":0,"208":0,"219":1,"220":0,"222":0,"223":0,"226":0,"228":0,"229":0,"234":0,"252":1,"253":0,"255":0,"256":0,"258":0,"259":0,"260":0,"263":0,"265":0,"266":0,"271":0,"287":1,"288":0,"289":0,"291":0,"305":1,"306":0,"307":0,"311":0,"319":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/comma-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/comma-spacing.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":39,"loc":{"start":{"line":39,"column":10},"end":{"line":39,"column":20}}},"2":{"name":"report","line":64,"loc":{"start":{"line":64,"column":8},"end":{"line":64,"column":46}}},"3":{"name":"(anonymous_3)","line":67,"loc":{"start":{"line":67,"column":19},"end":{"line":67,"column":27}}},"4":{"name":"validateCommaItemSpacing","line":108,"loc":{"start":{"line":108,"column":8},"end":{"line":108,"column":62}}},"5":{"name":"addNullElementsToIgnoreList","line":131,"loc":{"start":{"line":131,"column":8},"end":{"line":131,"column":51}}},"6":{"name":"(anonymous_6)","line":156,"loc":{"start":{"line":156,"column":26},"end":{"line":156,"column":29}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":183,"column":2}},"3":{"start":{"line":41,"column":8},"end":{"line":41,"column":51}},"4":{"start":{"line":42,"column":8},"end":{"line":42,"column":63}},"5":{"start":{"line":44,"column":8},"end":{"line":47,"column":10}},"6":{"start":{"line":54,"column":8},"end":{"line":54,"column":39}},"7":{"start":{"line":64,"column":8},"end":{"line":96,"column":9}},"8":{"start":{"line":65,"column":12},"end":{"line":95,"column":15}},"9":{"start":{"line":68,"column":20},"end":{"line":74,"column":21}},"10":{"start":{"line":69,"column":24},"end":{"line":71,"column":25}},"11":{"start":{"line":70,"column":28},"end":{"line":70,"column":69}},"12":{"start":{"line":72,"column":24},"end":{"line":72,"column":64}},"13":{"start":{"line":75,"column":20},"end":{"line":75,"column":35}},"14":{"start":{"line":76,"column":20},"end":{"line":76,"column":39}},"15":{"start":{"line":78,"column":20},"end":{"line":84,"column":21}},"16":{"start":{"line":79,"column":24},"end":{"line":79,"column":51}},"17":{"start":{"line":80,"column":24},"end":{"line":80,"column":44}},"18":{"start":{"line":82,"column":24},"end":{"line":82,"column":46}},"19":{"start":{"line":83,"column":24},"end":{"line":83,"column":49}},"20":{"start":{"line":86,"column":20},"end":{"line":86,"column":73}},"21":{"start":{"line":108,"column":8},"end":{"line":124,"column":9}},"22":{"start":{"line":109,"column":12},"end":{"line":113,"column":13}},"23":{"start":{"line":112,"column":16},"end":{"line":112,"column":58}},"24":{"start":{"line":115,"column":12},"end":{"line":117,"column":13}},"25":{"start":{"line":116,"column":16},"end":{"line":116,"column":23}},"26":{"start":{"line":119,"column":12},"end":{"line":123,"column":13}},"27":{"start":{"line":122,"column":16},"end":{"line":122,"column":58}},"28":{"start":{"line":131,"column":8},"end":{"line":149,"column":9}},"29":{"start":{"line":132,"column":12},"end":{"line":132,"column":63}},"30":{"start":{"line":134,"column":12},"end":{"line":148,"column":15}},"31":{"start":{"line":135,"column":16},"end":{"line":135,"column":26}},"32":{"start":{"line":137,"column":16},"end":{"line":145,"column":17}},"33":{"start":{"line":138,"column":20},"end":{"line":138,"column":68}},"34":{"start":{"line":140,"column":20},"end":{"line":142,"column":21}},"35":{"start":{"line":141,"column":24},"end":{"line":141,"column":56}},"36":{"start":{"line":144,"column":20},"end":{"line":144,"column":62}},"37":{"start":{"line":147,"column":16},"end":{"line":147,"column":38}},"38":{"start":{"line":155,"column":8},"end":{"line":180,"column":10}},"39":{"start":{"line":157,"column":16},"end":{"line":175,"column":19}},"40":{"start":{"line":159,"column":20},"end":{"line":161,"column":21}},"41":{"start":{"line":160,"column":24},"end":{"line":160,"column":31}},"42":{"start":{"line":163,"column":20},"end":{"line":165,"column":21}},"43":{"start":{"line":164,"column":24},"end":{"line":164,"column":31}},"44":{"start":{"line":167,"column":20},"end":{"line":167,"column":67}},"45":{"start":{"line":168,"column":20},"end":{"line":168,"column":63}},"46":{"start":{"line":170,"column":20},"end":{"line":174,"column":30}}},"branchMap":{"1":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":41},"end":{"line":45,"column":68}},{"start":{"line":45,"column":71},"end":{"line":45,"column":76}}]},"2":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":40},"end":{"line":46,"column":66}},{"start":{"line":46,"column":69},"end":{"line":46,"column":73}}]},"3":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":20},"end":{"line":68,"column":20}},{"start":{"line":68,"column":20},"end":{"line":68,"column":20}}]},"4":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":24},"end":{"line":69,"column":24}},{"start":{"line":69,"column":24},"end":{"line":69,"column":24}}]},"5":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":20},"end":{"line":78,"column":20}},{"start":{"line":78,"column":20},"end":{"line":78,"column":20}}]},"6":{"line":89,"type":"cond-expr","locations":[{"start":{"line":90,"column":20},"end":{"line":90,"column":54}},{"start":{"line":91,"column":20},"end":{"line":91,"column":59}}]},"7":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":12},"end":{"line":109,"column":12}},{"start":{"line":109,"column":12},"end":{"line":109,"column":12}}]},"8":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":16},"end":{"line":109,"column":27}},{"start":{"line":109,"column":31},"end":{"line":109,"column":84}},{"start":{"line":110,"column":21},"end":{"line":110,"column":98}}]},"9":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":12}},{"start":{"line":115,"column":12},"end":{"line":115,"column":12}}]},"10":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":16},"end":{"line":115,"column":28}},{"start":{"line":115,"column":32},"end":{"line":115,"column":46}},{"start":{"line":115,"column":50},"end":{"line":115,"column":78}}]},"11":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":12},"end":{"line":119,"column":12}},{"start":{"line":119,"column":12},"end":{"line":119,"column":12}}]},"12":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":16},"end":{"line":119,"column":28}},{"start":{"line":119,"column":32},"end":{"line":119,"column":86}},{"start":{"line":120,"column":21},"end":{"line":120,"column":98}}]},"13":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":16},"end":{"line":137,"column":16}},{"start":{"line":137,"column":16},"end":{"line":137,"column":16}}]},"14":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":20},"end":{"line":140,"column":20}},{"start":{"line":140,"column":20},"end":{"line":140,"column":20}}]},"15":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":20},"end":{"line":159,"column":20}},{"start":{"line":159,"column":20},"end":{"line":159,"column":20}}]},"16":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":20},"end":{"line":163,"column":20}},{"start":{"line":163,"column":20},"end":{"line":163,"column":20}}]},"17":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":24},"end":{"line":163,"column":29}},{"start":{"line":163,"column":33},"end":{"line":163,"column":57}}]},"18":{"line":172,"type":"cond-expr","locations":[{"start":{"line":172,"column":112},"end":{"line":172,"column":116}},{"start":{"line":172,"column":119},"end":{"line":172,"column":132}}]},"19":{"line":172,"type":"binary-expr","locations":[{"start":{"line":172,"column":30},"end":{"line":172,"column":66}},{"start":{"line":172,"column":70},"end":{"line":172,"column":109}}]},"20":{"line":173,"type":"cond-expr","locations":[{"start":{"line":173,"column":66},"end":{"line":173,"column":70}},{"start":{"line":173,"column":73},"end":{"line":173,"column":82}}]}},"code":["/**"," * @fileoverview Comma spacing - validates spacing before and after comma"," * @author Vignesh Anand aka vegetableman."," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing before and after commas\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    before: {","                        type: \"boolean\"","                    },","                    after: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const sourceCode = context.getSourceCode();","        const tokensAndComments = sourceCode.tokensAndComments;","","        const options = {","            before: context.options[0] ? !!context.options[0].before : false,","            after: context.options[0] ? !!context.options[0].after : true","        };","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        // list of comma tokens to ignore for the check of leading whitespace","        const commaTokensToIgnore = [];","","        /**","         * Reports a spacing error with an appropriate message.","         * @param {ASTNode} node The binary expression node to report.","         * @param {string} dir Is the error \"before\" or \"after\" the comma?","         * @param {ASTNode} otherNode The node at the left or right of `node`","         * @returns {void}","         * @private","         */","        function report(node, dir, otherNode) {","            context.report({","                node,","                fix(fixer) {","                    if (options[dir]) {","                        if (dir === \"before\") {","                            return fixer.insertTextBefore(node, \" \");","                        }","                        return fixer.insertTextAfter(node, \" \");","","                    }","                    let start, end;","                    const newText = \"\";","","                    if (dir === \"before\") {","                        start = otherNode.range[1];","                        end = node.range[0];","                    } else {","                        start = node.range[1];","                        end = otherNode.range[0];","                    }","","                    return fixer.replaceTextRange([start, end], newText);","","                },","                message: options[dir]","                  ? \"A space is required {{dir}} ','.\"","                  : \"There should be no space {{dir}} ','.\",","                data: {","                    dir","                }","            });","        }","","        /**","         * Validates the spacing around a comma token.","         * @param {Object} tokens - The tokens to be validated.","         * @param {Token} tokens.comma The token representing the comma.","         * @param {Token} [tokens.left] The last token before the comma.","         * @param {Token} [tokens.right] The first token after the comma.","         * @param {Token|ASTNode} reportItem The item to use when reporting an error.","         * @returns {void}","         * @private","         */","        function validateCommaItemSpacing(tokens, reportItem) {","            if (tokens.left && astUtils.isTokenOnSameLine(tokens.left, tokens.comma) &&","                    (options.before !== sourceCode.isSpaceBetweenTokens(tokens.left, tokens.comma))","            ) {","                report(reportItem, \"before\", tokens.left);","            }","","            if (tokens.right && !options.after && tokens.right.type === \"Line\") {","                return;","            }","","            if (tokens.right && astUtils.isTokenOnSameLine(tokens.comma, tokens.right) &&","                    (options.after !== sourceCode.isSpaceBetweenTokens(tokens.comma, tokens.right))","            ) {","                report(reportItem, \"after\", tokens.right);","            }","        }","","        /**","         * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.","         * @param {ASTNode} node An ArrayExpression or ArrayPattern node.","         * @returns {void}","         */","        function addNullElementsToIgnoreList(node) {","            let previousToken = sourceCode.getFirstToken(node);","","            node.elements.forEach(element => {","                let token;","","                if (element === null) {","                    token = sourceCode.getTokenAfter(previousToken);","","                    if (astUtils.isCommaToken(token)) {","                        commaTokensToIgnore.push(token);","                    }","                } else {","                    token = sourceCode.getTokenAfter(element);","                }","","                previousToken = token;","            });","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            \"Program:exit\"() {","                tokensAndComments.forEach((token, i) => {","","                    if (!astUtils.isCommaToken(token)) {","                        return;","                    }","","                    if (token && token.type === \"JSXText\") {","                        return;","                    }","","                    const previousToken = tokensAndComments[i - 1];","                    const nextToken = tokensAndComments[i + 1];","","                    validateCommaItemSpacing({","                        comma: token,","                        left: astUtils.isCommaToken(previousToken) || commaTokensToIgnore.indexOf(token) > -1 ? null : previousToken,","                        right: astUtils.isCommaToken(nextToken) ? null : nextToken","                    }, token);","                });","            },","            ArrayExpression: addNullElementsToIgnoreList,","            ArrayPattern: addNullElementsToIgnoreList","","        };","","    }","};",""],"l":{"7":1,"13":1,"41":0,"42":0,"44":0,"54":0,"64":1,"65":0,"68":0,"69":0,"70":0,"72":0,"75":0,"76":0,"78":0,"79":0,"80":0,"82":0,"83":0,"86":0,"108":1,"109":0,"112":0,"115":0,"116":0,"119":0,"122":0,"131":1,"132":0,"134":0,"135":0,"137":0,"138":0,"140":0,"141":0,"144":0,"147":0,"155":0,"157":0,"159":0,"160":0,"163":0,"164":0,"167":0,"168":0,"170":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/comma-style.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/comma-style.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"(anonymous_1)","line":41,"loc":{"start":{"line":41,"column":10},"end":{"line":41,"column":20}}},"2":{"name":"getReplacedText","line":73,"loc":{"start":{"line":73,"column":8},"end":{"line":73,"column":50}}},"3":{"name":"getFixerFunction","line":98,"loc":{"start":{"line":98,"column":8},"end":{"line":98,"column":94}}},"4":{"name":"(anonymous_4)","line":104,"loc":{"start":{"line":104,"column":19},"end":{"line":104,"column":35}}},"5":{"name":"validateCommaItemSpacing","line":118,"loc":{"start":{"line":118,"column":8},"end":{"line":118,"column":103}}},"6":{"name":"validateComma","line":169,"loc":{"start":{"line":169,"column":8},"end":{"line":169,"column":47}}},"7":{"name":"(anonymous_7)","line":245,"loc":{"start":{"line":245,"column":40},"end":{"line":245,"column":55}}},"8":{"name":"(anonymous_8)","line":250,"loc":{"start":{"line":250,"column":37},"end":{"line":250,"column":52}}},"9":{"name":"(anonymous_9)","line":255,"loc":{"start":{"line":255,"column":34},"end":{"line":255,"column":49}}},"10":{"name":"(anonymous_10)","line":260,"loc":{"start":{"line":260,"column":36},"end":{"line":260,"column":51}}},"11":{"name":"(anonymous_11)","line":265,"loc":{"start":{"line":265,"column":33},"end":{"line":265,"column":48}}},"12":{"name":"(anonymous_12)","line":270,"loc":{"start":{"line":270,"column":40},"end":{"line":270,"column":55}}},"13":{"name":"(anonymous_13)","line":275,"loc":{"start":{"line":275,"column":39},"end":{"line":275,"column":54}}},"14":{"name":"(anonymous_14)","line":280,"loc":{"start":{"line":280,"column":44},"end":{"line":280,"column":59}}},"15":{"name":"(anonymous_15)","line":285,"loc":{"start":{"line":285,"column":35},"end":{"line":285,"column":50}}},"16":{"name":"(anonymous_16)","line":290,"loc":{"start":{"line":290,"column":38},"end":{"line":290,"column":53}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":297,"column":2}},"3":{"start":{"line":42,"column":8},"end":{"line":43,"column":49}},"4":{"start":{"line":44,"column":8},"end":{"line":52,"column":10}},"5":{"start":{"line":54,"column":8},"end":{"line":60,"column":9}},"6":{"start":{"line":55,"column":12},"end":{"line":55,"column":68}},"7":{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},"8":{"start":{"line":58,"column":16},"end":{"line":58,"column":77}},"9":{"start":{"line":73,"column":8},"end":{"line":87,"column":9}},"10":{"start":{"line":74,"column":12},"end":{"line":86,"column":13}},"11":{"start":{"line":76,"column":20},"end":{"line":76,"column":56}},"12":{"start":{"line":79,"column":20},"end":{"line":79,"column":38}},"13":{"start":{"line":82,"column":20},"end":{"line":82,"column":38}},"14":{"start":{"line":85,"column":20},"end":{"line":85,"column":30}},"15":{"start":{"line":98,"column":8},"end":{"line":107,"column":9}},"16":{"start":{"line":99,"column":12},"end":{"line":101,"column":86}},"17":{"start":{"line":102,"column":12},"end":{"line":102,"column":82}},"18":{"start":{"line":104,"column":12},"end":{"line":106,"column":14}},"19":{"start":{"line":105,"column":16},"end":{"line":105,"column":87}},"20":{"start":{"line":118,"column":8},"end":{"line":160,"column":9}},"21":{"start":{"line":121,"column":12},"end":{"line":159,"column":13}},"22":{"start":{"line":126,"column":19},"end":{"line":159,"column":13}},"23":{"start":{"line":130,"column":16},"end":{"line":138,"column":19}},"24":{"start":{"line":140,"column":19},"end":{"line":159,"column":13}},"25":{"start":{"line":142,"column":16},"end":{"line":146,"column":19}},"26":{"start":{"line":148,"column":19},"end":{"line":159,"column":13}},"27":{"start":{"line":150,"column":16},"end":{"line":158,"column":19}},"28":{"start":{"line":169,"column":8},"end":{"line":236,"column":9}},"29":{"start":{"line":170,"column":12},"end":{"line":171,"column":97}},"30":{"start":{"line":173,"column":12},"end":{"line":235,"column":13}},"31":{"start":{"line":176,"column":16},"end":{"line":176,"column":71}},"32":{"start":{"line":178,"column":16},"end":{"line":213,"column":19}},"33":{"start":{"line":179,"column":20},"end":{"line":182,"column":81}},"34":{"start":{"line":185,"column":20},"end":{"line":187,"column":21}},"35":{"start":{"line":186,"column":24},"end":{"line":186,"column":61}},"36":{"start":{"line":203,"column":20},"end":{"line":206,"column":21}},"37":{"start":{"line":204,"column":24},"end":{"line":205,"column":62}},"38":{"start":{"line":208,"column":20},"end":{"line":212,"column":21}},"39":{"start":{"line":209,"column":24},"end":{"line":209,"column":111}},"40":{"start":{"line":211,"column":24},"end":{"line":211,"column":161}},"41":{"start":{"line":221,"column":16},"end":{"line":234,"column":17}},"42":{"start":{"line":223,"column":20},"end":{"line":224,"column":79}},"43":{"start":{"line":226,"column":20},"end":{"line":233,"column":21}},"44":{"start":{"line":227,"column":24},"end":{"line":232,"column":26}},"45":{"start":{"line":242,"column":8},"end":{"line":242,"column":25}},"46":{"start":{"line":244,"column":8},"end":{"line":248,"column":9}},"47":{"start":{"line":245,"column":12},"end":{"line":247,"column":14}},"48":{"start":{"line":246,"column":16},"end":{"line":246,"column":52}},"49":{"start":{"line":249,"column":8},"end":{"line":253,"column":9}},"50":{"start":{"line":250,"column":12},"end":{"line":252,"column":14}},"51":{"start":{"line":251,"column":16},"end":{"line":251,"column":50}},"52":{"start":{"line":254,"column":8},"end":{"line":258,"column":9}},"53":{"start":{"line":255,"column":12},"end":{"line":257,"column":14}},"54":{"start":{"line":256,"column":16},"end":{"line":256,"column":50}},"55":{"start":{"line":259,"column":8},"end":{"line":263,"column":9}},"56":{"start":{"line":260,"column":12},"end":{"line":262,"column":14}},"57":{"start":{"line":261,"column":16},"end":{"line":261,"column":48}},"58":{"start":{"line":264,"column":8},"end":{"line":268,"column":9}},"59":{"start":{"line":265,"column":12},"end":{"line":267,"column":14}},"60":{"start":{"line":266,"column":16},"end":{"line":266,"column":48}},"61":{"start":{"line":269,"column":8},"end":{"line":273,"column":9}},"62":{"start":{"line":270,"column":12},"end":{"line":272,"column":14}},"63":{"start":{"line":271,"column":16},"end":{"line":271,"column":46}},"64":{"start":{"line":274,"column":8},"end":{"line":278,"column":9}},"65":{"start":{"line":275,"column":12},"end":{"line":277,"column":14}},"66":{"start":{"line":276,"column":16},"end":{"line":276,"column":46}},"67":{"start":{"line":279,"column":8},"end":{"line":283,"column":9}},"68":{"start":{"line":280,"column":12},"end":{"line":282,"column":14}},"69":{"start":{"line":281,"column":16},"end":{"line":281,"column":46}},"70":{"start":{"line":284,"column":8},"end":{"line":288,"column":9}},"71":{"start":{"line":285,"column":12},"end":{"line":287,"column":14}},"72":{"start":{"line":286,"column":16},"end":{"line":286,"column":49}},"73":{"start":{"line":289,"column":8},"end":{"line":293,"column":9}},"74":{"start":{"line":290,"column":12},"end":{"line":292,"column":14}},"75":{"start":{"line":291,"column":16},"end":{"line":291,"column":50}},"76":{"start":{"line":295,"column":8},"end":{"line":295,"column":21}}},"branchMap":{"1":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":22},"end":{"line":42,"column":40}},{"start":{"line":42,"column":44},"end":{"line":42,"column":50}}]},"2":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"3":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":40}},{"start":{"line":54,"column":44},"end":{"line":54,"column":91}}]},"4":{"line":74,"type":"switch","locations":[{"start":{"line":75,"column":16},"end":{"line":76,"column":56}},{"start":{"line":78,"column":16},"end":{"line":79,"column":38}},{"start":{"line":81,"column":16},"end":{"line":82,"column":38}},{"start":{"line":84,"column":16},"end":{"line":85,"column":30}}]},"5":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":12},"end":{"line":121,"column":12}},{"start":{"line":121,"column":12},"end":{"line":121,"column":12}}]},"6":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":16},"end":{"line":121,"column":72}},{"start":{"line":122,"column":20},"end":{"line":122,"column":77}}]},"7":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":19},"end":{"line":126,"column":19}},{"start":{"line":126,"column":19},"end":{"line":126,"column":19}}]},"8":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":23},"end":{"line":126,"column":80}},{"start":{"line":127,"column":20},"end":{"line":127,"column":78}}]},"9":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":19},"end":{"line":140,"column":19}},{"start":{"line":140,"column":19},"end":{"line":140,"column":19}}]},"10":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":23},"end":{"line":140,"column":40}},{"start":{"line":140,"column":44},"end":{"line":140,"column":101}}]},"11":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":19},"end":{"line":148,"column":19}},{"start":{"line":148,"column":19},"end":{"line":148,"column":19}}]},"12":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":23},"end":{"line":148,"column":39}},{"start":{"line":148,"column":43},"end":{"line":148,"column":99}}]},"13":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":32},"end":{"line":171,"column":63}},{"start":{"line":171,"column":67},"end":{"line":171,"column":95}}]},"14":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":12},"end":{"line":173,"column":12}},{"start":{"line":173,"column":12},"end":{"line":173,"column":12}}]},"15":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":16},"end":{"line":173,"column":32}},{"start":{"line":173,"column":36},"end":{"line":173,"column":48}}]},"16":{"line":179,"type":"cond-expr","locations":[{"start":{"line":179,"column":46},"end":{"line":179,"column":77}},{"start":{"line":179,"column":80},"end":{"line":179,"column":97}}]},"17":{"line":180,"type":"cond-expr","locations":[{"start":{"line":180,"column":50},"end":{"line":180,"column":80}},{"start":{"line":180,"column":83},"end":{"line":180,"column":119}}]},"18":{"line":181,"type":"binary-expr","locations":[{"start":{"line":181,"column":37},"end":{"line":181,"column":41}},{"start":{"line":181,"column":45},"end":{"line":181,"column":61}}]},"19":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":20},"end":{"line":185,"column":20}},{"start":{"line":185,"column":20},"end":{"line":185,"column":20}}]},"20":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":24},"end":{"line":185,"column":40}},{"start":{"line":185,"column":44},"end":{"line":185,"column":90}}]},"21":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":20},"end":{"line":203,"column":20}},{"start":{"line":203,"column":20},"end":{"line":203,"column":20}}]},"22":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":20},"end":{"line":208,"column":20}},{"start":{"line":208,"column":20},"end":{"line":208,"column":20}}]},"23":{"line":211,"type":"cond-expr","locations":[{"start":{"line":211,"column":61},"end":{"line":211,"column":102}},{"start":{"line":211,"column":105},"end":{"line":211,"column":160}}]},"24":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":16},"end":{"line":221,"column":16}},{"start":{"line":221,"column":16},"end":{"line":221,"column":16}}]},"25":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":20},"end":{"line":226,"column":20}},{"start":{"line":226,"column":20},"end":{"line":226,"column":20}}]},"26":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":8},"end":{"line":244,"column":8}},{"start":{"line":244,"column":8},"end":{"line":244,"column":8}}]},"27":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":8},"end":{"line":249,"column":8}},{"start":{"line":249,"column":8},"end":{"line":249,"column":8}}]},"28":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":8},"end":{"line":254,"column":8}},{"start":{"line":254,"column":8},"end":{"line":254,"column":8}}]},"29":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":8},"end":{"line":259,"column":8}},{"start":{"line":259,"column":8},"end":{"line":259,"column":8}}]},"30":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":8},"end":{"line":264,"column":8}},{"start":{"line":264,"column":8},"end":{"line":264,"column":8}}]},"31":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":8},"end":{"line":269,"column":8}},{"start":{"line":269,"column":8},"end":{"line":269,"column":8}}]},"32":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":8},"end":{"line":274,"column":8}},{"start":{"line":274,"column":8},"end":{"line":274,"column":8}}]},"33":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":8},"end":{"line":279,"column":8}},{"start":{"line":279,"column":8},"end":{"line":279,"column":8}}]},"34":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":8},"end":{"line":284,"column":8}},{"start":{"line":284,"column":8},"end":{"line":284,"column":8}}]},"35":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":8},"end":{"line":289,"column":8}},{"start":{"line":289,"column":8},"end":{"line":289,"column":8}}]}},"code":["/**"," * @fileoverview Comma style - enforces comma styles of two types: last and first"," * @author Vignesh Anand aka vegetableman"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent comma style\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        fixable: \"code\",","        schema: [","            {","                enum: [\"first\", \"last\"]","            },","            {","                type: \"object\",","                properties: {","                    exceptions: {","                        type: \"object\",","                        additionalProperties: {","                            type: \"boolean\"","                        }","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const style = context.options[0] || \"last\",","            sourceCode = context.getSourceCode();","        const exceptions = {","            ArrayPattern: true,","            ArrowFunctionExpression: true,","            CallExpression: true,","            FunctionDeclaration: true,","            FunctionExpression: true,","            ImportDeclaration: true,","            ObjectPattern: true","        };","","        if (context.options.length === 2 && context.options[1].hasOwnProperty(\"exceptions\")) {","            const keys = Object.keys(context.options[1].exceptions);","","            for (let i = 0; i < keys.length; i++) {","                exceptions[keys[i]] = context.options[1].exceptions[keys[i]];","            }","        }","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Modified text based on the style","         * @param {string} styleType Style type","         * @param {string} text Source code text","         * @returns {string} modified text","         * @private","         */","        function getReplacedText(styleType, text) {","            switch (styleType) {","                case \"between\":","                    return `,${text.replace(\"\\n\", \"\")}`;","","                case \"first\":","                    return `${text},`;","","                case \"last\":","                    return `,${text}`;","","                default:","                    return \"\";","            }","        }","","        /**","         * Determines the fixer function for a given style.","         * @param {string} styleType comma style","         * @param {ASTNode} previousItemToken The token to check.","         * @param {ASTNode} commaToken The token to check.","         * @param {ASTNode} currentItemToken The token to check.","         * @returns {Function} Fixer function","         * @private","         */","        function getFixerFunction(styleType, previousItemToken, commaToken, currentItemToken) {","            const text =","                sourceCode.text.slice(previousItemToken.range[1], commaToken.range[0]) +","                sourceCode.text.slice(commaToken.range[1], currentItemToken.range[0]);","            const range = [previousItemToken.range[1], currentItemToken.range[0]];","","            return function(fixer) {","                return fixer.replaceTextRange(range, getReplacedText(styleType, text));","            };","        }","","        /**","         * Validates the spacing around single items in lists.","         * @param {Token} previousItemToken The last token from the previous item.","         * @param {Token} commaToken The token representing the comma.","         * @param {Token} currentItemToken The first token of the current item.","         * @param {Token} reportItem The item to use when reporting an error.","         * @returns {void}","         * @private","         */","        function validateCommaItemSpacing(previousItemToken, commaToken, currentItemToken, reportItem) {","","            // if single line","            if (astUtils.isTokenOnSameLine(commaToken, currentItemToken) &&","                    astUtils.isTokenOnSameLine(previousItemToken, commaToken)) {","","                // do nothing.","","            } else if (!astUtils.isTokenOnSameLine(commaToken, currentItemToken) &&","                    !astUtils.isTokenOnSameLine(previousItemToken, commaToken)) {","","                // lone comma","                context.report({","                    node: reportItem,","                    loc: {","                        line: commaToken.loc.end.line,","                        column: commaToken.loc.start.column","                    },","                    message: \"Bad line breaking before and after ','.\",","                    fix: getFixerFunction(\"between\", previousItemToken, commaToken, currentItemToken)","                });","","            } else if (style === \"first\" && !astUtils.isTokenOnSameLine(commaToken, currentItemToken)) {","","                context.report({","                    node: reportItem,","                    message: \"',' should be placed first.\",","                    fix: getFixerFunction(style, previousItemToken, commaToken, currentItemToken)","                });","","            } else if (style === \"last\" && astUtils.isTokenOnSameLine(commaToken, currentItemToken)) {","","                context.report({","                    node: reportItem,","                    loc: {","                        line: commaToken.loc.end.line,","                        column: commaToken.loc.end.column","                    },","                    message: \"',' should be placed last.\",","                    fix: getFixerFunction(style, previousItemToken, commaToken, currentItemToken)","                });","            }","        }","","        /**","         * Checks the comma placement with regards to a declaration/property/element","         * @param {ASTNode} node The binary expression node to check","         * @param {string} property The property of the node containing child nodes.","         * @private","         * @returns {void}","         */","        function validateComma(node, property) {","            const items = node[property],","                arrayLiteral = (node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\");","","            if (items.length > 1 || arrayLiteral) {","","                // seed as opening [","                let previousItemToken = sourceCode.getFirstToken(node);","","                items.forEach(item => {","                    const commaToken = item ? sourceCode.getTokenBefore(item) : previousItemToken,","                        currentItemToken = item ? sourceCode.getFirstToken(item) : sourceCode.getTokenAfter(commaToken),","                        reportItem = item || currentItemToken,","                        tokenBeforeComma = sourceCode.getTokenBefore(commaToken);","","                    // Check if previous token is wrapped in parentheses","                    if (tokenBeforeComma && astUtils.isClosingParenToken(tokenBeforeComma)) {","                        previousItemToken = tokenBeforeComma;","                    }","","                    /*","                     * This works by comparing three token locations:","                     * - previousItemToken is the last token of the previous item","                     * - commaToken is the location of the comma before the current item","                     * - currentItemToken is the first token of the current item","                     *","                     * These values get switched around if item is undefined.","                     * previousItemToken will refer to the last token not belonging","                     * to the current item, which could be a comma or an opening","                     * square bracket. currentItemToken could be a comma.","                     *","                     * All comparisons are done based on these tokens directly, so","                     * they are always valid regardless of an undefined item.","                     */","                    if (astUtils.isCommaToken(commaToken)) {","                        validateCommaItemSpacing(previousItemToken, commaToken,","                                currentItemToken, reportItem);","                    }","","                    if (item) {","                        const tokenAfterItem = sourceCode.getTokenAfter(item, astUtils.isNotClosingParenToken);","","                        previousItemToken = tokenAfterItem ? sourceCode.getTokenBefore(tokenAfterItem) : sourceCode.ast.tokens[sourceCode.ast.tokens.length - 1];","                    }","                });","","                /*","                 * Special case for array literals that have empty last items, such","                 * as [ 1, 2, ]. These arrays only have two items show up in the","                 * AST, so we need to look at the token to verify that there's no","                 * dangling comma.","                 */","                if (arrayLiteral) {","","                    const lastToken = sourceCode.getLastToken(node),","                        nextToLastToken = sourceCode.getTokenBefore(lastToken);","","                    if (astUtils.isCommaToken(nextToLastToken)) {","                        validateCommaItemSpacing(","                            sourceCode.getTokenBefore(nextToLastToken),","                            nextToLastToken,","                            lastToken,","                            lastToken","                        );","                    }","                }","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        const nodes = {};","","        if (!exceptions.VariableDeclaration) {","            nodes.VariableDeclaration = function(node) {","                validateComma(node, \"declarations\");","            };","        }","        if (!exceptions.ObjectExpression) {","            nodes.ObjectExpression = function(node) {","                validateComma(node, \"properties\");","            };","        }","        if (!exceptions.ObjectPattern) {","            nodes.ObjectPattern = function(node) {","                validateComma(node, \"properties\");","            };","        }","        if (!exceptions.ArrayExpression) {","            nodes.ArrayExpression = function(node) {","                validateComma(node, \"elements\");","            };","        }","        if (!exceptions.ArrayPattern) {","            nodes.ArrayPattern = function(node) {","                validateComma(node, \"elements\");","            };","        }","        if (!exceptions.FunctionDeclaration) {","            nodes.FunctionDeclaration = function(node) {","                validateComma(node, \"params\");","            };","        }","        if (!exceptions.FunctionExpression) {","            nodes.FunctionExpression = function(node) {","                validateComma(node, \"params\");","            };","        }","        if (!exceptions.ArrowFunctionExpression) {","            nodes.ArrowFunctionExpression = function(node) {","                validateComma(node, \"params\");","            };","        }","        if (!exceptions.CallExpression) {","            nodes.CallExpression = function(node) {","                validateComma(node, \"arguments\");","            };","        }","        if (!exceptions.ImportDeclaration) {","            nodes.ImportDeclaration = function(node) {","                validateComma(node, \"specifiers\");","            };","        }","","        return nodes;","    }","};",""],"l":{"8":1,"14":1,"42":0,"44":0,"54":0,"55":0,"57":0,"58":0,"73":1,"74":0,"76":0,"79":0,"82":0,"85":0,"98":1,"99":0,"102":0,"104":0,"105":0,"118":1,"121":0,"126":0,"130":0,"140":0,"142":0,"148":0,"150":0,"169":1,"170":0,"173":0,"176":0,"178":0,"179":0,"185":0,"186":0,"203":0,"204":0,"208":0,"209":0,"211":0,"221":0,"223":0,"226":0,"227":0,"242":0,"244":0,"245":0,"246":0,"249":0,"250":0,"251":0,"254":0,"255":0,"256":0,"259":0,"260":0,"261":0,"264":0,"265":0,"266":0,"269":0,"270":0,"271":0,"274":0,"275":0,"276":0,"279":0,"280":0,"281":0,"284":0,"285":0,"286":0,"289":0,"290":0,"291":0,"295":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/complexity.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/complexity.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":1,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":55,"loc":{"start":{"line":55,"column":10},"end":{"line":55,"column":20}}},"2":{"name":"startFunction","line":81,"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":33}}},"3":{"name":"endFunction","line":91,"loc":{"start":{"line":91,"column":8},"end":{"line":91,"column":35}}},"4":{"name":"increaseComplexity","line":109,"loc":{"start":{"line":109,"column":8},"end":{"line":109,"column":38}}},"5":{"name":"increaseSwitchComplexity","line":121,"loc":{"start":{"line":121,"column":8},"end":{"line":121,"column":48}}},"6":{"name":"increaseLogicalComplexity","line":135,"loc":{"start":{"line":135,"column":8},"end":{"line":135,"column":49}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":13,"column":33}},"2":{"start":{"line":15,"column":0},"end":{"line":15,"column":41}},"3":{"start":{"line":21,"column":0},"end":{"line":168,"column":2}},"4":{"start":{"line":56,"column":8},"end":{"line":56,"column":42}},"5":{"start":{"line":57,"column":8},"end":{"line":57,"column":27}},"6":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"7":{"start":{"line":60,"column":12},"end":{"line":60,"column":39}},"8":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"9":{"start":{"line":63,"column":12},"end":{"line":63,"column":35}},"10":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"11":{"start":{"line":66,"column":12},"end":{"line":66,"column":31}},"12":{"start":{"line":74,"column":8},"end":{"line":74,"column":23}},"13":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"14":{"start":{"line":82,"column":12},"end":{"line":82,"column":24}},"15":{"start":{"line":91,"column":8},"end":{"line":102,"column":9}},"16":{"start":{"line":92,"column":12},"end":{"line":92,"column":83}},"17":{"start":{"line":93,"column":12},"end":{"line":93,"column":41}},"18":{"start":{"line":95,"column":12},"end":{"line":101,"column":13}},"19":{"start":{"line":96,"column":16},"end":{"line":100,"column":19}},"20":{"start":{"line":109,"column":8},"end":{"line":113,"column":9}},"21":{"start":{"line":110,"column":12},"end":{"line":112,"column":13}},"22":{"start":{"line":111,"column":16},"end":{"line":111,"column":38}},"23":{"start":{"line":121,"column":8},"end":{"line":127,"column":9}},"24":{"start":{"line":124,"column":12},"end":{"line":126,"column":13}},"25":{"start":{"line":125,"column":16},"end":{"line":125,"column":41}},"26":{"start":{"line":135,"column":8},"end":{"line":141,"column":9}},"27":{"start":{"line":138,"column":12},"end":{"line":140,"column":13}},"28":{"start":{"line":139,"column":16},"end":{"line":139,"column":41}},"29":{"start":{"line":147,"column":8},"end":{"line":165,"column":10}}},"branchMap":{"1":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"2":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":38}},{"start":{"line":59,"column":42},"end":{"line":59,"column":74}},{"start":{"line":59,"column":78},"end":{"line":59,"column":112}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"4":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":38}},{"start":{"line":62,"column":42},"end":{"line":62,"column":70}},{"start":{"line":62,"column":74},"end":{"line":62,"column":104}}]},"5":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":8}},{"start":{"line":65,"column":8},"end":{"line":65,"column":8}}]},"6":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":12},"end":{"line":95,"column":12}},{"start":{"line":95,"column":12},"end":{"line":95,"column":12}}]},"7":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":12},"end":{"line":110,"column":12}},{"start":{"line":110,"column":12},"end":{"line":110,"column":12}}]},"8":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":12},"end":{"line":124,"column":12}},{"start":{"line":124,"column":12},"end":{"line":124,"column":12}}]},"9":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":12},"end":{"line":138,"column":12}},{"start":{"line":138,"column":12},"end":{"line":138,"column":12}}]}},"code":["/**"," * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity."," * Counts the number of if, conditional, for, whilte, try, switch/case,"," * @author Patrick Brosset"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce a maximum cyclomatic complexity allowed in a program\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        type: \"integer\",","                        minimum: 0","                    },","                    {","                        type: \"object\",","                        properties: {","                            maximum: {","                                type: \"integer\",","                                minimum: 0","                            },","                            max: {","                                type: \"integer\",","                                minimum: 0","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","        const option = context.options[0];","        let THRESHOLD = 20;","","        if (typeof option === \"object\" && option.hasOwnProperty(\"maximum\") && typeof option.maximum === \"number\") {","            THRESHOLD = option.maximum;","        }","        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {","            THRESHOLD = option.max;","        }","        if (typeof option === \"number\") {","            THRESHOLD = option;","        }","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        // Using a stack to store complexity (handling nested functions)","        const fns = [];","","        /**","         * When parsing a new function, store it in our function stack","         * @returns {void}","         * @private","         */","        function startFunction() {","            fns.push(1);","        }","","        /**","         * Evaluate the node at the end of function","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function endFunction(node) {","            const name = lodash.upperFirst(astUtils.getFunctionNameWithKind(node));","            const complexity = fns.pop();","","            if (complexity > THRESHOLD) {","                context.report({","                    node,","                    message: \"{{name}} has a complexity of {{complexity}}.\",","                    data: { name, complexity }","                });","            }","        }","","        /**","         * Increase the complexity of the function in context","         * @returns {void}","         * @private","         */","        function increaseComplexity() {","            if (fns.length) {","                fns[fns.length - 1]++;","            }","        }","","        /**","         * Increase the switch complexity in context","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function increaseSwitchComplexity(node) {","","            // Avoiding `default`","            if (node.test) {","                increaseComplexity(node);","            }","        }","","        /**","         * Increase the logical path complexity in context","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function increaseLogicalComplexity(node) {","","            // Avoiding &&","            if (node.operator === \"||\") {","                increaseComplexity(node);","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            FunctionDeclaration: startFunction,","            FunctionExpression: startFunction,","            ArrowFunctionExpression: startFunction,","            \"FunctionDeclaration:exit\": endFunction,","            \"FunctionExpression:exit\": endFunction,","            \"ArrowFunctionExpression:exit\": endFunction,","","            CatchClause: increaseComplexity,","            ConditionalExpression: increaseComplexity,","            LogicalExpression: increaseLogicalComplexity,","            ForStatement: increaseComplexity,","            ForInStatement: increaseComplexity,","            ForOfStatement: increaseComplexity,","            IfStatement: increaseComplexity,","            SwitchCase: increaseSwitchComplexity,","            WhileStatement: increaseComplexity,","            DoWhileStatement: increaseComplexity","        };","","    }","};",""],"l":{"13":1,"15":1,"21":1,"56":0,"57":0,"59":0,"60":0,"62":0,"63":0,"65":0,"66":0,"74":0,"81":1,"82":0,"91":1,"92":0,"93":0,"95":0,"96":0,"109":1,"110":0,"111":0,"121":1,"124":0,"125":0,"135":1,"138":0,"139":0,"147":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/computed-property-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/computed-property-spacing.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":1,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":10},"end":{"line":30,"column":20}}},"2":{"name":"reportNoBeginningSpace","line":45,"loc":{"start":{"line":45,"column":8},"end":{"line":45,"column":65}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":19},"end":{"line":53,"column":27}}},"4":{"name":"reportNoEndingSpace","line":66,"loc":{"start":{"line":66,"column":8},"end":{"line":66,"column":63}}},"5":{"name":"(anonymous_5)","line":74,"loc":{"start":{"line":74,"column":19},"end":{"line":74,"column":27}}},"6":{"name":"reportRequiredBeginningSpace","line":86,"loc":{"start":{"line":86,"column":8},"end":{"line":86,"column":59}}},"7":{"name":"(anonymous_7)","line":94,"loc":{"start":{"line":94,"column":19},"end":{"line":94,"column":27}}},"8":{"name":"reportRequiredEndingSpace","line":106,"loc":{"start":{"line":106,"column":8},"end":{"line":106,"column":56}}},"9":{"name":"(anonymous_9)","line":114,"loc":{"start":{"line":114,"column":19},"end":{"line":114,"column":27}}},"10":{"name":"checkSpacing","line":126,"loc":{"start":{"line":126,"column":8},"end":{"line":126,"column":44}}},"11":{"name":"(anonymous_11)","line":127,"loc":{"start":{"line":127,"column":19},"end":{"line":127,"column":34}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":176,"column":2}},"3":{"start":{"line":31,"column":8},"end":{"line":31,"column":51}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":73}},"5":{"start":{"line":45,"column":8},"end":{"line":57,"column":9}},"6":{"start":{"line":46,"column":12},"end":{"line":56,"column":15}},"7":{"start":{"line":54,"column":20},"end":{"line":54,"column":84}},"8":{"start":{"line":66,"column":8},"end":{"line":78,"column":9}},"9":{"start":{"line":67,"column":12},"end":{"line":77,"column":15}},"10":{"start":{"line":75,"column":20},"end":{"line":75,"column":85}},"11":{"start":{"line":86,"column":8},"end":{"line":98,"column":9}},"12":{"start":{"line":87,"column":12},"end":{"line":97,"column":15}},"13":{"start":{"line":95,"column":20},"end":{"line":95,"column":61}},"14":{"start":{"line":106,"column":8},"end":{"line":118,"column":9}},"15":{"start":{"line":107,"column":12},"end":{"line":117,"column":15}},"16":{"start":{"line":115,"column":20},"end":{"line":115,"column":62}},"17":{"start":{"line":126,"column":8},"end":{"line":163,"column":9}},"18":{"start":{"line":127,"column":12},"end":{"line":162,"column":14}},"19":{"start":{"line":128,"column":16},"end":{"line":130,"column":17}},"20":{"start":{"line":129,"column":20},"end":{"line":129,"column":27}},"21":{"start":{"line":132,"column":16},"end":{"line":132,"column":52}},"22":{"start":{"line":134,"column":16},"end":{"line":137,"column":63}},"23":{"start":{"line":139,"column":16},"end":{"line":149,"column":17}},"24":{"start":{"line":140,"column":20},"end":{"line":148,"column":21}},"25":{"start":{"line":141,"column":24},"end":{"line":143,"column":25}},"26":{"start":{"line":142,"column":28},"end":{"line":142,"column":71}},"27":{"start":{"line":145,"column":24},"end":{"line":147,"column":25}},"28":{"start":{"line":146,"column":28},"end":{"line":146,"column":72}},"29":{"start":{"line":151,"column":16},"end":{"line":161,"column":17}},"30":{"start":{"line":152,"column":20},"end":{"line":160,"column":21}},"31":{"start":{"line":153,"column":24},"end":{"line":155,"column":25}},"32":{"start":{"line":154,"column":28},"end":{"line":154,"column":67}},"33":{"start":{"line":157,"column":24},"end":{"line":159,"column":25}},"34":{"start":{"line":158,"column":28},"end":{"line":158,"column":67}},"35":{"start":{"line":170,"column":8},"end":{"line":173,"column":10}}},"branchMap":{"1":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":16},"end":{"line":128,"column":16}},{"start":{"line":128,"column":16},"end":{"line":128,"column":16}}]},"2":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":16},"end":{"line":139,"column":16}},{"start":{"line":139,"column":16},"end":{"line":139,"column":16}}]},"3":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":20},"end":{"line":140,"column":20}},{"start":{"line":140,"column":20},"end":{"line":140,"column":20}}]},"4":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":24},"end":{"line":141,"column":24}},{"start":{"line":141,"column":24},"end":{"line":141,"column":24}}]},"5":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":28},"end":{"line":141,"column":75}},{"start":{"line":141,"column":79},"end":{"line":141,"column":120}}]},"6":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":24},"end":{"line":145,"column":24}},{"start":{"line":145,"column":24},"end":{"line":145,"column":24}}]},"7":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":16},"end":{"line":151,"column":16}},{"start":{"line":151,"column":16},"end":{"line":151,"column":16}}]},"8":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":20},"end":{"line":152,"column":20}},{"start":{"line":152,"column":20},"end":{"line":152,"column":20}}]},"9":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":24},"end":{"line":153,"column":24}},{"start":{"line":153,"column":24},"end":{"line":153,"column":24}}]},"10":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":28},"end":{"line":153,"column":73}},{"start":{"line":153,"column":77},"end":{"line":153,"column":116}}]},"11":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":24},"end":{"line":157,"column":24}},{"start":{"line":157,"column":24},"end":{"line":157,"column":24}}]}},"code":["/**"," * @fileoverview Disallows or enforces spaces inside computed properties."," * @author Jamund Ferguson"," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing inside computed property brackets\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                enum: [\"always\", \"never\"]","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        const propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","        * Reports that there shouldn't be a space after the first token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @param {Token} tokenAfter - The token after `token`.","        * @returns {void}","        */","        function reportNoBeginningSpace(node, token, tokenAfter) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"There should be no space after '{{tokenValue}}'.\",","                data: {","                    tokenValue: token.value","                },","                fix(fixer) {","                    return fixer.removeRange([token.range[1], tokenAfter.range[0]]);","                }","            });","        }","","        /**","        * Reports that there shouldn't be a space before the last token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @param {Token} tokenBefore - The token before `token`.","        * @returns {void}","        */","        function reportNoEndingSpace(node, token, tokenBefore) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"There should be no space before '{{tokenValue}}'.\",","                data: {","                    tokenValue: token.value","                },","                fix(fixer) {","                    return fixer.removeRange([tokenBefore.range[1], token.range[0]]);","                }","            });","        }","","        /**","        * Reports that there should be a space after the first token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportRequiredBeginningSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"A space is required after '{{tokenValue}}'.\",","                data: {","                    tokenValue: token.value","                },","                fix(fixer) {","                    return fixer.insertTextAfter(token, \" \");","                }","            });","        }","","        /**","        * Reports that there should be a space before the last token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportRequiredEndingSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"A space is required before '{{tokenValue}}'.\",","                data: {","                    tokenValue: token.value","                },","                fix(fixer) {","                    return fixer.insertTextBefore(token, \" \");","                }","            });","        }","","        /**","         * Returns a function that checks the spacing of a node on the property name","         * that was passed in.","         * @param {string} propertyName The property on the node to check for spacing","         * @returns {Function} A function that will check spacing on a node","         */","        function checkSpacing(propertyName) {","            return function(node) {","                if (!node.computed) {","                    return;","                }","","                const property = node[propertyName];","","                const before = sourceCode.getTokenBefore(property),","                    first = sourceCode.getFirstToken(property),","                    last = sourceCode.getLastToken(property),","                    after = sourceCode.getTokenAfter(property);","","                if (astUtils.isTokenOnSameLine(before, first)) {","                    if (propertyNameMustBeSpaced) {","                        if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {","                            reportRequiredBeginningSpace(node, before);","                        }","                    } else {","                        if (sourceCode.isSpaceBetweenTokens(before, first)) {","                            reportNoBeginningSpace(node, before, first);","                        }","                    }","                }","","                if (astUtils.isTokenOnSameLine(last, after)) {","                    if (propertyNameMustBeSpaced) {","                        if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {","                            reportRequiredEndingSpace(node, after);","                        }","                    } else {","                        if (sourceCode.isSpaceBetweenTokens(last, after)) {","                            reportNoEndingSpace(node, after, last);","                        }","                    }","                }","            };","        }","","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            Property: checkSpacing(\"key\"),","            MemberExpression: checkSpacing(\"property\")","        };","","    }","};",""],"l":{"7":1,"13":1,"31":0,"32":0,"45":1,"46":0,"54":0,"66":1,"67":0,"75":0,"86":1,"87":0,"95":0,"106":1,"107":0,"115":0,"126":1,"127":0,"128":0,"129":0,"132":0,"134":0,"139":0,"140":0,"141":0,"142":0,"145":0,"146":0,"151":0,"152":0,"153":0,"154":0,"157":0,"158":0,"170":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/consistent-return.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/consistent-return.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"isIdentifier","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":34}}},"2":{"name":"isUnreachable","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":32}}},"3":{"name":"isClassConstructor","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":34}}},"4":{"name":"(anonymous_4)","line":73,"loc":{"start":{"line":73,"column":10},"end":{"line":73,"column":20}}},"5":{"name":"checkLastSegment","line":85,"loc":{"start":{"line":85,"column":8},"end":{"line":85,"column":40}}},"6":{"name":"(anonymous_6)","line":139,"loc":{"start":{"line":139,"column":27},"end":{"line":139,"column":44}}},"7":{"name":"(anonymous_7)","line":149,"loc":{"start":{"line":149,"column":25},"end":{"line":149,"column":28}}},"8":{"name":"(anonymous_8)","line":154,"loc":{"start":{"line":154,"column":27},"end":{"line":154,"column":34}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":41}},"3":{"start":{"line":25,"column":0},"end":{"line":27,"column":1}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":60}},"5":{"start":{"line":34,"column":0},"end":{"line":36,"column":1}},"6":{"start":{"line":35,"column":4},"end":{"line":35,"column":30}},"7":{"start":{"line":43,"column":0},"end":{"line":48,"column":1}},"8":{"start":{"line":44,"column":4},"end":{"line":47,"column":43}},"9":{"start":{"line":54,"column":0},"end":{"line":188,"column":2}},"10":{"start":{"line":74,"column":8},"end":{"line":74,"column":49}},"11":{"start":{"line":75,"column":8},"end":{"line":75,"column":89}},"12":{"start":{"line":76,"column":8},"end":{"line":76,"column":28}},"13":{"start":{"line":85,"column":8},"end":{"line":134,"column":9}},"14":{"start":{"line":86,"column":12},"end":{"line":86,"column":26}},"15":{"start":{"line":92,"column":12},"end":{"line":98,"column":13}},"16":{"start":{"line":97,"column":16},"end":{"line":97,"column":23}},"17":{"start":{"line":101,"column":12},"end":{"line":121,"column":13}},"18":{"start":{"line":104,"column":16},"end":{"line":104,"column":45}},"19":{"start":{"line":105,"column":16},"end":{"line":105,"column":33}},"20":{"start":{"line":106,"column":19},"end":{"line":121,"column":13}},"21":{"start":{"line":109,"column":16},"end":{"line":109,"column":105}},"22":{"start":{"line":110,"column":19},"end":{"line":121,"column":13}},"23":{"start":{"line":116,"column":16},"end":{"line":116,"column":48}},"24":{"start":{"line":120,"column":16},"end":{"line":120,"column":50}},"25":{"start":{"line":123,"column":12},"end":{"line":125,"column":13}},"26":{"start":{"line":124,"column":16},"end":{"line":124,"column":62}},"27":{"start":{"line":128,"column":12},"end":{"line":133,"column":15}},"28":{"start":{"line":136,"column":8},"end":{"line":186,"column":10}},"29":{"start":{"line":140,"column":16},"end":{"line":147,"column":18}},"30":{"start":{"line":150,"column":16},"end":{"line":150,"column":42}},"31":{"start":{"line":155,"column":16},"end":{"line":155,"column":47}},"32":{"start":{"line":156,"column":16},"end":{"line":156,"column":55}},"33":{"start":{"line":158,"column":16},"end":{"line":160,"column":17}},"34":{"start":{"line":159,"column":20},"end":{"line":159,"column":106}},"35":{"start":{"line":162,"column":16},"end":{"line":178,"column":17}},"36":{"start":{"line":163,"column":20},"end":{"line":163,"column":46}},"37":{"start":{"line":164,"column":20},"end":{"line":164,"column":61}},"38":{"start":{"line":165,"column":20},"end":{"line":165,"column":83}},"39":{"start":{"line":166,"column":20},"end":{"line":171,"column":22}},"40":{"start":{"line":172,"column":23},"end":{"line":178,"column":17}},"41":{"start":{"line":173,"column":20},"end":{"line":177,"column":23}}},"branchMap":{"1":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":11},"end":{"line":26,"column":37}},{"start":{"line":26,"column":41},"end":{"line":26,"column":59}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":11},"end":{"line":44,"column":45}},{"start":{"line":45,"column":8},"end":{"line":45,"column":19}},{"start":{"line":46,"column":8},"end":{"line":46,"column":47}},{"start":{"line":47,"column":8},"end":{"line":47,"column":42}}]},"3":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":24},"end":{"line":74,"column":42}},{"start":{"line":74,"column":46},"end":{"line":74,"column":48}}]},"4":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":12},"end":{"line":92,"column":12}},{"start":{"line":92,"column":12},"end":{"line":92,"column":12}}]},"5":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":40}},{"start":{"line":93,"column":16},"end":{"line":93,"column":70}},{"start":{"line":94,"column":16},"end":{"line":94,"column":47}},{"start":{"line":95,"column":16},"end":{"line":95,"column":40}}]},"6":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":101,"column":12}},{"start":{"line":101,"column":12},"end":{"line":101,"column":12}}]},"7":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":19},"end":{"line":106,"column":19}},{"start":{"line":106,"column":19},"end":{"line":106,"column":19}}]},"8":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":19},"end":{"line":110,"column":19}},{"start":{"line":110,"column":19},"end":{"line":110,"column":19}}]},"9":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":16},"end":{"line":111,"column":55}},{"start":{"line":112,"column":17},"end":{"line":112,"column":48}},{"start":{"line":112,"column":52},"end":{"line":112,"column":70}}]},"10":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":23},"end":{"line":120,"column":30}},{"start":{"line":120,"column":34},"end":{"line":120,"column":38}}]},"11":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":12},"end":{"line":123,"column":12}},{"start":{"line":123,"column":12},"end":{"line":123,"column":12}}]},"12":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":16},"end":{"line":158,"column":16}},{"start":{"line":158,"column":16},"end":{"line":158,"column":16}}]},"13":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":20},"end":{"line":158,"column":47}},{"start":{"line":158,"column":51},"end":{"line":158,"column":65}}]},"14":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":37},"end":{"line":159,"column":73}},{"start":{"line":159,"column":77},"end":{"line":159,"column":105}}]},"15":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":16},"end":{"line":162,"column":16}},{"start":{"line":162,"column":16},"end":{"line":162,"column":16}}]},"16":{"line":167,"type":"cond-expr","locations":[{"start":{"line":168,"column":30},"end":{"line":168,"column":39}},{"start":{"line":169,"column":30},"end":{"line":169,"column":96}}]},"17":{"line":170,"type":"cond-expr","locations":[{"start":{"line":170,"column":48},"end":{"line":170,"column":51}},{"start":{"line":170,"column":54},"end":{"line":170,"column":58}}]},"18":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":23},"end":{"line":172,"column":23}},{"start":{"line":172,"column":23},"end":{"line":172,"column":23}}]}},"code":["/**"," * @fileoverview Rule to flag consistent return values"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given node is an `Identifier` node which was named a given name."," * @param {ASTNode} node - A node to check."," * @param {string} name - An expected name of the node."," * @returns {boolean} `true` if the node is an `Identifier` node which was named as expected."," */","function isIdentifier(node, name) {","    return node.type === \"Identifier\" && node.name === name;","}","","/**"," * Checks whether or not a given code path segment is unreachable."," * @param {CodePathSegment} segment - A CodePathSegment to check."," * @returns {boolean} `true` if the segment is unreachable."," */","function isUnreachable(segment) {","    return !segment.reachable;","}","","/**","* Checks whether a given node is a `constructor` method in an ES6 class","* @param {ASTNode} node A node to check","* @returns {boolean} `true` if the node is a `constructor` method","*/","function isClassConstructor(node) {","    return node.type === \"FunctionExpression\" &&","        node.parent &&","        node.parent.type === \"MethodDefinition\" &&","        node.parent.kind === \"constructor\";","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require `return` statements to either always or never specify values\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [{","            type: \"object\",","            properties: {","                treatUndefinedAsUnspecified: {","                    type: \"boolean\"","                }","            },","            additionalProperties: false","        }]","    },","","    create(context) {","        const options = context.options[0] || {};","        const treatUndefinedAsUnspecified = options.treatUndefinedAsUnspecified === true;","        let funcInfo = null;","","        /**","         * Checks whether of not the implicit returning is consistent if the last","         * code path segment is reachable.","         *","         * @param {ASTNode} node - A program/function node to check.","         * @returns {void}","         */","        function checkLastSegment(node) {","            let loc, name;","","            /*","             * Skip if it expected no return value or unreachable.","             * When unreachable, all paths are returned or thrown.","             */","            if (!funcInfo.hasReturnValue ||","                funcInfo.codePath.currentSegments.every(isUnreachable) ||","                astUtils.isES5Constructor(node) ||","                isClassConstructor(node)","            ) {","                return;","            }","","            // Adjust a location and a message.","            if (node.type === \"Program\") {","","                // The head of program.","                loc = { line: 1, column: 0 };","                name = \"program\";","            } else if (node.type === \"ArrowFunctionExpression\") {","","                // `=>` token","                loc = context.getSourceCode().getTokenBefore(node.body, astUtils.isArrowToken).loc.start;","            } else if (","                node.parent.type === \"MethodDefinition\" ||","                (node.parent.type === \"Property\" && node.parent.method)","            ) {","","                // Method name.","                loc = node.parent.key.loc.start;","            } else {","","                // Function name or `function` keyword.","                loc = (node.id || node).loc.start;","            }","","            if (!name) {","                name = astUtils.getFunctionNameWithKind(node);","            }","","            // Reports.","            context.report({","                node,","                loc,","                message: \"Expected to return a value at the end of {{name}}.\",","                data: { name }","            });","        }","","        return {","","            // Initializes/Disposes state of each code path.","            onCodePathStart(codePath, node) {","                funcInfo = {","                    upper: funcInfo,","                    codePath,","                    hasReturn: false,","                    hasReturnValue: false,","                    message: \"\",","                    node","                };","            },","            onCodePathEnd() {","                funcInfo = funcInfo.upper;","            },","","            // Reports a given return statement if it's inconsistent.","            ReturnStatement(node) {","                const argument = node.argument;","                let hasReturnValue = Boolean(argument);","","                if (treatUndefinedAsUnspecified && hasReturnValue) {","                    hasReturnValue = !isIdentifier(argument, \"undefined\") && argument.operator !== \"void\";","                }","","                if (!funcInfo.hasReturn) {","                    funcInfo.hasReturn = true;","                    funcInfo.hasReturnValue = hasReturnValue;","                    funcInfo.message = \"{{name}} expected {{which}} return value.\";","                    funcInfo.data = {","                        name: funcInfo.node.type === \"Program\"","                            ? \"Program\"","                            : lodash.upperFirst(astUtils.getFunctionNameWithKind(funcInfo.node)),","                        which: hasReturnValue ? \"a\" : \"no\"","                    };","                } else if (funcInfo.hasReturnValue !== hasReturnValue) {","                    context.report({","                        node,","                        message: funcInfo.message,","                        data: funcInfo.data","                    });","                }","            },","","            // Reports a given program/function if the implicit returning is not consistent.","            \"Program:exit\": checkLastSegment,","            \"FunctionDeclaration:exit\": checkLastSegment,","            \"FunctionExpression:exit\": checkLastSegment,","            \"ArrowFunctionExpression:exit\": checkLastSegment","        };","    }","};",""],"l":{"11":1,"13":1,"25":1,"26":0,"34":1,"35":0,"43":1,"44":0,"54":1,"74":0,"75":0,"76":0,"85":1,"86":0,"92":0,"97":0,"101":0,"104":0,"105":0,"106":0,"109":0,"110":0,"116":0,"120":0,"123":0,"124":0,"128":0,"136":0,"140":0,"150":0,"155":0,"156":0,"158":0,"159":0,"162":0,"163":0,"164":0,"165":0,"166":0,"172":0,"173":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/consistent-this.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/consistent-this.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":20}}},"2":{"name":"reportBadAssignment","line":45,"loc":{"start":{"line":45,"column":8},"end":{"line":45,"column":50}}},"3":{"name":"checkAssignment","line":57,"loc":{"start":{"line":57,"column":8},"end":{"line":57,"column":52}}},"4":{"name":"checkWasAssigned","line":77,"loc":{"start":{"line":77,"column":8},"end":{"line":77,"column":48}}},"5":{"name":"ensureWasAssigned","line":110,"loc":{"start":{"line":110,"column":8},"end":{"line":110,"column":37}}},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":30},"end":{"line":123,"column":37}}},"7":{"name":"(anonymous_7)","line":133,"loc":{"start":{"line":133,"column":32},"end":{"line":133,"column":39}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":141,"column":2}},"2":{"start":{"line":30,"column":8},"end":{"line":30,"column":25}},"3":{"start":{"line":32,"column":8},"end":{"line":36,"column":9}},"4":{"start":{"line":33,"column":12},"end":{"line":33,"column":33}},"5":{"start":{"line":35,"column":12},"end":{"line":35,"column":38}},"6":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"7":{"start":{"line":46,"column":12},"end":{"line":46,"column":122}},"8":{"start":{"line":57,"column":8},"end":{"line":67,"column":9}},"9":{"start":{"line":58,"column":12},"end":{"line":58,"column":59}},"10":{"start":{"line":60,"column":12},"end":{"line":66,"column":13}},"11":{"start":{"line":61,"column":16},"end":{"line":63,"column":17}},"12":{"start":{"line":62,"column":20},"end":{"line":62,"column":52}},"13":{"start":{"line":64,"column":19},"end":{"line":66,"column":13}},"14":{"start":{"line":65,"column":16},"end":{"line":65,"column":109}},"15":{"start":{"line":77,"column":8},"end":{"line":104,"column":9}},"16":{"start":{"line":78,"column":12},"end":{"line":78,"column":50}},"17":{"start":{"line":80,"column":12},"end":{"line":82,"column":13}},"18":{"start":{"line":81,"column":16},"end":{"line":81,"column":23}},"19":{"start":{"line":84,"column":12},"end":{"line":87,"column":13}},"20":{"start":{"line":84,"column":42},"end":{"line":85,"column":38}},"21":{"start":{"line":86,"column":16},"end":{"line":86,"column":23}},"22":{"start":{"line":91,"column":12},"end":{"line":103,"column":13}},"23":{"start":{"line":92,"column":16},"end":{"line":92,"column":50}},"24":{"start":{"line":94,"column":16},"end":{"line":98,"column":18}},"25":{"start":{"line":100,"column":16},"end":{"line":102,"column":19}},"26":{"start":{"line":100,"column":41},"end":{"line":100,"column":49}},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":53}},"28":{"start":{"line":110,"column":8},"end":{"line":116,"column":9}},"29":{"start":{"line":111,"column":12},"end":{"line":111,"column":45}},"30":{"start":{"line":113,"column":12},"end":{"line":115,"column":15}},"31":{"start":{"line":114,"column":16},"end":{"line":114,"column":47}},"32":{"start":{"line":118,"column":8},"end":{"line":138,"column":10}},"33":{"start":{"line":124,"column":16},"end":{"line":124,"column":35}},"34":{"start":{"line":125,"column":16},"end":{"line":126,"column":78}},"35":{"start":{"line":128,"column":16},"end":{"line":130,"column":17}},"36":{"start":{"line":129,"column":20},"end":{"line":129,"column":62}},"37":{"start":{"line":134,"column":16},"end":{"line":136,"column":17}},"38":{"start":{"line":135,"column":20},"end":{"line":135,"column":70}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"2":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":12}},{"start":{"line":60,"column":12},"end":{"line":60,"column":12}}]},"3":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":16},"end":{"line":61,"column":16}},{"start":{"line":61,"column":16},"end":{"line":61,"column":16}}]},"4":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":20},"end":{"line":61,"column":27}},{"start":{"line":61,"column":31},"end":{"line":61,"column":44}},{"start":{"line":61,"column":48},"end":{"line":61,"column":69}}]},"5":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":19},"end":{"line":64,"column":19}},{"start":{"line":64,"column":19},"end":{"line":64,"column":19}}]},"6":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":12},"end":{"line":80,"column":12}},{"start":{"line":80,"column":12},"end":{"line":80,"column":12}}]},"7":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":12}},{"start":{"line":84,"column":12},"end":{"line":84,"column":12}}]},"8":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":42},"end":{"line":84,"column":80}},{"start":{"line":85,"column":16},"end":{"line":85,"column":38}}]},"9":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":12},"end":{"line":91,"column":12}},{"start":{"line":91,"column":12},"end":{"line":91,"column":12}}]},"10":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":20},"end":{"line":95,"column":44}},{"start":{"line":96,"column":20},"end":{"line":96,"column":25}},{"start":{"line":96,"column":29},"end":{"line":96,"column":60}},{"start":{"line":97,"column":20},"end":{"line":97,"column":49}}]},"11":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":20},"end":{"line":126,"column":46}},{"start":{"line":126,"column":50},"end":{"line":126,"column":77}}]},"12":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":16},"end":{"line":128,"column":16}},{"start":{"line":128,"column":16},"end":{"line":128,"column":16}}]},"13":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":20},"end":{"line":128,"column":38}},{"start":{"line":128,"column":42},"end":{"line":128,"column":58}}]},"14":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":16}},{"start":{"line":134,"column":16},"end":{"line":134,"column":16}}]}},"code":["/**"," * @fileoverview Rule to enforce consistent naming of \"this\" context variables"," * @author Raphael Pigulla"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent naming when capturing the current execution context\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: {","            type: \"array\",","            items: {","                type: \"string\",","                minLength: 1","            },","            uniqueItems: true","        }","    },","","    create(context) {","        let aliases = [];","","        if (context.options.length === 0) {","            aliases.push(\"that\");","        } else {","            aliases = context.options;","        }","","        /**","         * Reports that a variable declarator or assignment expression is assigning","         * a non-'this' value to the specified alias.","         * @param {ASTNode} node - The assigning node.","         * @param {string} alias - the name of the alias that was incorrectly used.","         * @returns {void}","         */","        function reportBadAssignment(node, alias) {","            context.report({ node, message: \"Designated alias '{{alias}}' is not assigned to 'this'.\", data: { alias } });","        }","","        /**","         * Checks that an assignment to an identifier only assigns 'this' to the","         * appropriate alias, and the alias is only assigned to 'this'.","         * @param {ASTNode} node - The assigning node.","         * @param {Identifier} name - The name of the variable assigned to.","         * @param {Expression} value - The value of the assignment.","         * @returns {void}","         */","        function checkAssignment(node, name, value) {","            const isThis = value.type === \"ThisExpression\";","","            if (aliases.indexOf(name) !== -1) {","                if (!isThis || node.operator && node.operator !== \"=\") {","                    reportBadAssignment(node, name);","                }","            } else if (isThis) {","                context.report({ node, message: \"Unexpected alias '{{name}}' for 'this'.\", data: { name } });","            }","        }","","        /**","         * Ensures that a variable declaration of the alias in a program or function","         * is assigned to the correct value.","         * @param {string} alias alias the check the assignment of.","         * @param {Object} scope scope of the current code we are checking.","         * @private","         * @returns {void}","         */","        function checkWasAssigned(alias, scope) {","            const variable = scope.set.get(alias);","","            if (!variable) {","                return;","            }","","            if (variable.defs.some(def => def.node.type === \"VariableDeclarator\" &&","                def.node.init !== null)) {","                return;","            }","","            // The alias has been declared and not assigned: check it was","            // assigned later in the same scope.","            if (!variable.references.some(reference => {","                const write = reference.writeExpr;","","                return (","                    reference.from === scope &&","                    write && write.type === \"ThisExpression\" &&","                    write.parent.operator === \"=\"","                );","            })) {","                variable.defs.map(def => def.node).forEach(node => {","                    reportBadAssignment(node, alias);","                });","            }","        }","","        /**","         * Check each alias to ensure that is was assinged to the correct value.","         * @returns {void}","         */","        function ensureWasAssigned() {","            const scope = context.getScope();","","            aliases.forEach(alias => {","                checkWasAssigned(alias, scope);","            });","        }","","        return {","            \"Program:exit\": ensureWasAssigned,","            \"FunctionExpression:exit\": ensureWasAssigned,","            \"FunctionDeclaration:exit\": ensureWasAssigned,","","            VariableDeclarator(node) {","                const id = node.id;","                const isDestructuring =","                    id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\";","","                if (node.init !== null && !isDestructuring) {","                    checkAssignment(node, id.name, node.init);","                }","            },","","            AssignmentExpression(node) {","                if (node.left.type === \"Identifier\") {","                    checkAssignment(node, node.left.name, node.right);","                }","            }","        };","","    }","};",""],"l":{"11":1,"30":0,"32":0,"33":0,"35":0,"45":1,"46":0,"57":1,"58":0,"60":0,"61":0,"62":0,"64":0,"65":0,"77":1,"78":0,"80":0,"81":0,"84":0,"86":0,"91":0,"92":0,"94":0,"100":0,"101":0,"110":1,"111":0,"113":0,"114":0,"118":0,"124":0,"125":0,"128":0,"129":0,"134":0,"135":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/constructor-super.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/constructor-super.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":1,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0,0],"33":[0,0],"34":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"isReachable","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}}},"2":{"name":"isConstructorFunction","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":37}}},"3":{"name":"isPossibleConstructor","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":37}}},"4":{"name":"(anonymous_4)","line":104,"loc":{"start":{"line":104,"column":10},"end":{"line":104,"column":20}}},"5":{"name":"isCalledInSomePath","line":131,"loc":{"start":{"line":131,"column":8},"end":{"line":131,"column":45}}},"6":{"name":"isCalledInEveryPath","line":140,"loc":{"start":{"line":140,"column":8},"end":{"line":140,"column":46}}},"7":{"name":"(anonymous_7)","line":163,"loc":{"start":{"line":163,"column":27},"end":{"line":163,"column":44}}},"8":{"name":"(anonymous_8)","line":195,"loc":{"start":{"line":195,"column":25},"end":{"line":195,"column":42}}},"9":{"name":"(anonymous_9)","line":225,"loc":{"start":{"line":225,"column":34},"end":{"line":225,"column":44}}},"10":{"name":"(anonymous_10)","line":255,"loc":{"start":{"line":255,"column":33},"end":{"line":255,"column":58}}},"11":{"name":"(anonymous_11)","line":297,"loc":{"start":{"line":297,"column":33},"end":{"line":297,"column":40}}},"12":{"name":"(anonymous_12)","line":352,"loc":{"start":{"line":352,"column":27},"end":{"line":352,"column":34}}},"13":{"name":"(anonymous_13)","line":380,"loc":{"start":{"line":380,"column":26},"end":{"line":380,"column":29}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"2":{"start":{"line":19,"column":4},"end":{"line":19,"column":29}},"3":{"start":{"line":29,"column":0},"end":{"line":35,"column":1}},"4":{"start":{"line":30,"column":4},"end":{"line":34,"column":6}},"5":{"start":{"line":43,"column":0},"end":{"line":87,"column":1}},"6":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"7":{"start":{"line":45,"column":8},"end":{"line":45,"column":21}},"8":{"start":{"line":48,"column":4},"end":{"line":86,"column":5}},"9":{"start":{"line":58,"column":12},"end":{"line":58,"column":24}},"10":{"start":{"line":61,"column":12},"end":{"line":61,"column":45}},"11":{"start":{"line":64,"column":12},"end":{"line":64,"column":53}},"12":{"start":{"line":67,"column":12},"end":{"line":70,"column":14}},"13":{"start":{"line":73,"column":12},"end":{"line":76,"column":14}},"14":{"start":{"line":79,"column":12},"end":{"line":79,"column":81}},"15":{"start":{"line":81,"column":12},"end":{"line":81,"column":57}},"16":{"start":{"line":85,"column":12},"end":{"line":85,"column":25}},"17":{"start":{"line":93,"column":0},"end":{"line":385,"column":2}},"18":{"start":{"line":115,"column":8},"end":{"line":115,"column":28}},"19":{"start":{"line":124,"column":8},"end":{"line":124,"column":45}},"20":{"start":{"line":131,"column":8},"end":{"line":133,"column":9}},"21":{"start":{"line":132,"column":12},"end":{"line":132,"column":81}},"22":{"start":{"line":140,"column":8},"end":{"line":153,"column":9}},"23":{"start":{"line":147,"column":12},"end":{"line":151,"column":13}},"24":{"start":{"line":150,"column":16},"end":{"line":150,"column":28}},"25":{"start":{"line":152,"column":12},"end":{"line":152,"column":82}},"26":{"start":{"line":155,"column":8},"end":{"line":383,"column":10}},"27":{"start":{"line":164,"column":16},"end":{"line":185,"column":17}},"28":{"start":{"line":167,"column":20},"end":{"line":167,"column":64}},"29":{"start":{"line":168,"column":20},"end":{"line":168,"column":60}},"30":{"start":{"line":170,"column":20},"end":{"line":176,"column":22}},"31":{"start":{"line":178,"column":20},"end":{"line":184,"column":22}},"32":{"start":{"line":196,"column":16},"end":{"line":196,"column":55}},"33":{"start":{"line":199,"column":16},"end":{"line":199,"column":42}},"34":{"start":{"line":201,"column":16},"end":{"line":203,"column":17}},"35":{"start":{"line":202,"column":20},"end":{"line":202,"column":27}},"36":{"start":{"line":206,"column":16},"end":{"line":206,"column":59}},"37":{"start":{"line":207,"column":16},"end":{"line":207,"column":79}},"38":{"start":{"line":208,"column":16},"end":{"line":208,"column":76}},"39":{"start":{"line":210,"column":16},"end":{"line":217,"column":17}},"40":{"start":{"line":211,"column":20},"end":{"line":216,"column":23}},"41":{"start":{"line":226,"column":16},"end":{"line":228,"column":17}},"42":{"start":{"line":227,"column":20},"end":{"line":227,"column":27}},"43":{"start":{"line":231,"column":16},"end":{"line":235,"column":18}},"44":{"start":{"line":238,"column":16},"end":{"line":238,"column":58}},"45":{"start":{"line":240,"column":16},"end":{"line":243,"column":17}},"46":{"start":{"line":241,"column":20},"end":{"line":241,"column":83}},"47":{"start":{"line":242,"column":20},"end":{"line":242,"column":86}},"48":{"start":{"line":256,"column":16},"end":{"line":258,"column":17}},"49":{"start":{"line":257,"column":20},"end":{"line":257,"column":27}},"50":{"start":{"line":261,"column":16},"end":{"line":261,"column":70}},"51":{"start":{"line":263,"column":16},"end":{"line":289,"column":18}},"52":{"start":{"line":266,"column":24},"end":{"line":266,"column":60}},"53":{"start":{"line":267,"column":24},"end":{"line":267,"column":66}},"54":{"start":{"line":270,"column":24},"end":{"line":270,"column":87}},"55":{"start":{"line":271,"column":24},"end":{"line":271,"column":90}},"56":{"start":{"line":274,"column":24},"end":{"line":287,"column":25}},"57":{"start":{"line":275,"column":28},"end":{"line":275,"column":58}},"58":{"start":{"line":277,"column":28},"end":{"line":277,"column":49}},"59":{"start":{"line":279,"column":28},"end":{"line":286,"column":29}},"60":{"start":{"line":280,"column":32},"end":{"line":280,"column":54}},"61":{"start":{"line":282,"column":32},"end":{"line":285,"column":35}},"62":{"start":{"line":298,"column":16},"end":{"line":300,"column":17}},"63":{"start":{"line":299,"column":20},"end":{"line":299,"column":27}},"64":{"start":{"line":303,"column":16},"end":{"line":305,"column":17}},"65":{"start":{"line":304,"column":20},"end":{"line":304,"column":27}},"66":{"start":{"line":308,"column":16},"end":{"line":344,"column":17}},"67":{"start":{"line":309,"column":20},"end":{"line":309,"column":71}},"68":{"start":{"line":310,"column":20},"end":{"line":310,"column":42}},"69":{"start":{"line":311,"column":20},"end":{"line":311,"column":36}},"70":{"start":{"line":313,"column":20},"end":{"line":322,"column":21}},"71":{"start":{"line":314,"column":24},"end":{"line":314,"column":52}},"72":{"start":{"line":316,"column":24},"end":{"line":321,"column":25}},"73":{"start":{"line":317,"column":28},"end":{"line":317,"column":58}},"74":{"start":{"line":319,"column":28},"end":{"line":319,"column":76}},"75":{"start":{"line":320,"column":28},"end":{"line":320,"column":84}},"76":{"start":{"line":324,"column":20},"end":{"line":338,"column":21}},"77":{"start":{"line":325,"column":24},"end":{"line":337,"column":25}},"78":{"start":{"line":326,"column":28},"end":{"line":329,"column":31}},"79":{"start":{"line":330,"column":31},"end":{"line":337,"column":25}},"80":{"start":{"line":331,"column":28},"end":{"line":334,"column":31}},"81":{"start":{"line":336,"column":28},"end":{"line":336,"column":55}},"82":{"start":{"line":339,"column":23},"end":{"line":344,"column":17}},"83":{"start":{"line":340,"column":20},"end":{"line":343,"column":23}},"84":{"start":{"line":353,"column":16},"end":{"line":355,"column":17}},"85":{"start":{"line":354,"column":20},"end":{"line":354,"column":27}},"86":{"start":{"line":358,"column":16},"end":{"line":360,"column":17}},"87":{"start":{"line":359,"column":20},"end":{"line":359,"column":27}},"88":{"start":{"line":363,"column":16},"end":{"line":363,"column":67}},"89":{"start":{"line":365,"column":16},"end":{"line":373,"column":17}},"90":{"start":{"line":366,"column":20},"end":{"line":366,"column":48}},"91":{"start":{"line":368,"column":20},"end":{"line":372,"column":21}},"92":{"start":{"line":369,"column":24},"end":{"line":369,"column":60}},"93":{"start":{"line":371,"column":24},"end":{"line":371,"column":80}},"94":{"start":{"line":381,"column":16},"end":{"line":381,"column":49}}},"branchMap":{"1":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":8},"end":{"line":31,"column":42}},{"start":{"line":32,"column":8},"end":{"line":32,"column":47}},{"start":{"line":33,"column":8},"end":{"line":33,"column":42}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"3":{"line":48,"type":"switch","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":31}},{"start":{"line":50,"column":8},"end":{"line":50,"column":34}},{"start":{"line":51,"column":8},"end":{"line":51,"column":30}},{"start":{"line":52,"column":8},"end":{"line":52,"column":32}},{"start":{"line":53,"column":8},"end":{"line":53,"column":30}},{"start":{"line":54,"column":8},"end":{"line":54,"column":29}},{"start":{"line":55,"column":8},"end":{"line":55,"column":31}},{"start":{"line":56,"column":8},"end":{"line":56,"column":40}},{"start":{"line":57,"column":8},"end":{"line":58,"column":24}},{"start":{"line":60,"column":8},"end":{"line":61,"column":45}},{"start":{"line":63,"column":8},"end":{"line":64,"column":53}},{"start":{"line":66,"column":8},"end":{"line":70,"column":14}},{"start":{"line":72,"column":8},"end":{"line":76,"column":14}},{"start":{"line":78,"column":8},"end":{"line":82,"column":9}},{"start":{"line":84,"column":8},"end":{"line":85,"column":25}}]},"4":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":16},"end":{"line":68,"column":48}},{"start":{"line":69,"column":16},"end":{"line":69,"column":49}}]},"5":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":16},"end":{"line":74,"column":53}},{"start":{"line":75,"column":16},"end":{"line":75,"column":54}}]},"6":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":19},"end":{"line":132,"column":36}},{"start":{"line":132,"column":40},"end":{"line":132,"column":80}}]},"7":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":12},"end":{"line":147,"column":12}},{"start":{"line":147,"column":12},"end":{"line":147,"column":12}}]},"8":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":16},"end":{"line":147,"column":49}},{"start":{"line":148,"column":16},"end":{"line":148,"column":68}}]},"9":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":19},"end":{"line":152,"column":36}},{"start":{"line":152,"column":40},"end":{"line":152,"column":81}}]},"10":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":16},"end":{"line":164,"column":16}},{"start":{"line":164,"column":16},"end":{"line":164,"column":16}}]},"11":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":16},"end":{"line":201,"column":16}},{"start":{"line":201,"column":16},"end":{"line":201,"column":16}}]},"12":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":16},"end":{"line":210,"column":16}},{"start":{"line":210,"column":16},"end":{"line":210,"column":16}}]},"13":{"line":212,"type":"cond-expr","locations":[{"start":{"line":213,"column":30},"end":{"line":213,"column":78}},{"start":{"line":214,"column":30},"end":{"line":214,"column":59}}]},"14":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":16},"end":{"line":226,"column":16}},{"start":{"line":226,"column":16},"end":{"line":226,"column":16}}]},"15":{"line":226,"type":"binary-expr","locations":[{"start":{"line":226,"column":22},"end":{"line":226,"column":30}},{"start":{"line":226,"column":34},"end":{"line":226,"column":56}},{"start":{"line":226,"column":60},"end":{"line":226,"column":79}}]},"16":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":16},"end":{"line":240,"column":16}},{"start":{"line":240,"column":16},"end":{"line":240,"column":16}}]},"17":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":16},"end":{"line":256,"column":16}},{"start":{"line":256,"column":16},"end":{"line":256,"column":16}}]},"18":{"line":256,"type":"binary-expr","locations":[{"start":{"line":256,"column":22},"end":{"line":256,"column":30}},{"start":{"line":256,"column":34},"end":{"line":256,"column":56}},{"start":{"line":256,"column":60},"end":{"line":256,"column":79}}]},"19":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":24},"end":{"line":274,"column":24}},{"start":{"line":274,"column":24},"end":{"line":274,"column":24}}]},"20":{"line":274,"type":"binary-expr","locations":[{"start":{"line":274,"column":28},"end":{"line":274,"column":50}},{"start":{"line":274,"column":54},"end":{"line":274,"column":64}}]},"21":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":16},"end":{"line":298,"column":16}},{"start":{"line":298,"column":16},"end":{"line":298,"column":16}}]},"22":{"line":298,"type":"binary-expr","locations":[{"start":{"line":298,"column":22},"end":{"line":298,"column":30}},{"start":{"line":298,"column":34},"end":{"line":298,"column":56}}]},"23":{"line":303,"type":"if","locations":[{"start":{"line":303,"column":16},"end":{"line":303,"column":16}},{"start":{"line":303,"column":16},"end":{"line":303,"column":16}}]},"24":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":16},"end":{"line":308,"column":16}},{"start":{"line":308,"column":16},"end":{"line":308,"column":16}}]},"25":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":24},"end":{"line":316,"column":24}},{"start":{"line":316,"column":24},"end":{"line":316,"column":24}}]},"26":{"line":319,"type":"binary-expr","locations":[{"start":{"line":319,"column":40},"end":{"line":319,"column":49}},{"start":{"line":319,"column":53},"end":{"line":319,"column":75}}]},"27":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":20},"end":{"line":324,"column":20}},{"start":{"line":324,"column":20},"end":{"line":324,"column":20}}]},"28":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":24},"end":{"line":325,"column":24}},{"start":{"line":325,"column":24},"end":{"line":325,"column":24}}]},"29":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":31},"end":{"line":330,"column":31}},{"start":{"line":330,"column":31},"end":{"line":330,"column":31}}]},"30":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":23},"end":{"line":339,"column":23}},{"start":{"line":339,"column":23},"end":{"line":339,"column":23}}]},"31":{"line":353,"type":"if","locations":[{"start":{"line":353,"column":16},"end":{"line":353,"column":16}},{"start":{"line":353,"column":16},"end":{"line":353,"column":16}}]},"32":{"line":353,"type":"binary-expr","locations":[{"start":{"line":353,"column":22},"end":{"line":353,"column":30}},{"start":{"line":353,"column":34},"end":{"line":353,"column":56}},{"start":{"line":353,"column":60},"end":{"line":353,"column":79}}]},"33":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":16},"end":{"line":358,"column":16}},{"start":{"line":358,"column":16},"end":{"line":358,"column":16}}]},"34":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":20},"end":{"line":368,"column":20}},{"start":{"line":368,"column":20},"end":{"line":368,"column":20}}]}},"code":["/**"," * @fileoverview A rule to verify `super()` callings in constructor."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether a given code path segment is reachable or not."," *"," * @param {CodePathSegment} segment - A code path segment to check."," * @returns {boolean} `true` if the segment is reachable."," */","function isReachable(segment) {","    return segment.reachable;","}","","/**"," * Checks whether or not a given node is a constructor."," * @param {ASTNode} node - A node to check. This node type is one of"," *   `Program`, `FunctionDeclaration`, `FunctionExpression`, and"," *   `ArrowFunctionExpression`."," * @returns {boolean} `true` if the node is a constructor."," */","function isConstructorFunction(node) {","    return (","        node.type === \"FunctionExpression\" &&","        node.parent.type === \"MethodDefinition\" &&","        node.parent.kind === \"constructor\"","    );","}","","/**"," * Checks whether a given node can be a constructor or not."," *"," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node can be a constructor."," */","function isPossibleConstructor(node) {","    if (!node) {","        return false;","    }","","    switch (node.type) {","        case \"ClassExpression\":","        case \"FunctionExpression\":","        case \"ThisExpression\":","        case \"MemberExpression\":","        case \"CallExpression\":","        case \"NewExpression\":","        case \"YieldExpression\":","        case \"TaggedTemplateExpression\":","        case \"MetaProperty\":","            return true;","","        case \"Identifier\":","            return node.name !== \"undefined\";","","        case \"AssignmentExpression\":","            return isPossibleConstructor(node.right);","","        case \"LogicalExpression\":","            return (","                isPossibleConstructor(node.left) ||","                isPossibleConstructor(node.right)","            );","","        case \"ConditionalExpression\":","            return (","                isPossibleConstructor(node.alternate) ||","                isPossibleConstructor(node.consequent)","            );","","        case \"SequenceExpression\": {","            const lastExpression = node.expressions[node.expressions.length - 1];","","            return isPossibleConstructor(lastExpression);","        }","","        default:","            return false;","    }","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require `super()` calls in constructors\",","            category: \"ECMAScript 6\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        /*","         * {{hasExtends: boolean, scope: Scope, codePath: CodePath}[]}","         * Information for each constructor.","         * - upper:      Information of the upper constructor.","         * - hasExtends: A flag which shows whether own class has a valid `extends`","         *               part.","         * - scope:      The scope of own class.","         * - codePath:   The code path object of the constructor.","         */","        let funcInfo = null;","","        /*","         * {Map<string, {calledInSomePaths: boolean, calledInEveryPaths: boolean}>}","         * Information for each code path segment.","         * - calledInSomePaths:  A flag of be called `super()` in some code paths.","         * - calledInEveryPaths: A flag of be called `super()` in all code paths.","         * - validNodes:","         */","        let segInfoMap = Object.create(null);","","        /**","         * Gets the flag which shows `super()` is called in some paths.","         * @param {CodePathSegment} segment - A code path segment to get.","         * @returns {boolean} The flag which shows `super()` is called in some paths","         */","        function isCalledInSomePath(segment) {","            return segment.reachable && segInfoMap[segment.id].calledInSomePaths;","        }","","        /**","         * Gets the flag which shows `super()` is called in all paths.","         * @param {CodePathSegment} segment - A code path segment to get.","         * @returns {boolean} The flag which shows `super()` is called in all paths.","         */","        function isCalledInEveryPath(segment) {","","            /*","             * If specific segment is the looped segment of the current segment,","             * skip the segment.","             * If not skipped, this never becomes true after a loop.","             */","            if (segment.nextSegments.length === 1 &&","                segment.nextSegments[0].isLoopedPrevSegment(segment)","            ) {","                return true;","            }","            return segment.reachable && segInfoMap[segment.id].calledInEveryPaths;","        }","","        return {","","            /**","             * Stacks a constructor information.","             * @param {CodePath} codePath - A code path which was started.","             * @param {ASTNode} node - The current node.","             * @returns {void}","             */","            onCodePathStart(codePath, node) {","                if (isConstructorFunction(node)) {","","                    // Class > ClassBody > MethodDefinition > FunctionExpression","                    const classNode = node.parent.parent.parent;","                    const superClass = classNode.superClass;","","                    funcInfo = {","                        upper: funcInfo,","                        isConstructor: true,","                        hasExtends: Boolean(superClass),","                        superIsConstructor: isPossibleConstructor(superClass),","                        codePath","                    };","                } else {","                    funcInfo = {","                        upper: funcInfo,","                        isConstructor: false,","                        hasExtends: false,","                        superIsConstructor: false,","                        codePath","                    };","                }","            },","","            /**","             * Pops a constructor information.","             * And reports if `super()` lacked.","             * @param {CodePath} codePath - A code path which was ended.","             * @param {ASTNode} node - The current node.","             * @returns {void}","             */","            onCodePathEnd(codePath, node) {","                const hasExtends = funcInfo.hasExtends;","","                // Pop.","                funcInfo = funcInfo.upper;","","                if (!hasExtends) {","                    return;","                }","","                // Reports if `super()` lacked.","                const segments = codePath.returnedSegments;","                const calledInEveryPaths = segments.every(isCalledInEveryPath);","                const calledInSomePaths = segments.some(isCalledInSomePath);","","                if (!calledInEveryPaths) {","                    context.report({","                        message: calledInSomePaths","                            ? \"Lacked a call of 'super()' in some code paths.\"","                            : \"Expected to call 'super()'.\",","                        node: node.parent","                    });","                }","            },","","            /**","             * Initialize information of a given code path segment.","             * @param {CodePathSegment} segment - A code path segment to initialize.","             * @returns {void}","             */","            onCodePathSegmentStart(segment) {","                if (!(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends)) {","                    return;","                }","","                // Initialize info.","                const info = segInfoMap[segment.id] = {","                    calledInSomePaths: false,","                    calledInEveryPaths: false,","                    validNodes: []","                };","","                // When there are previous segments, aggregates these.","                const prevSegments = segment.prevSegments;","","                if (prevSegments.length > 0) {","                    info.calledInSomePaths = prevSegments.some(isCalledInSomePath);","                    info.calledInEveryPaths = prevSegments.every(isCalledInEveryPath);","                }","            },","","            /**","             * Update information of the code path segment when a code path was","             * looped.","             * @param {CodePathSegment} fromSegment - The code path segment of the","             *      end of a loop.","             * @param {CodePathSegment} toSegment - A code path segment of the head","             *      of a loop.","             * @returns {void}","             */","            onCodePathSegmentLoop(fromSegment, toSegment) {","                if (!(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends)) {","                    return;","                }","","                // Update information inside of the loop.","                const isRealLoop = toSegment.prevSegments.length >= 2;","","                funcInfo.codePath.traverseSegments(","                    { first: toSegment, last: fromSegment },","                    segment => {","                        const info = segInfoMap[segment.id];","                        const prevSegments = segment.prevSegments;","","                        // Updates flags.","                        info.calledInSomePaths = prevSegments.some(isCalledInSomePath);","                        info.calledInEveryPaths = prevSegments.every(isCalledInEveryPath);","","                        // If flags become true anew, reports the valid nodes.","                        if (info.calledInSomePaths || isRealLoop) {","                            const nodes = info.validNodes;","","                            info.validNodes = [];","","                            for (let i = 0; i < nodes.length; ++i) {","                                const node = nodes[i];","","                                context.report({","                                    message: \"Unexpected duplicate 'super()'.\",","                                    node","                                });","                            }","                        }","                    }","                );","            },","","            /**","             * Checks for a call of `super()`.","             * @param {ASTNode} node - A CallExpression node to check.","             * @returns {void}","             */","            \"CallExpression:exit\"(node) {","                if (!(funcInfo && funcInfo.isConstructor)) {","                    return;","                }","","                // Skips except `super()`.","                if (node.callee.type !== \"Super\") {","                    return;","                }","","                // Reports if needed.","                if (funcInfo.hasExtends) {","                    const segments = funcInfo.codePath.currentSegments;","                    let duplicate = false;","                    let info = null;","","                    for (let i = 0; i < segments.length; ++i) {","                        const segment = segments[i];","","                        if (segment.reachable) {","                            info = segInfoMap[segment.id];","","                            duplicate = duplicate || info.calledInSomePaths;","                            info.calledInSomePaths = info.calledInEveryPaths = true;","                        }","                    }","","                    if (info) {","                        if (duplicate) {","                            context.report({","                                message: \"Unexpected duplicate 'super()'.\",","                                node","                            });","                        } else if (!funcInfo.superIsConstructor) {","                            context.report({","                                message: \"Unexpected 'super()' because 'super' is not a constructor.\",","                                node","                            });","                        } else {","                            info.validNodes.push(node);","                        }","                    }","                } else if (funcInfo.codePath.currentSegments.some(isReachable)) {","                    context.report({","                        message: \"Unexpected 'super()'.\",","                        node","                    });","                }","            },","","            /**","             * Set the mark to the returned path as `super()` was called.","             * @param {ASTNode} node - A ReturnStatement node to check.","             * @returns {void}","             */","            ReturnStatement(node) {","                if (!(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends)) {","                    return;","                }","","                // Skips if no argument.","                if (!node.argument) {","                    return;","                }","","                // Returning argument is a substitute of 'super()'.","                const segments = funcInfo.codePath.currentSegments;","","                for (let i = 0; i < segments.length; ++i) {","                    const segment = segments[i];","","                    if (segment.reachable) {","                        const info = segInfoMap[segment.id];","","                        info.calledInSomePaths = info.calledInEveryPaths = true;","                    }","                }","            },","","            /**","             * Resets state.","             * @returns {void}","             */","            \"Program:exit\"() {","                segInfoMap = Object.create(null);","            }","        };","    }","};",""],"l":{"18":1,"19":0,"29":1,"30":0,"43":1,"44":0,"45":0,"48":0,"58":0,"61":0,"64":0,"67":0,"73":0,"79":0,"81":0,"85":0,"93":1,"115":0,"124":0,"131":1,"132":0,"140":1,"147":0,"150":0,"152":0,"155":0,"164":0,"167":0,"168":0,"170":0,"178":0,"196":0,"199":0,"201":0,"202":0,"206":0,"207":0,"208":0,"210":0,"211":0,"226":0,"227":0,"231":0,"238":0,"240":0,"241":0,"242":0,"256":0,"257":0,"261":0,"263":0,"266":0,"267":0,"270":0,"271":0,"274":0,"275":0,"277":0,"279":0,"280":0,"282":0,"298":0,"299":0,"303":0,"304":0,"308":0,"309":0,"310":0,"311":0,"313":0,"314":0,"316":0,"317":0,"319":0,"320":0,"324":0,"325":0,"326":0,"330":0,"331":0,"336":0,"339":0,"340":0,"353":0,"354":0,"358":0,"359":0,"363":0,"365":0,"366":0,"368":0,"369":0,"371":0,"381":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/curly.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/curly.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0],"19":[0,0],"20":[0,0],"21":[0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"(anonymous_1)","line":57,"loc":{"start":{"line":57,"column":10},"end":{"line":57,"column":20}}},"2":{"name":"isCollapsedOneLiner","line":76,"loc":{"start":{"line":76,"column":8},"end":{"line":76,"column":43}}},"3":{"name":"isOneLiner","line":90,"loc":{"start":{"line":90,"column":8},"end":{"line":90,"column":34}}},"4":{"name":"isElseKeywordToken","line":103,"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":43}}},"5":{"name":"getElseKeyword","line":112,"loc":{"start":{"line":112,"column":8},"end":{"line":112,"column":38}}},"6":{"name":"requiresBraceOfConsequent","line":127,"loc":{"start":{"line":127,"column":8},"end":{"line":127,"column":49}}},"7":{"name":"reportExpectedBraceError","line":154,"loc":{"start":{"line":154,"column":8},"end":{"line":154,"column":72}}},"8":{"name":"needsSemicolon","line":172,"loc":{"start":{"line":172,"column":8},"end":{"line":172,"column":48}}},"9":{"name":"reportUnnecessaryBraceError","line":228,"loc":{"start":{"line":228,"column":8},"end":{"line":228,"column":75}}},"10":{"name":"(anonymous_10)","line":237,"loc":{"start":{"line":237,"column":19},"end":{"line":237,"column":27}}},"11":{"name":"prepareCheck","line":281,"loc":{"start":{"line":281,"column":8},"end":{"line":281,"column":56}}},"12":{"name":"(anonymous_12)","line":310,"loc":{"start":{"line":310,"column":21},"end":{"line":310,"column":24}}},"13":{"name":"prepareIfChecks","line":328,"loc":{"start":{"line":328,"column":8},"end":{"line":328,"column":39}}},"14":{"name":"(anonymous_14)","line":367,"loc":{"start":{"line":367,"column":23},"end":{"line":367,"column":30}}},"15":{"name":"(anonymous_15)","line":375,"loc":{"start":{"line":375,"column":26},"end":{"line":375,"column":33}}},"16":{"name":"(anonymous_16)","line":379,"loc":{"start":{"line":379,"column":28},"end":{"line":379,"column":35}}},"17":{"name":"(anonymous_17)","line":383,"loc":{"start":{"line":383,"column":24},"end":{"line":383,"column":31}}},"18":{"name":"(anonymous_18)","line":387,"loc":{"start":{"line":387,"column":26},"end":{"line":387,"column":33}}},"19":{"name":"(anonymous_19)","line":391,"loc":{"start":{"line":391,"column":26},"end":{"line":391,"column":33}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"3":{"start":{"line":18,"column":0},"end":{"line":396,"column":2}},"4":{"start":{"line":59,"column":8},"end":{"line":59,"column":59}},"5":{"start":{"line":60,"column":8},"end":{"line":60,"column":64}},"6":{"start":{"line":61,"column":8},"end":{"line":61,"column":69}},"7":{"start":{"line":62,"column":8},"end":{"line":62,"column":65}},"8":{"start":{"line":64,"column":8},"end":{"line":64,"column":51}},"9":{"start":{"line":76,"column":8},"end":{"line":82,"column":9}},"10":{"start":{"line":77,"column":12},"end":{"line":77,"column":59}},"11":{"start":{"line":78,"column":12},"end":{"line":78,"column":55}},"12":{"start":{"line":79,"column":12},"end":{"line":79,"column":116}},"13":{"start":{"line":81,"column":12},"end":{"line":81,"column":81}},"14":{"start":{"line":90,"column":8},"end":{"line":95,"column":9}},"15":{"start":{"line":91,"column":12},"end":{"line":92,"column":53}},"16":{"start":{"line":94,"column":12},"end":{"line":94,"column":62}},"17":{"start":{"line":103,"column":8},"end":{"line":105,"column":9}},"18":{"start":{"line":104,"column":12},"end":{"line":104,"column":70}},"19":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"20":{"start":{"line":113,"column":12},"end":{"line":113,"column":122}},"21":{"start":{"line":127,"column":8},"end":{"line":143,"column":9}},"22":{"start":{"line":128,"column":12},"end":{"line":140,"column":13}},"23":{"start":{"line":129,"column":16},"end":{"line":131,"column":17}},"24":{"start":{"line":130,"column":20},"end":{"line":130,"column":32}},"25":{"start":{"line":133,"column":16},"end":{"line":133,"column":47}},"26":{"start":{"line":134,"column":16},"end":{"line":139,"column":17}},"27":{"start":{"line":135,"column":20},"end":{"line":137,"column":21}},"28":{"start":{"line":136,"column":24},"end":{"line":136,"column":36}},"29":{"start":{"line":138,"column":20},"end":{"line":138,"column":63}},"30":{"start":{"line":142,"column":12},"end":{"line":142,"column":25}},"31":{"start":{"line":154,"column":8},"end":{"line":165,"column":9}},"32":{"start":{"line":155,"column":12},"end":{"line":164,"column":15}},"33":{"start":{"line":163,"column":30},"end":{"line":163,"column":94}},"34":{"start":{"line":172,"column":8},"end":{"line":217,"column":9}},"35":{"start":{"line":173,"column":12},"end":{"line":173,"column":74}},"36":{"start":{"line":174,"column":12},"end":{"line":174,"column":72}},"37":{"start":{"line":175,"column":12},"end":{"line":175,"column":87}},"38":{"start":{"line":177,"column":12},"end":{"line":181,"column":13}},"39":{"start":{"line":180,"column":16},"end":{"line":180,"column":29}},"40":{"start":{"line":183,"column":12},"end":{"line":187,"column":13}},"41":{"start":{"line":186,"column":16},"end":{"line":186,"column":29}},"42":{"start":{"line":189,"column":12},"end":{"line":195,"column":13}},"43":{"start":{"line":194,"column":16},"end":{"line":194,"column":29}},"44":{"start":{"line":197,"column":12},"end":{"line":201,"column":13}},"45":{"start":{"line":200,"column":16},"end":{"line":200,"column":28}},"46":{"start":{"line":203,"column":12},"end":{"line":207,"column":13}},"47":{"start":{"line":206,"column":16},"end":{"line":206,"column":28}},"48":{"start":{"line":209,"column":12},"end":{"line":213,"column":13}},"49":{"start":{"line":212,"column":16},"end":{"line":212,"column":28}},"50":{"start":{"line":216,"column":12},"end":{"line":216,"column":25}},"51":{"start":{"line":228,"column":8},"end":{"line":265,"column":9}},"52":{"start":{"line":229,"column":12},"end":{"line":264,"column":15}},"53":{"start":{"line":241,"column":20},"end":{"line":243,"column":101}},"54":{"start":{"line":245,"column":20},"end":{"line":245,"column":78}},"55":{"start":{"line":246,"column":20},"end":{"line":246,"column":77}},"56":{"start":{"line":247,"column":20},"end":{"line":247,"column":87}},"57":{"start":{"line":249,"column":20},"end":{"line":256,"column":21}},"58":{"start":{"line":255,"column":24},"end":{"line":255,"column":36}},"59":{"start":{"line":258,"column":20},"end":{"line":260,"column":103}},"60":{"start":{"line":262,"column":20},"end":{"line":262,"column":109}},"61":{"start":{"line":281,"column":8},"end":{"line":320,"column":9}},"62":{"start":{"line":282,"column":12},"end":{"line":282,"column":62}},"63":{"start":{"line":283,"column":12},"end":{"line":283,"column":32}},"64":{"start":{"line":285,"column":12},"end":{"line":305,"column":13}},"65":{"start":{"line":286,"column":16},"end":{"line":286,"column":32}},"66":{"start":{"line":287,"column":19},"end":{"line":305,"column":13}},"67":{"start":{"line":288,"column":16},"end":{"line":290,"column":17}},"68":{"start":{"line":289,"column":20},"end":{"line":289,"column":37}},"69":{"start":{"line":291,"column":19},"end":{"line":305,"column":13}},"70":{"start":{"line":292,"column":16},"end":{"line":294,"column":17}},"71":{"start":{"line":293,"column":20},"end":{"line":293,"column":36}},"72":{"start":{"line":295,"column":19},"end":{"line":305,"column":13}},"73":{"start":{"line":296,"column":16},"end":{"line":302,"column":17}},"74":{"start":{"line":297,"column":20},"end":{"line":297,"column":89}},"75":{"start":{"line":299,"column":20},"end":{"line":299,"column":58}},"76":{"start":{"line":300,"column":23},"end":{"line":302,"column":17}},"77":{"start":{"line":301,"column":20},"end":{"line":301,"column":36}},"78":{"start":{"line":304,"column":16},"end":{"line":304,"column":32}},"79":{"start":{"line":307,"column":12},"end":{"line":319,"column":14}},"80":{"start":{"line":311,"column":20},"end":{"line":317,"column":21}},"81":{"start":{"line":312,"column":24},"end":{"line":316,"column":25}},"82":{"start":{"line":313,"column":28},"end":{"line":313,"column":79}},"83":{"start":{"line":315,"column":28},"end":{"line":315,"column":82}},"84":{"start":{"line":328,"column":8},"end":{"line":360,"column":9}},"85":{"start":{"line":329,"column":12},"end":{"line":329,"column":38}},"86":{"start":{"line":331,"column":12},"end":{"line":338,"column":27}},"87":{"start":{"line":332,"column":16},"end":{"line":332,"column":92}},"88":{"start":{"line":333,"column":16},"end":{"line":336,"column":17}},"89":{"start":{"line":334,"column":20},"end":{"line":334,"column":84}},"90":{"start":{"line":335,"column":20},"end":{"line":335,"column":26}},"91":{"start":{"line":337,"column":16},"end":{"line":337,"column":38}},"92":{"start":{"line":340,"column":12},"end":{"line":357,"column":13}},"93":{"start":{"line":347,"column":16},"end":{"line":352,"column":19}},"94":{"start":{"line":348,"column":20},"end":{"line":350,"column":21}},"95":{"start":{"line":349,"column":24},"end":{"line":349,"column":54}},"96":{"start":{"line":351,"column":20},"end":{"line":351,"column":48}},"97":{"start":{"line":354,"column":16},"end":{"line":356,"column":19}},"98":{"start":{"line":355,"column":20},"end":{"line":355,"column":54}},"99":{"start":{"line":359,"column":12},"end":{"line":359,"column":34}},"100":{"start":{"line":366,"column":8},"end":{"line":394,"column":10}},"101":{"start":{"line":368,"column":16},"end":{"line":372,"column":17}},"102":{"start":{"line":369,"column":20},"end":{"line":371,"column":23}},"103":{"start":{"line":370,"column":24},"end":{"line":370,"column":46}},"104":{"start":{"line":376,"column":16},"end":{"line":376,"column":76}},"105":{"start":{"line":380,"column":16},"end":{"line":380,"column":60}},"106":{"start":{"line":384,"column":16},"end":{"line":384,"column":74}},"107":{"start":{"line":388,"column":16},"end":{"line":388,"column":64}},"108":{"start":{"line":392,"column":16},"end":{"line":392,"column":64}}},"branchMap":{"1":{"line":79,"type":"cond-expr","locations":[{"start":{"line":79,"column":77},"end":{"line":79,"column":108}},{"start":{"line":79,"column":111},"end":{"line":79,"column":115}}]},"2":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":19},"end":{"line":104,"column":41}},{"start":{"line":104,"column":45},"end":{"line":104,"column":69}}]},"3":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":19},"end":{"line":113,"column":33}},{"start":{"line":113,"column":37},"end":{"line":113,"column":121}}]},"4":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":12},"end":{"line":128,"column":12}},{"start":{"line":128,"column":12},"end":{"line":128,"column":12}}]},"5":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":16},"end":{"line":128,"column":30}},{"start":{"line":128,"column":34},"end":{"line":128,"column":75}}]},"6":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16}},{"start":{"line":129,"column":16},"end":{"line":129,"column":16}}]},"7":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":20},"end":{"line":135,"column":20}},{"start":{"line":135,"column":20},"end":{"line":135,"column":20}}]},"8":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":24},"end":{"line":135,"column":51}},{"start":{"line":135,"column":55},"end":{"line":135,"column":70}}]},"9":{"line":157,"type":"cond-expr","locations":[{"start":{"line":157,"column":40},"end":{"line":157,"column":44}},{"start":{"line":157,"column":47},"end":{"line":157,"column":67}}]},"10":{"line":161,"type":"cond-expr","locations":[{"start":{"line":161,"column":38},"end":{"line":161,"column":50}},{"start":{"line":161,"column":53},"end":{"line":161,"column":55}}]},"11":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":12},"end":{"line":177,"column":12}},{"start":{"line":177,"column":12},"end":{"line":177,"column":12}}]},"12":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":12},"end":{"line":183,"column":12}},{"start":{"line":183,"column":12},"end":{"line":183,"column":12}}]},"13":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":12},"end":{"line":189,"column":12}},{"start":{"line":189,"column":12},"end":{"line":189,"column":12}}]},"14":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":16},"end":{"line":189,"column":55}},{"start":{"line":189,"column":59},"end":{"line":189,"column":109}},{"start":{"line":189,"column":113},"end":{"line":189,"column":168}}]},"15":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":12},"end":{"line":197,"column":12}},{"start":{"line":197,"column":12},"end":{"line":197,"column":12}}]},"16":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":12},"end":{"line":203,"column":12}},{"start":{"line":203,"column":12},"end":{"line":203,"column":12}}]},"17":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":12},"end":{"line":209,"column":12}},{"start":{"line":209,"column":12},"end":{"line":209,"column":12}}]},"18":{"line":209,"type":"binary-expr","locations":[{"start":{"line":209,"column":16},"end":{"line":209,"column":49}},{"start":{"line":209,"column":54},"end":{"line":209,"column":80}},{"start":{"line":209,"column":84},"end":{"line":209,"column":110}}]},"19":{"line":231,"type":"cond-expr","locations":[{"start":{"line":231,"column":40},"end":{"line":231,"column":44}},{"start":{"line":231,"column":47},"end":{"line":231,"column":67}}]},"20":{"line":235,"type":"cond-expr","locations":[{"start":{"line":235,"column":38},"end":{"line":235,"column":50}},{"start":{"line":235,"column":53},"end":{"line":235,"column":55}}]},"21":{"line":241,"type":"binary-expr","locations":[{"start":{"line":241,"column":48},"end":{"line":241,"column":80}},{"start":{"line":242,"column":24},"end":{"line":242,"column":82}},{"start":{"line":243,"column":24},"end":{"line":243,"column":100}}]},"22":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":20},"end":{"line":249,"column":20}},{"start":{"line":249,"column":20},"end":{"line":249,"column":20}}]},"23":{"line":262,"type":"cond-expr","locations":[{"start":{"line":262,"column":78},"end":{"line":262,"column":81}},{"start":{"line":262,"column":84},"end":{"line":262,"column":86}}]},"24":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":12},"end":{"line":285,"column":12}},{"start":{"line":285,"column":12},"end":{"line":285,"column":12}}]},"25":{"line":285,"type":"binary-expr","locations":[{"start":{"line":285,"column":16},"end":{"line":285,"column":43}},{"start":{"line":285,"column":47},"end":{"line":285,"column":71}},{"start":{"line":285,"column":75},"end":{"line":285,"column":106}}]},"26":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":19},"end":{"line":287,"column":19}},{"start":{"line":287,"column":19},"end":{"line":287,"column":19}}]},"27":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":16},"end":{"line":288,"column":16}},{"start":{"line":288,"column":16},"end":{"line":288,"column":16}}]},"28":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":20},"end":{"line":288,"column":28}},{"start":{"line":288,"column":32},"end":{"line":288,"column":54}}]},"29":{"line":291,"type":"if","locations":[{"start":{"line":291,"column":19},"end":{"line":291,"column":19}},{"start":{"line":291,"column":19},"end":{"line":291,"column":19}}]},"30":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":16},"end":{"line":292,"column":16}},{"start":{"line":292,"column":16},"end":{"line":292,"column":16}}]},"31":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":19},"end":{"line":295,"column":19}},{"start":{"line":295,"column":19},"end":{"line":295,"column":19}}]},"32":{"line":296,"type":"if","locations":[{"start":{"line":296,"column":16},"end":{"line":296,"column":16}},{"start":{"line":296,"column":16},"end":{"line":296,"column":16}}]},"33":{"line":296,"type":"binary-expr","locations":[{"start":{"line":296,"column":20},"end":{"line":296,"column":28}},{"start":{"line":296,"column":32},"end":{"line":296,"column":54}},{"start":{"line":296,"column":58},"end":{"line":296,"column":82}}]},"34":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":23},"end":{"line":300,"column":23}},{"start":{"line":300,"column":23},"end":{"line":300,"column":23}}]},"35":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":20},"end":{"line":311,"column":20}},{"start":{"line":311,"column":20},"end":{"line":311,"column":20}}]},"36":{"line":311,"type":"binary-expr","locations":[{"start":{"line":311,"column":24},"end":{"line":311,"column":46}},{"start":{"line":311,"column":50},"end":{"line":311,"column":79}}]},"37":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":24},"end":{"line":312,"column":24}},{"start":{"line":312,"column":24},"end":{"line":312,"column":24}}]},"38":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":16},"end":{"line":333,"column":16}},{"start":{"line":333,"column":16},"end":{"line":333,"column":16}}]},"39":{"line":333,"type":"binary-expr","locations":[{"start":{"line":333,"column":20},"end":{"line":333,"column":34}},{"start":{"line":333,"column":38},"end":{"line":333,"column":75}}]},"40":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":12},"end":{"line":340,"column":12}},{"start":{"line":340,"column":12},"end":{"line":340,"column":12}}]},"41":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":20},"end":{"line":348,"column":20}},{"start":{"line":348,"column":20},"end":{"line":348,"column":20}}]},"42":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":16},"end":{"line":368,"column":16}},{"start":{"line":368,"column":16},"end":{"line":368,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag statements without curly braces"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","const esUtils = require(\"esutils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent brace style for all control statements\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: {","            anyOf: [","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"all\"]","                        }","                    ],","                    minItems: 0,","                    maxItems: 1","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"multi\", \"multi-line\", \"multi-or-nest\"]","                        },","                        {","                            enum: [\"consistent\"]","                        }","                    ],","                    minItems: 0,","                    maxItems: 2","                }","            ]","        },","","        fixable: \"code\"","    },","","    create(context) {","","        const multiOnly = (context.options[0] === \"multi\");","        const multiLine = (context.options[0] === \"multi-line\");","        const multiOrNest = (context.options[0] === \"multi-or-nest\");","        const consistent = (context.options[1] === \"consistent\");","","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Determines if a given node is a one-liner that's on the same line as it's preceding code.","         * @param {ASTNode} node The node to check.","         * @returns {boolean} True if the node is a one-liner that's on the same line as it's preceding code.","         * @private","         */","        function isCollapsedOneLiner(node) {","            const before = sourceCode.getTokenBefore(node);","            const last = sourceCode.getLastToken(node);","            const lastExcludingSemicolon = astUtils.isSemicolonToken(last) ? sourceCode.getTokenBefore(last) : last;","","            return before.loc.start.line === lastExcludingSemicolon.loc.end.line;","        }","","        /**","         * Determines if a given node is a one-liner.","         * @param {ASTNode} node The node to check.","         * @returns {boolean} True if the node is a one-liner.","         * @private","         */","        function isOneLiner(node) {","            const first = sourceCode.getFirstToken(node),","                last = sourceCode.getLastToken(node);","","            return first.loc.start.line === last.loc.end.line;","        }","","        /**","         * Checks if the given token is an `else` token or not.","         *","         * @param {Token} token - The token to check.","         * @returns {boolean} `true` if the token is an `else` token.","         */","        function isElseKeywordToken(token) {","            return token.value === \"else\" && token.type === \"Keyword\";","        }","","        /**","         * Gets the `else` keyword token of a given `IfStatement` node.","         * @param {ASTNode} node - A `IfStatement` node to get.","         * @returns {Token} The `else` keyword token.","         */","        function getElseKeyword(node) {","            return node.alternate && sourceCode.getFirstTokenBetween(node.consequent, node.alternate, isElseKeywordToken);","        }","","        /**","         * Checks a given IfStatement node requires braces of the consequent chunk.","         * This returns `true` when below:","         *","         * 1. The given node has the `alternate` node.","         * 2. There is a `IfStatement` which doesn't have `alternate` node in the","         *    trailing statement chain of the `consequent` node.","         *","         * @param {ASTNode} node - A IfStatement node to check.","         * @returns {boolean} `true` if the node requires braces of the consequent chunk.","         */","        function requiresBraceOfConsequent(node) {","            if (node.alternate && node.consequent.type === \"BlockStatement\") {","                if (node.consequent.body.length >= 2) {","                    return true;","                }","","                node = node.consequent.body[0];","                while (node) {","                    if (node.type === \"IfStatement\" && !node.alternate) {","                        return true;","                    }","                    node = astUtils.getTrailingStatement(node);","                }","            }","","            return false;","        }","","        /**","         * Reports \"Expected { after ...\" error","         * @param {ASTNode} node The node to report.","         * @param {ASTNode} bodyNode The body node that is incorrectly missing curly brackets","         * @param {string} name The name to report.","         * @param {string} suffix Additional string to add to the end of a report.","         * @returns {void}","         * @private","         */","        function reportExpectedBraceError(node, bodyNode, name, suffix) {","            context.report({","                node,","                loc: (name !== \"else\" ? node : getElseKeyword(node)).loc.start,","                message: \"Expected { after '{{name}}'{{suffix}}.\",","                data: {","                    name,","                    suffix: (suffix ? ` ${suffix}` : \"\")","                },","                fix: fixer => fixer.replaceText(bodyNode, `{${sourceCode.getText(bodyNode)}}`)","            });","        }","","        /**","        * Determines if a semicolon needs to be inserted after removing a set of curly brackets, in order to avoid a SyntaxError.","        * @param {Token} closingBracket The } token","        * @returns {boolean} `true` if a semicolon needs to be inserted after the last statement in the block.","        */","        function needsSemicolon(closingBracket) {","            const tokenBefore = sourceCode.getTokenBefore(closingBracket);","            const tokenAfter = sourceCode.getTokenAfter(closingBracket);","            const lastBlockNode = sourceCode.getNodeByRangeIndex(tokenBefore.range[0]);","","            if (astUtils.isSemicolonToken(tokenBefore)) {","","                // If the last statement already has a semicolon, don't add another one.","                return false;","            }","","            if (!tokenAfter) {","","                // If there are no statements after this block, there is no need to add a semicolon.","                return false;","            }","","            if (lastBlockNode.type === \"BlockStatement\" && lastBlockNode.parent.type !== \"FunctionExpression\" && lastBlockNode.parent.type !== \"ArrowFunctionExpression\") {","","                // If the last node surrounded by curly brackets is a BlockStatement (other than a FunctionExpression or an ArrowFunctionExpression),","                // don't insert a semicolon. Otherwise, the semicolon would be parsed as a separate statement, which would cause","                // a SyntaxError if it was followed by `else`.","                return false;","            }","","            if (tokenBefore.loc.end.line === tokenAfter.loc.start.line) {","","                // If the next token is on the same line, insert a semicolon.","                return true;","            }","","            if (/^[([/`+-]/.test(tokenAfter.value)) {","","                // If the next token starts with a character that would disrupt ASI, insert a semicolon.","                return true;","            }","","            if (tokenBefore.type === \"Punctuator\" && (tokenBefore.value === \"++\" || tokenBefore.value === \"--\")) {","","                // If the last token is ++ or --, insert a semicolon to avoid disrupting ASI.","                return true;","            }","","            // Otherwise, do not insert a semicolon.","            return false;","        }","","        /**","         * Reports \"Unnecessary { after ...\" error","         * @param {ASTNode} node The node to report.","         * @param {ASTNode} bodyNode The block statement that is incorrectly surrounded by parens","         * @param {string} name The name to report.","         * @param {string} suffix Additional string to add to the end of a report.","         * @returns {void}","         * @private","         */","        function reportUnnecessaryBraceError(node, bodyNode, name, suffix) {","            context.report({","                node,","                loc: (name !== \"else\" ? node : getElseKeyword(node)).loc.start,","                message: \"Unnecessary { after '{{name}}'{{suffix}}.\",","                data: {","                    name,","                    suffix: (suffix ? ` ${suffix}` : \"\")","                },","                fix(fixer) {","","                    // `do while` expressions sometimes need a space to be inserted after `do`.","                    // e.g. `do{foo()} while (bar)` should be corrected to `do foo() while (bar)`","                    const needsPrecedingSpace = node.type === \"DoWhileStatement\" &&","                        sourceCode.getTokenBefore(bodyNode).end === bodyNode.start &&","                        esUtils.code.isIdentifierPartES6(sourceCode.getText(bodyNode).charCodeAt(1));","","                    const openingBracket = sourceCode.getFirstToken(bodyNode);","                    const closingBracket = sourceCode.getLastToken(bodyNode);","                    const lastTokenInBlock = sourceCode.getTokenBefore(closingBracket);","","                    if (needsSemicolon(closingBracket)) {","","                        /*","                         * If removing braces would cause a SyntaxError due to multiple statements on the same line (or","                         * change the semantics of the code due to ASI), don't perform a fix.","                         */","                        return null;","                    }","","                    const resultingBodyText = sourceCode.getText().slice(openingBracket.range[1], lastTokenInBlock.range[0]) +","                        sourceCode.getText(lastTokenInBlock) +","                        sourceCode.getText().slice(lastTokenInBlock.range[1], closingBracket.range[0]);","","                    return fixer.replaceText(bodyNode, (needsPrecedingSpace ? \" \" : \"\") + resultingBodyText);","                }","            });","        }","","        /**","         * Prepares to check the body of a node to see if it's a block statement.","         * @param {ASTNode} node The node to report if there's a problem.","         * @param {ASTNode} body The body node to check for blocks.","         * @param {string} name The name to report if there's a problem.","         * @param {string} suffix Additional string to add to the end of a report.","         * @returns {Object} a prepared check object, with \"actual\", \"expected\", \"check\" properties.","         *   \"actual\" will be `true` or `false` whether the body is already a block statement.","         *   \"expected\" will be `true` or `false` if the body should be a block statement or not, or","         *   `null` if it doesn't matter, depending on the rule options. It can be modified to change","         *   the final behavior of \"check\".","         *   \"check\" will be a function reporting appropriate problems depending on the other","         *   properties.","         */","        function prepareCheck(node, body, name, suffix) {","            const hasBlock = (body.type === \"BlockStatement\");","            let expected = null;","","            if (node.type === \"IfStatement\" && node.consequent === body && requiresBraceOfConsequent(node)) {","                expected = true;","            } else if (multiOnly) {","                if (hasBlock && body.body.length === 1) {","                    expected = false;","                }","            } else if (multiLine) {","                if (!isCollapsedOneLiner(body)) {","                    expected = true;","                }","            } else if (multiOrNest) {","                if (hasBlock && body.body.length === 1 && isOneLiner(body.body[0])) {","                    const leadingComments = sourceCode.getComments(body.body[0]).leading;","","                    expected = leadingComments.length > 0;","                } else if (!isOneLiner(body)) {","                    expected = true;","                }","            } else {","                expected = true;","            }","","            return {","                actual: hasBlock,","                expected,","                check() {","                    if (this.expected !== null && this.expected !== this.actual) {","                        if (this.expected) {","                            reportExpectedBraceError(node, body, name, suffix);","                        } else {","                            reportUnnecessaryBraceError(node, body, name, suffix);","                        }","                    }","                }","            };","        }","","        /**","         * Prepares to check the bodies of a \"if\", \"else if\" and \"else\" chain.","         * @param {ASTNode} node The first IfStatement node of the chain.","         * @returns {Object[]} prepared checks for each body of the chain. See `prepareCheck` for more","         *   information.","         */","        function prepareIfChecks(node) {","            const preparedChecks = [];","","            do {","                preparedChecks.push(prepareCheck(node, node.consequent, \"if\", \"condition\"));","                if (node.alternate && node.alternate.type !== \"IfStatement\") {","                    preparedChecks.push(prepareCheck(node, node.alternate, \"else\"));","                    break;","                }","                node = node.alternate;","            } while (node);","","            if (consistent) {","","                /*","                 * If any node should have or already have braces, make sure they","                 * all have braces.","                 * If all nodes shouldn't have braces, make sure they don't.","                 */","                const expected = preparedChecks.some(preparedCheck => {","                    if (preparedCheck.expected !== null) {","                        return preparedCheck.expected;","                    }","                    return preparedCheck.actual;","                });","","                preparedChecks.forEach(preparedCheck => {","                    preparedCheck.expected = expected;","                });","            }","","            return preparedChecks;","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            IfStatement(node) {","                if (node.parent.type !== \"IfStatement\") {","                    prepareIfChecks(node).forEach(preparedCheck => {","                        preparedCheck.check();","                    });","                }","            },","","            WhileStatement(node) {","                prepareCheck(node, node.body, \"while\", \"condition\").check();","            },","","            DoWhileStatement(node) {","                prepareCheck(node, node.body, \"do\").check();","            },","","            ForStatement(node) {","                prepareCheck(node, node.body, \"for\", \"condition\").check();","            },","","            ForInStatement(node) {","                prepareCheck(node, node.body, \"for-in\").check();","            },","","            ForOfStatement(node) {","                prepareCheck(node, node.body, \"for-of\").check();","            }","        };","    }","};",""],"l":{"11":1,"12":1,"18":1,"59":0,"60":0,"61":0,"62":0,"64":0,"76":1,"77":0,"78":0,"79":0,"81":0,"90":1,"91":0,"94":0,"103":1,"104":0,"112":1,"113":0,"127":1,"128":0,"129":0,"130":0,"133":0,"134":0,"135":0,"136":0,"138":0,"142":0,"154":1,"155":0,"163":0,"172":1,"173":0,"174":0,"175":0,"177":0,"180":0,"183":0,"186":0,"189":0,"194":0,"197":0,"200":0,"203":0,"206":0,"209":0,"212":0,"216":0,"228":1,"229":0,"241":0,"245":0,"246":0,"247":0,"249":0,"255":0,"258":0,"262":0,"281":1,"282":0,"283":0,"285":0,"286":0,"287":0,"288":0,"289":0,"291":0,"292":0,"293":0,"295":0,"296":0,"297":0,"299":0,"300":0,"301":0,"304":0,"307":0,"311":0,"312":0,"313":0,"315":0,"328":1,"329":0,"331":0,"332":0,"333":0,"334":0,"335":0,"337":0,"340":0,"347":0,"348":0,"349":0,"351":0,"354":0,"355":0,"359":0,"366":0,"368":0,"369":0,"370":0,"376":0,"380":0,"384":0,"388":0,"392":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/default-case.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/default-case.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":32,"loc":{"start":{"line":32,"column":10},"end":{"line":32,"column":20}}},"2":{"name":"last","line":49,"loc":{"start":{"line":49,"column":8},"end":{"line":49,"column":34}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":27},"end":{"line":59,"column":34}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"2":{"start":{"line":13,"column":0},"end":{"line":90,"column":2}},"3":{"start":{"line":33,"column":8},"end":{"line":33,"column":49}},"4":{"start":{"line":34,"column":8},"end":{"line":36,"column":38}},"5":{"start":{"line":38,"column":8},"end":{"line":38,"column":51}},"6":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"7":{"start":{"line":50,"column":12},"end":{"line":50,"column":53}},"8":{"start":{"line":57,"column":8},"end":{"line":88,"column":10}},"9":{"start":{"line":61,"column":16},"end":{"line":68,"column":17}},"10":{"start":{"line":67,"column":20},"end":{"line":67,"column":27}},"11":{"start":{"line":70,"column":16},"end":{"line":70,"column":73}},"12":{"start":{"line":70,"column":56},"end":{"line":70,"column":71}},"13":{"start":{"line":72,"column":16},"end":{"line":86,"column":17}},"14":{"start":{"line":74,"column":20},"end":{"line":74,"column":32}},"15":{"start":{"line":76,"column":20},"end":{"line":76,"column":54}},"16":{"start":{"line":77,"column":20},"end":{"line":77,"column":79}},"17":{"start":{"line":79,"column":20},"end":{"line":81,"column":21}},"18":{"start":{"line":80,"column":24},"end":{"line":80,"column":49}},"19":{"start":{"line":83,"column":20},"end":{"line":85,"column":21}},"20":{"start":{"line":84,"column":24},"end":{"line":84,"column":86}}},"branchMap":{"1":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":24},"end":{"line":33,"column":42}},{"start":{"line":33,"column":46},"end":{"line":33,"column":48}}]},"2":{"line":34,"type":"cond-expr","locations":[{"start":{"line":35,"column":14},"end":{"line":35,"column":48}},{"start":{"line":36,"column":14},"end":{"line":36,"column":37}}]},"3":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":16},"end":{"line":61,"column":16}},{"start":{"line":61,"column":16},"end":{"line":61,"column":16}}]},"4":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":16},"end":{"line":72,"column":16}},{"start":{"line":72,"column":16},"end":{"line":72,"column":16}}]},"5":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":20},"end":{"line":79,"column":20}},{"start":{"line":79,"column":20},"end":{"line":79,"column":20}}]},"6":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":20},"end":{"line":83,"column":20}},{"start":{"line":83,"column":20},"end":{"line":83,"column":20}}]},"7":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":24},"end":{"line":83,"column":32}},{"start":{"line":83,"column":36},"end":{"line":83,"column":78}}]}},"code":["/**"," * @fileoverview require default case in switch statements"," * @author Aliaksei Shytkin"," */","\"use strict\";","","const DEFAULT_COMMENT_PATTERN = /^no default$/i;","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require `default` cases in `switch` statements\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [{","            type: \"object\",","            properties: {","                commentPattern: {","                    type: \"string\"","                }","            },","            additionalProperties: false","        }]","    },","","    create(context) {","        const options = context.options[0] || {};","        const commentPattern = options.commentPattern","            ? new RegExp(options.commentPattern)","            : DEFAULT_COMMENT_PATTERN;","","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Shortcut to get last element of array","         * @param  {*[]} collection Array","         * @returns {*} Last element","         */","        function last(collection) {","            return collection[collection.length - 1];","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            SwitchStatement(node) {","","                if (!node.cases.length) {","","                    /*","                     * skip check of empty switch because there is no easy way","                     * to extract comments inside it now","                     */","                    return;","                }","","                const hasDefault = node.cases.some(v => v.test === null);","","                if (!hasDefault) {","","                    let comment;","","                    const lastCase = last(node.cases);","                    const comments = sourceCode.getComments(lastCase).trailing;","","                    if (comments.length) {","                        comment = last(comments);","                    }","","                    if (!comment || !commentPattern.test(comment.value.trim())) {","                        context.report({ node, message: \"Expected a default case.\" });","                    }","                }","            }","        };","    }","};",""],"l":{"7":1,"13":1,"33":0,"34":0,"38":0,"49":1,"50":0,"57":0,"61":0,"67":0,"70":0,"72":0,"74":0,"76":0,"77":0,"79":0,"80":0,"83":0,"84":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/dot-location.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/dot-location.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":20}}},"2":{"name":"checkDotLocation","line":47,"loc":{"start":{"line":47,"column":8},"end":{"line":47,"column":51}}},"3":{"name":"checkNode","line":80,"loc":{"start":{"line":80,"column":8},"end":{"line":80,"column":33}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":88,"column":2}},"3":{"start":{"line":33,"column":8},"end":{"line":33,"column":42}},"4":{"start":{"line":36,"column":8},"end":{"line":36,"column":56}},"5":{"start":{"line":38,"column":8},"end":{"line":38,"column":51}},"6":{"start":{"line":47,"column":8},"end":{"line":73,"column":9}},"7":{"start":{"line":48,"column":12},"end":{"line":48,"column":56}},"8":{"start":{"line":49,"column":12},"end":{"line":49,"column":89}},"9":{"start":{"line":50,"column":12},"end":{"line":50,"column":89}},"10":{"start":{"line":52,"column":12},"end":{"line":72,"column":13}},"11":{"start":{"line":53,"column":16},"end":{"line":71,"column":17}},"12":{"start":{"line":54,"column":20},"end":{"line":63,"column":21}},"13":{"start":{"line":55,"column":24},"end":{"line":55,"column":93}},"14":{"start":{"line":57,"column":24},"end":{"line":62,"column":27}},"15":{"start":{"line":61,"column":42},"end":{"line":61,"column":152}},"16":{"start":{"line":64,"column":23},"end":{"line":71,"column":17}},"17":{"start":{"line":65,"column":20},"end":{"line":70,"column":23}},"18":{"start":{"line":69,"column":38},"end":{"line":69,"column":127}},"19":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"20":{"start":{"line":81,"column":12},"end":{"line":81,"column":63}},"21":{"start":{"line":84,"column":8},"end":{"line":86,"column":10}}},"branchMap":{"1":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":25},"end":{"line":36,"column":44}},{"start":{"line":36,"column":48},"end":{"line":36,"column":55}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":52,"column":12}},{"start":{"line":52,"column":12},"end":{"line":52,"column":12}}]},"3":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":16},"end":{"line":52,"column":41}},{"start":{"line":52,"column":45},"end":{"line":52,"column":62}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":16}},{"start":{"line":53,"column":16},"end":{"line":53,"column":16}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":20},"end":{"line":54,"column":20}},{"start":{"line":54,"column":20},"end":{"line":54,"column":20}}]},"6":{"line":55,"type":"cond-expr","locations":[{"start":{"line":55,"column":84},"end":{"line":55,"column":87}},{"start":{"line":55,"column":90},"end":{"line":55,"column":92}}]},"7":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":23},"end":{"line":64,"column":23}},{"start":{"line":64,"column":23},"end":{"line":64,"column":23}}]}},"code":["/**"," * @fileoverview Validates newlines before and after dots"," * @author Greg Cochard"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent newlines before and after dots\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"object\", \"property\"]","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","","        const config = context.options[0];","","        // default to onObject if no preference is passed","        const onObject = config === \"object\" || !config;","","        const sourceCode = context.getSourceCode();","","        /**","         * Reports if the dot between object and property is on the correct loccation.","         * @param {ASTNode} obj The object owning the property.","         * @param {ASTNode} prop The property of the object.","         * @param {ASTNode} node The corresponding node of the token.","         * @returns {void}","         */","        function checkDotLocation(obj, prop, node) {","            const dot = sourceCode.getTokenBefore(prop);","            const textBeforeDot = sourceCode.getText().slice(obj.range[1], dot.range[0]);","            const textAfterDot = sourceCode.getText().slice(dot.range[1], prop.range[0]);","","            if (dot.type === \"Punctuator\" && dot.value === \".\") {","                if (onObject) {","                    if (!astUtils.isTokenOnSameLine(obj, dot)) {","                        const neededTextAfterObj = astUtils.isDecimalInteger(obj) ? \" \" : \"\";","","                        context.report({","                            node,","                            loc: dot.loc.start,","                            message: \"Expected dot to be on same line as object.\",","                            fix: fixer => fixer.replaceTextRange([obj.range[1], prop.range[0]], `${neededTextAfterObj}.${textBeforeDot}${textAfterDot}`)","                        });","                    }","                } else if (!astUtils.isTokenOnSameLine(dot, prop)) {","                    context.report({","                        node,","                        loc: dot.loc.start,","                        message: \"Expected dot to be on same line as property.\",","                        fix: fixer => fixer.replaceTextRange([obj.range[1], prop.range[0]], `${textBeforeDot}${textAfterDot}.`)","                    });","                }","            }","        }","","        /**","         * Checks the spacing of the dot within a member expression.","         * @param {ASTNode} node The node to check.","         * @returns {void}","         */","        function checkNode(node) {","            checkDotLocation(node.object, node.property, node);","        }","","        return {","            MemberExpression: checkNode","        };","    }","};",""],"l":{"8":1,"14":1,"33":0,"36":0,"38":0,"47":1,"48":0,"49":0,"50":0,"52":0,"53":0,"54":0,"55":0,"57":0,"61":0,"64":0,"65":0,"69":0,"80":1,"81":0,"84":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/dot-notation.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/dot-notation.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":46,"loc":{"start":{"line":46,"column":10},"end":{"line":46,"column":20}}},"2":{"name":"(anonymous_2)","line":58,"loc":{"start":{"line":58,"column":28},"end":{"line":58,"column":35}}},"3":{"name":"(anonymous_3)","line":72,"loc":{"start":{"line":72,"column":31},"end":{"line":72,"column":39}}},"4":{"name":"(anonymous_4)","line":103,"loc":{"start":{"line":103,"column":27},"end":{"line":103,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":53}},"3":{"start":{"line":18,"column":0},"end":{"line":18,"column":45}},"4":{"start":{"line":20,"column":0},"end":{"line":123,"column":2}},"5":{"start":{"line":47,"column":8},"end":{"line":47,"column":49}},"6":{"start":{"line":48,"column":8},"end":{"line":48,"column":90}},"7":{"start":{"line":49,"column":8},"end":{"line":49,"column":51}},"8":{"start":{"line":51,"column":8},"end":{"line":51,"column":25}},"9":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"10":{"start":{"line":54,"column":12},"end":{"line":54,"column":60}},"11":{"start":{"line":57,"column":8},"end":{"line":121,"column":10}},"12":{"start":{"line":59,"column":16},"end":{"line":91,"column":17}},"13":{"start":{"line":65,"column":20},"end":{"line":90,"column":21}},"14":{"start":{"line":66,"column":24},"end":{"line":89,"column":27}},"15":{"start":{"line":73,"column":32},"end":{"line":73,"column":122}},"16":{"start":{"line":74,"column":32},"end":{"line":74,"column":83}},"17":{"start":{"line":76,"column":32},"end":{"line":80,"column":33}},"18":{"start":{"line":79,"column":36},"end":{"line":79,"column":48}},"19":{"start":{"line":82,"column":32},"end":{"line":82,"column":104}},"20":{"start":{"line":84,"column":32},"end":{"line":87,"column":34}},"21":{"start":{"line":92,"column":16},"end":{"line":119,"column":17}},"22":{"start":{"line":97,"column":20},"end":{"line":118,"column":23}},"23":{"start":{"line":104,"column":28},"end":{"line":104,"column":81}},"24":{"start":{"line":105,"column":28},"end":{"line":105,"column":109}},"25":{"start":{"line":107,"column":28},"end":{"line":111,"column":29}},"26":{"start":{"line":110,"column":32},"end":{"line":110,"column":44}},"27":{"start":{"line":113,"column":28},"end":{"line":116,"column":30}}},"branchMap":{"1":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":24},"end":{"line":47,"column":42}},{"start":{"line":47,"column":46},"end":{"line":47,"column":48}}]},"2":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":30},"end":{"line":48,"column":62}},{"start":{"line":48,"column":66},"end":{"line":48,"column":89}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":16}},{"start":{"line":59,"column":16},"end":{"line":59,"column":16}}]},"5":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":20},"end":{"line":60,"column":33}},{"start":{"line":61,"column":20},"end":{"line":61,"column":52}},{"start":{"line":62,"column":20},"end":{"line":62,"column":61}},{"start":{"line":63,"column":21},"end":{"line":63,"column":34}},{"start":{"line":63,"column":38},"end":{"line":63,"column":90}}]},"6":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":20},"end":{"line":65,"column":20}},{"start":{"line":65,"column":20},"end":{"line":65,"column":20}}]},"7":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":26},"end":{"line":65,"column":38}},{"start":{"line":65,"column":42},"end":{"line":65,"column":80}}]},"8":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":32},"end":{"line":76,"column":32}},{"start":{"line":76,"column":32},"end":{"line":76,"column":32}}]},"9":{"line":82,"type":"cond-expr","locations":[{"start":{"line":82,"column":95},"end":{"line":82,"column":98}},{"start":{"line":82,"column":101},"end":{"line":82,"column":103}}]},"10":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16}},{"start":{"line":92,"column":16},"end":{"line":92,"column":16}}]},"11":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":20},"end":{"line":93,"column":34}},{"start":{"line":94,"column":20},"end":{"line":94,"column":34}},{"start":{"line":95,"column":20},"end":{"line":95,"column":71}}]},"12":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":28},"end":{"line":107,"column":28}},{"start":{"line":107,"column":28},"end":{"line":107,"column":28}}]}},"code":["/**"," * @fileoverview Rule to warn about using dot notation instead of square bracket notation when possible."," * @author Josh Perez"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const validIdentifier = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/;","const keywords = require(\"../util/keywords\");","","module.exports = {","    meta: {","        docs: {","            description: \"enforce dot notation whenever possible\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allowKeywords: {","                        type: \"boolean\"","                    },","                    allowPattern: {","                        type: \"string\"","                    }","                },","                additionalProperties: false","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","        const options = context.options[0] || {};","        const allowKeywords = options.allowKeywords === void 0 || !!options.allowKeywords;","        const sourceCode = context.getSourceCode();","","        let allowPattern;","","        if (options.allowPattern) {","            allowPattern = new RegExp(options.allowPattern);","        }","","        return {","            MemberExpression(node) {","                if (","                    node.computed &&","                    node.property.type === \"Literal\" &&","                    validIdentifier.test(node.property.value) &&","                    (allowKeywords || keywords.indexOf(String(node.property.value)) === -1)","                ) {","                    if (!(allowPattern && allowPattern.test(node.property.value))) {","                        context.report({","                            node: node.property,","                            message: \"[{{propertyValue}}] is better written in dot notation.\",","                            data: {","                                propertyValue: JSON.stringify(node.property.value)","                            },","                            fix(fixer) {","                                const leftBracket = sourceCode.getTokenAfter(node.object, astUtils.isOpeningBracketToken);","                                const rightBracket = sourceCode.getLastToken(node);","","                                if (sourceCode.getFirstTokenBetween(leftBracket, rightBracket, { includeComments: true, filter: astUtils.isCommentToken })) {","","                                    // Don't perform any fixes if there are comments inside the brackets.","                                    return null;","                                }","","                                const textBeforeDot = astUtils.isDecimalInteger(node.object) ? \" \" : \"\";","","                                return fixer.replaceTextRange(","                                    [leftBracket.range[0], rightBracket.range[1]],","                                    `${textBeforeDot}.${node.property.value}`","                                );","                            }","                        });","                    }","                }","                if (","                    !allowKeywords &&","                    !node.computed &&","                    keywords.indexOf(String(node.property.name)) !== -1","                ) {","                    context.report({","                        node: node.property,","                        message: \".{{propertyName}} is a syntax error.\",","                        data: {","                            propertyName: node.property.name","                        },","                        fix(fixer) {","                            const dot = sourceCode.getTokenBefore(node.property);","                            const textAfterDot = sourceCode.text.slice(dot.range[1], node.property.range[0]);","","                            if (textAfterDot.trim()) {","","                                // Don't perform any fixes if there are comments between the dot and the property name.","                                return null;","                            }","","                            return fixer.replaceTextRange(","                                [dot.range[0], node.property.range[1]],","                                `[${textAfterDot}\"${node.property.name}\"]`","                            );","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"11":1,"17":1,"18":1,"20":1,"47":0,"48":0,"49":0,"51":0,"53":0,"54":0,"57":0,"59":0,"65":0,"66":0,"73":0,"74":0,"76":0,"79":0,"82":0,"84":0,"92":0,"97":0,"104":0,"105":0,"107":0,"110":0,"113":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/keywords.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/keywords.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":67,"column":2}}},"branchMap":{},"code":["/**"," * @fileoverview A shared list of ES3 keywords."," * @author Josh Perez"," */","\"use strict\";","","module.exports = [","    \"abstract\",","    \"boolean\",","    \"break\",","    \"byte\",","    \"case\",","    \"catch\",","    \"char\",","    \"class\",","    \"const\",","    \"continue\",","    \"debugger\",","    \"default\",","    \"delete\",","    \"do\",","    \"double\",","    \"else\",","    \"enum\",","    \"export\",","    \"extends\",","    \"false\",","    \"final\",","    \"finally\",","    \"float\",","    \"for\",","    \"function\",","    \"goto\",","    \"if\",","    \"implements\",","    \"import\",","    \"in\",","    \"instanceof\",","    \"int\",","    \"interface\",","    \"long\",","    \"native\",","    \"new\",","    \"null\",","    \"package\",","    \"private\",","    \"protected\",","    \"public\",","    \"return\",","    \"short\",","    \"static\",","    \"super\",","    \"switch\",","    \"synchronized\",","    \"this\",","    \"throw\",","    \"throws\",","    \"transient\",","    \"true\",","    \"try\",","    \"typeof\",","    \"var\",","    \"void\",","    \"volatile\",","    \"while\",","    \"with\"","];",""],"l":{"7":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/eol-last.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/eol-last.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":20}}},"2":{"name":"checkBadEOF","line":38,"loc":{"start":{"line":38,"column":21},"end":{"line":38,"column":48}}},"3":{"name":"(anonymous_3)","line":70,"loc":{"start":{"line":70,"column":27},"end":{"line":70,"column":35}}},"4":{"name":"(anonymous_4)","line":81,"loc":{"start":{"line":81,"column":27},"end":{"line":81,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":17,"column":0},"end":{"line":94,"column":2}},"3":{"start":{"line":37,"column":8},"end":{"line":92,"column":10}},"4":{"start":{"line":39,"column":16},"end":{"line":47,"column":63}},"5":{"start":{"line":49,"column":16},"end":{"line":50,"column":39}},"6":{"start":{"line":52,"column":16},"end":{"line":56,"column":17}},"7":{"start":{"line":55,"column":20},"end":{"line":55,"column":36}},"8":{"start":{"line":57,"column":16},"end":{"line":62,"column":17}},"9":{"start":{"line":60,"column":20},"end":{"line":60,"column":36}},"10":{"start":{"line":61,"column":20},"end":{"line":61,"column":38}},"11":{"start":{"line":63,"column":16},"end":{"line":90,"column":17}},"12":{"start":{"line":66,"column":20},"end":{"line":73,"column":23}},"13":{"start":{"line":71,"column":28},"end":{"line":71,"column":103}},"14":{"start":{"line":74,"column":23},"end":{"line":90,"column":17}},"15":{"start":{"line":77,"column":20},"end":{"line":89,"column":23}},"16":{"start":{"line":82,"column":28},"end":{"line":85,"column":61}},"17":{"start":{"line":87,"column":28},"end":{"line":87,"column":76}}},"branchMap":{"1":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":27},"end":{"line":49,"column":45}},{"start":{"line":49,"column":49},"end":{"line":49,"column":57}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":16},"end":{"line":52,"column":16}},{"start":{"line":52,"column":16},"end":{"line":52,"column":16}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":16}},{"start":{"line":57,"column":16},"end":{"line":57,"column":16}}]},"4":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":63,"column":16}},{"start":{"line":63,"column":16},"end":{"line":63,"column":16}}]},"5":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":20},"end":{"line":63,"column":37}},{"start":{"line":63,"column":41},"end":{"line":63,"column":57}}]},"6":{"line":71,"type":"cond-expr","locations":[{"start":{"line":71,"column":92},"end":{"line":71,"column":96}},{"start":{"line":71,"column":99},"end":{"line":71,"column":101}}]},"7":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":23},"end":{"line":74,"column":23}},{"start":{"line":74,"column":23},"end":{"line":74,"column":23}}]},"8":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":27},"end":{"line":74,"column":43}},{"start":{"line":74,"column":47},"end":{"line":74,"column":62}}]}},"code":["/**"," * @fileoverview Require or disallow newline at the end of files"," * @author Nodeca Team <https://github.com/nodeca>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow newline at the end of files\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        fixable: \"whitespace\",","        schema: [","            {","                enum: [\"always\", \"never\", \"unix\", \"windows\"]","            }","        ]","    },","    create(context) {","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            Program: function checkBadEOF(node) {","                const sourceCode = context.getSourceCode(),","                    src = sourceCode.getText(),","                    location = {","                        column: lodash.last(sourceCode.lines).length,","                        line: sourceCode.lines.length","                    },","                    LF = \"\\n\",","                    CRLF = `\\r${LF}`,","                    endsWithNewline = lodash.endsWith(src, LF);","","                let mode = context.options[0] || \"always\",","                    appendCRLF = false;","","                if (mode === \"unix\") {","","                    // `\"unix\"` should behave exactly as `\"always\"`","                    mode = \"always\";","                }","                if (mode === \"windows\") {","","                    // `\"windows\"` should behave exactly as `\"always\"`, but append CRLF in the fixer for backwards compatibility","                    mode = \"always\";","                    appendCRLF = true;","                }","                if (mode === \"always\" && !endsWithNewline) {","","                    // File is not newline-terminated, but should be","                    context.report({","                        node,","                        loc: location,","                        message: \"Newline required at end of file but not found.\",","                        fix(fixer) {","                            return fixer.insertTextAfterRange([0, src.length], appendCRLF ? CRLF : LF);","                        }","                    });","                } else if (mode === \"never\" && endsWithNewline) {","","                    // File is newline-terminated, but shouldn't be","                    context.report({","                        node,","                        loc: location,","                        message: \"Newline not allowed at end of file.\",","                        fix(fixer) {","                            const finalEOLs = /(?:\\r?\\n)+$/,","                                match = finalEOLs.exec(sourceCode.text),","                                start = match.index,","                                end = sourceCode.text.length;","","                            return fixer.replaceTextRange([start, end], \"\");","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"11":1,"17":1,"37":0,"39":0,"49":0,"52":0,"55":0,"57":0,"60":0,"61":0,"63":0,"66":0,"71":0,"74":0,"77":0,"82":0,"87":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/eqeqeq.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/eqeqeq.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":1,"12":0,"13":1,"14":0,"15":1,"16":0,"17":1,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":61,"loc":{"start":{"line":61,"column":10},"end":{"line":61,"column":20}}},"2":{"name":"isTypeOf","line":77,"loc":{"start":{"line":77,"column":8},"end":{"line":77,"column":32}}},"3":{"name":"isTypeOfBinary","line":87,"loc":{"start":{"line":87,"column":8},"end":{"line":87,"column":38}}},"4":{"name":"areLiteralsAndSameType","line":97,"loc":{"start":{"line":97,"column":8},"end":{"line":97,"column":46}}},"5":{"name":"isNullCheck","line":108,"loc":{"start":{"line":108,"column":8},"end":{"line":108,"column":35}}},"6":{"name":"getOperatorLocation","line":119,"loc":{"start":{"line":119,"column":8},"end":{"line":119,"column":43}}},"7":{"name":"report","line":132,"loc":{"start":{"line":132,"column":8},"end":{"line":132,"column":48}}},"8":{"name":"(anonymous_8)","line":138,"loc":{"start":{"line":138,"column":19},"end":{"line":138,"column":27}}},"9":{"name":"(anonymous_9)","line":156,"loc":{"start":{"line":156,"column":28},"end":{"line":156,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":180,"column":2}},"3":{"start":{"line":62,"column":8},"end":{"line":62,"column":54}},"4":{"start":{"line":63,"column":8},"end":{"line":63,"column":49}},"5":{"start":{"line":64,"column":8},"end":{"line":64,"column":51}},"6":{"start":{"line":66,"column":8},"end":{"line":68,"column":23}},"7":{"start":{"line":69,"column":8},"end":{"line":69,"column":61}},"8":{"start":{"line":70,"column":8},"end":{"line":70,"column":67}},"9":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"10":{"start":{"line":78,"column":12},"end":{"line":78,"column":81}},"11":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"12":{"start":{"line":88,"column":12},"end":{"line":88,"column":63}},"13":{"start":{"line":97,"column":8},"end":{"line":100,"column":9}},"14":{"start":{"line":98,"column":12},"end":{"line":99,"column":71}},"15":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"16":{"start":{"line":109,"column":12},"end":{"line":109,"column":91}},"17":{"start":{"line":119,"column":8},"end":{"line":123,"column":9}},"18":{"start":{"line":120,"column":12},"end":{"line":120,"column":64}},"19":{"start":{"line":122,"column":12},"end":{"line":122,"column":86}},"20":{"start":{"line":132,"column":8},"end":{"line":153,"column":9}},"21":{"start":{"line":133,"column":12},"end":{"line":152,"column":15}},"22":{"start":{"line":141,"column":20},"end":{"line":149,"column":21}},"23":{"start":{"line":142,"column":24},"end":{"line":146,"column":26}},"24":{"start":{"line":145,"column":37},"end":{"line":145,"column":66}},"25":{"start":{"line":148,"column":24},"end":{"line":148,"column":82}},"26":{"start":{"line":150,"column":20},"end":{"line":150,"column":32}},"27":{"start":{"line":155,"column":8},"end":{"line":177,"column":10}},"28":{"start":{"line":157,"column":16},"end":{"line":157,"column":49}},"29":{"start":{"line":159,"column":16},"end":{"line":164,"column":17}},"30":{"start":{"line":160,"column":20},"end":{"line":162,"column":21}},"31":{"start":{"line":161,"column":24},"end":{"line":161,"column":65}},"32":{"start":{"line":163,"column":20},"end":{"line":163,"column":27}},"33":{"start":{"line":166,"column":16},"end":{"line":169,"column":17}},"34":{"start":{"line":168,"column":20},"end":{"line":168,"column":27}},"35":{"start":{"line":171,"column":16},"end":{"line":173,"column":17}},"36":{"start":{"line":172,"column":20},"end":{"line":172,"column":27}},"37":{"start":{"line":175,"column":16},"end":{"line":175,"column":50}}},"branchMap":{"1":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":23},"end":{"line":62,"column":41}},{"start":{"line":62,"column":45},"end":{"line":62,"column":53}}]},"2":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":24},"end":{"line":63,"column":42}},{"start":{"line":63,"column":46},"end":{"line":63,"column":48}}]},"3":{"line":66,"type":"cond-expr","locations":[{"start":{"line":67,"column":14},"end":{"line":67,"column":38}},{"start":{"line":68,"column":14},"end":{"line":68,"column":22}}]},"4":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":14},"end":{"line":67,"column":26}},{"start":{"line":67,"column":30},"end":{"line":67,"column":38}}]},"5":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":19},"end":{"line":78,"column":50}},{"start":{"line":78,"column":54},"end":{"line":78,"column":80}}]},"6":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":19},"end":{"line":88,"column":38}},{"start":{"line":88,"column":42},"end":{"line":88,"column":62}}]},"7":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":19},"end":{"line":98,"column":47}},{"start":{"line":98,"column":51},"end":{"line":98,"column":80}},{"start":{"line":99,"column":20},"end":{"line":99,"column":70}}]},"8":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":19},"end":{"line":109,"column":53}},{"start":{"line":109,"column":57},"end":{"line":109,"column":90}}]},"9":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":20},"end":{"line":141,"column":20}},{"start":{"line":141,"column":20},"end":{"line":141,"column":20}}]},"10":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":24},"end":{"line":141,"column":44}},{"start":{"line":141,"column":48},"end":{"line":141,"column":76}}]},"11":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":16},"end":{"line":159,"column":16}},{"start":{"line":159,"column":16},"end":{"line":159,"column":16}}]},"12":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":20},"end":{"line":159,"column":42}},{"start":{"line":159,"column":46},"end":{"line":159,"column":68}}]},"13":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":20},"end":{"line":160,"column":20}},{"start":{"line":160,"column":20},"end":{"line":160,"column":20}}]},"14":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":24},"end":{"line":160,"column":49}},{"start":{"line":160,"column":53},"end":{"line":160,"column":59}}]},"15":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":16},"end":{"line":166,"column":16}},{"start":{"line":166,"column":16},"end":{"line":166,"column":16}}]},"16":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":20},"end":{"line":166,"column":38}},{"start":{"line":166,"column":43},"end":{"line":166,"column":63}},{"start":{"line":167,"column":24},"end":{"line":167,"column":52}},{"start":{"line":167,"column":56},"end":{"line":167,"column":62}}]},"17":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":16},"end":{"line":171,"column":16}},{"start":{"line":171,"column":16},"end":{"line":171,"column":16}}]},"18":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":20},"end":{"line":171,"column":39}},{"start":{"line":171,"column":43},"end":{"line":171,"column":49}}]}},"code":["/**"," * @fileoverview Rule to flag statements that use != and == instead of !== and ==="," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require the use of `===` and `!==`\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: {","            anyOf: [","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\"]","                        },","                        {","                            type: \"object\",","                            properties: {","                                null: {","                                    enum: [\"always\", \"never\", \"ignore\"]","                                }","                            },","                            additionalProperties: false","                        }","                    ],","                    additionalItems: false","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"smart\", \"allow-null\"]","                        }","                    ],","                    additionalItems: false","                }","            ]","        },","","        fixable: \"code\"","    },","","    create(context) {","        const config = context.options[0] || \"always\";","        const options = context.options[1] || {};","        const sourceCode = context.getSourceCode();","","        const nullOption = (config === \"always\")","            ? options.null || \"always\"","            : \"ignore\";","        const enforceRuleForNull = (nullOption === \"always\");","        const enforceInverseRuleForNull = (nullOption === \"never\");","","        /**","         * Checks if an expression is a typeof expression","         * @param  {ASTNode} node The node to check","         * @returns {boolean} if the node is a typeof expression","         */","        function isTypeOf(node) {","            return node.type === \"UnaryExpression\" && node.operator === \"typeof\";","        }","","        /**","         * Checks if either operand of a binary expression is a typeof operation","         * @param {ASTNode} node The node to check","         * @returns {boolean} if one of the operands is typeof","         * @private","         */","        function isTypeOfBinary(node) {","            return isTypeOf(node.left) || isTypeOf(node.right);","        }","","        /**","         * Checks if operands are literals of the same type (via typeof)","         * @param {ASTNode} node The node to check","         * @returns {boolean} if operands are of same type","         * @private","         */","        function areLiteralsAndSameType(node) {","            return node.left.type === \"Literal\" && node.right.type === \"Literal\" &&","                    typeof node.left.value === typeof node.right.value;","        }","","        /**","         * Checks if one of the operands is a literal null","         * @param {ASTNode} node The node to check","         * @returns {boolean} if operands are null","         * @private","         */","        function isNullCheck(node) {","            return astUtils.isNullLiteral(node.right) || astUtils.isNullLiteral(node.left);","        }","","        /**","         * Gets the location (line and column) of the binary expression's operator","         * @param {ASTNode} node The binary expression node to check","         * @param {string} operator The operator to find","         * @returns {Object} { line, column } location of operator","         * @private","         */","        function getOperatorLocation(node) {","            const opToken = sourceCode.getTokenAfter(node.left);","","            return { line: opToken.loc.start.line, column: opToken.loc.start.column };","        }","","        /**","         * Reports a message for this rule.","         * @param {ASTNode} node The binary expression node that was checked","         * @param {string} expectedOperator The operator that was expected (either '==', '!=', '===', or '!==')","         * @returns {void}","         * @private","         */","        function report(node, expectedOperator) {","            context.report({","                node,","                loc: getOperatorLocation(node),","                message: \"Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'.\",","                data: { expectedOperator, actualOperator: node.operator },","                fix(fixer) {","","                    // If the comparison is a `typeof` comparison or both sides are literals with the same type, then it's safe to fix.","                    if (isTypeOfBinary(node) || areLiteralsAndSameType(node)) {","                        const operatorToken = sourceCode.getFirstTokenBetween(","                            node.left,","                            node.right,","                            token => token.value === node.operator","                        );","","                        return fixer.replaceText(operatorToken, expectedOperator);","                    }","                    return null;","                }","            });","        }","","        return {","            BinaryExpression(node) {","                const isNull = isNullCheck(node);","","                if (node.operator !== \"==\" && node.operator !== \"!=\") {","                    if (enforceInverseRuleForNull && isNull) {","                        report(node, node.operator.slice(0, -1));","                    }","                    return;","                }","","                if (config === \"smart\" && (isTypeOfBinary(node) ||","                        areLiteralsAndSameType(node) || isNull)) {","                    return;","                }","","                if (!enforceRuleForNull && isNull) {","                    return;","                }","","                report(node, `${node.operator}=`);","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"62":0,"63":0,"64":0,"66":0,"69":0,"70":0,"77":1,"78":0,"87":1,"88":0,"97":1,"98":0,"108":1,"109":0,"119":1,"120":0,"122":0,"132":1,"133":0,"141":0,"142":0,"145":0,"148":0,"150":0,"155":0,"157":0,"159":0,"160":0,"161":0,"163":0,"166":0,"168":0,"171":0,"172":0,"175":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/func-call-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/func-call-spacing.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":62,"loc":{"start":{"line":62,"column":10},"end":{"line":62,"column":20}}},"2":{"name":"checkSpacing","line":75,"loc":{"start":{"line":75,"column":8},"end":{"line":75,"column":36}}},"3":{"name":"(anonymous_3)","line":119,"loc":{"start":{"line":119,"column":23},"end":{"line":119,"column":31}}},"4":{"name":"(anonymous_4)","line":135,"loc":{"start":{"line":135,"column":23},"end":{"line":135,"column":31}}},"5":{"name":"(anonymous_5)","line":144,"loc":{"start":{"line":144,"column":23},"end":{"line":144,"column":31}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":157,"column":2}},"3":{"start":{"line":64,"column":8},"end":{"line":64,"column":54}},"4":{"start":{"line":65,"column":8},"end":{"line":65,"column":95}},"5":{"start":{"line":66,"column":8},"end":{"line":66,"column":51}},"6":{"start":{"line":67,"column":8},"end":{"line":67,"column":42}},"7":{"start":{"line":75,"column":8},"end":{"line":149,"column":9}},"8":{"start":{"line":76,"column":12},"end":{"line":76,"column":60}},"9":{"start":{"line":77,"column":12},"end":{"line":77,"column":73}},"10":{"start":{"line":78,"column":12},"end":{"line":78,"column":121}},"11":{"start":{"line":79,"column":12},"end":{"line":79,"column":82}},"12":{"start":{"line":82,"column":12},"end":{"line":84,"column":13}},"13":{"start":{"line":83,"column":16},"end":{"line":83,"column":23}},"14":{"start":{"line":86,"column":12},"end":{"line":86,"column":118}},"15":{"start":{"line":87,"column":12},"end":{"line":87,"column":63}},"16":{"start":{"line":88,"column":12},"end":{"line":88,"column":99}},"17":{"start":{"line":114,"column":12},"end":{"line":148,"column":13}},"18":{"start":{"line":115,"column":16},"end":{"line":129,"column":19}},"19":{"start":{"line":123,"column":24},"end":{"line":125,"column":25}},"20":{"start":{"line":124,"column":28},"end":{"line":124,"column":96}},"21":{"start":{"line":127,"column":24},"end":{"line":127,"column":36}},"22":{"start":{"line":130,"column":19},"end":{"line":148,"column":13}},"23":{"start":{"line":131,"column":16},"end":{"line":138,"column":19}},"24":{"start":{"line":136,"column":24},"end":{"line":136,"column":71}},"25":{"start":{"line":139,"column":19},"end":{"line":148,"column":13}},"26":{"start":{"line":140,"column":16},"end":{"line":147,"column":19}},"27":{"start":{"line":145,"column":24},"end":{"line":145,"column":102}},"28":{"start":{"line":151,"column":8},"end":{"line":154,"column":10}}},"branchMap":{"1":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":30},"end":{"line":65,"column":36}},{"start":{"line":65,"column":40},"end":{"line":65,"column":58}},{"start":{"line":65,"column":62},"end":{"line":65,"column":94}}]},"2":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":30},"end":{"line":79,"column":40}},{"start":{"line":79,"column":44},"end":{"line":79,"column":81}}]},"3":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":12},"end":{"line":82,"column":12}},{"start":{"line":82,"column":12},"end":{"line":82,"column":12}}]},"4":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":18},"end":{"line":82,"column":28}},{"start":{"line":82,"column":32},"end":{"line":82,"column":67}}]},"5":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":31},"end":{"line":88,"column":44}},{"start":{"line":88,"column":48},"end":{"line":88,"column":98}}]},"6":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":12},"end":{"line":114,"column":12}},{"start":{"line":114,"column":12},"end":{"line":114,"column":12}}]},"7":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":16},"end":{"line":114,"column":21}},{"start":{"line":114,"column":25},"end":{"line":114,"column":38}}]},"8":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":24},"end":{"line":123,"column":24}},{"start":{"line":123,"column":24},"end":{"line":123,"column":24}}]},"9":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":19},"end":{"line":130,"column":19}},{"start":{"line":130,"column":19},"end":{"line":130,"column":19}}]},"10":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":23},"end":{"line":130,"column":29}},{"start":{"line":130,"column":33},"end":{"line":130,"column":47}}]},"11":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":19},"end":{"line":139,"column":19}},{"start":{"line":139,"column":19},"end":{"line":139,"column":19}}]},"12":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":23},"end":{"line":139,"column":29}},{"start":{"line":139,"column":33},"end":{"line":139,"column":47}},{"start":{"line":139,"column":51},"end":{"line":139,"column":61}}]}},"code":["/**"," * @fileoverview Rule to control spacing within function calls"," * @author Matt DuVall <http://www.mattduvall.com>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow spacing between function identifiers and their invocations\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","        schema: {","            anyOf: [","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"never\"]","                        }","                    ],","                    minItems: 0,","                    maxItems: 1","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\"]","                        },","                        {","                            type: \"object\",","                            properties: {","                                allowNewlines: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        }","                    ],","                    minItems: 0,","                    maxItems: 2","                }","            ]","        }","    },","","    create(context) {","","        const never = context.options[0] !== \"always\";","        const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;","        const sourceCode = context.getSourceCode();","        const text = sourceCode.getText();","","        /**","         * Check if open space is present in a function name","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkSpacing(node) {","            const lastToken = sourceCode.getLastToken(node);","            const lastCalleeToken = sourceCode.getLastToken(node.callee);","            const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);","            const prevToken = parenToken && sourceCode.getTokenBefore(parenToken);","","            // Parens in NewExpression are optional","            if (!(parenToken && parenToken.range[1] < node.range[1])) {","                return;","            }","","            const textBetweenTokens = text.slice(prevToken.range[1], parenToken.range[0]).replace(/\\/\\*.*?\\*\\//g, \"\");","            const hasWhitespace = /\\s/.test(textBetweenTokens);","            const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);","","            /*","             * never allowNewlines hasWhitespace hasNewline message","             * F     F             F             F          Missing space between function name and paren.","             * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)","             * F     F             T             T          Unexpected newline between function name and paren.","             * F     F             T             F          (OK)","             * F     T             T             F          (OK)","             * F     T             T             T          (OK)","             * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)","             * F     T             F             F          Missing space between function name and paren.","             * T     T             F             F          (Invalid `never && allowNewlines`)","             * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)","             * T     T             T             T          (Invalid `never && allowNewlines`)","             * T     T             T             F          (Invalid `never && allowNewlines`)","             * T     F             T             F          Unexpected space between function name and paren.","             * T     F             T             T          Unexpected space between function name and paren.","             * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)","             * T     F             F             F          (OK)","             *","             * T                   T                        Unexpected space between function name and paren.","             * F                   F                        Missing space between function name and paren.","             * F     F                           T          Unexpected newline between function name and paren.","             */","","            if (never && hasWhitespace) {","                context.report({","                    node,","                    loc: lastCalleeToken.loc.start,","                    message: \"Unexpected space between function name and paren.\",","                    fix(fixer) {","","                        // Only autofix if there is no newline","                        // https://github.com/eslint/eslint/issues/7787","                        if (!hasNewline) {","                            return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);","                        }","","                        return null;","                    }","                });","            } else if (!never && !hasWhitespace) {","                context.report({","                    node,","                    loc: lastCalleeToken.loc.start,","                    message: \"Missing space between function name and paren.\",","                    fix(fixer) {","                        return fixer.insertTextBefore(parenToken, \" \");","                    }","                });","            } else if (!never && !allowNewlines && hasNewline) {","                context.report({","                    node,","                    loc: lastCalleeToken.loc.start,","                    message: \"Unexpected newline between function name and paren.\",","                    fix(fixer) {","                        return fixer.replaceTextRange([prevToken.range[1], parenToken.range[0]], \" \");","                    }","                });","            }","        }","","        return {","            CallExpression: checkSpacing,","            NewExpression: checkSpacing","        };","","    }","};",""],"l":{"12":1,"18":1,"64":0,"65":0,"66":0,"67":0,"75":1,"76":0,"77":0,"78":0,"79":0,"82":0,"83":0,"86":0,"87":0,"88":0,"114":0,"115":0,"123":0,"124":0,"127":0,"130":0,"131":0,"136":0,"139":0,"140":0,"145":0,"151":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/func-name-matching.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/func-name-matching.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0,0,0,0,0,0],"25":[0,0],"26":[0,0],"27":[0,0,0],"28":[0,0],"29":[0,0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"isModuleExports","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":34}}},"2":{"name":"isIdentifier","line":46,"loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":41}}},"3":{"name":"(anonymous_3)","line":89,"loc":{"start":{"line":89,"column":10},"end":{"line":89,"column":20}}},"4":{"name":"shouldWarn","line":101,"loc":{"start":{"line":101,"column":8},"end":{"line":101,"column":34}}},"5":{"name":"report","line":113,"loc":{"start":{"line":113,"column":8},"end":{"line":113,"column":54}}},"6":{"name":"isStringLiteral","line":140,"loc":{"start":{"line":140,"column":8},"end":{"line":140,"column":39}}},"7":{"name":"(anonymous_7)","line":150,"loc":{"start":{"line":150,"column":30},"end":{"line":150,"column":37}}},"8":{"name":"(anonymous_8)","line":159,"loc":{"start":{"line":159,"column":32},"end":{"line":159,"column":39}}},"9":{"name":"(anonymous_9)","line":177,"loc":{"start":{"line":177,"column":20},"end":{"line":177,"column":27}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":35}},"3":{"start":{"line":24,"column":0},"end":{"line":38,"column":1}},"4":{"start":{"line":25,"column":4},"end":{"line":36,"column":5}},"5":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"6":{"start":{"line":29,"column":12},"end":{"line":29,"column":24}},"7":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"8":{"start":{"line":34,"column":12},"end":{"line":34,"column":24}},"9":{"start":{"line":37,"column":4},"end":{"line":37,"column":17}},"10":{"start":{"line":46,"column":0},"end":{"line":51,"column":1}},"11":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"12":{"start":{"line":48,"column":8},"end":{"line":48,"column":53}},"13":{"start":{"line":50,"column":4},"end":{"line":50,"column":49}},"14":{"start":{"line":57,"column":0},"end":{"line":57,"column":52}},"15":{"start":{"line":58,"column":0},"end":{"line":66,"column":2}},"16":{"start":{"line":68,"column":0},"end":{"line":193,"column":2}},"17":{"start":{"line":90,"column":8},"end":{"line":90,"column":113}},"18":{"start":{"line":91,"column":8},"end":{"line":91,"column":99}},"19":{"start":{"line":92,"column":8},"end":{"line":92,"column":74}},"20":{"start":{"line":93,"column":8},"end":{"line":93,"column":127}},"21":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"22":{"start":{"line":102,"column":12},"end":{"line":102,"column":97}},"23":{"start":{"line":113,"column":8},"end":{"line":133,"column":9}},"24":{"start":{"line":114,"column":12},"end":{"line":114,"column":24}},"25":{"start":{"line":116,"column":12},"end":{"line":124,"column":13}},"26":{"start":{"line":117,"column":16},"end":{"line":117,"column":95}},"27":{"start":{"line":118,"column":19},"end":{"line":124,"column":13}},"28":{"start":{"line":119,"column":16},"end":{"line":119,"column":95}},"29":{"start":{"line":120,"column":19},"end":{"line":124,"column":13}},"30":{"start":{"line":121,"column":16},"end":{"line":121,"column":99}},"31":{"start":{"line":123,"column":16},"end":{"line":123,"column":99}},"32":{"start":{"line":125,"column":12},"end":{"line":132,"column":15}},"33":{"start":{"line":140,"column":8},"end":{"line":142,"column":9}},"34":{"start":{"line":141,"column":12},"end":{"line":141,"column":77}},"35":{"start":{"line":148,"column":8},"end":{"line":191,"column":10}},"36":{"start":{"line":151,"column":16},"end":{"line":153,"column":17}},"37":{"start":{"line":152,"column":20},"end":{"line":152,"column":27}},"38":{"start":{"line":154,"column":16},"end":{"line":156,"column":17}},"39":{"start":{"line":155,"column":20},"end":{"line":155,"column":73}},"40":{"start":{"line":160,"column":16},"end":{"line":167,"column":17}},"41":{"start":{"line":166,"column":20},"end":{"line":166,"column":27}},"42":{"start":{"line":169,"column":16},"end":{"line":169,"column":69}},"43":{"start":{"line":170,"column":16},"end":{"line":170,"column":97}},"44":{"start":{"line":172,"column":16},"end":{"line":174,"column":17}},"45":{"start":{"line":173,"column":20},"end":{"line":173,"column":67}},"46":{"start":{"line":178,"column":16},"end":{"line":180,"column":17}},"47":{"start":{"line":179,"column":20},"end":{"line":179,"column":27}},"48":{"start":{"line":181,"column":16},"end":{"line":189,"column":17}},"49":{"start":{"line":182,"column":20},"end":{"line":182,"column":74}},"50":{"start":{"line":183,"column":23},"end":{"line":189,"column":17}},"51":{"start":{"line":188,"column":20},"end":{"line":188,"column":75}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":8},"end":{"line":25,"column":43}},{"start":{"line":25,"column":47},"end":{"line":25,"column":83}},{"start":{"line":25,"column":87},"end":{"line":25,"column":119}}]},"3":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":8}},{"start":{"line":28,"column":8},"end":{"line":28,"column":8}}]},"4":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":12},"end":{"line":28,"column":50}},{"start":{"line":28,"column":54},"end":{"line":28,"column":89}}]},"5":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"6":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":47}},{"start":{"line":33,"column":51},"end":{"line":33,"column":87}}]},"7":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":4}},{"start":{"line":47,"column":4},"end":{"line":47,"column":4}}]},"8":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":25},"end":{"line":90,"column":105}},{"start":{"line":90,"column":110},"end":{"line":90,"column":112}}]},"9":{"line":90,"type":"cond-expr","locations":[{"start":{"line":90,"column":66},"end":{"line":90,"column":84}},{"start":{"line":90,"column":87},"end":{"line":90,"column":105}}]},"10":{"line":91,"type":"cond-expr","locations":[{"start":{"line":91,"column":69},"end":{"line":91,"column":87}},{"start":{"line":91,"column":90},"end":{"line":91,"column":98}}]},"11":{"line":93,"type":"cond-expr","locations":[{"start":{"line":93,"column":89},"end":{"line":93,"column":122}},{"start":{"line":93,"column":125},"end":{"line":93,"column":126}}]},"12":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":28},"end":{"line":93,"column":49}},{"start":{"line":93,"column":53},"end":{"line":93,"column":86}}]},"13":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":20},"end":{"line":102,"column":44}},{"start":{"line":102,"column":48},"end":{"line":102,"column":55}},{"start":{"line":102,"column":61},"end":{"line":102,"column":84}},{"start":{"line":102,"column":88},"end":{"line":102,"column":95}}]},"14":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":12},"end":{"line":116,"column":12}},{"start":{"line":116,"column":12},"end":{"line":116,"column":12}}]},"15":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":16},"end":{"line":116,"column":40}},{"start":{"line":116,"column":44},"end":{"line":116,"column":50}}]},"16":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":19},"end":{"line":118,"column":19}},{"start":{"line":118,"column":19},"end":{"line":118,"column":19}}]},"17":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":19},"end":{"line":120,"column":19}},{"start":{"line":120,"column":19},"end":{"line":120,"column":19}}]},"18":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":19},"end":{"line":141,"column":42}},{"start":{"line":141,"column":46},"end":{"line":141,"column":76}}]},"19":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":16},"end":{"line":151,"column":16}},{"start":{"line":151,"column":16},"end":{"line":151,"column":16}}]},"20":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":20},"end":{"line":151,"column":30}},{"start":{"line":151,"column":34},"end":{"line":151,"column":73}},{"start":{"line":151,"column":77},"end":{"line":151,"column":106}}]},"21":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":16},"end":{"line":154,"column":16}},{"start":{"line":154,"column":16},"end":{"line":154,"column":16}}]},"22":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":20},"end":{"line":154,"column":32}},{"start":{"line":154,"column":36},"end":{"line":154,"column":79}}]},"23":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":16},"end":{"line":160,"column":16}},{"start":{"line":160,"column":16},"end":{"line":160,"column":16}}]},"24":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":20},"end":{"line":161,"column":60}},{"start":{"line":162,"column":21},"end":{"line":162,"column":39}},{"start":{"line":162,"column":43},"end":{"line":162,"column":80}},{"start":{"line":163,"column":21},"end":{"line":163,"column":42}},{"start":{"line":163,"column":46},"end":{"line":163,"column":72}},{"start":{"line":164,"column":21},"end":{"line":164,"column":52}},{"start":{"line":164,"column":56},"end":{"line":164,"column":93}}]},"25":{"line":170,"type":"cond-expr","locations":[{"start":{"line":170,"column":38},"end":{"line":170,"column":79}},{"start":{"line":170,"column":82},"end":{"line":170,"column":96}}]},"26":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":16},"end":{"line":172,"column":16}},{"start":{"line":172,"column":16},"end":{"line":172,"column":16}}]},"27":{"line":172,"type":"binary-expr","locations":[{"start":{"line":172,"column":20},"end":{"line":172,"column":33}},{"start":{"line":172,"column":37},"end":{"line":172,"column":55}},{"start":{"line":172,"column":59},"end":{"line":172,"column":95}}]},"28":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":16},"end":{"line":178,"column":16}},{"start":{"line":178,"column":16},"end":{"line":178,"column":16}}]},"29":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":20},"end":{"line":178,"column":60}},{"start":{"line":178,"column":64},"end":{"line":178,"column":78}},{"start":{"line":178,"column":82},"end":{"line":178,"column":95}},{"start":{"line":178,"column":99},"end":{"line":178,"column":125}}]},"30":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":16},"end":{"line":181,"column":16}},{"start":{"line":181,"column":16},"end":{"line":181,"column":16}}]},"31":{"line":181,"type":"binary-expr","locations":[{"start":{"line":181,"column":20},"end":{"line":181,"column":50}},{"start":{"line":181,"column":54},"end":{"line":181,"column":99}}]},"32":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":23},"end":{"line":183,"column":23}},{"start":{"line":183,"column":23},"end":{"line":183,"column":23}}]},"33":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":20},"end":{"line":184,"column":45}},{"start":{"line":185,"column":20},"end":{"line":185,"column":61}},{"start":{"line":186,"column":20},"end":{"line":186,"column":66}}]}},"code":["/**"," * @fileoverview Rule to require function names to match the name of the variable or property to which they are assigned."," * @author Annie Zhang, Pavel Strashkin"," */","","\"use strict\";","","//--------------------------------------------------------------------------","// Requirements","//--------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","const esutils = require(\"esutils\");","","//--------------------------------------------------------------------------","// Helpers","//--------------------------------------------------------------------------","","/**"," * Determines if a pattern is `module.exports` or `module[\"exports\"]`"," * @param {ASTNode} pattern The left side of the AssignmentExpression"," * @returns {boolean} True if the pattern is `module.exports` or `module[\"exports\"]`"," */","function isModuleExports(pattern) {","    if (pattern.type === \"MemberExpression\" && pattern.object.type === \"Identifier\" && pattern.object.name === \"module\") {","","        // module.exports","        if (pattern.property.type === \"Identifier\" && pattern.property.name === \"exports\") {","            return true;","        }","","        // module[\"exports\"]","        if (pattern.property.type === \"Literal\" && pattern.property.value === \"exports\") {","            return true;","        }","    }","    return false;","}","","/**"," * Determines if a string name is a valid identifier"," * @param {string} name The string to be checked"," * @param {int} ecmaVersion The ECMAScript version if specified in the parserOptions config"," * @returns {boolean} True if the string is a valid identifier"," */","function isIdentifier(name, ecmaVersion) {","    if (ecmaVersion >= 6) {","        return esutils.keyword.isIdentifierES6(name);","    }","    return esutils.keyword.isIdentifierES5(name);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const alwaysOrNever = { enum: [\"always\", \"never\"] };","const optionsObject = {","    type: \"object\",","    properties: {","        includeCommonJSModuleExports: {","            type: \"boolean\"","        }","    },","    additionalProperties: false","};","","module.exports = {","    meta: {","        docs: {","            description: \"require function names to match the name of the variable or property to which they are assigned\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: {","            anyOf: [{","                type: \"array\",","                additionalItems: false,","                items: [alwaysOrNever, optionsObject]","            }, {","                type: \"array\",","                additionalItems: false,","                items: [optionsObject]","            }]","        }","    },","","    create(context) {","        const options = (typeof context.options[0] === \"object\" ? context.options[0] : context.options[1]) || {};","        const nameMatches = typeof context.options[0] === \"string\" ? context.options[0] : \"always\";","        const includeModuleExports = options.includeCommonJSModuleExports;","        const ecmaVersion = context.parserOptions && context.parserOptions.ecmaVersion ? context.parserOptions.ecmaVersion : 5;","","        /**","         * Compares identifiers based on the nameMatches option","         * @param {string} x the first identifier","         * @param {string} y the second identifier","         * @returns {boolean} whether the two identifiers should warn.","         */","        function shouldWarn(x, y) {","            return (nameMatches === \"always\" && x !== y) || (nameMatches === \"never\" && x === y);","        }","","        /**","         * Reports","         * @param {ASTNode} node The node to report","         * @param {string} name The variable or property name","         * @param {string} funcName The function name","         * @param {boolean} isProp True if the reported node is a property assignment","         * @returns {void}","         */","        function report(node, name, funcName, isProp) {","            let message;","","            if (nameMatches === \"always\" && isProp) {","                message = \"Function name `{{funcName}}` should match property name `{{name}}`\";","            } else if (nameMatches === \"always\") {","                message = \"Function name `{{funcName}}` should match variable name `{{name}}`\";","            } else if (isProp) {","                message = \"Function name `{{funcName}}` should not match property name `{{name}}`\";","            } else {","                message = \"Function name `{{funcName}}` should not match variable name `{{name}}`\";","            }","            context.report({","                node,","                message,","                data: {","                    name,","                    funcName","                }","            });","        }","","        /**","         * Determines whether a given node is a string literal","         * @param {ASTNode} node The node to check","         * @returns {boolean} `true` if the node is a string literal","         */","        function isStringLiteral(node) {","            return node.type === \"Literal\" && typeof node.value === \"string\";","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            VariableDeclarator(node) {","                if (!node.init || node.init.type !== \"FunctionExpression\" || node.id.type !== \"Identifier\") {","                    return;","                }","                if (node.init.id && shouldWarn(node.id.name, node.init.id.name)) {","                    report(node, node.id.name, node.init.id.name, false);","                }","            },","","            AssignmentExpression(node) {","                if (","                    node.right.type !== \"FunctionExpression\" ||","                    (node.left.computed && node.left.property.type !== \"Literal\") ||","                    (!includeModuleExports && isModuleExports(node.left)) ||","                    (node.left.type !== \"Identifier\" && node.left.type !== \"MemberExpression\")","                ) {","                    return;","                }","","                const isProp = node.left.type === \"MemberExpression\";","                const name = isProp ? astUtils.getStaticPropertyName(node.left) : node.left.name;","","                if (node.right.id && isIdentifier(name) && shouldWarn(name, node.right.id.name)) {","                    report(node, name, node.right.id.name, isProp);","                }","            },","","            Property(node) {","                if (node.value.type !== \"FunctionExpression\" || !node.value.id || node.computed && !isStringLiteral(node.key)) {","                    return;","                }","                if (node.key.type === \"Identifier\" && shouldWarn(node.key.name, node.value.id.name)) {","                    report(node, node.key.name, node.value.id.name, true);","                } else if (","                    isStringLiteral(node.key) &&","                    isIdentifier(node.key.value, ecmaVersion) &&","                    shouldWarn(node.key.value, node.value.id.name)","                ) {","                    report(node, node.key.value, node.value.id.name, true);","                }","            }","        };","    }","};",""],"l":{"12":1,"13":1,"24":1,"25":0,"28":0,"29":0,"33":0,"34":0,"37":0,"46":1,"47":0,"48":0,"50":0,"57":1,"58":1,"68":1,"90":0,"91":0,"92":0,"93":0,"101":1,"102":0,"113":1,"114":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"123":0,"125":0,"140":1,"141":0,"148":0,"151":0,"152":0,"154":0,"155":0,"160":0,"166":0,"169":0,"170":0,"172":0,"173":0,"178":0,"179":0,"181":0,"182":0,"183":0,"188":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/func-names.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/func-names.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":1,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"b":{"1":[0,0],"2":[0,0,0,0,0],"3":[0,0,0,0,0,0,0,0,0,0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"isFunctionName","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":34}}},"2":{"name":"(anonymous_2)","line":42,"loc":{"start":{"line":42,"column":10},"end":{"line":42,"column":20}}},"3":{"name":"isObjectOrClassMethod","line":52,"loc":{"start":{"line":52,"column":8},"end":{"line":52,"column":45}}},"4":{"name":"hasInferredName","line":70,"loc":{"start":{"line":70,"column":8},"end":{"line":70,"column":39}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":37},"end":{"line":82,"column":44}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":19,"column":0},"end":{"line":21,"column":1}},"3":{"start":{"line":20,"column":4},"end":{"line":20,"column":64}},"4":{"start":{"line":27,"column":0},"end":{"line":114,"column":2}},"5":{"start":{"line":43,"column":8},"end":{"line":43,"column":53}},"6":{"start":{"line":44,"column":8},"end":{"line":44,"column":60}},"7":{"start":{"line":52,"column":8},"end":{"line":62,"column":9}},"8":{"start":{"line":53,"column":12},"end":{"line":53,"column":39}},"9":{"start":{"line":55,"column":12},"end":{"line":61,"column":15}},"10":{"start":{"line":70,"column":8},"end":{"line":79,"column":9}},"11":{"start":{"line":71,"column":12},"end":{"line":71,"column":39}},"12":{"start":{"line":73,"column":12},"end":{"line":78,"column":79}},"13":{"start":{"line":81,"column":8},"end":{"line":112,"column":10}},"14":{"start":{"line":85,"column":16},"end":{"line":85,"column":70}},"15":{"start":{"line":87,"column":16},"end":{"line":89,"column":17}},"16":{"start":{"line":88,"column":20},"end":{"line":88,"column":27}},"17":{"start":{"line":91,"column":16},"end":{"line":91,"column":65}},"18":{"start":{"line":92,"column":16},"end":{"line":92,"column":68}},"19":{"start":{"line":94,"column":16},"end":{"line":110,"column":17}},"20":{"start":{"line":95,"column":20},"end":{"line":101,"column":21}},"21":{"start":{"line":96,"column":24},"end":{"line":100,"column":27}},"22":{"start":{"line":103,"column":20},"end":{"line":109,"column":21}},"23":{"start":{"line":104,"column":24},"end":{"line":108,"column":27}}},"branchMap":{"1":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":11},"end":{"line":20,"column":19}},{"start":{"line":20,"column":23},"end":{"line":20,"column":63}}]},"2":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":20},"end":{"line":55,"column":54}},{"start":{"line":56,"column":16},"end":{"line":56,"column":42}},{"start":{"line":57,"column":20},"end":{"line":57,"column":33}},{"start":{"line":58,"column":20},"end":{"line":58,"column":41}},{"start":{"line":59,"column":20},"end":{"line":59,"column":41}}]},"3":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":19},"end":{"line":73,"column":46}},{"start":{"line":74,"column":17},"end":{"line":74,"column":53}},{"start":{"line":74,"column":57},"end":{"line":74,"column":88}},{"start":{"line":74,"column":92},"end":{"line":74,"column":112}},{"start":{"line":75,"column":17},"end":{"line":75,"column":43}},{"start":{"line":75,"column":47},"end":{"line":75,"column":68}},{"start":{"line":76,"column":17},"end":{"line":76,"column":55}},{"start":{"line":76,"column":59},"end":{"line":76,"column":92}},{"start":{"line":76,"column":96},"end":{"line":76,"column":117}},{"start":{"line":77,"column":17},"end":{"line":77,"column":59}},{"start":{"line":77,"column":63},"end":{"line":77,"column":90}},{"start":{"line":78,"column":17},"end":{"line":78,"column":52}},{"start":{"line":78,"column":56},"end":{"line":78,"column":77}}]},"4":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":16},"end":{"line":87,"column":16}},{"start":{"line":87,"column":16},"end":{"line":87,"column":16}}]},"5":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":20},"end":{"line":87,"column":43}},{"start":{"line":87,"column":47},"end":{"line":87,"column":76}}]},"6":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":40},"end":{"line":91,"column":47}},{"start":{"line":91,"column":51},"end":{"line":91,"column":63}}]},"7":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":16},"end":{"line":94,"column":16}},{"start":{"line":94,"column":16},"end":{"line":94,"column":16}}]},"8":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":20},"end":{"line":95,"column":20}},{"start":{"line":95,"column":20},"end":{"line":95,"column":20}}]},"9":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":20},"end":{"line":103,"column":20}},{"start":{"line":103,"column":20},"end":{"line":103,"column":20}}]},"10":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":24},"end":{"line":103,"column":32}},{"start":{"line":103,"column":37},"end":{"line":103,"column":101}}]},"11":{"line":103,"type":"cond-expr","locations":[{"start":{"line":103,"column":48},"end":{"line":103,"column":70}},{"start":{"line":103,"column":73},"end":{"line":103,"column":101}}]}},"code":["/**"," * @fileoverview Rule to warn when a function expression does not have a name."," * @author Kyle T. Nunery"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","/**"," * Checks whether or not a given variable is a function name."," * @param {escope.Variable} variable - A variable to check."," * @returns {boolean} `true` if the variable is a function name."," */","function isFunctionName(variable) {","    return variable && variable.defs[0].type === \"FunctionName\";","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow named `function` expressions\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"always\", \"as-needed\", \"never\"]","            }","        ]","    },","","    create(context) {","        const never = context.options[0] === \"never\";","        const asNeeded = context.options[0] === \"as-needed\";","","        /**","         * Determines whether the current FunctionExpression node is a get, set, or","         * shorthand method in an object literal or a class.","         * @param {ASTNode} node - A node to check.","         * @returns {boolean} True if the node is a get, set, or shorthand method.","         */","        function isObjectOrClassMethod(node) {","            const parent = node.parent;","","            return (parent.type === \"MethodDefinition\" || (","                parent.type === \"Property\" && (","                    parent.method ||","                    parent.kind === \"get\" ||","                    parent.kind === \"set\"","                )","            ));","        }","","        /**","         * Determines whether the current FunctionExpression node has a name that would be","         * inferred from context in a conforming ES6 environment.","         * @param {ASTNode} node - A node to check.","         * @returns {boolean} True if the node would have a name assigned automatically.","         */","        function hasInferredName(node) {","            const parent = node.parent;","","            return isObjectOrClassMethod(node) ||","                (parent.type === \"VariableDeclarator\" && parent.id.type === \"Identifier\" && parent.init === node) ||","                (parent.type === \"Property\" && parent.value === node) ||","                (parent.type === \"AssignmentExpression\" && parent.left.type === \"Identifier\" && parent.right === node) ||","                (parent.type === \"ExportDefaultDeclaration\" && parent.declaration === node) ||","                (parent.type === \"AssignmentPattern\" && parent.right === node);","        }","","        return {","            \"FunctionExpression:exit\"(node) {","","                // Skip recursive functions.","                const nameVar = context.getDeclaredVariables(node)[0];","","                if (isFunctionName(nameVar) && nameVar.references.length > 0) {","                    return;","                }","","                const hasName = Boolean(node.id && node.id.name);","                const name = astUtils.getFunctionNameWithKind(node);","","                if (never) {","                    if (hasName) {","                        context.report({","                            node,","                            message: \"Unexpected named {{name}}.\",","                            data: { name }","                        });","                    }","                } else {","                    if (!hasName && (asNeeded ? !hasInferredName(node) : !isObjectOrClassMethod(node))) {","                        context.report({","                            node,","                            message: \"Unexpected unnamed {{name}}.\",","                            data: { name }","                        });","                    }","                }","            }","        };","    }","};",""],"l":{"12":1,"19":1,"20":0,"27":1,"43":0,"44":0,"52":1,"53":0,"55":0,"70":1,"71":0,"73":0,"81":0,"85":0,"87":0,"88":0,"91":0,"92":0,"94":0,"95":0,"96":0,"103":0,"104":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/func-style.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/func-style.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":20}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":31},"end":{"line":43,"column":38}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":38},"end":{"line":50,"column":41}}},"4":{"name":"(anonymous_4)","line":54,"loc":{"start":{"line":54,"column":30},"end":{"line":54,"column":37}}},"5":{"name":"(anonymous_5)","line":61,"loc":{"start":{"line":61,"column":37},"end":{"line":61,"column":40}}},"6":{"name":"(anonymous_6)","line":65,"loc":{"start":{"line":65,"column":26},"end":{"line":65,"column":29}}},"7":{"name":"(anonymous_7)","line":73,"loc":{"start":{"line":73,"column":51},"end":{"line":73,"column":62}}},"8":{"name":"(anonymous_8)","line":77,"loc":{"start":{"line":77,"column":59},"end":{"line":77,"column":74}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":89,"column":2}},"2":{"start":{"line":37,"column":8},"end":{"line":40,"column":23}},"3":{"start":{"line":42,"column":8},"end":{"line":70,"column":10}},"4":{"start":{"line":44,"column":16},"end":{"line":44,"column":34}},"5":{"start":{"line":46,"column":16},"end":{"line":48,"column":17}},"6":{"start":{"line":47,"column":20},"end":{"line":47,"column":89}},"7":{"start":{"line":51,"column":16},"end":{"line":51,"column":28}},"8":{"start":{"line":55,"column":16},"end":{"line":55,"column":34}},"9":{"start":{"line":57,"column":16},"end":{"line":59,"column":17}},"10":{"start":{"line":58,"column":20},"end":{"line":58,"column":103}},"11":{"start":{"line":62,"column":16},"end":{"line":62,"column":28}},"12":{"start":{"line":66,"column":16},"end":{"line":68,"column":17}},"13":{"start":{"line":67,"column":20},"end":{"line":67,"column":51}},"14":{"start":{"line":72,"column":8},"end":{"line":84,"column":9}},"15":{"start":{"line":73,"column":12},"end":{"line":75,"column":14}},"16":{"start":{"line":74,"column":16},"end":{"line":74,"column":34}},"17":{"start":{"line":77,"column":12},"end":{"line":83,"column":14}},"18":{"start":{"line":78,"column":16},"end":{"line":78,"column":48}},"19":{"start":{"line":80,"column":16},"end":{"line":82,"column":17}},"20":{"start":{"line":81,"column":20},"end":{"line":81,"column":103}},"21":{"start":{"line":86,"column":8},"end":{"line":86,"column":28}}},"branchMap":{"1":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":34},"end":{"line":38,"column":52}},{"start":{"line":38,"column":56},"end":{"line":38,"column":103}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":16},"end":{"line":46,"column":16}},{"start":{"line":46,"column":16},"end":{"line":46,"column":16}}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":20},"end":{"line":46,"column":40}},{"start":{"line":46,"column":44},"end":{"line":46,"column":91}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":16}},{"start":{"line":57,"column":16},"end":{"line":57,"column":16}}]},"5":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":20},"end":{"line":57,"column":39}},{"start":{"line":57,"column":43},"end":{"line":57,"column":84}}]},"6":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":16},"end":{"line":66,"column":16}},{"start":{"line":66,"column":16},"end":{"line":66,"column":16}}]},"7":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"8":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":16},"end":{"line":80,"column":16}},{"start":{"line":80,"column":16},"end":{"line":80,"column":16}}]},"9":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":39}},{"start":{"line":80,"column":43},"end":{"line":80,"column":55}},{"start":{"line":80,"column":59},"end":{"line":80,"column":100}}]}},"code":["/**"," * @fileoverview Rule to enforce a particular function style"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce the consistent use of either `function` declarations or expressions\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"declaration\", \"expression\"]","            },","            {","                type: \"object\",","                properties: {","                    allowArrowFunctions: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const style = context.options[0],","            allowArrowFunctions = context.options[1] && context.options[1].allowArrowFunctions === true,","            enforceDeclarations = (style === \"declaration\"),","            stack = [];","","        const nodesToCheck = {","            FunctionDeclaration(node) {","                stack.push(false);","","                if (!enforceDeclarations && node.parent.type !== \"ExportDefaultDeclaration\") {","                    context.report({ node, message: \"Expected a function expression.\" });","                }","            },","            \"FunctionDeclaration:exit\"() {","                stack.pop();","            },","","            FunctionExpression(node) {","                stack.push(false);","","                if (enforceDeclarations && node.parent.type === \"VariableDeclarator\") {","                    context.report({ node: node.parent, message: \"Expected a function declaration.\" });","                }","            },","            \"FunctionExpression:exit\"() {","                stack.pop();","            },","","            ThisExpression() {","                if (stack.length > 0) {","                    stack[stack.length - 1] = true;","                }","            }","        };","","        if (!allowArrowFunctions) {","            nodesToCheck.ArrowFunctionExpression = function() {","                stack.push(false);","            };","","            nodesToCheck[\"ArrowFunctionExpression:exit\"] = function(node) {","                const hasThisExpr = stack.pop();","","                if (enforceDeclarations && !hasThisExpr && node.parent.type === \"VariableDeclarator\") {","                    context.report({ node: node.parent, message: \"Expected a function declaration.\" });","                }","            };","        }","","        return nodesToCheck;","","    }","};",""],"l":{"11":1,"37":0,"42":0,"44":0,"46":0,"47":0,"51":0,"55":0,"57":0,"58":0,"62":0,"66":0,"67":0,"72":0,"73":0,"74":0,"77":0,"78":0,"80":0,"81":0,"86":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/generator-star-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/generator-star-spacing.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":41,"loc":{"start":{"line":41,"column":10},"end":{"line":41,"column":20}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":39}}},"3":{"name":"isStarToken","line":63,"loc":{"start":{"line":63,"column":8},"end":{"line":63,"column":36}}},"4":{"name":"getStarToken","line":73,"loc":{"start":{"line":73,"column":8},"end":{"line":73,"column":36}}},"5":{"name":"checkSpacing","line":89,"loc":{"start":{"line":89,"column":8},"end":{"line":89,"column":59}}},"6":{"name":"(anonymous_6)","line":105,"loc":{"start":{"line":105,"column":23},"end":{"line":105,"column":31}}},"7":{"name":"checkFunction","line":123,"loc":{"start":{"line":123,"column":8},"end":{"line":123,"column":37}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":148,"column":2}},"2":{"start":{"line":43,"column":8},"end":{"line":53,"column":31}},"3":{"start":{"line":44,"column":12},"end":{"line":51,"column":13}},"4":{"start":{"line":45,"column":16},"end":{"line":50,"column":38}},"5":{"start":{"line":52,"column":12},"end":{"line":52,"column":26}},"6":{"start":{"line":55,"column":8},"end":{"line":55,"column":51}},"7":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"8":{"start":{"line":64,"column":12},"end":{"line":64,"column":70}},"9":{"start":{"line":73,"column":8},"end":{"line":78,"column":9}},"10":{"start":{"line":74,"column":12},"end":{"line":77,"column":14}},"11":{"start":{"line":89,"column":8},"end":{"line":116,"column":9}},"12":{"start":{"line":90,"column":12},"end":{"line":115,"column":13}},"13":{"start":{"line":91,"column":16},"end":{"line":91,"column":54}},"14":{"start":{"line":92,"column":16},"end":{"line":92,"column":49}},"15":{"start":{"line":93,"column":16},"end":{"line":93,"column":60}},"16":{"start":{"line":94,"column":16},"end":{"line":94,"column":70}},"17":{"start":{"line":95,"column":16},"end":{"line":95,"column":61}},"18":{"start":{"line":96,"column":16},"end":{"line":99,"column":18}},"19":{"start":{"line":101,"column":16},"end":{"line":114,"column":19}},"20":{"start":{"line":106,"column":24},"end":{"line":111,"column":25}},"21":{"start":{"line":107,"column":28},"end":{"line":109,"column":29}},"22":{"start":{"line":108,"column":32},"end":{"line":108,"column":72}},"23":{"start":{"line":110,"column":28},"end":{"line":110,"column":69}},"24":{"start":{"line":112,"column":24},"end":{"line":112,"column":92}},"25":{"start":{"line":123,"column":8},"end":{"line":140,"column":9}},"26":{"start":{"line":124,"column":12},"end":{"line":126,"column":13}},"27":{"start":{"line":125,"column":16},"end":{"line":125,"column":23}},"28":{"start":{"line":128,"column":12},"end":{"line":128,"column":49}},"29":{"start":{"line":131,"column":12},"end":{"line":131,"column":67}},"30":{"start":{"line":133,"column":12},"end":{"line":135,"column":13}},"31":{"start":{"line":134,"column":16},"end":{"line":134,"column":61}},"32":{"start":{"line":137,"column":12},"end":{"line":137,"column":66}},"33":{"start":{"line":139,"column":12},"end":{"line":139,"column":56}},"34":{"start":{"line":142,"column":8},"end":{"line":145,"column":10}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":12}},{"start":{"line":44,"column":12},"end":{"line":44,"column":12}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":23}},{"start":{"line":44,"column":27},"end":{"line":44,"column":53}}]},"3":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":18},"end":{"line":50,"column":24}},{"start":{"line":50,"column":28},"end":{"line":50,"column":36}}]},"4":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":19},"end":{"line":64,"column":38}},{"start":{"line":64,"column":42},"end":{"line":64,"column":69}}]},"5":{"line":75,"type":"cond-expr","locations":[{"start":{"line":75,"column":82},"end":{"line":75,"column":93}},{"start":{"line":75,"column":96},"end":{"line":75,"column":100}}]},"6":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":17},"end":{"line":75,"column":35}},{"start":{"line":75,"column":39},"end":{"line":75,"column":78}}]},"7":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":12},"end":{"line":90,"column":12}},{"start":{"line":90,"column":12},"end":{"line":90,"column":12}}]},"8":{"line":93,"type":"cond-expr","locations":[{"start":{"line":93,"column":37},"end":{"line":93,"column":46}},{"start":{"line":93,"column":49},"end":{"line":93,"column":59}}]},"9":{"line":94,"type":"cond-expr","locations":[{"start":{"line":94,"column":45},"end":{"line":94,"column":54}},{"start":{"line":94,"column":57},"end":{"line":94,"column":69}}]},"10":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":24},"end":{"line":106,"column":24}},{"start":{"line":106,"column":24},"end":{"line":106,"column":24}}]},"11":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":28},"end":{"line":107,"column":28}},{"start":{"line":107,"column":28},"end":{"line":107,"column":28}}]},"12":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":12},"end":{"line":124,"column":12}},{"start":{"line":124,"column":12},"end":{"line":124,"column":12}}]},"13":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":12},"end":{"line":133,"column":12}},{"start":{"line":133,"column":12},"end":{"line":133,"column":12}}]},"14":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":16},"end":{"line":133,"column":46}},{"start":{"line":133,"column":50},"end":{"line":133,"column":78}}]}},"code":["/**"," * @fileoverview Rule to check the spacing around the * in generator functions."," * @author Jamund Ferguson"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing around `*` operators in generator functions\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"before\", \"after\", \"both\", \"neither\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            before: { type: \"boolean\" },","                            after: { type: \"boolean\" }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","","        const mode = (function(option) {","            if (!option || typeof option === \"string\") {","                return {","                    before: { before: true, after: false },","                    after: { before: false, after: true },","                    both: { before: true, after: true },","                    neither: { before: false, after: false }","                }[option || \"before\"];","            }","            return option;","        }(context.options[0]));","","        const sourceCode = context.getSourceCode();","","        /**","         * Checks if the given token is a star token or not.","         *","         * @param {Token} token - The token to check.","         * @returns {boolean} `true` if the token is a star token.","         */","        function isStarToken(token) {","            return token.value === \"*\" && token.type === \"Punctuator\";","        }","","        /**","         * Gets the generator star token of the given function node.","         *","         * @param {ASTNode} node - The function node to get.","         * @returns {Token} Found star token.","         */","        function getStarToken(node) {","            return sourceCode.getFirstToken(","                (node.parent.method || node.parent.type === \"MethodDefinition\") ? node.parent : node,","                isStarToken","            );","        }","","        /**","         * Checks the spacing between two tokens before or after the star token.","         * @param {string} side Either \"before\" or \"after\".","         * @param {Token} leftToken `function` keyword token if side is \"before\", or","         *     star token if side is \"after\".","         * @param {Token} rightToken Star token if side is \"before\", or identifier","         *     token if side is \"after\".","         * @returns {void}","         */","        function checkSpacing(side, leftToken, rightToken) {","            if (!!(rightToken.range[0] - leftToken.range[1]) !== mode[side]) {","                const after = leftToken.value === \"*\";","                const spaceRequired = mode[side];","                const node = after ? leftToken : rightToken;","                const type = spaceRequired ? \"Missing\" : \"Unexpected\";","                const message = \"{{type}} space {{side}} *.\";","                const data = {","                    type,","                    side","                };","","                context.report({","                    node,","                    message,","                    data,","                    fix(fixer) {","                        if (spaceRequired) {","                            if (after) {","                                return fixer.insertTextAfter(node, \" \");","                            }","                            return fixer.insertTextBefore(node, \" \");","                        }","                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);","                    }","                });","            }","        }","","        /**","         * Enforces the spacing around the star if node is a generator function.","         * @param {ASTNode} node A function expression or declaration node.","         * @returns {void}","         */","        function checkFunction(node) {","            if (!node.generator) {","                return;","            }","","            const starToken = getStarToken(node);","","            // Only check before when preceded by `function`|`static` keyword","            const prevToken = sourceCode.getTokenBefore(starToken);","","            if (prevToken.value === \"function\" || prevToken.value === \"static\") {","                checkSpacing(\"before\", prevToken, starToken);","            }","","            const nextToken = sourceCode.getTokenAfter(starToken);","","            checkSpacing(\"after\", starToken, nextToken);","        }","","        return {","            FunctionDeclaration: checkFunction,","            FunctionExpression: checkFunction","        };","","    }","};",""],"l":{"12":1,"43":0,"44":0,"45":0,"52":0,"55":0,"63":1,"64":0,"73":1,"74":0,"89":1,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"101":0,"106":0,"107":0,"108":0,"110":0,"112":0,"123":1,"124":0,"125":0,"128":0,"131":0,"133":0,"134":0,"137":0,"139":0,"142":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/global-require.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/global-require.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"findReference","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":36}}},"2":{"name":"isShadowed","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":33}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":10},"end":{"line":60,"column":20}}},"4":{"name":"(anonymous_4)","line":62,"loc":{"start":{"line":62,"column":26},"end":{"line":62,"column":33}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":17,"column":2}},"2":{"start":{"line":25,"column":0},"end":{"line":35,"column":1}},"3":{"start":{"line":26,"column":4},"end":{"line":27,"column":61}},"4":{"start":{"line":26,"column":60},"end":{"line":27,"column":59}},"5":{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":29}},"7":{"start":{"line":33,"column":4},"end":{"line":33,"column":16}},"8":{"start":{"line":43,"column":0},"end":{"line":47,"column":1}},"9":{"start":{"line":44,"column":4},"end":{"line":44,"column":49}},"10":{"start":{"line":46,"column":4},"end":{"line":46,"column":81}},"11":{"start":{"line":49,"column":0},"end":{"line":75,"column":2}},"12":{"start":{"line":61,"column":8},"end":{"line":73,"column":10}},"13":{"start":{"line":63,"column":16},"end":{"line":63,"column":56}},"14":{"start":{"line":65,"column":16},"end":{"line":71,"column":17}},"15":{"start":{"line":66,"column":20},"end":{"line":66,"column":127}},"16":{"start":{"line":66,"column":81},"end":{"line":66,"column":125}},"17":{"start":{"line":68,"column":20},"end":{"line":70,"column":21}},"18":{"start":{"line":69,"column":24},"end":{"line":69,"column":83}}},"branchMap":{"1":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":60},"end":{"line":26,"column":107}},{"start":{"line":27,"column":12},"end":{"line":27,"column":59}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4},"skip":true}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":11},"end":{"line":46,"column":20}},{"start":{"line":46,"column":24},"end":{"line":46,"column":42}},{"start":{"line":46,"column":46},"end":{"line":46,"column":80}}]},"4":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":16},"end":{"line":65,"column":16}},{"start":{"line":65,"column":16},"end":{"line":65,"column":16}}]},"5":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":20},"end":{"line":65,"column":50}},{"start":{"line":65,"column":54},"end":{"line":65,"column":92}}]},"6":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":20},"end":{"line":68,"column":20}},{"start":{"line":68,"column":20},"end":{"line":68,"column":20}}]}},"code":["/**"," * @fileoverview Rule for disallowing require() outside of the top-level module context"," * @author Jamund Ferguson"," */","","\"use strict\";","","const ACCEPTABLE_PARENTS = [","    \"AssignmentExpression\",","    \"VariableDeclarator\",","    \"MemberExpression\",","    \"ExpressionStatement\",","    \"CallExpression\",","    \"ConditionalExpression\",","    \"Program\",","    \"VariableDeclaration\"","];","","/**"," * Finds the escope reference in the given scope."," * @param {Object} scope The scope to search."," * @param {ASTNode} node The identifier node."," * @returns {Reference|null} Returns the found reference or null if none were found."," */","function findReference(scope, node) {","    const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] &&","            reference.identifier.range[1] === node.range[1]);","","    /* istanbul ignore else: correctly returns null */","    if (references.length === 1) {","        return references[0];","    }","    return null;","","}","","/**"," * Checks if the given identifier node is shadowed in the given scope."," * @param {Object} scope The current scope."," * @param {ASTNode} node The identifier node to check."," * @returns {boolean} Whether or not the name is shadowed."," */","function isShadowed(scope, node) {","    const reference = findReference(scope, node);","","    return reference && reference.resolved && reference.resolved.defs.length > 0;","}","","module.exports = {","    meta: {","        docs: {","            description: \"require `require()` calls to be placed at top-level module scope\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        return {","            CallExpression(node) {","                const currentScope = context.getScope();","","                if (node.callee.name === \"require\" && !isShadowed(currentScope, node.callee)) {","                    const isGoodRequire = context.getAncestors().every(parent => ACCEPTABLE_PARENTS.indexOf(parent.type) > -1);","","                    if (!isGoodRequire) {","                        context.report({ node, message: \"Unexpected require().\" });","                    }","                }","            }","        };","    }","};",""],"l":{"8":1,"25":1,"26":0,"30":0,"31":0,"33":0,"43":1,"44":0,"46":0,"49":1,"61":0,"63":0,"65":0,"66":0,"68":0,"69":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/guard-for-in.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/guard-for-in.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":26},"end":{"line":27,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":42,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":39,"column":10}},"3":{"start":{"line":33,"column":16},"end":{"line":33,"column":97}},"4":{"start":{"line":35,"column":16},"end":{"line":37,"column":17}},"5":{"start":{"line":36,"column":20},"end":{"line":36,"column":165}}},"branchMap":{"1":{"line":33,"type":"cond-expr","locations":[{"start":{"line":33,"column":67},"end":{"line":33,"column":84}},{"start":{"line":33,"column":87},"end":{"line":33,"column":96}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":16},"end":{"line":35,"column":16}},{"start":{"line":35,"column":16},"end":{"line":35,"column":16}}]},"3":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":20},"end":{"line":35,"column":24}},{"start":{"line":35,"column":28},"end":{"line":35,"column":55}}]}},"code":["/**"," * @fileoverview Rule to flag for-in loops without if statements inside"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require `for-in` loops to include an `if` statement\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            ForInStatement(node) {","","                /*","                 * If the for-in statement has {}, then the real body is the body","                 * of the BlockStatement. Otherwise, just use body as provided.","                 */","                const body = node.body.type === \"BlockStatement\" ? node.body.body[0] : node.body;","","                if (body && body.type !== \"IfStatement\") {","                    context.report({ node, message: \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"33":0,"35":0,"36":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/handle-callback-err.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/handle-callback-err.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":10},"end":{"line":27,"column":20}}},"2":{"name":"isPattern","line":36,"loc":{"start":{"line":36,"column":8},"end":{"line":36,"column":42}}},"3":{"name":"matchesConfiguredErrorName","line":47,"loc":{"start":{"line":47,"column":8},"end":{"line":47,"column":50}}},"4":{"name":"getParameters","line":61,"loc":{"start":{"line":61,"column":8},"end":{"line":61,"column":38}}},"5":{"name":"checkForError","line":70,"loc":{"start":{"line":70,"column":8},"end":{"line":70,"column":37}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":89,"column":2}},"2":{"start":{"line":29,"column":8},"end":{"line":29,"column":58}},"3":{"start":{"line":36,"column":8},"end":{"line":40,"column":9}},"4":{"start":{"line":37,"column":12},"end":{"line":37,"column":47}},"5":{"start":{"line":39,"column":12},"end":{"line":39,"column":37}},"6":{"start":{"line":47,"column":8},"end":{"line":54,"column":9}},"7":{"start":{"line":48,"column":12},"end":{"line":52,"column":13}},"8":{"start":{"line":49,"column":16},"end":{"line":49,"column":57}},"9":{"start":{"line":51,"column":16},"end":{"line":51,"column":41}},"10":{"start":{"line":53,"column":12},"end":{"line":53,"column":42}},"11":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"12":{"start":{"line":62,"column":12},"end":{"line":62,"column":113}},"13":{"start":{"line":62,"column":54},"end":{"line":62,"column":111}},"14":{"start":{"line":70,"column":8},"end":{"line":80,"column":9}},"15":{"start":{"line":71,"column":12},"end":{"line":73,"column":47}},"16":{"start":{"line":75,"column":12},"end":{"line":79,"column":13}},"17":{"start":{"line":76,"column":16},"end":{"line":78,"column":17}},"18":{"start":{"line":77,"column":20},"end":{"line":77,"column":87}},"19":{"start":{"line":82,"column":8},"end":{"line":86,"column":10}}},"branchMap":{"1":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":30},"end":{"line":29,"column":48}},{"start":{"line":29,"column":52},"end":{"line":29,"column":57}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":12}},{"start":{"line":48,"column":12},"end":{"line":48,"column":12}}]},"3":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":54},"end":{"line":62,"column":70}},{"start":{"line":62,"column":74},"end":{"line":62,"column":111}}]},"4":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":12},"end":{"line":75,"column":12}},{"start":{"line":75,"column":12},"end":{"line":75,"column":12}}]},"5":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":16},"end":{"line":75,"column":30}},{"start":{"line":75,"column":34},"end":{"line":75,"column":81}}]},"6":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":16},"end":{"line":76,"column":16}},{"start":{"line":76,"column":16},"end":{"line":76,"column":16}}]}},"code":["/**"," * @fileoverview Ensure handling of errors when we know they exist."," * @author Jamund Ferguson"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require error handling in callbacks\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: [","            {","                type: \"string\"","            }","        ]","    },","","    create(context) {","","        const errorArgument = context.options[0] || \"err\";","","        /**","         * Checks if the given argument should be interpreted as a regexp pattern.","         * @param {string} stringToCheck The string which should be checked.","         * @returns {boolean} Whether or not the string should be interpreted as a pattern.","         */","        function isPattern(stringToCheck) {","            const firstChar = stringToCheck[0];","","            return firstChar === \"^\";","        }","","        /**","         * Checks if the given name matches the configured error argument.","         * @param {string} name The name which should be compared.","         * @returns {boolean} Whether or not the given name matches the configured error variable name.","         */","        function matchesConfiguredErrorName(name) {","            if (isPattern(errorArgument)) {","                const regexp = new RegExp(errorArgument);","","                return regexp.test(name);","            }","            return name === errorArgument;","        }","","        /**","         * Get the parameters of a given function scope.","         * @param {Object} scope The function scope.","         * @returns {array} All parameters of the given scope.","         */","        function getParameters(scope) {","            return scope.variables.filter(variable => variable.defs[0] && variable.defs[0].type === \"Parameter\");","        }","","        /**","         * Check to see if we're handling the error object properly.","         * @param {ASTNode} node The AST node to check.","         * @returns {void}","         */","        function checkForError(node) {","            const scope = context.getScope(),","                parameters = getParameters(scope),","                firstParameter = parameters[0];","","            if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {","                if (firstParameter.references.length === 0) {","                    context.report({ node, message: \"Expected error to be handled.\" });","                }","            }","        }","","        return {","            FunctionDeclaration: checkForError,","            FunctionExpression: checkForError,","            ArrowFunctionExpression: checkForError","        };","","    }","};",""],"l":{"12":1,"29":0,"36":1,"37":0,"39":0,"47":1,"48":0,"49":0,"51":0,"53":0,"61":1,"62":0,"70":1,"71":0,"75":0,"76":0,"77":0,"82":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/id-blacklist.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/id-blacklist.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":10},"end":{"line":30,"column":20}}},"2":{"name":"isInvalid","line":46,"loc":{"start":{"line":46,"column":8},"end":{"line":46,"column":33}}},"3":{"name":"shouldReport","line":57,"loc":{"start":{"line":57,"column":8},"end":{"line":57,"column":53}}},"4":{"name":"report","line":69,"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":30}}},"5":{"name":"(anonymous_5)","line":77,"loc":{"start":{"line":77,"column":22},"end":{"line":77,"column":29}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":117,"column":2}},"2":{"start":{"line":37,"column":8},"end":{"line":37,"column":42}},"3":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"4":{"start":{"line":47,"column":12},"end":{"line":47,"column":50}},"5":{"start":{"line":57,"column":8},"end":{"line":61,"column":9}},"6":{"start":{"line":58,"column":12},"end":{"line":60,"column":32}},"7":{"start":{"line":69,"column":8},"end":{"line":73,"column":9}},"8":{"start":{"line":70,"column":12},"end":{"line":72,"column":17}},"9":{"start":{"line":75,"column":8},"end":{"line":114,"column":10}},"10":{"start":{"line":78,"column":16},"end":{"line":79,"column":115}},"11":{"start":{"line":82,"column":16},"end":{"line":111,"column":17}},"12":{"start":{"line":85,"column":20},"end":{"line":99,"column":21}},"13":{"start":{"line":87,"column":24},"end":{"line":89,"column":25}},"14":{"start":{"line":88,"column":28},"end":{"line":88,"column":41}},"15":{"start":{"line":92,"column":27},"end":{"line":99,"column":21}},"16":{"start":{"line":96,"column":24},"end":{"line":98,"column":25}},"17":{"start":{"line":97,"column":28},"end":{"line":97,"column":41}},"18":{"start":{"line":102,"column":23},"end":{"line":111,"column":17}},"19":{"start":{"line":104,"column":20},"end":{"line":106,"column":21}},"20":{"start":{"line":105,"column":24},"end":{"line":105,"column":37}},"21":{"start":{"line":109,"column":23},"end":{"line":111,"column":17}},"22":{"start":{"line":110,"column":20},"end":{"line":110,"column":33}}},"branchMap":{"1":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":19},"end":{"line":58,"column":60}},{"start":{"line":59,"column":16},"end":{"line":59,"column":56}},{"start":{"line":60,"column":16},"end":{"line":60,"column":31}}]},"2":{"line":79,"type":"cond-expr","locations":[{"start":{"line":79,"column":82},"end":{"line":79,"column":100}},{"start":{"line":79,"column":103},"end":{"line":79,"column":114}}]},"3":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":16},"end":{"line":82,"column":16}},{"start":{"line":82,"column":16},"end":{"line":82,"column":16}}]},"4":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":20},"end":{"line":85,"column":20}},{"start":{"line":85,"column":20},"end":{"line":85,"column":20}}]},"5":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":24},"end":{"line":85,"column":64}},{"start":{"line":86,"column":24},"end":{"line":86,"column":61}}]},"6":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":24},"end":{"line":87,"column":24}},{"start":{"line":87,"column":24},"end":{"line":87,"column":24}}]},"7":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":27},"end":{"line":92,"column":27}},{"start":{"line":92,"column":27},"end":{"line":92,"column":27}}]},"8":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":31},"end":{"line":92,"column":78}},{"start":{"line":93,"column":25},"end":{"line":93,"column":74}},{"start":{"line":94,"column":24},"end":{"line":94,"column":72}},{"start":{"line":95,"column":24},"end":{"line":95,"column":72}}]},"9":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":24},"end":{"line":96,"column":24}},{"start":{"line":96,"column":24},"end":{"line":96,"column":24}}]},"10":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":23},"end":{"line":102,"column":23}},{"start":{"line":102,"column":23},"end":{"line":102,"column":23}}]},"11":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":20},"end":{"line":104,"column":20}},{"start":{"line":104,"column":20},"end":{"line":104,"column":20}}]},"12":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":23},"end":{"line":109,"column":23}},{"start":{"line":109,"column":23},"end":{"line":109,"column":23}}]}},"code":["/**"," * @fileoverview Rule that warns when identifier names that are"," * blacklisted in the configuration are used."," * @author Keith Cirkel (http://keithcirkel.co.uk)"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow specified identifiers\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: {","            type: \"array\",","            items: {","                type: \"string\"","            },","            uniqueItems: true","        }","    },","","    create(context) {","","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        const blacklist = context.options;","","","        /**","         * Checks if a string matches the provided pattern","         * @param {string} name The string to check.","         * @returns {boolean} if the string is a match","         * @private","         */","        function isInvalid(name) {","            return blacklist.indexOf(name) !== -1;","        }","","        /**","         * Verifies if we should report an error or not based on the effective","         * parent node and the identifier name.","         * @param {ASTNode} effectiveParent The effective parent node of the node to be reported","         * @param {string} name The identifier name of the identifier node","         * @returns {boolean} whether an error should be reported or not","         */","        function shouldReport(effectiveParent, name) {","            return effectiveParent.type !== \"CallExpression\" &&","                effectiveParent.type !== \"NewExpression\" &&","                isInvalid(name);","        }","","        /**","         * Reports an AST node as a rule violation.","         * @param {ASTNode} node The node to report.","         * @returns {void}","         * @private","         */","        function report(node) {","            context.report({ node, message: \"Identifier '{{name}}' is blacklisted.\", data: {","                name: node.name","            } });","        }","","        return {","","            Identifier(node) {","                const name = node.name,","                    effectiveParent = (node.parent.type === \"MemberExpression\") ? node.parent.parent : node.parent;","","                // MemberExpressions get special rules","                if (node.parent.type === \"MemberExpression\") {","","                    // Always check object names","                    if (node.parent.object.type === \"Identifier\" &&","                        node.parent.object.name === node.name) {","                        if (isInvalid(name)) {","                            report(node);","                        }","","                        // Report AssignmentExpressions only if they are the left side of the assignment","                    } else if (effectiveParent.type === \"AssignmentExpression\" &&","                        (effectiveParent.right.type !== \"MemberExpression\" ||","                        effectiveParent.left.type === \"MemberExpression\" &&","                        effectiveParent.left.property.name === node.name)) {","                        if (isInvalid(name)) {","                            report(node);","                        }","                    }","","                // Properties have their own rules","                } else if (node.parent.type === \"Property\") {","","                    if (shouldReport(effectiveParent, name)) {","                        report(node);","                    }","","                // Report anything that is a match and not a CallExpression","                } else if (shouldReport(effectiveParent, name)) {","                    report(node);","                }","            }","","        };","","    }","};",""],"l":{"13":1,"37":0,"46":1,"47":0,"57":1,"58":0,"69":1,"70":0,"75":0,"78":0,"82":0,"85":0,"87":0,"88":0,"92":0,"96":0,"97":0,"102":0,"104":0,"105":0,"109":0,"110":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/id-length.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/id-length.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":47,"loc":{"start":{"line":47,"column":10},"end":{"line":47,"column":20}}},"2":{"name":"(anonymous_2)","line":60,"loc":{"start":{"line":60,"column":44},"end":{"line":60,"column":61}}},"3":{"name":"(anonymous_3)","line":71,"loc":{"start":{"line":71,"column":29},"end":{"line":71,"column":44}}},"4":{"name":"(anonymous_4)","line":74,"loc":{"start":{"line":74,"column":30},"end":{"line":74,"column":45}}},"5":{"name":"(anonymous_5)","line":77,"loc":{"start":{"line":77,"column":36},"end":{"line":77,"column":59}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":22},"end":{"line":91,"column":29}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":116,"column":2}},"2":{"start":{"line":48,"column":8},"end":{"line":48,"column":49}},"3":{"start":{"line":49,"column":8},"end":{"line":49,"column":79}},"4":{"start":{"line":50,"column":8},"end":{"line":50,"column":86}},"5":{"start":{"line":51,"column":8},"end":{"line":51,"column":58}},"6":{"start":{"line":52,"column":8},"end":{"line":57,"column":19}},"7":{"start":{"line":54,"column":16},"end":{"line":54,"column":33}},"8":{"start":{"line":56,"column":16},"end":{"line":56,"column":27}},"9":{"start":{"line":59,"column":8},"end":{"line":88,"column":10}},"10":{"start":{"line":61,"column":16},"end":{"line":69,"column":18}},"11":{"start":{"line":72,"column":16},"end":{"line":72,"column":44}},"12":{"start":{"line":75,"column":16},"end":{"line":75,"column":42}},"13":{"start":{"line":78,"column":16},"end":{"line":78,"column":43}},"14":{"start":{"line":90,"column":8},"end":{"line":114,"column":10}},"15":{"start":{"line":92,"column":16},"end":{"line":92,"column":39}},"16":{"start":{"line":93,"column":16},"end":{"line":93,"column":43}},"17":{"start":{"line":95,"column":16},"end":{"line":95,"column":56}},"18":{"start":{"line":96,"column":16},"end":{"line":96,"column":55}},"19":{"start":{"line":98,"column":16},"end":{"line":100,"column":17}},"20":{"start":{"line":99,"column":20},"end":{"line":99,"column":27}},"21":{"start":{"line":102,"column":16},"end":{"line":102,"column":77}},"22":{"start":{"line":104,"column":16},"end":{"line":112,"column":17}},"23":{"start":{"line":105,"column":20},"end":{"line":111,"column":23}}},"branchMap":{"1":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":24},"end":{"line":48,"column":42}},{"start":{"line":48,"column":46},"end":{"line":48,"column":48}}]},"2":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":63},"end":{"line":49,"column":74}},{"start":{"line":49,"column":77},"end":{"line":49,"column":78}}]},"3":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":63},"end":{"line":50,"column":74}},{"start":{"line":50,"column":77},"end":{"line":50,"column":85}}]},"4":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":49},"end":{"line":52,"column":67}},{"start":{"line":52,"column":70},"end":{"line":52,"column":72}}]},"5":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":30},"end":{"line":60,"column":40}},{"start":{"line":60,"column":44},"end":{"line":70,"column":13}}]},"6":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":23},"end":{"line":61,"column":39}},{"start":{"line":64,"column":21},"end":{"line":64,"column":50}},{"start":{"line":64,"column":54},"end":{"line":64,"column":99}},{"start":{"line":67,"column":20},"end":{"line":67,"column":53}},{"start":{"line":67,"column":57},"end":{"line":67,"column":87}},{"start":{"line":68,"column":20},"end":{"line":68,"column":65}},{"start":{"line":68,"column":69},"end":{"line":68,"column":126}}]},"7":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":22},"end":{"line":77,"column":32}},{"start":{"line":77,"column":36},"end":{"line":79,"column":13}}]},"8":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":16}},{"start":{"line":98,"column":16},"end":{"line":98,"column":16}}]},"9":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":20},"end":{"line":98,"column":40}},{"start":{"line":98,"column":44},"end":{"line":98,"column":60}}]},"10":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":22},"end":{"line":98,"column":29}},{"start":{"line":98,"column":33},"end":{"line":98,"column":39}}]},"11":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":16},"end":{"line":104,"column":16}},{"start":{"line":104,"column":16},"end":{"line":104,"column":16}}]},"12":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":20},"end":{"line":104,"column":37}},{"start":{"line":104,"column":42},"end":{"line":104,"column":68}},{"start":{"line":104,"column":72},"end":{"line":104,"column":103}}]},"13":{"line":107,"type":"cond-expr","locations":[{"start":{"line":108,"column":30},"end":{"line":108,"column":84}},{"start":{"line":109,"column":30},"end":{"line":109,"column":83}}]}},"code":["/**"," * @fileoverview Rule that warns when identifier names are shorter or longer"," * than the values provided in configuration."," * @author Burak Yigit Kaya aka BYK"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce minimum and maximum identifier lengths\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    min: {","                        type: \"number\"","                    },","                    max: {","                        type: \"number\"","                    },","                    exceptions: {","                        type: \"array\",","                        uniqueItems: true,","                        items: {","                            type: \"string\"","                        }","                    },","                    properties: {","                        enum: [\"always\", \"never\"]","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0] || {};","        const minLength = typeof options.min !== \"undefined\" ? options.min : 2;","        const maxLength = typeof options.max !== \"undefined\" ? options.max : Infinity;","        const properties = options.properties !== \"never\";","        const exceptions = (options.exceptions ? options.exceptions : [])","            .reduce((obj, item) => {","                obj[item] = true;","","                return obj;","            }, {});","","        const SUPPORTED_EXPRESSIONS = {","            MemberExpression: properties && function(parent) {","                return !parent.computed && (","","                    // regular property assignment","                    (parent.parent.left === parent && parent.parent.type === \"AssignmentExpression\" ||","","                    // or the last identifier in an ObjectPattern destructuring","                    parent.parent.type === \"Property\" && parent.parent.value === parent &&","                    parent.parent.parent.type === \"ObjectPattern\" && parent.parent.parent.parent.left === parent.parent.parent)","                );","            },","            AssignmentPattern(parent, node) {","                return parent.left === node;","            },","            VariableDeclarator(parent, node) {","                return parent.id === node;","            },","            Property: properties && function(parent, node) {","                return parent.key === node;","            },","            ImportDefaultSpecifier: true,","            RestElement: true,","            FunctionExpression: true,","            ArrowFunctionExpression: true,","            ClassDeclaration: true,","            FunctionDeclaration: true,","            MethodDefinition: true,","            CatchClause: true","        };","","        return {","            Identifier(node) {","                const name = node.name;","                const parent = node.parent;","","                const isShort = name.length < minLength;","                const isLong = name.length > maxLength;","","                if (!(isShort || isLong) || exceptions[name]) {","                    return;  // Nothing to report","                }","","                const isValidExpression = SUPPORTED_EXPRESSIONS[parent.type];","","                if (isValidExpression && (isValidExpression === true || isValidExpression(parent, node))) {","                    context.report({","                        node,","                        message: isShort","                            ? \"Identifier name '{{name}}' is too short (< {{min}}).\"","                            : \"Identifier name '{{name}}' is too long (> {{max}}).\",","                        data: { name, min: minLength, max: maxLength }","                    });","                }","            }","        };","    }","};",""],"l":{"13":1,"48":0,"49":0,"50":0,"51":0,"52":0,"54":0,"56":0,"59":0,"61":0,"72":0,"75":0,"78":0,"90":0,"92":0,"93":0,"95":0,"96":0,"98":0,"99":0,"102":0,"104":0,"105":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/id-match.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/id-match.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":20}}},"2":{"name":"isInvalid","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":33}}},"3":{"name":"shouldReport","line":65,"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":53}}},"4":{"name":"report","line":77,"loc":{"start":{"line":77,"column":8},"end":{"line":77,"column":30}}},"5":{"name":"(anonymous_5)","line":86,"loc":{"start":{"line":86,"column":22},"end":{"line":86,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":140,"column":2}},"2":{"start":{"line":41,"column":8},"end":{"line":42,"column":41}},"3":{"start":{"line":44,"column":8},"end":{"line":46,"column":58}},"4":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"5":{"start":{"line":55,"column":12},"end":{"line":55,"column":38}},"6":{"start":{"line":65,"column":8},"end":{"line":69,"column":9}},"7":{"start":{"line":66,"column":12},"end":{"line":68,"column":32}},"8":{"start":{"line":77,"column":8},"end":{"line":82,"column":9}},"9":{"start":{"line":78,"column":12},"end":{"line":81,"column":17}},"10":{"start":{"line":84,"column":8},"end":{"line":137,"column":10}},"11":{"start":{"line":87,"column":16},"end":{"line":89,"column":100}},"12":{"start":{"line":91,"column":16},"end":{"line":134,"column":17}},"13":{"start":{"line":93,"column":20},"end":{"line":95,"column":21}},"14":{"start":{"line":94,"column":24},"end":{"line":94,"column":31}},"15":{"start":{"line":98,"column":20},"end":{"line":112,"column":21}},"16":{"start":{"line":100,"column":24},"end":{"line":102,"column":25}},"17":{"start":{"line":101,"column":28},"end":{"line":101,"column":41}},"18":{"start":{"line":105,"column":27},"end":{"line":112,"column":21}},"19":{"start":{"line":109,"column":24},"end":{"line":111,"column":25}},"20":{"start":{"line":110,"column":28},"end":{"line":110,"column":41}},"21":{"start":{"line":114,"column":23},"end":{"line":134,"column":17}},"22":{"start":{"line":116,"column":20},"end":{"line":118,"column":21}},"23":{"start":{"line":117,"column":24},"end":{"line":117,"column":31}},"24":{"start":{"line":120,"column":20},"end":{"line":122,"column":21}},"25":{"start":{"line":121,"column":24},"end":{"line":121,"column":37}},"26":{"start":{"line":125,"column":20},"end":{"line":125,"column":138}},"27":{"start":{"line":127,"column":20},"end":{"line":129,"column":21}},"28":{"start":{"line":128,"column":24},"end":{"line":128,"column":31}},"29":{"start":{"line":131,"column":20},"end":{"line":133,"column":21}},"30":{"start":{"line":132,"column":24},"end":{"line":132,"column":37}}},"branchMap":{"1":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":24},"end":{"line":41,"column":42}},{"start":{"line":41,"column":46},"end":{"line":41,"column":52}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":24},"end":{"line":44,"column":42}},{"start":{"line":44,"column":46},"end":{"line":44,"column":48}}]},"3":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":19},"end":{"line":66,"column":60}},{"start":{"line":67,"column":16},"end":{"line":67,"column":56}},{"start":{"line":68,"column":16},"end":{"line":68,"column":31}}]},"4":{"line":89,"type":"cond-expr","locations":[{"start":{"line":89,"column":77},"end":{"line":89,"column":90}},{"start":{"line":89,"column":93},"end":{"line":89,"column":99}}]},"5":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":16},"end":{"line":91,"column":16}},{"start":{"line":91,"column":16},"end":{"line":91,"column":16}}]},"6":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":20},"end":{"line":93,"column":20}},{"start":{"line":93,"column":20},"end":{"line":93,"column":20}}]},"7":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":20},"end":{"line":98,"column":20}},{"start":{"line":98,"column":20},"end":{"line":98,"column":20}}]},"8":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":24},"end":{"line":98,"column":59}},{"start":{"line":99,"column":24},"end":{"line":99,"column":51}}]},"9":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":24},"end":{"line":100,"column":24}},{"start":{"line":100,"column":24},"end":{"line":100,"column":24}}]},"10":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":27},"end":{"line":105,"column":27}},{"start":{"line":105,"column":27},"end":{"line":105,"column":27}}]},"11":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":31},"end":{"line":105,"column":78}},{"start":{"line":106,"column":25},"end":{"line":106,"column":74}},{"start":{"line":107,"column":24},"end":{"line":107,"column":72}},{"start":{"line":108,"column":24},"end":{"line":108,"column":67}}]},"12":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":24},"end":{"line":109,"column":24}},{"start":{"line":109,"column":24},"end":{"line":109,"column":24}}]},"13":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":23},"end":{"line":114,"column":23}},{"start":{"line":114,"column":23},"end":{"line":114,"column":23}}]},"14":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":20},"end":{"line":116,"column":20}},{"start":{"line":116,"column":20},"end":{"line":116,"column":20}}]},"15":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":24},"end":{"line":116,"column":35}},{"start":{"line":116,"column":39},"end":{"line":116,"column":63}}]},"16":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":20},"end":{"line":120,"column":20}},{"start":{"line":120,"column":20},"end":{"line":120,"column":20}}]},"17":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":42},"end":{"line":125,"column":88}},{"start":{"line":125,"column":92},"end":{"line":125,"column":137}}]},"18":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":20},"end":{"line":127,"column":20}},{"start":{"line":127,"column":20},"end":{"line":127,"column":20}}]},"19":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":24},"end":{"line":127,"column":40}},{"start":{"line":127,"column":44},"end":{"line":127,"column":58}}]},"20":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":20},"end":{"line":131,"column":20}},{"start":{"line":131,"column":20},"end":{"line":131,"column":20}}]}},"code":["/**"," * @fileoverview Rule to flag non-matching identifiers"," * @author Matthieu Larcher"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require identifiers to match a specified regular expression\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"string\"","            },","            {","                type: \"object\",","                properties: {","                    properties: {","                        type: \"boolean\"","                    }","                }","            }","        ]","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        const pattern = context.options[0] || \"^.+$\",","            regexp = new RegExp(pattern);","","        const options = context.options[1] || {},","            properties = !!options.properties,","            onlyDeclarations = !!options.onlyDeclarations;","","        /**","         * Checks if a string matches the provided pattern","         * @param {string} name The string to check.","         * @returns {boolean} if the string is a match","         * @private","         */","        function isInvalid(name) {","            return !regexp.test(name);","        }","","        /**","         * Verifies if we should report an error or not based on the effective","         * parent node and the identifier name.","         * @param {ASTNode} effectiveParent The effective parent node of the node to be reported","         * @param {string} name The identifier name of the identifier node","         * @returns {boolean} whether an error should be reported or not","         */","        function shouldReport(effectiveParent, name) {","            return effectiveParent.type !== \"CallExpression\" &&","                effectiveParent.type !== \"NewExpression\" &&","                isInvalid(name);","        }","","        /**","         * Reports an AST node as a rule violation.","         * @param {ASTNode} node The node to report.","         * @returns {void}","         * @private","         */","        function report(node) {","            context.report({ node, message: \"Identifier '{{name}}' does not match the pattern '{{pattern}}'.\", data: {","                name: node.name,","                pattern","            } });","        }","","        return {","","            Identifier(node) {","                const name = node.name,","                    parent = node.parent,","                    effectiveParent = (parent.type === \"MemberExpression\") ? parent.parent : parent;","","                if (parent.type === \"MemberExpression\") {","","                    if (!properties) {","                        return;","                    }","","                    // Always check object names","                    if (parent.object.type === \"Identifier\" &&","                        parent.object.name === name) {","                        if (isInvalid(name)) {","                            report(node);","                        }","","                    // Report AssignmentExpressions only if they are the left side of the assignment","                    } else if (effectiveParent.type === \"AssignmentExpression\" &&","                        (effectiveParent.right.type !== \"MemberExpression\" ||","                        effectiveParent.left.type === \"MemberExpression\" &&","                        effectiveParent.left.property.name === name)) {","                        if (isInvalid(name)) {","                            report(node);","                        }","                    }","","                } else if (parent.type === \"Property\") {","","                    if (!properties || parent.key.name !== name) {","                        return;","                    }","","                    if (shouldReport(effectiveParent, name)) {","                        report(node);","                    }","","                } else {","                    const isDeclaration = effectiveParent.type === \"FunctionDeclaration\" || effectiveParent.type === \"VariableDeclarator\";","","                    if (onlyDeclarations && !isDeclaration) {","                        return;","                    }","","                    if (shouldReport(effectiveParent, name)) {","                        report(node);","                    }","                }","            }","","        };","","    }","};",""],"l":{"12":1,"41":0,"44":0,"54":1,"55":0,"65":1,"66":0,"77":1,"78":0,"84":0,"87":0,"91":0,"93":0,"94":0,"98":0,"100":0,"101":0,"105":0,"109":0,"110":0,"114":0,"116":0,"117":0,"120":0,"121":0,"125":0,"127":0,"128":0,"131":0,"132":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/indent.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/indent.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":0,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":1,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":1,"119":0,"120":1,"121":0,"122":1,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":1,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":1,"163":0,"164":0,"165":1,"166":0,"167":0,"168":0,"169":1,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":1,"215":0,"216":1,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":1,"240":0,"241":0,"242":0,"243":0,"244":0,"245":1,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":1,"258":0,"259":0,"260":1,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":1,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0,0],"53":[0,0],"54":[0,0,0],"55":[0,0],"56":[0,0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0,0,0,0,0,0,0,0],"62":[0,0,0,0],"63":[0,0],"64":[0,0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0,0,0,0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0,0,0,0,0],"113":[0,0],"114":[0,0],"115":[0,0,0,0],"116":[0,0],"117":[0,0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0,0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0],"154":[0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0],"159":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},"fnMap":{"1":{"name":"(anonymous_1)","line":167,"loc":{"start":{"line":167,"column":10},"end":{"line":167,"column":20}}},"2":{"name":"createErrorMessage","line":263,"loc":{"start":{"line":263,"column":8},"end":{"line":263,"column":78}}},"3":{"name":"report","line":296,"loc":{"start":{"line":296,"column":8},"end":{"line":296,"column":86}}},"4":{"name":"getNodeIndent","line":326,"loc":{"start":{"line":326,"column":8},"end":{"line":326,"column":49}}},"5":{"name":"isNodeFirstInLine","line":347,"loc":{"start":{"line":347,"column":8},"end":{"line":347,"column":56}}},"6":{"name":"checkNodeIndent","line":362,"loc":{"start":{"line":362,"column":8},"end":{"line":362,"column":53}}},"7":{"name":"checkNodesIndent","line":410,"loc":{"start":{"line":410,"column":8},"end":{"line":410,"column":49}}},"8":{"name":"checkLastNodeLineIndent","line":420,"loc":{"start":{"line":420,"column":8},"end":{"line":420,"column":63}}},"9":{"name":"checkLastReturnStatementLineIndent","line":443,"loc":{"start":{"line":443,"column":8},"end":{"line":443,"column":75}}},"10":{"name":"checkFirstNodeLineIndent","line":476,"loc":{"start":{"line":476,"column":8},"end":{"line":476,"column":65}}},"11":{"name":"getParentNodeByType","line":498,"loc":{"start":{"line":498,"column":8},"end":{"line":498,"column":61}}},"12":{"name":"getVariableDeclaratorNode","line":518,"loc":{"start":{"line":518,"column":8},"end":{"line":518,"column":49}}},"13":{"name":"isNodeInVarOnTop","line":529,"loc":{"start":{"line":529,"column":8},"end":{"line":529,"column":49}}},"14":{"name":"isArgBeforeCalleeNodeMultiline","line":541,"loc":{"start":{"line":541,"column":8},"end":{"line":541,"column":54}}},"15":{"name":"isOuterIIFE","line":556,"loc":{"start":{"line":556,"column":8},"end":{"line":556,"column":35}}},"16":{"name":"checkIndentInFunctionBlock","line":599,"loc":{"start":{"line":599,"column":8},"end":{"line":599,"column":50}}},"17":{"name":"isSingleLineNode","line":678,"loc":{"start":{"line":678,"column":8},"end":{"line":678,"column":40}}},"18":{"name":"isFirstArrayElementOnSameLine","line":692,"loc":{"start":{"line":692,"column":8},"end":{"line":692,"column":53}}},"19":{"name":"checkIndentInArrayOrObjectBlock","line":705,"loc":{"start":{"line":705,"column":8},"end":{"line":705,"column":55}}},"20":{"name":"isNodeBodyBlock","line":805,"loc":{"start":{"line":805,"column":8},"end":{"line":805,"column":39}}},"21":{"name":"blockIndentationCheck","line":815,"loc":{"start":{"line":815,"column":8},"end":{"line":815,"column":45}}},"22":{"name":"filterOutSameLineVars","line":873,"loc":{"start":{"line":873,"column":8},"end":{"line":873,"column":45}}},"23":{"name":"checkIndentInVariableDeclarations","line":891,"loc":{"start":{"line":891,"column":8},"end":{"line":891,"column":57}}},"24":{"name":"blockLessNodes","line":922,"loc":{"start":{"line":922,"column":8},"end":{"line":922,"column":38}}},"25":{"name":"expectedCaseIndent","line":934,"loc":{"start":{"line":934,"column":8},"end":{"line":934,"column":56}}},"26":{"name":"isWrappedInParenthesis","line":961,"loc":{"start":{"line":961,"column":8},"end":{"line":961,"column":46}}},"27":{"name":"(anonymous_27)","line":971,"loc":{"start":{"line":971,"column":19},"end":{"line":971,"column":26}}},"28":{"name":"(anonymous_28)","line":993,"loc":{"start":{"line":993,"column":23},"end":{"line":993,"column":30}}},"29":{"name":"(anonymous_29)","line":999,"loc":{"start":{"line":999,"column":31},"end":{"line":999,"column":38}}},"30":{"name":"(anonymous_30)","line":1005,"loc":{"start":{"line":1005,"column":28},"end":{"line":1005,"column":35}}},"31":{"name":"(anonymous_31)","line":1009,"loc":{"start":{"line":1009,"column":27},"end":{"line":1009,"column":34}}},"32":{"name":"(anonymous_32)","line":1013,"loc":{"start":{"line":1013,"column":28},"end":{"line":1013,"column":35}}},"33":{"name":"(anonymous_33)","line":1048,"loc":{"start":{"line":1048,"column":27},"end":{"line":1048,"column":34}}},"34":{"name":"(anonymous_34)","line":1060,"loc":{"start":{"line":1060,"column":22},"end":{"line":1060,"column":29}}},"35":{"name":"(anonymous_35)","line":1071,"loc":{"start":{"line":1071,"column":31},"end":{"line":1071,"column":38}}},"36":{"name":"(anonymous_36)","line":1082,"loc":{"start":{"line":1082,"column":30},"end":{"line":1082,"column":37}}},"37":{"name":"(anonymous_37)","line":1093,"loc":{"start":{"line":1093,"column":27},"end":{"line":1093,"column":34}}},"38":{"name":"(anonymous_38)","line":1108,"loc":{"start":{"line":1108,"column":26},"end":{"line":1108,"column":33}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":15,"column":41}},"2":{"start":{"line":21,"column":0},"end":{"line":1122,"column":2}},"3":{"start":{"line":168,"column":8},"end":{"line":168,"column":42}},"4":{"start":{"line":169,"column":8},"end":{"line":169,"column":46}},"5":{"start":{"line":170,"column":8},"end":{"line":170,"column":47}},"6":{"start":{"line":172,"column":8},"end":{"line":172,"column":33}},"7":{"start":{"line":173,"column":8},"end":{"line":173,"column":27}},"8":{"start":{"line":174,"column":8},"end":{"line":195,"column":10}},"9":{"start":{"line":197,"column":8},"end":{"line":197,"column":51}},"10":{"start":{"line":199,"column":8},"end":{"line":252,"column":9}},"11":{"start":{"line":200,"column":12},"end":{"line":206,"column":13}},"12":{"start":{"line":201,"column":16},"end":{"line":201,"column":31}},"13":{"start":{"line":202,"column":16},"end":{"line":202,"column":35}},"14":{"start":{"line":203,"column":90},"end":{"line":206,"column":13}},"15":{"start":{"line":204,"column":16},"end":{"line":204,"column":48}},"16":{"start":{"line":205,"column":16},"end":{"line":205,"column":37}},"17":{"start":{"line":208,"column":12},"end":{"line":251,"column":13}},"18":{"start":{"line":209,"column":16},"end":{"line":209,"column":48}},"19":{"start":{"line":211,"column":16},"end":{"line":211,"column":58}},"20":{"start":{"line":212,"column":16},"end":{"line":212,"column":72}},"21":{"start":{"line":214,"column":16},"end":{"line":222,"column":17}},"22":{"start":{"line":215,"column":20},"end":{"line":219,"column":22}},"23":{"start":{"line":220,"column":23},"end":{"line":222,"column":17}},"24":{"start":{"line":221,"column":20},"end":{"line":221,"column":87}},"25":{"start":{"line":224,"column":16},"end":{"line":226,"column":17}},"26":{"start":{"line":225,"column":20},"end":{"line":225,"column":63}},"27":{"start":{"line":228,"column":16},"end":{"line":230,"column":17}},"28":{"start":{"line":229,"column":20},"end":{"line":229,"column":69}},"29":{"start":{"line":232,"column":16},"end":{"line":234,"column":17}},"30":{"start":{"line":233,"column":20},"end":{"line":233,"column":89}},"31":{"start":{"line":236,"column":16},"end":{"line":238,"column":17}},"32":{"start":{"line":237,"column":20},"end":{"line":237,"column":87}},"33":{"start":{"line":240,"column":16},"end":{"line":242,"column":17}},"34":{"start":{"line":241,"column":20},"end":{"line":241,"column":79}},"35":{"start":{"line":244,"column":16},"end":{"line":246,"column":17}},"36":{"start":{"line":245,"column":20},"end":{"line":245,"column":67}},"37":{"start":{"line":248,"column":16},"end":{"line":250,"column":17}},"38":{"start":{"line":249,"column":20},"end":{"line":249,"column":69}},"39":{"start":{"line":254,"column":8},"end":{"line":254,"column":35}},"40":{"start":{"line":263,"column":8},"end":{"line":283,"column":9}},"41":{"start":{"line":264,"column":12},"end":{"line":264,"column":106}},"42":{"start":{"line":265,"column":12},"end":{"line":265,"column":76}},"43":{"start":{"line":266,"column":12},"end":{"line":266,"column":70}},"44":{"start":{"line":267,"column":12},"end":{"line":267,"column":31}},"45":{"start":{"line":269,"column":12},"end":{"line":280,"column":13}},"46":{"start":{"line":270,"column":16},"end":{"line":270,"column":105}},"47":{"start":{"line":271,"column":19},"end":{"line":280,"column":13}},"48":{"start":{"line":275,"column":16},"end":{"line":275,"column":110}},"49":{"start":{"line":276,"column":19},"end":{"line":280,"column":13}},"50":{"start":{"line":277,"column":16},"end":{"line":277,"column":102}},"51":{"start":{"line":279,"column":16},"end":{"line":279,"column":37}},"52":{"start":{"line":282,"column":12},"end":{"line":282,"column":95}},"53":{"start":{"line":296,"column":8},"end":{"line":315,"column":9}},"54":{"start":{"line":297,"column":12},"end":{"line":301,"column":13}},"55":{"start":{"line":300,"column":16},"end":{"line":300,"column":23}},"56":{"start":{"line":303,"column":12},"end":{"line":303,"column":87}},"57":{"start":{"line":305,"column":12},"end":{"line":307,"column":125}},"58":{"start":{"line":309,"column":12},"end":{"line":314,"column":15}},"59":{"start":{"line":313,"column":30},"end":{"line":313,"column":78}},"60":{"start":{"line":326,"column":8},"end":{"line":339,"column":9}},"61":{"start":{"line":327,"column":12},"end":{"line":327,"column":102}},"62":{"start":{"line":328,"column":12},"end":{"line":328,"column":99}},"63":{"start":{"line":329,"column":12},"end":{"line":329,"column":129}},"64":{"start":{"line":329,"column":97},"end":{"line":329,"column":126}},"65":{"start":{"line":330,"column":12},"end":{"line":330,"column":75}},"66":{"start":{"line":330,"column":54},"end":{"line":330,"column":66}},"67":{"start":{"line":331,"column":12},"end":{"line":331,"column":74}},"68":{"start":{"line":331,"column":52},"end":{"line":331,"column":65}},"69":{"start":{"line":333,"column":12},"end":{"line":338,"column":14}},"70":{"start":{"line":347,"column":8},"end":{"line":353,"column":9}},"71":{"start":{"line":348,"column":12},"end":{"line":350,"column":68}},"72":{"start":{"line":352,"column":12},"end":{"line":352,"column":41}},"73":{"start":{"line":362,"column":8},"end":{"line":401,"column":9}},"74":{"start":{"line":363,"column":12},"end":{"line":363,"column":60}},"75":{"start":{"line":365,"column":12},"end":{"line":372,"column":13}},"76":{"start":{"line":371,"column":16},"end":{"line":371,"column":81}},"77":{"start":{"line":374,"column":12},"end":{"line":382,"column":13}},"78":{"start":{"line":375,"column":16},"end":{"line":375,"column":76}},"79":{"start":{"line":377,"column":16},"end":{"line":377,"column":57}},"80":{"start":{"line":379,"column":16},"end":{"line":381,"column":17}},"81":{"start":{"line":380,"column":20},"end":{"line":380,"column":66}},"82":{"start":{"line":384,"column":12},"end":{"line":388,"column":13}},"83":{"start":{"line":385,"column":16},"end":{"line":385,"column":74}},"84":{"start":{"line":387,"column":16},"end":{"line":387,"column":58}},"85":{"start":{"line":390,"column":12},"end":{"line":394,"column":13}},"86":{"start":{"line":391,"column":16},"end":{"line":391,"column":79}},"87":{"start":{"line":393,"column":16},"end":{"line":393,"column":60}},"88":{"start":{"line":396,"column":12},"end":{"line":400,"column":13}},"89":{"start":{"line":397,"column":16},"end":{"line":397,"column":71}},"90":{"start":{"line":399,"column":16},"end":{"line":399,"column":58}},"91":{"start":{"line":410,"column":8},"end":{"line":412,"column":9}},"92":{"start":{"line":411,"column":12},"end":{"line":411,"column":65}},"93":{"start":{"line":411,"column":34},"end":{"line":411,"column":63}},"94":{"start":{"line":420,"column":8},"end":{"line":434,"column":9}},"95":{"start":{"line":421,"column":12},"end":{"line":421,"column":60}},"96":{"start":{"line":422,"column":12},"end":{"line":422,"column":61}},"97":{"start":{"line":424,"column":12},"end":{"line":433,"column":13}},"98":{"start":{"line":425,"column":16},"end":{"line":432,"column":18}},"99":{"start":{"line":443,"column":8},"end":{"line":468,"column":9}},"100":{"start":{"line":447,"column":12},"end":{"line":447,"column":90}},"101":{"start":{"line":448,"column":12},"end":{"line":448,"column":120}},"102":{"start":{"line":450,"column":12},"end":{"line":454,"column":13}},"103":{"start":{"line":453,"column":16},"end":{"line":453,"column":23}},"104":{"start":{"line":456,"column":12},"end":{"line":456,"column":61}},"105":{"start":{"line":458,"column":12},"end":{"line":467,"column":13}},"106":{"start":{"line":459,"column":16},"end":{"line":466,"column":18}},"107":{"start":{"line":476,"column":8},"end":{"line":488,"column":9}},"108":{"start":{"line":477,"column":12},"end":{"line":477,"column":59}},"109":{"start":{"line":479,"column":12},"end":{"line":487,"column":13}},"110":{"start":{"line":480,"column":16},"end":{"line":486,"column":18}},"111":{"start":{"line":498,"column":8},"end":{"line":510,"column":9}},"112":{"start":{"line":499,"column":12},"end":{"line":499,"column":37}},"113":{"start":{"line":501,"column":12},"end":{"line":503,"column":13}},"114":{"start":{"line":502,"column":16},"end":{"line":502,"column":41}},"115":{"start":{"line":505,"column":12},"end":{"line":507,"column":13}},"116":{"start":{"line":506,"column":16},"end":{"line":506,"column":39}},"117":{"start":{"line":509,"column":12},"end":{"line":509,"column":56}},"118":{"start":{"line":518,"column":8},"end":{"line":520,"column":9}},"119":{"start":{"line":519,"column":12},"end":{"line":519,"column":67}},"120":{"start":{"line":529,"column":8},"end":{"line":533,"column":9}},"121":{"start":{"line":530,"column":12},"end":{"line":532,"column":55}},"122":{"start":{"line":541,"column":8},"end":{"line":549,"column":9}},"123":{"start":{"line":542,"column":12},"end":{"line":542,"column":39}},"124":{"start":{"line":544,"column":12},"end":{"line":546,"column":13}},"125":{"start":{"line":545,"column":16},"end":{"line":545,"column":93}},"126":{"start":{"line":548,"column":12},"end":{"line":548,"column":25}},"127":{"start":{"line":556,"column":8},"end":{"line":592,"column":9}},"128":{"start":{"line":557,"column":12},"end":{"line":557,"column":39}},"129":{"start":{"line":558,"column":12},"end":{"line":558,"column":37}},"130":{"start":{"line":563,"column":12},"end":{"line":568,"column":13}},"131":{"start":{"line":567,"column":16},"end":{"line":567,"column":29}},"132":{"start":{"line":573,"column":12},"end":{"line":585,"column":13}},"133":{"start":{"line":584,"column":16},"end":{"line":584,"column":35}},"134":{"start":{"line":587,"column":12},"end":{"line":591,"column":14}},"135":{"start":{"line":599,"column":8},"end":{"line":670,"column":9}},"136":{"start":{"line":614,"column":12},"end":{"line":614,"column":43}},"137":{"start":{"line":615,"column":12},"end":{"line":615,"column":23}},"138":{"start":{"line":617,"column":12},"end":{"line":627,"column":13}},"139":{"start":{"line":622,"column":16},"end":{"line":622,"column":74}},"140":{"start":{"line":626,"column":16},"end":{"line":626,"column":60}},"141":{"start":{"line":629,"column":12},"end":{"line":643,"column":13}},"142":{"start":{"line":630,"column":16},"end":{"line":630,"column":55}},"143":{"start":{"line":632,"column":16},"end":{"line":642,"column":17}},"144":{"start":{"line":633,"column":20},"end":{"line":635,"column":21}},"145":{"start":{"line":634,"column":24},"end":{"line":634,"column":70}},"146":{"start":{"line":637,"column":20},"end":{"line":641,"column":21}},"147":{"start":{"line":640,"column":24},"end":{"line":640,"column":70}},"148":{"start":{"line":647,"column":12},"end":{"line":647,"column":44}},"149":{"start":{"line":649,"column":12},"end":{"line":655,"column":13}},"150":{"start":{"line":650,"column":16},"end":{"line":650,"column":68}},"151":{"start":{"line":651,"column":19},"end":{"line":655,"column":13}},"152":{"start":{"line":652,"column":16},"end":{"line":652,"column":78}},"153":{"start":{"line":653,"column":19},"end":{"line":655,"column":13}},"154":{"start":{"line":654,"column":16},"end":{"line":654,"column":79}},"155":{"start":{"line":656,"column":12},"end":{"line":656,"column":37}},"156":{"start":{"line":659,"column":12},"end":{"line":659,"column":66}},"157":{"start":{"line":661,"column":12},"end":{"line":663,"column":13}},"158":{"start":{"line":662,"column":16},"end":{"line":662,"column":93}},"159":{"start":{"line":665,"column":12},"end":{"line":667,"column":13}},"160":{"start":{"line":666,"column":16},"end":{"line":666,"column":52}},"161":{"start":{"line":669,"column":12},"end":{"line":669,"column":67}},"162":{"start":{"line":678,"column":8},"end":{"line":684,"column":9}},"163":{"start":{"line":679,"column":12},"end":{"line":681,"column":49}},"164":{"start":{"line":683,"column":12},"end":{"line":683,"column":41}},"165":{"start":{"line":692,"column":8},"end":{"line":698,"column":9}},"166":{"start":{"line":693,"column":12},"end":{"line":695,"column":13}},"167":{"start":{"line":694,"column":16},"end":{"line":694,"column":127}},"168":{"start":{"line":696,"column":12},"end":{"line":696,"column":25}},"169":{"start":{"line":705,"column":8},"end":{"line":798,"column":9}},"170":{"start":{"line":708,"column":12},"end":{"line":710,"column":13}},"171":{"start":{"line":709,"column":16},"end":{"line":709,"column":23}},"172":{"start":{"line":712,"column":12},"end":{"line":712,"column":95}},"173":{"start":{"line":715,"column":12},"end":{"line":715,"column":62}},"174":{"start":{"line":715,"column":47},"end":{"line":715,"column":60}},"175":{"start":{"line":717,"column":12},"end":{"line":717,"column":27}},"176":{"start":{"line":718,"column":12},"end":{"line":718,"column":31}},"177":{"start":{"line":719,"column":12},"end":{"line":719,"column":66}},"178":{"start":{"line":722,"column":12},"end":{"line":771,"column":13}},"179":{"start":{"line":723,"column":16},"end":{"line":723,"column":43}},"180":{"start":{"line":725,"column":16},"end":{"line":725,"column":60}},"181":{"start":{"line":726,"column":16},"end":{"line":766,"column":17}},"182":{"start":{"line":727,"column":20},"end":{"line":763,"column":21}},"183":{"start":{"line":728,"column":24},"end":{"line":762,"column":25}},"184":{"start":{"line":729,"column":28},"end":{"line":729,"column":123}},"185":{"start":{"line":730,"column":31},"end":{"line":762,"column":25}},"186":{"start":{"line":731,"column":28},"end":{"line":731,"column":139}},"187":{"start":{"line":733,"column":28},"end":{"line":749,"column":29}},"188":{"start":{"line":745,"column":35},"end":{"line":749,"column":29}},"189":{"start":{"line":746,"column":32},"end":{"line":746,"column":80}},"190":{"start":{"line":748,"column":32},"end":{"line":748,"column":80}},"191":{"start":{"line":750,"column":31},"end":{"line":762,"column":25}},"192":{"start":{"line":751,"column":28},"end":{"line":759,"column":29}},"193":{"start":{"line":752,"column":32},"end":{"line":752,"column":92}},"194":{"start":{"line":753,"column":35},"end":{"line":759,"column":29}},"195":{"start":{"line":754,"column":32},"end":{"line":756,"column":33}},"196":{"start":{"line":755,"column":36},"end":{"line":755,"column":86}},"197":{"start":{"line":758,"column":32},"end":{"line":758,"column":57}},"198":{"start":{"line":760,"column":31},"end":{"line":762,"column":25}},"199":{"start":{"line":761,"column":28},"end":{"line":761,"column":53}},"200":{"start":{"line":764,"column":23},"end":{"line":766,"column":17}},"201":{"start":{"line":765,"column":20},"end":{"line":765,"column":57}},"202":{"start":{"line":768,"column":16},"end":{"line":768,"column":59}},"203":{"start":{"line":770,"column":16},"end":{"line":770,"column":58}},"204":{"start":{"line":773,"column":12},"end":{"line":777,"column":13}},"205":{"start":{"line":774,"column":16},"end":{"line":774,"column":84}},"206":{"start":{"line":776,"column":16},"end":{"line":776,"column":78}},"207":{"start":{"line":783,"column":12},"end":{"line":785,"column":13}},"208":{"start":{"line":784,"column":16},"end":{"line":784,"column":101}},"209":{"start":{"line":787,"column":12},"end":{"line":787,"column":55}},"210":{"start":{"line":789,"column":12},"end":{"line":795,"column":13}},"211":{"start":{"line":792,"column":16},"end":{"line":794,"column":17}},"212":{"start":{"line":793,"column":20},"end":{"line":793,"column":27}},"213":{"start":{"line":797,"column":12},"end":{"line":797,"column":169}},"214":{"start":{"line":805,"column":8},"end":{"line":808,"column":9}},"215":{"start":{"line":806,"column":12},"end":{"line":807,"column":79}},"216":{"start":{"line":815,"column":8},"end":{"line":865,"column":9}},"217":{"start":{"line":818,"column":12},"end":{"line":820,"column":13}},"218":{"start":{"line":819,"column":16},"end":{"line":819,"column":23}},"219":{"start":{"line":822,"column":12},"end":{"line":829,"column":13}},"220":{"start":{"line":827,"column":16},"end":{"line":827,"column":49}},"221":{"start":{"line":828,"column":16},"end":{"line":828,"column":23}},"222":{"start":{"line":831,"column":12},"end":{"line":831,"column":23}},"223":{"start":{"line":832,"column":12},"end":{"line":832,"column":34}},"224":{"start":{"line":838,"column":12},"end":{"line":840,"column":14}},"225":{"start":{"line":842,"column":12},"end":{"line":848,"column":13}},"226":{"start":{"line":843,"column":16},"end":{"line":843,"column":61}},"227":{"start":{"line":844,"column":19},"end":{"line":848,"column":13}},"228":{"start":{"line":845,"column":16},"end":{"line":845,"column":68}},"229":{"start":{"line":847,"column":16},"end":{"line":847,"column":54}},"230":{"start":{"line":850,"column":12},"end":{"line":856,"column":13}},"231":{"start":{"line":851,"column":16},"end":{"line":851,"column":49}},"232":{"start":{"line":852,"column":19},"end":{"line":856,"column":13}},"233":{"start":{"line":853,"column":16},"end":{"line":853,"column":41}},"234":{"start":{"line":855,"column":16},"end":{"line":855,"column":43}},"235":{"start":{"line":858,"column":12},"end":{"line":860,"column":13}},"236":{"start":{"line":859,"column":16},"end":{"line":859,"column":68}},"237":{"start":{"line":862,"column":12},"end":{"line":864,"column":13}},"238":{"start":{"line":863,"column":16},"end":{"line":863,"column":54}},"239":{"start":{"line":873,"column":8},"end":{"line":884,"column":9}},"240":{"start":{"line":874,"column":12},"end":{"line":883,"column":19}},"241":{"start":{"line":875,"column":16},"end":{"line":875,"column":77}},"242":{"start":{"line":877,"column":16},"end":{"line":880,"column":17}},"243":{"start":{"line":879,"column":20},"end":{"line":879,"column":47}},"244":{"start":{"line":882,"column":16},"end":{"line":882,"column":39}},"245":{"start":{"line":891,"column":8},"end":{"line":914,"column":9}},"246":{"start":{"line":892,"column":12},"end":{"line":892,"column":57}},"247":{"start":{"line":893,"column":12},"end":{"line":893,"column":60}},"248":{"start":{"line":894,"column":12},"end":{"line":894,"column":62}},"249":{"start":{"line":896,"column":12},"end":{"line":896,"column":99}},"250":{"start":{"line":898,"column":12},"end":{"line":898,"column":55}},"251":{"start":{"line":901,"column":12},"end":{"line":903,"column":13}},"252":{"start":{"line":902,"column":16},"end":{"line":902,"column":23}},"253":{"start":{"line":905,"column":12},"end":{"line":905,"column":82}},"254":{"start":{"line":907,"column":12},"end":{"line":913,"column":13}},"255":{"start":{"line":910,"column":16},"end":{"line":910,"column":94}},"256":{"start":{"line":912,"column":16},"end":{"line":912,"column":75}},"257":{"start":{"line":922,"column":8},"end":{"line":926,"column":9}},"258":{"start":{"line":923,"column":12},"end":{"line":925,"column":13}},"259":{"start":{"line":924,"column":16},"end":{"line":924,"column":44}},"260":{"start":{"line":934,"column":8},"end":{"line":954,"column":9}},"261":{"start":{"line":935,"column":12},"end":{"line":935,"column":86}},"262":{"start":{"line":936,"column":12},"end":{"line":936,"column":27}},"263":{"start":{"line":938,"column":12},"end":{"line":940,"column":13}},"264":{"start":{"line":939,"column":16},"end":{"line":939,"column":66}},"265":{"start":{"line":941,"column":12},"end":{"line":943,"column":13}},"266":{"start":{"line":942,"column":16},"end":{"line":942,"column":66}},"267":{"start":{"line":945,"column":12},"end":{"line":949,"column":13}},"268":{"start":{"line":946,"column":16},"end":{"line":946,"column":42}},"269":{"start":{"line":948,"column":16},"end":{"line":948,"column":78}},"270":{"start":{"line":951,"column":12},"end":{"line":951,"column":68}},"271":{"start":{"line":952,"column":12},"end":{"line":952,"column":30}},"272":{"start":{"line":961,"column":8},"end":{"line":968,"column":9}},"273":{"start":{"line":962,"column":12},"end":{"line":962,"column":51}},"274":{"start":{"line":964,"column":12},"end":{"line":965,"column":55}},"275":{"start":{"line":967,"column":12},"end":{"line":967,"column":56}},"276":{"start":{"line":970,"column":8},"end":{"line":1119,"column":10}},"277":{"start":{"line":972,"column":16},"end":{"line":976,"column":17}},"278":{"start":{"line":975,"column":20},"end":{"line":975,"column":78}},"279":{"start":{"line":994,"column":16},"end":{"line":996,"column":17}},"280":{"start":{"line":995,"column":20},"end":{"line":995,"column":48}},"281":{"start":{"line":1000,"column":16},"end":{"line":1002,"column":17}},"282":{"start":{"line":1001,"column":20},"end":{"line":1001,"column":60}},"283":{"start":{"line":1006,"column":16},"end":{"line":1006,"column":54}},"284":{"start":{"line":1010,"column":16},"end":{"line":1010,"column":54}},"285":{"start":{"line":1015,"column":16},"end":{"line":1017,"column":17}},"286":{"start":{"line":1016,"column":20},"end":{"line":1016,"column":27}},"287":{"start":{"line":1019,"column":16},"end":{"line":1021,"column":17}},"288":{"start":{"line":1020,"column":20},"end":{"line":1020,"column":27}},"289":{"start":{"line":1027,"column":16},"end":{"line":1029,"column":17}},"290":{"start":{"line":1028,"column":20},"end":{"line":1028,"column":27}},"291":{"start":{"line":1031,"column":16},"end":{"line":1033,"column":17}},"292":{"start":{"line":1032,"column":20},"end":{"line":1032,"column":27}},"293":{"start":{"line":1035,"column":16},"end":{"line":1035,"column":108}},"294":{"start":{"line":1037,"column":16},"end":{"line":1037,"column":51}},"295":{"start":{"line":1039,"column":16},"end":{"line":1039,"column":66}},"296":{"start":{"line":1041,"column":16},"end":{"line":1043,"column":17}},"297":{"start":{"line":1042,"column":20},"end":{"line":1042,"column":41}},"298":{"start":{"line":1045,"column":16},"end":{"line":1045,"column":61}},"299":{"start":{"line":1051,"column":16},"end":{"line":1051,"column":66}},"300":{"start":{"line":1052,"column":16},"end":{"line":1052,"column":74}},"301":{"start":{"line":1054,"column":16},"end":{"line":1054,"column":57}},"302":{"start":{"line":1057,"column":16},"end":{"line":1057,"column":60}},"303":{"start":{"line":1063,"column":16},"end":{"line":1065,"column":17}},"304":{"start":{"line":1064,"column":20},"end":{"line":1064,"column":27}},"305":{"start":{"line":1066,"column":16},"end":{"line":1066,"column":60}},"306":{"start":{"line":1068,"column":16},"end":{"line":1068,"column":75}},"307":{"start":{"line":1072,"column":16},"end":{"line":1074,"column":17}},"308":{"start":{"line":1073,"column":20},"end":{"line":1073,"column":27}},"309":{"start":{"line":1075,"column":16},"end":{"line":1079,"column":17}},"310":{"start":{"line":1076,"column":20},"end":{"line":1076,"column":92}},"311":{"start":{"line":1077,"column":23},"end":{"line":1079,"column":17}},"312":{"start":{"line":1078,"column":20},"end":{"line":1078,"column":134}},"313":{"start":{"line":1083,"column":16},"end":{"line":1085,"column":17}},"314":{"start":{"line":1084,"column":20},"end":{"line":1084,"column":27}},"315":{"start":{"line":1086,"column":16},"end":{"line":1090,"column":17}},"316":{"start":{"line":1087,"column":20},"end":{"line":1087,"column":92}},"317":{"start":{"line":1088,"column":23},"end":{"line":1090,"column":17}},"318":{"start":{"line":1089,"column":20},"end":{"line":1089,"column":133}},"319":{"start":{"line":1094,"column":16},"end":{"line":1096,"column":17}},"320":{"start":{"line":1095,"column":20},"end":{"line":1095,"column":27}},"321":{"start":{"line":1098,"column":16},"end":{"line":1098,"column":69}},"322":{"start":{"line":1101,"column":16},"end":{"line":1105,"column":17}},"323":{"start":{"line":1102,"column":20},"end":{"line":1102,"column":78}},"324":{"start":{"line":1104,"column":20},"end":{"line":1104,"column":59}},"325":{"start":{"line":1109,"column":16},"end":{"line":1111,"column":17}},"326":{"start":{"line":1110,"column":20},"end":{"line":1110,"column":27}},"327":{"start":{"line":1112,"column":16},"end":{"line":1116,"column":17}},"328":{"start":{"line":1113,"column":20},"end":{"line":1113,"column":98}},"329":{"start":{"line":1114,"column":23},"end":{"line":1116,"column":17}},"330":{"start":{"line":1115,"column":20},"end":{"line":1115,"column":131}}},"branchMap":{"1":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":8},"end":{"line":199,"column":8}},{"start":{"line":199,"column":8},"end":{"line":199,"column":8}}]},"2":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":12},"end":{"line":200,"column":12}},{"start":{"line":200,"column":12},"end":{"line":200,"column":12}}]},"3":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":90},"end":{"line":203,"column":90}},{"start":{"line":203,"column":90},"end":{"line":203,"column":90},"skip":true}]},"4":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":12},"end":{"line":208,"column":12}},{"start":{"line":208,"column":12},"end":{"line":208,"column":12}}]},"5":{"line":211,"type":"binary-expr","locations":[{"start":{"line":211,"column":37},"end":{"line":211,"column":52}},{"start":{"line":211,"column":56},"end":{"line":211,"column":57}}]},"6":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":16},"end":{"line":214,"column":16}},{"start":{"line":214,"column":16},"end":{"line":214,"column":16}}]},"7":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":23},"end":{"line":220,"column":23}},{"start":{"line":220,"column":23},"end":{"line":220,"column":23}}]},"8":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":16},"end":{"line":224,"column":16}},{"start":{"line":224,"column":16},"end":{"line":224,"column":16}}]},"9":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":16},"end":{"line":228,"column":16}},{"start":{"line":228,"column":16},"end":{"line":228,"column":16}}]},"10":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":16},"end":{"line":232,"column":16}},{"start":{"line":232,"column":16},"end":{"line":232,"column":16}}]},"11":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":16},"end":{"line":236,"column":16}},{"start":{"line":236,"column":16},"end":{"line":236,"column":16}}]},"12":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":16},"end":{"line":240,"column":16}},{"start":{"line":240,"column":16},"end":{"line":240,"column":16}}]},"13":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":16},"end":{"line":244,"column":16}},{"start":{"line":244,"column":16},"end":{"line":244,"column":16}}]},"14":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":20},"end":{"line":244,"column":60}},{"start":{"line":244,"column":64},"end":{"line":244,"column":104}}]},"15":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":16},"end":{"line":248,"column":16}},{"start":{"line":248,"column":16},"end":{"line":248,"column":16}}]},"16":{"line":248,"type":"binary-expr","locations":[{"start":{"line":248,"column":20},"end":{"line":248,"column":61}},{"start":{"line":248,"column":65},"end":{"line":248,"column":106}}]},"17":{"line":264,"type":"cond-expr","locations":[{"start":{"line":264,"column":95},"end":{"line":264,"column":97}},{"start":{"line":264,"column":100},"end":{"line":264,"column":103}}]},"18":{"line":265,"type":"cond-expr","locations":[{"start":{"line":265,"column":65},"end":{"line":265,"column":67}},{"start":{"line":265,"column":70},"end":{"line":265,"column":73}}]},"19":{"line":266,"type":"cond-expr","locations":[{"start":{"line":266,"column":59},"end":{"line":266,"column":61}},{"start":{"line":266,"column":64},"end":{"line":266,"column":67}}]},"20":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":12},"end":{"line":269,"column":12}},{"start":{"line":269,"column":12},"end":{"line":269,"column":12}}]},"21":{"line":269,"type":"binary-expr","locations":[{"start":{"line":269,"column":16},"end":{"line":269,"column":32}},{"start":{"line":269,"column":36},"end":{"line":269,"column":50}}]},"22":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":19},"end":{"line":271,"column":19}},{"start":{"line":271,"column":19},"end":{"line":271,"column":19}}]},"23":{"line":275,"type":"cond-expr","locations":[{"start":{"line":275,"column":58},"end":{"line":275,"column":70}},{"start":{"line":275,"column":73},"end":{"line":275,"column":109}}]},"24":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":19},"end":{"line":276,"column":19}},{"start":{"line":276,"column":19},"end":{"line":276,"column":19}}]},"25":{"line":277,"type":"cond-expr","locations":[{"start":{"line":277,"column":56},"end":{"line":277,"column":66}},{"start":{"line":277,"column":69},"end":{"line":277,"column":101}}]},"26":{"line":297,"type":"if","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":12}},{"start":{"line":297,"column":12},"end":{"line":297,"column":12}}]},"27":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":16},"end":{"line":297,"column":28}},{"start":{"line":297,"column":32},"end":{"line":297,"column":42}}]},"28":{"line":303,"type":"cond-expr","locations":[{"start":{"line":303,"column":60},"end":{"line":303,"column":63}},{"start":{"line":303,"column":66},"end":{"line":303,"column":70}}]},"29":{"line":305,"type":"cond-expr","locations":[{"start":{"line":306,"column":18},"end":{"line":306,"column":120}},{"start":{"line":307,"column":18},"end":{"line":307,"column":124}}]},"30":{"line":327,"type":"cond-expr","locations":[{"start":{"line":327,"column":39},"end":{"line":327,"column":68}},{"start":{"line":327,"column":71},"end":{"line":327,"column":101}}]},"31":{"line":329,"type":"binary-expr","locations":[{"start":{"line":329,"column":97},"end":{"line":329,"column":109}},{"start":{"line":329,"column":113},"end":{"line":329,"column":126}}]},"32":{"line":336,"type":"cond-expr","locations":[{"start":{"line":336,"column":51},"end":{"line":336,"column":57}},{"start":{"line":336,"column":60},"end":{"line":336,"column":64}}]},"33":{"line":337,"type":"cond-expr","locations":[{"start":{"line":337,"column":50},"end":{"line":337,"column":54}},{"start":{"line":337,"column":57},"end":{"line":337,"column":63}}]},"34":{"line":348,"type":"cond-expr","locations":[{"start":{"line":348,"column":56},"end":{"line":348,"column":88}},{"start":{"line":348,"column":91},"end":{"line":348,"column":122}}]},"35":{"line":349,"type":"cond-expr","locations":[{"start":{"line":349,"column":53},"end":{"line":349,"column":70}},{"start":{"line":349,"column":73},"end":{"line":349,"column":92}}]},"36":{"line":350,"type":"cond-expr","locations":[{"start":{"line":350,"column":39},"end":{"line":350,"column":62}},{"start":{"line":350,"column":65},"end":{"line":350,"column":67}}]},"37":{"line":365,"type":"if","locations":[{"start":{"line":365,"column":12},"end":{"line":365,"column":12}},{"start":{"line":365,"column":12},"end":{"line":365,"column":12}}]},"38":{"line":366,"type":"binary-expr","locations":[{"start":{"line":366,"column":16},"end":{"line":366,"column":47}},{"start":{"line":367,"column":16},"end":{"line":367,"column":48}},{"start":{"line":368,"column":17},"end":{"line":368,"column":55}},{"start":{"line":368,"column":59},"end":{"line":368,"column":85}},{"start":{"line":369,"column":16},"end":{"line":369,"column":39}}]},"39":{"line":374,"type":"if","locations":[{"start":{"line":374,"column":12},"end":{"line":374,"column":12}},{"start":{"line":374,"column":12},"end":{"line":374,"column":12}}]},"40":{"line":374,"type":"binary-expr","locations":[{"start":{"line":374,"column":16},"end":{"line":374,"column":43}},{"start":{"line":374,"column":47},"end":{"line":374,"column":61}}]},"41":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":16},"end":{"line":379,"column":16}},{"start":{"line":379,"column":16},"end":{"line":379,"column":16}}]},"42":{"line":384,"type":"if","locations":[{"start":{"line":384,"column":12},"end":{"line":384,"column":12}},{"start":{"line":384,"column":12},"end":{"line":384,"column":12}}]},"43":{"line":384,"type":"binary-expr","locations":[{"start":{"line":384,"column":16},"end":{"line":384,"column":44}},{"start":{"line":384,"column":48},"end":{"line":384,"column":60}}]},"44":{"line":390,"type":"if","locations":[{"start":{"line":390,"column":12},"end":{"line":390,"column":12}},{"start":{"line":390,"column":12},"end":{"line":390,"column":12}}]},"45":{"line":390,"type":"binary-expr","locations":[{"start":{"line":390,"column":16},"end":{"line":390,"column":44}},{"start":{"line":390,"column":48},"end":{"line":390,"column":62}}]},"46":{"line":396,"type":"if","locations":[{"start":{"line":396,"column":12},"end":{"line":396,"column":12}},{"start":{"line":396,"column":12},"end":{"line":396,"column":12}}]},"47":{"line":424,"type":"if","locations":[{"start":{"line":424,"column":12},"end":{"line":424,"column":12}},{"start":{"line":424,"column":12},"end":{"line":424,"column":12}}]},"48":{"line":424,"type":"binary-expr","locations":[{"start":{"line":424,"column":17},"end":{"line":424,"column":54}},{"start":{"line":424,"column":58},"end":{"line":424,"column":81}},{"start":{"line":424,"column":86},"end":{"line":424,"column":115}}]},"49":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":12},"end":{"line":450,"column":12}},{"start":{"line":450,"column":12},"end":{"line":450,"column":12}}]},"50":{"line":458,"type":"if","locations":[{"start":{"line":458,"column":12},"end":{"line":458,"column":12}},{"start":{"line":458,"column":12},"end":{"line":458,"column":12}}]},"51":{"line":479,"type":"if","locations":[{"start":{"line":479,"column":12},"end":{"line":479,"column":12}},{"start":{"line":479,"column":12},"end":{"line":479,"column":12}}]},"52":{"line":479,"type":"binary-expr","locations":[{"start":{"line":479,"column":17},"end":{"line":479,"column":57}},{"start":{"line":479,"column":61},"end":{"line":479,"column":86}},{"start":{"line":479,"column":91},"end":{"line":479,"column":114}}]},"53":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":12},"end":{"line":501,"column":12}},{"start":{"line":501,"column":12},"end":{"line":501,"column":12}}]},"54":{"line":505,"type":"binary-expr","locations":[{"start":{"line":505,"column":19},"end":{"line":505,"column":39}},{"start":{"line":505,"column":43},"end":{"line":505,"column":81}},{"start":{"line":505,"column":85},"end":{"line":505,"column":110}}]},"55":{"line":509,"type":"cond-expr","locations":[{"start":{"line":509,"column":42},"end":{"line":509,"column":48}},{"start":{"line":509,"column":51},"end":{"line":509,"column":55}}]},"56":{"line":530,"type":"binary-expr","locations":[{"start":{"line":530,"column":19},"end":{"line":530,"column":26}},{"start":{"line":531,"column":16},"end":{"line":531,"column":69}},{"start":{"line":532,"column":16},"end":{"line":532,"column":54}}]},"57":{"line":544,"type":"if","locations":[{"start":{"line":544,"column":12},"end":{"line":544,"column":12}},{"start":{"line":544,"column":12},"end":{"line":544,"column":12}}]},"58":{"line":544,"type":"binary-expr","locations":[{"start":{"line":544,"column":16},"end":{"line":544,"column":44}},{"start":{"line":544,"column":48},"end":{"line":544,"column":76}}]},"59":{"line":563,"type":"if","locations":[{"start":{"line":563,"column":12},"end":{"line":563,"column":12}},{"start":{"line":563,"column":12},"end":{"line":563,"column":12}}]},"60":{"line":564,"type":"binary-expr","locations":[{"start":{"line":564,"column":16},"end":{"line":564,"column":48}},{"start":{"line":565,"column":16},"end":{"line":565,"column":38}}]},"61":{"line":574,"type":"binary-expr","locations":[{"start":{"line":574,"column":16},"end":{"line":574,"column":47}},{"start":{"line":575,"column":20},"end":{"line":575,"column":41}},{"start":{"line":576,"column":20},"end":{"line":576,"column":41}},{"start":{"line":577,"column":20},"end":{"line":577,"column":41}},{"start":{"line":578,"column":20},"end":{"line":578,"column":41}},{"start":{"line":579,"column":16},"end":{"line":579,"column":52}},{"start":{"line":580,"column":16},"end":{"line":580,"column":49}},{"start":{"line":581,"column":16},"end":{"line":581,"column":50}},{"start":{"line":582,"column":16},"end":{"line":582,"column":50}}]},"62":{"line":587,"type":"binary-expr","locations":[{"start":{"line":588,"column":20},"end":{"line":588,"column":55}},{"start":{"line":589,"column":20},"end":{"line":589,"column":55}},{"start":{"line":590,"column":16},"end":{"line":590,"column":27}},{"start":{"line":590,"column":31},"end":{"line":590,"column":61}}]},"63":{"line":617,"type":"if","locations":[{"start":{"line":617,"column":12},"end":{"line":617,"column":12}},{"start":{"line":617,"column":12},"end":{"line":617,"column":12}}]},"64":{"line":617,"type":"binary-expr","locations":[{"start":{"line":617,"column":16},"end":{"line":617,"column":33}},{"start":{"line":618,"column":17},"end":{"line":618,"column":54}},{"start":{"line":619,"column":16},"end":{"line":619,"column":60}}]},"65":{"line":629,"type":"if","locations":[{"start":{"line":629,"column":12},"end":{"line":629,"column":12}},{"start":{"line":629,"column":12},"end":{"line":629,"column":12}}]},"66":{"line":632,"type":"if","locations":[{"start":{"line":632,"column":16},"end":{"line":632,"column":16}},{"start":{"line":632,"column":16},"end":{"line":632,"column":16}}]},"67":{"line":632,"type":"binary-expr","locations":[{"start":{"line":632,"column":20},"end":{"line":632,"column":60}},{"start":{"line":632,"column":64},"end":{"line":632,"column":109}}]},"68":{"line":633,"type":"if","locations":[{"start":{"line":633,"column":20},"end":{"line":633,"column":20}},{"start":{"line":633,"column":20},"end":{"line":633,"column":20}}]},"69":{"line":633,"type":"binary-expr","locations":[{"start":{"line":633,"column":24},"end":{"line":633,"column":36}},{"start":{"line":633,"column":40},"end":{"line":633,"column":89}}]},"70":{"line":637,"type":"if","locations":[{"start":{"line":637,"column":20},"end":{"line":637,"column":20}},{"start":{"line":637,"column":20},"end":{"line":637,"column":20}}]},"71":{"line":637,"type":"binary-expr","locations":[{"start":{"line":637,"column":24},"end":{"line":637,"column":66}},{"start":{"line":638,"column":24},"end":{"line":638,"column":95}},{"start":{"line":639,"column":24},"end":{"line":639,"column":54}}]},"72":{"line":649,"type":"if","locations":[{"start":{"line":649,"column":12},"end":{"line":649,"column":12}},{"start":{"line":649,"column":12},"end":{"line":649,"column":12}}]},"73":{"line":649,"type":"binary-expr","locations":[{"start":{"line":649,"column":16},"end":{"line":649,"column":46}},{"start":{"line":649,"column":50},"end":{"line":649,"column":73}}]},"74":{"line":651,"type":"if","locations":[{"start":{"line":651,"column":19},"end":{"line":651,"column":19}},{"start":{"line":651,"column":19},"end":{"line":651,"column":19}}]},"75":{"line":653,"type":"if","locations":[{"start":{"line":653,"column":19},"end":{"line":653,"column":19}},{"start":{"line":653,"column":19},"end":{"line":653,"column":19}}]},"76":{"line":661,"type":"if","locations":[{"start":{"line":661,"column":12},"end":{"line":661,"column":12}},{"start":{"line":661,"column":12},"end":{"line":661,"column":12}}]},"77":{"line":661,"type":"binary-expr","locations":[{"start":{"line":661,"column":16},"end":{"line":661,"column":29}},{"start":{"line":661,"column":33},"end":{"line":661,"column":70}}]},"78":{"line":665,"type":"if","locations":[{"start":{"line":665,"column":12},"end":{"line":665,"column":12}},{"start":{"line":665,"column":12},"end":{"line":665,"column":12}}]},"79":{"line":693,"type":"if","locations":[{"start":{"line":693,"column":12},"end":{"line":693,"column":12}},{"start":{"line":693,"column":12},"end":{"line":693,"column":12}}]},"80":{"line":693,"type":"binary-expr","locations":[{"start":{"line":693,"column":16},"end":{"line":693,"column":47}},{"start":{"line":693,"column":51},"end":{"line":693,"column":67}}]},"81":{"line":694,"type":"binary-expr","locations":[{"start":{"line":694,"column":23},"end":{"line":694,"column":78}},{"start":{"line":694,"column":82},"end":{"line":694,"column":126}}]},"82":{"line":708,"type":"if","locations":[{"start":{"line":708,"column":12},"end":{"line":708,"column":12}},{"start":{"line":708,"column":12},"end":{"line":708,"column":12}}]},"83":{"line":712,"type":"cond-expr","locations":[{"start":{"line":712,"column":63},"end":{"line":712,"column":76}},{"start":{"line":712,"column":79},"end":{"line":712,"column":94}}]},"84":{"line":722,"type":"if","locations":[{"start":{"line":722,"column":12},"end":{"line":722,"column":12}},{"start":{"line":722,"column":12},"end":{"line":722,"column":12}}]},"85":{"line":726,"type":"if","locations":[{"start":{"line":726,"column":16},"end":{"line":726,"column":16}},{"start":{"line":726,"column":16},"end":{"line":726,"column":16}}]},"86":{"line":726,"type":"binary-expr","locations":[{"start":{"line":726,"column":20},"end":{"line":726,"column":34}},{"start":{"line":726,"column":38},"end":{"line":726,"column":90}}]},"87":{"line":727,"type":"if","locations":[{"start":{"line":727,"column":20},"end":{"line":727,"column":20}},{"start":{"line":727,"column":20},"end":{"line":727,"column":20}}]},"88":{"line":727,"type":"binary-expr","locations":[{"start":{"line":727,"column":24},"end":{"line":727,"column":60}},{"start":{"line":727,"column":64},"end":{"line":727,"column":118}}]},"89":{"line":728,"type":"if","locations":[{"start":{"line":728,"column":24},"end":{"line":728,"column":24}},{"start":{"line":728,"column":24},"end":{"line":728,"column":24}}]},"90":{"line":728,"type":"binary-expr","locations":[{"start":{"line":728,"column":28},"end":{"line":728,"column":64}},{"start":{"line":728,"column":68},"end":{"line":728,"column":122}}]},"91":{"line":730,"type":"if","locations":[{"start":{"line":730,"column":31},"end":{"line":730,"column":31}},{"start":{"line":730,"column":31},"end":{"line":730,"column":31}}]},"92":{"line":730,"type":"binary-expr","locations":[{"start":{"line":730,"column":35},"end":{"line":730,"column":69}},{"start":{"line":730,"column":73},"end":{"line":730,"column":106}}]},"93":{"line":731,"type":"cond-expr","locations":[{"start":{"line":731,"column":93},"end":{"line":731,"column":115}},{"start":{"line":731,"column":118},"end":{"line":731,"column":138}}]},"94":{"line":733,"type":"if","locations":[{"start":{"line":733,"column":28},"end":{"line":733,"column":28}},{"start":{"line":733,"column":28},"end":{"line":733,"column":28}}]},"95":{"line":733,"type":"binary-expr","locations":[{"start":{"line":733,"column":32},"end":{"line":733,"column":49}},{"start":{"line":733,"column":53},"end":{"line":733,"column":111}},{"start":{"line":733,"column":115},"end":{"line":733,"column":171}}]},"96":{"line":745,"type":"if","locations":[{"start":{"line":745,"column":35},"end":{"line":745,"column":35}},{"start":{"line":745,"column":35},"end":{"line":745,"column":35}}]},"97":{"line":750,"type":"if","locations":[{"start":{"line":750,"column":31},"end":{"line":750,"column":31}},{"start":{"line":750,"column":31},"end":{"line":750,"column":31}}]},"98":{"line":750,"type":"binary-expr","locations":[{"start":{"line":750,"column":35},"end":{"line":750,"column":67}},{"start":{"line":750,"column":71},"end":{"line":750,"column":102}}]},"99":{"line":751,"type":"if","locations":[{"start":{"line":751,"column":28},"end":{"line":751,"column":28}},{"start":{"line":751,"column":28},"end":{"line":751,"column":28}}]},"100":{"line":753,"type":"if","locations":[{"start":{"line":753,"column":35},"end":{"line":753,"column":35}},{"start":{"line":753,"column":35},"end":{"line":753,"column":35}}]},"101":{"line":754,"type":"if","locations":[{"start":{"line":754,"column":32},"end":{"line":754,"column":32}},{"start":{"line":754,"column":32},"end":{"line":754,"column":32}}]},"102":{"line":760,"type":"if","locations":[{"start":{"line":760,"column":31},"end":{"line":760,"column":31}},{"start":{"line":760,"column":31},"end":{"line":760,"column":31}}]},"103":{"line":760,"type":"binary-expr","locations":[{"start":{"line":760,"column":35},"end":{"line":760,"column":70}},{"start":{"line":760,"column":74},"end":{"line":760,"column":115}}]},"104":{"line":764,"type":"if","locations":[{"start":{"line":764,"column":23},"end":{"line":764,"column":23}},{"start":{"line":764,"column":23},"end":{"line":764,"column":23}}]},"105":{"line":764,"type":"binary-expr","locations":[{"start":{"line":764,"column":27},"end":{"line":764,"column":41}},{"start":{"line":764,"column":45},"end":{"line":764,"column":83}},{"start":{"line":764,"column":87},"end":{"line":764,"column":121}},{"start":{"line":764,"column":125},"end":{"line":764,"column":162}},{"start":{"line":764,"column":166},"end":{"line":764,"column":204}},{"start":{"line":764,"column":208},"end":{"line":764,"column":234}}]},"106":{"line":773,"type":"if","locations":[{"start":{"line":773,"column":12},"end":{"line":773,"column":12}},{"start":{"line":773,"column":12},"end":{"line":773,"column":12}}]},"107":{"line":774,"type":"cond-expr","locations":[{"start":{"line":774,"column":51},"end":{"line":774,"column":79}},{"start":{"line":774,"column":82},"end":{"line":774,"column":83}}]},"108":{"line":783,"type":"if","locations":[{"start":{"line":783,"column":12},"end":{"line":783,"column":12}},{"start":{"line":783,"column":12},"end":{"line":783,"column":12}}]},"109":{"line":789,"type":"if","locations":[{"start":{"line":789,"column":12},"end":{"line":789,"column":12}},{"start":{"line":789,"column":12},"end":{"line":789,"column":12}}]},"110":{"line":792,"type":"if","locations":[{"start":{"line":792,"column":16},"end":{"line":792,"column":16}},{"start":{"line":792,"column":16},"end":{"line":792,"column":16}}]},"111":{"line":797,"type":"cond-expr","locations":[{"start":{"line":797,"column":96},"end":{"line":797,"column":162}},{"start":{"line":797,"column":165},"end":{"line":797,"column":166}}]},"112":{"line":806,"type":"binary-expr","locations":[{"start":{"line":806,"column":19},"end":{"line":806,"column":49}},{"start":{"line":806,"column":53},"end":{"line":806,"column":78}},{"start":{"line":806,"column":83},"end":{"line":806,"column":92}},{"start":{"line":806,"column":96},"end":{"line":806,"column":131}},{"start":{"line":807,"column":17},"end":{"line":807,"column":32}},{"start":{"line":807,"column":36},"end":{"line":807,"column":77}}]},"113":{"line":818,"type":"if","locations":[{"start":{"line":818,"column":12},"end":{"line":818,"column":12}},{"start":{"line":818,"column":12},"end":{"line":818,"column":12}}]},"114":{"line":822,"type":"if","locations":[{"start":{"line":822,"column":12},"end":{"line":822,"column":12}},{"start":{"line":822,"column":12},"end":{"line":822,"column":12}}]},"115":{"line":822,"type":"binary-expr","locations":[{"start":{"line":822,"column":16},"end":{"line":822,"column":27}},{"start":{"line":823,"column":20},"end":{"line":823,"column":61}},{"start":{"line":824,"column":20},"end":{"line":824,"column":62}},{"start":{"line":825,"column":20},"end":{"line":825,"column":66}}]},"116":{"line":842,"type":"if","locations":[{"start":{"line":842,"column":12},"end":{"line":842,"column":12}},{"start":{"line":842,"column":12},"end":{"line":842,"column":12}}]},"117":{"line":842,"type":"binary-expr","locations":[{"start":{"line":842,"column":16},"end":{"line":842,"column":27}},{"start":{"line":842,"column":31},"end":{"line":842,"column":88}},{"start":{"line":842,"column":92},"end":{"line":842,"column":113}}]},"118":{"line":844,"type":"if","locations":[{"start":{"line":844,"column":19},"end":{"line":844,"column":19}},{"start":{"line":844,"column":19},"end":{"line":844,"column":19}}]},"119":{"line":844,"type":"binary-expr","locations":[{"start":{"line":844,"column":23},"end":{"line":844,"column":34}},{"start":{"line":844,"column":38},"end":{"line":844,"column":72}}]},"120":{"line":850,"type":"if","locations":[{"start":{"line":850,"column":12},"end":{"line":850,"column":12}},{"start":{"line":850,"column":12},"end":{"line":850,"column":12}}]},"121":{"line":850,"type":"binary-expr","locations":[{"start":{"line":850,"column":16},"end":{"line":850,"column":43}},{"start":{"line":850,"column":47},"end":{"line":850,"column":88}}]},"122":{"line":852,"type":"if","locations":[{"start":{"line":852,"column":19},"end":{"line":852,"column":19}},{"start":{"line":852,"column":19},"end":{"line":852,"column":19}}]},"123":{"line":858,"type":"if","locations":[{"start":{"line":858,"column":12},"end":{"line":858,"column":12}},{"start":{"line":858,"column":12},"end":{"line":858,"column":12}}]},"124":{"line":862,"type":"if","locations":[{"start":{"line":862,"column":12},"end":{"line":862,"column":12}},{"start":{"line":862,"column":12},"end":{"line":862,"column":12}}]},"125":{"line":877,"type":"if","locations":[{"start":{"line":877,"column":16},"end":{"line":877,"column":16}},{"start":{"line":877,"column":16},"end":{"line":877,"column":16}}]},"126":{"line":877,"type":"binary-expr","locations":[{"start":{"line":877,"column":21},"end":{"line":877,"column":64}},{"start":{"line":877,"column":68},"end":{"line":877,"column":77}},{"start":{"line":878,"column":21},"end":{"line":878,"column":29}},{"start":{"line":878,"column":33},"end":{"line":878,"column":80}}]},"127":{"line":901,"type":"if","locations":[{"start":{"line":901,"column":12},"end":{"line":901,"column":12}},{"start":{"line":901,"column":12},"end":{"line":901,"column":12}}]},"128":{"line":907,"type":"if","locations":[{"start":{"line":907,"column":12},"end":{"line":907,"column":12}},{"start":{"line":907,"column":12},"end":{"line":907,"column":12}}]},"129":{"line":923,"type":"if","locations":[{"start":{"line":923,"column":12},"end":{"line":923,"column":12}},{"start":{"line":923,"column":12},"end":{"line":923,"column":12}}]},"130":{"line":935,"type":"cond-expr","locations":[{"start":{"line":935,"column":67},"end":{"line":935,"column":71}},{"start":{"line":935,"column":74},"end":{"line":935,"column":85}}]},"131":{"line":938,"type":"if","locations":[{"start":{"line":938,"column":12},"end":{"line":938,"column":12}},{"start":{"line":938,"column":12},"end":{"line":938,"column":12}}]},"132":{"line":941,"type":"if","locations":[{"start":{"line":941,"column":12},"end":{"line":941,"column":12}},{"start":{"line":941,"column":12},"end":{"line":941,"column":12}}]},"133":{"line":945,"type":"if","locations":[{"start":{"line":945,"column":12},"end":{"line":945,"column":12}},{"start":{"line":945,"column":12},"end":{"line":945,"column":12}}]},"134":{"line":945,"type":"binary-expr","locations":[{"start":{"line":945,"column":16},"end":{"line":945,"column":43}},{"start":{"line":945,"column":47},"end":{"line":945,"column":71}}]},"135":{"line":972,"type":"if","locations":[{"start":{"line":972,"column":16},"end":{"line":972,"column":16}},{"start":{"line":972,"column":16},"end":{"line":972,"column":16}}]},"136":{"line":994,"type":"if","locations":[{"start":{"line":994,"column":16},"end":{"line":994,"column":16}},{"start":{"line":994,"column":16},"end":{"line":994,"column":16}}]},"137":{"line":994,"type":"binary-expr","locations":[{"start":{"line":994,"column":20},"end":{"line":994,"column":61}},{"start":{"line":994,"column":65},"end":{"line":994,"column":117}}]},"138":{"line":1000,"type":"if","locations":[{"start":{"line":1000,"column":16},"end":{"line":1000,"column":16}},{"start":{"line":1000,"column":16},"end":{"line":1000,"column":16}}]},"139":{"line":1015,"type":"if","locations":[{"start":{"line":1015,"column":16},"end":{"line":1015,"column":16}},{"start":{"line":1015,"column":16},"end":{"line":1015,"column":16}}]},"140":{"line":1019,"type":"if","locations":[{"start":{"line":1019,"column":16},"end":{"line":1019,"column":16}},{"start":{"line":1019,"column":16},"end":{"line":1019,"column":16}}]},"141":{"line":1027,"type":"if","locations":[{"start":{"line":1027,"column":16},"end":{"line":1027,"column":16}},{"start":{"line":1027,"column":16},"end":{"line":1027,"column":16}}]},"142":{"line":1031,"type":"if","locations":[{"start":{"line":1031,"column":16},"end":{"line":1031,"column":16}},{"start":{"line":1031,"column":16},"end":{"line":1031,"column":16}}]},"143":{"line":1041,"type":"if","locations":[{"start":{"line":1041,"column":16},"end":{"line":1041,"column":16}},{"start":{"line":1041,"column":16},"end":{"line":1041,"column":16}}]},"144":{"line":1041,"type":"binary-expr","locations":[{"start":{"line":1041,"column":20},"end":{"line":1041,"column":45}},{"start":{"line":1041,"column":49},"end":{"line":1041,"column":66}}]},"145":{"line":1063,"type":"if","locations":[{"start":{"line":1063,"column":16},"end":{"line":1063,"column":16}},{"start":{"line":1063,"column":16},"end":{"line":1063,"column":16}}]},"146":{"line":1072,"type":"if","locations":[{"start":{"line":1072,"column":16},"end":{"line":1072,"column":16}},{"start":{"line":1072,"column":16},"end":{"line":1072,"column":16}}]},"147":{"line":1075,"type":"if","locations":[{"start":{"line":1075,"column":16},"end":{"line":1075,"column":16}},{"start":{"line":1075,"column":16},"end":{"line":1075,"column":16}}]},"148":{"line":1075,"type":"binary-expr","locations":[{"start":{"line":1075,"column":20},"end":{"line":1075,"column":70}},{"start":{"line":1075,"column":74},"end":{"line":1075,"column":92}}]},"149":{"line":1077,"type":"if","locations":[{"start":{"line":1077,"column":23},"end":{"line":1077,"column":23}},{"start":{"line":1077,"column":23},"end":{"line":1077,"column":23}}]},"150":{"line":1083,"type":"if","locations":[{"start":{"line":1083,"column":16},"end":{"line":1083,"column":16}},{"start":{"line":1083,"column":16},"end":{"line":1083,"column":16}}]},"151":{"line":1086,"type":"if","locations":[{"start":{"line":1086,"column":16},"end":{"line":1086,"column":16}},{"start":{"line":1086,"column":16},"end":{"line":1086,"column":16}}]},"152":{"line":1086,"type":"binary-expr","locations":[{"start":{"line":1086,"column":20},"end":{"line":1086,"column":69}},{"start":{"line":1086,"column":73},"end":{"line":1086,"column":91}}]},"153":{"line":1088,"type":"if","locations":[{"start":{"line":1088,"column":23},"end":{"line":1088,"column":23}},{"start":{"line":1088,"column":23},"end":{"line":1088,"column":23}}]},"154":{"line":1094,"type":"if","locations":[{"start":{"line":1094,"column":16},"end":{"line":1094,"column":16}},{"start":{"line":1094,"column":16},"end":{"line":1094,"column":16}}]},"155":{"line":1101,"type":"if","locations":[{"start":{"line":1101,"column":16},"end":{"line":1101,"column":16}},{"start":{"line":1101,"column":16},"end":{"line":1101,"column":16}}]},"156":{"line":1109,"type":"if","locations":[{"start":{"line":1109,"column":16},"end":{"line":1109,"column":16}},{"start":{"line":1109,"column":16},"end":{"line":1109,"column":16}}]},"157":{"line":1112,"type":"if","locations":[{"start":{"line":1112,"column":16},"end":{"line":1112,"column":16}},{"start":{"line":1112,"column":16},"end":{"line":1112,"column":16}}]},"158":{"line":1112,"type":"binary-expr","locations":[{"start":{"line":1112,"column":20},"end":{"line":1112,"column":64}},{"start":{"line":1112,"column":68},"end":{"line":1112,"column":89}}]},"159":{"line":1114,"type":"if","locations":[{"start":{"line":1114,"column":23},"end":{"line":1114,"column":23}},{"start":{"line":1114,"column":23},"end":{"line":1114,"column":23}}]}},"code":["/**"," * @fileoverview This option sets a specific tab width for your code"," *"," * This rule has been ported and modified from nodeca."," * @author Vitaly Puzrin"," * @author Gyandeep Singh"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent indentation\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"tab\"]","                    },","                    {","                        type: \"integer\",","                        minimum: 0","                    }","                ]","            },","            {","                type: \"object\",","                properties: {","                    SwitchCase: {","                        type: \"integer\",","                        minimum: 0","                    },","                    VariableDeclarator: {","                        oneOf: [","                            {","                                type: \"integer\",","                                minimum: 0","                            },","                            {","                                type: \"object\",","                                properties: {","                                    var: {","                                        type: \"integer\",","                                        minimum: 0","                                    },","                                    let: {","                                        type: \"integer\",","                                        minimum: 0","                                    },","                                    const: {","                                        type: \"integer\",","                                        minimum: 0","                                    }","                                }","                            }","                        ]","                    },","                    outerIIFEBody: {","                        type: \"integer\",","                        minimum: 0","                    },","                    MemberExpression: {","                        type: \"integer\",","                        minimum: 0","                    },","                    FunctionDeclaration: {","                        type: \"object\",","                        properties: {","                            parameters: {","                                oneOf: [","                                    {","                                        type: \"integer\",","                                        minimum: 0","                                    },","                                    {","                                        enum: [\"first\"]","                                    }","                                ]","                            },","                            body: {","                                type: \"integer\",","                                minimum: 0","                            }","                        }","                    },","                    FunctionExpression: {","                        type: \"object\",","                        properties: {","                            parameters: {","                                oneOf: [","                                    {","                                        type: \"integer\",","                                        minimum: 0","                                    },","                                    {","                                        enum: [\"first\"]","                                    }","                                ]","                            },","                            body: {","                                type: \"integer\",","                                minimum: 0","                            }","                        }","                    },","                    CallExpression: {","                        type: \"object\",","                        properties: {","                            parameters: {","                                oneOf: [","                                    {","                                        type: \"integer\",","                                        minimum: 0","                                    },","                                    {","                                        enum: [\"first\"]","                                    }","                                ]","                            }","                        }","                    },","                    ArrayExpression: {","                        oneOf: [","                            {","                                type: \"integer\",","                                minimum: 0","                            },","                            {","                                enum: [\"first\"]","                            }","                        ]","                    },","                    ObjectExpression: {","                        oneOf: [","                            {","                                type: \"integer\",","                                minimum: 0","                            },","                            {","                                enum: [\"first\"]","                            }","                        ]","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const DEFAULT_VARIABLE_INDENT = 1;","        const DEFAULT_PARAMETER_INDENT = null; // For backwards compatibility, don't check parameter indentation unless specified in the config","        const DEFAULT_FUNCTION_BODY_INDENT = 1;","","        let indentType = \"space\";","        let indentSize = 4;","        const options = {","            SwitchCase: 0,","            VariableDeclarator: {","                var: DEFAULT_VARIABLE_INDENT,","                let: DEFAULT_VARIABLE_INDENT,","                const: DEFAULT_VARIABLE_INDENT","            },","            outerIIFEBody: null,","            FunctionDeclaration: {","                parameters: DEFAULT_PARAMETER_INDENT,","                body: DEFAULT_FUNCTION_BODY_INDENT","            },","            FunctionExpression: {","                parameters: DEFAULT_PARAMETER_INDENT,","                body: DEFAULT_FUNCTION_BODY_INDENT","            },","            CallExpression: {","                arguments: DEFAULT_PARAMETER_INDENT","            },","            ArrayExpression: 1,","            ObjectExpression: 1","        };","","        const sourceCode = context.getSourceCode();","","        if (context.options.length) {","            if (context.options[0] === \"tab\") {","                indentSize = 1;","                indentType = \"tab\";","            } else /* istanbul ignore else : this will be caught by options validation */ if (typeof context.options[0] === \"number\") {","                indentSize = context.options[0];","                indentType = \"space\";","            }","","            if (context.options[1]) {","                const opts = context.options[1];","","                options.SwitchCase = opts.SwitchCase || 0;","                const variableDeclaratorRules = opts.VariableDeclarator;","","                if (typeof variableDeclaratorRules === \"number\") {","                    options.VariableDeclarator = {","                        var: variableDeclaratorRules,","                        let: variableDeclaratorRules,","                        const: variableDeclaratorRules","                    };","                } else if (typeof variableDeclaratorRules === \"object\") {","                    Object.assign(options.VariableDeclarator, variableDeclaratorRules);","                }","","                if (typeof opts.outerIIFEBody === \"number\") {","                    options.outerIIFEBody = opts.outerIIFEBody;","                }","","                if (typeof opts.MemberExpression === \"number\") {","                    options.MemberExpression = opts.MemberExpression;","                }","","                if (typeof opts.FunctionDeclaration === \"object\") {","                    Object.assign(options.FunctionDeclaration, opts.FunctionDeclaration);","                }","","                if (typeof opts.FunctionExpression === \"object\") {","                    Object.assign(options.FunctionExpression, opts.FunctionExpression);","                }","","                if (typeof opts.CallExpression === \"object\") {","                    Object.assign(options.CallExpression, opts.CallExpression);","                }","","                if (typeof opts.ArrayExpression === \"number\" || typeof opts.ArrayExpression === \"string\") {","                    options.ArrayExpression = opts.ArrayExpression;","                }","","                if (typeof opts.ObjectExpression === \"number\" || typeof opts.ObjectExpression === \"string\") {","                    options.ObjectExpression = opts.ObjectExpression;","                }","            }","        }","","        const caseIndentStore = {};","","        /**","         * Creates an error message for a line, given the expected/actual indentation.","         * @param {int} expectedAmount The expected amount of indentation characters for this line","         * @param {int} actualSpaces The actual number of indentation spaces that were found on this line","         * @param {int} actualTabs The actual number of indentation tabs that were found on this line","         * @returns {string} An error message for this line","         */","        function createErrorMessage(expectedAmount, actualSpaces, actualTabs) {","            const expectedStatement = `${expectedAmount} ${indentType}${expectedAmount === 1 ? \"\" : \"s\"}`; // e.g. \"2 tabs\"","            const foundSpacesWord = `space${actualSpaces === 1 ? \"\" : \"s\"}`; // e.g. \"space\"","            const foundTabsWord = `tab${actualTabs === 1 ? \"\" : \"s\"}`; // e.g. \"tabs\"","            let foundStatement;","","            if (actualSpaces > 0 && actualTabs > 0) {","                foundStatement = `${actualSpaces} ${foundSpacesWord} and ${actualTabs} ${foundTabsWord}`; // e.g. \"1 space and 2 tabs\"","            } else if (actualSpaces > 0) {","","                // Abbreviate the message if the expected indentation is also spaces.","                // e.g. 'Expected 4 spaces but found 2' rather than 'Expected 4 spaces but found 2 spaces'","                foundStatement = indentType === \"space\" ? actualSpaces : `${actualSpaces} ${foundSpacesWord}`;","            } else if (actualTabs > 0) {","                foundStatement = indentType === \"tab\" ? actualTabs : `${actualTabs} ${foundTabsWord}`;","            } else {","                foundStatement = \"0\";","            }","","            return `Expected indentation of ${expectedStatement} but found ${foundStatement}.`;","        }","","        /**","         * Reports a given indent violation","         * @param {ASTNode} node Node violating the indent rule","         * @param {int} needed Expected indentation character count","         * @param {int} gottenSpaces Indentation space count in the actual node/code","         * @param {int} gottenTabs Indentation tab count in the actual node/code","         * @param {Object=} loc Error line and column location","         * @param {boolean} isLastNodeCheck Is the error for last node check","         * @param {int} lastNodeCheckEndOffset Number of charecters to skip from the end","         * @returns {void}","         */","        function report(node, needed, gottenSpaces, gottenTabs, loc, isLastNodeCheck) {","            if (gottenSpaces && gottenTabs) {","","                // To avoid conflicts with `no-mixed-spaces-and-tabs`, don't report lines that have both spaces and tabs.","                return;","            }","","            const desiredIndent = (indentType === \"space\" ? \" \" : \"\\t\").repeat(needed);","","            const textRange = isLastNodeCheck","                ? [node.range[1] - node.loc.end.column, node.range[1] - node.loc.end.column + gottenSpaces + gottenTabs]","                : [node.range[0] - node.loc.start.column, node.range[0] - node.loc.start.column + gottenSpaces + gottenTabs];","","            context.report({","                node,","                loc,","                message: createErrorMessage(needed, gottenSpaces, gottenTabs),","                fix: fixer => fixer.replaceTextRange(textRange, desiredIndent)","            });","        }","","        /**","         * Get the actual indent of node","         * @param {ASTNode|Token} node Node to examine","         * @param {boolean} [byLastLine=false] get indent of node's last line","         * @param {boolean} [excludeCommas=false] skip comma on start of line","         * @returns {Object} The node's indent. Contains keys `space` and `tab`, representing the indent of each character. Also","         contains keys `goodChar` and `badChar`, where `goodChar` is the amount of the user's desired indentation character, and","         `badChar` is the amount of the other indentation character.","         */","        function getNodeIndent(node, byLastLine) {","            const token = byLastLine ? sourceCode.getLastToken(node) : sourceCode.getFirstToken(node);","            const srcCharsBeforeNode = sourceCode.getText(token, token.loc.start.column).split(\"\");","            const indentChars = srcCharsBeforeNode.slice(0, srcCharsBeforeNode.findIndex(char => char !== \" \" && char !== \"\\t\"));","            const spaces = indentChars.filter(char => char === \" \").length;","            const tabs = indentChars.filter(char => char === \"\\t\").length;","","            return {","                space: spaces,","                tab: tabs,","                goodChar: indentType === \"space\" ? spaces : tabs,","                badChar: indentType === \"space\" ? tabs : spaces","            };","        }","","        /**","         * Checks node is the first in its own start line. By default it looks by start line.","         * @param {ASTNode} node The node to check","         * @param {boolean} [byEndLocation=false] Lookup based on start position or end","         * @returns {boolean} true if its the first in the its start line","         */","        function isNodeFirstInLine(node, byEndLocation) {","            const firstToken = byEndLocation === true ? sourceCode.getLastToken(node, 1) : sourceCode.getTokenBefore(node),","                startLine = byEndLocation === true ? node.loc.end.line : node.loc.start.line,","                endLine = firstToken ? firstToken.loc.end.line : -1;","","            return startLine !== endLine;","        }","","        /**","         * Check indent for node","         * @param {ASTNode} node Node to check","         * @param {int} neededIndent needed indent","         * @param {boolean} [excludeCommas=false] skip comma on start of line","         * @returns {void}","         */","        function checkNodeIndent(node, neededIndent) {","            const actualIndent = getNodeIndent(node, false);","","            if (","                node.type !== \"ArrayExpression\" &&","                node.type !== \"ObjectExpression\" &&","                (actualIndent.goodChar !== neededIndent || actualIndent.badChar !== 0) &&","                isNodeFirstInLine(node)","            ) {","                report(node, neededIndent, actualIndent.space, actualIndent.tab);","            }","","            if (node.type === \"IfStatement\" && node.alternate) {","                const elseToken = sourceCode.getTokenBefore(node.alternate);","","                checkNodeIndent(elseToken, neededIndent);","","                if (!isNodeFirstInLine(node.alternate)) {","                    checkNodeIndent(node.alternate, neededIndent);","                }","            }","","            if (node.type === \"TryStatement\" && node.handler) {","                const catchToken = sourceCode.getFirstToken(node.handler);","","                checkNodeIndent(catchToken, neededIndent);","            }","","            if (node.type === \"TryStatement\" && node.finalizer) {","                const finallyToken = sourceCode.getTokenBefore(node.finalizer);","","                checkNodeIndent(finallyToken, neededIndent);","            }","","            if (node.type === \"DoWhileStatement\") {","                const whileToken = sourceCode.getTokenAfter(node.body);","","                checkNodeIndent(whileToken, neededIndent);","            }","        }","","        /**","         * Check indent for nodes list","         * @param {ASTNode[]} nodes list of node objects","         * @param {int} indent needed indent","         * @param {boolean} [excludeCommas=false] skip comma on start of line","         * @returns {void}","         */","        function checkNodesIndent(nodes, indent) {","            nodes.forEach(node => checkNodeIndent(node, indent));","        }","","        /**","         * Check last node line indent this detects, that block closed correctly","         * @param {ASTNode} node Node to examine","         * @param {int} lastLineIndent needed indent","         * @returns {void}","         */","        function checkLastNodeLineIndent(node, lastLineIndent) {","            const lastToken = sourceCode.getLastToken(node);","            const endIndent = getNodeIndent(lastToken, true);","","            if ((endIndent.goodChar !== lastLineIndent || endIndent.badChar !== 0) && isNodeFirstInLine(node, true)) {","                report(","                    node,","                    lastLineIndent,","                    endIndent.space,","                    endIndent.tab,","                    { line: lastToken.loc.start.line, column: lastToken.loc.start.column },","                    true","                );","            }","        }","","        /**","         * Check last node line indent this detects, that block closed correctly","         * This function for more complicated return statement case, where closing parenthesis may be followed by ';'","         * @param {ASTNode} node Node to examine","         * @param {int} firstLineIndent first line needed indent","         * @returns {void}","         */","        function checkLastReturnStatementLineIndent(node, firstLineIndent) {","","            // in case if return statement ends with ');' we have traverse back to ')'","            // otherwise we'll measure indent for ';' and replace ')'","            const lastToken = sourceCode.getLastToken(node, astUtils.isClosingParenToken);","            const textBeforeClosingParenthesis = sourceCode.getText(lastToken, lastToken.loc.start.column).slice(0, -1);","","            if (textBeforeClosingParenthesis.trim()) {","","                // There are tokens before the closing paren, don't report this case","                return;","            }","","            const endIndent = getNodeIndent(lastToken, true);","","            if (endIndent.goodChar !== firstLineIndent) {","                report(","                    node,","                    firstLineIndent,","                    endIndent.space,","                    endIndent.tab,","                    { line: lastToken.loc.start.line, column: lastToken.loc.start.column },","                    true","                );","            }","        }","","        /**","         * Check first node line indent is correct","         * @param {ASTNode} node Node to examine","         * @param {int} firstLineIndent needed indent","         * @returns {void}","         */","        function checkFirstNodeLineIndent(node, firstLineIndent) {","            const startIndent = getNodeIndent(node, false);","","            if ((startIndent.goodChar !== firstLineIndent || startIndent.badChar !== 0) && isNodeFirstInLine(node)) {","                report(","                    node,","                    firstLineIndent,","                    startIndent.space,","                    startIndent.tab,","                    { line: node.loc.start.line, column: node.loc.start.column }","                );","            }","        }","","        /**","         * Returns a parent node of given node based on a specified type","         * if not present then return null","         * @param {ASTNode} node node to examine","         * @param {string} type type that is being looked for","         * @param {string} stopAtList end points for the evaluating code","         * @returns {ASTNode|void} if found then node otherwise null","         */","        function getParentNodeByType(node, type, stopAtList) {","            let parent = node.parent;","","            if (!stopAtList) {","                stopAtList = [\"Program\"];","            }","","            while (parent.type !== type && stopAtList.indexOf(parent.type) === -1 && parent.type !== \"Program\") {","                parent = parent.parent;","            }","","            return parent.type === type ? parent : null;","        }","","        /**","         * Returns the VariableDeclarator based on the current node","         * if not present then return null","         * @param {ASTNode} node node to examine","         * @returns {ASTNode|void} if found then node otherwise null","         */","        function getVariableDeclaratorNode(node) {","            return getParentNodeByType(node, \"VariableDeclarator\");","        }","","        /**","         * Check to see if the node is part of the multi-line variable declaration.","         * Also if its on the same line as the varNode","         * @param {ASTNode} node node to check","         * @param {ASTNode} varNode variable declaration node to check against","         * @returns {boolean} True if all the above condition satisfy","         */","        function isNodeInVarOnTop(node, varNode) {","            return varNode &&","                varNode.parent.loc.start.line === node.loc.start.line &&","                varNode.parent.declarations.length > 1;","        }","","        /**","         * Check to see if the argument before the callee node is multi-line and","         * there should only be 1 argument before the callee node","         * @param {ASTNode} node node to check","         * @returns {boolean} True if arguments are multi-line","         */","        function isArgBeforeCalleeNodeMultiline(node) {","            const parent = node.parent;","","            if (parent.arguments.length >= 2 && parent.arguments[1] === node) {","                return parent.arguments[0].loc.end.line > parent.arguments[0].loc.start.line;","            }","","            return false;","        }","","        /**","         * Check to see if the node is a file level IIFE","         * @param {ASTNode} node The function node to check.","         * @returns {boolean} True if the node is the outer IIFE","         */","        function isOuterIIFE(node) {","            const parent = node.parent;","            let stmt = parent.parent;","","            /*","             * Verify that the node is an IIEF","             */","            if (","                parent.type !== \"CallExpression\" ||","                parent.callee !== node) {","","                return false;","            }","","            /*","             * Navigate legal ancestors to determine whether this IIEF is outer","             */","            while (","                stmt.type === \"UnaryExpression\" && (","                    stmt.operator === \"!\" ||","                    stmt.operator === \"~\" ||","                    stmt.operator === \"+\" ||","                    stmt.operator === \"-\") ||","                stmt.type === \"AssignmentExpression\" ||","                stmt.type === \"LogicalExpression\" ||","                stmt.type === \"SequenceExpression\" ||","                stmt.type === \"VariableDeclarator\") {","","                stmt = stmt.parent;","            }","","            return ((","                    stmt.type === \"ExpressionStatement\" ||","                    stmt.type === \"VariableDeclaration\") &&","                stmt.parent && stmt.parent.type === \"Program\"","            );","        }","","        /**","         * Check indent for function block content","         * @param {ASTNode} node A BlockStatement node that is inside of a function.","         * @returns {void}","         */","        function checkIndentInFunctionBlock(node) {","","            /*","             * Search first caller in chain.","             * Ex.:","             *","             * Models <- Identifier","             *   .User","             *   .find()","             *   .exec(function() {","             *   // function body","             * });","             *","             * Looks for 'Models'","             */","            const calleeNode = node.parent; // FunctionExpression","            let indent;","","            if (calleeNode.parent &&","                (calleeNode.parent.type === \"Property\" ||","                calleeNode.parent.type === \"ArrayExpression\")) {","","                // If function is part of array or object, comma can be put at left","                indent = getNodeIndent(calleeNode, false, false).goodChar;","            } else {","","                // If function is standalone, simple calculate indent","                indent = getNodeIndent(calleeNode).goodChar;","            }","","            if (calleeNode.parent.type === \"CallExpression\") {","                const calleeParent = calleeNode.parent;","","                if (calleeNode.type !== \"FunctionExpression\" && calleeNode.type !== \"ArrowFunctionExpression\") {","                    if (calleeParent && calleeParent.loc.start.line < node.loc.start.line) {","                        indent = getNodeIndent(calleeParent).goodChar;","                    }","                } else {","                    if (isArgBeforeCalleeNodeMultiline(calleeNode) &&","                        calleeParent.callee.loc.start.line === calleeParent.callee.loc.end.line &&","                        !isNodeFirstInLine(calleeNode)) {","                        indent = getNodeIndent(calleeParent).goodChar;","                    }","                }","            }","","            // function body indent should be indent + indent size, unless this","            // is a FunctionDeclaration, FunctionExpression, or outer IIFE and the corresponding options are enabled.","            let functionOffset = indentSize;","","            if (options.outerIIFEBody !== null && isOuterIIFE(calleeNode)) {","                functionOffset = options.outerIIFEBody * indentSize;","            } else if (calleeNode.type === \"FunctionExpression\") {","                functionOffset = options.FunctionExpression.body * indentSize;","            } else if (calleeNode.type === \"FunctionDeclaration\") {","                functionOffset = options.FunctionDeclaration.body * indentSize;","            }","            indent += functionOffset;","","            // check if the node is inside a variable","            const parentVarNode = getVariableDeclaratorNode(node);","","            if (parentVarNode && isNodeInVarOnTop(node, parentVarNode)) {","                indent += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];","            }","","            if (node.body.length > 0) {","                checkNodesIndent(node.body, indent);","            }","","            checkLastNodeLineIndent(node, indent - functionOffset);","        }","","","        /**","         * Checks if the given node starts and ends on the same line","         * @param {ASTNode} node The node to check","         * @returns {boolean} Whether or not the block starts and ends on the same line.","         */","        function isSingleLineNode(node) {","            const lastToken = sourceCode.getLastToken(node),","                startLine = node.loc.start.line,","                endLine = lastToken.loc.end.line;","","            return startLine === endLine;","        }","","        /**","         * Check to see if the first element inside an array is an object and on the same line as the node","         * If the node is not an array then it will return false.","         * @param {ASTNode} node node to check","         * @returns {boolean} success/failure","         */","        function isFirstArrayElementOnSameLine(node) {","            if (node.type === \"ArrayExpression\" && node.elements[0]) {","                return node.elements[0].loc.start.line === node.loc.start.line && node.elements[0].type === \"ObjectExpression\";","            }","            return false;","","        }","","        /**","         * Check indent for array block content or object block content","         * @param {ASTNode} node node to examine","         * @returns {void}","         */","        function checkIndentInArrayOrObjectBlock(node) {","","            // Skip inline","            if (isSingleLineNode(node)) {","                return;","            }","","            let elements = (node.type === \"ArrayExpression\") ? node.elements : node.properties;","","            // filter out empty elements example would be [ , 2] so remove first element as espree considers it as null","            elements = elements.filter(elem => elem !== null);","","            let nodeIndent;","            let elementsIndent;","            const parentVarNode = getVariableDeclaratorNode(node);","","            // TODO - come up with a better strategy in future","            if (isNodeFirstInLine(node)) {","                const parent = node.parent;","","                nodeIndent = getNodeIndent(parent).goodChar;","                if (!parentVarNode || parentVarNode.loc.start.line !== node.loc.start.line) {","                    if (parent.type !== \"VariableDeclarator\" || parentVarNode === parentVarNode.parent.declarations[0]) {","                        if (parent.type === \"VariableDeclarator\" && parentVarNode.loc.start.line === parent.loc.start.line) {","                            nodeIndent = nodeIndent + (indentSize * options.VariableDeclarator[parentVarNode.parent.kind]);","                        } else if (parent.type === \"ObjectExpression\" || parent.type === \"ArrayExpression\") {","                            const parentElements = node.parent.type === \"ObjectExpression\" ? node.parent.properties : node.parent.elements;","","                            if (parentElements[0] && parentElements[0].loc.start.line === parent.loc.start.line && parentElements[0].loc.end.line !== parent.loc.start.line) {","","                                /*","                                 * If the first element of the array spans multiple lines, don't increase the expected indentation of the rest.","                                 * e.g. [{","                                 *        foo: 1","                                 *      },","                                 *      {","                                 *        bar: 1","                                 *      }]","                                 * the second object is not indented.","                                 */","                            } else if (typeof options[parent.type] === \"number\") {","                                nodeIndent += options[parent.type] * indentSize;","                            } else {","                                nodeIndent = parentElements[0].loc.start.column;","                            }","                        } else if (parent.type === \"CallExpression\" || parent.type === \"NewExpression\") {","                            if (typeof options.CallExpression.arguments === \"number\") {","                                nodeIndent += options.CallExpression.arguments * indentSize;","                            } else if (options.CallExpression.arguments === \"first\") {","                                if (parent.arguments.indexOf(node) !== -1) {","                                    nodeIndent = parent.arguments[0].loc.start.column;","                                }","                            } else {","                                nodeIndent += indentSize;","                            }","                        } else if (parent.type === \"LogicalExpression\" || parent.type === \"ArrowFunctionExpression\") {","                            nodeIndent += indentSize;","                        }","                    }","                } else if (!parentVarNode && !isFirstArrayElementOnSameLine(parent) && parent.type !== \"MemberExpression\" && parent.type !== \"ExpressionStatement\" && parent.type !== \"AssignmentExpression\" && parent.type !== \"Property\") {","                    nodeIndent = nodeIndent + indentSize;","                }","","                checkFirstNodeLineIndent(node, nodeIndent);","            } else {","                nodeIndent = getNodeIndent(node).goodChar;","            }","","            if (options[node.type] === \"first\") {","                elementsIndent = elements.length ? elements[0].loc.start.column : 0; // If there are no elements, elementsIndent doesn't matter.","            } else {","                elementsIndent = nodeIndent + indentSize * options[node.type];","            }","","            /*","             * Check if the node is a multiple variable declaration; if so, then","             * make sure indentation takes that into account.","             */","            if (isNodeInVarOnTop(node, parentVarNode)) {","                elementsIndent += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];","            }","","            checkNodesIndent(elements, elementsIndent);","","            if (elements.length > 0) {","","                // Skip last block line check if last item in same line","                if (elements[elements.length - 1].loc.end.line === node.loc.end.line) {","                    return;","                }","            }","","            checkLastNodeLineIndent(node, nodeIndent + (isNodeInVarOnTop(node, parentVarNode) ? options.VariableDeclarator[parentVarNode.parent.kind] * indentSize : 0));","        }","","        /**","         * Check if the node or node body is a BlockStatement or not","         * @param {ASTNode} node node to test","         * @returns {boolean} True if it or its body is a block statement","         */","        function isNodeBodyBlock(node) {","            return node.type === \"BlockStatement\" || node.type === \"ClassBody\" || (node.body && node.body.type === \"BlockStatement\") ||","                (node.consequent && node.consequent.type === \"BlockStatement\");","        }","","        /**","         * Check indentation for blocks","         * @param {ASTNode} node node to check","         * @returns {void}","         */","        function blockIndentationCheck(node) {","","            // Skip inline blocks","            if (isSingleLineNode(node)) {","                return;","            }","","            if (node.parent && (","                    node.parent.type === \"FunctionExpression\" ||","                    node.parent.type === \"FunctionDeclaration\" ||","                    node.parent.type === \"ArrowFunctionExpression\"","            )) {","                checkIndentInFunctionBlock(node);","                return;","            }","","            let indent;","            let nodesToCheck = [];","","            /*","             * For this statements we should check indent from statement beginning,","             * not from the beginning of the block.","             */","            const statementsWithProperties = [","                \"IfStatement\", \"WhileStatement\", \"ForStatement\", \"ForInStatement\", \"ForOfStatement\", \"DoWhileStatement\", \"ClassDeclaration\", \"TryStatement\"","            ];","","            if (node.parent && statementsWithProperties.indexOf(node.parent.type) !== -1 && isNodeBodyBlock(node)) {","                indent = getNodeIndent(node.parent).goodChar;","            } else if (node.parent && node.parent.type === \"CatchClause\") {","                indent = getNodeIndent(node.parent.parent).goodChar;","            } else {","                indent = getNodeIndent(node).goodChar;","            }","","            if (node.type === \"IfStatement\" && node.consequent.type !== \"BlockStatement\") {","                nodesToCheck = [node.consequent];","            } else if (Array.isArray(node.body)) {","                nodesToCheck = node.body;","            } else {","                nodesToCheck = [node.body];","            }","","            if (nodesToCheck.length > 0) {","                checkNodesIndent(nodesToCheck, indent + indentSize);","            }","","            if (node.type === \"BlockStatement\") {","                checkLastNodeLineIndent(node, indent);","            }","        }","","        /**","         * Filter out the elements which are on the same line of each other or the node.","         * basically have only 1 elements from each line except the variable declaration line.","         * @param {ASTNode} node Variable declaration node","         * @returns {ASTNode[]} Filtered elements","         */","        function filterOutSameLineVars(node) {","            return node.declarations.reduce((finalCollection, elem) => {","                const lastElem = finalCollection[finalCollection.length - 1];","","                if ((elem.loc.start.line !== node.loc.start.line && !lastElem) ||","                    (lastElem && lastElem.loc.start.line !== elem.loc.start.line)) {","                    finalCollection.push(elem);","                }","","                return finalCollection;","            }, []);","        }","","        /**","         * Check indentation for variable declarations","         * @param {ASTNode} node node to examine","         * @returns {void}","         */","        function checkIndentInVariableDeclarations(node) {","            const elements = filterOutSameLineVars(node);","            const nodeIndent = getNodeIndent(node).goodChar;","            const lastElement = elements[elements.length - 1];","","            const elementsIndent = nodeIndent + indentSize * options.VariableDeclarator[node.kind];","","            checkNodesIndent(elements, elementsIndent);","","            // Only check the last line if there is any token after the last item","            if (sourceCode.getLastToken(node).loc.end.line <= lastElement.loc.end.line) {","                return;","            }","","            const tokenBeforeLastElement = sourceCode.getTokenBefore(lastElement);","","            if (tokenBeforeLastElement.value === \",\") {","","                // Special case for comma-first syntax where the semicolon is indented","                checkLastNodeLineIndent(node, getNodeIndent(tokenBeforeLastElement).goodChar);","            } else {","                checkLastNodeLineIndent(node, elementsIndent - indentSize);","            }","        }","","        /**","         * Check and decide whether to check for indentation for blockless nodes","         * Scenarios are for or while statements without braces around them","         * @param {ASTNode} node node to examine","         * @returns {void}","         */","        function blockLessNodes(node) {","            if (node.body.type !== \"BlockStatement\") {","                blockIndentationCheck(node);","            }","        }","","        /**","         * Returns the expected indentation for the case statement","         * @param {ASTNode} node node to examine","         * @param {int} [switchIndent] indent for switch statement","         * @returns {int} indent size","         */","        function expectedCaseIndent(node, switchIndent) {","            const switchNode = (node.type === \"SwitchStatement\") ? node : node.parent;","            let caseIndent;","","            if (caseIndentStore[switchNode.loc.start.line]) {","                return caseIndentStore[switchNode.loc.start.line];","            }","            if (typeof switchIndent === \"undefined\") {","                switchIndent = getNodeIndent(switchNode).goodChar;","            }","","            if (switchNode.cases.length > 0 && options.SwitchCase === 0) {","                caseIndent = switchIndent;","            } else {","                caseIndent = switchIndent + (indentSize * options.SwitchCase);","            }","","            caseIndentStore[switchNode.loc.start.line] = caseIndent;","            return caseIndent;","","        }","","        /**","         * Checks wether a return statement is wrapped in ()","         * @param {ASTNode} node node to examine","         * @returns {boolean} the result","         */","        function isWrappedInParenthesis(node) {","            const regex = /^return\\s*?\\(\\s*?\\);*?/;","","            const statementWithoutArgument = sourceCode.getText(node).replace(","                sourceCode.getText(node.argument), \"\");","","            return regex.test(statementWithoutArgument);","        }","","        return {","            Program(node) {","                if (node.body.length > 0) {","","                    // Root nodes should have no indent","                    checkNodesIndent(node.body, getNodeIndent(node).goodChar);","                }","            },","","            ClassBody: blockIndentationCheck,","","            BlockStatement: blockIndentationCheck,","","            WhileStatement: blockLessNodes,","","            ForStatement: blockLessNodes,","","            ForInStatement: blockLessNodes,","","            ForOfStatement: blockLessNodes,","","            DoWhileStatement: blockLessNodes,","","            IfStatement(node) {","                if (node.consequent.type !== \"BlockStatement\" && node.consequent.loc.start.line > node.loc.start.line) {","                    blockIndentationCheck(node);","                }","            },","","            VariableDeclaration(node) {","                if (node.declarations[node.declarations.length - 1].loc.start.line > node.declarations[0].loc.start.line) {","                    checkIndentInVariableDeclarations(node);","                }","            },","","            ObjectExpression(node) {","                checkIndentInArrayOrObjectBlock(node);","            },","","            ArrayExpression(node) {","                checkIndentInArrayOrObjectBlock(node);","            },","","            MemberExpression(node) {","","                if (typeof options.MemberExpression === \"undefined\") {","                    return;","                }","","                if (isSingleLineNode(node)) {","                    return;","                }","","                // The typical layout of variable declarations and assignments","                // alter the expectation of correct indentation. Skip them.","                // TODO: Add appropriate configuration options for variable","                // declarations and assignments.","                if (getParentNodeByType(node, \"VariableDeclarator\", [\"FunctionExpression\", \"ArrowFunctionExpression\"])) {","                    return;","                }","","                if (getParentNodeByType(node, \"AssignmentExpression\", [\"FunctionExpression\"])) {","                    return;","                }","","                const propertyIndent = getNodeIndent(node).goodChar + indentSize * options.MemberExpression;","","                const checkNodes = [node.property];","","                const dot = context.getTokenBefore(node.property);","","                if (dot.type === \"Punctuator\" && dot.value === \".\") {","                    checkNodes.push(dot);","                }","","                checkNodesIndent(checkNodes, propertyIndent);","            },","","            SwitchStatement(node) {","","                // Switch is not a 'BlockStatement'","                const switchIndent = getNodeIndent(node).goodChar;","                const caseIndent = expectedCaseIndent(node, switchIndent);","","                checkNodesIndent(node.cases, caseIndent);","","","                checkLastNodeLineIndent(node, switchIndent);","            },","","            SwitchCase(node) {","","                // Skip inline cases","                if (isSingleLineNode(node)) {","                    return;","                }","                const caseIndent = expectedCaseIndent(node);","","                checkNodesIndent(node.consequent, caseIndent + indentSize);","            },","","            FunctionDeclaration(node) {","                if (isSingleLineNode(node)) {","                    return;","                }","                if (options.FunctionDeclaration.parameters === \"first\" && node.params.length) {","                    checkNodesIndent(node.params.slice(1), node.params[0].loc.start.column);","                } else if (options.FunctionDeclaration.parameters !== null) {","                    checkNodesIndent(node.params, getNodeIndent(node).goodChar + indentSize * options.FunctionDeclaration.parameters);","                }","            },","","            FunctionExpression(node) {","                if (isSingleLineNode(node)) {","                    return;","                }","                if (options.FunctionExpression.parameters === \"first\" && node.params.length) {","                    checkNodesIndent(node.params.slice(1), node.params[0].loc.start.column);","                } else if (options.FunctionExpression.parameters !== null) {","                    checkNodesIndent(node.params, getNodeIndent(node).goodChar + indentSize * options.FunctionExpression.parameters);","                }","            },","","            ReturnStatement(node) {","                if (isSingleLineNode(node)) {","                    return;","                }","","                const firstLineIndent = getNodeIndent(node).goodChar;","","                // in case if return statement is wrapped in parenthesis","                if (isWrappedInParenthesis(node)) {","                    checkLastReturnStatementLineIndent(node, firstLineIndent);","                } else {","                    checkNodeIndent(node, firstLineIndent);","                }","            },","","            CallExpression(node) {","                if (isSingleLineNode(node)) {","                    return;","                }","                if (options.CallExpression.arguments === \"first\" && node.arguments.length) {","                    checkNodesIndent(node.arguments.slice(1), node.arguments[0].loc.start.column);","                } else if (options.CallExpression.arguments !== null) {","                    checkNodesIndent(node.arguments, getNodeIndent(node).goodChar + indentSize * options.CallExpression.arguments);","                }","            }","","        };","","    }","};",""],"l":{"15":1,"21":1,"168":0,"169":0,"170":0,"172":0,"173":0,"174":0,"197":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"208":0,"209":0,"211":0,"212":0,"214":0,"215":0,"220":0,"221":0,"224":0,"225":0,"228":0,"229":0,"232":0,"233":0,"236":0,"237":0,"240":0,"241":0,"244":0,"245":0,"248":0,"249":0,"254":0,"263":1,"264":0,"265":0,"266":0,"267":0,"269":0,"270":0,"271":0,"275":0,"276":0,"277":0,"279":0,"282":0,"296":1,"297":0,"300":0,"303":0,"305":0,"309":0,"313":0,"326":1,"327":0,"328":0,"329":0,"330":0,"331":0,"333":0,"347":1,"348":0,"352":0,"362":1,"363":0,"365":0,"371":0,"374":0,"375":0,"377":0,"379":0,"380":0,"384":0,"385":0,"387":0,"390":0,"391":0,"393":0,"396":0,"397":0,"399":0,"410":1,"411":0,"420":1,"421":0,"422":0,"424":0,"425":0,"443":1,"447":0,"448":0,"450":0,"453":0,"456":0,"458":0,"459":0,"476":1,"477":0,"479":0,"480":0,"498":1,"499":0,"501":0,"502":0,"505":0,"506":0,"509":0,"518":1,"519":0,"529":1,"530":0,"541":1,"542":0,"544":0,"545":0,"548":0,"556":1,"557":0,"558":0,"563":0,"567":0,"573":0,"584":0,"587":0,"599":1,"614":0,"615":0,"617":0,"622":0,"626":0,"629":0,"630":0,"632":0,"633":0,"634":0,"637":0,"640":0,"647":0,"649":0,"650":0,"651":0,"652":0,"653":0,"654":0,"656":0,"659":0,"661":0,"662":0,"665":0,"666":0,"669":0,"678":1,"679":0,"683":0,"692":1,"693":0,"694":0,"696":0,"705":1,"708":0,"709":0,"712":0,"715":0,"717":0,"718":0,"719":0,"722":0,"723":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"731":0,"733":0,"745":0,"746":0,"748":0,"750":0,"751":0,"752":0,"753":0,"754":0,"755":0,"758":0,"760":0,"761":0,"764":0,"765":0,"768":0,"770":0,"773":0,"774":0,"776":0,"783":0,"784":0,"787":0,"789":0,"792":0,"793":0,"797":0,"805":1,"806":0,"815":1,"818":0,"819":0,"822":0,"827":0,"828":0,"831":0,"832":0,"838":0,"842":0,"843":0,"844":0,"845":0,"847":0,"850":0,"851":0,"852":0,"853":0,"855":0,"858":0,"859":0,"862":0,"863":0,"873":1,"874":0,"875":0,"877":0,"879":0,"882":0,"891":1,"892":0,"893":0,"894":0,"896":0,"898":0,"901":0,"902":0,"905":0,"907":0,"910":0,"912":0,"922":1,"923":0,"924":0,"934":1,"935":0,"936":0,"938":0,"939":0,"941":0,"942":0,"945":0,"946":0,"948":0,"951":0,"952":0,"961":1,"962":0,"964":0,"967":0,"970":0,"972":0,"975":0,"994":0,"995":0,"1000":0,"1001":0,"1006":0,"1010":0,"1015":0,"1016":0,"1019":0,"1020":0,"1027":0,"1028":0,"1031":0,"1032":0,"1035":0,"1037":0,"1039":0,"1041":0,"1042":0,"1045":0,"1051":0,"1052":0,"1054":0,"1057":0,"1063":0,"1064":0,"1066":0,"1068":0,"1072":0,"1073":0,"1075":0,"1076":0,"1077":0,"1078":0,"1083":0,"1084":0,"1086":0,"1087":0,"1088":0,"1089":0,"1094":0,"1095":0,"1098":0,"1101":0,"1102":0,"1104":0,"1109":0,"1110":0,"1112":0,"1113":0,"1114":0,"1115":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/init-declarations.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/init-declarations.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"isForLoop","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":26}}},"2":{"name":"isInitialized","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":29}}},"3":{"name":"(anonymous_3)","line":88,"loc":{"start":{"line":88,"column":10},"end":{"line":88,"column":20}}},"4":{"name":"(anonymous_4)","line":101,"loc":{"start":{"line":101,"column":38},"end":{"line":101,"column":45}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":21,"column":1}},"2":{"start":{"line":18,"column":4},"end":{"line":20,"column":34}},"3":{"start":{"line":28,"column":0},"end":{"line":39,"column":1}},"4":{"start":{"line":29,"column":4},"end":{"line":29,"column":36}},"5":{"start":{"line":30,"column":4},"end":{"line":30,"column":37}},"6":{"start":{"line":32,"column":4},"end":{"line":37,"column":5}},"7":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"8":{"start":{"line":34,"column":12},"end":{"line":34,"column":46}},"9":{"start":{"line":36,"column":8},"end":{"line":36,"column":42}},"10":{"start":{"line":38,"column":4},"end":{"line":38,"column":30}},"11":{"start":{"line":45,"column":0},"end":{"line":137,"column":2}},"12":{"start":{"line":90,"column":8},"end":{"line":91,"column":33}},"13":{"start":{"line":93,"column":8},"end":{"line":93,"column":55}},"14":{"start":{"line":94,"column":8},"end":{"line":94,"column":48}},"15":{"start":{"line":100,"column":8},"end":{"line":135,"column":10}},"16":{"start":{"line":103,"column":16},"end":{"line":104,"column":53}},"17":{"start":{"line":106,"column":16},"end":{"line":133,"column":17}},"18":{"start":{"line":107,"column":20},"end":{"line":110,"column":94}},"19":{"start":{"line":112,"column":20},"end":{"line":114,"column":21}},"20":{"start":{"line":113,"column":24},"end":{"line":113,"column":33}},"21":{"start":{"line":116,"column":20},"end":{"line":132,"column":21}},"22":{"start":{"line":117,"column":24},"end":{"line":123,"column":27}},"23":{"start":{"line":124,"column":27},"end":{"line":132,"column":21}},"24":{"start":{"line":125,"column":24},"end":{"line":131,"column":27}}},"branchMap":{"1":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":11},"end":{"line":18,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":35}},{"start":{"line":20,"column":4},"end":{"line":20,"column":33}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"4":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":21},"end":{"line":93,"column":39}},{"start":{"line":93,"column":43},"end":{"line":93,"column":54}}]},"5":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":23},"end":{"line":94,"column":41}},{"start":{"line":94,"column":45},"end":{"line":94,"column":47}}]},"6":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":43},"end":{"line":110,"column":67}},{"start":{"line":110,"column":71},"end":{"line":110,"column":93}}]},"7":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":20},"end":{"line":112,"column":20}},{"start":{"line":112,"column":20},"end":{"line":112,"column":20}}]},"8":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":20},"end":{"line":116,"column":20}},{"start":{"line":116,"column":20},"end":{"line":116,"column":20}}]},"9":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":24},"end":{"line":116,"column":44}},{"start":{"line":116,"column":48},"end":{"line":116,"column":60}}]},"10":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":27},"end":{"line":124,"column":27}},{"start":{"line":124,"column":27},"end":{"line":124,"column":27}}]},"11":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":31},"end":{"line":124,"column":50}},{"start":{"line":124,"column":54},"end":{"line":124,"column":70}},{"start":{"line":124,"column":74},"end":{"line":124,"column":85}},{"start":{"line":124,"column":89},"end":{"line":124,"column":106}}]}},"code":["/**"," * @fileoverview A rule to control the style of variable initializations."," * @author Colin Ihrig"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given node is a for loop."," * @param {ASTNode} block - A node to check."," * @returns {boolean} `true` when the node is a for loop."," */","function isForLoop(block) {","    return block.type === \"ForInStatement\" ||","    block.type === \"ForOfStatement\" ||","    block.type === \"ForStatement\";","}","","/**"," * Checks whether or not a given declarator node has its initializer."," * @param {ASTNode} node - A declarator node to check."," * @returns {boolean} `true` when the node has its initializer."," */","function isInitialized(node) {","    const declaration = node.parent;","    const block = declaration.parent;","","    if (isForLoop(block)) {","        if (block.type === \"ForStatement\") {","            return block.init === declaration;","        }","        return block.left === declaration;","    }","    return Boolean(node.init);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow initialization in variable declarations\",","            category: \"Variables\",","            recommended: false","        },","","        schema: {","            anyOf: [","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\"]","                        }","                    ],","                    minItems: 0,","                    maxItems: 1","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"never\"]","                        },","                        {","                            type: \"object\",","                            properties: {","                                ignoreForLoopInit: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        }","                    ],","                    minItems: 0,","                    maxItems: 2","                }","            ]","        }","    },","","    create(context) {","","        const MODE_ALWAYS = \"always\",","            MODE_NEVER = \"never\";","","        const mode = context.options[0] || MODE_ALWAYS;","        const params = context.options[1] || {};","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            \"VariableDeclaration:exit\"(node) {","","                const kind = node.kind,","                    declarations = node.declarations;","","                for (let i = 0; i < declarations.length; ++i) {","                    const declaration = declarations[i],","                        id = declaration.id,","                        initialized = isInitialized(declaration),","                        isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);","","                    if (id.type !== \"Identifier\") {","                        continue;","                    }","","                    if (mode === MODE_ALWAYS && !initialized) {","                        context.report({","                            node: declaration,","                            message: \"Variable '{{idName}}' should be initialized on declaration.\",","                            data: {","                                idName: id.name","                            }","                        });","                    } else if (mode === MODE_NEVER && kind !== \"const\" && initialized && !isIgnoredForLoop) {","                        context.report({","                            node: declaration,","                            message: \"Variable '{{idName}}' should not be initialized on declaration.\",","                            data: {","                                idName: id.name","                            }","                        });","                    }","                }","            }","        };","    }","};",""],"l":{"17":1,"18":0,"28":1,"29":0,"30":0,"32":0,"33":0,"34":0,"36":0,"38":0,"45":1,"90":0,"93":0,"94":0,"100":0,"103":0,"106":0,"107":0,"112":0,"113":0,"116":0,"117":0,"124":0,"125":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/jsx-quotes.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/jsx-quotes.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":15},"end":{"line":22,"column":21}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":15},"end":{"line":29,"column":21}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":10},"end":{"line":56,"column":20}}},"4":{"name":"usesExpectedQuotes","line":66,"loc":{"start":{"line":66,"column":8},"end":{"line":66,"column":42}}},"5":{"name":"(anonymous_5)","line":71,"loc":{"start":{"line":71,"column":24},"end":{"line":71,"column":31}}},"6":{"name":"(anonymous_6)","line":81,"loc":{"start":{"line":81,"column":27},"end":{"line":81,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":33,"column":2}},"3":{"start":{"line":23,"column":12},"end":{"line":23,"column":43}},"4":{"start":{"line":30,"column":12},"end":{"line":30,"column":42}},"5":{"start":{"line":39,"column":0},"end":{"line":89,"column":2}},"6":{"start":{"line":57,"column":8},"end":{"line":58,"column":50}},"7":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"8":{"start":{"line":67,"column":12},"end":{"line":67,"column":112}},"9":{"start":{"line":70,"column":8},"end":{"line":87,"column":10}},"10":{"start":{"line":72,"column":16},"end":{"line":72,"column":50}},"11":{"start":{"line":74,"column":16},"end":{"line":85,"column":17}},"12":{"start":{"line":75,"column":20},"end":{"line":84,"column":23}},"13":{"start":{"line":82,"column":28},"end":{"line":82,"column":106}}},"branchMap":{"1":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":28},"end":{"line":57,"column":46}},{"start":{"line":57,"column":50},"end":{"line":57,"column":65}}]},"2":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":19},"end":{"line":67,"column":59}},{"start":{"line":67,"column":63},"end":{"line":67,"column":111}}]},"3":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":16},"end":{"line":74,"column":16}},{"start":{"line":74,"column":16},"end":{"line":74,"column":16}}]},"4":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":20},"end":{"line":74,"column":34}},{"start":{"line":74,"column":38},"end":{"line":74,"column":78}},{"start":{"line":74,"column":82},"end":{"line":74,"column":117}}]}},"code":["/**"," * @fileoverview A rule to ensure consistent quotes used in jsx syntax."," * @author Mathias Schreck <https://github.com/lo1tuma>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const QUOTE_SETTINGS = {","    \"prefer-double\": {","        quote: \"\\\"\",","        description: \"singlequote\",","        convert(str) {","            return str.replace(/'/g, \"\\\"\");","        }","    },","    \"prefer-single\": {","        quote: \"'\",","        description: \"doublequote\",","        convert(str) {","            return str.replace(/\"/g, \"'\");","        }","    }","};","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce the consistent use of either double or single quotes in JSX attributes\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                enum: [\"prefer-single\", \"prefer-double\"]","            }","        ]","    },","","    create(context) {","        const quoteOption = context.options[0] || \"prefer-double\",","            setting = QUOTE_SETTINGS[quoteOption];","","        /**","         * Checks if the given string literal node uses the expected quotes","         * @param {ASTNode} node - A string literal node.","         * @returns {boolean} Whether or not the string literal used the expected quotes.","         * @public","         */","        function usesExpectedQuotes(node) {","            return node.value.indexOf(setting.quote) !== -1 || astUtils.isSurroundedBy(node.raw, setting.quote);","        }","","        return {","            JSXAttribute(node) {","                const attributeValue = node.value;","","                if (attributeValue && astUtils.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {","                    context.report({","                        node: attributeValue,","                        message: \"Unexpected usage of {{description}}.\",","                        data: {","                            description: setting.description","                        },","                        fix(fixer) {","                            return fixer.replaceText(attributeValue, setting.convert(attributeValue.raw));","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"12":1,"18":1,"23":0,"30":0,"39":1,"57":0,"66":1,"67":0,"70":0,"72":0,"74":0,"75":0,"82":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/key-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/key-spacing.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":1,"46":0,"47":0,"48":1,"49":0,"50":1,"51":0,"52":0,"53":1,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":1,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":0,"124":1,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0,0,0,0,0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"fnMap":{"1":{"name":"containsLineTerminator","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":37}}},"2":{"name":"last","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":19}}},"3":{"name":"continuesPropertyGroup","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":55}}},"4":{"name":"isSingleLine","line":76,"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":28}}},"5":{"name":"initOptionProperty","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":52}}},"6":{"name":"initOptions","line":126,"loc":{"start":{"line":126,"column":0},"end":{"line":126,"column":45}}},"7":{"name":"(anonymous_7)","line":335,"loc":{"start":{"line":335,"column":10},"end":{"line":335,"column":20}}},"8":{"name":"isKeyValueProperty","line":358,"loc":{"start":{"line":358,"column":8},"end":{"line":358,"column":46}}},"9":{"name":"getLastTokenBeforeColon","line":372,"loc":{"start":{"line":372,"column":8},"end":{"line":372,"column":47}}},"10":{"name":"getNextColon","line":384,"loc":{"start":{"line":384,"column":8},"end":{"line":384,"column":36}}},"11":{"name":"getKey","line":393,"loc":{"start":{"line":393,"column":8},"end":{"line":393,"column":34}}},"12":{"name":"report","line":413,"loc":{"start":{"line":413,"column":8},"end":{"line":413,"column":68}}},"13":{"name":"(anonymous_13)","line":440,"loc":{"start":{"line":440,"column":26},"end":{"line":440,"column":42}}},"14":{"name":"(anonymous_14)","line":447,"loc":{"start":{"line":447,"column":30},"end":{"line":447,"column":46}}},"15":{"name":"(anonymous_15)","line":451,"loc":{"start":{"line":451,"column":30},"end":{"line":451,"column":46}}},"16":{"name":"getKeyWidth","line":477,"loc":{"start":{"line":477,"column":8},"end":{"line":477,"column":39}}},"17":{"name":"getPropertyWhitespace","line":489,"loc":{"start":{"line":489,"column":8},"end":{"line":489,"column":49}}},"18":{"name":"createGroups","line":508,"loc":{"start":{"line":508,"column":8},"end":{"line":508,"column":36}}},"19":{"name":"verifyGroupAlignment","line":534,"loc":{"start":{"line":534,"column":8},"end":{"line":534,"column":50}}},"20":{"name":"verifyAlignment","line":577,"loc":{"start":{"line":577,"column":8},"end":{"line":577,"column":39}}},"21":{"name":"verifySpacing","line":589,"loc":{"start":{"line":589,"column":8},"end":{"line":589,"column":50}}},"22":{"name":"verifyListSpacing","line":603,"loc":{"start":{"line":603,"column":8},"end":{"line":603,"column":47}}},"23":{"name":"(anonymous_23)","line":618,"loc":{"start":{"line":618,"column":32},"end":{"line":618,"column":39}}},"24":{"name":"(anonymous_24)","line":631,"loc":{"start":{"line":631,"column":20},"end":{"line":631,"column":27}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":23,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":24,"column":4},"end":{"line":24,"column":48}},"4":{"start":{"line":32,"column":0},"end":{"line":34,"column":1}},"5":{"start":{"line":33,"column":4},"end":{"line":33,"column":31}},"6":{"start":{"line":42,"column":0},"end":{"line":69,"column":1}},"7":{"start":{"line":43,"column":4},"end":{"line":44,"column":54}},"8":{"start":{"line":46,"column":4},"end":{"line":48,"column":5}},"9":{"start":{"line":47,"column":8},"end":{"line":47,"column":20}},"10":{"start":{"line":53,"column":4},"end":{"line":53,"column":47}},"11":{"start":{"line":55,"column":4},"end":{"line":66,"column":5}},"12":{"start":{"line":60,"column":8},"end":{"line":64,"column":9}},"13":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"14":{"start":{"line":62,"column":16},"end":{"line":62,"column":29}},"15":{"start":{"line":65,"column":8},"end":{"line":65,"column":20}},"16":{"start":{"line":68,"column":4},"end":{"line":68,"column":17}},"17":{"start":{"line":76,"column":0},"end":{"line":78,"column":1}},"18":{"start":{"line":77,"column":4},"end":{"line":77,"column":55}},"19":{"start":{"line":86,"column":0},"end":{"line":118,"column":1}},"20":{"start":{"line":87,"column":4},"end":{"line":87,"column":50}},"21":{"start":{"line":90,"column":4},"end":{"line":94,"column":5}},"22":{"start":{"line":91,"column":8},"end":{"line":91,"column":57}},"23":{"start":{"line":93,"column":8},"end":{"line":93,"column":34}},"24":{"start":{"line":97,"column":4},"end":{"line":101,"column":5}},"25":{"start":{"line":98,"column":8},"end":{"line":98,"column":55}},"26":{"start":{"line":100,"column":8},"end":{"line":100,"column":33}},"27":{"start":{"line":104,"column":4},"end":{"line":115,"column":5}},"28":{"start":{"line":105,"column":8},"end":{"line":114,"column":9}},"29":{"start":{"line":106,"column":12},"end":{"line":106,"column":48}},"30":{"start":{"line":108,"column":12},"end":{"line":113,"column":14}},"31":{"start":{"line":117,"column":4},"end":{"line":117,"column":21}},"32":{"start":{"line":126,"column":0},"end":{"line":153,"column":1}},"33":{"start":{"line":127,"column":4},"end":{"line":150,"column":5}},"34":{"start":{"line":130,"column":8},"end":{"line":130,"column":68}},"35":{"start":{"line":131,"column":8},"end":{"line":131,"column":61}},"36":{"start":{"line":132,"column":8},"end":{"line":132,"column":66}},"37":{"start":{"line":134,"column":8},"end":{"line":134,"column":93}},"38":{"start":{"line":135,"column":8},"end":{"line":135,"column":95}},"39":{"start":{"line":138,"column":8},"end":{"line":138,"column":93}},"40":{"start":{"line":139,"column":8},"end":{"line":139,"column":95}},"41":{"start":{"line":142,"column":8},"end":{"line":149,"column":9}},"42":{"start":{"line":143,"column":12},"end":{"line":148,"column":14}},"43":{"start":{"line":152,"column":4},"end":{"line":152,"column":21}},"44":{"start":{"line":159,"column":0},"end":{"line":162,"column":2}},"45":{"start":{"line":164,"column":0},"end":{"line":639,"column":2}},"46":{"start":{"line":345,"column":8},"end":{"line":349,"column":57}},"47":{"start":{"line":351,"column":8},"end":{"line":351,"column":51}},"48":{"start":{"line":358,"column":8},"end":{"line":364,"column":9}},"49":{"start":{"line":359,"column":12},"end":{"line":363,"column":14}},"50":{"start":{"line":372,"column":8},"end":{"line":376,"column":9}},"51":{"start":{"line":373,"column":12},"end":{"line":373,"column":85}},"52":{"start":{"line":375,"column":12},"end":{"line":375,"column":57}},"53":{"start":{"line":384,"column":8},"end":{"line":386,"column":9}},"54":{"start":{"line":385,"column":12},"end":{"line":385,"column":73}},"55":{"start":{"line":393,"column":8},"end":{"line":401,"column":9}},"56":{"start":{"line":394,"column":12},"end":{"line":394,"column":37}},"57":{"start":{"line":396,"column":12},"end":{"line":398,"column":13}},"58":{"start":{"line":397,"column":16},"end":{"line":397,"column":78}},"59":{"start":{"line":400,"column":12},"end":{"line":400,"column":59}},"60":{"start":{"line":413,"column":8},"end":{"line":469,"column":9}},"61":{"start":{"line":414,"column":12},"end":{"line":422,"column":54}},"62":{"start":{"line":423,"column":12},"end":{"line":423,"column":20}},"63":{"start":{"line":425,"column":12},"end":{"line":468,"column":13}},"64":{"start":{"line":431,"column":16},"end":{"line":455,"column":17}},"65":{"start":{"line":432,"column":20},"end":{"line":432,"column":30}},"66":{"start":{"line":435,"column":20},"end":{"line":439,"column":21}},"67":{"start":{"line":436,"column":24},"end":{"line":436,"column":87}},"68":{"start":{"line":438,"column":24},"end":{"line":438,"column":89}},"69":{"start":{"line":440,"column":20},"end":{"line":442,"column":22}},"70":{"start":{"line":441,"column":24},"end":{"line":441,"column":56}},"71":{"start":{"line":446,"column":20},"end":{"line":454,"column":21}},"72":{"start":{"line":447,"column":24},"end":{"line":449,"column":26}},"73":{"start":{"line":448,"column":28},"end":{"line":448,"column":83}},"74":{"start":{"line":451,"column":24},"end":{"line":453,"column":26}},"75":{"start":{"line":452,"column":28},"end":{"line":452,"column":83}},"76":{"start":{"line":457,"column":16},"end":{"line":467,"column":19}},"77":{"start":{"line":477,"column":8},"end":{"line":482,"column":9}},"78":{"start":{"line":478,"column":12},"end":{"line":478,"column":66}},"79":{"start":{"line":479,"column":12},"end":{"line":479,"column":67}},"80":{"start":{"line":481,"column":12},"end":{"line":481,"column":59}},"81":{"start":{"line":489,"column":8},"end":{"line":501,"column":9}},"82":{"start":{"line":490,"column":12},"end":{"line":492,"column":15}},"83":{"start":{"line":494,"column":12},"end":{"line":499,"column":13}},"84":{"start":{"line":495,"column":16},"end":{"line":498,"column":18}},"85":{"start":{"line":500,"column":12},"end":{"line":500,"column":24}},"86":{"start":{"line":508,"column":8},"end":{"line":527,"column":9}},"87":{"start":{"line":509,"column":12},"end":{"line":511,"column":13}},"88":{"start":{"line":510,"column":16},"end":{"line":510,"column":41}},"89":{"start":{"line":513,"column":12},"end":{"line":526,"column":15}},"90":{"start":{"line":514,"column":16},"end":{"line":515,"column":46}},"91":{"start":{"line":517,"column":16},"end":{"line":521,"column":17}},"92":{"start":{"line":518,"column":20},"end":{"line":518,"column":48}},"93":{"start":{"line":520,"column":20},"end":{"line":520,"column":44}},"94":{"start":{"line":523,"column":16},"end":{"line":523,"column":30}},"95":{"start":{"line":534,"column":8},"end":{"line":570,"column":9}},"96":{"start":{"line":535,"column":12},"end":{"line":537,"column":44}},"97":{"start":{"line":538,"column":12},"end":{"line":539,"column":46}},"98":{"start":{"line":541,"column":12},"end":{"line":549,"column":13}},"99":{"start":{"line":542,"column":16},"end":{"line":542,"column":59}},"100":{"start":{"line":543,"column":16},"end":{"line":543,"column":57}},"101":{"start":{"line":544,"column":16},"end":{"line":544,"column":45}},"102":{"start":{"line":546,"column":16},"end":{"line":546,"column":59}},"103":{"start":{"line":547,"column":16},"end":{"line":547,"column":57}},"104":{"start":{"line":548,"column":16},"end":{"line":548,"column":45}},"105":{"start":{"line":552,"column":12},"end":{"line":552,"column":74}},"106":{"start":{"line":554,"column":12},"end":{"line":569,"column":13}},"107":{"start":{"line":555,"column":16},"end":{"line":555,"column":47}},"108":{"start":{"line":556,"column":16},"end":{"line":556,"column":67}},"109":{"start":{"line":558,"column":16},"end":{"line":568,"column":17}},"110":{"start":{"line":559,"column":20},"end":{"line":559,"column":44}},"111":{"start":{"line":561,"column":20},"end":{"line":567,"column":21}},"112":{"start":{"line":562,"column":24},"end":{"line":562,"column":91}},"113":{"start":{"line":563,"column":24},"end":{"line":563,"column":100}},"114":{"start":{"line":565,"column":24},"end":{"line":565,"column":99}},"115":{"start":{"line":566,"column":24},"end":{"line":566,"column":91}},"116":{"start":{"line":577,"column":8},"end":{"line":581,"column":9}},"117":{"start":{"line":578,"column":12},"end":{"line":580,"column":15}},"118":{"start":{"line":579,"column":16},"end":{"line":579,"column":71}},"119":{"start":{"line":589,"column":8},"end":{"line":596,"column":9}},"120":{"start":{"line":590,"column":12},"end":{"line":590,"column":55}},"121":{"start":{"line":592,"column":12},"end":{"line":595,"column":13}},"122":{"start":{"line":593,"column":16},"end":{"line":593,"column":99}},"123":{"start":{"line":594,"column":16},"end":{"line":594,"column":99}},"124":{"start":{"line":603,"column":8},"end":{"line":609,"column":9}},"125":{"start":{"line":604,"column":12},"end":{"line":604,"column":45}},"126":{"start":{"line":606,"column":12},"end":{"line":608,"column":13}},"127":{"start":{"line":607,"column":16},"end":{"line":607,"column":64}},"128":{"start":{"line":615,"column":8},"end":{"line":627,"column":9}},"129":{"start":{"line":617,"column":12},"end":{"line":625,"column":14}},"130":{"start":{"line":619,"column":20},"end":{"line":623,"column":21}},"131":{"start":{"line":620,"column":24},"end":{"line":620,"column":86}},"132":{"start":{"line":622,"column":24},"end":{"line":622,"column":46}},"133":{"start":{"line":630,"column":8},"end":{"line":634,"column":10}},"134":{"start":{"line":632,"column":16},"end":{"line":632,"column":102}}},"branchMap":{"1":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"2":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"3":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":16}},{"start":{"line":57,"column":8},"end":{"line":57,"column":54}},{"start":{"line":58,"column":8},"end":{"line":58,"column":61}}]},"4":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":12}},{"start":{"line":61,"column":12},"end":{"line":61,"column":12}}]},"5":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":21},"end":{"line":87,"column":37}},{"start":{"line":87,"column":41},"end":{"line":87,"column":49}}]},"6":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]},"7":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"8":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":104,"column":4}},{"start":{"line":104,"column":4},"end":{"line":104,"column":4}}]},"9":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":8}},{"start":{"line":105,"column":8},"end":{"line":105,"column":8}}]},"10":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":127,"column":4}},{"start":{"line":127,"column":4},"end":{"line":127,"column":4}}]},"11":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":29},"end":{"line":131,"column":49}},{"start":{"line":131,"column":53},"end":{"line":131,"column":60}}]},"12":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":31},"end":{"line":132,"column":53}},{"start":{"line":132,"column":57},"end":{"line":132,"column":65}}]},"13":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":54},"end":{"line":134,"column":75}},{"start":{"line":134,"column":79},"end":{"line":134,"column":90}}]},"14":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":55},"end":{"line":135,"column":77}},{"start":{"line":135,"column":81},"end":{"line":135,"column":92}}]},"15":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":54},"end":{"line":138,"column":75}},{"start":{"line":138,"column":79},"end":{"line":138,"column":90}}]},"16":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":55},"end":{"line":139,"column":77}},{"start":{"line":139,"column":81},"end":{"line":139,"column":92}}]},"17":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":8},"end":{"line":142,"column":8}},{"start":{"line":142,"column":8},"end":{"line":142,"column":8}}]},"18":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":22},"end":{"line":145,"column":52}},{"start":{"line":145,"column":56},"end":{"line":145,"column":80}}]},"19":{"line":345,"type":"binary-expr","locations":[{"start":{"line":345,"column":24},"end":{"line":345,"column":42}},{"start":{"line":345,"column":46},"end":{"line":345,"column":48}}]},"20":{"line":349,"type":"binary-expr","locations":[{"start":{"line":349,"column":31},"end":{"line":349,"column":48}},{"start":{"line":349,"column":52},"end":{"line":349,"column":56}}]},"21":{"line":360,"type":"binary-expr","locations":[{"start":{"line":360,"column":17},"end":{"line":360,"column":32}},{"start":{"line":361,"column":16},"end":{"line":361,"column":34}},{"start":{"line":362,"column":16},"end":{"line":362,"column":40}},{"start":{"line":362,"column":44},"end":{"line":362,"column":72}}]},"22":{"line":396,"type":"if","locations":[{"start":{"line":396,"column":12},"end":{"line":396,"column":12}},{"start":{"line":396,"column":12},"end":{"line":396,"column":12}}]},"23":{"line":400,"type":"binary-expr","locations":[{"start":{"line":400,"column":19},"end":{"line":400,"column":36}},{"start":{"line":400,"column":40},"end":{"line":400,"column":58}}]},"24":{"line":419,"type":"cond-expr","locations":[{"start":{"line":419,"column":39},"end":{"line":419,"column":65}},{"start":{"line":419,"column":68},"end":{"line":419,"column":93}}]},"25":{"line":425,"type":"if","locations":[{"start":{"line":425,"column":12},"end":{"line":425,"column":12}},{"start":{"line":425,"column":12},"end":{"line":425,"column":12}}]},"26":{"line":425,"type":"binary-expr","locations":[{"start":{"line":426,"column":16},"end":{"line":426,"column":20}},{"start":{"line":426,"column":24},"end":{"line":426,"column":41}},{"start":{"line":427,"column":16},"end":{"line":427,"column":24}},{"start":{"line":427,"column":28},"end":{"line":427,"column":46}},{"start":{"line":428,"column":16},"end":{"line":428,"column":24}},{"start":{"line":428,"column":28},"end":{"line":428,"column":37}},{"start":{"line":428,"column":41},"end":{"line":428,"column":59}},{"start":{"line":429,"column":16},"end":{"line":429,"column":65}}]},"27":{"line":429,"type":"binary-expr","locations":[{"start":{"line":429,"column":18},"end":{"line":429,"column":26}},{"start":{"line":429,"column":30},"end":{"line":429,"column":64}}]},"28":{"line":431,"type":"if","locations":[{"start":{"line":431,"column":16},"end":{"line":431,"column":16}},{"start":{"line":431,"column":16},"end":{"line":431,"column":16}}]},"29":{"line":435,"type":"if","locations":[{"start":{"line":435,"column":20},"end":{"line":435,"column":20}},{"start":{"line":435,"column":20},"end":{"line":435,"column":20}}]},"30":{"line":446,"type":"if","locations":[{"start":{"line":446,"column":20},"end":{"line":446,"column":20}},{"start":{"line":446,"column":20},"end":{"line":446,"column":20}}]},"31":{"line":462,"type":"cond-expr","locations":[{"start":{"line":462,"column":41},"end":{"line":462,"column":48}},{"start":{"line":462,"column":51},"end":{"line":462,"column":60}}]},"32":{"line":463,"type":"cond-expr","locations":[{"start":{"line":463,"column":54},"end":{"line":463,"column":65}},{"start":{"line":463,"column":68},"end":{"line":463,"column":70}}]},"33":{"line":494,"type":"if","locations":[{"start":{"line":494,"column":12},"end":{"line":494,"column":12}},{"start":{"line":494,"column":12},"end":{"line":494,"column":12}}]},"34":{"line":509,"type":"if","locations":[{"start":{"line":509,"column":12},"end":{"line":509,"column":12}},{"start":{"line":509,"column":12},"end":{"line":509,"column":12}}]},"35":{"line":517,"type":"if","locations":[{"start":{"line":517,"column":16},"end":{"line":517,"column":16}},{"start":{"line":517,"column":16},"end":{"line":517,"column":16}}]},"36":{"line":517,"type":"binary-expr","locations":[{"start":{"line":517,"column":20},"end":{"line":517,"column":25}},{"start":{"line":517,"column":29},"end":{"line":517,"column":67}}]},"37":{"line":541,"type":"if","locations":[{"start":{"line":541,"column":12},"end":{"line":541,"column":12}},{"start":{"line":541,"column":12},"end":{"line":541,"column":12}}]},"38":{"line":541,"type":"binary-expr","locations":[{"start":{"line":541,"column":16},"end":{"line":541,"column":32}},{"start":{"line":541,"column":36},"end":{"line":541,"column":46}}]},"39":{"line":552,"type":"cond-expr","locations":[{"start":{"line":552,"column":48},"end":{"line":552,"column":59}},{"start":{"line":552,"column":62},"end":{"line":552,"column":72}}]},"40":{"line":558,"type":"if","locations":[{"start":{"line":558,"column":16},"end":{"line":558,"column":16}},{"start":{"line":558,"column":16},"end":{"line":558,"column":16}}]},"41":{"line":561,"type":"if","locations":[{"start":{"line":561,"column":20},"end":{"line":561,"column":20}},{"start":{"line":561,"column":20},"end":{"line":561,"column":20}}]},"42":{"line":592,"type":"if","locations":[{"start":{"line":592,"column":12},"end":{"line":592,"column":12}},{"start":{"line":592,"column":12},"end":{"line":592,"column":12}}]},"43":{"line":615,"type":"if","locations":[{"start":{"line":615,"column":8},"end":{"line":615,"column":8}},{"start":{"line":615,"column":8},"end":{"line":615,"column":8}}]},"44":{"line":619,"type":"if","locations":[{"start":{"line":619,"column":20},"end":{"line":619,"column":20}},{"start":{"line":619,"column":20},"end":{"line":619,"column":20}}]},"45":{"line":632,"type":"cond-expr","locations":[{"start":{"line":632,"column":64},"end":{"line":632,"column":81}},{"start":{"line":632,"column":84},"end":{"line":632,"column":100}}]}},"code":["/**"," * @fileoverview Rule to specify spacing of object literal keys and values"," * @author Brandon Mills"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether a string contains a line terminator as defined in"," * http://www.ecma-international.org/ecma-262/5.1/#sec-7.3"," * @param {string} str String to test."," * @returns {boolean} True if str contains a line terminator."," */","function containsLineTerminator(str) {","    return astUtils.LINEBREAK_MATCHER.test(str);","}","","/**"," * Gets the last element of an array."," * @param {Array} arr An array."," * @returns {any} Last element of arr."," */","function last(arr) {","    return arr[arr.length - 1];","}","","/**"," * Checks whether a property is a member of the property group it follows."," * @param {ASTNode} lastMember The last Property known to be in the group."," * @param {ASTNode} candidate The next Property that might be in the group."," * @returns {boolean} True if the candidate property is part of the group."," */","function continuesPropertyGroup(lastMember, candidate) {","    const groupEndLine = lastMember.loc.start.line,","        candidateStartLine = candidate.loc.start.line;","","    if (candidateStartLine - groupEndLine <= 1) {","        return true;","    }","","    // Check that the first comment is adjacent to the end of the group, the","    // last comment is adjacent to the candidate property, and that successive","    // comments are adjacent to each other.","    const comments = candidate.leadingComments;","","    if (","        comments &&","        comments[0].loc.start.line - groupEndLine <= 1 &&","        candidateStartLine - last(comments).loc.end.line <= 1","    ) {","        for (let i = 1; i < comments.length; i++) {","            if (comments[i].loc.start.line - comments[i - 1].loc.end.line > 1) {","                return false;","            }","        }","        return true;","    }","","    return false;","}","","/**"," * Checks whether a node is contained on a single line."," * @param {ASTNode} node AST Node being evaluated."," * @returns {boolean} True if the node is a single line."," */","function isSingleLine(node) {","    return (node.loc.end.line === node.loc.start.line);","}","","/**"," * Initializes a single option property from the configuration with defaults for undefined values"," * @param {Object} toOptions Object to be initialized"," * @param {Object} fromOptions Object to be initialized from"," * @returns {Object} The object with correctly initialized options and values"," */","function initOptionProperty(toOptions, fromOptions) {","    toOptions.mode = fromOptions.mode || \"strict\";","","    // Set value of beforeColon","    if (typeof fromOptions.beforeColon !== \"undefined\") {","        toOptions.beforeColon = +fromOptions.beforeColon;","    } else {","        toOptions.beforeColon = 0;","    }","","    // Set value of afterColon","    if (typeof fromOptions.afterColon !== \"undefined\") {","        toOptions.afterColon = +fromOptions.afterColon;","    } else {","        toOptions.afterColon = 1;","    }","","    // Set align if exists","    if (typeof fromOptions.align !== \"undefined\") {","        if (typeof fromOptions.align === \"object\") {","            toOptions.align = fromOptions.align;","        } else { // \"string\"","            toOptions.align = {","                on: fromOptions.align,","                mode: toOptions.mode,","                beforeColon: toOptions.beforeColon,","                afterColon: toOptions.afterColon","            };","        }","    }","","    return toOptions;","}","","/**"," * Initializes all the option values (singleLine, multiLine and align) from the configuration with defaults for undefined values"," * @param {Object} toOptions Object to be initialized"," * @param {Object} fromOptions Object to be initialized from"," * @returns {Object} The object with correctly initialized options and values"," */","function initOptions(toOptions, fromOptions) {","    if (typeof fromOptions.align === \"object\") {","","        // Initialize the alignment configuration","        toOptions.align = initOptionProperty({}, fromOptions.align);","        toOptions.align.on = fromOptions.align.on || \"colon\";","        toOptions.align.mode = fromOptions.align.mode || \"strict\";","","        toOptions.multiLine = initOptionProperty({}, (fromOptions.multiLine || fromOptions));","        toOptions.singleLine = initOptionProperty({}, (fromOptions.singleLine || fromOptions));","","    } else { // string or undefined","        toOptions.multiLine = initOptionProperty({}, (fromOptions.multiLine || fromOptions));","        toOptions.singleLine = initOptionProperty({}, (fromOptions.singleLine || fromOptions));","","        // If alignment options are defined in multiLine, pull them out into the general align configuration","        if (toOptions.multiLine.align) {","            toOptions.align = {","                on: toOptions.multiLine.align.on,","                mode: toOptions.multiLine.align.mode || toOptions.multiLine.mode,","                beforeColon: toOptions.multiLine.align.beforeColon,","                afterColon: toOptions.multiLine.align.afterColon","            };","        }","    }","","    return toOptions;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const messages = {","    key: \"{{error}} space after {{computed}}key '{{key}}'.\",","    value: \"{{error}} space before value for {{computed}}key '{{key}}'.\"","};","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing between keys and values in object literal properties\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [{","            anyOf: [","                {","                    type: \"object\",","                    properties: {","                        align: {","                            anyOf: [","                                {","                                    enum: [\"colon\", \"value\"]","                                },","                                {","                                    type: \"object\",","                                    properties: {","                                        mode: {","                                            enum: [\"strict\", \"minimum\"]","                                        },","                                        on: {","                                            enum: [\"colon\", \"value\"]","                                        },","                                        beforeColon: {","                                            type: \"boolean\"","                                        },","                                        afterColon: {","                                            type: \"boolean\"","                                        }","                                    },","                                    additionalProperties: false","                                }","                            ]","                        },","                        mode: {","                            enum: [\"strict\", \"minimum\"]","                        },","                        beforeColon: {","                            type: \"boolean\"","                        },","                        afterColon: {","                            type: \"boolean\"","                        }","                    },","                    additionalProperties: false","                },","                {","                    type: \"object\",","                    properties: {","                        singleLine: {","                            type: \"object\",","                            properties: {","                                mode: {","                                    enum: [\"strict\", \"minimum\"]","                                },","                                beforeColon: {","                                    type: \"boolean\"","                                },","                                afterColon: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        },","                        multiLine: {","                            type: \"object\",","                            properties: {","                                align: {","                                    anyOf: [","                                        {","                                            enum: [\"colon\", \"value\"]","                                        },","                                        {","                                            type: \"object\",","                                            properties: {","                                                mode: {","                                                    enum: [\"strict\", \"minimum\"]","                                                },","                                                on: {","                                                    enum: [\"colon\", \"value\"]","                                                },","                                                beforeColon: {","                                                    type: \"boolean\"","                                                },","                                                afterColon: {","                                                    type: \"boolean\"","                                                }","                                            },","                                            additionalProperties: false","                                        }","                                    ]","                                },","                                mode: {","                                    enum: [\"strict\", \"minimum\"]","                                },","                                beforeColon: {","                                    type: \"boolean\"","                                },","                                afterColon: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        }","                    },","                    additionalProperties: false","                },","                {","                    type: \"object\",","                    properties: {","                        singleLine: {","                            type: \"object\",","                            properties: {","                                mode: {","                                    enum: [\"strict\", \"minimum\"]","                                },","                                beforeColon: {","                                    type: \"boolean\"","                                },","                                afterColon: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        },","                        multiLine: {","                            type: \"object\",","                            properties: {","                                mode: {","                                    enum: [\"strict\", \"minimum\"]","                                },","                                beforeColon: {","                                    type: \"boolean\"","                                },","                                afterColon: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        },","                        align: {","                            type: \"object\",","                            properties: {","                                mode: {","                                    enum: [\"strict\", \"minimum\"]","                                },","                                on: {","                                    enum: [\"colon\", \"value\"]","                                },","                                beforeColon: {","                                    type: \"boolean\"","                                },","                                afterColon: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        }","                    },","                    additionalProperties: false","                }","            ]","        }]","    },","","    create(context) {","","        /**","         * OPTIONS","         * \"key-spacing\": [2, {","         *     beforeColon: false,","         *     afterColon: true,","         *     align: \"colon\" // Optional, or \"value\"","         * }","         */","        const options = context.options[0] || {},","            ruleOptions = initOptions({}, options),","            multiLineOptions = ruleOptions.multiLine,","            singleLineOptions = ruleOptions.singleLine,","            alignmentOptions = ruleOptions.align || null;","","        const sourceCode = context.getSourceCode();","","        /**","         * Determines if the given property is key-value property.","         * @param {ASTNode} property Property node to check.","         * @returns {boolean} Whether the property is a key-value property.","         */","        function isKeyValueProperty(property) {","            return !(","                (property.method ||","                property.shorthand ||","                property.kind !== \"init\" || property.type !== \"Property\") // Could be \"ExperimentalSpreadProperty\" or \"SpreadProperty\"","            );","        }","","        /**","         * Starting from the given a node (a property.key node here) looks forward","         * until it finds the last token before a colon punctuator and returns it.","         * @param {ASTNode} node The node to start looking from.","         * @returns {ASTNode} The last token before a colon punctuator.","         */","        function getLastTokenBeforeColon(node) {","            const colonToken = sourceCode.getTokenAfter(node, astUtils.isColonToken);","","            return sourceCode.getTokenBefore(colonToken);","        }","","        /**","         * Starting from the given a node (a property.key node here) looks forward","         * until it finds the colon punctuator and returns it.","         * @param {ASTNode} node The node to start looking from.","         * @returns {ASTNode} The colon punctuator.","         */","        function getNextColon(node) {","            return sourceCode.getTokenAfter(node, astUtils.isColonToken);","        }","","        /**","         * Gets an object literal property's key as the identifier name or string value.","         * @param {ASTNode} property Property node whose key to retrieve.","         * @returns {string} The property's key.","         */","        function getKey(property) {","            const key = property.key;","","            if (property.computed) {","                return sourceCode.getText().slice(key.range[0], key.range[1]);","            }","","            return property.key.name || property.key.value;","        }","","        /**","         * Reports an appropriately-formatted error if spacing is incorrect on one","         * side of the colon.","         * @param {ASTNode} property Key-value pair in an object literal.","         * @param {string} side Side being verified - either \"key\" or \"value\".","         * @param {string} whitespace Actual whitespace string.","         * @param {int} expected Expected whitespace length.","         * @param {string} mode Value of the mode as \"strict\" or \"minimum\"","         * @returns {void}","         */","        function report(property, side, whitespace, expected, mode) {","            const diff = whitespace.length - expected,","                nextColon = getNextColon(property.key),","                tokenBeforeColon = sourceCode.getTokenBefore(nextColon, { includeComments: true }),","                tokenAfterColon = sourceCode.getTokenAfter(nextColon, { includeComments: true }),","                isKeySide = side === \"key\",","                locStart = isKeySide ? tokenBeforeColon.loc.start : tokenAfterColon.loc.start,","                isExtra = diff > 0,","                diffAbs = Math.abs(diff),","                spaces = Array(diffAbs + 1).join(\" \");","            let fix;","","            if ((","                diff && mode === \"strict\" ||","                diff < 0 && mode === \"minimum\" ||","                diff > 0 && !expected && mode === \"minimum\") &&","                !(expected && containsLineTerminator(whitespace))","            ) {","                if (isExtra) {","                    let range;","","                    // Remove whitespace","                    if (isKeySide) {","                        range = [tokenBeforeColon.end, tokenBeforeColon.end + diffAbs];","                    } else {","                        range = [tokenAfterColon.start - diffAbs, tokenAfterColon.start];","                    }","                    fix = function(fixer) {","                        return fixer.removeRange(range);","                    };","                } else {","","                    // Add whitespace","                    if (isKeySide) {","                        fix = function(fixer) {","                            return fixer.insertTextAfter(tokenBeforeColon, spaces);","                        };","                    } else {","                        fix = function(fixer) {","                            return fixer.insertTextBefore(tokenAfterColon, spaces);","                        };","                    }","                }","","                context.report({","                    node: property[side],","                    loc: locStart,","                    message: messages[side],","                    data: {","                        error: isExtra ? \"Extra\" : \"Missing\",","                        computed: property.computed ? \"computed \" : \"\",","                        key: getKey(property)","                    },","                    fix","                });","            }","        }","","        /**","         * Gets the number of characters in a key, including quotes around string","         * keys and braces around computed property keys.","         * @param {ASTNode} property Property of on object literal.","         * @returns {int} Width of the key.","         */","        function getKeyWidth(property) {","            const startToken = sourceCode.getFirstToken(property);","            const endToken = getLastTokenBeforeColon(property.key);","","            return endToken.range[1] - startToken.range[0];","        }","","        /**","         * Gets the whitespace around the colon in an object literal property.","         * @param {ASTNode} property Property node from an object literal.","         * @returns {Object} Whitespace before and after the property's colon.","         */","        function getPropertyWhitespace(property) {","            const whitespace = /(\\s*):(\\s*)/.exec(sourceCode.getText().slice(","                property.key.range[1], property.value.range[0]","            ));","","            if (whitespace) {","                return {","                    beforeColon: whitespace[1],","                    afterColon: whitespace[2]","                };","            }","            return null;","        }","","        /**","         * Creates groups of properties.","         * @param  {ASTNode} node ObjectExpression node being evaluated.","         * @returns {Array.<ASTNode[]>} Groups of property AST node lists.","         */","        function createGroups(node) {","            if (node.properties.length === 1) {","                return [node.properties];","            }","","            return node.properties.reduce((groups, property) => {","                const currentGroup = last(groups),","                    prev = last(currentGroup);","","                if (!prev || continuesPropertyGroup(prev, property)) {","                    currentGroup.push(property);","                } else {","                    groups.push([property]);","                }","","                return groups;","            }, [","                []","            ]);","        }","","        /**","         * Verifies correct vertical alignment of a group of properties.","         * @param {ASTNode[]} properties List of Property AST nodes.","         * @returns {void}","         */","        function verifyGroupAlignment(properties) {","            const length = properties.length,","                widths = properties.map(getKeyWidth), // Width of keys, including quotes","                align = alignmentOptions.on; // \"value\" or \"colon\"","            let targetWidth = Math.max.apply(null, widths),","                beforeColon, afterColon, mode;","","            if (alignmentOptions && length > 1) { // When aligning values within a group, use the alignment configuration.","                beforeColon = alignmentOptions.beforeColon;","                afterColon = alignmentOptions.afterColon;","                mode = alignmentOptions.mode;","            } else {","                beforeColon = multiLineOptions.beforeColon;","                afterColon = multiLineOptions.afterColon;","                mode = alignmentOptions.mode;","            }","","            // Conditionally include one space before or after colon","            targetWidth += (align === \"colon\" ? beforeColon : afterColon);","","            for (let i = 0; i < length; i++) {","                const property = properties[i];","                const whitespace = getPropertyWhitespace(property);","","                if (whitespace) { // Object literal getters/setters lack a colon","                    const width = widths[i];","","                    if (align === \"value\") {","                        report(property, \"key\", whitespace.beforeColon, beforeColon, mode);","                        report(property, \"value\", whitespace.afterColon, targetWidth - width, mode);","                    } else { // align = \"colon\"","                        report(property, \"key\", whitespace.beforeColon, targetWidth - width, mode);","                        report(property, \"value\", whitespace.afterColon, afterColon, mode);","                    }","                }","            }","        }","","        /**","         * Verifies vertical alignment, taking into account groups of properties.","         * @param  {ASTNode} node ObjectExpression node being evaluated.","         * @returns {void}","         */","        function verifyAlignment(node) {","            createGroups(node).forEach(group => {","                verifyGroupAlignment(group.filter(isKeyValueProperty));","            });","        }","","        /**","         * Verifies spacing of property conforms to specified options.","         * @param  {ASTNode} node Property node being evaluated.","         * @param {Object} lineOptions Configured singleLine or multiLine options","         * @returns {void}","         */","        function verifySpacing(node, lineOptions) {","            const actual = getPropertyWhitespace(node);","","            if (actual) { // Object literal getters/setters lack colons","                report(node, \"key\", actual.beforeColon, lineOptions.beforeColon, lineOptions.mode);","                report(node, \"value\", actual.afterColon, lineOptions.afterColon, lineOptions.mode);","            }","        }","","        /**","         * Verifies spacing of each property in a list.","         * @param  {ASTNode[]} properties List of Property AST nodes.","         * @returns {void}","         */","        function verifyListSpacing(properties) {","            const length = properties.length;","","            for (let i = 0; i < length; i++) {","                verifySpacing(properties[i], singleLineOptions);","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        if (alignmentOptions) { // Verify vertical alignment","","            return {","                ObjectExpression(node) {","                    if (isSingleLine(node)) {","                        verifyListSpacing(node.properties.filter(isKeyValueProperty));","                    } else {","                        verifyAlignment(node);","                    }","                }","            };","","        }","","        // Obey beforeColon and afterColon in each property as configured","        return {","            Property(node) {","                verifySpacing(node, isSingleLine(node.parent) ? singleLineOptions : multiLineOptions);","            }","        };","","","","    }","};",""],"l":{"11":1,"23":1,"24":0,"32":1,"33":0,"42":1,"43":0,"46":0,"47":0,"53":0,"55":0,"60":0,"61":0,"62":0,"65":0,"68":0,"76":1,"77":0,"86":1,"87":0,"90":0,"91":0,"93":0,"97":0,"98":0,"100":0,"104":0,"105":0,"106":0,"108":0,"117":0,"126":1,"127":0,"130":0,"131":0,"132":0,"134":0,"135":0,"138":0,"139":0,"142":0,"143":0,"152":0,"159":1,"164":1,"345":0,"351":0,"358":1,"359":0,"372":1,"373":0,"375":0,"384":1,"385":0,"393":1,"394":0,"396":0,"397":0,"400":0,"413":1,"414":0,"423":0,"425":0,"431":0,"432":0,"435":0,"436":0,"438":0,"440":0,"441":0,"446":0,"447":0,"448":0,"451":0,"452":0,"457":0,"477":1,"478":0,"479":0,"481":0,"489":1,"490":0,"494":0,"495":0,"500":0,"508":1,"509":0,"510":0,"513":0,"514":0,"517":0,"518":0,"520":0,"523":0,"534":1,"535":0,"538":0,"541":0,"542":0,"543":0,"544":0,"546":0,"547":0,"548":0,"552":0,"554":0,"555":0,"556":0,"558":0,"559":0,"561":0,"562":0,"563":0,"565":0,"566":0,"577":1,"578":0,"579":0,"589":1,"590":0,"592":0,"593":0,"594":0,"603":1,"604":0,"606":0,"607":0,"615":0,"617":0,"619":0,"620":0,"622":0,"630":0,"632":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/keyword-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/keyword-spacing.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":67,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1,"20":68,"21":68,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":1,"66":0,"67":1,"68":0,"69":0,"70":1,"71":0,"72":0,"73":0,"74":1,"75":0,"76":0,"77":0,"78":1,"79":0,"80":0,"81":0,"82":1,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":1,"90":0,"91":0,"92":1,"93":0,"94":0,"95":0,"96":1,"97":0,"98":0,"99":1,"100":0,"101":0,"102":1,"103":0,"104":0,"105":1,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":1,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0,"129":0},"b":{"1":[0,67],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0,0,0,0],"40":[0,0,0,0],"41":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":1},"end":{"line":29,"column":12}}},"2":{"name":"isOpenParenOfTemplate","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":38}}},"3":{"name":"isCloseParenOfTemplate","line":58,"loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":39}}},"4":{"name":"(anonymous_4)","line":103,"loc":{"start":{"line":103,"column":10},"end":{"line":103,"column":20}}},"5":{"name":"expectSpaceBefore","line":114,"loc":{"start":{"line":114,"column":8},"end":{"line":114,"column":51}}},"6":{"name":"(anonymous_6)","line":129,"loc":{"start":{"line":129,"column":23},"end":{"line":129,"column":31}}},"7":{"name":"unexpectSpaceBefore","line":144,"loc":{"start":{"line":144,"column":8},"end":{"line":144,"column":53}}},"8":{"name":"(anonymous_8)","line":159,"loc":{"start":{"line":159,"column":23},"end":{"line":159,"column":31}}},"9":{"name":"expectSpaceAfter","line":174,"loc":{"start":{"line":174,"column":8},"end":{"line":174,"column":50}}},"10":{"name":"(anonymous_10)","line":189,"loc":{"start":{"line":189,"column":23},"end":{"line":189,"column":31}}},"11":{"name":"unexpectSpaceAfter","line":204,"loc":{"start":{"line":204,"column":8},"end":{"line":204,"column":52}}},"12":{"name":"(anonymous_12)","line":219,"loc":{"start":{"line":219,"column":23},"end":{"line":219,"column":31}}},"13":{"name":"parseOptions","line":234,"loc":{"start":{"line":234,"column":8},"end":{"line":234,"column":39}}},"14":{"name":"checkSpacingBefore","line":275,"loc":{"start":{"line":275,"column":8},"end":{"line":275,"column":52}}},"15":{"name":"checkSpacingAfter","line":288,"loc":{"start":{"line":288,"column":8},"end":{"line":288,"column":51}}},"16":{"name":"checkSpacingAround","line":298,"loc":{"start":{"line":298,"column":8},"end":{"line":298,"column":43}}},"17":{"name":"checkSpacingAroundFirstToken","line":310,"loc":{"start":{"line":310,"column":8},"end":{"line":310,"column":52}}},"18":{"name":"checkSpacingBeforeFirstToken","line":328,"loc":{"start":{"line":328,"column":8},"end":{"line":328,"column":52}}},"19":{"name":"checkSpacingAroundTokenBefore","line":343,"loc":{"start":{"line":343,"column":8},"end":{"line":343,"column":53}}},"20":{"name":"checkSpacingForFunction","line":358,"loc":{"start":{"line":358,"column":8},"end":{"line":358,"column":47}}},"21":{"name":"checkSpacingForClass","line":376,"loc":{"start":{"line":376,"column":8},"end":{"line":376,"column":44}}},"22":{"name":"checkSpacingForIfStatement","line":388,"loc":{"start":{"line":388,"column":8},"end":{"line":388,"column":50}}},"23":{"name":"checkSpacingForTryStatement","line":400,"loc":{"start":{"line":400,"column":8},"end":{"line":400,"column":51}}},"24":{"name":"checkSpacingForDoWhileStatement","line":413,"loc":{"start":{"line":413,"column":8},"end":{"line":413,"column":55}}},"25":{"name":"checkSpacingForForInStatement","line":425,"loc":{"start":{"line":425,"column":8},"end":{"line":425,"column":53}}},"26":{"name":"checkSpacingForForOfStatement","line":437,"loc":{"start":{"line":437,"column":8},"end":{"line":437,"column":53}}},"27":{"name":"checkSpacingForModuleDeclaration","line":454,"loc":{"start":{"line":454,"column":8},"end":{"line":454,"column":56}}},"28":{"name":"checkSpacingForImportNamespaceSpecifier","line":475,"loc":{"start":{"line":475,"column":8},"end":{"line":475,"column":63}}},"29":{"name":"checkSpacingForProperty","line":488,"loc":{"start":{"line":488,"column":8},"end":{"line":488,"column":47}}},"30":{"name":"checkSpacingForAwaitExpression","line":529,"loc":{"start":{"line":529,"column":8},"end":{"line":529,"column":54}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":43}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":46}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":34}},"5":{"start":{"line":22,"column":0},"end":{"line":22,"column":30}},"6":{"start":{"line":23,"column":0},"end":{"line":23,"column":36}},"7":{"start":{"line":24,"column":0},"end":{"line":24,"column":35}},"8":{"start":{"line":25,"column":0},"end":{"line":25,"column":72}},"9":{"start":{"line":26,"column":0},"end":{"line":26,"column":99}},"10":{"start":{"line":29,"column":0},"end":{"line":36,"column":5}},"11":{"start":{"line":30,"column":4},"end":{"line":30,"column":16}},"12":{"start":{"line":31,"column":4},"end":{"line":35,"column":5}},"13":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"14":{"start":{"line":33,"column":12},"end":{"line":33,"column":85}},"15":{"start":{"line":48,"column":0},"end":{"line":50,"column":1}},"16":{"start":{"line":49,"column":4},"end":{"line":49,"column":78}},"17":{"start":{"line":58,"column":0},"end":{"line":60,"column":1}},"18":{"start":{"line":59,"column":4},"end":{"line":59,"column":79}},"19":{"start":{"line":66,"column":0},"end":{"line":584,"column":2}},"20":{"start":{"line":85,"column":28},"end":{"line":92,"column":30}},"21":{"start":{"line":93,"column":28},"end":{"line":93,"column":40}},"22":{"start":{"line":104,"column":8},"end":{"line":104,"column":51}},"23":{"start":{"line":114,"column":8},"end":{"line":134,"column":9}},"24":{"start":{"line":115,"column":12},"end":{"line":115,"column":44}},"25":{"start":{"line":117,"column":12},"end":{"line":117,"column":63}},"26":{"start":{"line":119,"column":12},"end":{"line":133,"column":13}},"27":{"start":{"line":125,"column":16},"end":{"line":132,"column":19}},"28":{"start":{"line":130,"column":24},"end":{"line":130,"column":66}},"29":{"start":{"line":144,"column":8},"end":{"line":164,"column":9}},"30":{"start":{"line":145,"column":12},"end":{"line":145,"column":44}},"31":{"start":{"line":147,"column":12},"end":{"line":147,"column":63}},"32":{"start":{"line":149,"column":12},"end":{"line":163,"column":13}},"33":{"start":{"line":155,"column":16},"end":{"line":162,"column":19}},"34":{"start":{"line":160,"column":24},"end":{"line":160,"column":87}},"35":{"start":{"line":174,"column":8},"end":{"line":194,"column":9}},"36":{"start":{"line":175,"column":12},"end":{"line":175,"column":44}},"37":{"start":{"line":177,"column":12},"end":{"line":177,"column":62}},"38":{"start":{"line":179,"column":12},"end":{"line":193,"column":13}},"39":{"start":{"line":185,"column":16},"end":{"line":192,"column":19}},"40":{"start":{"line":190,"column":24},"end":{"line":190,"column":65}},"41":{"start":{"line":204,"column":8},"end":{"line":224,"column":9}},"42":{"start":{"line":205,"column":12},"end":{"line":205,"column":44}},"43":{"start":{"line":207,"column":12},"end":{"line":207,"column":62}},"44":{"start":{"line":209,"column":12},"end":{"line":223,"column":13}},"45":{"start":{"line":215,"column":16},"end":{"line":222,"column":19}},"46":{"start":{"line":220,"column":24},"end":{"line":220,"column":87}},"47":{"start":{"line":234,"column":8},"end":{"line":262,"column":9}},"48":{"start":{"line":235,"column":12},"end":{"line":235,"column":64}},"49":{"start":{"line":236,"column":12},"end":{"line":236,"column":62}},"50":{"start":{"line":237,"column":12},"end":{"line":240,"column":14}},"51":{"start":{"line":241,"column":12},"end":{"line":241,"column":67}},"52":{"start":{"line":242,"column":12},"end":{"line":242,"column":45}},"53":{"start":{"line":244,"column":12},"end":{"line":259,"column":13}},"54":{"start":{"line":245,"column":16},"end":{"line":245,"column":36}},"55":{"start":{"line":246,"column":16},"end":{"line":246,"column":48}},"56":{"start":{"line":248,"column":16},"end":{"line":258,"column":17}},"57":{"start":{"line":249,"column":20},"end":{"line":249,"column":89}},"58":{"start":{"line":250,"column":20},"end":{"line":250,"column":85}},"59":{"start":{"line":252,"column":20},"end":{"line":255,"column":22}},"60":{"start":{"line":257,"column":20},"end":{"line":257,"column":45}},"61":{"start":{"line":261,"column":12},"end":{"line":261,"column":24}},"62":{"start":{"line":264,"column":8},"end":{"line":264,"column":64}},"63":{"start":{"line":275,"column":8},"end":{"line":277,"column":9}},"64":{"start":{"line":276,"column":12},"end":{"line":276,"column":63}},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9}},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":62}},"67":{"start":{"line":298,"column":8},"end":{"line":301,"column":9}},"68":{"start":{"line":299,"column":12},"end":{"line":299,"column":38}},"69":{"start":{"line":300,"column":12},"end":{"line":300,"column":37}},"70":{"start":{"line":310,"column":8},"end":{"line":316,"column":9}},"71":{"start":{"line":311,"column":12},"end":{"line":311,"column":70}},"72":{"start":{"line":313,"column":12},"end":{"line":315,"column":13}},"73":{"start":{"line":314,"column":16},"end":{"line":314,"column":47}},"74":{"start":{"line":328,"column":8},"end":{"line":334,"column":9}},"75":{"start":{"line":329,"column":12},"end":{"line":329,"column":70}},"76":{"start":{"line":331,"column":12},"end":{"line":333,"column":13}},"77":{"start":{"line":332,"column":16},"end":{"line":332,"column":47}},"78":{"start":{"line":343,"column":8},"end":{"line":349,"column":9}},"79":{"start":{"line":344,"column":12},"end":{"line":348,"column":13}},"80":{"start":{"line":345,"column":16},"end":{"line":345,"column":87}},"81":{"start":{"line":347,"column":16},"end":{"line":347,"column":42}},"82":{"start":{"line":358,"column":8},"end":{"line":367,"column":9}},"83":{"start":{"line":359,"column":12},"end":{"line":359,"column":70}},"84":{"start":{"line":361,"column":12},"end":{"line":366,"column":13}},"85":{"start":{"line":365,"column":16},"end":{"line":365,"column":47}},"86":{"start":{"line":376,"column":8},"end":{"line":379,"column":9}},"87":{"start":{"line":377,"column":12},"end":{"line":377,"column":47}},"88":{"start":{"line":378,"column":12},"end":{"line":378,"column":59}},"89":{"start":{"line":388,"column":8},"end":{"line":391,"column":9}},"90":{"start":{"line":389,"column":12},"end":{"line":389,"column":47}},"91":{"start":{"line":390,"column":12},"end":{"line":390,"column":58}},"92":{"start":{"line":400,"column":8},"end":{"line":404,"column":9}},"93":{"start":{"line":401,"column":12},"end":{"line":401,"column":47}},"94":{"start":{"line":402,"column":12},"end":{"line":402,"column":55}},"95":{"start":{"line":403,"column":12},"end":{"line":403,"column":58}},"96":{"start":{"line":413,"column":8},"end":{"line":416,"column":9}},"97":{"start":{"line":414,"column":12},"end":{"line":414,"column":47}},"98":{"start":{"line":415,"column":12},"end":{"line":415,"column":53}},"99":{"start":{"line":425,"column":8},"end":{"line":428,"column":9}},"100":{"start":{"line":426,"column":12},"end":{"line":426,"column":47}},"101":{"start":{"line":427,"column":12},"end":{"line":427,"column":54}},"102":{"start":{"line":437,"column":8},"end":{"line":440,"column":9}},"103":{"start":{"line":438,"column":12},"end":{"line":438,"column":47}},"104":{"start":{"line":439,"column":12},"end":{"line":439,"column":103}},"105":{"start":{"line":454,"column":8},"end":{"line":466,"column":9}},"106":{"start":{"line":455,"column":12},"end":{"line":455,"column":62}},"107":{"start":{"line":457,"column":12},"end":{"line":457,"column":57}},"108":{"start":{"line":458,"column":12},"end":{"line":458,"column":56}},"109":{"start":{"line":460,"column":12},"end":{"line":465,"column":13}},"110":{"start":{"line":461,"column":16},"end":{"line":461,"column":73}},"111":{"start":{"line":463,"column":16},"end":{"line":463,"column":60}},"112":{"start":{"line":464,"column":16},"end":{"line":464,"column":59}},"113":{"start":{"line":475,"column":8},"end":{"line":479,"column":9}},"114":{"start":{"line":476,"column":12},"end":{"line":476,"column":62}},"115":{"start":{"line":478,"column":12},"end":{"line":478,"column":54}},"116":{"start":{"line":488,"column":8},"end":{"line":520,"column":9}},"117":{"start":{"line":489,"column":12},"end":{"line":491,"column":13}},"118":{"start":{"line":490,"column":16},"end":{"line":490,"column":51}},"119":{"start":{"line":492,"column":12},"end":{"line":519,"column":13}},"120":{"start":{"line":499,"column":16},"end":{"line":511,"column":18}},"121":{"start":{"line":502,"column":24},"end":{"line":509,"column":25}},"122":{"start":{"line":506,"column":32},"end":{"line":506,"column":44}},"123":{"start":{"line":508,"column":32},"end":{"line":508,"column":45}},"124":{"start":{"line":513,"column":16},"end":{"line":515,"column":17}},"125":{"start":{"line":514,"column":20},"end":{"line":514,"column":98}},"126":{"start":{"line":518,"column":16},"end":{"line":518,"column":42}},"127":{"start":{"line":529,"column":8},"end":{"line":531,"column":9}},"128":{"start":{"line":530,"column":12},"end":{"line":530,"column":63}},"129":{"start":{"line":533,"column":8},"end":{"line":582,"column":10}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"2":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":11},"end":{"line":49,"column":36}},{"start":{"line":49,"column":40},"end":{"line":49,"column":77}}]},"3":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":11},"end":{"line":59,"column":36}},{"start":{"line":59,"column":40},"end":{"line":59,"column":78}}]},"4":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":22},"end":{"line":115,"column":29}},{"start":{"line":115,"column":33},"end":{"line":115,"column":43}}]},"5":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":12},"end":{"line":119,"column":12}},{"start":{"line":119,"column":12},"end":{"line":119,"column":12}}]},"6":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":16},"end":{"line":119,"column":25}},{"start":{"line":120,"column":17},"end":{"line":120,"column":48}},{"start":{"line":120,"column":52},"end":{"line":120,"column":81}},{"start":{"line":121,"column":16},"end":{"line":121,"column":49}},{"start":{"line":122,"column":16},"end":{"line":122,"column":60}},{"start":{"line":123,"column":16},"end":{"line":123,"column":66}}]},"7":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":22},"end":{"line":145,"column":29}},{"start":{"line":145,"column":33},"end":{"line":145,"column":43}}]},"8":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":12},"end":{"line":149,"column":12}},{"start":{"line":149,"column":12},"end":{"line":149,"column":12}}]},"9":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":16},"end":{"line":149,"column":25}},{"start":{"line":150,"column":17},"end":{"line":150,"column":48}},{"start":{"line":150,"column":52},"end":{"line":150,"column":81}},{"start":{"line":151,"column":16},"end":{"line":151,"column":49}},{"start":{"line":152,"column":16},"end":{"line":152,"column":60}},{"start":{"line":153,"column":16},"end":{"line":153,"column":65}}]},"10":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":22},"end":{"line":175,"column":29}},{"start":{"line":175,"column":33},"end":{"line":175,"column":43}}]},"11":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":12},"end":{"line":179,"column":12}},{"start":{"line":179,"column":12},"end":{"line":179,"column":12}}]},"12":{"line":179,"type":"binary-expr","locations":[{"start":{"line":179,"column":16},"end":{"line":179,"column":25}},{"start":{"line":180,"column":17},"end":{"line":180,"column":48}},{"start":{"line":180,"column":52},"end":{"line":180,"column":81}},{"start":{"line":181,"column":16},"end":{"line":181,"column":50}},{"start":{"line":182,"column":16},"end":{"line":182,"column":60}},{"start":{"line":183,"column":16},"end":{"line":183,"column":66}}]},"13":{"line":205,"type":"binary-expr","locations":[{"start":{"line":205,"column":22},"end":{"line":205,"column":29}},{"start":{"line":205,"column":33},"end":{"line":205,"column":43}}]},"14":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":12},"end":{"line":209,"column":12}},{"start":{"line":209,"column":12},"end":{"line":209,"column":12}}]},"15":{"line":209,"type":"binary-expr","locations":[{"start":{"line":209,"column":16},"end":{"line":209,"column":25}},{"start":{"line":210,"column":17},"end":{"line":210,"column":48}},{"start":{"line":210,"column":52},"end":{"line":210,"column":81}},{"start":{"line":211,"column":16},"end":{"line":211,"column":50}},{"start":{"line":212,"column":16},"end":{"line":212,"column":60}},{"start":{"line":213,"column":16},"end":{"line":213,"column":65}}]},"16":{"line":235,"type":"binary-expr","locations":[{"start":{"line":235,"column":27},"end":{"line":235,"column":35}},{"start":{"line":235,"column":39},"end":{"line":235,"column":63}}]},"17":{"line":236,"type":"binary-expr","locations":[{"start":{"line":236,"column":26},"end":{"line":236,"column":34}},{"start":{"line":236,"column":38},"end":{"line":236,"column":61}}]},"18":{"line":238,"type":"cond-expr","locations":[{"start":{"line":238,"column":33},"end":{"line":238,"column":50}},{"start":{"line":238,"column":53},"end":{"line":238,"column":72}}]},"19":{"line":239,"type":"cond-expr","locations":[{"start":{"line":239,"column":31},"end":{"line":239,"column":47}},{"start":{"line":239,"column":50},"end":{"line":239,"column":68}}]},"20":{"line":241,"type":"binary-expr","locations":[{"start":{"line":241,"column":31},"end":{"line":241,"column":38}},{"start":{"line":241,"column":42},"end":{"line":241,"column":59}},{"start":{"line":241,"column":64},"end":{"line":241,"column":66}}]},"21":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":16},"end":{"line":248,"column":16}},{"start":{"line":248,"column":16},"end":{"line":248,"column":16}}]},"22":{"line":249,"type":"cond-expr","locations":[{"start":{"line":249,"column":64},"end":{"line":249,"column":79}},{"start":{"line":249,"column":82},"end":{"line":249,"column":88}}]},"23":{"line":250,"type":"cond-expr","locations":[{"start":{"line":250,"column":62},"end":{"line":250,"column":76}},{"start":{"line":250,"column":79},"end":{"line":250,"column":84}}]},"24":{"line":253,"type":"cond-expr","locations":[{"start":{"line":253,"column":45},"end":{"line":253,"column":62}},{"start":{"line":253,"column":65},"end":{"line":253,"column":84}}]},"25":{"line":254,"type":"cond-expr","locations":[{"start":{"line":254,"column":43},"end":{"line":254,"column":59}},{"start":{"line":254,"column":62},"end":{"line":254,"column":80}}]},"26":{"line":311,"type":"binary-expr","locations":[{"start":{"line":311,"column":31},"end":{"line":311,"column":35}},{"start":{"line":311,"column":39},"end":{"line":311,"column":69}}]},"27":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":12},"end":{"line":313,"column":12}},{"start":{"line":313,"column":12},"end":{"line":313,"column":12}}]},"28":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":16},"end":{"line":313,"column":26}},{"start":{"line":313,"column":30},"end":{"line":313,"column":59}}]},"29":{"line":329,"type":"binary-expr","locations":[{"start":{"line":329,"column":31},"end":{"line":329,"column":35}},{"start":{"line":329,"column":39},"end":{"line":329,"column":69}}]},"30":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":12},"end":{"line":331,"column":12}},{"start":{"line":331,"column":12},"end":{"line":331,"column":12}}]},"31":{"line":331,"type":"binary-expr","locations":[{"start":{"line":331,"column":16},"end":{"line":331,"column":26}},{"start":{"line":331,"column":30},"end":{"line":331,"column":59}}]},"32":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":12},"end":{"line":344,"column":12}},{"start":{"line":344,"column":12},"end":{"line":344,"column":12}}]},"33":{"line":359,"type":"binary-expr","locations":[{"start":{"line":359,"column":31},"end":{"line":359,"column":35}},{"start":{"line":359,"column":39},"end":{"line":359,"column":69}}]},"34":{"line":361,"type":"if","locations":[{"start":{"line":361,"column":12},"end":{"line":361,"column":12}},{"start":{"line":361,"column":12},"end":{"line":361,"column":12}}]},"35":{"line":361,"type":"binary-expr","locations":[{"start":{"line":361,"column":16},"end":{"line":361,"column":26}},{"start":{"line":362,"column":18},"end":{"line":362,"column":47}},{"start":{"line":362,"column":51},"end":{"line":362,"column":82}},{"start":{"line":363,"column":16},"end":{"line":363,"column":44}}]},"36":{"line":460,"type":"if","locations":[{"start":{"line":460,"column":12},"end":{"line":460,"column":12}},{"start":{"line":460,"column":12},"end":{"line":460,"column":12}}]},"37":{"line":489,"type":"if","locations":[{"start":{"line":489,"column":12},"end":{"line":489,"column":12}},{"start":{"line":489,"column":12},"end":{"line":489,"column":12}}]},"38":{"line":492,"type":"if","locations":[{"start":{"line":492,"column":12},"end":{"line":492,"column":12}},{"start":{"line":492,"column":12},"end":{"line":492,"column":12}}]},"39":{"line":492,"type":"binary-expr","locations":[{"start":{"line":492,"column":16},"end":{"line":492,"column":35}},{"start":{"line":493,"column":16},"end":{"line":493,"column":35}},{"start":{"line":495,"column":21},"end":{"line":495,"column":32}},{"start":{"line":495,"column":36},"end":{"line":495,"column":68}},{"start":{"line":496,"column":20},"end":{"line":496,"column":36}}]},"40":{"line":502,"type":"switch","locations":[{"start":{"line":503,"column":28},"end":{"line":503,"column":39}},{"start":{"line":504,"column":28},"end":{"line":504,"column":39}},{"start":{"line":505,"column":28},"end":{"line":506,"column":44}},{"start":{"line":507,"column":28},"end":{"line":508,"column":45}}]},"41":{"line":513,"type":"if","locations":[{"start":{"line":513,"column":16},"end":{"line":513,"column":16}},{"start":{"line":513,"column":16},"end":{"line":513,"column":16}}]}},"code":["/**"," * @fileoverview Rule to enforce spacing before and after keywords."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\"),","    keywords = require(\"../util/keywords\");","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const PREV_TOKEN = /^[)\\]}>]$/;","const NEXT_TOKEN = /^(?:[([{<~!]|\\+\\+?|--?)$/;","const PREV_TOKEN_M = /^[)\\]}>*]$/;","const NEXT_TOKEN_M = /^[{*]$/;","const TEMPLATE_OPEN_PAREN = /\\$\\{$/;","const TEMPLATE_CLOSE_PAREN = /^\\}/;","const CHECK_TYPE = /^(?:JSXElement|RegularExpression|String|Template)$/;","const KEYS = keywords.concat([\"as\", \"async\", \"await\", \"from\", \"get\", \"let\", \"of\", \"set\", \"yield\"]);","","// check duplications.","(function() {","    KEYS.sort();","    for (let i = 1; i < KEYS.length; ++i) {","        if (KEYS[i] === KEYS[i - 1]) {","            throw new Error(`Duplication was found in the keyword list: ${KEYS[i]}`);","        }","    }","}());","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given token is a \"Template\" token ends with \"${\"."," *"," * @param {Token} token - A token to check."," * @returns {boolean} `true` if the token is a \"Template\" token ends with \"${\"."," */","function isOpenParenOfTemplate(token) {","    return token.type === \"Template\" && TEMPLATE_OPEN_PAREN.test(token.value);","}","","/**"," * Checks whether or not a given token is a \"Template\" token starts with \"}\"."," *"," * @param {Token} token - A token to check."," * @returns {boolean} `true` if the token is a \"Template\" token starts with \"}\"."," */","function isCloseParenOfTemplate(token) {","    return token.type === \"Template\" && TEMPLATE_CLOSE_PAREN.test(token.value);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing before and after keywords\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    before: { type: \"boolean\" },","                    after: { type: \"boolean\" },","                    overrides: {","                        type: \"object\",","                        properties: KEYS.reduce((retv, key) => {","                            retv[key] = {","                                type: \"object\",","                                properties: {","                                    before: { type: \"boolean\" },","                                    after: { type: \"boolean\" }","                                },","                                additionalProperties: false","                            };","                            return retv;","                        }, {}),","                        additionalProperties: false","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        /**","         * Reports a given token if there are not space(s) before the token.","         *","         * @param {Token} token - A token to report.","         * @param {RegExp|undefined} pattern - Optional. A pattern of the previous","         *      token to check.","         * @returns {void}","         */","        function expectSpaceBefore(token, pattern) {","            pattern = pattern || PREV_TOKEN;","","            const prevToken = sourceCode.getTokenBefore(token);","","            if (prevToken &&","                (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) &&","                !isOpenParenOfTemplate(prevToken) &&","                astUtils.isTokenOnSameLine(prevToken, token) &&","                !sourceCode.isSpaceBetweenTokens(prevToken, token)","            ) {","                context.report({","                    loc: token.loc.start,","                    message: \"Expected space(s) before \\\"{{value}}\\\".\",","                    data: token,","                    fix(fixer) {","                        return fixer.insertTextBefore(token, \" \");","                    }","                });","            }","        }","","        /**","         * Reports a given token if there are space(s) before the token.","         *","         * @param {Token} token - A token to report.","         * @param {RegExp|undefined} pattern - Optional. A pattern of the previous","         *      token to check.","         * @returns {void}","         */","        function unexpectSpaceBefore(token, pattern) {","            pattern = pattern || PREV_TOKEN;","","            const prevToken = sourceCode.getTokenBefore(token);","","            if (prevToken &&","                (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) &&","                !isOpenParenOfTemplate(prevToken) &&","                astUtils.isTokenOnSameLine(prevToken, token) &&","                sourceCode.isSpaceBetweenTokens(prevToken, token)","            ) {","                context.report({","                    loc: token.loc.start,","                    message: \"Unexpected space(s) before \\\"{{value}}\\\".\",","                    data: token,","                    fix(fixer) {","                        return fixer.removeRange([prevToken.range[1], token.range[0]]);","                    }","                });","            }","        }","","        /**","         * Reports a given token if there are not space(s) after the token.","         *","         * @param {Token} token - A token to report.","         * @param {RegExp|undefined} pattern - Optional. A pattern of the next","         *      token to check.","         * @returns {void}","         */","        function expectSpaceAfter(token, pattern) {","            pattern = pattern || NEXT_TOKEN;","","            const nextToken = sourceCode.getTokenAfter(token);","","            if (nextToken &&","                (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) &&","                !isCloseParenOfTemplate(nextToken) &&","                astUtils.isTokenOnSameLine(token, nextToken) &&","                !sourceCode.isSpaceBetweenTokens(token, nextToken)","            ) {","                context.report({","                    loc: token.loc.start,","                    message: \"Expected space(s) after \\\"{{value}}\\\".\",","                    data: token,","                    fix(fixer) {","                        return fixer.insertTextAfter(token, \" \");","                    }","                });","            }","        }","","        /**","         * Reports a given token if there are space(s) after the token.","         *","         * @param {Token} token - A token to report.","         * @param {RegExp|undefined} pattern - Optional. A pattern of the next","         *      token to check.","         * @returns {void}","         */","        function unexpectSpaceAfter(token, pattern) {","            pattern = pattern || NEXT_TOKEN;","","            const nextToken = sourceCode.getTokenAfter(token);","","            if (nextToken &&","                (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) &&","                !isCloseParenOfTemplate(nextToken) &&","                astUtils.isTokenOnSameLine(token, nextToken) &&","                sourceCode.isSpaceBetweenTokens(token, nextToken)","            ) {","                context.report({","                    loc: token.loc.start,","                    message: \"Unexpected space(s) after \\\"{{value}}\\\".\",","                    data: token,","                    fix(fixer) {","                        return fixer.removeRange([token.range[1], nextToken.range[0]]);","                    }","                });","            }","        }","","        /**","         * Parses the option object and determines check methods for each keyword.","         *","         * @param {Object|undefined} options - The option object to parse.","         * @returns {Object} - Normalized option object.","         *      Keys are keywords (there are for every keyword).","         *      Values are instances of `{\"before\": function, \"after\": function}`.","         */","        function parseOptions(options) {","            const before = !options || options.before !== false;","            const after = !options || options.after !== false;","            const defaultValue = {","                before: before ? expectSpaceBefore : unexpectSpaceBefore,","                after: after ? expectSpaceAfter : unexpectSpaceAfter","            };","            const overrides = (options && options.overrides) || {};","            const retv = Object.create(null);","","            for (let i = 0; i < KEYS.length; ++i) {","                const key = KEYS[i];","                const override = overrides[key];","","                if (override) {","                    const thisBefore = (\"before\" in override) ? override.before : before;","                    const thisAfter = (\"after\" in override) ? override.after : after;","","                    retv[key] = {","                        before: thisBefore ? expectSpaceBefore : unexpectSpaceBefore,","                        after: thisAfter ? expectSpaceAfter : unexpectSpaceAfter","                    };","                } else {","                    retv[key] = defaultValue;","                }","            }","","            return retv;","        }","","        const checkMethodMap = parseOptions(context.options[0]);","","        /**","         * Reports a given token if usage of spacing followed by the token is","         * invalid.","         *","         * @param {Token} token - A token to report.","         * @param {RegExp|undefined} pattern - Optional. A pattern of the previous","         *      token to check.","         * @returns {void}","         */","        function checkSpacingBefore(token, pattern) {","            checkMethodMap[token.value].before(token, pattern);","        }","","        /**","         * Reports a given token if usage of spacing preceded by the token is","         * invalid.","         *","         * @param {Token} token - A token to report.","         * @param {RegExp|undefined} pattern - Optional. A pattern of the next","         *      token to check.","         * @returns {void}","         */","        function checkSpacingAfter(token, pattern) {","            checkMethodMap[token.value].after(token, pattern);","        }","","        /**","         * Reports a given token if usage of spacing around the token is invalid.","         *","         * @param {Token} token - A token to report.","         * @returns {void}","         */","        function checkSpacingAround(token) {","            checkSpacingBefore(token);","            checkSpacingAfter(token);","        }","","        /**","         * Reports the first token of a given node if the first token is a keyword","         * and usage of spacing around the token is invalid.","         *","         * @param {ASTNode|null} node - A node to report.","         * @returns {void}","         */","        function checkSpacingAroundFirstToken(node) {","            const firstToken = node && sourceCode.getFirstToken(node);","","            if (firstToken && firstToken.type === \"Keyword\") {","                checkSpacingAround(firstToken);","            }","        }","","        /**","         * Reports the first token of a given node if the first token is a keyword","         * and usage of spacing followed by the token is invalid.","         *","         * This is used for unary operators (e.g. `typeof`), `function`, and `super`.","         * Other rules are handling usage of spacing preceded by those keywords.","         *","         * @param {ASTNode|null} node - A node to report.","         * @returns {void}","         */","        function checkSpacingBeforeFirstToken(node) {","            const firstToken = node && sourceCode.getFirstToken(node);","","            if (firstToken && firstToken.type === \"Keyword\") {","                checkSpacingBefore(firstToken);","            }","        }","","        /**","         * Reports the previous token of a given node if the token is a keyword and","         * usage of spacing around the token is invalid.","         *","         * @param {ASTNode|null} node - A node to report.","         * @returns {void}","         */","        function checkSpacingAroundTokenBefore(node) {","            if (node) {","                const token = sourceCode.getTokenBefore(node, astUtils.isKeywordToken);","","                checkSpacingAround(token);","            }","        }","","        /**","         * Reports `async` or `function` keywords of a given node if usage of","         * spacing around those keywords is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForFunction(node) {","            const firstToken = node && sourceCode.getFirstToken(node);","","            if (firstToken &&","                ((firstToken.type === \"Keyword\" && firstToken.value === \"function\") ||","                firstToken.value === \"async\")","            ) {","                checkSpacingBefore(firstToken);","            }","        }","","        /**","         * Reports `class` and `extends` keywords of a given node if usage of","         * spacing around those keywords is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForClass(node) {","            checkSpacingAroundFirstToken(node);","            checkSpacingAroundTokenBefore(node.superClass);","        }","","        /**","         * Reports `if` and `else` keywords of a given node if usage of spacing","         * around those keywords is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForIfStatement(node) {","            checkSpacingAroundFirstToken(node);","            checkSpacingAroundTokenBefore(node.alternate);","        }","","        /**","         * Reports `try`, `catch`, and `finally` keywords of a given node if usage","         * of spacing around those keywords is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForTryStatement(node) {","            checkSpacingAroundFirstToken(node);","            checkSpacingAroundFirstToken(node.handler);","            checkSpacingAroundTokenBefore(node.finalizer);","        }","","        /**","         * Reports `do` and `while` keywords of a given node if usage of spacing","         * around those keywords is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForDoWhileStatement(node) {","            checkSpacingAroundFirstToken(node);","            checkSpacingAroundTokenBefore(node.test);","        }","","        /**","         * Reports `for` and `in` keywords of a given node if usage of spacing","         * around those keywords is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForForInStatement(node) {","            checkSpacingAroundFirstToken(node);","            checkSpacingAroundTokenBefore(node.right);","        }","","        /**","         * Reports `for` and `of` keywords of a given node if usage of spacing","         * around those keywords is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForForOfStatement(node) {","            checkSpacingAroundFirstToken(node);","            checkSpacingAround(sourceCode.getTokenBefore(node.right, astUtils.isNotOpeningParenToken));","        }","","        /**","         * Reports `import`, `export`, `as`, and `from` keywords of a given node if","         * usage of spacing around those keywords is invalid.","         *","         * This rule handles the `*` token in module declarations.","         *","         *     import*as A from \"./a\"; /*error Expected space(s) after \"import\".","         *                               error Expected space(s) before \"as\".","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForModuleDeclaration(node) {","            const firstToken = sourceCode.getFirstToken(node);","","            checkSpacingBefore(firstToken, PREV_TOKEN_M);","            checkSpacingAfter(firstToken, NEXT_TOKEN_M);","","            if (node.source) {","                const fromToken = sourceCode.getTokenBefore(node.source);","","                checkSpacingBefore(fromToken, PREV_TOKEN_M);","                checkSpacingAfter(fromToken, NEXT_TOKEN_M);","            }","        }","","        /**","         * Reports `as` keyword of a given node if usage of spacing around this","         * keyword is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForImportNamespaceSpecifier(node) {","            const asToken = sourceCode.getFirstToken(node, 1);","","            checkSpacingBefore(asToken, PREV_TOKEN_M);","        }","","        /**","         * Reports `static`, `get`, and `set` keywords of a given node if usage of","         * spacing around those keywords is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForProperty(node) {","            if (node.static) {","                checkSpacingAroundFirstToken(node);","            }","            if (node.kind === \"get\" ||","                node.kind === \"set\" ||","                (","                    (node.method || node.type === \"MethodDefinition\") &&","                    node.value.async","                )","            ) {","                const token = sourceCode.getTokenBefore(","                    node.key,","                    tok => {","                        switch (tok.value) {","                            case \"get\":","                            case \"set\":","                            case \"async\":","                                return true;","                            default:","                                return false;","                        }","                    }","                );","","                if (!token) {","                    throw new Error(\"Failed to find token get, set, or async beside method name\");","                }","","","                checkSpacingAround(token);","            }","        }","","        /**","         * Reports `await` keyword of a given node if usage of spacing before","         * this keyword is invalid.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function checkSpacingForAwaitExpression(node) {","            checkSpacingBefore(sourceCode.getFirstToken(node));","        }","","        return {","","            // Statements","            DebuggerStatement: checkSpacingAroundFirstToken,","            WithStatement: checkSpacingAroundFirstToken,","","            // Statements - Control flow","            BreakStatement: checkSpacingAroundFirstToken,","            ContinueStatement: checkSpacingAroundFirstToken,","            ReturnStatement: checkSpacingAroundFirstToken,","            ThrowStatement: checkSpacingAroundFirstToken,","            TryStatement: checkSpacingForTryStatement,","","            // Statements - Choice","            IfStatement: checkSpacingForIfStatement,","            SwitchStatement: checkSpacingAroundFirstToken,","            SwitchCase: checkSpacingAroundFirstToken,","","            // Statements - Loops","            DoWhileStatement: checkSpacingForDoWhileStatement,","            ForInStatement: checkSpacingForForInStatement,","            ForOfStatement: checkSpacingForForOfStatement,","            ForStatement: checkSpacingAroundFirstToken,","            WhileStatement: checkSpacingAroundFirstToken,","","            // Statements - Declarations","            ClassDeclaration: checkSpacingForClass,","            ExportNamedDeclaration: checkSpacingForModuleDeclaration,","            ExportDefaultDeclaration: checkSpacingAroundFirstToken,","            ExportAllDeclaration: checkSpacingForModuleDeclaration,","            FunctionDeclaration: checkSpacingForFunction,","            ImportDeclaration: checkSpacingForModuleDeclaration,","            VariableDeclaration: checkSpacingAroundFirstToken,","","            // Expressions","            ArrowFunctionExpression: checkSpacingForFunction,","            AwaitExpression: checkSpacingForAwaitExpression,","            ClassExpression: checkSpacingForClass,","            FunctionExpression: checkSpacingForFunction,","            NewExpression: checkSpacingBeforeFirstToken,","            Super: checkSpacingBeforeFirstToken,","            ThisExpression: checkSpacingBeforeFirstToken,","            UnaryExpression: checkSpacingBeforeFirstToken,","            YieldExpression: checkSpacingBeforeFirstToken,","","            // Others","            ImportNamespaceSpecifier: checkSpacingForImportNamespaceSpecifier,","            MethodDefinition: checkSpacingForProperty,","            Property: checkSpacingForProperty","        };","    }","};",""],"l":{"12":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"29":1,"30":1,"31":1,"32":67,"33":0,"48":1,"49":0,"58":1,"59":0,"66":1,"85":68,"93":68,"104":0,"114":1,"115":0,"117":0,"119":0,"125":0,"130":0,"144":1,"145":0,"147":0,"149":0,"155":0,"160":0,"174":1,"175":0,"177":0,"179":0,"185":0,"190":0,"204":1,"205":0,"207":0,"209":0,"215":0,"220":0,"234":1,"235":0,"236":0,"237":0,"241":0,"242":0,"244":0,"245":0,"246":0,"248":0,"249":0,"250":0,"252":0,"257":0,"261":0,"264":0,"275":1,"276":0,"288":1,"289":0,"298":1,"299":0,"300":0,"310":1,"311":0,"313":0,"314":0,"328":1,"329":0,"331":0,"332":0,"343":1,"344":0,"345":0,"347":0,"358":1,"359":0,"361":0,"365":0,"376":1,"377":0,"378":0,"388":1,"389":0,"390":0,"400":1,"401":0,"402":0,"403":0,"413":1,"414":0,"415":0,"425":1,"426":0,"427":0,"437":1,"438":0,"439":0,"454":1,"455":0,"457":0,"458":0,"460":0,"461":0,"463":0,"464":0,"475":1,"476":0,"478":0,"488":1,"489":0,"490":0,"492":0,"499":0,"502":0,"506":0,"508":0,"513":0,"514":0,"518":0,"529":1,"530":0,"533":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/line-comment-position.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/line-comment-position.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":50,"loc":{"start":{"line":50,"column":10},"end":{"line":50,"column":20}}},"2":{"name":"(anonymous_2)","line":81,"loc":{"start":{"line":81,"column":23},"end":{"line":81,"column":30}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":111,"column":2}},"3":{"start":{"line":51,"column":8},"end":{"line":51,"column":43}},"4":{"start":{"line":53,"column":8},"end":{"line":55,"column":46}},"5":{"start":{"line":57,"column":8},"end":{"line":69,"column":9}},"6":{"start":{"line":58,"column":12},"end":{"line":58,"column":52}},"7":{"start":{"line":61,"column":12},"end":{"line":61,"column":49}},"8":{"start":{"line":62,"column":12},"end":{"line":62,"column":50}},"9":{"start":{"line":64,"column":12},"end":{"line":68,"column":13}},"10":{"start":{"line":65,"column":16},"end":{"line":65,"column":90}},"11":{"start":{"line":67,"column":16},"end":{"line":67,"column":84}},"12":{"start":{"line":71,"column":8},"end":{"line":71,"column":69}},"13":{"start":{"line":72,"column":8},"end":{"line":72,"column":57}},"14":{"start":{"line":73,"column":8},"end":{"line":73,"column":61}},"15":{"start":{"line":74,"column":8},"end":{"line":74,"column":51}},"16":{"start":{"line":80,"column":8},"end":{"line":109,"column":10}},"17":{"start":{"line":82,"column":16},"end":{"line":84,"column":17}},"18":{"start":{"line":83,"column":20},"end":{"line":83,"column":27}},"19":{"start":{"line":86,"column":16},"end":{"line":88,"column":17}},"20":{"start":{"line":87,"column":20},"end":{"line":87,"column":27}},"21":{"start":{"line":90,"column":16},"end":{"line":90,"column":92}},"22":{"start":{"line":91,"column":16},"end":{"line":91,"column":95}},"23":{"start":{"line":93,"column":16},"end":{"line":107,"column":17}},"24":{"start":{"line":94,"column":20},"end":{"line":99,"column":21}},"25":{"start":{"line":95,"column":24},"end":{"line":98,"column":27}},"26":{"start":{"line":101,"column":20},"end":{"line":106,"column":21}},"27":{"start":{"line":102,"column":24},"end":{"line":105,"column":27}}},"branchMap":{"1":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"2":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":20}},{"start":{"line":57,"column":24},"end":{"line":57,"column":51}}]},"3":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":20},"end":{"line":58,"column":28}},{"start":{"line":58,"column":32},"end":{"line":58,"column":51}}]},"4":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":64,"column":12}},{"start":{"line":64,"column":12},"end":{"line":64,"column":12}}]},"5":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":16},"end":{"line":82,"column":16}},{"start":{"line":82,"column":16},"end":{"line":82,"column":16}}]},"6":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":20},"end":{"line":82,"column":46}},{"start":{"line":82,"column":51},"end":{"line":82,"column":87}},{"start":{"line":82,"column":91},"end":{"line":82,"column":125}}]},"7":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":16},"end":{"line":86,"column":16}},{"start":{"line":86,"column":16},"end":{"line":86,"column":16}}]},"8":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":20},"end":{"line":86,"column":33}},{"start":{"line":86,"column":37},"end":{"line":86,"column":72}}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":37},"end":{"line":91,"column":45}},{"start":{"line":91,"column":49},"end":{"line":91,"column":94}}]},"10":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":16}},{"start":{"line":93,"column":16},"end":{"line":93,"column":16}}]},"11":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":20},"end":{"line":94,"column":20}},{"start":{"line":94,"column":20},"end":{"line":94,"column":20}}]},"12":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":20},"end":{"line":101,"column":20}},{"start":{"line":101,"column":20},"end":{"line":101,"column":20}}]}},"code":["/**"," * @fileoverview Rule to enforce the position of line comments"," * @author Alberto Rodríguez"," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce position of line comments\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"above\", \"beside\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            position: {","                                enum: [\"above\", \"beside\"]","                            },","                            ignorePattern: {","                                type: \"string\"","                            },","                            applyDefaultPatterns: {","                                type: \"boolean\"","                            },","                            applyDefaultIgnorePatterns: {","                                type: \"boolean\"","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","        const options = context.options[0];","","        let above,","            ignorePattern,","            applyDefaultIgnorePatterns = true;","","        if (!options || typeof options === \"string\") {","            above = !options || options === \"above\";","","        } else {","            above = options.position === \"above\";","            ignorePattern = options.ignorePattern;","","            if (options.hasOwnProperty(\"applyDefaultIgnorePatterns\")) {","                applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;","            } else {","                applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;","            }","        }","","        const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;","        const fallThroughRegExp = /^\\s*falls?\\s?through/;","        const customIgnoreRegExp = new RegExp(ignorePattern);","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            LineComment(node) {","                if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {","                    return;","                }","","                if (ignorePattern && customIgnoreRegExp.test(node.value)) {","                    return;","                }","","                const previous = sourceCode.getTokenBefore(node, { includeComments: true });","                const isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;","","                if (above) {","                    if (isOnSameLine) {","                        context.report({","                            node,","                            message: \"Expected comment to be above code.\"","                        });","                    }","                } else {","                    if (!isOnSameLine) {","                        context.report({","                            node,","                            message: \"Expected comment to be beside code.\"","                        });","                    }","                }","            }","        };","    }","};",""],"l":{"7":1,"13":1,"51":0,"53":0,"57":0,"58":0,"61":0,"62":0,"64":0,"65":0,"67":0,"71":0,"72":0,"73":0,"74":0,"80":0,"82":0,"83":0,"86":0,"87":0,"90":0,"91":0,"93":0,"94":0,"95":0,"101":0,"102":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/linebreak-style.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/linebreak-style.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":20}}},"2":{"name":"createFix","line":53,"loc":{"start":{"line":53,"column":8},"end":{"line":53,"column":40}}},"3":{"name":"(anonymous_3)","line":54,"loc":{"start":{"line":54,"column":19},"end":{"line":54,"column":35}}},"4":{"name":"checkForlinebreakStyle","line":64,"loc":{"start":{"line":64,"column":21},"end":{"line":64,"column":59}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":96,"column":2}},"3":{"start":{"line":37,"column":8},"end":{"line":38,"column":83}},"4":{"start":{"line":40,"column":8},"end":{"line":40,"column":51}},"5":{"start":{"line":53,"column":8},"end":{"line":57,"column":9}},"6":{"start":{"line":54,"column":12},"end":{"line":56,"column":14}},"7":{"start":{"line":55,"column":16},"end":{"line":55,"column":59}},"8":{"start":{"line":63,"column":8},"end":{"line":94,"column":10}},"9":{"start":{"line":65,"column":16},"end":{"line":69,"column":70}},"10":{"start":{"line":70,"column":16},"end":{"line":70,"column":26}},"11":{"start":{"line":72,"column":16},"end":{"line":72,"column":26}},"12":{"start":{"line":74,"column":16},"end":{"line":92,"column":17}},"13":{"start":{"line":75,"column":20},"end":{"line":75,"column":24}},"14":{"start":{"line":76,"column":20},"end":{"line":78,"column":21}},"15":{"start":{"line":77,"column":24},"end":{"line":77,"column":33}},"16":{"start":{"line":80,"column":20},"end":{"line":80,"column":46}},"17":{"start":{"line":81,"column":20},"end":{"line":81,"column":67}},"18":{"start":{"line":83,"column":20},"end":{"line":91,"column":23}}},"branchMap":{"1":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":39},"end":{"line":65,"column":57}},{"start":{"line":65,"column":61},"end":{"line":65,"column":67}}]},"2":{"line":67,"type":"cond-expr","locations":[{"start":{"line":67,"column":51},"end":{"line":67,"column":55}},{"start":{"line":67,"column":58},"end":{"line":67,"column":64}}]},"3":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":20},"end":{"line":76,"column":20}},{"start":{"line":76,"column":20},"end":{"line":76,"column":20}}]},"4":{"line":89,"type":"cond-expr","locations":[{"start":{"line":89,"column":46},"end":{"line":89,"column":61}},{"start":{"line":89,"column":64},"end":{"line":89,"column":81}}]}},"code":["/**"," * @fileoverview Rule to enforce a single linebreak style."," * @author Erik Mueller"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent linebreak style\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                enum: [\"unix\", \"windows\"]","            }","        ]","    },","","    create(context) {","","        const EXPECTED_LF_MSG = \"Expected linebreaks to be 'LF' but found 'CRLF'.\",","            EXPECTED_CRLF_MSG = \"Expected linebreaks to be 'CRLF' but found 'LF'.\";","","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Builds a fix function that replaces text at the specified range in the source text.","         * @param {int[]} range The range to replace","         * @param {string} text The text to insert.","         * @returns {Function} Fixer function","         * @private","         */","        function createFix(range, text) {","            return function(fixer) {","                return fixer.replaceTextRange(range, text);","            };","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            Program: function checkForlinebreakStyle(node) {","                const linebreakStyle = context.options[0] || \"unix\",","                    expectedLF = linebreakStyle === \"unix\",","                    expectedLFChars = expectedLF ? \"\\n\" : \"\\r\\n\",","                    source = sourceCode.getText(),","                    pattern = astUtils.createGlobalLinebreakMatcher();","                let match;","","                let i = 0;","","                while ((match = pattern.exec(source)) !== null) {","                    i++;","                    if (match[0] === expectedLFChars) {","                        continue;","                    }","","                    const index = match.index;","                    const range = [index, index + match[0].length];","","                    context.report({","                        node,","                        loc: {","                            line: i,","                            column: sourceCode.lines[i - 1].length","                        },","                        message: expectedLF ? EXPECTED_LF_MSG : EXPECTED_CRLF_MSG,","                        fix: createFix(range, expectedLFChars)","                    });","                }","            }","        };","    }","};",""],"l":{"12":1,"18":1,"37":0,"40":0,"53":1,"54":0,"55":0,"63":0,"65":0,"70":0,"72":0,"74":0,"75":0,"76":0,"77":0,"80":0,"81":0,"83":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/lines-around-comment.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/lines-around-comment.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":1,"61":0,"62":1,"63":0,"64":1,"65":0,"66":1,"67":0,"68":1,"69":0,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0,0],"18":[0,0,0],"19":[0,0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0,0],"35":[0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0,0,0],"41":[0,0],"42":[0,0],"43":[0,0,0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"getEmptyLineNums","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":33}}},"2":{"name":"getCommentLineNums","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":38}}},"3":{"name":"(anonymous_3)","line":109,"loc":{"start":{"line":109,"column":10},"end":{"line":109,"column":20}}},"4":{"name":"isCommentNodeType","line":139,"loc":{"start":{"line":139,"column":8},"end":{"line":139,"column":42}}},"5":{"name":"codeAroundComment","line":148,"loc":{"start":{"line":148,"column":8},"end":{"line":148,"column":41}}},"6":{"name":"isCommentInsideNodeType","line":179,"loc":{"start":{"line":179,"column":8},"end":{"line":179,"column":65}}},"7":{"name":"isCommentAtParentStart","line":191,"loc":{"start":{"line":191,"column":8},"end":{"line":191,"column":56}}},"8":{"name":"isCommentAtParentEnd","line":209,"loc":{"start":{"line":209,"column":8},"end":{"line":209,"column":54}}},"9":{"name":"isCommentAtBlockStart","line":226,"loc":{"start":{"line":226,"column":8},"end":{"line":226,"column":45}}},"10":{"name":"isCommentAtBlockEnd","line":235,"loc":{"start":{"line":235,"column":8},"end":{"line":235,"column":43}}},"11":{"name":"isCommentAtObjectStart","line":244,"loc":{"start":{"line":244,"column":8},"end":{"line":244,"column":46}}},"12":{"name":"isCommentAtObjectEnd","line":253,"loc":{"start":{"line":253,"column":8},"end":{"line":253,"column":44}}},"13":{"name":"isCommentAtArrayStart","line":262,"loc":{"start":{"line":262,"column":8},"end":{"line":262,"column":45}}},"14":{"name":"isCommentAtArrayEnd","line":271,"loc":{"start":{"line":271,"column":8},"end":{"line":271,"column":43}}},"15":{"name":"checkForEmptyLine","line":283,"loc":{"start":{"line":283,"column":8},"end":{"line":283,"column":47}}},"16":{"name":"(anonymous_16)","line":334,"loc":{"start":{"line":334,"column":23},"end":{"line":334,"column":31}}},"17":{"name":"(anonymous_17)","line":346,"loc":{"start":{"line":346,"column":23},"end":{"line":346,"column":31}}},"18":{"name":"(anonymous_18)","line":360,"loc":{"start":{"line":360,"column":23},"end":{"line":360,"column":30}}},"19":{"name":"(anonymous_19)","line":369,"loc":{"start":{"line":369,"column":24},"end":{"line":369,"column":31}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":12,"column":39}},"2":{"start":{"line":23,"column":0},"end":{"line":30,"column":1}},"3":{"start":{"line":24,"column":4},"end":{"line":27,"column":57}},"4":{"start":{"line":24,"column":47},"end":{"line":27,"column":5}},"5":{"start":{"line":27,"column":23},"end":{"line":27,"column":33}},"6":{"start":{"line":27,"column":47},"end":{"line":27,"column":55}},"7":{"start":{"line":29,"column":4},"end":{"line":29,"column":22}},"8":{"start":{"line":37,"column":0},"end":{"line":47,"column":1}},"9":{"start":{"line":38,"column":4},"end":{"line":38,"column":21}},"10":{"start":{"line":40,"column":4},"end":{"line":45,"column":7}},"11":{"start":{"line":41,"column":8},"end":{"line":41,"column":43}},"12":{"start":{"line":42,"column":8},"end":{"line":42,"column":39}},"13":{"start":{"line":44,"column":8},"end":{"line":44,"column":31}},"14":{"start":{"line":46,"column":4},"end":{"line":46,"column":17}},"15":{"start":{"line":53,"column":0},"end":{"line":380,"column":2}},"16":{"start":{"line":111,"column":8},"end":{"line":111,"column":88}},"17":{"start":{"line":112,"column":8},"end":{"line":112,"column":52}},"18":{"start":{"line":113,"column":8},"end":{"line":113,"column":69}},"19":{"start":{"line":114,"column":8},"end":{"line":114,"column":61}},"20":{"start":{"line":115,"column":8},"end":{"line":115,"column":88}},"21":{"start":{"line":118,"column":8},"end":{"line":118,"column":71}},"22":{"start":{"line":119,"column":8},"end":{"line":119,"column":69}},"23":{"start":{"line":120,"column":8},"end":{"line":120,"column":123}},"24":{"start":{"line":121,"column":8},"end":{"line":121,"column":71}},"25":{"start":{"line":122,"column":8},"end":{"line":122,"column":67}},"26":{"start":{"line":123,"column":8},"end":{"line":123,"column":63}},"27":{"start":{"line":125,"column":8},"end":{"line":125,"column":51}},"28":{"start":{"line":127,"column":8},"end":{"line":132,"column":67}},"29":{"start":{"line":139,"column":8},"end":{"line":141,"column":9}},"30":{"start":{"line":140,"column":12},"end":{"line":140,"column":78}},"31":{"start":{"line":148,"column":8},"end":{"line":170,"column":9}},"32":{"start":{"line":149,"column":12},"end":{"line":149,"column":22}},"33":{"start":{"line":151,"column":12},"end":{"line":151,"column":25}},"34":{"start":{"line":152,"column":12},"end":{"line":154,"column":47}},"35":{"start":{"line":153,"column":16},"end":{"line":153,"column":84}},"36":{"start":{"line":156,"column":12},"end":{"line":158,"column":13}},"37":{"start":{"line":157,"column":16},"end":{"line":157,"column":28}},"38":{"start":{"line":160,"column":12},"end":{"line":160,"column":25}},"39":{"start":{"line":161,"column":12},"end":{"line":163,"column":47}},"40":{"start":{"line":162,"column":16},"end":{"line":162,"column":83}},"41":{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},"42":{"start":{"line":166,"column":16},"end":{"line":166,"column":28}},"43":{"start":{"line":169,"column":12},"end":{"line":169,"column":25}},"44":{"start":{"line":179,"column":8},"end":{"line":183,"column":9}},"45":{"start":{"line":180,"column":12},"end":{"line":182,"column":75}},"46":{"start":{"line":191,"column":8},"end":{"line":201,"column":9}},"47":{"start":{"line":192,"column":12},"end":{"line":192,"column":53}},"48":{"start":{"line":193,"column":12},"end":{"line":193,"column":23}},"49":{"start":{"line":195,"column":12},"end":{"line":197,"column":13}},"50":{"start":{"line":196,"column":16},"end":{"line":196,"column":41}},"51":{"start":{"line":199,"column":12},"end":{"line":200,"column":70}},"52":{"start":{"line":209,"column":8},"end":{"line":219,"column":9}},"53":{"start":{"line":210,"column":12},"end":{"line":210,"column":53}},"54":{"start":{"line":211,"column":12},"end":{"line":211,"column":23}},"55":{"start":{"line":213,"column":12},"end":{"line":215,"column":13}},"56":{"start":{"line":214,"column":16},"end":{"line":214,"column":41}},"57":{"start":{"line":217,"column":12},"end":{"line":218,"column":66}},"58":{"start":{"line":226,"column":8},"end":{"line":228,"column":9}},"59":{"start":{"line":227,"column":12},"end":{"line":227,"column":157}},"60":{"start":{"line":235,"column":8},"end":{"line":237,"column":9}},"61":{"start":{"line":236,"column":12},"end":{"line":236,"column":200}},"62":{"start":{"line":244,"column":8},"end":{"line":246,"column":9}},"63":{"start":{"line":245,"column":12},"end":{"line":245,"column":117}},"64":{"start":{"line":253,"column":8},"end":{"line":255,"column":9}},"65":{"start":{"line":254,"column":12},"end":{"line":254,"column":113}},"66":{"start":{"line":262,"column":8},"end":{"line":264,"column":9}},"67":{"start":{"line":263,"column":12},"end":{"line":263,"column":115}},"68":{"start":{"line":271,"column":8},"end":{"line":273,"column":9}},"69":{"start":{"line":272,"column":12},"end":{"line":272,"column":111}},"70":{"start":{"line":283,"column":8},"end":{"line":352,"column":9}},"71":{"start":{"line":284,"column":12},"end":{"line":286,"column":13}},"72":{"start":{"line":285,"column":16},"end":{"line":285,"column":23}},"73":{"start":{"line":288,"column":12},"end":{"line":290,"column":13}},"74":{"start":{"line":289,"column":16},"end":{"line":289,"column":23}},"75":{"start":{"line":292,"column":12},"end":{"line":293,"column":37}},"76":{"start":{"line":295,"column":12},"end":{"line":297,"column":60}},"77":{"start":{"line":299,"column":12},"end":{"line":304,"column":85}},"78":{"start":{"line":306,"column":12},"end":{"line":306,"column":103}},"79":{"start":{"line":307,"column":12},"end":{"line":307,"column":95}},"80":{"start":{"line":310,"column":12},"end":{"line":312,"column":13}},"81":{"start":{"line":311,"column":16},"end":{"line":311,"column":31}},"82":{"start":{"line":313,"column":12},"end":{"line":315,"column":13}},"83":{"start":{"line":314,"column":16},"end":{"line":314,"column":30}},"84":{"start":{"line":318,"column":12},"end":{"line":320,"column":13}},"85":{"start":{"line":319,"column":16},"end":{"line":319,"column":23}},"86":{"start":{"line":322,"column":12},"end":{"line":322,"column":102}},"87":{"start":{"line":323,"column":12},"end":{"line":323,"column":97}},"88":{"start":{"line":326,"column":12},"end":{"line":338,"column":13}},"89":{"start":{"line":328,"column":16},"end":{"line":328,"column":72}},"90":{"start":{"line":329,"column":16},"end":{"line":329,"column":53}},"91":{"start":{"line":331,"column":16},"end":{"line":337,"column":19}},"92":{"start":{"line":335,"column":24},"end":{"line":335,"column":72}},"93":{"start":{"line":341,"column":12},"end":{"line":350,"column":13}},"94":{"start":{"line":343,"column":16},"end":{"line":349,"column":19}},"95":{"start":{"line":347,"column":24},"end":{"line":347,"column":65}},"96":{"start":{"line":358,"column":8},"end":{"line":378,"column":10}},"97":{"start":{"line":361,"column":16},"end":{"line":366,"column":17}},"98":{"start":{"line":362,"column":20},"end":{"line":365,"column":23}},"99":{"start":{"line":370,"column":16},"end":{"line":375,"column":17}},"100":{"start":{"line":371,"column":20},"end":{"line":374,"column":23}}},"branchMap":{"1":{"line":111,"type":"cond-expr","locations":[{"start":{"line":111,"column":45},"end":{"line":111,"column":82}},{"start":{"line":111,"column":85},"end":{"line":111,"column":87}}]},"2":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":36},"end":{"line":118,"column":61}},{"start":{"line":118,"column":65},"end":{"line":118,"column":70}}]},"3":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":35},"end":{"line":119,"column":59}},{"start":{"line":119,"column":63},"end":{"line":119,"column":68}}]},"4":{"line":120,"type":"cond-expr","locations":[{"start":{"line":120,"column":89},"end":{"line":120,"column":115}},{"start":{"line":120,"column":118},"end":{"line":120,"column":122}}]},"5":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":36},"end":{"line":121,"column":61}},{"start":{"line":121,"column":65},"end":{"line":121,"column":70}}]},"6":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":34},"end":{"line":122,"column":57}},{"start":{"line":122,"column":61},"end":{"line":122,"column":66}}]},"7":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":32},"end":{"line":123,"column":53}},{"start":{"line":123,"column":57},"end":{"line":123,"column":62}}]},"8":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":19},"end":{"line":140,"column":24}},{"start":{"line":140,"column":29},"end":{"line":140,"column":51}},{"start":{"line":140,"column":55},"end":{"line":140,"column":76}}]},"9":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":12},"end":{"line":156,"column":12}},{"start":{"line":156,"column":12},"end":{"line":156,"column":12}}]},"10":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":16},"end":{"line":156,"column":21}},{"start":{"line":156,"column":25},"end":{"line":156,"column":64}}]},"11":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":165,"column":12}},{"start":{"line":165,"column":12},"end":{"line":165,"column":12}}]},"12":{"line":165,"type":"binary-expr","locations":[{"start":{"line":165,"column":16},"end":{"line":165,"column":21}},{"start":{"line":165,"column":25},"end":{"line":165,"column":64}}]},"13":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":19},"end":{"line":180,"column":43}},{"start":{"line":181,"column":17},"end":{"line":181,"column":28}},{"start":{"line":181,"column":32},"end":{"line":181,"column":61}},{"start":{"line":182,"column":17},"end":{"line":182,"column":34}},{"start":{"line":182,"column":38},"end":{"line":182,"column":73}}]},"14":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":12},"end":{"line":195,"column":12}},{"start":{"line":195,"column":12},"end":{"line":195,"column":12}}]},"15":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":19},"end":{"line":199,"column":25}},{"start":{"line":199,"column":29},"end":{"line":199,"column":76}},{"start":{"line":200,"column":20},"end":{"line":200,"column":69}}]},"16":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":12},"end":{"line":213,"column":12}},{"start":{"line":213,"column":12},"end":{"line":213,"column":12}}]},"17":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":19},"end":{"line":217,"column":25}},{"start":{"line":217,"column":29},"end":{"line":217,"column":76}},{"start":{"line":218,"column":20},"end":{"line":218,"column":65}}]},"18":{"line":227,"type":"binary-expr","locations":[{"start":{"line":227,"column":19},"end":{"line":227,"column":60}},{"start":{"line":227,"column":64},"end":{"line":227,"column":110}},{"start":{"line":227,"column":114},"end":{"line":227,"column":156}}]},"19":{"line":236,"type":"binary-expr","locations":[{"start":{"line":236,"column":19},"end":{"line":236,"column":58}},{"start":{"line":236,"column":62},"end":{"line":236,"column":106}},{"start":{"line":236,"column":110},"end":{"line":236,"column":150}},{"start":{"line":236,"column":154},"end":{"line":236,"column":199}}]},"20":{"line":245,"type":"binary-expr","locations":[{"start":{"line":245,"column":19},"end":{"line":245,"column":67}},{"start":{"line":245,"column":71},"end":{"line":245,"column":116}}]},"21":{"line":254,"type":"binary-expr","locations":[{"start":{"line":254,"column":19},"end":{"line":254,"column":65}},{"start":{"line":254,"column":69},"end":{"line":254,"column":112}}]},"22":{"line":263,"type":"binary-expr","locations":[{"start":{"line":263,"column":19},"end":{"line":263,"column":66}},{"start":{"line":263,"column":70},"end":{"line":263,"column":114}}]},"23":{"line":272,"type":"binary-expr","locations":[{"start":{"line":272,"column":19},"end":{"line":272,"column":64}},{"start":{"line":272,"column":68},"end":{"line":272,"column":110}}]},"24":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":12},"end":{"line":284,"column":12}},{"start":{"line":284,"column":12},"end":{"line":284,"column":12}}]},"25":{"line":284,"type":"binary-expr","locations":[{"start":{"line":284,"column":16},"end":{"line":284,"column":42}},{"start":{"line":284,"column":46},"end":{"line":284,"column":82}}]},"26":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":12}},{"start":{"line":288,"column":12},"end":{"line":288,"column":12}}]},"27":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":16},"end":{"line":288,"column":29}},{"start":{"line":288,"column":33},"end":{"line":288,"column":68}}]},"28":{"line":299,"type":"binary-expr","locations":[{"start":{"line":299,"column":38},"end":{"line":299,"column":61}},{"start":{"line":299,"column":65},"end":{"line":299,"column":92}}]},"29":{"line":300,"type":"binary-expr","locations":[{"start":{"line":300,"column":34},"end":{"line":300,"column":55}},{"start":{"line":300,"column":59},"end":{"line":300,"column":84}}]},"30":{"line":301,"type":"binary-expr","locations":[{"start":{"line":301,"column":37},"end":{"line":301,"column":61}},{"start":{"line":301,"column":65},"end":{"line":301,"column":93}}]},"31":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":35},"end":{"line":302,"column":57}},{"start":{"line":302,"column":61},"end":{"line":302,"column":87}}]},"32":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":36},"end":{"line":303,"column":59}},{"start":{"line":303,"column":63},"end":{"line":303,"column":90}}]},"33":{"line":304,"type":"binary-expr","locations":[{"start":{"line":304,"column":34},"end":{"line":304,"column":55}},{"start":{"line":304,"column":59},"end":{"line":304,"column":84}}]},"34":{"line":306,"type":"binary-expr","locations":[{"start":{"line":306,"column":42},"end":{"line":306,"column":59}},{"start":{"line":306,"column":63},"end":{"line":306,"column":81}},{"start":{"line":306,"column":85},"end":{"line":306,"column":102}}]},"35":{"line":307,"type":"binary-expr","locations":[{"start":{"line":307,"column":40},"end":{"line":307,"column":55}},{"start":{"line":307,"column":59},"end":{"line":307,"column":75}},{"start":{"line":307,"column":79},"end":{"line":307,"column":94}}]},"36":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":12},"end":{"line":310,"column":12}},{"start":{"line":310,"column":12},"end":{"line":310,"column":12}}]},"37":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":12},"end":{"line":313,"column":12}},{"start":{"line":313,"column":12},"end":{"line":313,"column":12}}]},"38":{"line":318,"type":"if","locations":[{"start":{"line":318,"column":12},"end":{"line":318,"column":12}},{"start":{"line":318,"column":12},"end":{"line":318,"column":12}}]},"39":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":12},"end":{"line":326,"column":12}},{"start":{"line":326,"column":12},"end":{"line":326,"column":12}}]},"40":{"line":326,"type":"binary-expr","locations":[{"start":{"line":326,"column":16},"end":{"line":326,"column":38}},{"start":{"line":326,"column":42},"end":{"line":326,"column":48}},{"start":{"line":326,"column":52},"end":{"line":326,"column":103}},{"start":{"line":327,"column":20},"end":{"line":327,"column":124}}]},"41":{"line":327,"type":"binary-expr","locations":[{"start":{"line":327,"column":22},"end":{"line":327,"column":63}},{"start":{"line":327,"column":67},"end":{"line":327,"column":123}}]},"42":{"line":341,"type":"if","locations":[{"start":{"line":341,"column":12},"end":{"line":341,"column":12}},{"start":{"line":341,"column":12},"end":{"line":341,"column":12}}]},"43":{"line":341,"type":"binary-expr","locations":[{"start":{"line":341,"column":16},"end":{"line":341,"column":36}},{"start":{"line":341,"column":40},"end":{"line":341,"column":45}},{"start":{"line":341,"column":49},"end":{"line":341,"column":100}},{"start":{"line":342,"column":20},"end":{"line":342,"column":116}}]},"44":{"line":342,"type":"binary-expr","locations":[{"start":{"line":342,"column":22},"end":{"line":342,"column":59}},{"start":{"line":342,"column":63},"end":{"line":342,"column":115}}]},"45":{"line":361,"type":"if","locations":[{"start":{"line":361,"column":16},"end":{"line":361,"column":16}},{"start":{"line":361,"column":16},"end":{"line":361,"column":16}}]},"46":{"line":361,"type":"binary-expr","locations":[{"start":{"line":361,"column":20},"end":{"line":361,"column":45}},{"start":{"line":361,"column":49},"end":{"line":361,"column":73}}]},"47":{"line":370,"type":"if","locations":[{"start":{"line":370,"column":16},"end":{"line":370,"column":16}},{"start":{"line":370,"column":16},"end":{"line":370,"column":16}}]},"48":{"line":370,"type":"binary-expr","locations":[{"start":{"line":370,"column":20},"end":{"line":370,"column":46}},{"start":{"line":370,"column":50},"end":{"line":370,"column":75}}]}},"code":["/**"," * @fileoverview Enforces empty lines around comments."," * @author Jamund Ferguson"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\"),","    astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Return an array with with any line numbers that are empty."," * @param {Array} lines An array of each line of the file."," * @returns {Array} An array of line numbers."," */","function getEmptyLineNums(lines) {","    const emptyLines = lines.map((line, i) => ({","        code: line.trim(),","        num: i + 1","    })).filter(line => !line.code).map(line => line.num);","","    return emptyLines;","}","","/**"," * Return an array with with any line numbers that contain comments."," * @param {Array} comments An array of comment nodes."," * @returns {Array} An array of line numbers."," */","function getCommentLineNums(comments) {","    const lines = [];","","    comments.forEach(token => {","        const start = token.loc.start.line;","        const end = token.loc.end.line;","","        lines.push(start, end);","    });","    return lines;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require empty lines around comments\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    beforeBlockComment: {","                        type: \"boolean\"","                    },","                    afterBlockComment: {","                        type: \"boolean\"","                    },","                    beforeLineComment: {","                        type: \"boolean\"","                    },","                    afterLineComment: {","                        type: \"boolean\"","                    },","                    allowBlockStart: {","                        type: \"boolean\"","                    },","                    allowBlockEnd: {","                        type: \"boolean\"","                    },","                    allowObjectStart: {","                        type: \"boolean\"","                    },","                    allowObjectEnd: {","                        type: \"boolean\"","                    },","                    allowArrayStart: {","                        type: \"boolean\"","                    },","                    allowArrayEnd: {","                        type: \"boolean\"","                    },","                    ignorePattern: {","                        type: \"string\"","                    },","                    applyDefaultIgnorePatterns: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const options = context.options[0] ? Object.assign({}, context.options[0]) : {};","        const ignorePattern = options.ignorePattern;","        const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;","        const customIgnoreRegExp = new RegExp(ignorePattern);","        const applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;","","","        options.beforeLineComment = options.beforeLineComment || false;","        options.afterLineComment = options.afterLineComment || false;","        options.beforeBlockComment = typeof options.beforeBlockComment !== \"undefined\" ? options.beforeBlockComment : true;","        options.afterBlockComment = options.afterBlockComment || false;","        options.allowBlockStart = options.allowBlockStart || false;","        options.allowBlockEnd = options.allowBlockEnd || false;","","        const sourceCode = context.getSourceCode();","","        const lines = sourceCode.lines,","            numLines = lines.length + 1,","            comments = sourceCode.getAllComments(),","            commentLines = getCommentLineNums(comments),","            emptyLines = getEmptyLineNums(lines),","            commentAndEmptyLines = commentLines.concat(emptyLines);","","        /**","         * Returns whether or not a token is a comment node type","         * @param {Token} token The token to check","         * @returns {boolean} True if the token is a comment node","         */","        function isCommentNodeType(token) {","            return token && (token.type === \"Block\" || token.type === \"Line\");","        }","","        /**","         * Returns whether or not comments are on lines starting with or ending with code","         * @param {ASTNode} node The comment node to check.","         * @returns {boolean} True if the comment is not alone.","         */","        function codeAroundComment(node) {","            let token;","","            token = node;","            do {","                token = sourceCode.getTokenBefore(token, { includeComments: true });","            } while (isCommentNodeType(token));","","            if (token && astUtils.isTokenOnSameLine(token, node)) {","                return true;","            }","","            token = node;","            do {","                token = sourceCode.getTokenAfter(token, { includeComments: true });","            } while (isCommentNodeType(token));","","            if (token && astUtils.isTokenOnSameLine(node, token)) {","                return true;","            }","","            return false;","        }","","        /**","         * Returns whether or not comments are inside a node type or not.","         * @param {ASTNode} node The Comment node.","         * @param {ASTNode} parent The Comment parent node.","         * @param {string} nodeType The parent type to check against.","         * @returns {boolean} True if the comment is inside nodeType.","         */","        function isCommentInsideNodeType(node, parent, nodeType) {","            return parent.type === nodeType ||","                (parent.body && parent.body.type === nodeType) ||","                (parent.consequent && parent.consequent.type === nodeType);","        }","","        /**","         * Returns whether or not comments are at the parent start or not.","         * @param {ASTNode} node The Comment node.","         * @param {string} nodeType The parent type to check against.","         * @returns {boolean} True if the comment is at parent start.","         */","        function isCommentAtParentStart(node, nodeType) {","            const ancestors = context.getAncestors();","            let parent;","","            if (ancestors.length) {","                parent = ancestors.pop();","            }","","            return parent && isCommentInsideNodeType(node, parent, nodeType) &&","                    node.loc.start.line - parent.loc.start.line === 1;","        }","","        /**","         * Returns whether or not comments are at the parent end or not.","         * @param {ASTNode} node The Comment node.","         * @param {string} nodeType The parent type to check against.","         * @returns {boolean} True if the comment is at parent end.","         */","        function isCommentAtParentEnd(node, nodeType) {","            const ancestors = context.getAncestors();","            let parent;","","            if (ancestors.length) {","                parent = ancestors.pop();","            }","","            return parent && isCommentInsideNodeType(node, parent, nodeType) &&","                    parent.loc.end.line - node.loc.end.line === 1;","        }","","        /**","         * Returns whether or not comments are at the block start or not.","         * @param {ASTNode} node The Comment node.","         * @returns {boolean} True if the comment is at block start.","         */","        function isCommentAtBlockStart(node) {","            return isCommentAtParentStart(node, \"ClassBody\") || isCommentAtParentStart(node, \"BlockStatement\") || isCommentAtParentStart(node, \"SwitchCase\");","        }","","        /**","         * Returns whether or not comments are at the block end or not.","         * @param {ASTNode} node The Comment node.","         * @returns {boolean} True if the comment is at block end.","         */","        function isCommentAtBlockEnd(node) {","            return isCommentAtParentEnd(node, \"ClassBody\") || isCommentAtParentEnd(node, \"BlockStatement\") || isCommentAtParentEnd(node, \"SwitchCase\") || isCommentAtParentEnd(node, \"SwitchStatement\");","        }","","        /**","         * Returns whether or not comments are at the object start or not.","         * @param {ASTNode} node The Comment node.","         * @returns {boolean} True if the comment is at object start.","         */","        function isCommentAtObjectStart(node) {","            return isCommentAtParentStart(node, \"ObjectExpression\") || isCommentAtParentStart(node, \"ObjectPattern\");","        }","","        /**","         * Returns whether or not comments are at the object end or not.","         * @param {ASTNode} node The Comment node.","         * @returns {boolean} True if the comment is at object end.","         */","        function isCommentAtObjectEnd(node) {","            return isCommentAtParentEnd(node, \"ObjectExpression\") || isCommentAtParentEnd(node, \"ObjectPattern\");","        }","","        /**","         * Returns whether or not comments are at the array start or not.","         * @param {ASTNode} node The Comment node.","         * @returns {boolean} True if the comment is at array start.","         */","        function isCommentAtArrayStart(node) {","            return isCommentAtParentStart(node, \"ArrayExpression\") || isCommentAtParentStart(node, \"ArrayPattern\");","        }","","        /**","         * Returns whether or not comments are at the array end or not.","         * @param {ASTNode} node The Comment node.","         * @returns {boolean} True if the comment is at array end.","         */","        function isCommentAtArrayEnd(node) {","            return isCommentAtParentEnd(node, \"ArrayExpression\") || isCommentAtParentEnd(node, \"ArrayPattern\");","        }","","        /**","         * Checks if a comment node has lines around it (ignores inline comments)","         * @param {ASTNode} node The Comment node.","         * @param {Object} opts Options to determine the newline.","         * @param {boolean} opts.after Should have a newline after this line.","         * @param {boolean} opts.before Should have a newline before this line.","         * @returns {void}","         */","        function checkForEmptyLine(node, opts) {","            if (applyDefaultIgnorePatterns && defaultIgnoreRegExp.test(node.value)) {","                return;","            }","","            if (ignorePattern && customIgnoreRegExp.test(node.value)) {","                return;","            }","","            let after = opts.after,","                before = opts.before;","","            const prevLineNum = node.loc.start.line - 1,","                nextLineNum = node.loc.end.line + 1,","                commentIsNotAlone = codeAroundComment(node);","","            const blockStartAllowed = options.allowBlockStart && isCommentAtBlockStart(node),","                blockEndAllowed = options.allowBlockEnd && isCommentAtBlockEnd(node),","                objectStartAllowed = options.allowObjectStart && isCommentAtObjectStart(node),","                objectEndAllowed = options.allowObjectEnd && isCommentAtObjectEnd(node),","                arrayStartAllowed = options.allowArrayStart && isCommentAtArrayStart(node),","                arrayEndAllowed = options.allowArrayEnd && isCommentAtArrayEnd(node);","","            const exceptionStartAllowed = blockStartAllowed || objectStartAllowed || arrayStartAllowed;","            const exceptionEndAllowed = blockEndAllowed || objectEndAllowed || arrayEndAllowed;","","            // ignore top of the file and bottom of the file","            if (prevLineNum < 1) {","                before = false;","            }","            if (nextLineNum >= numLines) {","                after = false;","            }","","            // we ignore all inline comments","            if (commentIsNotAlone) {","                return;","            }","","            const previousTokenOrComment = sourceCode.getTokenBefore(node, { includeComments: true });","            const nextTokenOrComment = sourceCode.getTokenAfter(node, { includeComments: true });","","            // check for newline before","            if (!exceptionStartAllowed && before && !lodash.includes(commentAndEmptyLines, prevLineNum) &&","                    !(isCommentNodeType(previousTokenOrComment) && astUtils.isTokenOnSameLine(previousTokenOrComment, node))) {","                const lineStart = node.range[0] - node.loc.start.column;","                const range = [lineStart, lineStart];","","                context.report({","                    node,","                    message: \"Expected line before comment.\",","                    fix(fixer) {","                        return fixer.insertTextBeforeRange(range, \"\\n\");","                    }","                });","            }","","            // check for newline after","            if (!exceptionEndAllowed && after && !lodash.includes(commentAndEmptyLines, nextLineNum) &&","                    !(isCommentNodeType(nextTokenOrComment) && astUtils.isTokenOnSameLine(node, nextTokenOrComment))) {","                context.report({","                    node,","                    message: \"Expected line after comment.\",","                    fix(fixer) {","                        return fixer.insertTextAfter(node, \"\\n\");","                    }","                });","            }","","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            LineComment(node) {","                if (options.beforeLineComment || options.afterLineComment) {","                    checkForEmptyLine(node, {","                        after: options.afterLineComment,","                        before: options.beforeLineComment","                    });","                }","            },","","            BlockComment(node) {","                if (options.beforeBlockComment || options.afterBlockComment) {","                    checkForEmptyLine(node, {","                        after: options.afterBlockComment,","                        before: options.beforeBlockComment","                    });","                }","            }","","        };","    }","};",""],"l":{"11":1,"23":1,"24":0,"27":0,"29":0,"37":1,"38":0,"40":0,"41":0,"42":0,"44":0,"46":0,"53":1,"111":0,"112":0,"113":0,"114":0,"115":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"125":0,"127":0,"139":1,"140":0,"148":1,"149":0,"151":0,"152":0,"153":0,"156":0,"157":0,"160":0,"161":0,"162":0,"165":0,"166":0,"169":0,"179":1,"180":0,"191":1,"192":0,"193":0,"195":0,"196":0,"199":0,"209":1,"210":0,"211":0,"213":0,"214":0,"217":0,"226":1,"227":0,"235":1,"236":0,"244":1,"245":0,"253":1,"254":0,"262":1,"263":0,"271":1,"272":0,"283":1,"284":0,"285":0,"288":0,"289":0,"292":0,"295":0,"299":0,"306":0,"307":0,"310":0,"311":0,"313":0,"314":0,"318":0,"319":0,"322":0,"323":0,"326":0,"328":0,"329":0,"331":0,"335":0,"341":0,"343":0,"347":0,"358":0,"361":0,"362":0,"370":0,"371":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/lines-around-directive.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/lines-around-directive.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":44,"loc":{"start":{"line":44,"column":10},"end":{"line":44,"column":20}}},"2":{"name":"hasNewlineBefore","line":59,"loc":{"start":{"line":59,"column":8},"end":{"line":59,"column":40}}},"3":{"name":"getLastTokenOnLine","line":73,"loc":{"start":{"line":73,"column":8},"end":{"line":73,"column":42}}},"4":{"name":"hasNewlineAfter","line":87,"loc":{"start":{"line":87,"column":8},"end":{"line":87,"column":39}}},"5":{"name":"reportError","line":101,"loc":{"start":{"line":101,"column":8},"end":{"line":101,"column":55}}},"6":{"name":"(anonymous_6)","line":110,"loc":{"start":{"line":110,"column":19},"end":{"line":110,"column":27}}},"7":{"name":"checkDirectives","line":126,"loc":{"start":{"line":126,"column":8},"end":{"line":126,"column":39}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":191,"column":2}},"3":{"start":{"line":45,"column":8},"end":{"line":45,"column":51}},"4":{"start":{"line":46,"column":8},"end":{"line":46,"column":54}},"5":{"start":{"line":47,"column":8},"end":{"line":47,"column":85}},"6":{"start":{"line":48,"column":8},"end":{"line":48,"column":83}},"7":{"start":{"line":59,"column":8},"end":{"line":64,"column":9}},"8":{"start":{"line":60,"column":12},"end":{"line":60,"column":91}},"9":{"start":{"line":61,"column":12},"end":{"line":61,"column":79}},"10":{"start":{"line":63,"column":12},"end":{"line":63,"column":62}},"11":{"start":{"line":73,"column":8},"end":{"line":80,"column":9}},"12":{"start":{"line":74,"column":12},"end":{"line":74,"column":60}},"13":{"start":{"line":75,"column":12},"end":{"line":75,"column":75}},"14":{"start":{"line":77,"column":12},"end":{"line":79,"column":28}},"15":{"start":{"line":87,"column":8},"end":{"line":92,"column":9}},"16":{"start":{"line":88,"column":12},"end":{"line":88,"column":55}},"17":{"start":{"line":89,"column":12},"end":{"line":89,"column":94}},"18":{"start":{"line":91,"column":12},"end":{"line":91,"column":75}},"19":{"start":{"line":101,"column":8},"end":{"line":119,"column":9}},"20":{"start":{"line":102,"column":12},"end":{"line":118,"column":15}},"21":{"start":{"line":111,"column":20},"end":{"line":111,"column":63}},"22":{"start":{"line":113,"column":20},"end":{"line":115,"column":21}},"23":{"start":{"line":114,"column":24},"end":{"line":114,"column":131}},"24":{"start":{"line":116,"column":20},"end":{"line":116,"column":152}},"25":{"start":{"line":126,"column":8},"end":{"line":178,"column":9}},"26":{"start":{"line":127,"column":12},"end":{"line":127,"column":67}},"27":{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},"28":{"start":{"line":130,"column":16},"end":{"line":130,"column":23}},"29":{"start":{"line":133,"column":12},"end":{"line":133,"column":49}},"30":{"start":{"line":134,"column":12},"end":{"line":134,"column":115}},"31":{"start":{"line":139,"column":12},"end":{"line":159,"column":13}},"32":{"start":{"line":145,"column":16},"end":{"line":147,"column":17}},"33":{"start":{"line":146,"column":20},"end":{"line":146,"column":64}},"34":{"start":{"line":149,"column":16},"end":{"line":151,"column":17}},"35":{"start":{"line":150,"column":20},"end":{"line":150,"column":65}},"36":{"start":{"line":152,"column":19},"end":{"line":159,"column":13}},"37":{"start":{"line":158,"column":16},"end":{"line":158,"column":61}},"38":{"start":{"line":161,"column":12},"end":{"line":161,"column":68}},"39":{"start":{"line":162,"column":12},"end":{"line":162,"column":84}},"40":{"start":{"line":167,"column":12},"end":{"line":169,"column":13}},"41":{"start":{"line":168,"column":16},"end":{"line":168,"column":23}},"42":{"start":{"line":171,"column":12},"end":{"line":173,"column":13}},"43":{"start":{"line":172,"column":16},"end":{"line":172,"column":58}},"44":{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},"45":{"start":{"line":176,"column":16},"end":{"line":176,"column":59}},"46":{"start":{"line":184,"column":8},"end":{"line":189,"column":10}}},"branchMap":{"1":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":23},"end":{"line":46,"column":41}},{"start":{"line":46,"column":45},"end":{"line":46,"column":53}}]},"2":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":62},"end":{"line":47,"column":68}},{"start":{"line":47,"column":71},"end":{"line":47,"column":84}}]},"3":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":61},"end":{"line":48,"column":67}},{"start":{"line":48,"column":70},"end":{"line":48,"column":82}}]},"4":{"line":61,"type":"cond-expr","locations":[{"start":{"line":61,"column":50},"end":{"line":61,"column":74}},{"start":{"line":61,"column":77},"end":{"line":61,"column":78}}]},"5":{"line":77,"type":"cond-expr","locations":[{"start":{"line":78,"column":18},"end":{"line":78,"column":35}},{"start":{"line":79,"column":18},"end":{"line":79,"column":27}}]},"6":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":19},"end":{"line":77,"column":55}},{"start":{"line":77,"column":59},"end":{"line":77,"column":116}}]},"7":{"line":106,"type":"cond-expr","locations":[{"start":{"line":106,"column":41},"end":{"line":106,"column":51}},{"start":{"line":106,"column":54},"end":{"line":106,"column":66}}]},"8":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":20},"end":{"line":113,"column":20}},{"start":{"line":113,"column":20},"end":{"line":113,"column":20}}]},"9":{"line":114,"type":"cond-expr","locations":[{"start":{"line":114,"column":55},"end":{"line":114,"column":89}},{"start":{"line":114,"column":92},"end":{"line":114,"column":130}}]},"10":{"line":116,"type":"cond-expr","locations":[{"start":{"line":116,"column":69},"end":{"line":116,"column":103}},{"start":{"line":116,"column":106},"end":{"line":116,"column":150}}]},"11":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":12},"end":{"line":129,"column":12}},{"start":{"line":129,"column":12},"end":{"line":129,"column":12}}]},"12":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":12},"end":{"line":139,"column":12}},{"start":{"line":139,"column":12},"end":{"line":139,"column":12}}]},"13":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":16},"end":{"line":140,"column":46}},{"start":{"line":140,"column":50},"end":{"line":140,"column":87}},{"start":{"line":143,"column":16},"end":{"line":143,"column":39}},{"start":{"line":143,"column":43},"end":{"line":143,"column":66}}]},"14":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":16},"end":{"line":145,"column":16}},{"start":{"line":145,"column":16},"end":{"line":145,"column":16}}]},"15":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":20},"end":{"line":145,"column":49}},{"start":{"line":145,"column":53},"end":{"line":145,"column":86}}]},"16":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":16},"end":{"line":149,"column":16}},{"start":{"line":149,"column":16},"end":{"line":149,"column":16}}]},"17":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":20},"end":{"line":149,"column":48}},{"start":{"line":149,"column":52},"end":{"line":149,"column":84}}]},"18":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":19},"end":{"line":152,"column":19}},{"start":{"line":152,"column":19},"end":{"line":152,"column":19}}]},"19":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":16},"end":{"line":153,"column":39}},{"start":{"line":154,"column":16},"end":{"line":154,"column":44}},{"start":{"line":155,"column":16},"end":{"line":155,"column":40}},{"start":{"line":156,"column":16},"end":{"line":156,"column":48}}]},"20":{"line":162,"type":"cond-expr","locations":[{"start":{"line":162,"column":57},"end":{"line":162,"column":66}},{"start":{"line":162,"column":69},"end":{"line":162,"column":83}}]},"21":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":12},"end":{"line":167,"column":12}},{"start":{"line":167,"column":12},"end":{"line":167,"column":12}}]},"22":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":16},"end":{"line":167,"column":67}},{"start":{"line":167,"column":71},"end":{"line":167,"column":102}}]},"23":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":12},"end":{"line":171,"column":12}},{"start":{"line":171,"column":12},"end":{"line":171,"column":12}}]},"24":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":16},"end":{"line":171,"column":44}},{"start":{"line":171,"column":48},"end":{"line":171,"column":79}}]},"25":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":12},"end":{"line":175,"column":12}},{"start":{"line":175,"column":12},"end":{"line":175,"column":12}}]},"26":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":16},"end":{"line":175,"column":43}},{"start":{"line":175,"column":47},"end":{"line":175,"column":77}}]}},"code":["/**"," * @fileoverview Require or disallow newlines around directives."," * @author Kai Cataldo"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow newlines around directives\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        schema: [{","            oneOf: [","                {","                    enum: [\"always\", \"never\"]","                },","                {","                    type: \"object\",","                    properties: {","                        before: {","                            enum: [\"always\", \"never\"]","                        },","                        after: {","                            enum: [\"always\", \"never\"]","                        }","                    },","                    additionalProperties: false,","                    minProperties: 2","                }","            ]","        }],","        fixable: \"whitespace\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        const config = context.options[0] || \"always\";","        const expectLineBefore = typeof config === \"string\" ? config : config.before;","        const expectLineAfter = typeof config === \"string\" ? config : config.after;","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Check if node is preceded by a blank newline.","         * @param {ASTNode} node Node to check.","         * @returns {boolean} Whether or not the passed in node is preceded by a blank newline.","         */","        function hasNewlineBefore(node) {","            const tokenBefore = sourceCode.getTokenBefore(node, { includeComments: true });","            const tokenLineBefore = tokenBefore ? tokenBefore.loc.end.line : 0;","","            return node.loc.start.line - tokenLineBefore >= 2;","        }","","        /**","        * Gets the last token of a node that is on the same line as the rest of the node.","        * This will usually be the last token of the node, but it will be the second-to-last token if the node has a trailing","        * semicolon on a different line.","        * @param {ASTNode} node A directive node","        * @returns {Token} The last token of the node on the line","        */","        function getLastTokenOnLine(node) {","            const lastToken = sourceCode.getLastToken(node);","            const secondToLastToken = sourceCode.getTokenBefore(lastToken);","","            return astUtils.isSemicolonToken(lastToken) && lastToken.loc.start.line > secondToLastToken.loc.end.line","                ? secondToLastToken","                : lastToken;","        }","","        /**","         * Check if node is followed by a blank newline.","         * @param {ASTNode} node Node to check.","         * @returns {boolean} Whether or not the passed in node is followed by a blank newline.","         */","        function hasNewlineAfter(node) {","            const lastToken = getLastTokenOnLine(node);","            const tokenAfter = sourceCode.getTokenAfter(lastToken, { includeComments: true });","","            return tokenAfter.loc.start.line - lastToken.loc.end.line >= 2;","        }","","        /**","         * Report errors for newlines around directives.","         * @param {ASTNode} node Node to check.","         * @param {string} location Whether the error was found before or after the directive.","         * @param {boolean} expected Whether or not a newline was expected or unexpected.","         * @returns {void}","         */","        function reportError(node, location, expected) {","            context.report({","                node,","                message: \"{{expected}} newline {{location}} \\\"{{value}}\\\" directive.\",","                data: {","                    expected: expected ? \"Expected\" : \"Unexpected\",","                    value: node.expression.value,","                    location","                },","                fix(fixer) {","                    const lastToken = getLastTokenOnLine(node);","","                    if (expected) {","                        return location === \"before\" ? fixer.insertTextBefore(node, \"\\n\") : fixer.insertTextAfter(lastToken, \"\\n\");","                    }","                    return fixer.removeRange(location === \"before\" ? [node.range[0] - 1, node.range[0]] : [lastToken.range[1], lastToken.range[1] + 1]);","                }","            });","        }","","        /**","         * Check lines around directives in node","         * @param {ASTNode} node - node to check","         * @returns {void}","         */","        function checkDirectives(node) {","            const directives = astUtils.getDirectivePrologue(node);","","            if (!directives.length) {","                return;","            }","","            const firstDirective = directives[0];","            const hasTokenOrCommentBefore = !!sourceCode.getTokenBefore(firstDirective, { includeComments: true });","","            // Only check before the first directive if it is preceded by a comment or if it is at the top of","            // the file and expectLineBefore is set to \"never\". This is to not force a newline at the top of","            // the file if there are no comments as well as for compatibility with padded-blocks.","            if (","                firstDirective.leadingComments && firstDirective.leadingComments.length ||","","                // Shebangs are not added to leading comments but are accounted for by the following.","                node.type === \"Program\" && hasTokenOrCommentBefore","            ) {","                if (expectLineBefore === \"always\" && !hasNewlineBefore(firstDirective)) {","                    reportError(firstDirective, \"before\", true);","                }","","                if (expectLineBefore === \"never\" && hasNewlineBefore(firstDirective)) {","                    reportError(firstDirective, \"before\", false);","                }","            } else if (","                node.type === \"Program\" &&","                expectLineBefore === \"never\" &&","                !hasTokenOrCommentBefore &&","                hasNewlineBefore(firstDirective)","            ) {","                reportError(firstDirective, \"before\", false);","            }","","            const lastDirective = directives[directives.length - 1];","            const statements = node.type === \"Program\" ? node.body : node.body.body;","","            // Do not check after the last directive if the body only","            // contains a directive prologue and isn't followed by a comment to ensure","            // this rule behaves well with padded-blocks.","            if (lastDirective === statements[statements.length - 1] && !lastDirective.trailingComments) {","                return;","            }","","            if (expectLineAfter === \"always\" && !hasNewlineAfter(lastDirective)) {","                reportError(lastDirective, \"after\", true);","            }","","            if (expectLineAfter === \"never\" && hasNewlineAfter(lastDirective)) {","                reportError(lastDirective, \"after\", false);","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            Program: checkDirectives,","            FunctionDeclaration: checkDirectives,","            FunctionExpression: checkDirectives,","            ArrowFunctionExpression: checkDirectives","        };","    }","};",""],"l":{"8":1,"14":1,"45":0,"46":0,"47":0,"48":0,"59":1,"60":0,"61":0,"63":0,"73":1,"74":0,"75":0,"77":0,"87":1,"88":0,"89":0,"91":0,"101":1,"102":0,"111":0,"113":0,"114":0,"116":0,"126":1,"127":0,"129":0,"130":0,"133":0,"134":0,"139":0,"145":0,"146":0,"149":0,"150":0,"152":0,"158":0,"161":0,"162":0,"167":0,"168":0,"171":0,"172":0,"175":0,"176":0,"184":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-depth.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-depth.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":46,"loc":{"start":{"line":46,"column":10},"end":{"line":46,"column":20}}},"2":{"name":"startFunction","line":71,"loc":{"start":{"line":71,"column":8},"end":{"line":71,"column":33}}},"3":{"name":"endFunction","line":80,"loc":{"start":{"line":80,"column":8},"end":{"line":80,"column":31}}},"4":{"name":"pushBlock","line":90,"loc":{"start":{"line":90,"column":8},"end":{"line":90,"column":33}}},"5":{"name":"popBlock","line":103,"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":28}}},"6":{"name":"(anonymous_6)","line":117,"loc":{"start":{"line":117,"column":23},"end":{"line":117,"column":30}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":148,"column":2}},"2":{"start":{"line":52,"column":8},"end":{"line":53,"column":40}},"3":{"start":{"line":54,"column":8},"end":{"line":54,"column":25}},"4":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"5":{"start":{"line":57,"column":12},"end":{"line":57,"column":38}},"6":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"7":{"start":{"line":60,"column":12},"end":{"line":60,"column":34}},"8":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"9":{"start":{"line":63,"column":12},"end":{"line":63,"column":30}},"10":{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},"11":{"start":{"line":72,"column":12},"end":{"line":72,"column":34}},"12":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"13":{"start":{"line":81,"column":12},"end":{"line":81,"column":32}},"14":{"start":{"line":90,"column":8},"end":{"line":96,"column":9}},"15":{"start":{"line":91,"column":12},"end":{"line":91,"column":66}},"16":{"start":{"line":93,"column":12},"end":{"line":95,"column":13}},"17":{"start":{"line":94,"column":16},"end":{"line":94,"column":117}},"18":{"start":{"line":103,"column":8},"end":{"line":105,"column":9}},"19":{"start":{"line":104,"column":12},"end":{"line":104,"column":54}},"20":{"start":{"line":111,"column":8},"end":{"line":145,"column":10}},"21":{"start":{"line":118,"column":16},"end":{"line":120,"column":17}},"22":{"start":{"line":119,"column":20},"end":{"line":119,"column":36}}},"branchMap":{"1":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]},"2":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":38}},{"start":{"line":56,"column":42},"end":{"line":56,"column":74}},{"start":{"line":56,"column":78},"end":{"line":56,"column":112}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"4":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":38}},{"start":{"line":59,"column":42},"end":{"line":59,"column":70}},{"start":{"line":59,"column":74},"end":{"line":59,"column":104}}]},"5":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"6":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":12},"end":{"line":93,"column":12}},{"start":{"line":93,"column":12},"end":{"line":93,"column":12}}]},"7":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":16},"end":{"line":118,"column":16}},{"start":{"line":118,"column":16},"end":{"line":118,"column":16}}]}},"code":["/**"," * @fileoverview A rule to set the maximum depth block can be nested in a function."," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce a maximum depth that blocks can be nested\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        type: \"integer\",","                        minimum: 0","                    },","                    {","                        type: \"object\",","                        properties: {","                            maximum: {","                                type: \"integer\",","                                minimum: 0","                            },","                            max: {","                                type: \"integer\",","                                minimum: 0","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        const functionStack = [],","            option = context.options[0];","        let maxDepth = 4;","","        if (typeof option === \"object\" && option.hasOwnProperty(\"maximum\") && typeof option.maximum === \"number\") {","            maxDepth = option.maximum;","        }","        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {","            maxDepth = option.max;","        }","        if (typeof option === \"number\") {","            maxDepth = option;","        }","","        /**","         * When parsing a new function, store it in our function stack","         * @returns {void}","         * @private","         */","        function startFunction() {","            functionStack.push(0);","        }","","        /**","         * When parsing is done then pop out the reference","         * @returns {void}","         * @private","         */","        function endFunction() {","            functionStack.pop();","        }","","        /**","         * Save the block and Evaluate the node","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function pushBlock(node) {","            const len = ++functionStack[functionStack.length - 1];","","            if (len > maxDepth) {","                context.report({ node, message: \"Blocks are nested too deeply ({{depth}}).\", data: { depth: len } });","            }","        }","","        /**","         * Pop the saved block","         * @returns {void}","         * @private","         */","        function popBlock() {","            functionStack[functionStack.length - 1]--;","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            Program: startFunction,","            FunctionDeclaration: startFunction,","            FunctionExpression: startFunction,","            ArrowFunctionExpression: startFunction,","","            IfStatement(node) {","                if (node.parent.type !== \"IfStatement\") {","                    pushBlock(node);","                }","            },","            SwitchStatement: pushBlock,","            TryStatement: pushBlock,","            DoWhileStatement: pushBlock,","            WhileStatement: pushBlock,","            WithStatement: pushBlock,","            ForStatement: pushBlock,","            ForInStatement: pushBlock,","            ForOfStatement: pushBlock,","","            \"IfStatement:exit\": popBlock,","            \"SwitchStatement:exit\": popBlock,","            \"TryStatement:exit\": popBlock,","            \"DoWhileStatement:exit\": popBlock,","            \"WhileStatement:exit\": popBlock,","            \"WithStatement:exit\": popBlock,","            \"ForStatement:exit\": popBlock,","            \"ForInStatement:exit\": popBlock,","            \"ForOfStatement:exit\": popBlock,","","            \"FunctionDeclaration:exit\": endFunction,","            \"FunctionExpression:exit\": endFunction,","            \"ArrowFunctionExpression:exit\": endFunction,","            \"Program:exit\": endFunction","        };","","    }","};",""],"l":{"12":1,"52":0,"54":0,"56":0,"57":0,"59":0,"60":0,"62":0,"63":0,"71":1,"72":0,"80":1,"81":0,"90":1,"91":0,"93":0,"94":0,"103":1,"104":0,"111":0,"118":0,"119":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-len.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-len.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":1,"25":0,"26":0,"27":1,"28":0,"29":1,"30":0,"31":0,"32":0,"33":1,"34":0,"35":0,"36":1,"37":0,"38":0,"39":1,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0,0],"16":[0,0,0,0,0,0,0],"17":[0,0],"18":[0,0],"19":[0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0,0,0,0,0,0,0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":81,"loc":{"start":{"line":81,"column":10},"end":{"line":81,"column":20}}},"2":{"name":"computeLineLength","line":103,"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":51}}},"3":{"name":"isTrailingComment","line":157,"loc":{"start":{"line":157,"column":8},"end":{"line":157,"column":62}}},"4":{"name":"isFullLineComment","line":170,"loc":{"start":{"line":170,"column":8},"end":{"line":170,"column":62}}},"5":{"name":"stripTrailingComment","line":188,"loc":{"start":{"line":188,"column":8},"end":{"line":188,"column":65}}},"6":{"name":"ensureArrayAndPush","line":203,"loc":{"start":{"line":203,"column":8},"end":{"line":203,"column":56}}},"7":{"name":"getAllStrings","line":215,"loc":{"start":{"line":215,"column":8},"end":{"line":215,"column":33}}},"8":{"name":"getAllTemplateLiterals","line":224,"loc":{"start":{"line":224,"column":8},"end":{"line":224,"column":42}}},"9":{"name":"getAllRegExpLiterals","line":234,"loc":{"start":{"line":234,"column":8},"end":{"line":234,"column":40}}},"10":{"name":"groupByLineNumber","line":247,"loc":{"start":{"line":247,"column":8},"end":{"line":247,"column":46}}},"11":{"name":"checkProgramForMaxLength","line":260,"loc":{"start":{"line":260,"column":8},"end":{"line":260,"column":48}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":50,"column":2}},"2":{"start":{"line":52,"column":0},"end":{"line":60,"column":2}},"3":{"start":{"line":66,"column":0},"end":{"line":363,"column":2}},"4":{"start":{"line":91,"column":8},"end":{"line":91,"column":47}},"5":{"start":{"line":93,"column":8},"end":{"line":93,"column":51}},"6":{"start":{"line":103,"column":8},"end":{"line":114,"column":9}},"7":{"start":{"line":104,"column":12},"end":{"line":104,"column":40}},"8":{"start":{"line":106,"column":12},"end":{"line":112,"column":15}},"9":{"start":{"line":107,"column":16},"end":{"line":109,"column":66}},"10":{"start":{"line":111,"column":16},"end":{"line":111,"column":54}},"11":{"start":{"line":113,"column":12},"end":{"line":113,"column":65}},"12":{"start":{"line":117,"column":8},"end":{"line":117,"column":71}},"13":{"start":{"line":118,"column":8},"end":{"line":118,"column":88}},"14":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"15":{"start":{"line":122,"column":12},"end":{"line":122,"column":46}},"16":{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},"17":{"start":{"line":127,"column":12},"end":{"line":127,"column":50}},"18":{"start":{"line":130,"column":8},"end":{"line":138,"column":48}},"19":{"start":{"line":139,"column":8},"end":{"line":139,"column":58}},"20":{"start":{"line":141,"column":8},"end":{"line":143,"column":9}},"21":{"start":{"line":142,"column":12},"end":{"line":142,"column":54}},"22":{"start":{"line":157,"column":8},"end":{"line":161,"column":9}},"23":{"start":{"line":158,"column":12},"end":{"line":160,"column":94}},"24":{"start":{"line":170,"column":8},"end":{"line":178,"column":9}},"25":{"start":{"line":171,"column":12},"end":{"line":173,"column":85}},"26":{"start":{"line":175,"column":12},"end":{"line":177,"column":99}},"27":{"start":{"line":188,"column":8},"end":{"line":192,"column":9}},"28":{"start":{"line":191,"column":12},"end":{"line":191,"column":79}},"29":{"start":{"line":203,"column":8},"end":{"line":208,"column":9}},"30":{"start":{"line":204,"column":12},"end":{"line":206,"column":13}},"31":{"start":{"line":205,"column":16},"end":{"line":205,"column":33}},"32":{"start":{"line":207,"column":12},"end":{"line":207,"column":36}},"33":{"start":{"line":215,"column":8},"end":{"line":217,"column":9}},"34":{"start":{"line":216,"column":12},"end":{"line":216,"column":82}},"35":{"start":{"line":216,"column":57},"end":{"line":216,"column":80}},"36":{"start":{"line":224,"column":8},"end":{"line":226,"column":9}},"37":{"start":{"line":225,"column":12},"end":{"line":225,"column":84}},"38":{"start":{"line":225,"column":57},"end":{"line":225,"column":82}},"39":{"start":{"line":234,"column":8},"end":{"line":236,"column":9}},"40":{"start":{"line":235,"column":12},"end":{"line":235,"column":93}},"41":{"start":{"line":235,"column":57},"end":{"line":235,"column":91}},"42":{"start":{"line":247,"column":8},"end":{"line":252,"column":9}},"43":{"start":{"line":248,"column":12},"end":{"line":250,"column":13}},"44":{"start":{"line":249,"column":16},"end":{"line":249,"column":49}},"45":{"start":{"line":251,"column":12},"end":{"line":251,"column":23}},"46":{"start":{"line":260,"column":8},"end":{"line":351,"column":9}},"47":{"start":{"line":263,"column":12},"end":{"line":266,"column":123}},"48":{"start":{"line":269,"column":12},"end":{"line":269,"column":34}},"49":{"start":{"line":271,"column":12},"end":{"line":271,"column":54}},"50":{"start":{"line":272,"column":12},"end":{"line":272,"column":72}},"51":{"start":{"line":274,"column":12},"end":{"line":274,"column":72}},"52":{"start":{"line":275,"column":12},"end":{"line":275,"column":90}},"53":{"start":{"line":277,"column":12},"end":{"line":277,"column":68}},"54":{"start":{"line":278,"column":12},"end":{"line":278,"column":86}},"55":{"start":{"line":280,"column":12},"end":{"line":350,"column":15}},"56":{"start":{"line":283,"column":16},"end":{"line":283,"column":41}},"57":{"start":{"line":289,"column":16},"end":{"line":289,"column":42}},"58":{"start":{"line":295,"column":16},"end":{"line":311,"column":17}},"59":{"start":{"line":296,"column":20},"end":{"line":296,"column":39}},"60":{"start":{"line":299,"column":20},"end":{"line":301,"column":78}},"61":{"start":{"line":300,"column":24},"end":{"line":300,"column":60}},"62":{"start":{"line":304,"column":20},"end":{"line":304,"column":56}},"63":{"start":{"line":306,"column":20},"end":{"line":310,"column":21}},"64":{"start":{"line":307,"column":24},"end":{"line":307,"column":45}},"65":{"start":{"line":308,"column":27},"end":{"line":310,"column":21}},"66":{"start":{"line":309,"column":24},"end":{"line":309,"column":79}},"67":{"start":{"line":312,"column":16},"end":{"line":321,"column":17}},"68":{"start":{"line":320,"column":20},"end":{"line":320,"column":27}},"69":{"start":{"line":323,"column":16},"end":{"line":323,"column":69}},"70":{"start":{"line":325,"column":16},"end":{"line":327,"column":17}},"71":{"start":{"line":326,"column":20},"end":{"line":326,"column":27}},"72":{"start":{"line":329,"column":16},"end":{"line":349,"column":17}},"73":{"start":{"line":330,"column":20},"end":{"line":338,"column":23}},"74":{"start":{"line":339,"column":23},"end":{"line":349,"column":17}},"75":{"start":{"line":340,"column":20},"end":{"line":348,"column":23}},"76":{"start":{"line":358,"column":8},"end":{"line":360,"column":10}}},"branchMap":{"1":{"line":108,"type":"cond-expr","locations":[{"start":{"line":108,"column":55},"end":{"line":108,"column":77}},{"start":{"line":108,"column":80},"end":{"line":108,"column":81}}]},"2":{"line":118,"type":"cond-expr","locations":[{"start":{"line":118,"column":57},"end":{"line":118,"column":82}},{"start":{"line":118,"column":85},"end":{"line":118,"column":87}}]},"3":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":8}},{"start":{"line":121,"column":8},"end":{"line":121,"column":8}}]},"4":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":8},"end":{"line":126,"column":8}},{"start":{"line":126,"column":8},"end":{"line":126,"column":8}}]},"5":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":26},"end":{"line":130,"column":38}},{"start":{"line":130,"column":42},"end":{"line":130,"column":44}}]},"6":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":23},"end":{"line":131,"column":39}},{"start":{"line":131,"column":43},"end":{"line":131,"column":44}}]},"7":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":29},"end":{"line":132,"column":51}},{"start":{"line":132,"column":55},"end":{"line":132,"column":60}}]},"8":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":28},"end":{"line":133,"column":49}},{"start":{"line":133,"column":53},"end":{"line":133,"column":58}}]},"9":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":37},"end":{"line":134,"column":67}},{"start":{"line":134,"column":71},"end":{"line":134,"column":76}}]},"10":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":35},"end":{"line":135,"column":63}},{"start":{"line":135,"column":67},"end":{"line":135,"column":72}}]},"11":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":37},"end":{"line":136,"column":67}},{"start":{"line":136,"column":71},"end":{"line":136,"column":93}},{"start":{"line":136,"column":97},"end":{"line":136,"column":102}}]},"12":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":25},"end":{"line":137,"column":43}},{"start":{"line":137,"column":47},"end":{"line":137,"column":52}}]},"13":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":28},"end":{"line":139,"column":49}},{"start":{"line":139,"column":53},"end":{"line":139,"column":57}}]},"14":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":8},"end":{"line":141,"column":8}},{"start":{"line":141,"column":8},"end":{"line":141,"column":8}}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":19},"end":{"line":158,"column":26}},{"start":{"line":159,"column":17},"end":{"line":159,"column":54}},{"start":{"line":159,"column":58},"end":{"line":159,"column":92}},{"start":{"line":160,"column":17},"end":{"line":160,"column":50}},{"start":{"line":160,"column":54},"end":{"line":160,"column":92}}]},"16":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":19},"end":{"line":175,"column":26}},{"start":{"line":176,"column":17},"end":{"line":176,"column":40}},{"start":{"line":176,"column":45},"end":{"line":176,"column":70}},{"start":{"line":176,"column":74},"end":{"line":176,"column":92}},{"start":{"line":177,"column":17},"end":{"line":177,"column":38}},{"start":{"line":177,"column":43},"end":{"line":177,"column":66}},{"start":{"line":177,"column":70},"end":{"line":177,"column":96}}]},"17":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":12},"end":{"line":204,"column":12}},{"start":{"line":204,"column":12},"end":{"line":204,"column":12}}]},"18":{"line":266,"type":"cond-expr","locations":[{"start":{"line":266,"column":90},"end":{"line":266,"column":117}},{"start":{"line":266,"column":120},"end":{"line":266,"column":122}}]},"19":{"line":266,"type":"binary-expr","locations":[{"start":{"line":266,"column":27},"end":{"line":266,"column":41}},{"start":{"line":266,"column":45},"end":{"line":266,"column":61}},{"start":{"line":266,"column":65},"end":{"line":266,"column":87}}]},"20":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":16},"end":{"line":295,"column":16}},{"start":{"line":295,"column":16},"end":{"line":295,"column":16}}]},"21":{"line":301,"type":"binary-expr","locations":[{"start":{"line":301,"column":29},"end":{"line":301,"column":36}},{"start":{"line":301,"column":40},"end":{"line":301,"column":76}}]},"22":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":20},"end":{"line":306,"column":20}},{"start":{"line":306,"column":20},"end":{"line":306,"column":20}}]},"23":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":27},"end":{"line":308,"column":27}},{"start":{"line":308,"column":27},"end":{"line":308,"column":27}}]},"24":{"line":308,"type":"binary-expr","locations":[{"start":{"line":308,"column":31},"end":{"line":308,"column":53}},{"start":{"line":308,"column":57},"end":{"line":308,"column":101}}]},"25":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":16},"end":{"line":312,"column":16}},{"start":{"line":312,"column":16},"end":{"line":312,"column":16}}]},"26":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":20},"end":{"line":312,"column":33}},{"start":{"line":312,"column":37},"end":{"line":312,"column":61}},{"start":{"line":313,"column":20},"end":{"line":313,"column":30}},{"start":{"line":313,"column":34},"end":{"line":313,"column":55}},{"start":{"line":314,"column":20},"end":{"line":314,"column":33}},{"start":{"line":314,"column":37},"end":{"line":314,"column":62}},{"start":{"line":315,"column":20},"end":{"line":315,"column":42}},{"start":{"line":315,"column":46},"end":{"line":315,"column":80}},{"start":{"line":316,"column":20},"end":{"line":316,"column":40}},{"start":{"line":316,"column":44},"end":{"line":316,"column":76}}]},"27":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":16},"end":{"line":325,"column":16}},{"start":{"line":325,"column":16},"end":{"line":325,"column":16}}]},"28":{"line":325,"type":"binary-expr","locations":[{"start":{"line":325,"column":20},"end":{"line":325,"column":33}},{"start":{"line":325,"column":37},"end":{"line":325,"column":51}}]},"29":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":16},"end":{"line":329,"column":16}},{"start":{"line":329,"column":16},"end":{"line":329,"column":16}}]},"30":{"line":329,"type":"binary-expr","locations":[{"start":{"line":329,"column":20},"end":{"line":329,"column":33}},{"start":{"line":329,"column":37},"end":{"line":329,"column":66}}]},"31":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":23},"end":{"line":339,"column":23}},{"start":{"line":339,"column":23},"end":{"line":339,"column":23}}]}},"code":["/**"," * @fileoverview Rule to check for max length on a line."," * @author Matt DuVall <http://www.mattduvall.com>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const OPTIONS_SCHEMA = {","    type: \"object\",","    properties: {","        code: {","            type: \"integer\",","            minimum: 0","        },","        comments: {","            type: \"integer\",","            minimum: 0","        },","        tabWidth: {","            type: \"integer\",","            minimum: 0","        },","        ignorePattern: {","            type: \"string\"","        },","        ignoreComments: {","            type: \"boolean\"","        },","        ignoreStrings: {","            type: \"boolean\"","        },","        ignoreUrls: {","            type: \"boolean\"","        },","        ignoreTemplateLiterals: {","            type: \"boolean\"","        },","        ignoreRegExpLiterals: {","            type: \"boolean\"","        },","        ignoreTrailingComments: {","            type: \"boolean\"","        }","    },","    additionalProperties: false","};","","const OPTIONS_OR_INTEGER_SCHEMA = {","    anyOf: [","        OPTIONS_SCHEMA,","        {","            type: \"integer\",","            minimum: 0","        }","    ]","};","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce a maximum line length\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            OPTIONS_OR_INTEGER_SCHEMA,","            OPTIONS_OR_INTEGER_SCHEMA,","            OPTIONS_SCHEMA","        ]","    },","","    create(context) {","","        /*","         * Inspired by http://tools.ietf.org/html/rfc3986#appendix-B, however:","         * - They're matching an entire string that we know is a URI","         * - We're matching part of a string where we think there *might* be a URL","         * - We're only concerned about URLs, as picking out any URI would cause","         *   too many false positives","         * - We don't care about matching the entire URL, any small segment is fine","         */","        const URL_REGEXP = /[^:/?#]:\\/\\/[^?#]/;","","        const sourceCode = context.getSourceCode();","","        /**","         * Computes the length of a line that may contain tabs. The width of each","         * tab will be the number of spaces to the next tab stop.","         * @param {string} line The line.","         * @param {int} tabWidth The width of each tab stop in spaces.","         * @returns {int} The computed line length.","         * @private","         */","        function computeLineLength(line, tabWidth) {","            let extraCharacterCount = 0;","","            line.replace(/\\t/g, (match, offset) => {","                const totalOffset = offset + extraCharacterCount,","                    previousTabStopOffset = tabWidth ? totalOffset % tabWidth : 0,","                    spaceCount = tabWidth - previousTabStopOffset;","","                extraCharacterCount += spaceCount - 1;  // -1 for the replaced tab","            });","            return Array.from(line).length + extraCharacterCount;","        }","","        // The options object must be the last option specified…","        const lastOption = context.options[context.options.length - 1];","        const options = typeof lastOption === \"object\" ? Object.create(lastOption) : {};","","        // …but max code length…","        if (typeof context.options[0] === \"number\") {","            options.code = context.options[0];","        }","","        // …and tabWidth can be optionally specified directly as integers.","        if (typeof context.options[1] === \"number\") {","            options.tabWidth = context.options[1];","        }","","        const maxLength = options.code || 80,","            tabWidth = options.tabWidth || 4,","            ignoreComments = options.ignoreComments || false,","            ignoreStrings = options.ignoreStrings || false,","            ignoreTemplateLiterals = options.ignoreTemplateLiterals || false,","            ignoreRegExpLiterals = options.ignoreRegExpLiterals || false,","            ignoreTrailingComments = options.ignoreTrailingComments || options.ignoreComments || false,","            ignoreUrls = options.ignoreUrls || false,","            maxCommentLength = options.comments;","        let ignorePattern = options.ignorePattern || null;","","        if (ignorePattern) {","            ignorePattern = new RegExp(ignorePattern);","        }","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Tells if a given comment is trailing: it starts on the current line and","         * extends to or past the end of the current line.","         * @param {string} line The source line we want to check for a trailing comment on","         * @param {number} lineNumber The one-indexed line number for line","         * @param {ASTNode} comment The comment to inspect","         * @returns {boolean} If the comment is trailing on the given line","         */","        function isTrailingComment(line, lineNumber, comment) {","            return comment &&","                (comment.loc.start.line === lineNumber && lineNumber <= comment.loc.end.line) &&","                (comment.loc.end.line > lineNumber || comment.loc.end.column === line.length);","        }","","        /**","         * Tells if a comment encompasses the entire line.","         * @param {string} line The source line with a trailing comment","         * @param {number} lineNumber The one-indexed line number this is on","         * @param {ASTNode} comment The comment to remove","         * @returns {boolean} If the comment covers the entire line","         */","        function isFullLineComment(line, lineNumber, comment) {","            const start = comment.loc.start,","                end = comment.loc.end,","                isFirstTokenOnLine = !line.slice(0, comment.loc.start.column).trim();","","            return comment &&","                (start.line < lineNumber || (start.line === lineNumber && isFirstTokenOnLine)) &&","                (end.line > lineNumber || (end.line === lineNumber && end.column === line.length));","        }","","        /**","         * Gets the line after the comment and any remaining trailing whitespace is","         * stripped.","         * @param {string} line The source line with a trailing comment","         * @param {number} lineNumber The one-indexed line number this is on","         * @param {ASTNode} comment The comment to remove","         * @returns {string} Line without comment and trailing whitepace","         */","        function stripTrailingComment(line, lineNumber, comment) {","","            // loc.column is zero-indexed","            return line.slice(0, comment.loc.start.column).replace(/\\s+$/, \"\");","        }","","        /**","         * Ensure that an array exists at [key] on `object`, and add `value` to it.","         *","         * @param {Object} object the object to mutate","         * @param {string} key the object's key","         * @param {*} value the value to add","         * @returns {void}","         * @private","         */","        function ensureArrayAndPush(object, key, value) {","            if (!Array.isArray(object[key])) {","                object[key] = [];","            }","            object[key].push(value);","        }","","        /**","         * Retrieves an array containing all strings (\" or ') in the source code.","         *","         * @returns {ASTNode[]} An array of string nodes.","         */","        function getAllStrings() {","            return sourceCode.ast.tokens.filter(token => token.type === \"String\");","        }","","        /**","         * Retrieves an array containing all template literals in the source code.","         *","         * @returns {ASTNode[]} An array of template literal nodes.","         */","        function getAllTemplateLiterals() {","            return sourceCode.ast.tokens.filter(token => token.type === \"Template\");","        }","","","        /**","         * Retrieves an array containing all RegExp literals in the source code.","         *","         * @returns {ASTNode[]} An array of RegExp literal nodes.","         */","        function getAllRegExpLiterals() {","            return sourceCode.ast.tokens.filter(token => token.type === \"RegularExpression\");","        }","","","        /**","         * A reducer to group an AST node by line number, both start and end.","         *","         * @param {Object} acc the accumulator","         * @param {ASTNode} node the AST node in question","         * @returns {Object} the modified accumulator","         * @private","         */","        function groupByLineNumber(acc, node) {","            for (let i = node.loc.start.line; i <= node.loc.end.line; ++i) {","                ensureArrayAndPush(acc, i, node);","            }","            return acc;","        }","","        /**","         * Check the program for max length","         * @param {ASTNode} node Node to examine","         * @returns {void}","         * @private","         */","        function checkProgramForMaxLength(node) {","","            // split (honors line-ending)","            const lines = sourceCode.lines,","","                // list of comments to ignore","                comments = ignoreComments || maxCommentLength || ignoreTrailingComments ? sourceCode.getAllComments() : [];","","                // we iterate over comments in parallel with the lines","            let commentsIndex = 0;","","            const strings = getAllStrings(sourceCode);","            const stringsByLine = strings.reduce(groupByLineNumber, {});","","            const templateLiterals = getAllTemplateLiterals(sourceCode);","            const templateLiteralsByLine = templateLiterals.reduce(groupByLineNumber, {});","","            const regExpLiterals = getAllRegExpLiterals(sourceCode);","            const regExpLiteralsByLine = regExpLiterals.reduce(groupByLineNumber, {});","","            lines.forEach((line, i) => {","","                // i is zero-indexed, line numbers are one-indexed","                const lineNumber = i + 1;","","                /*","                 * if we're checking comment length; we need to know whether this","                 * line is a comment","                 */","                let lineIsComment = false;","","                /*","                 * We can short-circuit the comment checks if we're already out of","                 * comments to check.","                 */","                if (commentsIndex < comments.length) {","                    let comment = null;","","                    // iterate over comments until we find one past the current line","                    do {","                        comment = comments[++commentsIndex];","                    } while (comment && comment.loc.start.line <= lineNumber);","","                    // and step back by one","                    comment = comments[--commentsIndex];","","                    if (isFullLineComment(line, lineNumber, comment)) {","                        lineIsComment = true;","                    } else if (ignoreTrailingComments && isTrailingComment(line, lineNumber, comment)) {","                        line = stripTrailingComment(line, lineNumber, comment);","                    }","                }","                if (ignorePattern && ignorePattern.test(line) ||","                    ignoreUrls && URL_REGEXP.test(line) ||","                    ignoreStrings && stringsByLine[lineNumber] ||","                    ignoreTemplateLiterals && templateLiteralsByLine[lineNumber] ||","                    ignoreRegExpLiterals && regExpLiteralsByLine[lineNumber]","                ) {","","                    // ignore this line","                    return;","                }","","                const lineLength = computeLineLength(line, tabWidth);","","                if (lineIsComment && ignoreComments) {","                    return;","                }","","                if (lineIsComment && lineLength > maxCommentLength) {","                    context.report({","                        node,","                        loc: { line: lineNumber, column: 0 },","                        message: \"Line {{lineNumber}} exceeds the maximum comment line length of {{maxCommentLength}}.\",","                        data: {","                            lineNumber: i + 1,","                            maxCommentLength","                        }","                    });","                } else if (lineLength > maxLength) {","                    context.report({","                        node,","                        loc: { line: lineNumber, column: 0 },","                        message: \"Line {{lineNumber}} exceeds the maximum line length of {{maxLength}}.\",","                        data: {","                            lineNumber: i + 1,","                            maxLength","                        }","                    });","                }","            });","        }","","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            Program: checkProgramForMaxLength","        };","","    }","};",""],"l":{"12":1,"52":1,"66":1,"91":0,"93":0,"103":1,"104":0,"106":0,"107":0,"111":0,"113":0,"117":0,"118":0,"121":0,"122":0,"126":0,"127":0,"130":0,"139":0,"141":0,"142":0,"157":1,"158":0,"170":1,"171":0,"175":0,"188":1,"191":0,"203":1,"204":0,"205":0,"207":0,"215":1,"216":0,"224":1,"225":0,"234":1,"235":0,"247":1,"248":0,"249":0,"251":0,"260":1,"263":0,"269":0,"271":0,"272":0,"274":0,"275":0,"277":0,"278":0,"280":0,"283":0,"289":0,"295":0,"296":0,"299":0,"300":0,"304":0,"306":0,"307":0,"308":0,"309":0,"312":0,"320":0,"323":0,"325":0,"326":0,"329":0,"330":0,"339":0,"340":0,"358":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-lines.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-lines.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":54,"loc":{"start":{"line":54,"column":10},"end":{"line":54,"column":20}}},"2":{"name":"isCommentNodeType","line":76,"loc":{"start":{"line":76,"column":8},"end":{"line":76,"column":42}}},"3":{"name":"getLinesWithoutCode","line":85,"loc":{"start":{"line":85,"column":8},"end":{"line":85,"column":46}}},"4":{"name":"(anonymous_4)","line":116,"loc":{"start":{"line":116,"column":26},"end":{"line":116,"column":29}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"3":{"start":{"line":18,"column":0},"end":{"line":144,"column":2}},"4":{"start":{"line":55,"column":8},"end":{"line":55,"column":42}},"5":{"start":{"line":56,"column":8},"end":{"line":56,"column":22}},"6":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"7":{"start":{"line":59,"column":12},"end":{"line":59,"column":29}},"8":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"9":{"start":{"line":63,"column":12},"end":{"line":63,"column":25}},"10":{"start":{"line":66,"column":8},"end":{"line":66,"column":59}},"11":{"start":{"line":67,"column":8},"end":{"line":67,"column":63}},"12":{"start":{"line":69,"column":8},"end":{"line":69,"column":51}},"13":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"14":{"start":{"line":77,"column":12},"end":{"line":77,"column":78}},"15":{"start":{"line":85,"column":8},"end":{"line":113,"column":9}},"16":{"start":{"line":86,"column":12},"end":{"line":86,"column":47}},"17":{"start":{"line":87,"column":12},"end":{"line":87,"column":43}},"18":{"start":{"line":89,"column":12},"end":{"line":89,"column":22}},"19":{"start":{"line":91,"column":12},"end":{"line":91,"column":28}},"20":{"start":{"line":92,"column":12},"end":{"line":94,"column":47}},"21":{"start":{"line":93,"column":16},"end":{"line":93,"column":84}},"22":{"start":{"line":96,"column":12},"end":{"line":98,"column":13}},"23":{"start":{"line":97,"column":16},"end":{"line":97,"column":27}},"24":{"start":{"line":100,"column":12},"end":{"line":100,"column":28}},"25":{"start":{"line":101,"column":12},"end":{"line":103,"column":47}},"26":{"start":{"line":102,"column":16},"end":{"line":102,"column":83}},"27":{"start":{"line":105,"column":12},"end":{"line":107,"column":13}},"28":{"start":{"line":106,"column":16},"end":{"line":106,"column":25}},"29":{"start":{"line":109,"column":12},"end":{"line":111,"column":13}},"30":{"start":{"line":110,"column":16},"end":{"line":110,"column":52}},"31":{"start":{"line":112,"column":12},"end":{"line":112,"column":22}},"32":{"start":{"line":115,"column":8},"end":{"line":142,"column":10}},"33":{"start":{"line":117,"column":16},"end":{"line":117,"column":93}},"34":{"start":{"line":117,"column":63},"end":{"line":117,"column":90}},"35":{"start":{"line":119,"column":16},"end":{"line":121,"column":17}},"36":{"start":{"line":120,"column":20},"end":{"line":120,"column":68}},"37":{"start":{"line":120,"column":46},"end":{"line":120,"column":66}},"38":{"start":{"line":123,"column":16},"end":{"line":129,"column":17}},"39":{"start":{"line":124,"column":20},"end":{"line":124,"column":65}},"40":{"start":{"line":126,"column":20},"end":{"line":126,"column":111}},"41":{"start":{"line":126,"column":80},"end":{"line":126,"column":108}},"42":{"start":{"line":128,"column":20},"end":{"line":128,"column":92}},"43":{"start":{"line":128,"column":46},"end":{"line":128,"column":90}},"44":{"start":{"line":131,"column":16},"end":{"line":140,"column":17}},"45":{"start":{"line":132,"column":20},"end":{"line":139,"column":23}}},"branchMap":{"1":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"2":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":38}},{"start":{"line":58,"column":42},"end":{"line":58,"column":70}},{"start":{"line":58,"column":74},"end":{"line":58,"column":104}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"4":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":29},"end":{"line":66,"column":35}},{"start":{"line":66,"column":39},"end":{"line":66,"column":58}}]},"5":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":31},"end":{"line":67,"column":37}},{"start":{"line":67,"column":41},"end":{"line":67,"column":62}}]},"6":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":19},"end":{"line":77,"column":24}},{"start":{"line":77,"column":29},"end":{"line":77,"column":51}},{"start":{"line":77,"column":55},"end":{"line":77,"column":76}}]},"7":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":12},"end":{"line":96,"column":12}},{"start":{"line":96,"column":12},"end":{"line":96,"column":12}}]},"8":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":21}},{"start":{"line":96,"column":25},"end":{"line":96,"column":67}}]},"9":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":105,"column":12}},{"start":{"line":105,"column":12},"end":{"line":105,"column":12}}]},"10":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":16},"end":{"line":105,"column":21}},{"start":{"line":105,"column":25},"end":{"line":105,"column":67}}]},"11":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":12},"end":{"line":109,"column":12}},{"start":{"line":109,"column":12},"end":{"line":109,"column":12}}]},"12":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":16},"end":{"line":119,"column":16}},{"start":{"line":119,"column":16},"end":{"line":119,"column":16}}]},"13":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":16},"end":{"line":123,"column":16}},{"start":{"line":123,"column":16},"end":{"line":123,"column":16}}]},"14":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":16},"end":{"line":131,"column":16}},{"start":{"line":131,"column":16},"end":{"line":131,"column":16}}]}},"code":["/**"," * @fileoverview enforce a maximum file length"," * @author Alberto Rodríguez"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce a maximum number of lines per file\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        type: \"integer\",","                        minimum: 0","                    },","                    {","                        type: \"object\",","                        properties: {","                            max: {","                                type: \"integer\",","                                minimum: 0","                            },","                            skipComments: {","                                type: \"boolean\"","                            },","                            skipBlankLines: {","                                type: \"boolean\"","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","        const option = context.options[0];","        let max = 300;","","        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {","            max = option.max;","        }","","        if (typeof option === \"number\") {","            max = option;","        }","","        const skipComments = option && option.skipComments;","        const skipBlankLines = option && option.skipBlankLines;","","        const sourceCode = context.getSourceCode();","","        /**","         * Returns whether or not a token is a comment node type","         * @param {Token} token The token to check","         * @returns {boolean} True if the token is a comment node","         */","        function isCommentNodeType(token) {","            return token && (token.type === \"Block\" || token.type === \"Line\");","        }","","        /**","         * Returns the line numbers of a comment that don't have any code on the same line","         * @param {Node} comment The comment node to check","         * @returns {int[]} The line numbers","         */","        function getLinesWithoutCode(comment) {","            let start = comment.loc.start.line;","            let end = comment.loc.end.line;","","            let token;","","            token = comment;","            do {","                token = sourceCode.getTokenBefore(token, { includeComments: true });","            } while (isCommentNodeType(token));","","            if (token && astUtils.isTokenOnSameLine(token, comment)) {","                start += 1;","            }","","            token = comment;","            do {","                token = sourceCode.getTokenAfter(token, { includeComments: true });","            } while (isCommentNodeType(token));","","            if (token && astUtils.isTokenOnSameLine(comment, token)) {","                end -= 1;","            }","","            if (start <= end) {","                return lodash.range(start, end + 1);","            }","            return [];","        }","","        return {","            \"Program:exit\"() {","                let lines = sourceCode.lines.map((text, i) => ({ lineNumber: i + 1, text }));","","                if (skipBlankLines) {","                    lines = lines.filter(l => l.text.trim() !== \"\");","                }","","                if (skipComments) {","                    const comments = sourceCode.getAllComments();","","                    const commentLines = lodash.flatten(comments.map(comment => getLinesWithoutCode(comment)));","","                    lines = lines.filter(l => !lodash.includes(commentLines, l.lineNumber));","                }","","                if (lines.length > max) {","                    context.report({","                        loc: { line: 1, column: 0 },","                        message: \"File must be at most {{max}} lines long. It's {{actual}} lines long.\",","                        data: {","                            max,","                            actual: lines.length","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"11":1,"12":1,"18":1,"55":0,"56":0,"58":0,"59":0,"62":0,"63":0,"66":0,"67":0,"69":0,"76":1,"77":0,"85":1,"86":0,"87":0,"89":0,"91":0,"92":0,"93":0,"96":0,"97":0,"100":0,"101":0,"102":0,"105":0,"106":0,"109":0,"110":0,"112":0,"115":0,"117":0,"119":0,"120":0,"123":0,"124":0,"126":0,"128":0,"131":0,"132":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-nested-callbacks.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-nested-callbacks.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":46,"loc":{"start":{"line":46,"column":10},"end":{"line":46,"column":20}}},"2":{"name":"checkFunction","line":76,"loc":{"start":{"line":76,"column":8},"end":{"line":76,"column":37}}},"3":{"name":"popStack","line":95,"loc":{"start":{"line":95,"column":8},"end":{"line":95,"column":28}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":112,"column":2}},"2":{"start":{"line":51,"column":8},"end":{"line":51,"column":42}},"3":{"start":{"line":52,"column":8},"end":{"line":52,"column":27}},"4":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"5":{"start":{"line":55,"column":12},"end":{"line":55,"column":39}},"6":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"7":{"start":{"line":58,"column":12},"end":{"line":58,"column":35}},"8":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"9":{"start":{"line":61,"column":12},"end":{"line":61,"column":31}},"10":{"start":{"line":68,"column":8},"end":{"line":68,"column":33}},"11":{"start":{"line":76,"column":8},"end":{"line":88,"column":9}},"12":{"start":{"line":77,"column":12},"end":{"line":77,"column":39}},"13":{"start":{"line":79,"column":12},"end":{"line":81,"column":13}},"14":{"start":{"line":80,"column":16},"end":{"line":80,"column":41}},"15":{"start":{"line":83,"column":12},"end":{"line":87,"column":13}},"16":{"start":{"line":84,"column":16},"end":{"line":84,"column":75}},"17":{"start":{"line":86,"column":16},"end":{"line":86,"column":130}},"18":{"start":{"line":95,"column":8},"end":{"line":97,"column":9}},"19":{"start":{"line":96,"column":12},"end":{"line":96,"column":32}},"20":{"start":{"line":103,"column":8},"end":{"line":109,"column":10}}},"branchMap":{"1":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"2":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":38}},{"start":{"line":54,"column":42},"end":{"line":54,"column":74}},{"start":{"line":54,"column":78},"end":{"line":54,"column":112}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"4":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":38}},{"start":{"line":57,"column":42},"end":{"line":57,"column":70}},{"start":{"line":57,"column":74},"end":{"line":57,"column":104}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"6":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":12}},{"start":{"line":79,"column":12},"end":{"line":79,"column":12}}]},"7":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":12},"end":{"line":83,"column":12}},{"start":{"line":83,"column":12},"end":{"line":83,"column":12}}]}},"code":["/**"," * @fileoverview Rule to enforce a maximum number of nested callbacks."," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce a maximum depth that callbacks can be nested\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        type: \"integer\",","                        minimum: 0","                    },","                    {","                        type: \"object\",","                        properties: {","                            maximum: {","                                type: \"integer\",","                                minimum: 0","                            },","                            max: {","                                type: \"integer\",","                                minimum: 0","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Constants","        //--------------------------------------------------------------------------","        const option = context.options[0];","        let THRESHOLD = 10;","","        if (typeof option === \"object\" && option.hasOwnProperty(\"maximum\") && typeof option.maximum === \"number\") {","            THRESHOLD = option.maximum;","        }","        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {","            THRESHOLD = option.max;","        }","        if (typeof option === \"number\") {","            THRESHOLD = option;","        }","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        const callbackStack = [];","","        /**","         * Checks a given function node for too many callbacks.","         * @param {ASTNode} node The node to check.","         * @returns {void}","         * @private","         */","        function checkFunction(node) {","            const parent = node.parent;","","            if (parent.type === \"CallExpression\") {","                callbackStack.push(node);","            }","","            if (callbackStack.length > THRESHOLD) {","                const opts = { num: callbackStack.length, max: THRESHOLD };","","                context.report({ node, message: \"Too many nested callbacks ({{num}}). Maximum allowed is {{max}}.\", data: opts });","            }","        }","","        /**","         * Pops the call stack.","         * @returns {void}","         * @private","         */","        function popStack() {","            callbackStack.pop();","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            ArrowFunctionExpression: checkFunction,","            \"ArrowFunctionExpression:exit\": popStack,","","            FunctionExpression: checkFunction,","            \"FunctionExpression:exit\": popStack","        };","","    }","};",""],"l":{"12":1,"51":0,"52":0,"54":0,"55":0,"57":0,"58":0,"60":0,"61":0,"68":0,"76":1,"77":0,"79":0,"80":0,"83":0,"84":0,"86":0,"95":1,"96":0,"103":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-params.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-params.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":54,"loc":{"start":{"line":54,"column":10},"end":{"line":54,"column":20}}},"2":{"name":"checkFunction","line":75,"loc":{"start":{"line":75,"column":8},"end":{"line":75,"column":37}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"2":{"start":{"line":14,"column":0},"end":{"line":14,"column":41}},"3":{"start":{"line":20,"column":0},"end":{"line":96,"column":2}},"4":{"start":{"line":56,"column":8},"end":{"line":56,"column":42}},"5":{"start":{"line":57,"column":8},"end":{"line":57,"column":26}},"6":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"7":{"start":{"line":60,"column":12},"end":{"line":60,"column":39}},"8":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"9":{"start":{"line":63,"column":12},"end":{"line":63,"column":35}},"10":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"11":{"start":{"line":66,"column":12},"end":{"line":66,"column":31}},"12":{"start":{"line":75,"column":8},"end":{"line":87,"column":9}},"13":{"start":{"line":76,"column":12},"end":{"line":86,"column":13}},"14":{"start":{"line":77,"column":16},"end":{"line":85,"column":19}},"15":{"start":{"line":89,"column":8},"end":{"line":93,"column":10}}},"branchMap":{"1":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"2":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":38}},{"start":{"line":59,"column":42},"end":{"line":59,"column":74}},{"start":{"line":59,"column":78},"end":{"line":59,"column":112}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"4":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":38}},{"start":{"line":62,"column":42},"end":{"line":62,"column":70}},{"start":{"line":62,"column":74},"end":{"line":62,"column":104}}]},"5":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":8}},{"start":{"line":65,"column":8},"end":{"line":65,"column":8}}]},"6":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":12}},{"start":{"line":76,"column":12},"end":{"line":76,"column":12}}]}},"code":["/**"," * @fileoverview Rule to flag when a function has too many parameters"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce a maximum number of parameters in function definitions\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        type: \"integer\",","                        minimum: 0","                    },","                    {","                        type: \"object\",","                        properties: {","                            maximum: {","                                type: \"integer\",","                                minimum: 0","                            },","                            max: {","                                type: \"integer\",","                                minimum: 0","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","","        const option = context.options[0];","        let numParams = 3;","","        if (typeof option === \"object\" && option.hasOwnProperty(\"maximum\") && typeof option.maximum === \"number\") {","            numParams = option.maximum;","        }","        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {","            numParams = option.max;","        }","        if (typeof option === \"number\") {","            numParams = option;","        }","","        /**","         * Checks a function to see if it has too many parameters.","         * @param {ASTNode} node The node to check.","         * @returns {void}","         * @private","         */","        function checkFunction(node) {","            if (node.params.length > numParams) {","                context.report({","                    node,","                    message: \"{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.\",","                    data: {","                        name: lodash.upperFirst(astUtils.getFunctionNameWithKind(node)),","                        count: node.params.length,","                        max: numParams","                    }","                });","            }","        }","","        return {","            FunctionDeclaration: checkFunction,","            ArrowFunctionExpression: checkFunction,","            FunctionExpression: checkFunction","        };","","    }","};",""],"l":{"12":1,"14":1,"20":1,"56":0,"57":0,"59":0,"60":0,"62":0,"63":0,"65":0,"66":0,"75":1,"76":0,"77":0,"89":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-statements-per-line.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-statements-per-line.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":39,"loc":{"start":{"line":39,"column":10},"end":{"line":39,"column":20}}},"2":{"name":"reportFirstExtraStatementAndClear","line":61,"loc":{"start":{"line":61,"column":8},"end":{"line":61,"column":53}}},"3":{"name":"getActualLastToken","line":82,"loc":{"start":{"line":82,"column":8},"end":{"line":82,"column":42}}},"4":{"name":"enterStatement","line":93,"loc":{"start":{"line":93,"column":8},"end":{"line":93,"column":38}}},"5":{"name":"leaveStatement","line":126,"loc":{"start":{"line":126,"column":8},"end":{"line":126,"column":38}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":192,"column":2}},"3":{"start":{"line":41,"column":8},"end":{"line":44,"column":132}},"4":{"start":{"line":46,"column":8},"end":{"line":48,"column":32}},"5":{"start":{"line":54,"column":8},"end":{"line":54,"column":134}},"6":{"start":{"line":61,"column":8},"end":{"line":74,"column":9}},"7":{"start":{"line":62,"column":12},"end":{"line":72,"column":13}},"8":{"start":{"line":63,"column":16},"end":{"line":71,"column":19}},"9":{"start":{"line":73,"column":12},"end":{"line":73,"column":39}},"10":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"11":{"start":{"line":83,"column":12},"end":{"line":83,"column":79}},"12":{"start":{"line":93,"column":8},"end":{"line":118,"column":9}},"13":{"start":{"line":94,"column":12},"end":{"line":94,"column":45}},"14":{"start":{"line":99,"column":12},"end":{"line":103,"column":13}},"15":{"start":{"line":102,"column":16},"end":{"line":102,"column":23}},"16":{"start":{"line":106,"column":12},"end":{"line":112,"column":13}},"17":{"start":{"line":107,"column":16},"end":{"line":107,"column":50}},"18":{"start":{"line":109,"column":16},"end":{"line":109,"column":52}},"19":{"start":{"line":110,"column":16},"end":{"line":110,"column":49}},"20":{"start":{"line":111,"column":16},"end":{"line":111,"column":41}},"21":{"start":{"line":115,"column":12},"end":{"line":117,"column":13}},"22":{"start":{"line":116,"column":16},"end":{"line":116,"column":66}},"23":{"start":{"line":126,"column":8},"end":{"line":135,"column":9}},"24":{"start":{"line":127,"column":12},"end":{"line":127,"column":63}},"25":{"start":{"line":130,"column":12},"end":{"line":134,"column":13}},"26":{"start":{"line":131,"column":16},"end":{"line":131,"column":52}},"27":{"start":{"line":132,"column":16},"end":{"line":132,"column":49}},"28":{"start":{"line":133,"column":16},"end":{"line":133,"column":41}},"29":{"start":{"line":141,"column":8},"end":{"line":190,"column":10}}},"branchMap":{"1":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":22},"end":{"line":42,"column":40}},{"start":{"line":42,"column":44},"end":{"line":42,"column":46}}]},"2":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":72},"end":{"line":43,"column":83}},{"start":{"line":43,"column":86},"end":{"line":43,"column":87}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":12}},{"start":{"line":62,"column":12},"end":{"line":62,"column":12}}]},"4":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":73},"end":{"line":69,"column":84}},{"start":{"line":69,"column":87},"end":{"line":69,"column":99}}]},"5":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":12}},{"start":{"line":99,"column":12},"end":{"line":99,"column":12}}]},"6":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":59}},{"start":{"line":100,"column":16},"end":{"line":100,"column":46}}]},"7":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":12},"end":{"line":106,"column":12}},{"start":{"line":106,"column":12},"end":{"line":106,"column":12}}]},"8":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":12}},{"start":{"line":115,"column":12},"end":{"line":115,"column":12}}]},"9":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":38},"end":{"line":116,"column":57}},{"start":{"line":116,"column":61},"end":{"line":116,"column":65}}]},"10":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":130,"column":12}},{"start":{"line":130,"column":12},"end":{"line":130,"column":12}}]}},"code":["/**"," * @fileoverview Specify the maximum number of statements allowed per line."," * @author Kenneth Williams"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce a maximum number of statements allowed per line\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    max: {","                        type: \"integer\",","                        minimum: 1","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const sourceCode = context.getSourceCode(),","            options = context.options[0] || {},","            maxStatementsPerLine = typeof options.max !== \"undefined\" ? options.max : 1,","            message = \"This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}.\";","","        let lastStatementLine = 0,","            numberOfStatementsOnThisLine = 0,","            firstExtraStatement;","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        const SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/;","","        /**","         * Reports with the first extra statement, and clears it.","         *","         * @returns {void}","         */","        function reportFirstExtraStatementAndClear() {","            if (firstExtraStatement) {","                context.report({","                    node: firstExtraStatement,","                    message,","                    data: {","                        numberOfStatementsOnThisLine,","                        maxStatementsPerLine,","                        statements: numberOfStatementsOnThisLine === 1 ? \"statement\" : \"statements\"","                    }","                });","            }","            firstExtraStatement = null;","        }","","        /**","         * Gets the actual last token of a given node.","         *","         * @param {ASTNode} node - A node to get. This is a node except EmptyStatement.","         * @returns {Token} The actual last token.","         */","        function getActualLastToken(node) {","            return sourceCode.getLastToken(node, astUtils.isNotSemicolonToken);","        }","","        /**","         * Addresses a given node.","         * It updates the state of this rule, then reports the node if the node violated this rule.","         *","         * @param {ASTNode} node - A node to check.","         * @returns {void}","         */","        function enterStatement(node) {","            const line = node.loc.start.line;","","            // Skip to allow non-block statements if this is direct child of control statements.","            // `if (a) foo();` is counted as 1.","            // But `if (a) foo(); else foo();` should be counted as 2.","            if (SINGLE_CHILD_ALLOWED.test(node.parent.type) &&","                node.parent.alternate !== node","            ) {","                return;","            }","","            // Update state.","            if (line === lastStatementLine) {","                numberOfStatementsOnThisLine += 1;","            } else {","                reportFirstExtraStatementAndClear();","                numberOfStatementsOnThisLine = 1;","                lastStatementLine = line;","            }","","            // Reports if the node violated this rule.","            if (numberOfStatementsOnThisLine === maxStatementsPerLine + 1) {","                firstExtraStatement = firstExtraStatement || node;","            }","        }","","        /**","         * Updates the state of this rule with the end line of leaving node to check with the next statement.","         *","         * @param {ASTNode} node - A node to check.","         * @returns {void}","         */","        function leaveStatement(node) {","            const line = getActualLastToken(node).loc.end.line;","","            // Update state.","            if (line !== lastStatementLine) {","                reportFirstExtraStatementAndClear();","                numberOfStatementsOnThisLine = 1;","                lastStatementLine = line;","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            BreakStatement: enterStatement,","            ClassDeclaration: enterStatement,","            ContinueStatement: enterStatement,","            DebuggerStatement: enterStatement,","            DoWhileStatement: enterStatement,","            ExpressionStatement: enterStatement,","            ForInStatement: enterStatement,","            ForOfStatement: enterStatement,","            ForStatement: enterStatement,","            FunctionDeclaration: enterStatement,","            IfStatement: enterStatement,","            ImportDeclaration: enterStatement,","            LabeledStatement: enterStatement,","            ReturnStatement: enterStatement,","            SwitchStatement: enterStatement,","            ThrowStatement: enterStatement,","            TryStatement: enterStatement,","            VariableDeclaration: enterStatement,","            WhileStatement: enterStatement,","            WithStatement: enterStatement,","            ExportNamedDeclaration: enterStatement,","            ExportDefaultDeclaration: enterStatement,","            ExportAllDeclaration: enterStatement,","","            \"BreakStatement:exit\": leaveStatement,","            \"ClassDeclaration:exit\": leaveStatement,","            \"ContinueStatement:exit\": leaveStatement,","            \"DebuggerStatement:exit\": leaveStatement,","            \"DoWhileStatement:exit\": leaveStatement,","            \"ExpressionStatement:exit\": leaveStatement,","            \"ForInStatement:exit\": leaveStatement,","            \"ForOfStatement:exit\": leaveStatement,","            \"ForStatement:exit\": leaveStatement,","            \"FunctionDeclaration:exit\": leaveStatement,","            \"IfStatement:exit\": leaveStatement,","            \"ImportDeclaration:exit\": leaveStatement,","            \"LabeledStatement:exit\": leaveStatement,","            \"ReturnStatement:exit\": leaveStatement,","            \"SwitchStatement:exit\": leaveStatement,","            \"ThrowStatement:exit\": leaveStatement,","            \"TryStatement:exit\": leaveStatement,","            \"VariableDeclaration:exit\": leaveStatement,","            \"WhileStatement:exit\": leaveStatement,","            \"WithStatement:exit\": leaveStatement,","            \"ExportNamedDeclaration:exit\": leaveStatement,","            \"ExportDefaultDeclaration:exit\": leaveStatement,","            \"ExportAllDeclaration:exit\": leaveStatement,","            \"Program:exit\": reportFirstExtraStatementAndClear","        };","    }","};",""],"l":{"11":1,"17":1,"41":0,"46":0,"54":0,"61":1,"62":0,"63":0,"73":0,"82":1,"83":0,"93":1,"94":0,"99":0,"102":0,"106":0,"107":0,"109":0,"110":0,"111":0,"115":0,"116":0,"126":1,"127":0,"130":0,"131":0,"132":0,"133":0,"141":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-statements.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/max-statements.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":1,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":63,"loc":{"start":{"line":63,"column":10},"end":{"line":63,"column":20}}},"2":{"name":"reportIfTooManyStatements","line":93,"loc":{"start":{"line":93,"column":8},"end":{"line":93,"column":61}}},"3":{"name":"startFunction","line":110,"loc":{"start":{"line":110,"column":8},"end":{"line":110,"column":33}}},"4":{"name":"endFunction","line":120,"loc":{"start":{"line":120,"column":8},"end":{"line":120,"column":35}}},"5":{"name":"countStatements","line":136,"loc":{"start":{"line":136,"column":8},"end":{"line":136,"column":39}}},"6":{"name":"(anonymous_6)","line":155,"loc":{"start":{"line":155,"column":26},"end":{"line":155,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"2":{"start":{"line":14,"column":0},"end":{"line":14,"column":41}},"3":{"start":{"line":20,"column":0},"end":{"line":170,"column":2}},"4":{"start":{"line":69,"column":8},"end":{"line":72,"column":35}},"5":{"start":{"line":73,"column":8},"end":{"line":73,"column":31}},"6":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"7":{"start":{"line":76,"column":12},"end":{"line":76,"column":43}},"8":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"9":{"start":{"line":79,"column":12},"end":{"line":79,"column":39}},"10":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"11":{"start":{"line":82,"column":12},"end":{"line":82,"column":35}},"12":{"start":{"line":93,"column":8},"end":{"line":103,"column":9}},"13":{"start":{"line":94,"column":12},"end":{"line":102,"column":13}},"14":{"start":{"line":95,"column":16},"end":{"line":95,"column":87}},"15":{"start":{"line":97,"column":16},"end":{"line":101,"column":19}},"16":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"17":{"start":{"line":111,"column":12},"end":{"line":111,"column":34}},"18":{"start":{"line":120,"column":8},"end":{"line":128,"column":9}},"19":{"start":{"line":121,"column":12},"end":{"line":121,"column":46}},"20":{"start":{"line":123,"column":12},"end":{"line":127,"column":13}},"21":{"start":{"line":124,"column":16},"end":{"line":124,"column":56}},"22":{"start":{"line":126,"column":16},"end":{"line":126,"column":70}},"23":{"start":{"line":136,"column":8},"end":{"line":138,"column":9}},"24":{"start":{"line":137,"column":12},"end":{"line":137,"column":72}},"25":{"start":{"line":144,"column":8},"end":{"line":167,"column":10}},"26":{"start":{"line":156,"column":16},"end":{"line":158,"column":17}},"27":{"start":{"line":157,"column":20},"end":{"line":157,"column":27}},"28":{"start":{"line":160,"column":16},"end":{"line":165,"column":19}},"29":{"start":{"line":161,"column":20},"end":{"line":161,"column":48}},"30":{"start":{"line":162,"column":20},"end":{"line":162,"column":46}},"31":{"start":{"line":164,"column":20},"end":{"line":164,"column":74}}},"branchMap":{"1":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":38},"end":{"line":71,"column":56}},{"start":{"line":71,"column":60},"end":{"line":71,"column":102}},{"start":{"line":71,"column":106},"end":{"line":71,"column":111}}]},"2":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":75,"column":8}},{"start":{"line":75,"column":8},"end":{"line":75,"column":8}}]},"3":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":12},"end":{"line":75,"column":38}},{"start":{"line":75,"column":42},"end":{"line":75,"column":74}},{"start":{"line":75,"column":78},"end":{"line":75,"column":112}}]},"4":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":8}},{"start":{"line":78,"column":8},"end":{"line":78,"column":8}}]},"5":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":12},"end":{"line":78,"column":38}},{"start":{"line":78,"column":42},"end":{"line":78,"column":70}},{"start":{"line":78,"column":74},"end":{"line":78,"column":104}}]},"6":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":8}},{"start":{"line":81,"column":8},"end":{"line":81,"column":8}}]},"7":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":12}},{"start":{"line":94,"column":12},"end":{"line":94,"column":12}}]},"8":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":12},"end":{"line":123,"column":12}},{"start":{"line":123,"column":12},"end":{"line":123,"column":12}}]},"9":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":16},"end":{"line":123,"column":39}},{"start":{"line":123,"column":43},"end":{"line":123,"column":69}}]},"10":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":16},"end":{"line":156,"column":16}},{"start":{"line":156,"column":16},"end":{"line":156,"column":16}}]}},"code":["/**"," * @fileoverview A rule to set the maximum number of statements in a function."," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce a maximum number of statements allowed in function blocks\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        type: \"integer\",","                        minimum: 0","                    },","                    {","                        type: \"object\",","                        properties: {","                            maximum: {","                                type: \"integer\",","                                minimum: 0","                            },","                            max: {","                                type: \"integer\",","                                minimum: 0","                            }","                        },","                        additionalProperties: false","                    }","                ]","            },","            {","                type: \"object\",","                properties: {","                    ignoreTopLevelFunctions: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        const functionStack = [],","            option = context.options[0],","            ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false,","            topLevelFunctions = [];","        let maxStatements = 10;","","        if (typeof option === \"object\" && option.hasOwnProperty(\"maximum\") && typeof option.maximum === \"number\") {","            maxStatements = option.maximum;","        }","        if (typeof option === \"object\" && option.hasOwnProperty(\"max\") && typeof option.max === \"number\") {","            maxStatements = option.max;","        }","        if (typeof option === \"number\") {","            maxStatements = option;","        }","","        /**","         * Reports a node if it has too many statements","         * @param {ASTNode} node node to evaluate","         * @param {int} count Number of statements in node","         * @param {int} max Maximum number of statements allowed","         * @returns {void}","         * @private","         */","        function reportIfTooManyStatements(node, count, max) {","            if (count > max) {","                const name = lodash.upperFirst(astUtils.getFunctionNameWithKind(node));","","                context.report({","                    node,","                    message: \"{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}.\",","                    data: { name, count, max }","                });","            }","        }","","        /**","         * When parsing a new function, store it in our function stack","         * @returns {void}","         * @private","         */","        function startFunction() {","            functionStack.push(0);","        }","","        /**","         * Evaluate the node at the end of function","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function endFunction(node) {","            const count = functionStack.pop();","","            if (ignoreTopLevelFunctions && functionStack.length === 0) {","                topLevelFunctions.push({ node, count });","            } else {","                reportIfTooManyStatements(node, count, maxStatements);","            }","        }","","        /**","         * Increment the count of the functions","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function countStatements(node) {","            functionStack[functionStack.length - 1] += node.body.length;","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            FunctionDeclaration: startFunction,","            FunctionExpression: startFunction,","            ArrowFunctionExpression: startFunction,","","            BlockStatement: countStatements,","","            \"FunctionDeclaration:exit\": endFunction,","            \"FunctionExpression:exit\": endFunction,","            \"ArrowFunctionExpression:exit\": endFunction,","","            \"Program:exit\"() {","                if (topLevelFunctions.length === 1) {","                    return;","                }","","                topLevelFunctions.forEach(element => {","                    const count = element.count;","                    const node = element.node;","","                    reportIfTooManyStatements(node, count, maxStatements);","                });","            }","        };","","    }","};",""],"l":{"12":1,"14":1,"20":1,"69":0,"73":0,"75":0,"76":0,"78":0,"79":0,"81":0,"82":0,"93":1,"94":0,"95":0,"97":0,"110":1,"111":0,"120":1,"121":0,"123":0,"124":0,"126":0,"136":1,"137":0,"144":0,"156":0,"157":0,"160":0,"161":0,"162":0,"164":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/multiline-ternary.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/multiline-ternary.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":28,"loc":{"start":{"line":28,"column":10},"end":{"line":28,"column":20}}},"2":{"name":"reportError","line":43,"loc":{"start":{"line":43,"column":8},"end":{"line":43,"column":57}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":33},"end":{"line":59,"column":40}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":83,"column":2}},"3":{"start":{"line":29,"column":8},"end":{"line":29,"column":57}},"4":{"start":{"line":43,"column":8},"end":{"line":52,"column":9}},"5":{"start":{"line":44,"column":12},"end":{"line":51,"column":15}},"6":{"start":{"line":58,"column":8},"end":{"line":81,"column":10}},"7":{"start":{"line":60,"column":16},"end":{"line":60,"column":110}},"8":{"start":{"line":61,"column":16},"end":{"line":61,"column":120}},"9":{"start":{"line":63,"column":16},"end":{"line":79,"column":17}},"10":{"start":{"line":64,"column":20},"end":{"line":66,"column":21}},"11":{"start":{"line":65,"column":24},"end":{"line":65,"column":60}},"12":{"start":{"line":68,"column":20},"end":{"line":70,"column":21}},"13":{"start":{"line":69,"column":24},"end":{"line":69,"column":66}},"14":{"start":{"line":72,"column":20},"end":{"line":74,"column":21}},"15":{"start":{"line":73,"column":24},"end":{"line":73,"column":59}},"16":{"start":{"line":76,"column":20},"end":{"line":78,"column":21}},"17":{"start":{"line":77,"column":24},"end":{"line":77,"column":65}}},"branchMap":{"1":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":41},"end":{"line":48,"column":51}},{"start":{"line":48,"column":54},"end":{"line":48,"column":66}}]},"2":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":60},"end":{"line":49,"column":81}},{"start":{"line":49,"column":84},"end":{"line":49,"column":110}}]},"3":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":63,"column":16}},{"start":{"line":63,"column":16},"end":{"line":63,"column":16}}]},"4":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":20},"end":{"line":64,"column":20}},{"start":{"line":64,"column":20},"end":{"line":64,"column":20}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":20},"end":{"line":68,"column":20}},{"start":{"line":68,"column":20},"end":{"line":68,"column":20}}]},"6":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":20},"end":{"line":72,"column":20}},{"start":{"line":72,"column":20},"end":{"line":72,"column":20}}]},"7":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":20},"end":{"line":76,"column":20}},{"start":{"line":76,"column":20},"end":{"line":76,"column":20}}]}},"code":["/**"," * @fileoverview Enforce newlines between operands of ternary expressions"," * @author Kai Cataldo"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce newlines between operands of ternary expressions\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        schema: [","            {","                enum: [\"always\", \"never\"]","            }","        ]","    },","","    create(context) {","        const multiline = context.options[0] !== \"never\";","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Tests whether node is preceded by supplied tokens","         * @param {ASTNode} node - node to check","         * @param {ASTNode} parentNode - parent of node to report","         * @param {boolean} expected - whether newline was expected or not","         * @returns {void}","         * @private","         */","        function reportError(node, parentNode, expected) {","            context.report({","                node,","                message: \"{{expected}} newline between {{typeOfError}} of ternary expression.\",","                data: {","                    expected: expected ? \"Expected\" : \"Unexpected\",","                    typeOfError: node === parentNode.test ? \"test and consequent\" : \"consequent and alternate\"","                }","            });","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            ConditionalExpression(node) {","                const areTestAndConsequentOnSameLine = astUtils.isTokenOnSameLine(node.test, node.consequent);","                const areConsequentAndAlternateOnSameLine = astUtils.isTokenOnSameLine(node.consequent, node.alternate);","","                if (!multiline) {","                    if (!areTestAndConsequentOnSameLine) {","                        reportError(node.test, node, false);","                    }","","                    if (!areConsequentAndAlternateOnSameLine) {","                        reportError(node.consequent, node, false);","                    }","                } else {","                    if (areTestAndConsequentOnSameLine) {","                        reportError(node.test, node, true);","                    }","","                    if (areConsequentAndAlternateOnSameLine) {","                        reportError(node.consequent, node, true);","                    }","                }","            }","        };","    }","};",""],"l":{"8":1,"14":1,"29":0,"43":1,"44":0,"58":0,"60":0,"61":0,"63":0,"64":0,"65":0,"68":0,"69":0,"72":0,"73":0,"76":0,"77":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/new-cap.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/new-cap.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"checkArray","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":40}}},"2":{"name":"invert","line":51,"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":26}}},"3":{"name":"calculateCapIsNewExceptions","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":45}}},"4":{"name":"(anonymous_4)","line":120,"loc":{"start":{"line":120,"column":10},"end":{"line":120,"column":20}}},"5":{"name":"extractNameFromExpression","line":147,"loc":{"start":{"line":147,"column":8},"end":{"line":147,"column":49}}},"6":{"name":"getCap","line":171,"loc":{"start":{"line":171,"column":8},"end":{"line":171,"column":29}}},"7":{"name":"isCapAllowed","line":196,"loc":{"start":{"line":196,"column":8},"end":{"line":196,"column":69}}},"8":{"name":"report","line":223,"loc":{"start":{"line":223,"column":8},"end":{"line":223,"column":39}}},"9":{"name":"(anonymous_9)","line":238,"loc":{"start":{"line":238,"column":38},"end":{"line":238,"column":53}}},"10":{"name":"(anonymous_10)","line":254,"loc":{"start":{"line":254,"column":39},"end":{"line":254,"column":54}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":27,"column":2}},"2":{"start":{"line":36,"column":0},"end":{"line":43,"column":1}},"3":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"4":{"start":{"line":40,"column":8},"end":{"line":40,"column":69},"skip":true},"5":{"start":{"line":42,"column":4},"end":{"line":42,"column":32}},"6":{"start":{"line":51,"column":0},"end":{"line":54,"column":1}},"7":{"start":{"line":52,"column":4},"end":{"line":52,"column":20}},"8":{"start":{"line":53,"column":4},"end":{"line":53,"column":15}},"9":{"start":{"line":61,"column":0},"end":{"line":69,"column":1}},"10":{"start":{"line":62,"column":4},"end":{"line":62,"column":84}},"11":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"12":{"start":{"line":65,"column":8},"end":{"line":65,"column":69}},"13":{"start":{"line":68,"column":4},"end":{"line":68,"column":49}},"14":{"start":{"line":75,"column":0},"end":{"line":271,"column":2}},"15":{"start":{"line":122,"column":8},"end":{"line":122,"column":87}},"16":{"start":{"line":124,"column":8},"end":{"line":124,"column":52}},"17":{"start":{"line":125,"column":8},"end":{"line":125,"column":52}},"18":{"start":{"line":126,"column":8},"end":{"line":126,"column":59}},"19":{"start":{"line":128,"column":8},"end":{"line":128,"column":99}},"20":{"start":{"line":129,"column":8},"end":{"line":129,"column":126}},"21":{"start":{"line":131,"column":8},"end":{"line":131,"column":71}},"22":{"start":{"line":132,"column":8},"end":{"line":132,"column":126}},"23":{"start":{"line":134,"column":8},"end":{"line":134,"column":29}},"24":{"start":{"line":136,"column":8},"end":{"line":136,"column":51}},"25":{"start":{"line":147,"column":8},"end":{"line":163,"column":9}},"26":{"start":{"line":149,"column":12},"end":{"line":149,"column":26}},"27":{"start":{"line":151,"column":12},"end":{"line":161,"column":13}},"28":{"start":{"line":152,"column":16},"end":{"line":152,"column":54}},"29":{"start":{"line":154,"column":16},"end":{"line":158,"column":17}},"30":{"start":{"line":155,"column":20},"end":{"line":155,"column":42}},"31":{"start":{"line":156,"column":23},"end":{"line":158,"column":17}},"32":{"start":{"line":157,"column":20},"end":{"line":157,"column":41}},"33":{"start":{"line":160,"column":16},"end":{"line":160,"column":40}},"34":{"start":{"line":162,"column":12},"end":{"line":162,"column":24}},"35":{"start":{"line":171,"column":8},"end":{"line":186,"column":9}},"36":{"start":{"line":172,"column":12},"end":{"line":172,"column":44}},"37":{"start":{"line":174,"column":12},"end":{"line":174,"column":59}},"38":{"start":{"line":175,"column":12},"end":{"line":175,"column":59}},"39":{"start":{"line":177,"column":12},"end":{"line":183,"column":13}},"40":{"start":{"line":180,"column":16},"end":{"line":180,"column":35}},"41":{"start":{"line":181,"column":19},"end":{"line":183,"column":13}},"42":{"start":{"line":182,"column":16},"end":{"line":182,"column":31}},"43":{"start":{"line":184,"column":12},"end":{"line":184,"column":27}},"44":{"start":{"line":196,"column":8},"end":{"line":215,"column":9}},"45":{"start":{"line":197,"column":12},"end":{"line":197,"column":63}},"46":{"start":{"line":199,"column":12},"end":{"line":201,"column":13}},"47":{"start":{"line":200,"column":16},"end":{"line":200,"column":28}},"48":{"start":{"line":203,"column":12},"end":{"line":205,"column":13}},"49":{"start":{"line":204,"column":16},"end":{"line":204,"column":28}},"50":{"start":{"line":207,"column":12},"end":{"line":212,"column":13}},"51":{"start":{"line":210,"column":16},"end":{"line":211,"column":55}},"52":{"start":{"line":214,"column":12},"end":{"line":214,"column":77}},"53":{"start":{"line":223,"column":8},"end":{"line":231,"column":9}},"54":{"start":{"line":224,"column":12},"end":{"line":224,"column":37}},"55":{"start":{"line":226,"column":12},"end":{"line":228,"column":13}},"56":{"start":{"line":227,"column":16},"end":{"line":227,"column":41}},"57":{"start":{"line":230,"column":12},"end":{"line":230,"column":69}},"58":{"start":{"line":237,"column":8},"end":{"line":251,"column":9}},"59":{"start":{"line":238,"column":12},"end":{"line":250,"column":14}},"60":{"start":{"line":240,"column":16},"end":{"line":240,"column":72}},"61":{"start":{"line":242,"column":16},"end":{"line":249,"column":17}},"62":{"start":{"line":243,"column":20},"end":{"line":243,"column":67}},"63":{"start":{"line":244,"column":20},"end":{"line":244,"column":150}},"64":{"start":{"line":246,"column":20},"end":{"line":248,"column":21}},"65":{"start":{"line":247,"column":24},"end":{"line":247,"column":101}},"66":{"start":{"line":253,"column":8},"end":{"line":267,"column":9}},"67":{"start":{"line":254,"column":12},"end":{"line":266,"column":14}},"68":{"start":{"line":256,"column":16},"end":{"line":256,"column":67}},"69":{"start":{"line":258,"column":16},"end":{"line":265,"column":17}},"70":{"start":{"line":259,"column":20},"end":{"line":259,"column":62}},"71":{"start":{"line":260,"column":20},"end":{"line":260,"column":145}},"72":{"start":{"line":262,"column":20},"end":{"line":264,"column":21}},"73":{"start":{"line":263,"column":24},"end":{"line":263,"column":135}},"74":{"start":{"line":269,"column":8},"end":{"line":269,"column":25}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4},"skip":true},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"2":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":54}},{"start":{"line":39,"column":58},"end":{"line":39,"column":82}}]},"3":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":11},"end":{"line":42,"column":19}},{"start":{"line":42,"column":23},"end":{"line":42,"column":31}}]},"4":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"5":{"line":122,"type":"cond-expr","locations":[{"start":{"line":122,"column":44},"end":{"line":122,"column":81}},{"start":{"line":122,"column":84},"end":{"line":122,"column":86}}]},"6":{"line":129,"type":"cond-expr","locations":[{"start":{"line":129,"column":75},"end":{"line":129,"column":118}},{"start":{"line":129,"column":121},"end":{"line":129,"column":125}}]},"7":{"line":132,"type":"cond-expr","locations":[{"start":{"line":132,"column":75},"end":{"line":132,"column":118}},{"start":{"line":132,"column":121},"end":{"line":132,"column":125}}]},"8":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":12},"end":{"line":151,"column":12}},{"start":{"line":151,"column":12},"end":{"line":151,"column":12}}]},"9":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":16},"end":{"line":154,"column":16}},{"start":{"line":154,"column":16},"end":{"line":154,"column":16}}]},"10":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":20},"end":{"line":154,"column":47}},{"start":{"line":154,"column":52},"end":{"line":154,"column":86}}]},"11":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":23},"end":{"line":156,"column":23}},{"start":{"line":156,"column":23},"end":{"line":156,"column":23}}]},"12":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":27},"end":{"line":156,"column":57}},{"start":{"line":156,"column":61},"end":{"line":156,"column":82}}]},"13":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":12},"end":{"line":177,"column":12}},{"start":{"line":177,"column":12},"end":{"line":177,"column":12}}]},"14":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":19},"end":{"line":181,"column":19}},{"start":{"line":181,"column":19},"end":{"line":181,"column":19}}]},"15":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":12},"end":{"line":199,"column":12}},{"start":{"line":199,"column":12},"end":{"line":199,"column":12}}]},"16":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":16},"end":{"line":199,"column":38}},{"start":{"line":199,"column":42},"end":{"line":199,"column":64}}]},"17":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":12},"end":{"line":203,"column":12}},{"start":{"line":203,"column":12},"end":{"line":203,"column":12}}]},"18":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":16},"end":{"line":203,"column":23}},{"start":{"line":203,"column":27},"end":{"line":203,"column":51}}]},"19":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":12},"end":{"line":207,"column":12}},{"start":{"line":207,"column":12},"end":{"line":207,"column":12}}]},"20":{"line":207,"type":"binary-expr","locations":[{"start":{"line":207,"column":16},"end":{"line":207,"column":36}},{"start":{"line":207,"column":40},"end":{"line":207,"column":79}}]},"21":{"line":210,"type":"binary-expr","locations":[{"start":{"line":210,"column":23},"end":{"line":210,"column":63}},{"start":{"line":211,"column":20},"end":{"line":211,"column":54}}]},"22":{"line":214,"type":"binary-expr","locations":[{"start":{"line":214,"column":19},"end":{"line":214,"column":33}},{"start":{"line":214,"column":37},"end":{"line":214,"column":76}}]},"23":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":12},"end":{"line":226,"column":12}},{"start":{"line":226,"column":12},"end":{"line":226,"column":12}}]},"24":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":8},"end":{"line":237,"column":8}},{"start":{"line":237,"column":8},"end":{"line":237,"column":8}}]},"25":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":16},"end":{"line":242,"column":16}},{"start":{"line":242,"column":16},"end":{"line":242,"column":16}}]},"26":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":38},"end":{"line":244,"column":64}},{"start":{"line":244,"column":68},"end":{"line":244,"column":149}}]},"27":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":20},"end":{"line":246,"column":20}},{"start":{"line":246,"column":20},"end":{"line":246,"column":20}}]},"28":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":8},"end":{"line":253,"column":8}},{"start":{"line":253,"column":8},"end":{"line":253,"column":8}}]},"29":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":16},"end":{"line":258,"column":16}},{"start":{"line":258,"column":16},"end":{"line":258,"column":16}}]},"30":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":38},"end":{"line":260,"column":64}},{"start":{"line":260,"column":68},"end":{"line":260,"column":144}}]},"31":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":20},"end":{"line":262,"column":20}},{"start":{"line":262,"column":20},"end":{"line":262,"column":20}}]}},"code":["/**"," * @fileoverview Rule to flag use of constructors without capital letters"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const CAPS_ALLOWED = [","    \"Array\",","    \"Boolean\",","    \"Date\",","    \"Error\",","    \"Function\",","    \"Number\",","    \"Object\",","    \"RegExp\",","    \"String\",","    \"Symbol\"","];","","/**"," * Ensure that if the key is provided, it must be an array."," * @param {Object} obj Object to check with `key`."," * @param {string} key Object key to check on `obj`."," * @param {*} fallback If obj[key] is not present, this will be returned."," * @returns {string[]} Returns obj[key] if it's an Array, otherwise `fallback`"," */","function checkArray(obj, key, fallback) {","","    /* istanbul ignore if */","    if (Object.prototype.hasOwnProperty.call(obj, key) && !Array.isArray(obj[key])) {","        throw new TypeError(`${key}, if provided, must be an Array`);","    }","    return obj[key] || fallback;","}","","/**"," * A reducer function to invert an array to an Object mapping the string form of the key, to `true`."," * @param {Object} map Accumulator object for the reduce."," * @param {string} key Object key to set to `true`."," * @returns {Object} Returns the updated Object for further reduction."," */","function invert(map, key) {","    map[key] = true;","    return map;","}","","/**"," * Creates an object with the cap is new exceptions as its keys and true as their values."," * @param {Object} config Rule configuration"," * @returns {Object} Object with cap is new exceptions."," */","function calculateCapIsNewExceptions(config) {","    let capIsNewExceptions = checkArray(config, \"capIsNewExceptions\", CAPS_ALLOWED);","","    if (capIsNewExceptions !== CAPS_ALLOWED) {","        capIsNewExceptions = capIsNewExceptions.concat(CAPS_ALLOWED);","    }","","    return capIsNewExceptions.reduce(invert, {});","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require constructor names to begin with a capital letter\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    newIsCap: {","                        type: \"boolean\"","                    },","                    capIsNew: {","                        type: \"boolean\"","                    },","                    newIsCapExceptions: {","                        type: \"array\",","                        items: {","                            type: \"string\"","                        }","                    },","                    newIsCapExceptionPattern: {","                        type: \"string\"","                    },","                    capIsNewExceptions: {","                        type: \"array\",","                        items: {","                            type: \"string\"","                        }","                    },","                    capIsNewExceptionPattern: {","                        type: \"string\"","                    },","                    properties: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const config = context.options[0] ? Object.assign({}, context.options[0]) : {};","","        config.newIsCap = config.newIsCap !== false;","        config.capIsNew = config.capIsNew !== false;","        const skipProperties = config.properties === false;","","        const newIsCapExceptions = checkArray(config, \"newIsCapExceptions\", []).reduce(invert, {});","        const newIsCapExceptionPattern = config.newIsCapExceptionPattern ? new RegExp(config.newIsCapExceptionPattern) : null;","","        const capIsNewExceptions = calculateCapIsNewExceptions(config);","        const capIsNewExceptionPattern = config.capIsNewExceptionPattern ? new RegExp(config.capIsNewExceptionPattern) : null;","","        const listeners = {};","","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Get exact callee name from expression","         * @param {ASTNode} node CallExpression or NewExpression node","         * @returns {string} name","         */","        function extractNameFromExpression(node) {","","            let name = \"\";","","            if (node.callee.type === \"MemberExpression\") {","                const property = node.callee.property;","","                if (property.type === \"Literal\" && (typeof property.value === \"string\")) {","                    name = property.value;","                } else if (property.type === \"Identifier\" && !node.callee.computed) {","                    name = property.name;","                }","            } else {","                name = node.callee.name;","            }","            return name;","        }","","        /**","         * Returns the capitalization state of the string -","         * Whether the first character is uppercase, lowercase, or non-alphabetic","         * @param {string} str String","         * @returns {string} capitalization state: \"non-alpha\", \"lower\", or \"upper\"","         */","        function getCap(str) {","            const firstChar = str.charAt(0);","","            const firstCharLower = firstChar.toLowerCase();","            const firstCharUpper = firstChar.toUpperCase();","","            if (firstCharLower === firstCharUpper) {","","                // char has no uppercase variant, so it's non-alphabetic","                return \"non-alpha\";","            } else if (firstChar === firstCharLower) {","                return \"lower\";","            }","            return \"upper\";","","        }","","        /**","         * Check if capitalization is allowed for a CallExpression","         * @param {Object} allowedMap Object mapping calleeName to a Boolean","         * @param {ASTNode} node CallExpression node","         * @param {string} calleeName Capitalized callee name from a CallExpression","         * @param {Object} pattern RegExp object from options pattern","         * @returns {boolean} Returns true if the callee may be capitalized","         */","        function isCapAllowed(allowedMap, node, calleeName, pattern) {","            const sourceText = sourceCode.getText(node.callee);","","            if (allowedMap[calleeName] || allowedMap[sourceText]) {","                return true;","            }","","            if (pattern && pattern.test(sourceText)) {","                return true;","            }","","            if (calleeName === \"UTC\" && node.callee.type === \"MemberExpression\") {","","                // allow if callee is Date.UTC","                return node.callee.object.type === \"Identifier\" &&","                    node.callee.object.name === \"Date\";","            }","","            return skipProperties && node.callee.type === \"MemberExpression\";","        }","","        /**","         * Reports the given message for the given node. The location will be the start of the property or the callee.","         * @param {ASTNode} node CallExpression or NewExpression node.","         * @param {string} message The message to report.","         * @returns {void}","         */","        function report(node, message) {","            let callee = node.callee;","","            if (callee.type === \"MemberExpression\") {","                callee = callee.property;","            }","","            context.report({ node, loc: callee.loc.start, message });","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        if (config.newIsCap) {","            listeners.NewExpression = function(node) {","","                const constructorName = extractNameFromExpression(node);","","                if (constructorName) {","                    const capitalization = getCap(constructorName);","                    const isAllowed = capitalization !== \"lower\" || isCapAllowed(newIsCapExceptions, node, constructorName, newIsCapExceptionPattern);","","                    if (!isAllowed) {","                        report(node, \"A constructor name should not start with a lowercase letter.\");","                    }","                }","            };","        }","","        if (config.capIsNew) {","            listeners.CallExpression = function(node) {","","                const calleeName = extractNameFromExpression(node);","","                if (calleeName) {","                    const capitalization = getCap(calleeName);","                    const isAllowed = capitalization !== \"upper\" || isCapAllowed(capIsNewExceptions, node, calleeName, capIsNewExceptionPattern);","","                    if (!isAllowed) {","                        report(node, \"A function with a name starting with an uppercase letter should only be used as a constructor.\");","                    }","                }","            };","        }","","        return listeners;","    }","};",""],"l":{"16":1,"36":1,"39":0,"40":1,"42":0,"51":1,"52":0,"53":0,"61":1,"62":0,"64":0,"65":0,"68":0,"75":1,"122":0,"124":0,"125":0,"126":0,"128":0,"129":0,"131":0,"132":0,"134":0,"136":0,"147":1,"149":0,"151":0,"152":0,"154":0,"155":0,"156":0,"157":0,"160":0,"162":0,"171":1,"172":0,"174":0,"175":0,"177":0,"180":0,"181":0,"182":0,"184":0,"196":1,"197":0,"199":0,"200":0,"203":0,"204":0,"207":0,"210":0,"214":0,"223":1,"224":0,"226":0,"227":0,"230":0,"237":0,"238":0,"240":0,"242":0,"243":0,"244":0,"246":0,"247":0,"253":0,"254":0,"256":0,"258":0,"259":0,"260":0,"262":0,"263":0,"269":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/new-parens.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/new-parens.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":20}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":25},"end":{"line":39,"column":32}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":22,"column":0},"end":{"line":58,"column":2}},"3":{"start":{"line":36,"column":8},"end":{"line":36,"column":51}},"4":{"start":{"line":38,"column":8},"end":{"line":56,"column":10}},"5":{"start":{"line":40,"column":16},"end":{"line":42,"column":17}},"6":{"start":{"line":41,"column":20},"end":{"line":41,"column":27}},"7":{"start":{"line":44,"column":16},"end":{"line":44,"column":64}},"8":{"start":{"line":45,"column":16},"end":{"line":45,"column":90}},"9":{"start":{"line":46,"column":16},"end":{"line":46,"column":117}},"10":{"start":{"line":48,"column":16},"end":{"line":54,"column":17}},"11":{"start":{"line":49,"column":20},"end":{"line":53,"column":23}},"12":{"start":{"line":52,"column":38},"end":{"line":52,"column":71}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":16},"end":{"line":40,"column":16}},{"start":{"line":40,"column":16},"end":{"line":40,"column":16}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":37},"end":{"line":45,"column":46}},{"start":{"line":45,"column":50},"end":{"line":45,"column":89}}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":34},"end":{"line":46,"column":46}},{"start":{"line":46,"column":50},"end":{"line":46,"column":116}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":16},"end":{"line":48,"column":16}},{"start":{"line":48,"column":16},"end":{"line":48,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag when using constructor without parentheses"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require parentheses when invoking a constructor with no arguments\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","            NewExpression(node) {","                if (node.arguments.length !== 0) {","                    return;  // shortcut: if there are arguments, there have to be parens","                }","","                const lastToken = sourceCode.getLastToken(node);","                const hasLastParen = lastToken && astUtils.isClosingParenToken(lastToken);","                const hasParens = hasLastParen && astUtils.isOpeningParenToken(sourceCode.getTokenBefore(lastToken));","","                if (!hasParens) {","                    context.report({","                        node,","                        message: \"Missing '()' invoking a constructor.\",","                        fix: fixer => fixer.insertTextAfter(node, \"()\")","                    });","                }","            }","        };","    }","};",""],"l":{"12":1,"22":1,"36":0,"38":0,"40":0,"41":0,"44":0,"45":0,"46":0,"48":0,"49":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/newline-after-var.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/newline-after-var.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":0,"25":1,"26":0,"27":0,"28":1,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0,0],"7":[0,0,0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0],"19":[0,0],"20":[0,0,0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":20}}},"2":{"name":"getLastToken","line":73,"loc":{"start":{"line":73,"column":8},"end":{"line":73,"column":36}}},"3":{"name":"isVar","line":93,"loc":{"start":{"line":93,"column":8},"end":{"line":93,"column":32}}},"4":{"name":"isForTypeSpecifier","line":103,"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":45}}},"5":{"name":"isExportSpecifier","line":113,"loc":{"start":{"line":113,"column":8},"end":{"line":113,"column":45}}},"6":{"name":"isLastNode","line":124,"loc":{"start":{"line":124,"column":8},"end":{"line":124,"column":34}}},"7":{"name":"getLastCommentLineOfBlock","line":135,"loc":{"start":{"line":135,"column":8},"end":{"line":135,"column":61}}},"8":{"name":"hasBlankLineAfterComment","line":147,"loc":{"start":{"line":147,"column":8},"end":{"line":147,"column":67}}},"9":{"name":"checkForBlankLine","line":159,"loc":{"start":{"line":159,"column":8},"end":{"line":159,"column":41}}},"10":{"name":"(anonymous_10)","line":209,"loc":{"start":{"line":209,"column":23},"end":{"line":209,"column":31}}},"11":{"name":"(anonymous_11)","line":228,"loc":{"start":{"line":228,"column":23},"end":{"line":228,"column":31}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":248,"column":2}},"3":{"start":{"line":37,"column":8},"end":{"line":38,"column":81}},"4":{"start":{"line":40,"column":8},"end":{"line":40,"column":51}},"5":{"start":{"line":43,"column":8},"end":{"line":43,"column":73}},"6":{"start":{"line":46,"column":8},"end":{"line":49,"column":15}},"7":{"start":{"line":47,"column":12},"end":{"line":47,"column":62}},"8":{"start":{"line":48,"column":12},"end":{"line":48,"column":26}},"9":{"start":{"line":73,"column":8},"end":{"line":85,"column":9}},"10":{"start":{"line":74,"column":12},"end":{"line":74,"column":60}},"11":{"start":{"line":76,"column":12},"end":{"line":82,"column":13}},"12":{"start":{"line":77,"column":16},"end":{"line":77,"column":71}},"13":{"start":{"line":79,"column":16},"end":{"line":81,"column":17}},"14":{"start":{"line":80,"column":20},"end":{"line":80,"column":37}},"15":{"start":{"line":84,"column":12},"end":{"line":84,"column":29}},"16":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"17":{"start":{"line":94,"column":12},"end":{"line":94,"column":81}},"18":{"start":{"line":103,"column":8},"end":{"line":105,"column":9}},"19":{"start":{"line":104,"column":12},"end":{"line":104,"column":110}},"20":{"start":{"line":113,"column":8},"end":{"line":116,"column":9}},"21":{"start":{"line":114,"column":12},"end":{"line":115,"column":95}},"22":{"start":{"line":124,"column":8},"end":{"line":128,"column":9}},"23":{"start":{"line":125,"column":12},"end":{"line":125,"column":57}},"24":{"start":{"line":127,"column":12},"end":{"line":127,"column":82}},"25":{"start":{"line":135,"column":8},"end":{"line":139,"column":9}},"26":{"start":{"line":136,"column":12},"end":{"line":136,"column":71}},"27":{"start":{"line":138,"column":12},"end":{"line":138,"column":128}},"28":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"29":{"start":{"line":148,"column":12},"end":{"line":148,"column":90}},"30":{"start":{"line":159,"column":8},"end":{"line":237,"column":9}},"31":{"start":{"line":165,"column":12},"end":{"line":172,"column":57}},"32":{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},"33":{"start":{"line":176,"column":16},"end":{"line":176,"column":23}},"34":{"start":{"line":180,"column":12},"end":{"line":182,"column":13}},"35":{"start":{"line":181,"column":16},"end":{"line":181,"column":23}},"36":{"start":{"line":185,"column":12},"end":{"line":187,"column":13}},"37":{"start":{"line":186,"column":16},"end":{"line":186,"column":23}},"38":{"start":{"line":191,"column":12},"end":{"line":193,"column":13}},"39":{"start":{"line":192,"column":16},"end":{"line":192,"column":23}},"40":{"start":{"line":196,"column":12},"end":{"line":198,"column":13}},"41":{"start":{"line":197,"column":16},"end":{"line":197,"column":23}},"42":{"start":{"line":201,"column":12},"end":{"line":201,"column":75}},"43":{"start":{"line":202,"column":12},"end":{"line":202,"column":92}},"44":{"start":{"line":204,"column":12},"end":{"line":215,"column":13}},"45":{"start":{"line":205,"column":16},"end":{"line":214,"column":19}},"46":{"start":{"line":210,"column":24},"end":{"line":210,"column":146}},"47":{"start":{"line":212,"column":24},"end":{"line":212,"column":179}},"48":{"start":{"line":218,"column":12},"end":{"line":236,"column":13}},"49":{"start":{"line":224,"column":16},"end":{"line":235,"column":19}},"50":{"start":{"line":229,"column":24},"end":{"line":231,"column":25}},"51":{"start":{"line":230,"column":28},"end":{"line":230,"column":77}},"52":{"start":{"line":233,"column":24},"end":{"line":233,"column":136}},"53":{"start":{"line":243,"column":8},"end":{"line":245,"column":10}}},"branchMap":{"1":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":54},"end":{"line":43,"column":61}},{"start":{"line":43,"column":64},"end":{"line":43,"column":72}}]},"2":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":12}},{"start":{"line":76,"column":12},"end":{"line":76,"column":12}}]},"3":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":16},"end":{"line":76,"column":47}},{"start":{"line":76,"column":51},"end":{"line":76,"column":74}}]},"4":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":16}},{"start":{"line":79,"column":16},"end":{"line":79,"column":16}}]},"5":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":19},"end":{"line":94,"column":36}},{"start":{"line":94,"column":40},"end":{"line":94,"column":57}},{"start":{"line":94,"column":61},"end":{"line":94,"column":80}}]},"6":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":19},"end":{"line":104,"column":45}},{"start":{"line":104,"column":49},"end":{"line":104,"column":77}},{"start":{"line":104,"column":81},"end":{"line":104,"column":109}}]},"7":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":19},"end":{"line":114,"column":56}},{"start":{"line":114,"column":60},"end":{"line":114,"column":90}},{"start":{"line":115,"column":16},"end":{"line":115,"column":55}},{"start":{"line":115,"column":59},"end":{"line":115,"column":94}}]},"8":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":19},"end":{"line":127,"column":25}},{"start":{"line":127,"column":30},"end":{"line":127,"column":57}},{"start":{"line":127,"column":61},"end":{"line":127,"column":80}}]},"9":{"line":138,"type":"cond-expr","locations":[{"start":{"line":138,"column":59},"end":{"line":138,"column":107}},{"start":{"line":138,"column":110},"end":{"line":138,"column":127}}]},"10":{"line":171,"type":"cond-expr","locations":[{"start":{"line":171,"column":74},"end":{"line":171,"column":104}},{"start":{"line":171,"column":107},"end":{"line":171,"column":136}}]},"11":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":12},"end":{"line":175,"column":12}},{"start":{"line":175,"column":12},"end":{"line":175,"column":12}}]},"12":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":12},"end":{"line":180,"column":12}},{"start":{"line":180,"column":12},"end":{"line":180,"column":12}}]},"13":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":12},"end":{"line":185,"column":12}},{"start":{"line":185,"column":12},"end":{"line":185,"column":12}}]},"14":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":12},"end":{"line":191,"column":12}},{"start":{"line":191,"column":12},"end":{"line":191,"column":12}}]},"15":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":16},"end":{"line":191,"column":44}},{"start":{"line":191,"column":48},"end":{"line":191,"column":70}}]},"16":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":12},"end":{"line":196,"column":12}},{"start":{"line":196,"column":12},"end":{"line":196,"column":12}}]},"17":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":12},"end":{"line":204,"column":12}},{"start":{"line":204,"column":12},"end":{"line":204,"column":12}}]},"18":{"line":204,"type":"binary-expr","locations":[{"start":{"line":204,"column":16},"end":{"line":204,"column":32}},{"start":{"line":204,"column":36},"end":{"line":204,"column":51}},{"start":{"line":204,"column":55},"end":{"line":204,"column":74}}]},"19":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":12},"end":{"line":218,"column":12}},{"start":{"line":218,"column":12},"end":{"line":218,"column":12}}]},"20":{"line":219,"type":"binary-expr","locations":[{"start":{"line":219,"column":16},"end":{"line":219,"column":33}},{"start":{"line":220,"column":20},"end":{"line":220,"column":36}},{"start":{"line":221,"column":20},"end":{"line":221,"column":38}},{"start":{"line":221,"column":42},"end":{"line":221,"column":91}}]},"21":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":24},"end":{"line":229,"column":24}},{"start":{"line":229,"column":24},"end":{"line":229,"column":24}}]},"22":{"line":229,"type":"cond-expr","locations":[{"start":{"line":229,"column":47},"end":{"line":229,"column":85}},{"start":{"line":229,"column":88},"end":{"line":229,"column":110}}]}},"code":["/**"," * @fileoverview Rule to check empty newline after \"var\" statement"," * @author Gopal Venkatesan"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow an empty line after variable declarations\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"never\", \"always\"]","            }","        ],","","        fixable: \"whitespace\"","    },","","    create(context) {","","        const ALWAYS_MESSAGE = \"Expected blank line after variable declarations.\",","            NEVER_MESSAGE = \"Unexpected blank line after variable declarations.\";","","        const sourceCode = context.getSourceCode();","","        // Default `mode` to \"always\".","        const mode = context.options[0] === \"never\" ? \"never\" : \"always\";","","        // Cache starting and ending line numbers of comments for faster lookup","        const commentEndLine = sourceCode.getAllComments().reduce((result, token) => {","            result[token.loc.start.line] = token.loc.end.line;","            return result;","        }, {});","","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Gets a token from the given node to compare line to the next statement.","         *","         * In general, the token is the last token of the node. However, the token is the second last token if the following conditions satisfy.","         *","         * - The last token is semicolon.","         * - The semicolon is on a different line from the previous token of the semicolon.","         *","         * This behavior would address semicolon-less style code. e.g.:","         *","         *     var foo = 1","         *","         *     ;(a || b).doSomething()","         *","         * @param {ASTNode} node - The node to get.","         * @returns {Token} The token to compare line to the next statement.","         */","        function getLastToken(node) {","            const lastToken = sourceCode.getLastToken(node);","","            if (lastToken.type === \"Punctuator\" && lastToken.value === \";\") {","                const prevToken = sourceCode.getTokenBefore(lastToken);","","                if (prevToken.loc.end.line !== lastToken.loc.start.line) {","                    return prevToken;","                }","            }","","            return lastToken;","        }","","        /**","         * Determine if provided keyword is a variable declaration","         * @private","         * @param {string} keyword - keyword to test","         * @returns {boolean} True if `keyword` is a type of var","         */","        function isVar(keyword) {","            return keyword === \"var\" || keyword === \"let\" || keyword === \"const\";","        }","","        /**","         * Determine if provided keyword is a variant of for specifiers","         * @private","         * @param {string} keyword - keyword to test","         * @returns {boolean} True if `keyword` is a variant of for specifier","         */","        function isForTypeSpecifier(keyword) {","            return keyword === \"ForStatement\" || keyword === \"ForInStatement\" || keyword === \"ForOfStatement\";","        }","","        /**","         * Determine if provided keyword is an export specifiers","         * @private","         * @param {string} nodeType - nodeType to test","         * @returns {boolean} True if `nodeType` is an export specifier","         */","        function isExportSpecifier(nodeType) {","            return nodeType === \"ExportNamedDeclaration\" || nodeType === \"ExportSpecifier\" ||","                nodeType === \"ExportDefaultDeclaration\" || nodeType === \"ExportAllDeclaration\";","        }","","        /**","         * Determine if provided node is the last of their parent block.","         * @private","         * @param {ASTNode} node - node to test","         * @returns {boolean} True if `node` is last of their parent block.","         */","        function isLastNode(node) {","            const token = sourceCode.getTokenAfter(node);","","            return !token || (token.type === \"Punctuator\" && token.value === \"}\");","        }","","        /**","        * Gets the last line of a group of consecutive comments","        * @param {number} commentStartLine The starting line of the group","        * @returns {number} The number of the last comment line of the group","        */","        function getLastCommentLineOfBlock(commentStartLine) {","            const currentCommentEnd = commentEndLine[commentStartLine];","","            return commentEndLine[currentCommentEnd + 1] ? getLastCommentLineOfBlock(currentCommentEnd + 1) : currentCommentEnd;","        }","","        /**","         * Determine if a token starts more than one line after a comment ends","         * @param  {token}   token            The token being checked","         * @param {integer}  commentStartLine The line number on which the comment starts","         * @returns {boolean}                 True if `token` does not start immediately after a comment","         */","        function hasBlankLineAfterComment(token, commentStartLine) {","            return token.loc.start.line > getLastCommentLineOfBlock(commentStartLine) + 1;","        }","","        /**","         * Checks that a blank line exists after a variable declaration when mode is","         * set to \"always\", or checks that there is no blank line when mode is set","         * to \"never\"","         * @private","         * @param {ASTNode} node - `VariableDeclaration` node to test","         * @returns {void}","         */","        function checkForBlankLine(node) {","","            /*","             * lastToken is the last token on the node's line. It will usually also be the last token of the node, but it will","             * sometimes be second-last if there is a semicolon on a different line.","             */","            const lastToken = getLastToken(node),","","                /*","                 * If lastToken is the last token of the node, nextToken should be the token after the node. Otherwise, nextToken","                 * is the last token of the node.","                 */","                nextToken = lastToken === sourceCode.getLastToken(node) ? sourceCode.getTokenAfter(node) : sourceCode.getLastToken(node),","                nextLineNum = lastToken.loc.end.line + 1;","","            // Ignore if there is no following statement","            if (!nextToken) {","                return;","            }","","            // Ignore if parent of node is a for variant","            if (isForTypeSpecifier(node.parent.type)) {","                return;","            }","","            // Ignore if parent of node is an export specifier","            if (isExportSpecifier(node.parent.type)) {","                return;","            }","","            // Some coding styles use multiple `var` statements, so do nothing if","            // the next token is a `var` statement.","            if (nextToken.type === \"Keyword\" && isVar(nextToken.value)) {","                return;","            }","","            // Ignore if it is last statement in a block","            if (isLastNode(node)) {","                return;","            }","","            // Next statement is not a `var`...","            const noNextLineToken = nextToken.loc.start.line > nextLineNum;","            const hasNextLineComment = (typeof commentEndLine[nextLineNum] !== \"undefined\");","","            if (mode === \"never\" && noNextLineToken && !hasNextLineComment) {","                context.report({","                    node,","                    message: NEVER_MESSAGE,","                    data: { identifier: node.name },","                    fix(fixer) {","                        const linesBetween = sourceCode.getText().slice(lastToken.range[1], nextToken.range[0]).split(astUtils.LINEBREAK_MATCHER);","","                        return fixer.replaceTextRange([lastToken.range[1], nextToken.range[0]], `${linesBetween.slice(0, -1).join(\"\")}\\n${linesBetween[linesBetween.length - 1]}`);","                    }","                });","            }","","            // Token on the next line, or comment without blank line","            if (","                mode === \"always\" && (","                    !noNextLineToken ||","                    hasNextLineComment && !hasBlankLineAfterComment(nextToken, nextLineNum)","                )","            ) {","                context.report({","                    node,","                    message: ALWAYS_MESSAGE,","                    data: { identifier: node.name },","                    fix(fixer) {","                        if ((noNextLineToken ? getLastCommentLineOfBlock(nextLineNum) : lastToken.loc.end.line) === nextToken.loc.start.line) {","                            return fixer.insertTextBefore(nextToken, \"\\n\\n\");","                        }","","                        return fixer.insertTextBeforeRange([nextToken.range[0] - nextToken.loc.start.column, nextToken.range[1]], \"\\n\");","                    }","                });","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            VariableDeclaration: checkForBlankLine","        };","","    }","};",""],"l":{"12":1,"18":1,"37":0,"40":0,"43":0,"46":0,"47":0,"48":0,"73":1,"74":0,"76":0,"77":0,"79":0,"80":0,"84":0,"93":1,"94":0,"103":1,"104":0,"113":1,"114":0,"124":1,"125":0,"127":0,"135":1,"136":0,"138":0,"147":1,"148":0,"159":1,"165":0,"175":0,"176":0,"180":0,"181":0,"185":0,"186":0,"191":0,"192":0,"196":0,"197":0,"201":0,"202":0,"204":0,"205":0,"210":0,"212":0,"218":0,"224":0,"229":0,"230":0,"233":0,"243":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/newline-before-return.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/newline-before-return.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"isPrecededByTokens","line":36,"loc":{"start":{"line":36,"column":8},"end":{"line":36,"column":54}}},"3":{"name":"isFirstNode","line":48,"loc":{"start":{"line":48,"column":8},"end":{"line":48,"column":35}}},"4":{"name":"calcCommentLines","line":75,"loc":{"start":{"line":75,"column":8},"end":{"line":75,"column":60}}},"5":{"name":"getLineNumberOfTokenBefore","line":109,"loc":{"start":{"line":109,"column":8},"end":{"line":109,"column":50}}},"6":{"name":"hasNewlineBefore","line":136,"loc":{"start":{"line":136,"column":8},"end":{"line":136,"column":40}}},"7":{"name":"canFix","line":155,"loc":{"start":{"line":155,"column":8},"end":{"line":155,"column":30}}},"8":{"name":"(anonymous_8)","line":184,"loc":{"start":{"line":184,"column":27},"end":{"line":184,"column":34}}},"9":{"name":"(anonymous_9)","line":189,"loc":{"start":{"line":189,"column":27},"end":{"line":189,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":203,"column":2}},"2":{"start":{"line":23,"column":8},"end":{"line":23,"column":51}},"3":{"start":{"line":36,"column":8},"end":{"line":40,"column":9}},"4":{"start":{"line":37,"column":12},"end":{"line":37,"column":64}},"5":{"start":{"line":39,"column":12},"end":{"line":39,"column":73}},"6":{"start":{"line":39,"column":44},"end":{"line":39,"column":71}},"7":{"start":{"line":48,"column":8},"end":{"line":66,"column":9}},"8":{"start":{"line":49,"column":12},"end":{"line":49,"column":48}},"9":{"start":{"line":51,"column":12},"end":{"line":55,"column":13}},"10":{"start":{"line":52,"column":16},"end":{"line":54,"column":46}},"11":{"start":{"line":57,"column":12},"end":{"line":63,"column":13}},"12":{"start":{"line":58,"column":16},"end":{"line":58,"column":63}},"13":{"start":{"line":59,"column":19},"end":{"line":63,"column":13}},"14":{"start":{"line":60,"column":16},"end":{"line":60,"column":56}},"15":{"start":{"line":61,"column":19},"end":{"line":63,"column":13}},"16":{"start":{"line":62,"column":16},"end":{"line":62,"column":55}},"17":{"start":{"line":64,"column":12},"end":{"line":64,"column":51}},"18":{"start":{"line":75,"column":8},"end":{"line":101,"column":9}},"19":{"start":{"line":76,"column":12},"end":{"line":76,"column":66}},"20":{"start":{"line":77,"column":12},"end":{"line":77,"column":37}},"21":{"start":{"line":79,"column":12},"end":{"line":81,"column":13}},"22":{"start":{"line":80,"column":16},"end":{"line":80,"column":40}},"23":{"start":{"line":83,"column":12},"end":{"line":98,"column":15}},"24":{"start":{"line":84,"column":16},"end":{"line":84,"column":35}},"25":{"start":{"line":86,"column":16},"end":{"line":88,"column":17}},"26":{"start":{"line":87,"column":20},"end":{"line":87,"column":86}},"27":{"start":{"line":91,"column":16},"end":{"line":93,"column":17}},"28":{"start":{"line":92,"column":20},"end":{"line":92,"column":39}},"29":{"start":{"line":95,"column":16},"end":{"line":97,"column":17}},"30":{"start":{"line":96,"column":20},"end":{"line":96,"column":39}},"31":{"start":{"line":100,"column":12},"end":{"line":100,"column":36}},"32":{"start":{"line":109,"column":8},"end":{"line":128,"column":9}},"33":{"start":{"line":110,"column":12},"end":{"line":110,"column":64}},"34":{"start":{"line":111,"column":12},"end":{"line":111,"column":35}},"35":{"start":{"line":121,"column":12},"end":{"line":125,"column":13}},"36":{"start":{"line":122,"column":16},"end":{"line":122,"column":62}},"37":{"start":{"line":124,"column":16},"end":{"line":124,"column":39}},"38":{"start":{"line":127,"column":12},"end":{"line":127,"column":38}},"39":{"start":{"line":136,"column":8},"end":{"line":142,"column":9}},"40":{"start":{"line":137,"column":12},"end":{"line":137,"column":52}},"41":{"start":{"line":138,"column":12},"end":{"line":138,"column":72}},"42":{"start":{"line":139,"column":12},"end":{"line":139,"column":76}},"43":{"start":{"line":141,"column":12},"end":{"line":141,"column":73}},"44":{"start":{"line":155,"column":8},"end":{"line":177,"column":9}},"45":{"start":{"line":156,"column":12},"end":{"line":156,"column":73}},"46":{"start":{"line":157,"column":12},"end":{"line":157,"column":83}},"47":{"start":{"line":158,"column":12},"end":{"line":158,"column":64}},"48":{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},"49":{"start":{"line":161,"column":16},"end":{"line":161,"column":28}},"50":{"start":{"line":171,"column":12},"end":{"line":174,"column":13}},"51":{"start":{"line":173,"column":16},"end":{"line":173,"column":28}},"52":{"start":{"line":176,"column":12},"end":{"line":176,"column":25}},"53":{"start":{"line":183,"column":8},"end":{"line":201,"column":10}},"54":{"start":{"line":185,"column":16},"end":{"line":199,"column":17}},"55":{"start":{"line":186,"column":20},"end":{"line":198,"column":23}},"56":{"start":{"line":190,"column":28},"end":{"line":195,"column":29}},"57":{"start":{"line":191,"column":32},"end":{"line":191,"column":84}},"58":{"start":{"line":192,"column":32},"end":{"line":192,"column":114}},"59":{"start":{"line":194,"column":32},"end":{"line":194,"column":78}},"60":{"start":{"line":196,"column":28},"end":{"line":196,"column":40}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":12}},{"start":{"line":51,"column":12},"end":{"line":51,"column":12}}]},"2":{"line":52,"type":"cond-expr","locations":[{"start":{"line":53,"column":20},"end":{"line":53,"column":48}},{"start":{"line":54,"column":20},"end":{"line":54,"column":45}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":12}},{"start":{"line":57,"column":12},"end":{"line":57,"column":12}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":19},"end":{"line":59,"column":19}},{"start":{"line":59,"column":19},"end":{"line":59,"column":19}}]},"5":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":19},"end":{"line":61,"column":19}},{"start":{"line":61,"column":19},"end":{"line":61,"column":19}}]},"6":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":12}},{"start":{"line":79,"column":12},"end":{"line":79,"column":12}}]},"7":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":16},"end":{"line":86,"column":16}},{"start":{"line":86,"column":16},"end":{"line":86,"column":16}}]},"8":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":16},"end":{"line":91,"column":16}},{"start":{"line":91,"column":16},"end":{"line":91,"column":16}}]},"9":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":16},"end":{"line":95,"column":16}},{"start":{"line":95,"column":16},"end":{"line":95,"column":16}}]},"10":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":12},"end":{"line":121,"column":12}},{"start":{"line":121,"column":12},"end":{"line":121,"column":12}}]},"11":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":12},"end":{"line":160,"column":12}},{"start":{"line":160,"column":12},"end":{"line":160,"column":12}}]},"12":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":12},"end":{"line":171,"column":12}},{"start":{"line":171,"column":12},"end":{"line":171,"column":12}}]},"13":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":16},"end":{"line":171,"column":76}},{"start":{"line":172,"column":16},"end":{"line":172,"column":71}}]},"14":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":16},"end":{"line":185,"column":16}},{"start":{"line":185,"column":16},"end":{"line":185,"column":16}}]},"15":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":20},"end":{"line":185,"column":38}},{"start":{"line":185,"column":42},"end":{"line":185,"column":65}}]},"16":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":28},"end":{"line":190,"column":28}},{"start":{"line":190,"column":28},"end":{"line":190,"column":28}}]},"17":{"line":192,"type":"cond-expr","locations":[{"start":{"line":192,"column":100},"end":{"line":192,"column":106}},{"start":{"line":192,"column":109},"end":{"line":192,"column":113}}]}},"code":["/**"," * @fileoverview Rule to require newlines before `return` statement"," * @author Kai Cataldo"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require an empty line before `return` statements\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        fixable: \"whitespace\",","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Tests whether node is preceded by supplied tokens","         * @param {ASTNode} node - node to check","         * @param {array} testTokens - array of tokens to test against","         * @returns {boolean} Whether or not the node is preceded by one of the supplied tokens","         * @private","         */","        function isPrecededByTokens(node, testTokens) {","            const tokenBefore = sourceCode.getTokenBefore(node);","","            return testTokens.some(token => tokenBefore.value === token);","        }","","        /**","         * Checks whether node is the first node after statement or in block","         * @param {ASTNode} node - node to check","         * @returns {boolean} Whether or not the node is the first node after statement or in block","         * @private","         */","        function isFirstNode(node) {","            const parentType = node.parent.type;","","            if (node.parent.body) {","                return Array.isArray(node.parent.body)","                  ? node.parent.body[0] === node","                  : node.parent.body === node;","            }","","            if (parentType === \"IfStatement\") {","                return isPrecededByTokens(node, [\"else\", \")\"]);","            } else if (parentType === \"DoWhileStatement\") {","                return isPrecededByTokens(node, [\"do\"]);","            } else if (parentType === \"SwitchCase\") {","                return isPrecededByTokens(node, [\":\"]);","            }","            return isPrecededByTokens(node, [\")\"]);","","        }","","        /**","         * Returns the number of lines of comments that precede the node","         * @param {ASTNode} node - node to check for overlapping comments","         * @param {number} lineNumTokenBefore - line number of previous token, to check for overlapping comments","         * @returns {number} Number of lines of comments that precede the node","         * @private","         */","        function calcCommentLines(node, lineNumTokenBefore) {","            const comments = sourceCode.getComments(node).leading;","            let numLinesComments = 0;","","            if (!comments.length) {","                return numLinesComments;","            }","","            comments.forEach(comment => {","                numLinesComments++;","","                if (comment.type === \"Block\") {","                    numLinesComments += comment.loc.end.line - comment.loc.start.line;","                }","","                // avoid counting lines with inline comments twice","                if (comment.loc.start.line === lineNumTokenBefore) {","                    numLinesComments--;","                }","","                if (comment.loc.end.line === node.loc.start.line) {","                    numLinesComments--;","                }","            });","","            return numLinesComments;","        }","","        /**","         * Returns the line number of the token before the node that is passed in as an argument","         * @param {ASTNode} node - The node to use as the start of the calculation","         * @returns {number} Line number of the token before `node`","         * @private","         */","        function getLineNumberOfTokenBefore(node) {","            const tokenBefore = sourceCode.getTokenBefore(node);","            let lineNumTokenBefore;","","            /**","             * Global return (at the beginning of a script) is a special case.","             * If there is no token before `return`, then we expect no line","             * break before the return. Comments are allowed to occupy lines","             * before the global return, just no blank lines.","             * Setting lineNumTokenBefore to zero in that case results in the","             * desired behavior.","             */","            if (tokenBefore) {","                lineNumTokenBefore = tokenBefore.loc.end.line;","            } else {","                lineNumTokenBefore = 0;     // global return at beginning of script","            }","","            return lineNumTokenBefore;","        }","","        /**","         * Checks whether node is preceded by a newline","         * @param {ASTNode} node - node to check","         * @returns {boolean} Whether or not the node is preceded by a newline","         * @private","         */","        function hasNewlineBefore(node) {","            const lineNumNode = node.loc.start.line;","            const lineNumTokenBefore = getLineNumberOfTokenBefore(node);","            const commentLines = calcCommentLines(node, lineNumTokenBefore);","","            return (lineNumNode - lineNumTokenBefore - commentLines) > 1;","        }","","        /**","         * Checks whether it is safe to apply a fix to a given return statement.","         *","         * The fix is not considered safe if the given return statement has leading comments,","         * as we cannot safely determine if the newline should be added before or after the comments.","         * For more information, see: https://github.com/eslint/eslint/issues/5958#issuecomment-222767211","         *","         * @param {ASTNode} node - The return statement node to check.","         * @returns {boolean} `true` if it can fix the node.","         * @private","         */","        function canFix(node) {","            const leadingComments = sourceCode.getComments(node).leading;","            const lastLeadingComment = leadingComments[leadingComments.length - 1];","            const tokenBefore = sourceCode.getTokenBefore(node);","","            if (leadingComments.length === 0) {","                return true;","            }","","            // if the last leading comment ends in the same line as the previous token and","            // does not share a line with the `return` node, we can consider it safe to fix.","            // Example:","            // function a() {","            //     var b; //comment","            //     return;","            // }","            if (lastLeadingComment.loc.end.line === tokenBefore.loc.end.line &&","                lastLeadingComment.loc.end.line !== node.loc.start.line) {","                return true;","            }","","            return false;","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            ReturnStatement(node) {","                if (!isFirstNode(node) && !hasNewlineBefore(node)) {","                    context.report({","                        node,","                        message: \"Expected newline before return statement.\",","                        fix(fixer) {","                            if (canFix(node)) {","                                const tokenBefore = sourceCode.getTokenBefore(node);","                                const newlines = node.loc.start.line === tokenBefore.loc.end.line ? \"\\n\\n\" : \"\\n\";","","                                return fixer.insertTextBefore(node, newlines);","                            }","                            return null;","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"11":1,"23":0,"36":1,"37":0,"39":0,"48":1,"49":0,"51":0,"52":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"64":0,"75":1,"76":0,"77":0,"79":0,"80":0,"83":0,"84":0,"86":0,"87":0,"91":0,"92":0,"95":0,"96":0,"100":0,"109":1,"110":0,"111":0,"121":0,"122":0,"124":0,"127":0,"136":1,"137":0,"138":0,"139":0,"141":0,"155":1,"156":0,"157":0,"158":0,"160":0,"161":0,"171":0,"173":0,"176":0,"183":0,"185":0,"186":0,"190":0,"191":0,"192":0,"194":0,"196":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/newline-per-chained-call.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/newline-per-chained-call.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":36,"loc":{"start":{"line":36,"column":10},"end":{"line":36,"column":20}}},"2":{"name":"getPropertyText","line":50,"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":39}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":33},"end":{"line":59,"column":40}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":9,"column":41}},"2":{"start":{"line":15,"column":0},"end":{"line":86,"column":2}},"3":{"start":{"line":38,"column":8},"end":{"line":39,"column":69}},"4":{"start":{"line":41,"column":8},"end":{"line":41,"column":51}},"5":{"start":{"line":50,"column":8},"end":{"line":56,"column":9}},"6":{"start":{"line":51,"column":12},"end":{"line":51,"column":53}},"7":{"start":{"line":52,"column":12},"end":{"line":52,"column":94}},"8":{"start":{"line":53,"column":12},"end":{"line":53,"column":74}},"9":{"start":{"line":55,"column":12},"end":{"line":55,"column":46}},"10":{"start":{"line":58,"column":8},"end":{"line":84,"column":10}},"11":{"start":{"line":60,"column":16},"end":{"line":62,"column":17}},"12":{"start":{"line":61,"column":20},"end":{"line":61,"column":27}},"13":{"start":{"line":64,"column":16},"end":{"line":64,"column":43}},"14":{"start":{"line":65,"column":16},"end":{"line":65,"column":43}},"15":{"start":{"line":66,"column":16},"end":{"line":66,"column":30}},"16":{"start":{"line":68,"column":16},"end":{"line":71,"column":17}},"17":{"start":{"line":69,"column":20},"end":{"line":69,"column":31}},"18":{"start":{"line":70,"column":20},"end":{"line":70,"column":50}},"19":{"start":{"line":73,"column":16},"end":{"line":82,"column":17}},"20":{"start":{"line":74,"column":20},"end":{"line":81,"column":23}}},"branchMap":{"1":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":24},"end":{"line":38,"column":42}},{"start":{"line":38,"column":46},"end":{"line":38,"column":48}}]},"2":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":35},"end":{"line":39,"column":63}},{"start":{"line":39,"column":67},"end":{"line":39,"column":68}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":51,"column":43},"end":{"line":51,"column":46}},{"start":{"line":51,"column":49},"end":{"line":51,"column":52}}]},"4":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":65},"end":{"line":53,"column":68}},{"start":{"line":53,"column":71},"end":{"line":53,"column":73}}]},"5":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":27},"end":{"line":53,"column":40}},{"start":{"line":53,"column":44},"end":{"line":53,"column":62}}]},"6":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":16},"end":{"line":60,"column":16}},{"start":{"line":60,"column":16},"end":{"line":60,"column":16}}]},"7":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":20},"end":{"line":60,"column":32}},{"start":{"line":60,"column":36},"end":{"line":60,"column":75}}]},"8":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":23},"end":{"line":68,"column":29}},{"start":{"line":68,"column":33},"end":{"line":68,"column":46}}]},"9":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":16},"end":{"line":73,"column":16}},{"start":{"line":73,"column":16},"end":{"line":73,"column":16}}]},"10":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":20},"end":{"line":73,"column":48}},{"start":{"line":73,"column":52},"end":{"line":73,"column":113}}]}},"code":["/**"," * @fileoverview Rule to ensure newline per method call when chaining calls"," * @author Rajendra Patil"," * @author Burak Yigit Kaya"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require a newline after each call in a method chain\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [{","            type: \"object\",","            properties: {","                ignoreChainWithDepth: {","                    type: \"integer\",","                    minimum: 1,","                    maximum: 10","                }","            },","            additionalProperties: false","        }]","    },","","    create(context) {","","        const options = context.options[0] || {},","            ignoreChainWithDepth = options.ignoreChainWithDepth || 2;","","        const sourceCode = context.getSourceCode();","","        /**","         * Gets the property text of a given MemberExpression node.","         * If the text is multiline, this returns only the first line.","         *","         * @param {ASTNode} node - A MemberExpression node to get.","         * @returns {string} The property text of the node.","         */","        function getPropertyText(node) {","            const prefix = node.computed ? \"[\" : \".\";","            const lines = sourceCode.getText(node.property).split(astUtils.LINEBREAK_MATCHER);","            const suffix = node.computed && lines.length === 1 ? \"]\" : \"\";","","            return prefix + lines[0] + suffix;","        }","","        return {","            \"CallExpression:exit\"(node) {","                if (!node.callee || node.callee.type !== \"MemberExpression\") {","                    return;","                }","","                const callee = node.callee;","                let parent = callee.object;","                let depth = 1;","","                while (parent && parent.callee) {","                    depth += 1;","                    parent = parent.callee.object;","                }","","                if (depth > ignoreChainWithDepth && callee.property.loc.start.line === callee.object.loc.end.line) {","                    context.report({","                        node: callee.property,","                        loc: callee.property.loc.start,","                        message: \"Expected line break before `{{callee}}`.\",","                        data: {","                            callee: getPropertyText(callee)","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"9":1,"15":1,"38":0,"41":0,"50":1,"51":0,"52":0,"53":0,"55":0,"58":0,"60":0,"61":0,"64":0,"65":0,"66":0,"68":0,"69":0,"70":0,"73":0,"74":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-alert.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-alert.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"isProhibitedIdentifier","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}}},"2":{"name":"report","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":47}}},"3":{"name":"findReference","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":36}}},"4":{"name":"isShadowed","line":60,"loc":{"start":{"line":60,"column":0},"end":{"line":60,"column":46}}},"5":{"name":"isGlobalThisReferenceOrGlobalWindow","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":71}}},"6":{"name":"(anonymous_6)","line":98,"loc":{"start":{"line":98,"column":10},"end":{"line":98,"column":20}}},"7":{"name":"(anonymous_7)","line":103,"loc":{"start":{"line":103,"column":19},"end":{"line":103,"column":22}}},"8":{"name":"(anonymous_8)","line":107,"loc":{"start":{"line":107,"column":26},"end":{"line":107,"column":33}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":70}},"2":{"start":{"line":22,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":23,"column":4},"end":{"line":23,"column":49}},"4":{"start":{"line":33,"column":0},"end":{"line":35,"column":1}},"5":{"start":{"line":34,"column":4},"end":{"line":34,"column":75}},"6":{"start":{"line":43,"column":0},"end":{"line":51,"column":1}},"7":{"start":{"line":44,"column":4},"end":{"line":45,"column":61}},"8":{"start":{"line":44,"column":60},"end":{"line":45,"column":59}},"9":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"10":{"start":{"line":48,"column":8},"end":{"line":48,"column":29}},"11":{"start":{"line":50,"column":4},"end":{"line":50,"column":16}},"12":{"start":{"line":60,"column":0},"end":{"line":64,"column":1}},"13":{"start":{"line":61,"column":4},"end":{"line":61,"column":49}},"14":{"start":{"line":63,"column":4},"end":{"line":63,"column":81}},"15":{"start":{"line":73,"column":0},"end":{"line":81,"column":1}},"16":{"start":{"line":74,"column":4},"end":{"line":78,"column":5}},"17":{"start":{"line":75,"column":8},"end":{"line":75,"column":20}},"18":{"start":{"line":76,"column":11},"end":{"line":78,"column":5}},"19":{"start":{"line":77,"column":8},"end":{"line":77,"column":53}},"20":{"start":{"line":80,"column":4},"end":{"line":80,"column":17}},"21":{"start":{"line":87,"column":0},"end":{"line":131,"column":2}},"22":{"start":{"line":99,"column":8},"end":{"line":99,"column":24}},"23":{"start":{"line":101,"column":8},"end":{"line":128,"column":10}},"24":{"start":{"line":104,"column":16},"end":{"line":104,"column":49}},"25":{"start":{"line":108,"column":16},"end":{"line":109,"column":54}},"26":{"start":{"line":112,"column":16},"end":{"line":125,"column":17}},"27":{"start":{"line":113,"column":20},"end":{"line":113,"column":55}},"28":{"start":{"line":115,"column":20},"end":{"line":117,"column":21}},"29":{"start":{"line":116,"column":24},"end":{"line":116,"column":62}},"30":{"start":{"line":119,"column":23},"end":{"line":125,"column":17}},"31":{"start":{"line":120,"column":20},"end":{"line":120,"column":67}},"32":{"start":{"line":122,"column":20},"end":{"line":124,"column":21}},"33":{"start":{"line":123,"column":24},"end":{"line":123,"column":62}}},"branchMap":{"1":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":60},"end":{"line":44,"column":107}},{"start":{"line":45,"column":12},"end":{"line":45,"column":59}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":4}},{"start":{"line":47,"column":4},"end":{"line":47,"column":4}}]},"3":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":11},"end":{"line":63,"column":20}},{"start":{"line":63,"column":24},"end":{"line":63,"column":42}},{"start":{"line":63,"column":46},"end":{"line":63,"column":80}}]},"4":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":74,"column":4}},{"start":{"line":74,"column":4},"end":{"line":74,"column":4}}]},"5":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":31}},{"start":{"line":74,"column":35},"end":{"line":74,"column":65}}]},"6":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":11},"end":{"line":76,"column":11}},{"start":{"line":76,"column":11},"end":{"line":76,"column":11}}]},"7":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":16},"end":{"line":112,"column":16}},{"start":{"line":112,"column":16},"end":{"line":112,"column":16}}]},"8":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":20},"end":{"line":115,"column":20}},{"start":{"line":115,"column":20},"end":{"line":115,"column":20}}]},"9":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":24},"end":{"line":115,"column":70}},{"start":{"line":115,"column":74},"end":{"line":115,"column":109}}]},"10":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":23},"end":{"line":119,"column":23}},{"start":{"line":119,"column":23},"end":{"line":119,"column":23}}]},"11":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":27},"end":{"line":119,"column":61}},{"start":{"line":119,"column":65},"end":{"line":119,"column":142}}]},"12":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":20},"end":{"line":122,"column":20}},{"start":{"line":122,"column":20},"end":{"line":122,"column":20}}]}},"code":["/**"," * @fileoverview Rule to flag use of alert, confirm, prompt"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const getPropertyName = require(\"../ast-utils\").getStaticPropertyName;","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks if the given name is a prohibited identifier."," * @param {string} name The name to check"," * @returns {boolean} Whether or not the name is prohibited."," */","function isProhibitedIdentifier(name) {","    return /^(alert|confirm|prompt)$/.test(name);","}","","/**"," * Reports the given node and identifier name."," * @param {RuleContext} context The ESLint rule context."," * @param {ASTNode} node The node to report on."," * @param {string} identifierName The name of the identifier."," * @returns {void}"," */","function report(context, node, identifierName) {","    context.report(node, \"Unexpected {{name}}.\", { name: identifierName });","}","","/**"," * Finds the escope reference in the given scope."," * @param {Object} scope The scope to search."," * @param {ASTNode} node The identifier node."," * @returns {Reference|null} Returns the found reference or null if none were found."," */","function findReference(scope, node) {","    const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] &&","            reference.identifier.range[1] === node.range[1]);","","    if (references.length === 1) {","        return references[0];","    }","    return null;","}","","/**"," * Checks if the given identifier node is shadowed in the given scope."," * @param {Object} scope The current scope."," * @param {Object} globalScope The global scope."," * @param {string} node The identifier node to check"," * @returns {boolean} Whether or not the name is shadowed."," */","function isShadowed(scope, globalScope, node) {","    const reference = findReference(scope, node);","","    return reference && reference.resolved && reference.resolved.defs.length > 0;","}","","/**"," * Checks if the given identifier node is a ThisExpression in the global scope or the global window property."," * @param {Object} scope The current scope."," * @param {Object} globalScope The global scope."," * @param {string} node The identifier node to check"," * @returns {boolean} Whether or not the node is a reference to the global object."," */","function isGlobalThisReferenceOrGlobalWindow(scope, globalScope, node) {","    if (scope.type === \"global\" && node.type === \"ThisExpression\") {","        return true;","    } else if (node.name === \"window\") {","        return !isShadowed(scope, globalScope, node);","    }","","    return false;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of `alert`, `confirm`, and `prompt`\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        let globalScope;","","        return {","","            Program() {","                globalScope = context.getScope();","            },","","            CallExpression(node) {","                const callee = node.callee,","                    currentScope = context.getScope();","","                // without window.","                if (callee.type === \"Identifier\") {","                    const identifierName = callee.name;","","                    if (!isShadowed(currentScope, globalScope, callee) && isProhibitedIdentifier(callee.name)) {","                        report(context, node, identifierName);","                    }","","                } else if (callee.type === \"MemberExpression\" && isGlobalThisReferenceOrGlobalWindow(currentScope, globalScope, callee.object)) {","                    const identifierName = getPropertyName(callee);","","                    if (isProhibitedIdentifier(identifierName)) {","                        report(context, node, identifierName);","                    }","                }","","            }","        };","","    }","};",""],"l":{"11":1,"22":1,"23":0,"33":1,"34":0,"43":1,"44":0,"47":0,"48":0,"50":0,"60":1,"61":0,"63":0,"73":1,"74":0,"75":0,"76":0,"77":0,"80":0,"87":1,"99":0,"101":0,"104":0,"108":0,"112":0,"113":0,"115":0,"116":0,"119":0,"120":0,"122":0,"123":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-array-constructor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-array-constructor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"check","line":31,"loc":{"start":{"line":31,"column":8},"end":{"line":31,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":47,"column":2}},"2":{"start":{"line":31,"column":8},"end":{"line":39,"column":9}},"3":{"start":{"line":32,"column":12},"end":{"line":38,"column":13}},"4":{"start":{"line":37,"column":16},"end":{"line":37,"column":99}},"5":{"start":{"line":41,"column":8},"end":{"line":44,"column":10}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":12}},{"start":{"line":32,"column":12},"end":{"line":32,"column":12}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":16},"end":{"line":33,"column":43}},{"start":{"line":34,"column":16},"end":{"line":34,"column":49}},{"start":{"line":35,"column":16},"end":{"line":35,"column":44}}]}},"code":["/**"," * @fileoverview Disallow construction of dense arrays using the Array constructor"," * @author Matt DuVall <http://www.mattduvall.com/>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `Array` constructors\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Disallow construction of dense arrays using the Array constructor","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function check(node) {","            if (","                node.arguments.length !== 1 &&","                node.callee.type === \"Identifier\" &&","                node.callee.name === \"Array\"","            ) {","                context.report({ node, message: \"The array literal notation [] is preferrable.\" });","            }","        }","","        return {","            CallExpression: check,","            NewExpression: check","        };","","    }","};",""],"l":{"12":1,"31":1,"32":0,"37":0,"41":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-await-in-loop.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-await-in-loop.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":33,"loc":{"start":{"line":33,"column":10},"end":{"line":33,"column":20}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":27},"end":{"line":35,"column":34}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":14,"column":3}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":3}},"3":{"start":{"line":24,"column":0},"end":{"line":75,"column":2}},"4":{"start":{"line":34,"column":8},"end":{"line":73,"column":10}},"5":{"start":{"line":36,"column":16},"end":{"line":36,"column":57}},"6":{"start":{"line":39,"column":16},"end":{"line":39,"column":36}},"7":{"start":{"line":44,"column":16},"end":{"line":44,"column":65}},"8":{"start":{"line":46,"column":16},"end":{"line":71,"column":17}},"9":{"start":{"line":47,"column":20},"end":{"line":47,"column":50}},"10":{"start":{"line":49,"column":20},"end":{"line":54,"column":21}},"11":{"start":{"line":53,"column":24},"end":{"line":53,"column":31}},"12":{"start":{"line":55,"column":20},"end":{"line":70,"column":21}},"13":{"start":{"line":59,"column":24},"end":{"line":69,"column":25}},"14":{"start":{"line":64,"column":28},"end":{"line":67,"column":31}},"15":{"start":{"line":68,"column":28},"end":{"line":68,"column":35}}},"branchMap":{"1":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":20},"end":{"line":49,"column":20}},{"start":{"line":49,"column":20},"end":{"line":49,"column":20}}]},"2":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":20},"end":{"line":55,"column":20}},{"start":{"line":55,"column":20},"end":{"line":55,"column":20}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":24},"end":{"line":59,"column":24}},{"start":{"line":59,"column":24},"end":{"line":59,"column":24}}]},"4":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":28},"end":{"line":60,"column":58}},{"start":{"line":61,"column":28},"end":{"line":61,"column":58}},{"start":{"line":62,"column":28},"end":{"line":62,"column":60}}]}},"code":["/**"," * @fileoverview Rule to disallow uses of await inside of loops."," * @author Nat Mote (nmote)"," */","\"use strict\";","","// Node types which are considered loops.","const loopTypes = new Set([","    \"ForStatement\",","    \"ForOfStatement\",","    \"ForInStatement\",","    \"WhileStatement\",","    \"DoWhileStatement\"","]);","","// Node types at which we should stop looking for loops. For example, it is fine to declare an async","// function within a loop, and use await inside of that.","const boundaryTypes = new Set([","    \"FunctionDeclaration\",","    \"FunctionExpression\",","    \"ArrowFunctionExpression\"","]);","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `await` inside of loops\",","            category: \"Possible Errors\",","            recommended: false","        },","        schema: []","    },","    create(context) {","        return {","            AwaitExpression(node) {","                const ancestors = context.getAncestors();","","                // Reverse so that we can traverse from the deepest node upwards.","                ancestors.reverse();","","                // Create a set of all the ancestors plus this node so that we can check","                // if this use of await appears in the body of the loop as opposed to","                // the right-hand side of a for...of, for example.","                const ancestorSet = new Set(ancestors).add(node);","","                for (let i = 0; i < ancestors.length; i++) {","                    const ancestor = ancestors[i];","","                    if (boundaryTypes.has(ancestor.type)) {","","                        // Short-circuit out if we encounter a boundary type. Loops above","                        // this do not matter.","                        return;","                    }","                    if (loopTypes.has(ancestor.type)) {","","                        // Only report if we are actually in the body or another part that gets executed on","                        // every iteration.","                        if (","                            ancestorSet.has(ancestor.body) ||","                            ancestorSet.has(ancestor.test) ||","                            ancestorSet.has(ancestor.update)","                        ) {","                            context.report({","                                node,","                                message: \"Unexpected `await` inside a loop.\"","                            });","                            return;","                        }","                    }","                }","            }","        };","    }","};",""],"l":{"8":1,"18":1,"24":1,"34":0,"36":0,"39":0,"44":0,"46":0,"47":0,"49":0,"53":0,"55":0,"59":0,"64":0,"68":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-bitwise.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-bitwise.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0,0],"4":[0,0],"5":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":49,"loc":{"start":{"line":49,"column":10},"end":{"line":49,"column":20}}},"2":{"name":"report","line":59,"loc":{"start":{"line":59,"column":8},"end":{"line":59,"column":30}}},"3":{"name":"hasBitwiseOperator","line":68,"loc":{"start":{"line":68,"column":8},"end":{"line":68,"column":42}}},"4":{"name":"allowedOperator","line":77,"loc":{"start":{"line":77,"column":8},"end":{"line":77,"column":39}}},"5":{"name":"isInt32Hint","line":86,"loc":{"start":{"line":86,"column":8},"end":{"line":86,"column":35}}},"6":{"name":"checkNodeForBitwiseOperator","line":96,"loc":{"start":{"line":96,"column":8},"end":{"line":96,"column":51}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":15,"column":2}},"2":{"start":{"line":21,"column":0},"end":{"line":109,"column":2}},"3":{"start":{"line":50,"column":8},"end":{"line":50,"column":49}},"4":{"start":{"line":51,"column":8},"end":{"line":51,"column":44}},"5":{"start":{"line":52,"column":8},"end":{"line":52,"column":53}},"6":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"7":{"start":{"line":60,"column":12},"end":{"line":60,"column":118}},"8":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"9":{"start":{"line":69,"column":12},"end":{"line":69,"column":67}},"10":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"11":{"start":{"line":78,"column":12},"end":{"line":78,"column":57}},"12":{"start":{"line":86,"column":8},"end":{"line":89,"column":9}},"13":{"start":{"line":87,"column":12},"end":{"line":88,"column":70}},"14":{"start":{"line":96,"column":8},"end":{"line":100,"column":9}},"15":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"16":{"start":{"line":98,"column":16},"end":{"line":98,"column":29}},"17":{"start":{"line":102,"column":8},"end":{"line":106,"column":10}}},"branchMap":{"1":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":24},"end":{"line":50,"column":42}},{"start":{"line":50,"column":46},"end":{"line":50,"column":48}}]},"2":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":24},"end":{"line":51,"column":37}},{"start":{"line":51,"column":41},"end":{"line":51,"column":43}}]},"3":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":19},"end":{"line":87,"column":28}},{"start":{"line":87,"column":32},"end":{"line":87,"column":53}},{"start":{"line":87,"column":57},"end":{"line":87,"column":67}},{"start":{"line":88,"column":14},"end":{"line":88,"column":43}},{"start":{"line":88,"column":47},"end":{"line":88,"column":69}}]},"4":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":97,"column":12}},{"start":{"line":97,"column":12},"end":{"line":97,"column":12}}]},"5":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":16},"end":{"line":97,"column":40}},{"start":{"line":97,"column":44},"end":{"line":97,"column":66}},{"start":{"line":97,"column":70},"end":{"line":97,"column":88}}]}},"code":["/**"," * @fileoverview Rule to flag bitwise identifiers"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//","// Set of bitwise operators.","//","const BITWISE_OPERATORS = [","    \"^\", \"|\", \"&\", \"<<\", \">>\", \">>>\",","    \"^=\", \"|=\", \"&=\", \"<<=\", \">>=\", \">>>=\",","    \"~\"","];","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow bitwise operators\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allow: {","                        type: \"array\",","                        items: {","                            enum: BITWISE_OPERATORS","                        },","                        uniqueItems: true","                    },","                    int32Hint: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0] || {};","        const allowed = options.allow || [];","        const int32Hint = options.int32Hint === true;","","        /**","         * Reports an unexpected use of a bitwise operator.","         * @param   {ASTNode} node Node which contains the bitwise operator.","         * @returns {void}","         */","        function report(node) {","            context.report({ node, message: \"Unexpected use of '{{operator}}'.\", data: { operator: node.operator } });","        }","","        /**","         * Checks if the given node has a bitwise operator.","         * @param   {ASTNode} node The node to check.","         * @returns {boolean} Whether or not the node has a bitwise operator.","         */","        function hasBitwiseOperator(node) {","            return BITWISE_OPERATORS.indexOf(node.operator) !== -1;","        }","","        /**","         * Checks if exceptions were provided, e.g. `{ allow: ['~', '|'] }`.","         * @param   {ASTNode} node The node to check.","         * @returns {boolean} Whether or not the node has a bitwise operator.","         */","        function allowedOperator(node) {","            return allowed.indexOf(node.operator) !== -1;","        }","","        /**","         * Checks if the given bitwise operator is used for integer typecasting, i.e. \"|0\"","         * @param   {ASTNode} node The node to check.","         * @returns {boolean} whether the node is used in integer typecasting.","         */","        function isInt32Hint(node) {","            return int32Hint && node.operator === \"|\" && node.right &&","              node.right.type === \"Literal\" && node.right.value === 0;","        }","","        /**","         * Report if the given node contains a bitwise operator.","         * @param   {ASTNode} node The node to check.","         * @returns {void}","         */","        function checkNodeForBitwiseOperator(node) {","            if (hasBitwiseOperator(node) && !allowedOperator(node) && !isInt32Hint(node)) {","                report(node);","            }","        }","","        return {","            AssignmentExpression: checkNodeForBitwiseOperator,","            BinaryExpression: checkNodeForBitwiseOperator,","            UnaryExpression: checkNodeForBitwiseOperator","        };","","    }","};",""],"l":{"11":1,"21":1,"50":0,"51":0,"52":0,"59":1,"60":0,"68":1,"69":0,"77":1,"78":0,"86":1,"87":0,"96":1,"97":0,"98":0,"102":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-caller.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-caller.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":28},"end":{"line":27,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":39,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":36,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":29,"column":54}},"4":{"start":{"line":31,"column":16},"end":{"line":33,"column":17}},"5":{"start":{"line":32,"column":20},"end":{"line":32,"column":121}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":16},"end":{"line":31,"column":16}},{"start":{"line":31,"column":16},"end":{"line":31,"column":16}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":20},"end":{"line":31,"column":46}},{"start":{"line":31,"column":50},"end":{"line":31,"column":64}},{"start":{"line":31,"column":68},"end":{"line":31,"column":80}},{"start":{"line":31,"column":84},"end":{"line":31,"column":117}}]}},"code":["/**"," * @fileoverview Rule to flag use of arguments.callee and arguments.caller."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of `arguments.caller` or `arguments.callee`\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            MemberExpression(node) {","                const objectName = node.object.name,","                    propertyName = node.property.name;","","                if (objectName === \"arguments\" && !node.computed && propertyName && propertyName.match(/^calle[er]$/)) {","                    context.report({ node, message: \"Avoid arguments.{{property}}.\", data: { property: propertyName } });","                }","","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"28":0,"31":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-case-declarations.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-case-declarations.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0,0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"isLexicalDeclaration","line":29,"loc":{"start":{"line":29,"column":8},"end":{"line":29,"column":44}}},"3":{"name":"(anonymous_3)","line":42,"loc":{"start":{"line":42,"column":22},"end":{"line":42,"column":29}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":57,"column":2}},"2":{"start":{"line":29,"column":8},"end":{"line":39,"column":9}},"3":{"start":{"line":30,"column":12},"end":{"line":38,"column":13}},"4":{"start":{"line":33,"column":20},"end":{"line":33,"column":32}},"5":{"start":{"line":35,"column":20},"end":{"line":35,"column":47}},"6":{"start":{"line":37,"column":20},"end":{"line":37,"column":33}},"7":{"start":{"line":41,"column":8},"end":{"line":54,"column":10}},"8":{"start":{"line":43,"column":16},"end":{"line":52,"column":17}},"9":{"start":{"line":44,"column":20},"end":{"line":44,"column":57}},"10":{"start":{"line":46,"column":20},"end":{"line":51,"column":21}},"11":{"start":{"line":47,"column":24},"end":{"line":50,"column":27}}},"branchMap":{"1":{"line":30,"type":"switch","locations":[{"start":{"line":31,"column":16},"end":{"line":31,"column":43}},{"start":{"line":32,"column":16},"end":{"line":33,"column":32}},{"start":{"line":34,"column":16},"end":{"line":35,"column":47}},{"start":{"line":36,"column":16},"end":{"line":37,"column":33}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":20},"end":{"line":46,"column":20}},{"start":{"line":46,"column":20},"end":{"line":46,"column":20}}]}},"code":["/**"," * @fileoverview Rule to flag use of an lexical declarations inside a case clause"," * @author Erik Arvidsson"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow lexical declarations in case clauses\",","            category: \"Best Practices\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Checks whether or not a node is a lexical declaration.","         * @param {ASTNode} node A direct child statement of a switch case.","         * @returns {boolean} Whether or not the node is a lexical declaration.","         */","        function isLexicalDeclaration(node) {","            switch (node.type) {","                case \"FunctionDeclaration\":","                case \"ClassDeclaration\":","                    return true;","                case \"VariableDeclaration\":","                    return node.kind !== \"var\";","                default:","                    return false;","            }","        }","","        return {","            SwitchCase(node) {","                for (let i = 0; i < node.consequent.length; i++) {","                    const statement = node.consequent[i];","","                    if (isLexicalDeclaration(statement)) {","                        context.report({","                            node,","                            message: \"Unexpected lexical declaration in case block.\"","                        });","                    }","                }","            }","        };","","    }","};",""],"l":{"11":1,"29":1,"30":0,"33":0,"35":0,"37":0,"41":0,"43":0,"44":0,"46":0,"47":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-catch-shadow.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-catch-shadow.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":20}}},"2":{"name":"paramIsShadowing","line":41,"loc":{"start":{"line":41,"column":8},"end":{"line":41,"column":47}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":23},"end":{"line":51,"column":30}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":67,"column":2}},"3":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"4":{"start":{"line":42,"column":12},"end":{"line":42,"column":68}},"5":{"start":{"line":49,"column":8},"end":{"line":64,"column":10}},"6":{"start":{"line":52,"column":16},"end":{"line":52,"column":47}},"7":{"start":{"line":56,"column":16},"end":{"line":58,"column":17}},"8":{"start":{"line":57,"column":20},"end":{"line":57,"column":40}},"9":{"start":{"line":60,"column":16},"end":{"line":62,"column":17}},"10":{"start":{"line":61,"column":20},"end":{"line":61,"column":150}}},"branchMap":{"1":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":16},"end":{"line":56,"column":16}},{"start":{"line":56,"column":16},"end":{"line":56,"column":16}}]},"2":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":16},"end":{"line":60,"column":16}},{"start":{"line":60,"column":16},"end":{"line":60,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag variable leak in CatchClauses in IE 8 and earlier"," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `catch` clause parameters from shadowing variables in the outer scope\",","            category: \"Variables\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Check if the parameters are been shadowed","         * @param {Object} scope current scope","         * @param {string} name parameter name","         * @returns {boolean} True is its been shadowed","         */","        function paramIsShadowing(scope, name) {","            return astUtils.getVariableByName(scope, name) !== null;","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","","            CatchClause(node) {","                let scope = context.getScope();","","                // When blockBindings is enabled, CatchClause creates its own scope","                // so start from one upper scope to exclude the current node","                if (scope.block === node) {","                    scope = scope.upper;","                }","","                if (paramIsShadowing(scope, node.param.name)) {","                    context.report({ node, message: \"Value of '{{name}}' may be overwritten in IE 8 and earlier.\", data: { name: node.param.name } });","                }","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"41":1,"42":0,"49":0,"52":0,"56":0,"57":0,"60":0,"61":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-class-assign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-class-assign.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"checkVariable","line":32,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":41}}},"3":{"name":"checkForClass","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":37}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":54,"column":2}},"3":{"start":{"line":32,"column":8},"end":{"line":37,"column":9}},"4":{"start":{"line":33,"column":12},"end":{"line":36,"column":15}},"5":{"start":{"line":34,"column":16},"end":{"line":34,"column":141}},"6":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"7":{"start":{"line":45,"column":12},"end":{"line":45,"column":70}},"8":{"start":{"line":48,"column":8},"end":{"line":51,"column":10}}},"branchMap":{},"code":["/**"," * @fileoverview A rule to disallow modifying variables of class declarations"," * @author Toru Nagashima"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow reassigning class members\",","            category: \"ECMAScript 6\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Finds and reports references that are non initializer and writable.","         * @param {Variable} variable - A variable to check.","         * @returns {void}","         */","        function checkVariable(variable) {","            astUtils.getModifyingReferences(variable.references).forEach(reference => {","                context.report({ node: reference.identifier, message: \"'{{name}}' is a class.\", data: { name: reference.identifier.name } });","","            });","        }","","        /**","         * Finds and reports references that are non initializer and writable.","         * @param {ASTNode} node - A ClassDeclaration/ClassExpression node to check.","         * @returns {void}","         */","        function checkForClass(node) {","            context.getDeclaredVariables(node).forEach(checkVariable);","        }","","        return {","            ClassDeclaration: checkForClass,","            ClassExpression: checkForClass","        };","","    }","};",""],"l":{"8":1,"14":1,"32":1,"33":0,"34":0,"44":1,"45":0,"48":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-compare-neg-zero.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-compare-neg-zero.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"isNegZero","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":33}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":28},"end":{"line":40,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":53,"column":2}},"2":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"3":{"start":{"line":35,"column":12},"end":{"line":35,"column":141}},"4":{"start":{"line":37,"column":8},"end":{"line":37,"column":93}},"5":{"start":{"line":39,"column":8},"end":{"line":51,"column":10}},"6":{"start":{"line":41,"column":16},"end":{"line":49,"column":17}},"7":{"start":{"line":42,"column":20},"end":{"line":48,"column":21}},"8":{"start":{"line":43,"column":24},"end":{"line":47,"column":27}}},"branchMap":{"1":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":19},"end":{"line":35,"column":50}},{"start":{"line":35,"column":54},"end":{"line":35,"column":75}},{"start":{"line":35,"column":79},"end":{"line":35,"column":111}},{"start":{"line":35,"column":115},"end":{"line":35,"column":140}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":16}},{"start":{"line":41,"column":16},"end":{"line":41,"column":16}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":20},"end":{"line":42,"column":20}},{"start":{"line":42,"column":20},"end":{"line":42,"column":20}}]},"4":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":24},"end":{"line":42,"column":44}},{"start":{"line":42,"column":48},"end":{"line":42,"column":69}}]}},"code":["/**"," * @fileoverview The rule should warn against code that tries to compare against -0."," * @author Aladdin-ADD <hh_2013@foxmail.com>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow comparing against -0\",","            category: \"Possible Errors\",","            recommended: false","        },","        fixable: null,","        schema: []","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Checks a given node is -0","         *","         * @param {ASTNode} node - A node to check.","         * @returns {boolean} `true` if the node is -0.","         */","        function isNegZero(node) {","            return node.type === \"UnaryExpression\" && node.operator === \"-\" && node.argument.type === \"Literal\" && node.argument.value === 0;","        }","        const OPERATORS_TO_CHECK = new Set([\">\", \">=\", \"<\", \"<=\", \"==\", \"===\", \"!=\", \"!==\"]);","","        return {","            BinaryExpression(node) {","                if (OPERATORS_TO_CHECK.has(node.operator)) {","                    if (isNegZero(node.left) || isNegZero(node.right)) {","                        context.report({","                            node,","                            message: \"Do not use the '{{operator}}' operator to compare against -0.\",","                            data: { operator: node.operator }","                        });","                    }","                }","            }","        };","    }","};",""],"l":{"11":1,"34":1,"35":0,"37":0,"39":0,"41":0,"42":0,"43":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-cond-assign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-cond-assign.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":1,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":20}}},"2":{"name":"isConditionalTestExpression","line":46,"loc":{"start":{"line":46,"column":8},"end":{"line":46,"column":51}}},"3":{"name":"findConditionalAncestor","line":57,"loc":{"start":{"line":57,"column":8},"end":{"line":57,"column":47}}},"4":{"name":"isParenthesisedTwice","line":74,"loc":{"start":{"line":74,"column":8},"end":{"line":74,"column":44}}},"5":{"name":"testForAssign","line":88,"loc":{"start":{"line":88,"column":8},"end":{"line":88,"column":37}}},"6":{"name":"testForConditionalAncestor","line":111,"loc":{"start":{"line":111,"column":8},"end":{"line":111,"column":50}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":9,"column":0},"end":{"line":14,"column":2}},"3":{"start":{"line":20,"column":0},"end":{"line":135,"column":2}},"4":{"start":{"line":37,"column":8},"end":{"line":37,"column":71}},"5":{"start":{"line":39,"column":8},"end":{"line":39,"column":51}},"6":{"start":{"line":46,"column":8},"end":{"line":50,"column":9}},"7":{"start":{"line":47,"column":12},"end":{"line":49,"column":42}},"8":{"start":{"line":57,"column":8},"end":{"line":67,"column":9}},"9":{"start":{"line":58,"column":12},"end":{"line":58,"column":39}},"10":{"start":{"line":60,"column":12},"end":{"line":64,"column":106}},"11":{"start":{"line":61,"column":16},"end":{"line":63,"column":17}},"12":{"start":{"line":62,"column":20},"end":{"line":62,"column":50}},"13":{"start":{"line":66,"column":12},"end":{"line":66,"column":24}},"14":{"start":{"line":74,"column":8},"end":{"line":81,"column":9}},"15":{"start":{"line":75,"column":12},"end":{"line":76,"column":62}},"16":{"start":{"line":78,"column":12},"end":{"line":80,"column":95}},"17":{"start":{"line":88,"column":8},"end":{"line":104,"column":9}},"18":{"start":{"line":89,"column":12},"end":{"line":103,"column":13}},"19":{"start":{"line":98,"column":16},"end":{"line":102,"column":19}},"20":{"start":{"line":111,"column":8},"end":{"line":119,"column":9}},"21":{"start":{"line":112,"column":12},"end":{"line":112,"column":59}},"22":{"start":{"line":114,"column":12},"end":{"line":118,"column":13}},"23":{"start":{"line":115,"column":16},"end":{"line":117,"column":21}},"24":{"start":{"line":121,"column":8},"end":{"line":125,"column":9}},"25":{"start":{"line":122,"column":12},"end":{"line":124,"column":14}},"26":{"start":{"line":127,"column":8},"end":{"line":132,"column":10}}},"branchMap":{"1":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":32},"end":{"line":37,"column":50}},{"start":{"line":37,"column":54},"end":{"line":37,"column":69}}]},"2":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":19},"end":{"line":47,"column":30}},{"start":{"line":48,"column":16},"end":{"line":48,"column":32}},{"start":{"line":49,"column":16},"end":{"line":49,"column":41}}]},"3":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":16},"end":{"line":61,"column":16}},{"start":{"line":61,"column":16},"end":{"line":61,"column":16}}]},"4":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":22},"end":{"line":64,"column":62}},{"start":{"line":64,"column":67},"end":{"line":64,"column":104}}]},"5":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":19},"end":{"line":78,"column":61}},{"start":{"line":79,"column":16},"end":{"line":79,"column":59}},{"start":{"line":79,"column":63},"end":{"line":79,"column":102}},{"start":{"line":80,"column":16},"end":{"line":80,"column":55}},{"start":{"line":80,"column":59},"end":{"line":80,"column":94}}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":89,"column":12}},{"start":{"line":89,"column":12},"end":{"line":89,"column":12}}]},"7":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":16},"end":{"line":89,"column":25}},{"start":{"line":90,"column":17},"end":{"line":90,"column":58}},{"start":{"line":91,"column":17},"end":{"line":93,"column":54}}]},"8":{"line":91,"type":"cond-expr","locations":[{"start":{"line":92,"column":22},"end":{"line":92,"column":70}},{"start":{"line":93,"column":22},"end":{"line":93,"column":54}}]},"9":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":12},"end":{"line":114,"column":12}},{"start":{"line":114,"column":12},"end":{"line":114,"column":12}}]},"10":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":26},"end":{"line":116,"column":58}},{"start":{"line":116,"column":62},"end":{"line":116,"column":75}}]},"11":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":8}},{"start":{"line":121,"column":8},"end":{"line":121,"column":8}}]}},"code":["/**"," * @fileoverview Rule to flag assignment in a conditional statement's test expression"," * @author Stephen Murray <spmurrayzzz>"," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","const NODE_DESCRIPTIONS = {","    DoWhileStatement: \"a 'do...while' statement\",","    ForStatement: \"a 'for' statement\",","    IfStatement: \"an 'if' statement\",","    WhileStatement: \"a 'while' statement\"","};","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow assignment operators in conditional expressions\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [","            {","                enum: [\"except-parens\", \"always\"]","            }","        ]","    },","","    create(context) {","","        const prohibitAssign = (context.options[0] || \"except-parens\");","","        const sourceCode = context.getSourceCode();","","        /**","         * Check whether an AST node is the test expression for a conditional statement.","         * @param {!Object} node The node to test.","         * @returns {boolean} `true` if the node is the text expression for a conditional statement; otherwise, `false`.","         */","        function isConditionalTestExpression(node) {","            return node.parent &&","                node.parent.test &&","                node === node.parent.test;","        }","","        /**","         * Given an AST node, perform a bottom-up search for the first ancestor that represents a conditional statement.","         * @param {!Object} node The node to use at the start of the search.","         * @returns {?Object} The closest ancestor node that represents a conditional statement.","         */","        function findConditionalAncestor(node) {","            let currentAncestor = node;","","            do {","                if (isConditionalTestExpression(currentAncestor)) {","                    return currentAncestor.parent;","                }","            } while ((currentAncestor = currentAncestor.parent) && !astUtils.isFunction(currentAncestor));","","            return null;","        }","","        /**","         * Check whether the code represented by an AST node is enclosed in two sets of parentheses.","         * @param {!Object} node The node to test.","         * @returns {boolean} `true` if the code is enclosed in two sets of parentheses; otherwise, `false`.","         */","        function isParenthesisedTwice(node) {","            const previousToken = sourceCode.getTokenBefore(node, 1),","                nextToken = sourceCode.getTokenAfter(node, 1);","","            return astUtils.isParenthesised(sourceCode, node) &&","                astUtils.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] &&","                astUtils.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];","        }","","        /**","         * Check a conditional statement's test expression for top-level assignments that are not enclosed in parentheses.","         * @param {!Object} node The node for the conditional statement.","         * @returns {void}","         */","        function testForAssign(node) {","            if (node.test &&","                (node.test.type === \"AssignmentExpression\") &&","                (node.type === \"ForStatement\"","                    ? !astUtils.isParenthesised(sourceCode, node.test)","                    : !isParenthesisedTwice(node.test)","                )","            ) {","","                // must match JSHint's error message","                context.report({","                    node,","                    loc: node.test.loc.start,","                    message: \"Expected a conditional expression and instead saw an assignment.\"","                });","            }","        }","","        /**","         * Check whether an assignment expression is descended from a conditional statement's test expression.","         * @param {!Object} node The node for the assignment expression.","         * @returns {void}","         */","        function testForConditionalAncestor(node) {","            const ancestor = findConditionalAncestor(node);","","            if (ancestor) {","                context.report({ node: ancestor, message: \"Unexpected assignment within {{type}}.\", data: {","                    type: NODE_DESCRIPTIONS[ancestor.type] || ancestor.type","                } });","            }","        }","","        if (prohibitAssign === \"always\") {","            return {","                AssignmentExpression: testForConditionalAncestor","            };","        }","","        return {","            DoWhileStatement: testForAssign,","            ForStatement: testForAssign,","            IfStatement: testForAssign,","            WhileStatement: testForAssign","        };","","    }","};",""],"l":{"7":1,"9":1,"20":1,"37":0,"39":0,"46":1,"47":0,"57":1,"58":0,"60":0,"61":0,"62":0,"66":0,"74":1,"75":0,"78":0,"88":1,"89":0,"98":0,"111":1,"112":0,"114":0,"115":0,"121":0,"122":0,"127":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-confusing-arrow.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-confusing-arrow.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"isConditional","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":29}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":10},"end":{"line":45,"column":20}}},"3":{"name":"checkArrowFunc","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":38}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"2":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":21,"column":4},"end":{"line":21,"column":57}},"4":{"start":{"line":28,"column":0},"end":{"line":66,"column":2}},"5":{"start":{"line":46,"column":8},"end":{"line":46,"column":48}},"6":{"start":{"line":47,"column":8},"end":{"line":47,"column":51}},"7":{"start":{"line":54,"column":8},"end":{"line":60,"column":9}},"8":{"start":{"line":55,"column":12},"end":{"line":55,"column":35}},"9":{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},"10":{"start":{"line":58,"column":16},"end":{"line":58,"column":116}},"11":{"start":{"line":62,"column":8},"end":{"line":64,"column":10}}},"branchMap":{"1":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":11},"end":{"line":21,"column":15}},{"start":{"line":21,"column":19},"end":{"line":21,"column":56}}]},"2":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":23},"end":{"line":46,"column":41}},{"start":{"line":46,"column":45},"end":{"line":46,"column":47}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":12}},{"start":{"line":57,"column":12},"end":{"line":57,"column":12}}]},"4":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":35}},{"start":{"line":57,"column":39},"end":{"line":57,"column":106}}]},"5":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":41},"end":{"line":57,"column":59}},{"start":{"line":57,"column":63},"end":{"line":57,"column":105}}]}},"code":["/**"," * @fileoverview A rule to warn against using arrow functions when they could be"," * confused with comparisions"," * @author Jxck <https://github.com/Jxck>"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils.js\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a node is a conditional expression."," * @param {ASTNode} node - node to test"," * @returns {boolean} `true` if the node is a conditional expression."," */","function isConditional(node) {","    return node && node.type === \"ConditionalExpression\";","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow arrow functions where they could be confused with comparisons\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [{","            type: \"object\",","            properties: {","                allowParens: { type: \"boolean\" }","            },","            additionalProperties: false","        }]","    },","","    create(context) {","        const config = context.options[0] || {};","        const sourceCode = context.getSourceCode();","","        /**","         * Reports if an arrow function contains an ambiguous conditional.","         * @param {ASTNode} node - A node to check and report.","         * @returns {void}","         */","        function checkArrowFunc(node) {","            const body = node.body;","","            if (isConditional(body) && !(config.allowParens && astUtils.isParenthesised(sourceCode, body))) {","                context.report({ node, message: \"Arrow function used ambiguously with a conditional expression.\" });","            }","        }","","        return {","            ArrowFunctionExpression: checkArrowFunc","        };","    }","};",""],"l":{"9":1,"20":1,"21":0,"28":1,"46":0,"47":0,"54":1,"55":0,"57":0,"58":0,"62":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-console.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-console.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":44,"loc":{"start":{"line":44,"column":10},"end":{"line":44,"column":20}}},"2":{"name":"isConsole","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":38}}},"3":{"name":"isAllowed","line":67,"loc":{"start":{"line":67,"column":8},"end":{"line":67,"column":33}}},"4":{"name":"isMemberAccessExceptAllowed","line":81,"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":56}}},"5":{"name":"report","line":98,"loc":{"start":{"line":98,"column":8},"end":{"line":98,"column":35}}},"6":{"name":"(anonymous_6)","line":109,"loc":{"start":{"line":109,"column":26},"end":{"line":109,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":130,"column":2}},"3":{"start":{"line":45,"column":8},"end":{"line":45,"column":49}},"4":{"start":{"line":46,"column":8},"end":{"line":46,"column":44}},"5":{"start":{"line":54,"column":8},"end":{"line":58,"column":9}},"6":{"start":{"line":55,"column":12},"end":{"line":55,"column":44}},"7":{"start":{"line":57,"column":12},"end":{"line":57,"column":47}},"8":{"start":{"line":67,"column":8},"end":{"line":71,"column":9}},"9":{"start":{"line":68,"column":12},"end":{"line":68,"column":70}},"10":{"start":{"line":70,"column":12},"end":{"line":70,"column":72}},"11":{"start":{"line":81,"column":8},"end":{"line":90,"column":9}},"12":{"start":{"line":82,"column":12},"end":{"line":82,"column":46}},"13":{"start":{"line":83,"column":12},"end":{"line":83,"column":39}},"14":{"start":{"line":85,"column":12},"end":{"line":89,"column":14}},"15":{"start":{"line":98,"column":8},"end":{"line":106,"column":9}},"16":{"start":{"line":99,"column":12},"end":{"line":99,"column":53}},"17":{"start":{"line":101,"column":12},"end":{"line":105,"column":15}},"18":{"start":{"line":108,"column":8},"end":{"line":128,"column":10}},"19":{"start":{"line":110,"column":16},"end":{"line":110,"column":49}},"20":{"start":{"line":111,"column":16},"end":{"line":111,"column":80}},"21":{"start":{"line":112,"column":16},"end":{"line":112,"column":74}},"22":{"start":{"line":118,"column":16},"end":{"line":120,"column":54}},"23":{"start":{"line":122,"column":16},"end":{"line":126,"column":17}},"24":{"start":{"line":123,"column":20},"end":{"line":125,"column":41}}},"branchMap":{"1":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":24},"end":{"line":45,"column":42}},{"start":{"line":45,"column":46},"end":{"line":45,"column":48}}]},"2":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":24},"end":{"line":46,"column":37}},{"start":{"line":46,"column":41},"end":{"line":46,"column":43}}]},"3":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":19},"end":{"line":57,"column":21}},{"start":{"line":57,"column":25},"end":{"line":57,"column":46}}]},"4":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":19},"end":{"line":70,"column":31}},{"start":{"line":70,"column":35},"end":{"line":70,"column":71}}]},"5":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":16},"end":{"line":86,"column":50}},{"start":{"line":87,"column":16},"end":{"line":87,"column":38}},{"start":{"line":88,"column":16},"end":{"line":88,"column":34}}]},"6":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":33},"end":{"line":112,"column":43}},{"start":{"line":112,"column":47},"end":{"line":112,"column":73}}]},"7":{"line":118,"type":"cond-expr","locations":[{"start":{"line":119,"column":22},"end":{"line":119,"column":43}},{"start":{"line":120,"column":22},"end":{"line":120,"column":53}}]},"8":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":16},"end":{"line":122,"column":16}},{"start":{"line":122,"column":16},"end":{"line":122,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag use of console object"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of `console`\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allow: {","                        type: \"array\",","                        items: {","                            type: \"string\"","                        },","                        minItems: 1,","                        uniqueItems: true","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0] || {};","        const allowed = options.allow || [];","","        /**","         * Checks whether the given reference is 'console' or not.","         *","         * @param {escope.Reference} reference - The reference to check.","         * @returns {boolean} `true` if the reference is 'console'.","         */","        function isConsole(reference) {","            const id = reference.identifier;","","            return id && id.name === \"console\";","        }","","        /**","         * Checks whether the property name of the given MemberExpression node","         * is allowed by options or not.","         *","         * @param {ASTNode} node - The MemberExpression node to check.","         * @returns {boolean} `true` if the property name of the node is allowed.","         */","        function isAllowed(node) {","            const propertyName = astUtils.getStaticPropertyName(node);","","            return propertyName && allowed.indexOf(propertyName) !== -1;","        }","","        /**","         * Checks whether the given reference is a member access which is not","         * allowed by options or not.","         *","         * @param {escope.Reference} reference - The reference to check.","         * @returns {boolean} `true` if the reference is a member access which","         *      is not allowed by options.","         */","        function isMemberAccessExceptAllowed(reference) {","            const node = reference.identifier;","            const parent = node.parent;","","            return (","                parent.type === \"MemberExpression\" &&","                parent.object === node &&","                !isAllowed(parent)","            );","        }","","        /**","         * Reports the given reference as a violation.","         *","         * @param {escope.Reference} reference - The reference to report.","         * @returns {void}","         */","        function report(reference) {","            const node = reference.identifier.parent;","","            context.report({","                node,","                loc: node.loc,","                message: \"Unexpected console statement.\"","            });","        }","","        return {","            \"Program:exit\"() {","                const scope = context.getScope();","                const consoleVar = astUtils.getVariableByName(scope, \"console\");","                const shadowed = consoleVar && consoleVar.defs.length > 0;","","                /* 'scope.through' includes all references to undefined","                 * variables. If the variable 'console' is not defined, it uses","                 * 'scope.through'.","                 */","                const references = consoleVar","                    ? consoleVar.references","                    : scope.through.filter(isConsole);","","                if (!shadowed) {","                    references","                        .filter(isMemberAccessExceptAllowed)","                        .forEach(report);","                }","            }","        };","    }","};",""],"l":{"12":1,"18":1,"45":0,"46":0,"54":1,"55":0,"57":0,"67":1,"68":0,"70":0,"81":1,"82":0,"83":0,"85":0,"98":1,"99":0,"101":0,"108":0,"110":0,"111":0,"112":0,"118":0,"122":0,"123":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-const-assign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-const-assign.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"checkVariable","line":32,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":41}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":31},"end":{"line":39,"column":38}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":47,"column":2}},"3":{"start":{"line":32,"column":8},"end":{"line":36,"column":9}},"4":{"start":{"line":33,"column":12},"end":{"line":35,"column":15}},"5":{"start":{"line":34,"column":16},"end":{"line":34,"column":142}},"6":{"start":{"line":38,"column":8},"end":{"line":44,"column":10}},"7":{"start":{"line":40,"column":16},"end":{"line":42,"column":17}},"8":{"start":{"line":41,"column":20},"end":{"line":41,"column":78}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":16},"end":{"line":40,"column":16}},{"start":{"line":40,"column":16},"end":{"line":40,"column":16}}]}},"code":["/**"," * @fileoverview A rule to disallow modifying variables that are declared using `const`"," * @author Toru Nagashima"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow reassigning `const` variables\",","            category: \"ECMAScript 6\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Finds and reports references that are non initializer and writable.","         * @param {Variable} variable - A variable to check.","         * @returns {void}","         */","        function checkVariable(variable) {","            astUtils.getModifyingReferences(variable.references).forEach(reference => {","                context.report({ node: reference.identifier, message: \"'{{name}}' is constant.\", data: { name: reference.identifier.name } });","            });","        }","","        return {","            VariableDeclaration(node) {","                if (node.kind === \"const\") {","                    context.getDeclaredVariables(node).forEach(checkVariable);","                }","            }","        };","","    }","};",""],"l":{"8":1,"14":1,"32":1,"33":0,"34":0,"38":0,"40":0,"41":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-constant-condition.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-constant-condition.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0,0,0,0,0],"7":[0,0],"8":[0,0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":34,"loc":{"start":{"line":34,"column":10},"end":{"line":34,"column":20}}},"2":{"name":"isLogicalIdentity","line":49,"loc":{"start":{"line":49,"column":8},"end":{"line":49,"column":51}}},"3":{"name":"isConstant","line":75,"loc":{"start":{"line":75,"column":8},"end":{"line":75,"column":53}}},"4":{"name":"checkConstantCondition","line":123,"loc":{"start":{"line":123,"column":8},"end":{"line":123,"column":46}}},"5":{"name":"checkLoop","line":135,"loc":{"start":{"line":135,"column":8},"end":{"line":135,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":154,"column":2}},"2":{"start":{"line":35,"column":8},"end":{"line":36,"column":54}},"3":{"start":{"line":49,"column":8},"end":{"line":65,"column":9}},"4":{"start":{"line":50,"column":12},"end":{"line":63,"column":13}},"5":{"start":{"line":52,"column":20},"end":{"line":53,"column":71}},"6":{"start":{"line":56,"column":20},"end":{"line":56,"column":75}},"7":{"start":{"line":59,"column":20},"end":{"line":60,"column":74}},"8":{"start":{"line":64,"column":12},"end":{"line":64,"column":25}},"9":{"start":{"line":75,"column":8},"end":{"line":115,"column":9}},"10":{"start":{"line":76,"column":12},"end":{"line":113,"column":13}},"11":{"start":{"line":82,"column":20},"end":{"line":82,"column":32}},"12":{"start":{"line":85,"column":20},"end":{"line":87,"column":21}},"13":{"start":{"line":86,"column":24},"end":{"line":86,"column":36}},"14":{"start":{"line":89,"column":20},"end":{"line":90,"column":56}},"15":{"start":{"line":93,"column":20},"end":{"line":95,"column":51}},"16":{"start":{"line":98,"column":20},"end":{"line":98,"column":84}},"17":{"start":{"line":99,"column":20},"end":{"line":99,"column":86}},"18":{"start":{"line":100,"column":20},"end":{"line":100,"column":111}},"19":{"start":{"line":101,"column":20},"end":{"line":101,"column":114}},"20":{"start":{"line":103,"column":20},"end":{"line":103,"column":108}},"21":{"start":{"line":107,"column":20},"end":{"line":107,"column":96}},"22":{"start":{"line":110,"column":20},"end":{"line":110,"column":104}},"23":{"start":{"line":114,"column":12},"end":{"line":114,"column":25}},"24":{"start":{"line":123,"column":8},"end":{"line":127,"column":9}},"25":{"start":{"line":124,"column":12},"end":{"line":126,"column":13}},"26":{"start":{"line":125,"column":16},"end":{"line":125,"column":84}},"27":{"start":{"line":135,"column":8},"end":{"line":139,"column":9}},"28":{"start":{"line":136,"column":12},"end":{"line":138,"column":13}},"29":{"start":{"line":137,"column":16},"end":{"line":137,"column":45}},"30":{"start":{"line":145,"column":8},"end":{"line":151,"column":10}}},"branchMap":{"1":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":24},"end":{"line":35,"column":42}},{"start":{"line":35,"column":46},"end":{"line":35,"column":48}}]},"2":{"line":50,"type":"switch","locations":[{"start":{"line":51,"column":16},"end":{"line":53,"column":71}},{"start":{"line":55,"column":16},"end":{"line":56,"column":75}},{"start":{"line":58,"column":16},"end":{"line":60,"column":74}}]},"3":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":28},"end":{"line":52,"column":45}},{"start":{"line":52,"column":49},"end":{"line":52,"column":68}},{"start":{"line":53,"column":28},"end":{"line":53,"column":45}},{"start":{"line":53,"column":49},"end":{"line":53,"column":69}}]},"4":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":28},"end":{"line":56,"column":45}},{"start":{"line":56,"column":49},"end":{"line":56,"column":73}}]},"5":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":27},"end":{"line":59,"column":70}},{"start":{"line":60,"column":29},"end":{"line":60,"column":73}}]},"6":{"line":76,"type":"switch","locations":[{"start":{"line":77,"column":16},"end":{"line":77,"column":31}},{"start":{"line":78,"column":16},"end":{"line":78,"column":47}},{"start":{"line":79,"column":16},"end":{"line":79,"column":42}},{"start":{"line":80,"column":16},"end":{"line":80,"column":40}},{"start":{"line":81,"column":16},"end":{"line":82,"column":32}},{"start":{"line":84,"column":16},"end":{"line":90,"column":56}},{"start":{"line":92,"column":16},"end":{"line":95,"column":51}},{"start":{"line":97,"column":16},"end":{"line":104,"column":17}},{"start":{"line":106,"column":16},"end":{"line":107,"column":96}},{"start":{"line":109,"column":16},"end":{"line":110,"column":104}}]},"7":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":20},"end":{"line":85,"column":20}},{"start":{"line":85,"column":20},"end":{"line":85,"column":20}}]},"8":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":28},"end":{"line":89,"column":54}},{"start":{"line":89,"column":58},"end":{"line":89,"column":75}},{"start":{"line":90,"column":24},"end":{"line":90,"column":55}}]},"9":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":27},"end":{"line":93,"column":55}},{"start":{"line":94,"column":28},"end":{"line":94,"column":57}},{"start":{"line":95,"column":28},"end":{"line":95,"column":50}}]},"10":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":48},"end":{"line":100,"column":62}},{"start":{"line":100,"column":66},"end":{"line":100,"column":109}}]},"11":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":49},"end":{"line":101,"column":64}},{"start":{"line":101,"column":68},"end":{"line":101,"column":112}}]},"12":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":28},"end":{"line":103,"column":42}},{"start":{"line":103,"column":46},"end":{"line":103,"column":61}},{"start":{"line":103,"column":66},"end":{"line":103,"column":84}},{"start":{"line":103,"column":88},"end":{"line":103,"column":107}}]},"13":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":28},"end":{"line":107,"column":49}},{"start":{"line":107,"column":54},"end":{"line":107,"column":95}}]},"14":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":12},"end":{"line":124,"column":12}},{"start":{"line":124,"column":12},"end":{"line":124,"column":12}}]},"15":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":16},"end":{"line":124,"column":25}},{"start":{"line":124,"column":29},"end":{"line":124,"column":56}}]},"16":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":12},"end":{"line":136,"column":12}},{"start":{"line":136,"column":12},"end":{"line":136,"column":12}}]}},"code":["/**"," * @fileoverview Rule to flag use constant conditions"," * @author Christian Schulz <http://rndm.de>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow constant expressions in conditions\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    checkLoops: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","","        ]","    },","","    create(context) {","        const options = context.options[0] || {},","            checkLoops = options.checkLoops !== false;","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","","        /**","         * Checks if a branch node of LogicalExpression short circuits the whole condition","         * @param {ASTNode} node The branch of main condition which needs to be checked","         * @param {string} operator The operator of the main LogicalExpression.","         * @returns {boolean} true when condition short circuits whole condition","         */","        function isLogicalIdentity(node, operator) {","            switch (node.type) {","                case \"Literal\":","                    return (operator === \"||\" && node.value === true) ||","                           (operator === \"&&\" && node.value === false);","","                case \"UnaryExpression\":","                    return (operator === \"&&\" && node.operator === \"void\");","","                case \"LogicalExpression\":","                    return isLogicalIdentity(node.left, node.operator) ||","                             isLogicalIdentity(node.right, node.operator);","","                // no default","            }","            return false;","        }","","        /**","         * Checks if a node has a constant truthiness value.","         * @param {ASTNode} node The AST node to check.","         * @param {boolean} inBooleanPosition `false` if checking branch of a condition.","         *  `true` in all other cases","         * @returns {Bool} true when node's truthiness is constant","         * @private","         */","        function isConstant(node, inBooleanPosition) {","            switch (node.type) {","                case \"Literal\":","                case \"ArrowFunctionExpression\":","                case \"FunctionExpression\":","                case \"ObjectExpression\":","                case \"ArrayExpression\":","                    return true;","","                case \"UnaryExpression\":","                    if (node.operator === \"void\") {","                        return true;","                    }","","                    return (node.operator === \"typeof\" && inBooleanPosition) ||","                        isConstant(node.argument, true);","","                case \"BinaryExpression\":","                    return isConstant(node.left, false) &&","                            isConstant(node.right, false) &&","                            node.operator !== \"in\";","","                case \"LogicalExpression\": {","                    const isLeftConstant = isConstant(node.left, inBooleanPosition);","                    const isRightConstant = isConstant(node.right, inBooleanPosition);","                    const isLeftShortCircuit = (isLeftConstant && isLogicalIdentity(node.left, node.operator));","                    const isRightShortCircuit = (isRightConstant && isLogicalIdentity(node.right, node.operator));","","                    return (isLeftConstant && isRightConstant) || isLeftShortCircuit || isRightShortCircuit;","                }","","                case \"AssignmentExpression\":","                    return (node.operator === \"=\") && isConstant(node.right, inBooleanPosition);","","                case \"SequenceExpression\":","                    return isConstant(node.expressions[node.expressions.length - 1], inBooleanPosition);","","                // no default","            }","            return false;","        }","","        /**","         * Reports when the given node contains a constant condition.","         * @param {ASTNode} node The AST node to check.","         * @returns {void}","         * @private","         */","        function checkConstantCondition(node) {","            if (node.test && isConstant(node.test, true)) {","                context.report({ node, message: \"Unexpected constant condition.\" });","            }","        }","","        /**","         * Checks node when checkLoops option is enabled","         * @param {ASTNode} node The AST node to check.","         * @returns {void}","         * @private","         */","        function checkLoop(node) {","            if (checkLoops) {","                checkConstantCondition(node);","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            ConditionalExpression: checkConstantCondition,","            IfStatement: checkConstantCondition,","            WhileStatement: checkLoop,","            DoWhileStatement: checkLoop,","            ForStatement: checkLoop","        };","","    }","};",""],"l":{"12":1,"35":0,"49":1,"50":0,"52":0,"56":0,"59":0,"64":0,"75":1,"76":0,"82":0,"85":0,"86":0,"89":0,"93":0,"98":0,"99":0,"100":0,"101":0,"103":0,"107":0,"110":0,"114":0,"123":1,"124":0,"125":0,"135":1,"136":0,"137":0,"145":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-continue.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-continue.js","s":{"1":1,"2":0,"3":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":29},"end":{"line":26,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":32,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":29,"column":10}},"3":{"start":{"line":27,"column":16},"end":{"line":27,"column":91}}},"branchMap":{},"code":["/**"," * @fileoverview Rule to flag use of continue statement"," * @author Borislav Zhivkov"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `continue` statements\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","            ContinueStatement(node) {","                context.report({ node, message: \"Unexpected use of continue statement.\" });","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"27":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-control-regex.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-control-regex.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"getRegExp","line":31,"loc":{"start":{"line":31,"column":8},"end":{"line":31,"column":33}}},"3":{"name":"getControlCharacters","line":67,"loc":{"start":{"line":67,"column":8},"end":{"line":67,"column":48}}},"4":{"name":"(anonymous_4)","line":104,"loc":{"start":{"line":104,"column":19},"end":{"line":104,"column":26}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":126,"column":2}},"2":{"start":{"line":31,"column":8},"end":{"line":52,"column":9}},"3":{"start":{"line":32,"column":12},"end":{"line":49,"column":13}},"4":{"start":{"line":33,"column":16},"end":{"line":33,"column":34}},"5":{"start":{"line":34,"column":19},"end":{"line":49,"column":13}},"6":{"start":{"line":36,"column":16},"end":{"line":36,"column":60}},"7":{"start":{"line":38,"column":16},"end":{"line":48,"column":17}},"8":{"start":{"line":43,"column":20},"end":{"line":47,"column":21}},"9":{"start":{"line":44,"column":24},"end":{"line":44,"column":54}},"10":{"start":{"line":46,"column":24},"end":{"line":46,"column":36}},"11":{"start":{"line":51,"column":12},"end":{"line":51,"column":24}},"12":{"start":{"line":55,"column":8},"end":{"line":55,"column":43}},"13":{"start":{"line":56,"column":8},"end":{"line":56,"column":42}},"14":{"start":{"line":57,"column":8},"end":{"line":57,"column":48}},"15":{"start":{"line":58,"column":8},"end":{"line":58,"column":54}},"16":{"start":{"line":59,"column":8},"end":{"line":59,"column":64}},"17":{"start":{"line":67,"column":8},"end":{"line":101,"column":9}},"18":{"start":{"line":70,"column":12},"end":{"line":70,"column":67}},"19":{"start":{"line":72,"column":12},"end":{"line":72,"column":40}},"20":{"start":{"line":75,"column":12},"end":{"line":75,"column":67}},"21":{"start":{"line":77,"column":12},"end":{"line":94,"column":13}},"22":{"start":{"line":80,"column":16},"end":{"line":80,"column":111}},"23":{"start":{"line":82,"column":16},"end":{"line":82,"column":119}},"24":{"start":{"line":84,"column":16},"end":{"line":93,"column":17}},"25":{"start":{"line":85,"column":20},"end":{"line":92,"column":27}},"26":{"start":{"line":89,"column":28},"end":{"line":89,"column":88}},"27":{"start":{"line":91,"column":28},"end":{"line":91,"column":51}},"28":{"start":{"line":96,"column":12},"end":{"line":100,"column":42}},"29":{"start":{"line":97,"column":16},"end":{"line":97,"column":77}},"30":{"start":{"line":99,"column":16},"end":{"line":99,"column":39}},"31":{"start":{"line":103,"column":8},"end":{"line":123,"column":10}},"32":{"start":{"line":105,"column":16},"end":{"line":105,"column":46}},"33":{"start":{"line":107,"column":16},"end":{"line":121,"column":17}},"34":{"start":{"line":108,"column":20},"end":{"line":108,"column":59}},"35":{"start":{"line":110,"column":20},"end":{"line":110,"column":82}},"36":{"start":{"line":112,"column":20},"end":{"line":120,"column":21}},"37":{"start":{"line":113,"column":24},"end":{"line":119,"column":27}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":12}},{"start":{"line":32,"column":12},"end":{"line":32,"column":12}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":19},"end":{"line":34,"column":19}},{"start":{"line":34,"column":19},"end":{"line":34,"column":19}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":16},"end":{"line":38,"column":16}},{"start":{"line":38,"column":16},"end":{"line":38,"column":16}}]},"4":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":21},"end":{"line":38,"column":52}},{"start":{"line":38,"column":56},"end":{"line":38,"column":88}},{"start":{"line":39,"column":20},"end":{"line":39,"column":55}},{"start":{"line":39,"column":59},"end":{"line":39,"column":90}}]},"5":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":33},"end":{"line":70,"column":60}},{"start":{"line":70,"column":64},"end":{"line":70,"column":66}}]},"6":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":12},"end":{"line":77,"column":12}},{"start":{"line":77,"column":12},"end":{"line":77,"column":12}}]},"7":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":40},"end":{"line":82,"column":73}},{"start":{"line":82,"column":77},"end":{"line":82,"column":118}}]},"8":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":16},"end":{"line":84,"column":16}},{"start":{"line":84,"column":16},"end":{"line":84,"column":16}}]},"9":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":42},"end":{"line":89,"column":80}},{"start":{"line":89,"column":84},"end":{"line":89,"column":87}}]},"10":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":16},"end":{"line":107,"column":16}},{"start":{"line":107,"column":16},"end":{"line":107,"column":16}}]},"11":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":20},"end":{"line":112,"column":20}},{"start":{"line":112,"column":20},"end":{"line":112,"column":20}}]}},"code":["/**"," * @fileoverview Rule to forbid control charactes from regular expressions."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow control characters in regular expressions\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Get the regex expression","         * @param {ASTNode} node node to evaluate","         * @returns {*} Regex if found else null","         * @private","         */","        function getRegExp(node) {","            if (node.value instanceof RegExp) {","                return node.value;","            } else if (typeof node.value === \"string\") {","","                const parent = context.getAncestors().pop();","","                if ((parent.type === \"NewExpression\" || parent.type === \"CallExpression\") &&","                    parent.callee.type === \"Identifier\" && parent.callee.name === \"RegExp\"","                ) {","","                    // there could be an invalid regular expression string","                    try {","                        return new RegExp(node.value);","                    } catch (ex) {","                        return null;","                    }","                }","            }","","            return null;","        }","","","        const controlChar = /[\\x00-\\x1f]/g; // eslint-disable-line no-control-regex","        const consecutiveSlashes = /\\\\+/g;","        const consecutiveSlashesAtEnd = /\\\\+$/g;","        const stringControlChar = /\\\\x[01][0-9a-f]/ig;","        const stringControlCharWithoutSlash = /x[01][0-9a-f]/ig;","","        /**","         * Return a list of the control characters in the given regex string","         * @param {string} regexStr regex as string to check","         * @returns {array} returns a list of found control characters on given string","         * @private","         */","        function getControlCharacters(regexStr) {","","            // check control characters, if RegExp object used","            const controlChars = regexStr.match(controlChar) || [];","","            let stringControlChars = [];","","            // check substr, if regex literal used","            const subStrIndex = regexStr.search(stringControlChar);","","            if (subStrIndex > -1) {","","                // is it escaped, check backslash count","                const possibleEscapeCharacters = regexStr.slice(0, subStrIndex).match(consecutiveSlashesAtEnd);","","                const hasControlChars = possibleEscapeCharacters === null || !(possibleEscapeCharacters[0].length % 2);","","                if (hasControlChars) {","                    stringControlChars = regexStr.slice(subStrIndex, -1)","                        .split(consecutiveSlashes)","                        .filter(Boolean)","                        .map(x => {","                            const match = x.match(stringControlCharWithoutSlash) || [x];","","                            return `\\\\${match[0]}`;","                        });","                }","            }","","            return controlChars.map(x => {","                const hexCode = `0${x.charCodeAt(0).toString(16)}`.slice(-2);","","                return `\\\\x${hexCode}`;","            }).concat(stringControlChars);","        }","","        return {","            Literal(node) {","                const regex = getRegExp(node);","","                if (regex) {","                    const computedValue = regex.toString();","","                    const controlCharacters = getControlCharacters(computedValue);","","                    if (controlCharacters.length > 0) {","                        context.report({","                            node,","                            message: \"Unexpected control character(s) in regular expression: {{controlChars}}.\",","                            data: {","                                controlChars: controlCharacters.join(\", \")","                            }","                        });","                    }","                }","            }","        };","","    }","};",""],"l":{"12":1,"31":1,"32":0,"33":0,"34":0,"36":0,"38":0,"43":0,"44":0,"46":0,"51":0,"55":0,"56":0,"57":0,"58":0,"59":0,"67":1,"70":0,"72":0,"75":0,"77":0,"80":0,"82":0,"84":0,"85":0,"89":0,"91":0,"96":0,"97":0,"99":0,"103":0,"105":0,"107":0,"108":0,"110":0,"112":0,"113":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-debugger.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-debugger.js","s":{"1":1,"2":0,"3":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":29},"end":{"line":26,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":32,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":29,"column":10}},"3":{"start":{"line":27,"column":16},"end":{"line":27,"column":86}}},"branchMap":{},"code":["/**"," * @fileoverview Rule to flag use of a debugger statement"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of `debugger`\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        return {","            DebuggerStatement(node) {","                context.report({ node, message: \"Unexpected 'debugger' statement.\" });","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"27":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-delete-var.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-delete-var.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":27},"end":{"line":27,"column":34}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":35,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":32,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":30,"column":17}},"4":{"start":{"line":29,"column":20},"end":{"line":29,"column":90}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":16},"end":{"line":28,"column":16}},{"start":{"line":28,"column":16},"end":{"line":28,"column":16}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":20},"end":{"line":28,"column":46}},{"start":{"line":28,"column":50},"end":{"line":28,"column":85}}]}},"code":["/**"," * @fileoverview Rule to flag when deleting variables"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow deleting variables\",","            category: \"Variables\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        return {","","            UnaryExpression(node) {","                if (node.operator === \"delete\" && node.argument.type === \"Identifier\") {","                    context.report({ node, message: \"Variables should not be deleted.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"28":0,"29":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-div-regex.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-div-regex.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":19},"end":{"line":28,"column":26}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":38,"column":2}},"2":{"start":{"line":24,"column":8},"end":{"line":24,"column":51}},"3":{"start":{"line":26,"column":8},"end":{"line":35,"column":10}},"4":{"start":{"line":29,"column":16},"end":{"line":29,"column":61}},"5":{"start":{"line":31,"column":16},"end":{"line":33,"column":17}},"6":{"start":{"line":32,"column":20},"end":{"line":32,"column":113}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":16},"end":{"line":31,"column":16}},{"start":{"line":31,"column":16},"end":{"line":31,"column":16}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":20},"end":{"line":31,"column":54}},{"start":{"line":31,"column":58},"end":{"line":31,"column":80}}]}},"code":["/**"," * @fileoverview Rule to check for ambiguous div operator in regexes"," * @author Matt DuVall <http://www.mattduvall.com>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow division operators explicitly at the beginning of regular expressions\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","","            Literal(node) {","                const token = sourceCode.getFirstToken(node);","","                if (token.type === \"RegularExpression\" && token.value[1] === \"=\") {","                    context.report({ node, message: \"A regular expression literal can be confused with '/='.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"24":0,"26":0,"29":0,"31":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-dupe-args.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-dupe-args.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"isParameter","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":34}}},"3":{"name":"checkParams","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":73,"column":2}},"2":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"3":{"start":{"line":35,"column":12},"end":{"line":35,"column":44}},"4":{"start":{"line":44,"column":8},"end":{"line":61,"column":9}},"5":{"start":{"line":45,"column":12},"end":{"line":45,"column":65}},"6":{"start":{"line":47,"column":12},"end":{"line":60,"column":13}},"7":{"start":{"line":48,"column":16},"end":{"line":48,"column":46}},"8":{"start":{"line":51,"column":16},"end":{"line":51,"column":63}},"9":{"start":{"line":53,"column":16},"end":{"line":59,"column":17}},"10":{"start":{"line":54,"column":20},"end":{"line":58,"column":23}},"11":{"start":{"line":67,"column":8},"end":{"line":70,"column":10}}},"branchMap":{"1":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":16}},{"start":{"line":53,"column":16},"end":{"line":53,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag duplicate arguments"," * @author Jamund Ferguson"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow duplicate arguments in `function` definitions\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Checks whether or not a given definition is a parameter's.","         * @param {escope.DefEntry} def - A definition to check.","         * @returns {boolean} `true` if the definition is a parameter's.","         */","        function isParameter(def) {","            return def.type === \"Parameter\";","        }","","        /**","         * Determines if a given node has duplicate parameters.","         * @param {ASTNode} node The node to check.","         * @returns {void}","         * @private","         */","        function checkParams(node) {","            const variables = context.getDeclaredVariables(node);","","            for (let i = 0; i < variables.length; ++i) {","                const variable = variables[i];","","                // Checks and reports duplications.","                const defs = variable.defs.filter(isParameter);","","                if (defs.length >= 2) {","                    context.report({","                        node,","                        message: \"Duplicate param '{{name}}'.\",","                        data: { name: variable.name }","                    });","                }","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            FunctionDeclaration: checkParams,","            FunctionExpression: checkParams","        };","","    }","};",""],"l":{"12":1,"34":1,"35":0,"44":1,"45":0,"47":0,"48":0,"51":0,"53":0,"54":0,"67":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-dupe-class-members.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-dupe-class-members.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"getState","line":35,"loc":{"start":{"line":35,"column":8},"end":{"line":35,"column":42}}},"3":{"name":"getName","line":55,"loc":{"start":{"line":55,"column":8},"end":{"line":55,"column":31}}},"4":{"name":"(anonymous_4)","line":68,"loc":{"start":{"line":68,"column":19},"end":{"line":68,"column":22}}},"5":{"name":"(anonymous_5)","line":73,"loc":{"start":{"line":73,"column":21},"end":{"line":73,"column":24}}},"6":{"name":"(anonymous_6)","line":78,"loc":{"start":{"line":78,"column":28},"end":{"line":78,"column":31}}},"7":{"name":"(anonymous_7)","line":83,"loc":{"start":{"line":83,"column":28},"end":{"line":83,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":109,"column":2}},"2":{"start":{"line":24,"column":8},"end":{"line":24,"column":23}},"3":{"start":{"line":35,"column":8},"end":{"line":47,"column":9}},"4":{"start":{"line":36,"column":12},"end":{"line":36,"column":53}},"5":{"start":{"line":37,"column":12},"end":{"line":37,"column":35}},"6":{"start":{"line":39,"column":12},"end":{"line":44,"column":13}},"7":{"start":{"line":40,"column":16},"end":{"line":43,"column":18}},"8":{"start":{"line":46,"column":12},"end":{"line":46,"column":68}},"9":{"start":{"line":55,"column":8},"end":{"line":63,"column":9}},"10":{"start":{"line":56,"column":12},"end":{"line":62,"column":13}},"11":{"start":{"line":57,"column":35},"end":{"line":57,"column":52}},"12":{"start":{"line":58,"column":32},"end":{"line":58,"column":58}},"13":{"start":{"line":61,"column":25},"end":{"line":61,"column":35},"skip":true},"14":{"start":{"line":65,"column":8},"end":{"line":107,"column":10}},"15":{"start":{"line":69,"column":16},"end":{"line":69,"column":27}},"16":{"start":{"line":74,"column":16},"end":{"line":74,"column":48}},"17":{"start":{"line":79,"column":16},"end":{"line":79,"column":28}},"18":{"start":{"line":84,"column":16},"end":{"line":86,"column":17}},"19":{"start":{"line":85,"column":20},"end":{"line":85,"column":27}},"20":{"start":{"line":88,"column":16},"end":{"line":88,"column":47}},"21":{"start":{"line":89,"column":16},"end":{"line":89,"column":58}},"22":{"start":{"line":90,"column":16},"end":{"line":90,"column":40}},"23":{"start":{"line":92,"column":16},"end":{"line":101,"column":17}},"24":{"start":{"line":93,"column":20},"end":{"line":93,"column":60}},"25":{"start":{"line":94,"column":20},"end":{"line":94,"column":37}},"26":{"start":{"line":95,"column":23},"end":{"line":101,"column":17}},"27":{"start":{"line":96,"column":20},"end":{"line":96,"column":60}},"28":{"start":{"line":97,"column":20},"end":{"line":97,"column":37}},"29":{"start":{"line":99,"column":20},"end":{"line":99,"column":73}},"30":{"start":{"line":100,"column":20},"end":{"line":100,"column":38}},"31":{"start":{"line":103,"column":16},"end":{"line":105,"column":17}},"32":{"start":{"line":104,"column":20},"end":{"line":104,"column":100}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":12},"end":{"line":39,"column":12}},{"start":{"line":39,"column":12},"end":{"line":39,"column":12}}]},"2":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":44},"end":{"line":46,"column":52}},{"start":{"line":46,"column":55},"end":{"line":46,"column":66}}]},"3":{"line":56,"type":"switch","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":52}},{"start":{"line":58,"column":16},"end":{"line":58,"column":58}},{"start":{"line":61,"column":16},"end":{"line":61,"column":35},"skip":true}]},"4":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":16},"end":{"line":84,"column":16}},{"start":{"line":84,"column":16},"end":{"line":84,"column":16}}]},"5":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16}},{"start":{"line":92,"column":16},"end":{"line":92,"column":16}}]},"6":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":35},"end":{"line":93,"column":45}},{"start":{"line":93,"column":49},"end":{"line":93,"column":58}}]},"7":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":23},"end":{"line":95,"column":23}},{"start":{"line":95,"column":23},"end":{"line":95,"column":23}}]},"8":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":35},"end":{"line":96,"column":45}},{"start":{"line":96,"column":49},"end":{"line":96,"column":58}}]},"9":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":35},"end":{"line":99,"column":45}},{"start":{"line":99,"column":49},"end":{"line":99,"column":58}},{"start":{"line":99,"column":62},"end":{"line":99,"column":71}}]},"10":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":16},"end":{"line":103,"column":16}},{"start":{"line":103,"column":16},"end":{"line":103,"column":16}}]}},"code":["/**"," * @fileoverview A rule to disallow duplicate name in class members."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow duplicate class members\",","            category: \"ECMAScript 6\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","        let stack = [];","","        /**","         * Gets state of a given member name.","         * @param {string} name - A name of a member.","         * @param {boolean} isStatic - A flag which specifies that is a static member.","         * @returns {Object} A state of a given member name.","         *   - retv.init {boolean} A flag which shows the name is declared as normal member.","         *   - retv.get {boolean} A flag which shows the name is declared as getter.","         *   - retv.set {boolean} A flag which shows the name is declared as setter.","         */","        function getState(name, isStatic) {","            const stateMap = stack[stack.length - 1];","            const key = `$${name}`; // to avoid \"__proto__\".","","            if (!stateMap[key]) {","                stateMap[key] = {","                    nonStatic: { init: false, get: false, set: false },","                    static: { init: false, get: false, set: false }","                };","            }","","            return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];","        }","","        /**","         * Gets the name text of a given node.","         *","         * @param {ASTNode} node - A node to get the name.","         * @returns {string} The name text of the node.","         */","        function getName(node) {","            switch (node.type) {","                case \"Identifier\": return node.name;","                case \"Literal\": return String(node.value);","","                /* istanbul ignore next: syntax error */","                default: return \"\";","            }","        }","","        return {","","            // Initializes the stack of state of member declarations.","            Program() {","                stack = [];","            },","","            // Initializes state of member declarations for the class.","            ClassBody() {","                stack.push(Object.create(null));","            },","","            // Disposes the state for the class.","            \"ClassBody:exit\"() {","                stack.pop();","            },","","            // Reports the node if its name has been declared already.","            MethodDefinition(node) {","                if (node.computed) {","                    return;","                }","","                const name = getName(node.key);","                const state = getState(name, node.static);","                let isDuplicate = false;","","                if (node.kind === \"get\") {","                    isDuplicate = (state.init || state.get);","                    state.get = true;","                } else if (node.kind === \"set\") {","                    isDuplicate = (state.init || state.set);","                    state.set = true;","                } else {","                    isDuplicate = (state.init || state.get || state.set);","                    state.init = true;","                }","","                if (isDuplicate) {","                    context.report({ node, message: \"Duplicate name '{{name}}'.\", data: { name } });","                }","            }","        };","    }","};",""],"l":{"12":1,"24":0,"35":1,"36":0,"37":0,"39":0,"40":0,"46":0,"55":1,"56":0,"57":0,"58":0,"61":1,"65":0,"69":0,"74":0,"79":0,"84":0,"85":0,"88":0,"89":0,"90":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"99":0,"100":0,"103":0,"104":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-dupe-keys.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-dupe-keys.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":29}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":19},"end":{"line":41,"column":26}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":21},"end":{"line":55,"column":28}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":18},"end":{"line":69,"column":25}}},"5":{"name":"(anonymous_5)","line":96,"loc":{"start":{"line":96,"column":10},"end":{"line":96,"column":20}}},"6":{"name":"(anonymous_6)","line":100,"loc":{"start":{"line":100,"column":28},"end":{"line":100,"column":35}}},"7":{"name":"(anonymous_7)","line":103,"loc":{"start":{"line":103,"column":35},"end":{"line":103,"column":38}}},"8":{"name":"(anonymous_8)","line":107,"loc":{"start":{"line":107,"column":20},"end":{"line":107,"column":27}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":34}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":34}},"4":{"start":{"line":31,"column":8},"end":{"line":31,"column":27}},"5":{"start":{"line":32,"column":8},"end":{"line":32,"column":25}},"6":{"start":{"line":33,"column":8},"end":{"line":33,"column":36}},"7":{"start":{"line":42,"column":8},"end":{"line":42,"column":58}},"8":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"9":{"start":{"line":45,"column":12},"end":{"line":45,"column":66}},"10":{"start":{"line":47,"column":8},"end":{"line":47,"column":41}},"11":{"start":{"line":56,"column":8},"end":{"line":56,"column":49}},"12":{"start":{"line":58,"column":8},"end":{"line":61,"column":10}},"13":{"start":{"line":70,"column":8},"end":{"line":70,"column":49}},"14":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"15":{"start":{"line":73,"column":12},"end":{"line":73,"column":29}},"16":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"17":{"start":{"line":76,"column":12},"end":{"line":76,"column":29}},"18":{"start":{"line":85,"column":0},"end":{"line":135,"column":2}},"19":{"start":{"line":97,"column":8},"end":{"line":97,"column":24}},"20":{"start":{"line":99,"column":8},"end":{"line":133,"column":10}},"21":{"start":{"line":101,"column":16},"end":{"line":101,"column":50}},"22":{"start":{"line":104,"column":16},"end":{"line":104,"column":34}},"23":{"start":{"line":108,"column":16},"end":{"line":108,"column":66}},"24":{"start":{"line":111,"column":16},"end":{"line":113,"column":17}},"25":{"start":{"line":112,"column":20},"end":{"line":112,"column":27}},"26":{"start":{"line":116,"column":16},"end":{"line":118,"column":17}},"27":{"start":{"line":117,"column":20},"end":{"line":117,"column":27}},"28":{"start":{"line":121,"column":16},"end":{"line":128,"column":17}},"29":{"start":{"line":122,"column":20},"end":{"line":127,"column":23}},"30":{"start":{"line":131,"column":16},"end":{"line":131,"column":42}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":8}},{"start":{"line":44,"column":8},"end":{"line":44,"column":8}}]},"2":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":13},"end":{"line":59,"column":37}},{"start":{"line":59,"column":41},"end":{"line":59,"column":50}},{"start":{"line":60,"column":13},"end":{"line":60,"column":37}},{"start":{"line":60,"column":41},"end":{"line":60,"column":50}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"4":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":75,"column":8}},{"start":{"line":75,"column":8},"end":{"line":75,"column":8}}]},"5":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":16},"end":{"line":111,"column":16}},{"start":{"line":111,"column":16},"end":{"line":111,"column":16}}]},"6":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":16},"end":{"line":116,"column":16}},{"start":{"line":116,"column":16},"end":{"line":116,"column":16}}]},"7":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":16},"end":{"line":121,"column":16}},{"start":{"line":121,"column":16},"end":{"line":121,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag use of duplicate keys in an object."," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const GET_KIND = /^(?:init|get)$/;","const SET_KIND = /^(?:init|set)$/;","","/**"," * The class which stores properties' information of an object."," */","class ObjectInfo {","","    /**","     * @param {ObjectInfo|null} upper - The information of the outer object.","     * @param {ASTNode} node - The ObjectExpression node of this information.","     */","    constructor(upper, node) {","        this.upper = upper;","        this.node = node;","        this.properties = new Map();","    }","","    /**","     * Gets the information of the given Property node.","     * @param {ASTNode} node - The Property node to get.","     * @returns {{get: boolean, set: boolean}} The information of the property.","     */","    getPropertyInfo(node) {","        const name = astUtils.getStaticPropertyName(node);","","        if (!this.properties.has(name)) {","            this.properties.set(name, { get: false, set: false });","        }","        return this.properties.get(name);","    }","","    /**","     * Checks whether the given property has been defined already or not.","     * @param {ASTNode} node - The Property node to check.","     * @returns {boolean} `true` if the property has been defined.","     */","    isPropertyDefined(node) {","        const entry = this.getPropertyInfo(node);","","        return (","            (GET_KIND.test(node.kind) && entry.get) ||","            (SET_KIND.test(node.kind) && entry.set)","        );","    }","","    /**","     * Defines the given property.","     * @param {ASTNode} node - The Property node to define.","     * @returns {void}","     */","    defineProperty(node) {","        const entry = this.getPropertyInfo(node);","","        if (GET_KIND.test(node.kind)) {","            entry.get = true;","        }","        if (SET_KIND.test(node.kind)) {","            entry.set = true;","        }","    }","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow duplicate keys in object literals\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","        let info = null;","","        return {","            ObjectExpression(node) {","                info = new ObjectInfo(info, node);","            },","            \"ObjectExpression:exit\"() {","                info = info.upper;","            },","","            Property(node) {","                const name = astUtils.getStaticPropertyName(node);","","                // Skip destructuring.","                if (node.parent.type !== \"ObjectExpression\") {","                    return;","                }","","                // Skip if the name is not static.","                if (!name) {","                    return;","                }","","                // Reports if the name is defined already.","                if (info.isPropertyDefined(node)) {","                    context.report({","                        node: info.node,","                        loc: node.key.loc,","                        message: \"Duplicate key '{{name}}'.\",","                        data: { name }","                    });","                }","","                // Update info.","                info.defineProperty(node);","            }","        };","    }","};",""],"l":{"12":1,"18":1,"19":1,"31":0,"32":0,"33":0,"42":0,"44":0,"45":0,"47":0,"56":0,"58":0,"70":0,"72":0,"73":0,"75":0,"76":0,"85":1,"97":0,"99":0,"101":0,"104":0,"108":0,"111":0,"112":0,"116":0,"117":0,"121":0,"122":0,"131":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-duplicate-case.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-duplicate-case.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":10},"end":{"line":24,"column":20}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":27},"end":{"line":28,"column":34}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":43,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":25,"column":51}},"3":{"start":{"line":27,"column":8},"end":{"line":41,"column":10}},"4":{"start":{"line":29,"column":16},"end":{"line":29,"column":35}},"5":{"start":{"line":31,"column":16},"end":{"line":39,"column":19}},"6":{"start":{"line":32,"column":20},"end":{"line":32,"column":68}},"7":{"start":{"line":34,"column":20},"end":{"line":38,"column":21}},"8":{"start":{"line":35,"column":24},"end":{"line":35,"column":95}},"9":{"start":{"line":37,"column":24},"end":{"line":37,"column":50}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":20},"end":{"line":34,"column":20}},{"start":{"line":34,"column":20},"end":{"line":34,"column":20}}]}},"code":["/**"," * @fileoverview Rule to disallow a duplicate case label."," * @author Dieter Oberkofler"," * @author Burak Yigit Kaya"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow duplicate case labels\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","            SwitchStatement(node) {","                const mapping = {};","","                node.cases.forEach(switchCase => {","                    const key = sourceCode.getText(switchCase.test);","","                    if (mapping[key]) {","                        context.report({ node: switchCase, message: \"Duplicate case label.\" });","                    } else {","                        mapping[key] = switchCase;","                    }","                });","            }","        };","    }","};",""],"l":{"13":1,"25":0,"27":0,"29":0,"31":0,"32":0,"34":0,"35":0,"37":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-duplicate-imports.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-duplicate-imports.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"getValue","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":24}}},"2":{"name":"checkAndReport","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":62}}},"3":{"name":"handleImports","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":78}}},"4":{"name":"(anonymous_4)","line":65,"loc":{"start":{"line":65,"column":11},"end":{"line":65,"column":26}}},"5":{"name":"handleExports","line":89,"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":62}}},"6":{"name":"(anonymous_6)","line":90,"loc":{"start":{"line":90,"column":11},"end":{"line":90,"column":26}}},"7":{"name":"(anonymous_7)","line":121,"loc":{"start":{"line":121,"column":10},"end":{"line":121,"column":20}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":23,"column":1}},"2":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":40}},"4":{"start":{"line":22,"column":4},"end":{"line":22,"column":14}},"5":{"start":{"line":36,"column":0},"end":{"line":47,"column":1}},"6":{"start":{"line":37,"column":4},"end":{"line":46,"column":5}},"7":{"start":{"line":38,"column":8},"end":{"line":45,"column":11}},"8":{"start":{"line":64,"column":0},"end":{"line":78,"column":1}},"9":{"start":{"line":65,"column":4},"end":{"line":77,"column":6}},"10":{"start":{"line":66,"column":8},"end":{"line":66,"column":37}},"11":{"start":{"line":68,"column":8},"end":{"line":76,"column":9}},"12":{"start":{"line":69,"column":12},"end":{"line":69,"column":89}},"13":{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},"14":{"start":{"line":72,"column":16},"end":{"line":72,"column":103}},"15":{"start":{"line":75,"column":12},"end":{"line":75,"column":38}},"16":{"start":{"line":89,"column":0},"end":{"line":100,"column":1}},"17":{"start":{"line":90,"column":4},"end":{"line":99,"column":6}},"18":{"start":{"line":91,"column":8},"end":{"line":91,"column":37}},"19":{"start":{"line":93,"column":8},"end":{"line":98,"column":9}},"20":{"start":{"line":94,"column":12},"end":{"line":94,"column":89}},"21":{"start":{"line":95,"column":12},"end":{"line":95,"column":99}},"22":{"start":{"line":97,"column":12},"end":{"line":97,"column":38}},"23":{"start":{"line":102,"column":0},"end":{"line":137,"column":2}},"24":{"start":{"line":122,"column":8},"end":{"line":124,"column":31}},"25":{"start":{"line":126,"column":8},"end":{"line":128,"column":10}},"26":{"start":{"line":130,"column":8},"end":{"line":133,"column":9}},"27":{"start":{"line":131,"column":12},"end":{"line":131,"column":99}},"28":{"start":{"line":132,"column":12},"end":{"line":132,"column":97}},"29":{"start":{"line":135,"column":8},"end":{"line":135,"column":24}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":12}},{"start":{"line":18,"column":16},"end":{"line":18,"column":27}},{"start":{"line":18,"column":31},"end":{"line":18,"column":48}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"4":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":12},"end":{"line":71,"column":12}},{"start":{"line":71,"column":12},"end":{"line":71,"column":12}}]},"6":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":8}},{"start":{"line":93,"column":8},"end":{"line":93,"column":8}}]},"7":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":32},"end":{"line":122,"column":50}},{"start":{"line":122,"column":54},"end":{"line":122,"column":56}}]},"8":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":8}},{"start":{"line":130,"column":8},"end":{"line":130,"column":8}}]}},"code":["/**"," * @fileoverview Restrict usage of duplicate imports."," * @author Simen Bekkhus"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","/**"," * Returns the name of the module imported or re-exported."," *"," * @param {ASTNode} node - A node to get."," * @returns {string} the name of the module, or empty string if no name."," */","function getValue(node) {","    if (node && node.source && node.source.value) {","        return node.source.value.trim();","    }","","    return \"\";","}","","/**"," * Checks if the name of the import or export exists in the given array, and reports if so."," *"," * @param {RuleContext} context - The ESLint rule context object."," * @param {ASTNode} node - A node to get."," * @param {string} value - The name of the imported or exported module."," * @param {string[]} array - The array containing other imports or exports in the file."," * @param {string} message - A message to be reported after the name of the module"," *"," * @returns {void} No return value"," */","function checkAndReport(context, node, value, array, message) {","    if (array.indexOf(value) !== -1) {","        context.report({","            node,","            message: \"'{{module}}' {{message}}\",","            data: {","                module: value,","                message","            }","        });","    }","}","","/**"," * @callback nodeCallback"," * @param {ASTNode} node - A node to handle."," */","","/**"," * Returns a function handling the imports of a given file"," *"," * @param {RuleContext} context - The ESLint rule context object."," * @param {boolean} includeExports - Whether or not to check for exports in addition to imports."," * @param {string[]} importsInFile - The array containing other imports in the file."," * @param {string[]} exportsInFile - The array containing other exports in the file."," *"," * @returns {nodeCallback} A function passed to ESLint to handle the statement."," */","function handleImports(context, includeExports, importsInFile, exportsInFile) {","    return function(node) {","        const value = getValue(node);","","        if (value) {","            checkAndReport(context, node, value, importsInFile, \"import is duplicated.\");","","            if (includeExports) {","                checkAndReport(context, node, value, exportsInFile, \"import is duplicated as export.\");","            }","","            importsInFile.push(value);","        }","    };","}","","/**"," * Returns a function handling the exports of a given file"," *"," * @param {RuleContext} context - The ESLint rule context object."," * @param {string[]} importsInFile - The array containing other imports in the file."," * @param {string[]} exportsInFile - The array containing other exports in the file."," *"," * @returns {nodeCallback} A function passed to ESLint to handle the statement."," */","function handleExports(context, importsInFile, exportsInFile) {","    return function(node) {","        const value = getValue(node);","","        if (value) {","            checkAndReport(context, node, value, exportsInFile, \"export is duplicated.\");","            checkAndReport(context, node, value, importsInFile, \"export is duplicated as import.\");","","            exportsInFile.push(value);","        }","    };","}","","module.exports = {","    meta: {","        docs: {","            description: \"disallow duplicate module imports\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [{","            type: \"object\",","            properties: {","                includeExports: {","                    type: \"boolean\"","                }","            },","            additionalProperties: false","        }]","    },","","    create(context) {","        const includeExports = (context.options[0] || {}).includeExports,","            importsInFile = [],","            exportsInFile = [];","","        const handlers = {","            ImportDeclaration: handleImports(context, includeExports, importsInFile, exportsInFile)","        };","","        if (includeExports) {","            handlers.ExportNamedDeclaration = handleExports(context, importsInFile, exportsInFile);","            handlers.ExportAllDeclaration = handleExports(context, importsInFile, exportsInFile);","        }","","        return handlers;","    }","};",""],"l":{"17":1,"18":0,"19":0,"22":0,"36":1,"37":0,"38":0,"64":1,"65":0,"66":0,"68":0,"69":0,"71":0,"72":0,"75":0,"89":1,"90":0,"91":0,"93":0,"94":0,"95":0,"97":0,"102":1,"122":0,"126":0,"130":0,"131":0,"132":0,"135":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-else-return.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-else-return.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":32,"loc":{"start":{"line":32,"column":10},"end":{"line":32,"column":20}}},"2":{"name":"displayReport","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":37}}},"3":{"name":"checkForReturn","line":113,"loc":{"start":{"line":113,"column":8},"end":{"line":113,"column":38}}},"4":{"name":"naiveHasReturn","line":125,"loc":{"start":{"line":125,"column":8},"end":{"line":125,"column":38}}},"5":{"name":"hasElse","line":142,"loc":{"start":{"line":142,"column":8},"end":{"line":142,"column":31}}},"6":{"name":"checkForIf","line":154,"loc":{"start":{"line":154,"column":8},"end":{"line":154,"column":34}}},"7":{"name":"checkForReturnOrIf","line":168,"loc":{"start":{"line":168,"column":8},"end":{"line":168,"column":42}}},"8":{"name":"alwaysReturns","line":178,"loc":{"start":{"line":178,"column":8},"end":{"line":178,"column":37}}},"9":{"name":"IfStatement","line":198,"loc":{"start":{"line":198,"column":8},"end":{"line":198,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":50}},"3":{"start":{"line":19,"column":0},"end":{"line":235,"column":2}},"4":{"start":{"line":44,"column":8},"end":{"line":105,"column":9}},"5":{"start":{"line":45,"column":12},"end":{"line":104,"column":15}},"6":{"start":{"line":49,"column":20},"end":{"line":49,"column":63}},"7":{"start":{"line":50,"column":20},"end":{"line":50,"column":70}},"8":{"start":{"line":51,"column":20},"end":{"line":51,"column":76}},"9":{"start":{"line":52,"column":20},"end":{"line":52,"column":60}},"10":{"start":{"line":53,"column":20},"end":{"line":53,"column":77}},"11":{"start":{"line":54,"column":20},"end":{"line":54,"column":59}},"12":{"start":{"line":56,"column":20},"end":{"line":60,"column":21}},"13":{"start":{"line":57,"column":24},"end":{"line":57,"column":85}},"14":{"start":{"line":59,"column":24},"end":{"line":59,"column":59}},"15":{"start":{"line":66,"column":20},"end":{"line":66,"column":125}},"16":{"start":{"line":67,"column":20},"end":{"line":67,"column":90}},"17":{"start":{"line":69,"column":20},"end":{"line":71,"column":21}},"18":{"start":{"line":70,"column":24},"end":{"line":70,"column":36}},"19":{"start":{"line":73,"column":20},"end":{"line":73,"column":67}},"20":{"start":{"line":74,"column":20},"end":{"line":74,"column":85}},"21":{"start":{"line":76,"column":20},"end":{"line":89,"column":21}},"22":{"start":{"line":77,"column":24},"end":{"line":77,"column":77}},"23":{"start":{"line":79,"column":24},"end":{"line":79,"column":95}},"24":{"start":{"line":80,"column":24},"end":{"line":80,"column":130}},"25":{"start":{"line":86,"column":24},"end":{"line":88,"column":25}},"26":{"start":{"line":87,"column":28},"end":{"line":87,"column":40}},"27":{"start":{"line":91,"column":20},"end":{"line":95,"column":21}},"28":{"start":{"line":92,"column":24},"end":{"line":92,"column":58}},"29":{"start":{"line":94,"column":24},"end":{"line":94,"column":45}},"30":{"start":{"line":100,"column":20},"end":{"line":102,"column":84}},"31":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"32":{"start":{"line":114,"column":12},"end":{"line":114,"column":51}},"33":{"start":{"line":125,"column":8},"end":{"line":133,"column":9}},"34":{"start":{"line":126,"column":12},"end":{"line":131,"column":13}},"35":{"start":{"line":127,"column":16},"end":{"line":128,"column":58}},"36":{"start":{"line":130,"column":16},"end":{"line":130,"column":70}},"37":{"start":{"line":132,"column":12},"end":{"line":132,"column":40}},"38":{"start":{"line":142,"column":8},"end":{"line":144,"column":9}},"39":{"start":{"line":143,"column":12},"end":{"line":143,"column":94}},"40":{"start":{"line":154,"column":8},"end":{"line":157,"column":9}},"41":{"start":{"line":155,"column":12},"end":{"line":156,"column":82}},"42":{"start":{"line":168,"column":8},"end":{"line":170,"column":9}},"43":{"start":{"line":169,"column":12},"end":{"line":169,"column":60}},"44":{"start":{"line":178,"column":8},"end":{"line":190,"column":9}},"45":{"start":{"line":179,"column":12},"end":{"line":183,"column":13}},"46":{"start":{"line":182,"column":16},"end":{"line":182,"column":58}},"47":{"start":{"line":189,"column":12},"end":{"line":189,"column":44}},"48":{"start":{"line":198,"column":8},"end":{"line":222,"column":9}},"49":{"start":{"line":199,"column":12},"end":{"line":199,"column":56}},"50":{"start":{"line":200,"column":12},"end":{"line":201,"column":26}},"51":{"start":{"line":207,"column":12},"end":{"line":209,"column":13}},"52":{"start":{"line":208,"column":16},"end":{"line":208,"column":23}},"53":{"start":{"line":211,"column":12},"end":{"line":217,"column":13}},"54":{"start":{"line":212,"column":16},"end":{"line":214,"column":17}},"55":{"start":{"line":213,"column":20},"end":{"line":213,"column":27}},"56":{"start":{"line":215,"column":16},"end":{"line":215,"column":50}},"57":{"start":{"line":216,"column":16},"end":{"line":216,"column":43}},"58":{"start":{"line":219,"column":12},"end":{"line":221,"column":13}},"59":{"start":{"line":220,"column":16},"end":{"line":220,"column":41}},"60":{"start":{"line":228,"column":8},"end":{"line":232,"column":10}}},"branchMap":{"1":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":20},"end":{"line":56,"column":20}},{"start":{"line":56,"column":20},"end":{"line":56,"column":20}}]},"2":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":24},"end":{"line":56,"column":56}},{"start":{"line":56,"column":60},"end":{"line":56,"column":84}}]},"3":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":47},"end":{"line":66,"column":95}},{"start":{"line":66,"column":99},"end":{"line":66,"column":124}}]},"4":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":20},"end":{"line":69,"column":20}},{"start":{"line":69,"column":20},"end":{"line":69,"column":20}}]},"5":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":24},"end":{"line":69,"column":42}},{"start":{"line":69,"column":46},"end":{"line":69,"column":61}}]},"6":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":20},"end":{"line":76,"column":20}},{"start":{"line":76,"column":20},"end":{"line":76,"column":20}}]},"7":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":48},"end":{"line":79,"column":57}},{"start":{"line":79,"column":61},"end":{"line":79,"column":94}}]},"8":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":52},"end":{"line":80,"column":61}},{"start":{"line":80,"column":65},"end":{"line":80,"column":129}}]},"9":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":24},"end":{"line":86,"column":24}},{"start":{"line":86,"column":24},"end":{"line":86,"column":24}}]},"10":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":28},"end":{"line":86,"column":43}},{"start":{"line":86,"column":48},"end":{"line":86,"column":67}},{"start":{"line":86,"column":71},"end":{"line":86,"column":94}}]},"11":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":20},"end":{"line":91,"column":20}},{"start":{"line":91,"column":20},"end":{"line":91,"column":20}}]},"12":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":24},"end":{"line":91,"column":56}},{"start":{"line":91,"column":60},"end":{"line":91,"column":84}}]},"13":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":12}},{"start":{"line":126,"column":12},"end":{"line":126,"column":12}}]},"14":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":23},"end":{"line":130,"column":36}},{"start":{"line":130,"column":40},"end":{"line":130,"column":69}}]},"15":{"line":143,"type":"binary-expr","locations":[{"start":{"line":143,"column":19},"end":{"line":143,"column":33}},{"start":{"line":143,"column":37},"end":{"line":143,"column":52}},{"start":{"line":143,"column":56},"end":{"line":143,"column":93}}]},"16":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":19},"end":{"line":155,"column":46}},{"start":{"line":155,"column":50},"end":{"line":155,"column":63}},{"start":{"line":156,"column":16},"end":{"line":156,"column":46}},{"start":{"line":156,"column":50},"end":{"line":156,"column":81}}]},"17":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":19},"end":{"line":169,"column":39}},{"start":{"line":169,"column":43},"end":{"line":169,"column":59}}]},"18":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":12},"end":{"line":179,"column":12}},{"start":{"line":179,"column":12},"end":{"line":179,"column":12}}]},"19":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":12},"end":{"line":207,"column":12}},{"start":{"line":207,"column":12},"end":{"line":207,"column":12}}]},"20":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":16},"end":{"line":212,"column":16}},{"start":{"line":212,"column":16},"end":{"line":212,"column":16}}]},"21":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":12},"end":{"line":219,"column":12}},{"start":{"line":219,"column":12},"end":{"line":219,"column":12}}]}},"code":["/**"," * @fileoverview Rule to flag `else` after a `return` in `if`"," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","const FixTracker = require(\"../util/fix-tracker\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `else` blocks after `return` statements in `if` statements\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Display the context report if rule is violated","         *","         * @param {Node} node The 'else' node","         * @returns {void}","         */","        function displayReport(node) {","            context.report({","                node,","                message: \"Unnecessary 'else' after 'return'.\",","                fix: fixer => {","                    const sourceCode = context.getSourceCode();","                    const startToken = sourceCode.getFirstToken(node);","                    const elseToken = sourceCode.getTokenBefore(startToken);","                    const source = sourceCode.getText(node);","                    const lastIfToken = sourceCode.getTokenBefore(elseToken);","                    let fixedSource, firstTokenOfElseBlock;","","                    if (startToken.type === \"Punctuator\" && startToken.value === \"{\") {","                        firstTokenOfElseBlock = sourceCode.getTokenAfter(startToken);","                    } else {","                        firstTokenOfElseBlock = startToken;","                    }","","                    // If the if block does not have curly braces and does not end in a semicolon","                    // and the else block starts with (, [, /, +, ` or -, then it is not","                    // safe to remove the else keyword, because ASI will not add a semicolon","                    // after the if block","                    const ifBlockMaybeUnsafe = node.parent.consequent.type !== \"BlockStatement\" && lastIfToken.value !== \";\";","                    const elseBlockUnsafe = /^[([/+`-]/.test(firstTokenOfElseBlock.value);","","                    if (ifBlockMaybeUnsafe && elseBlockUnsafe) {","                        return null;","                    }","","                    const endToken = sourceCode.getLastToken(node);","                    const lastTokenOfElseBlock = sourceCode.getTokenBefore(endToken);","","                    if (lastTokenOfElseBlock.value !== \";\") {","                        const nextToken = sourceCode.getTokenAfter(endToken);","","                        const nextTokenUnsafe = nextToken && /^[([/+`-]/.test(nextToken.value);","                        const nextTokenOnSameLine = nextToken && nextToken.loc.start.line === lastTokenOfElseBlock.loc.start.line;","","                        // If the else block contents does not end in a semicolon,","                        // and the else block starts with (, [, /, +, ` or -, then it is not","                        // safe to remove the else block, because ASI will not add a semicolon","                        // after the remaining else block contents","                        if (nextTokenUnsafe || (nextTokenOnSameLine && nextToken.value !== \"}\")) {","                            return null;","                        }","                    }","","                    if (startToken.type === \"Punctuator\" && startToken.value === \"{\") {","                        fixedSource = source.slice(1, -1);","                    } else {","                        fixedSource = source;","                    }","","                    // Extend the replacement range to include the entire","                    // function to avoid conflicting with no-useless-return.","                    // https://github.com/eslint/eslint/issues/8026","                    return new FixTracker(fixer, sourceCode)","                        .retainEnclosingFunction(node)","                        .replaceTextRange([elseToken.start, node.end], fixedSource);","                }","            });","        }","","        /**","         * Check to see if the node is a ReturnStatement","         *","         * @param {Node} node The node being evaluated","         * @returns {boolean} True if node is a return","         */","        function checkForReturn(node) {","            return node.type === \"ReturnStatement\";","        }","","        /**","         * Naive return checking, does not iterate through the whole","         * BlockStatement because we make the assumption that the ReturnStatement","         * will be the last node in the body of the BlockStatement.","         *","         * @param {Node} node The consequent/alternate node","         * @returns {boolean} True if it has a return","         */","        function naiveHasReturn(node) {","            if (node.type === \"BlockStatement\") {","                const body = node.body,","                    lastChildNode = body[body.length - 1];","","                return lastChildNode && checkForReturn(lastChildNode);","            }","            return checkForReturn(node);","        }","","        /**","         * Check to see if the node is valid for evaluation,","         * meaning it has an else and not an else-if","         *","         * @param {Node} node The node being evaluated","         * @returns {boolean} True if the node is valid","         */","        function hasElse(node) {","            return node.alternate && node.consequent && node.alternate.type !== \"IfStatement\";","        }","","        /**","         * If the consequent is an IfStatement, check to see if it has an else","         * and both its consequent and alternate path return, meaning this is","         * a nested case of rule violation.  If-Else not considered currently.","         *","         * @param {Node} node The consequent node","         * @returns {boolean} True if this is a nested rule violation","         */","        function checkForIf(node) {","            return node.type === \"IfStatement\" && hasElse(node) &&","                naiveHasReturn(node.alternate) && naiveHasReturn(node.consequent);","        }","","        /**","         * Check the consequent/body node to make sure it is not","         * a ReturnStatement or an IfStatement that returns on both","         * code paths.","         *","         * @param {Node} node The consequent or body node","         * @param {Node} alternate The alternate node","         * @returns {boolean} `true` if it is a Return/If node that always returns.","         */","        function checkForReturnOrIf(node) {","            return checkForReturn(node) || checkForIf(node);","        }","","","        /**","         * Check whether a node returns in every codepath.","         * @param {Node} node The node to be checked","         * @returns {boolean} `true` if it returns on every codepath.","         */","        function alwaysReturns(node) {","            if (node.type === \"BlockStatement\") {","","                // If we have a BlockStatement, check each consequent body node.","                return node.body.some(checkForReturnOrIf);","            }","","            /*","             * If not a block statement, make sure the consequent isn't a","             * ReturnStatement or an IfStatement with returns on both paths.","             */","            return checkForReturnOrIf(node);","        }","","        /**","         * Check the if statement","         * @returns {void}","         * @param {Node} node The node for the if statement to check","         * @private","         */","        function IfStatement(node) {","            const parent = context.getAncestors().pop();","            let consequents,","                alternate;","","            /*","             * Fixing this would require splitting one statement into two, so no error should","             * be reported if this node is in a position where only one statement is allowed.","             */","            if (!astUtils.STATEMENT_LIST_PARENTS.has(parent.type)) {","                return;","            }","","            for (consequents = []; node.type === \"IfStatement\"; node = node.alternate) {","                if (!node.alternate) {","                    return;","                }","                consequents.push(node.consequent);","                alternate = node.alternate;","            }","","            if (consequents.every(alwaysReturns)) {","                displayReport(alternate);","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","","            \"IfStatement:exit\": IfStatement","","        };","","    }","};",""],"l":{"12":1,"13":1,"19":1,"44":1,"45":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"56":0,"57":0,"59":0,"66":0,"67":0,"69":0,"70":0,"73":0,"74":0,"76":0,"77":0,"79":0,"80":0,"86":0,"87":0,"91":0,"92":0,"94":0,"100":0,"113":1,"114":0,"125":1,"126":0,"127":0,"130":0,"132":0,"142":1,"143":0,"154":1,"155":0,"168":1,"169":0,"178":1,"179":0,"182":0,"189":0,"198":1,"199":0,"200":0,"207":0,"208":0,"211":0,"212":0,"213":0,"215":0,"216":0,"219":0,"220":0,"228":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/fix-tracker.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/fix-tracker.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":35}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":15},"end":{"line":43,"column":23}}},"3":{"name":"(anonymous_3)","line":57,"loc":{"start":{"line":57,"column":27},"end":{"line":57,"column":34}}},"4":{"name":"(anonymous_4)","line":74,"loc":{"start":{"line":74,"column":27},"end":{"line":74,"column":41}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":20},"end":{"line":89,"column":34}}},"6":{"name":"(anonymous_6)","line":116,"loc":{"start":{"line":116,"column":10},"end":{"line":116,"column":24}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":31,"column":8},"end":{"line":31,"column":27}},"3":{"start":{"line":32,"column":8},"end":{"line":32,"column":37}},"4":{"start":{"line":33,"column":8},"end":{"line":33,"column":34}},"5":{"start":{"line":44,"column":8},"end":{"line":44,"column":35}},"6":{"start":{"line":45,"column":8},"end":{"line":45,"column":20}},"7":{"start":{"line":58,"column":8},"end":{"line":58,"column":61}},"8":{"start":{"line":60,"column":8},"end":{"line":61,"column":75}},"9":{"start":{"line":75,"column":8},"end":{"line":75,"column":87}},"10":{"start":{"line":76,"column":8},"end":{"line":76,"column":85}},"11":{"start":{"line":78,"column":8},"end":{"line":78,"column":77}},"12":{"start":{"line":90,"column":8},"end":{"line":90,"column":24}},"13":{"start":{"line":92,"column":8},"end":{"line":99,"column":9}},"14":{"start":{"line":93,"column":12},"end":{"line":96,"column":14}},"15":{"start":{"line":98,"column":12},"end":{"line":98,"column":32}},"16":{"start":{"line":101,"column":8},"end":{"line":106,"column":10}},"17":{"start":{"line":117,"column":8},"end":{"line":117,"column":60}},"18":{"start":{"line":121,"column":0},"end":{"line":121,"column":28}}},"branchMap":{"1":{"line":61,"type":"cond-expr","locations":[{"start":{"line":61,"column":27},"end":{"line":61,"column":45}},{"start":{"line":61,"column":48},"end":{"line":61,"column":73}}]},"2":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":28},"end":{"line":75,"column":71}},{"start":{"line":75,"column":75},"end":{"line":75,"column":86}}]},"3":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":27},"end":{"line":76,"column":69}},{"start":{"line":76,"column":73},"end":{"line":76,"column":84}}]},"4":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8}},{"start":{"line":92,"column":8},"end":{"line":92,"column":8}}]}},"code":["/**"," * @fileoverview Helper class to aid in constructing fix commands."," * @author Alan Pierce"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A helper class to combine fix options into a fix command. Currently, it"," * exposes some \"retain\" methods that extend the range of the text being"," * replaced so that other fixes won't touch that region in the same pass."," */","class FixTracker {","","    /**","     * Create a new FixTracker.","     *","     * @param {ruleFixer} fixer A ruleFixer instance.","     * @param {SourceCode} sourceCode A SourceCode object for the current code.","     */","    constructor(fixer, sourceCode) {","        this.fixer = fixer;","        this.sourceCode = sourceCode;","        this.retainedRange = null;","    }","","    /**","     * Mark the given range as \"retained\", meaning that other fixes may not","     * may not modify this region in the same pass.","     *","     * @param {int[]} range The range to retain.","     * @returns {FixTracker} The same RuleFixer, for chained calls.","     */","    retainRange(range) {","        this.retainedRange = range;","        return this;","    }","","    /**","     * Given a node, find the function containing it (or the entire program) and","     * mark it as retained, meaning that other fixes may not modify it in this","     * pass. This is useful for avoiding conflicts in fixes that modify control","     * flow.","     *","     * @param {ASTNode} node The node to use as a starting point.","     * @returns {FixTracker} The same RuleFixer, for chained calls.","     */","    retainEnclosingFunction(node) {","        const functionNode = astUtils.getUpperFunction(node);","","        return this.retainRange(","            functionNode ? functionNode.range : this.sourceCode.ast.range);","    }","","    /**","     * Given a node or token, find the token before and afterward, and mark that","     * range as retained, meaning that other fixes may not modify it in this","     * pass. This is useful for avoiding conflicts in fixes that make a small","     * change to the code where the AST should not be changed.","     *","     * @param {ASTNode|Token} nodeOrToken The node or token to use as a starting","     *      point. The token to the left and right are use in the range.","     * @returns {FixTracker} The same RuleFixer, for chained calls.","     */","    retainSurroundingTokens(nodeOrToken) {","        const tokenBefore = this.sourceCode.getTokenBefore(nodeOrToken) || nodeOrToken;","        const tokenAfter = this.sourceCode.getTokenAfter(nodeOrToken) || nodeOrToken;","","        return this.retainRange([tokenBefore.range[0], tokenAfter.range[1]]);","    }","","    /**","     * Create a fix command that replaces the given range with the given text,","     * accounting for any retained ranges.","     *","     * @param {int[]} range The range to remove in the fix.","     * @param {string} text The text to insert in place of the range.","     * @returns {Object} The fix command.","     */","    replaceTextRange(range, text) {","        let actualRange;","","        if (this.retainedRange) {","            actualRange = [","                Math.min(this.retainedRange[0], range[0]),","                Math.max(this.retainedRange[1], range[1])","            ];","        } else {","            actualRange = range;","        }","","        return this.fixer.replaceTextRange(","            actualRange,","            this.sourceCode.text.slice(actualRange[0], range[0]) +","                text +","                this.sourceCode.text.slice(range[1], actualRange[1])","        );","    }","","    /**","     * Create a fix command that removes the given node or token, accounting for","     * any retained ranges.","     *","     * @param {ASTNode|Token} nodeOrToken The node or token to remove.","     * @returns {Object} The fix command.","     */","    remove(nodeOrToken) {","        return this.replaceTextRange(nodeOrToken.range, \"\");","    }","}","","module.exports = FixTracker;",""],"l":{"11":1,"31":0,"32":0,"33":0,"44":0,"45":0,"58":0,"60":0,"75":0,"76":0,"78":0,"90":0,"92":0,"93":0,"98":0,"101":0,"117":0,"121":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-empty-character-class.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-empty-character-class.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":41,"loc":{"start":{"line":41,"column":10},"end":{"line":41,"column":20}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":19},"end":{"line":46,"column":26}}}},"statementMap":{"1":{"start":{"line":24,"column":0},"end":{"line":24,"column":62}},"2":{"start":{"line":30,"column":0},"end":{"line":57,"column":2}},"3":{"start":{"line":42,"column":8},"end":{"line":42,"column":51}},"4":{"start":{"line":44,"column":8},"end":{"line":54,"column":10}},"5":{"start":{"line":47,"column":16},"end":{"line":47,"column":61}},"6":{"start":{"line":49,"column":16},"end":{"line":51,"column":17}},"7":{"start":{"line":50,"column":20},"end":{"line":50,"column":70}}},"branchMap":{"1":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":16},"end":{"line":49,"column":16}},{"start":{"line":49,"column":16},"end":{"line":49,"column":16}}]},"2":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":20},"end":{"line":49,"column":54}},{"start":{"line":49,"column":58},"end":{"line":49,"column":82}}]}},"code":["/**"," * @fileoverview Rule to flag the use of empty character classes in regular expressions"," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/*","plain-English description of the following regexp:","0. `^` fix the match at the beginning of the string","1. `\\/`: the `/` that begins the regexp","2. `([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*`: regexp contents; 0 or more of the following","  2.0. `[^\\\\[]`: any character that's not a `\\` or a `[` (anything but escape sequences and character classes)","  2.1. `\\\\.`: an escape sequence","  2.2. `\\[([^\\\\\\]]|\\\\.)+\\]`: a character class that isn't empty","3. `\\/` the `/` that ends the regexp","4. `[gimuy]*`: optional regexp flags","5. `$`: fix the match at the end of the string","*/","const regex = /^\\/([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+])*\\/[gimuy]*$/;","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow empty character classes in regular expressions\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","","            Literal(node) {","                const token = sourceCode.getFirstToken(node);","","                if (token.type === \"RegularExpression\" && !regex.test(token.value)) {","                    context.report({ node, message: \"Empty class.\" });","                }","            }","","        };","","    }","};",""],"l":{"24":1,"30":1,"42":0,"44":0,"47":0,"49":0,"50":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-empty-function.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-empty-function.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"getKind","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":23}}},"2":{"name":"(anonymous_2)","line":114,"loc":{"start":{"line":114,"column":10},"end":{"line":114,"column":20}}},"3":{"name":"reportIfEmpty","line":132,"loc":{"start":{"line":132,"column":8},"end":{"line":132,"column":37}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":27,"column":3}},"3":{"start":{"line":40,"column":0},"end":{"line":85,"column":1}},"4":{"start":{"line":41,"column":4},"end":{"line":41,"column":31}},"5":{"start":{"line":42,"column":4},"end":{"line":42,"column":18}},"6":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"7":{"start":{"line":45,"column":8},"end":{"line":45,"column":32}},"8":{"start":{"line":49,"column":4},"end":{"line":72,"column":5}},"9":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"10":{"start":{"line":51,"column":12},"end":{"line":51,"column":29}},"11":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"12":{"start":{"line":54,"column":12},"end":{"line":54,"column":29}},"13":{"start":{"line":56,"column":8},"end":{"line":56,"column":55}},"14":{"start":{"line":58,"column":11},"end":{"line":72,"column":5}},"15":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"16":{"start":{"line":60,"column":12},"end":{"line":60,"column":29}},"17":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"18":{"start":{"line":63,"column":12},"end":{"line":63,"column":29}},"19":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"20":{"start":{"line":66,"column":12},"end":{"line":66,"column":34}},"21":{"start":{"line":68,"column":8},"end":{"line":68,"column":25}},"22":{"start":{"line":71,"column":8},"end":{"line":71,"column":27}},"23":{"start":{"line":75,"column":4},"end":{"line":75,"column":20}},"24":{"start":{"line":77,"column":4},"end":{"line":83,"column":5}},"25":{"start":{"line":78,"column":8},"end":{"line":78,"column":29}},"26":{"start":{"line":79,"column":11},"end":{"line":83,"column":5}},"27":{"start":{"line":80,"column":8},"end":{"line":80,"column":25}},"28":{"start":{"line":82,"column":8},"end":{"line":82,"column":20}},"29":{"start":{"line":84,"column":4},"end":{"line":84,"column":58}},"30":{"start":{"line":91,"column":0},"end":{"line":156,"column":2}},"31":{"start":{"line":115,"column":8},"end":{"line":115,"column":49}},"32":{"start":{"line":116,"column":8},"end":{"line":116,"column":44}},"33":{"start":{"line":118,"column":8},"end":{"line":118,"column":51}},"34":{"start":{"line":132,"column":8},"end":{"line":148,"column":9}},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":39}},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":64}},"37":{"start":{"line":136,"column":12},"end":{"line":147,"column":13}},"38":{"start":{"line":141,"column":16},"end":{"line":146,"column":19}},"39":{"start":{"line":150,"column":8},"end":{"line":154,"column":10}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"5":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":31},"end":{"line":56,"column":40}},{"start":{"line":56,"column":43},"end":{"line":56,"column":54}}]},"6":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":11},"end":{"line":58,"column":11}},{"start":{"line":58,"column":11},"end":{"line":58,"column":11}}]},"7":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"8":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"9":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":8}},{"start":{"line":65,"column":8},"end":{"line":65,"column":8}}]},"10":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]},"11":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":11},"end":{"line":79,"column":11}},{"start":{"line":79,"column":11},"end":{"line":79,"column":11}}]},"12":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":24},"end":{"line":115,"column":42}},{"start":{"line":115,"column":46},"end":{"line":115,"column":48}}]},"13":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":24},"end":{"line":116,"column":37}},{"start":{"line":116,"column":41},"end":{"line":116,"column":43}}]},"14":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":12},"end":{"line":136,"column":12}},{"start":{"line":136,"column":12},"end":{"line":136,"column":12}}]},"15":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":16},"end":{"line":136,"column":44}},{"start":{"line":137,"column":16},"end":{"line":137,"column":51}},{"start":{"line":138,"column":16},"end":{"line":138,"column":43}},{"start":{"line":139,"column":16},"end":{"line":139,"column":71}}]}},"code":["/**"," * @fileoverview Rule to disallow empty functions."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const ALLOW_OPTIONS = Object.freeze([","    \"functions\",","    \"arrowFunctions\",","    \"generatorFunctions\",","    \"methods\",","    \"generatorMethods\",","    \"getters\",","    \"setters\",","    \"constructors\"","]);","","/**"," * Gets the kind of a given function node."," *"," * @param {ASTNode} node - A function node to get. This is one of"," *      an ArrowFunctionExpression, a FunctionDeclaration, or a"," *      FunctionExpression."," * @returns {string} The kind of the function. This is one of \"functions\","," *      \"arrowFunctions\", \"generatorFunctions\", \"asyncFunctions\", \"methods\","," *      \"generatorMethods\", \"asyncMethods\", \"getters\", \"setters\", and"," *      \"constructors\"."," */","function getKind(node) {","    const parent = node.parent;","    let kind = \"\";","","    if (node.type === \"ArrowFunctionExpression\") {","        return \"arrowFunctions\";","    }","","    // Detects main kind.","    if (parent.type === \"Property\") {","        if (parent.kind === \"get\") {","            return \"getters\";","        }","        if (parent.kind === \"set\") {","            return \"setters\";","        }","        kind = parent.method ? \"methods\" : \"functions\";","","    } else if (parent.type === \"MethodDefinition\") {","        if (parent.kind === \"get\") {","            return \"getters\";","        }","        if (parent.kind === \"set\") {","            return \"setters\";","        }","        if (parent.kind === \"constructor\") {","            return \"constructors\";","        }","        kind = \"methods\";","","    } else {","        kind = \"functions\";","    }","","    // Detects prefix.","    let prefix = \"\";","","    if (node.generator) {","        prefix = \"generator\";","    } else if (node.async) {","        prefix = \"async\";","    } else {","        return kind;","    }","    return prefix + kind[0].toUpperCase() + kind.slice(1);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow empty functions\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allow: {","                        type: \"array\",","                        items: { enum: ALLOW_OPTIONS },","                        uniqueItems: true","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0] || {};","        const allowed = options.allow || [];","","        const sourceCode = context.getSourceCode();","","        /**","         * Reports a given function node if the node matches the following patterns.","         *","         * - Not allowed by options.","         * - The body is empty.","         * - The body doesn't have any comments.","         *","         * @param {ASTNode} node - A function node to report. This is one of","         *      an ArrowFunctionExpression, a FunctionDeclaration, or a","         *      FunctionExpression.","         * @returns {void}","         */","        function reportIfEmpty(node) {","            const kind = getKind(node);","            const name = astUtils.getFunctionNameWithKind(node);","","            if (allowed.indexOf(kind) === -1 &&","                node.body.type === \"BlockStatement\" &&","                node.body.body.length === 0 &&","                sourceCode.getComments(node.body).trailing.length === 0","            ) {","                context.report({","                    node,","                    loc: node.body.loc.start,","                    message: \"Unexpected empty {{name}}.\",","                    data: { name }","                });","            }","        }","","        return {","            ArrowFunctionExpression: reportIfEmpty,","            FunctionDeclaration: reportIfEmpty,","            FunctionExpression: reportIfEmpty","        };","    }","};",""],"l":{"12":1,"18":1,"40":1,"41":0,"42":0,"44":0,"45":0,"49":0,"50":0,"51":0,"53":0,"54":0,"56":0,"58":0,"59":0,"60":0,"62":0,"63":0,"65":0,"66":0,"68":0,"71":0,"75":0,"77":0,"78":0,"79":0,"80":0,"82":0,"84":0,"91":1,"115":0,"116":0,"118":0,"132":1,"133":0,"134":0,"136":0,"141":0,"150":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-empty-pattern.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-empty-pattern.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":25},"end":{"line":24,"column":32}}},"3":{"name":"(anonymous_3)","line":29,"loc":{"start":{"line":29,"column":24},"end":{"line":29,"column":31}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":36,"column":2}},"2":{"start":{"line":23,"column":8},"end":{"line":34,"column":10}},"3":{"start":{"line":25,"column":16},"end":{"line":27,"column":17}},"4":{"start":{"line":26,"column":20},"end":{"line":26,"column":90}},"5":{"start":{"line":30,"column":16},"end":{"line":32,"column":17}},"6":{"start":{"line":31,"column":20},"end":{"line":31,"column":89}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":16},"end":{"line":25,"column":16}},{"start":{"line":25,"column":16},"end":{"line":25,"column":16}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":16}},{"start":{"line":30,"column":16},"end":{"line":30,"column":16}}]}},"code":["/**"," * @fileoverview Rule to disallow an empty pattern"," * @author Alberto Rodríguez"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow empty destructuring patterns\",","            category: \"Best Practices\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","        return {","            ObjectPattern(node) {","                if (node.properties.length === 0) {","                    context.report({ node, message: \"Unexpected empty object pattern.\" });","                }","            },","            ArrayPattern(node) {","                if (node.elements.length === 0) {","                    context.report({ node, message: \"Unexpected empty array pattern.\" });","                }","            }","        };","    }","};",""],"l":{"11":1,"23":0,"25":0,"26":0,"30":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-empty.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-empty.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":38,"loc":{"start":{"line":38,"column":10},"end":{"line":38,"column":20}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":26},"end":{"line":45,"column":33}}},"3":{"name":"(anonymous_3)","line":69,"loc":{"start":{"line":69,"column":27},"end":{"line":69,"column":34}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":78,"column":2}},"3":{"start":{"line":39,"column":8},"end":{"line":40,"column":63}},"4":{"start":{"line":42,"column":8},"end":{"line":42,"column":51}},"5":{"start":{"line":44,"column":8},"end":{"line":75,"column":10}},"6":{"start":{"line":48,"column":16},"end":{"line":50,"column":17}},"7":{"start":{"line":49,"column":20},"end":{"line":49,"column":27}},"8":{"start":{"line":53,"column":16},"end":{"line":55,"column":17}},"9":{"start":{"line":54,"column":20},"end":{"line":54,"column":27}},"10":{"start":{"line":57,"column":16},"end":{"line":59,"column":17}},"11":{"start":{"line":58,"column":20},"end":{"line":58,"column":27}},"12":{"start":{"line":62,"column":16},"end":{"line":64,"column":17}},"13":{"start":{"line":63,"column":20},"end":{"line":63,"column":27}},"14":{"start":{"line":66,"column":16},"end":{"line":66,"column":76}},"15":{"start":{"line":71,"column":16},"end":{"line":73,"column":17}},"16":{"start":{"line":72,"column":20},"end":{"line":72,"column":81}}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":24},"end":{"line":39,"column":42}},{"start":{"line":39,"column":46},"end":{"line":39,"column":48}}]},"2":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":30},"end":{"line":40,"column":53}},{"start":{"line":40,"column":57},"end":{"line":40,"column":62}}]},"3":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":16},"end":{"line":48,"column":16}},{"start":{"line":48,"column":16},"end":{"line":48,"column":16}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":16}},{"start":{"line":53,"column":16},"end":{"line":53,"column":16}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":16}},{"start":{"line":57,"column":16},"end":{"line":57,"column":16}}]},"6":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":20},"end":{"line":57,"column":35}},{"start":{"line":57,"column":39},"end":{"line":57,"column":73}}]},"7":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":16},"end":{"line":62,"column":16}},{"start":{"line":62,"column":16},"end":{"line":62,"column":16}}]},"8":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":16},"end":{"line":71,"column":16}},{"start":{"line":71,"column":16},"end":{"line":71,"column":16}}]},"9":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":20},"end":{"line":71,"column":53}},{"start":{"line":71,"column":57},"end":{"line":71,"column":80}}]}},"code":["/**"," * @fileoverview Rule to flag use of an empty block statement"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow empty block statements\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allowEmptyCatch: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0] || {},","            allowEmptyCatch = options.allowEmptyCatch || false;","","        const sourceCode = context.getSourceCode();","","        return {","            BlockStatement(node) {","","                // if the body is not empty, we can just return immediately","                if (node.body.length !== 0) {","                    return;","                }","","                // a function is generally allowed to be empty","                if (astUtils.isFunction(node.parent)) {","                    return;","                }","","                if (allowEmptyCatch && node.parent.type === \"CatchClause\") {","                    return;","                }","","                // any other block is only allowed to be empty, if it contains a comment","                if (sourceCode.getComments(node).trailing.length > 0) {","                    return;","                }","","                context.report({ node, message: \"Empty block statement.\" });","            },","","            SwitchStatement(node) {","","                if (typeof node.cases === \"undefined\" || node.cases.length === 0) {","                    context.report({ node, message: \"Empty switch statement.\" });","                }","            }","        };","","    }","};",""],"l":{"11":1,"17":1,"39":0,"42":0,"44":0,"48":0,"49":0,"53":0,"54":0,"57":0,"58":0,"62":0,"63":0,"66":0,"71":0,"72":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-eq-null.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-eq-null.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":10},"end":{"line":24,"column":20}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":28},"end":{"line":28,"column":35}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":39,"column":2}},"2":{"start":{"line":26,"column":8},"end":{"line":36,"column":10}},"3":{"start":{"line":29,"column":16},"end":{"line":29,"column":85}},"4":{"start":{"line":31,"column":16},"end":{"line":34,"column":17}},"5":{"start":{"line":33,"column":20},"end":{"line":33,"column":91}}},"branchMap":{"1":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":36},"end":{"line":29,"column":58}},{"start":{"line":29,"column":62},"end":{"line":29,"column":84}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":16},"end":{"line":31,"column":16}},{"start":{"line":31,"column":16},"end":{"line":31,"column":16}}]},"3":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":20},"end":{"line":31,"column":49}},{"start":{"line":31,"column":53},"end":{"line":31,"column":78}},{"start":{"line":31,"column":82},"end":{"line":31,"column":93}},{"start":{"line":32,"column":24},"end":{"line":32,"column":52}},{"start":{"line":32,"column":56},"end":{"line":32,"column":80}},{"start":{"line":32,"column":84},"end":{"line":32,"column":95}}]}},"code":["/**"," * @fileoverview Rule to flag comparisons to null without a type-checking"," * operator."," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `null` comparisons without type-checking operators\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            BinaryExpression(node) {","                const badOperator = node.operator === \"==\" || node.operator === \"!=\";","","                if (node.right.type === \"Literal\" && node.right.raw === \"null\" && badOperator ||","                        node.left.type === \"Literal\" && node.left.raw === \"null\" && badOperator) {","                    context.report({ node, message: \"Use ‘===’ to compare with ‘null’.\" });","                }","            }","        };","","    }","};",""],"l":{"13":1,"26":0,"29":0,"31":0,"33":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-eval.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-eval.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":1,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"isIdentifier","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":34}}},"2":{"name":"isConstant","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":32}}},"3":{"name":"isMember","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":30}}},"4":{"name":"(anonymous_4)","line":96,"loc":{"start":{"line":96,"column":10},"end":{"line":96,"column":20}}},"5":{"name":"enterVarScope","line":114,"loc":{"start":{"line":114,"column":8},"end":{"line":114,"column":37}}},"6":{"name":"exitVarScope","line":131,"loc":{"start":{"line":131,"column":8},"end":{"line":131,"column":32}}},"7":{"name":"report","line":148,"loc":{"start":{"line":148,"column":8},"end":{"line":148,"column":30}}},"8":{"name":"reportAccessingEvalViaGlobalObject","line":172,"loc":{"start":{"line":172,"column":8},"end":{"line":172,"column":65}}},"9":{"name":"reportAccessingEval","line":206,"loc":{"start":{"line":206,"column":8},"end":{"line":206,"column":50}}},"10":{"name":"(anonymous_10)","line":231,"loc":{"start":{"line":231,"column":37},"end":{"line":231,"column":44}}},"11":{"name":"(anonymous_11)","line":242,"loc":{"start":{"line":242,"column":33},"end":{"line":242,"column":40}}},"12":{"name":"(anonymous_12)","line":250,"loc":{"start":{"line":250,"column":19},"end":{"line":250,"column":26}}},"13":{"name":"(anonymous_13)","line":267,"loc":{"start":{"line":267,"column":26},"end":{"line":267,"column":29}}},"14":{"name":"(anonymous_14)","line":282,"loc":{"start":{"line":282,"column":26},"end":{"line":282,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":21,"column":3}},"3":{"start":{"line":30,"column":0},"end":{"line":32,"column":1}},"4":{"start":{"line":31,"column":4},"end":{"line":31,"column":60}},"5":{"start":{"line":41,"column":0},"end":{"line":55,"column":1}},"6":{"start":{"line":42,"column":4},"end":{"line":54,"column":5}},"7":{"start":{"line":44,"column":12},"end":{"line":44,"column":39}},"8":{"start":{"line":47,"column":12},"end":{"line":50,"column":14}},"9":{"start":{"line":53,"column":12},"end":{"line":53,"column":25}},"10":{"start":{"line":66,"column":0},"end":{"line":71,"column":1}},"11":{"start":{"line":67,"column":4},"end":{"line":70,"column":6}},"12":{"start":{"line":77,"column":0},"end":{"line":308,"column":2}},"13":{"start":{"line":97,"column":8},"end":{"line":100,"column":10}},"14":{"start":{"line":101,"column":8},"end":{"line":101,"column":51}},"15":{"start":{"line":102,"column":8},"end":{"line":102,"column":28}},"16":{"start":{"line":114,"column":8},"end":{"line":124,"column":9}},"17":{"start":{"line":115,"column":12},"end":{"line":115,"column":55}},"18":{"start":{"line":117,"column":12},"end":{"line":123,"column":14}},"19":{"start":{"line":131,"column":8},"end":{"line":133,"column":9}},"20":{"start":{"line":132,"column":12},"end":{"line":132,"column":38}},"21":{"start":{"line":148,"column":8},"end":{"line":164,"column":9}},"22":{"start":{"line":149,"column":12},"end":{"line":149,"column":36}},"23":{"start":{"line":150,"column":12},"end":{"line":150,"column":39}},"24":{"start":{"line":152,"column":12},"end":{"line":154,"column":13}},"25":{"start":{"line":153,"column":16},"end":{"line":153,"column":45}},"26":{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},"27":{"start":{"line":156,"column":16},"end":{"line":156,"column":30}},"28":{"start":{"line":159,"column":12},"end":{"line":163,"column":15}},"29":{"start":{"line":172,"column":8},"end":{"line":198,"column":9}},"30":{"start":{"line":173,"column":12},"end":{"line":197,"column":13}},"31":{"start":{"line":174,"column":16},"end":{"line":174,"column":57}},"32":{"start":{"line":175,"column":16},"end":{"line":175,"column":79}},"33":{"start":{"line":177,"column":16},"end":{"line":179,"column":17}},"34":{"start":{"line":178,"column":20},"end":{"line":178,"column":29}},"35":{"start":{"line":181,"column":16},"end":{"line":181,"column":55}},"36":{"start":{"line":183,"column":16},"end":{"line":196,"column":17}},"37":{"start":{"line":184,"column":20},"end":{"line":184,"column":64}},"38":{"start":{"line":185,"column":20},"end":{"line":185,"column":49}},"39":{"start":{"line":188,"column":20},"end":{"line":190,"column":21}},"40":{"start":{"line":189,"column":24},"end":{"line":189,"column":43}},"41":{"start":{"line":193,"column":20},"end":{"line":195,"column":21}},"42":{"start":{"line":194,"column":24},"end":{"line":194,"column":37}},"43":{"start":{"line":206,"column":8},"end":{"line":225,"column":9}},"44":{"start":{"line":207,"column":12},"end":{"line":207,"column":77}},"45":{"start":{"line":209,"column":12},"end":{"line":211,"column":13}},"46":{"start":{"line":210,"column":16},"end":{"line":210,"column":23}},"47":{"start":{"line":213,"column":12},"end":{"line":213,"column":51}},"48":{"start":{"line":215,"column":12},"end":{"line":224,"column":13}},"49":{"start":{"line":216,"column":16},"end":{"line":216,"column":48}},"50":{"start":{"line":217,"column":16},"end":{"line":217,"column":48}},"51":{"start":{"line":219,"column":16},"end":{"line":223,"column":17}},"52":{"start":{"line":222,"column":20},"end":{"line":222,"column":31}},"53":{"start":{"line":227,"column":8},"end":{"line":239,"column":9}},"54":{"start":{"line":230,"column":12},"end":{"line":238,"column":14}},"55":{"start":{"line":232,"column":20},"end":{"line":232,"column":47}},"56":{"start":{"line":234,"column":20},"end":{"line":236,"column":21}},"57":{"start":{"line":235,"column":24},"end":{"line":235,"column":39}},"58":{"start":{"line":241,"column":8},"end":{"line":305,"column":10}},"59":{"start":{"line":243,"column":16},"end":{"line":243,"column":43}},"60":{"start":{"line":245,"column":16},"end":{"line":247,"column":17}},"61":{"start":{"line":246,"column":20},"end":{"line":246,"column":35}},"62":{"start":{"line":251,"column":16},"end":{"line":256,"column":81}},"63":{"start":{"line":258,"column":16},"end":{"line":264,"column":18}},"64":{"start":{"line":268,"column":16},"end":{"line":268,"column":55}},"65":{"start":{"line":270,"column":16},"end":{"line":270,"column":31}},"66":{"start":{"line":271,"column":16},"end":{"line":271,"column":49}},"67":{"start":{"line":272,"column":16},"end":{"line":272,"column":64}},"68":{"start":{"line":283,"column":16},"end":{"line":285,"column":17}},"69":{"start":{"line":284,"column":20},"end":{"line":284,"column":27}},"70":{"start":{"line":291,"column":16},"end":{"line":297,"column":17}},"71":{"start":{"line":292,"column":20},"end":{"line":292,"column":48}},"72":{"start":{"line":293,"column":20},"end":{"line":296,"column":22}},"73":{"start":{"line":299,"column":16},"end":{"line":303,"column":17}},"74":{"start":{"line":302,"column":20},"end":{"line":302,"column":40}}},"branchMap":{"1":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":11},"end":{"line":31,"column":37}},{"start":{"line":31,"column":41},"end":{"line":31,"column":59}}]},"2":{"line":42,"type":"switch","locations":[{"start":{"line":43,"column":8},"end":{"line":44,"column":39}},{"start":{"line":46,"column":8},"end":{"line":50,"column":14}},{"start":{"line":52,"column":8},"end":{"line":53,"column":25}}]},"3":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":16},"end":{"line":48,"column":45}},{"start":{"line":49,"column":16},"end":{"line":49,"column":52}}]},"4":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":40}},{"start":{"line":69,"column":8},"end":{"line":69,"column":72}}]},"5":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":25},"end":{"line":69,"column":35}},{"start":{"line":69,"column":38},"end":{"line":69,"column":50}}]},"6":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":12},"end":{"line":98,"column":30}},{"start":{"line":99,"column":12},"end":{"line":99,"column":44}}]},"7":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":12},"end":{"line":152,"column":12}},{"start":{"line":152,"column":12},"end":{"line":152,"column":12}}]},"8":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":12},"end":{"line":155,"column":12}},{"start":{"line":155,"column":12},"end":{"line":155,"column":12}}]},"9":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":16},"end":{"line":155,"column":48}},{"start":{"line":155,"column":52},"end":{"line":155,"column":74}}]},"10":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":16},"end":{"line":177,"column":16}},{"start":{"line":177,"column":16},"end":{"line":177,"column":16}}]},"11":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":20},"end":{"line":193,"column":20}},{"start":{"line":193,"column":20},"end":{"line":193,"column":20}}]},"12":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":12},"end":{"line":209,"column":12}},{"start":{"line":209,"column":12},"end":{"line":209,"column":12}}]},"13":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":16},"end":{"line":219,"column":16}},{"start":{"line":219,"column":16},"end":{"line":219,"column":16}}]},"14":{"line":219,"type":"binary-expr","locations":[{"start":{"line":219,"column":20},"end":{"line":219,"column":38}},{"start":{"line":219,"column":42},"end":{"line":219,"column":64}}]},"15":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":8},"end":{"line":227,"column":8}},{"start":{"line":227,"column":8},"end":{"line":227,"column":8}}]},"16":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":20},"end":{"line":234,"column":20}},{"start":{"line":234,"column":20},"end":{"line":234,"column":20}}]},"17":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":16},"end":{"line":245,"column":16}},{"start":{"line":245,"column":16},"end":{"line":245,"column":16}}]},"18":{"line":252,"type":"binary-expr","locations":[{"start":{"line":252,"column":31},"end":{"line":252,"column":65}},{"start":{"line":252,"column":69},"end":{"line":252,"column":71}}]},"19":{"line":254,"type":"binary-expr","locations":[{"start":{"line":254,"column":24},"end":{"line":254,"column":38}},{"start":{"line":255,"column":24},"end":{"line":255,"column":52}},{"start":{"line":256,"column":25},"end":{"line":256,"column":46}},{"start":{"line":256,"column":50},"end":{"line":256,"column":79}}]},"20":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":16},"end":{"line":283,"column":16}},{"start":{"line":283,"column":16},"end":{"line":283,"column":16}}]},"21":{"line":291,"type":"if","locations":[{"start":{"line":291,"column":16},"end":{"line":291,"column":16}},{"start":{"line":291,"column":16},"end":{"line":291,"column":16}}]},"22":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":16},"end":{"line":299,"column":16}},{"start":{"line":299,"column":16},"end":{"line":299,"column":16}}]},"23":{"line":299,"type":"binary-expr","locations":[{"start":{"line":299,"column":20},"end":{"line":299,"column":36}},{"start":{"line":299,"column":40},"end":{"line":299,"column":60}}]}},"code":["/**"," * @fileoverview Rule to flag use of eval() statement"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const candidatesOfGlobalObject = Object.freeze([","    \"global\",","    \"window\"","]);","","/**"," * Checks a given node is a Identifier node of the specified name."," *"," * @param {ASTNode} node - A node to check."," * @param {string} name - A name to check."," * @returns {boolean} `true` if the node is a Identifier node of the name."," */","function isIdentifier(node, name) {","    return node.type === \"Identifier\" && node.name === name;","}","","/**"," * Checks a given node is a Literal node of the specified string value."," *"," * @param {ASTNode} node - A node to check."," * @param {string} name - A name to check."," * @returns {boolean} `true` if the node is a Literal node of the name."," */","function isConstant(node, name) {","    switch (node.type) {","        case \"Literal\":","            return node.value === name;","","        case \"TemplateLiteral\":","            return (","                node.expressions.length === 0 &&","                node.quasis[0].value.cooked === name","            );","","        default:","            return false;","    }","}","","/**"," * Checks a given node is a MemberExpression node which has the specified name's"," * property."," *"," * @param {ASTNode} node - A node to check."," * @param {string} name - A name to check."," * @returns {boolean} `true` if the node is a MemberExpression node which has"," *      the specified name's property"," */","function isMember(node, name) {","    return (","        node.type === \"MemberExpression\" &&","        (node.computed ? isConstant : isIdentifier)(node.property, name)","    );","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of `eval()`\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allowIndirect: { type: \"boolean\" }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const allowIndirect = Boolean(","            context.options[0] &&","            context.options[0].allowIndirect","        );","        const sourceCode = context.getSourceCode();","        let funcInfo = null;","","        /**","         * Pushs a variable scope (Program or Function) information to the stack.","         *","         * This is used in order to check whether or not `this` binding is a","         * reference to the global object.","         *","         * @param {ASTNode} node - A node of the scope. This is one of Program,","         *      FunctionDeclaration, FunctionExpression, and ArrowFunctionExpression.","         * @returns {void}","         */","        function enterVarScope(node) {","            const strict = context.getScope().isStrict;","","            funcInfo = {","                upper: funcInfo,","                node,","                strict,","                defaultThis: false,","                initialized: strict","            };","        }","","        /**","         * Pops a variable scope from the stack.","         *","         * @returns {void}","         */","        function exitVarScope() {","            funcInfo = funcInfo.upper;","        }","","        /**","         * Reports a given node.","         *","         * `node` is `Identifier` or `MemberExpression`.","         * The parent of `node` might be `CallExpression`.","         *","         * The location of the report is always `eval` `Identifier` (or possibly","         * `Literal`). The type of the report is `CallExpression` if the parent is","         * `CallExpression`. Otherwise, it's the given node type.","         *","         * @param {ASTNode} node - A node to report.","         * @returns {void}","         */","        function report(node) {","            let locationNode = node;","            const parent = node.parent;","","            if (node.type === \"MemberExpression\") {","                locationNode = node.property;","            }","            if (parent.type === \"CallExpression\" && parent.callee === node) {","                node = parent;","            }","","            context.report({","                node,","                loc: locationNode.loc.start,","                message: \"eval can be harmful.\"","            });","        }","","        /**","         * Reports accesses of `eval` via the global object.","         *","         * @param {escope.Scope} globalScope - The global scope.","         * @returns {void}","         */","        function reportAccessingEvalViaGlobalObject(globalScope) {","            for (let i = 0; i < candidatesOfGlobalObject.length; ++i) {","                const name = candidatesOfGlobalObject[i];","                const variable = astUtils.getVariableByName(globalScope, name);","","                if (!variable) {","                    continue;","                }","","                const references = variable.references;","","                for (let j = 0; j < references.length; ++j) {","                    const identifier = references[j].identifier;","                    let node = identifier.parent;","","                    // To detect code like `window.window.eval`.","                    while (isMember(node, name)) {","                        node = node.parent;","                    }","","                    // Reports.","                    if (isMember(node, \"eval\")) {","                        report(node);","                    }","                }","            }","        }","","        /**","         * Reports all accesses of `eval` (excludes direct calls to eval).","         *","         * @param {escope.Scope} globalScope - The global scope.","         * @returns {void}","         */","        function reportAccessingEval(globalScope) {","            const variable = astUtils.getVariableByName(globalScope, \"eval\");","","            if (!variable) {","                return;","            }","","            const references = variable.references;","","            for (let i = 0; i < references.length; ++i) {","                const reference = references[i];","                const id = reference.identifier;","","                if (id.name === \"eval\" && !astUtils.isCallee(id)) {","","                    // Is accessing to eval (excludes direct calls to eval)","                    report(id);","                }","            }","        }","","        if (allowIndirect) {","","            // Checks only direct calls to eval. It's simple!","            return {","                \"CallExpression:exit\"(node) {","                    const callee = node.callee;","","                    if (isIdentifier(callee, \"eval\")) {","                        report(callee);","                    }","                }","            };","        }","","        return {","            \"CallExpression:exit\"(node) {","                const callee = node.callee;","","                if (isIdentifier(callee, \"eval\")) {","                    report(callee);","                }","            },","","            Program(node) {","                const scope = context.getScope(),","                    features = context.parserOptions.ecmaFeatures || {},","                    strict =","                        scope.isStrict ||","                        node.sourceType === \"module\" ||","                        (features.globalReturn && scope.childScopes[0].isStrict);","","                funcInfo = {","                    upper: null,","                    node,","                    strict,","                    defaultThis: true,","                    initialized: true","                };","            },","","            \"Program:exit\"() {","                const globalScope = context.getScope();","","                exitVarScope();","                reportAccessingEval(globalScope);","                reportAccessingEvalViaGlobalObject(globalScope);","            },","","            FunctionDeclaration: enterVarScope,","            \"FunctionDeclaration:exit\": exitVarScope,","            FunctionExpression: enterVarScope,","            \"FunctionExpression:exit\": exitVarScope,","            ArrowFunctionExpression: enterVarScope,","            \"ArrowFunctionExpression:exit\": exitVarScope,","","            ThisExpression(node) {","                if (!isMember(node.parent, \"eval\")) {","                    return;","                }","","                /*","                 * `this.eval` is found.","                 * Checks whether or not the value of `this` is the global object.","                 */","                if (!funcInfo.initialized) {","                    funcInfo.initialized = true;","                    funcInfo.defaultThis = astUtils.isDefaultThisBinding(","                        funcInfo.node,","                        sourceCode","                    );","                }","","                if (!funcInfo.strict && funcInfo.defaultThis) {","","                    // `this.eval` is possible built-in `eval`.","                    report(node.parent);","                }","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"30":1,"31":0,"41":1,"42":0,"44":0,"47":0,"53":0,"66":1,"67":0,"77":1,"97":0,"101":0,"102":0,"114":1,"115":0,"117":0,"131":1,"132":0,"148":1,"149":0,"150":0,"152":0,"153":0,"155":0,"156":0,"159":0,"172":1,"173":0,"174":0,"175":0,"177":0,"178":0,"181":0,"183":0,"184":0,"185":0,"188":0,"189":0,"193":0,"194":0,"206":1,"207":0,"209":0,"210":0,"213":0,"215":0,"216":0,"217":0,"219":0,"222":0,"227":0,"230":0,"232":0,"234":0,"235":0,"241":0,"243":0,"245":0,"246":0,"251":0,"258":0,"268":0,"270":0,"271":0,"272":0,"283":0,"284":0,"291":0,"292":0,"293":0,"299":0,"302":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-ex-assign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-ex-assign.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"checkVariable","line":32,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":41}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":23},"end":{"line":39,"column":30}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":45,"column":2}},"3":{"start":{"line":32,"column":8},"end":{"line":36,"column":9}},"4":{"start":{"line":33,"column":12},"end":{"line":35,"column":15}},"5":{"start":{"line":34,"column":16},"end":{"line":34,"column":117}},"6":{"start":{"line":38,"column":8},"end":{"line":42,"column":10}},"7":{"start":{"line":40,"column":16},"end":{"line":40,"column":74}}},"branchMap":{},"code":["/**"," * @fileoverview Rule to flag assignment of the exception parameter"," * @author Stephen Murray <spmurrayzzz>"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow reassigning exceptions in `catch` clauses\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Finds and reports references that are non initializer and writable.","         * @param {Variable} variable - A variable to check.","         * @returns {void}","         */","        function checkVariable(variable) {","            astUtils.getModifyingReferences(variable.references).forEach(reference => {","                context.report({ node: reference.identifier, message: \"Do not assign to the exception parameter.\" });","            });","        }","","        return {","            CatchClause(node) {","                context.getDeclaredVariables(node).forEach(checkVariable);","            }","        };","","    }","};",""],"l":{"8":1,"14":1,"32":1,"33":0,"34":0,"38":0,"40":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extend-native.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extend-native.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":20}}},"2":{"name":"(anonymous_2)","line":56,"loc":{"start":{"line":56,"column":32},"end":{"line":56,"column":39}}},"3":{"name":"(anonymous_3)","line":85,"loc":{"start":{"line":85,"column":26},"end":{"line":85,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"2":{"start":{"line":18,"column":0},"end":{"line":117,"column":2}},"3":{"start":{"line":45,"column":8},"end":{"line":45,"column":48}},"4":{"start":{"line":46,"column":8},"end":{"line":46,"column":51}},"5":{"start":{"line":47,"column":8},"end":{"line":47,"column":119}},"6":{"start":{"line":47,"column":78},"end":{"line":47,"column":117}},"7":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"8":{"start":{"line":50,"column":12},"end":{"line":50,"column":102}},"9":{"start":{"line":50,"column":66},"end":{"line":50,"column":100}},"10":{"start":{"line":53,"column":8},"end":{"line":114,"column":10}},"11":{"start":{"line":57,"column":16},"end":{"line":57,"column":38}},"12":{"start":{"line":59,"column":16},"end":{"line":61,"column":17}},"13":{"start":{"line":60,"column":20},"end":{"line":60,"column":27}},"14":{"start":{"line":63,"column":16},"end":{"line":65,"column":63}},"15":{"start":{"line":67,"column":16},"end":{"line":69,"column":17}},"16":{"start":{"line":68,"column":20},"end":{"line":68,"column":27}},"17":{"start":{"line":71,"column":16},"end":{"line":81,"column":19}},"18":{"start":{"line":72,"column":20},"end":{"line":80,"column":21}},"19":{"start":{"line":73,"column":24},"end":{"line":79,"column":27}},"20":{"start":{"line":87,"column":16},"end":{"line":87,"column":43}},"21":{"start":{"line":90,"column":16},"end":{"line":111,"column":17}},"22":{"start":{"line":95,"column":20},"end":{"line":95,"column":54}},"23":{"start":{"line":96,"column":20},"end":{"line":96,"column":61}},"24":{"start":{"line":98,"column":20},"end":{"line":110,"column":21}},"25":{"start":{"line":103,"column":24},"end":{"line":109,"column":27}}},"branchMap":{"1":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":23},"end":{"line":45,"column":41}},{"start":{"line":45,"column":45},"end":{"line":45,"column":47}}]},"2":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":27},"end":{"line":46,"column":44}},{"start":{"line":46,"column":48},"end":{"line":46,"column":50}}]},"3":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":16}},{"start":{"line":59,"column":16},"end":{"line":59,"column":16}}]},"5":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":20},"end":{"line":59,"column":51}},{"start":{"line":59,"column":55},"end":{"line":59,"column":93}}]},"6":{"line":63,"type":"cond-expr","locations":[{"start":{"line":64,"column":22},"end":{"line":64,"column":105}},{"start":{"line":65,"column":22},"end":{"line":65,"column":62}}]},"7":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":22},"end":{"line":64,"column":60}},{"start":{"line":64,"column":64},"end":{"line":64,"column":105}}]},"8":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":16},"end":{"line":67,"column":16}},{"start":{"line":67,"column":16},"end":{"line":67,"column":16}}]},"9":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":20},"end":{"line":72,"column":20}},{"start":{"line":72,"column":20},"end":{"line":72,"column":20}}]},"10":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":16},"end":{"line":90,"column":16}},{"start":{"line":90,"column":16},"end":{"line":90,"column":16}}]},"11":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":20},"end":{"line":90,"column":54}},{"start":{"line":91,"column":20},"end":{"line":91,"column":51}},{"start":{"line":92,"column":21},"end":{"line":92,"column":62}},{"start":{"line":92,"column":66},"end":{"line":92,"column":109}}]},"12":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":35},"end":{"line":96,"column":42}},{"start":{"line":96,"column":46},"end":{"line":96,"column":60}}]},"13":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":20},"end":{"line":98,"column":20}},{"start":{"line":98,"column":20},"end":{"line":98,"column":20}}]},"14":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":24},"end":{"line":98,"column":30}},{"start":{"line":99,"column":24},"end":{"line":99,"column":52}},{"start":{"line":100,"column":25},"end":{"line":100,"column":67}},{"start":{"line":101,"column":24},"end":{"line":101,"column":61}}]}},"code":["/**"," * @fileoverview Rule to flag adding properties to native object's prototypes."," * @author David Nelson"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const globals = require(\"globals\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow extending native types\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    exceptions: {","                        type: \"array\",","                        items: {","                            type: \"string\"","                        },","                        uniqueItems: true","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const config = context.options[0] || {};","        const exceptions = config.exceptions || [];","        let modifiedBuiltins = Object.keys(globals.builtin).filter(builtin => builtin[0].toUpperCase() === builtin[0]);","","        if (exceptions.length) {","            modifiedBuiltins = modifiedBuiltins.filter(builtIn => exceptions.indexOf(builtIn) === -1);","        }","","        return {","","            // handle the Array.prototype.extra style case","            AssignmentExpression(node) {","                const lhs = node.left;","","                if (lhs.type !== \"MemberExpression\" || lhs.object.type !== \"MemberExpression\") {","                    return;","                }","","                const affectsProto = lhs.object.computed","                    ? lhs.object.property.type === \"Literal\" && lhs.object.property.value === \"prototype\"","                    : lhs.object.property.name === \"prototype\";","","                if (!affectsProto) {","                    return;","                }","","                modifiedBuiltins.forEach(builtin => {","                    if (lhs.object.object.name === builtin) {","                        context.report({","                            node,","                            message: \"{{builtin}} prototype is read only, properties should not be added.\",","                            data: {","                                builtin","                            }","                        });","                    }","                });","            },","","            // handle the Object.definePropert[y|ies](Array.prototype) case","            CallExpression(node) {","","                const callee = node.callee;","","                // only worry about Object.definePropert[y|ies]","                if (callee.type === \"MemberExpression\" &&","                    callee.object.name === \"Object\" &&","                    (callee.property.name === \"defineProperty\" || callee.property.name === \"defineProperties\")) {","","                    // verify the object being added to is a native prototype","                    const subject = node.arguments[0];","                    const object = subject && subject.object;","","                    if (object &&","                        object.type === \"Identifier\" &&","                        (modifiedBuiltins.indexOf(object.name) > -1) &&","                        subject.property.name === \"prototype\") {","","                        context.report({","                            node,","                            message: \"{{objectName}} prototype is read only, properties should not be added.\",","                            data: {","                                objectName: object.name","                            }","                        });","                    }","                }","","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"45":0,"46":0,"47":0,"49":0,"50":0,"53":0,"57":0,"59":0,"60":0,"63":0,"67":0,"68":0,"71":0,"72":0,"73":0,"87":0,"90":0,"95":0,"96":0,"98":0,"103":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-bind.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-bind.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0},"b":{"1":[0,0,0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":10},"end":{"line":30,"column":20}}},"2":{"name":"report","line":40,"loc":{"start":{"line":40,"column":8},"end":{"line":40,"column":30}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":19},"end":{"line":45,"column":27}}},"4":{"name":"isCalleeOfBindMethod","line":64,"loc":{"start":{"line":64,"column":8},"end":{"line":64,"column":44}}},"5":{"name":"enterFunction","line":86,"loc":{"start":{"line":86,"column":8},"end":{"line":86,"column":37}}},"6":{"name":"exitFunction","line":103,"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":36}}},"7":{"name":"exitArrowFunction","line":119,"loc":{"start":{"line":119,"column":8},"end":{"line":119,"column":41}}},"8":{"name":"markAsThisFound","line":130,"loc":{"start":{"line":130,"column":8},"end":{"line":130,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":145,"column":2}},"3":{"start":{"line":31,"column":8},"end":{"line":31,"column":29}},"4":{"start":{"line":40,"column":8},"end":{"line":52,"column":9}},"5":{"start":{"line":41,"column":12},"end":{"line":51,"column":15}},"6":{"start":{"line":46,"column":20},"end":{"line":47,"column":121}},"7":{"start":{"line":49,"column":20},"end":{"line":49,"column":105}},"8":{"start":{"line":64,"column":8},"end":{"line":77,"column":9}},"9":{"start":{"line":65,"column":12},"end":{"line":65,"column":39}},"10":{"start":{"line":66,"column":12},"end":{"line":66,"column":46}},"11":{"start":{"line":68,"column":12},"end":{"line":76,"column":14}},"12":{"start":{"line":86,"column":8},"end":{"line":92,"column":9}},"13":{"start":{"line":87,"column":12},"end":{"line":91,"column":14}},"14":{"start":{"line":103,"column":8},"end":{"line":109,"column":9}},"15":{"start":{"line":104,"column":12},"end":{"line":106,"column":13}},"16":{"start":{"line":105,"column":16},"end":{"line":105,"column":29}},"17":{"start":{"line":108,"column":12},"end":{"line":108,"column":40}},"18":{"start":{"line":119,"column":8},"end":{"line":123,"column":9}},"19":{"start":{"line":120,"column":12},"end":{"line":122,"column":13}},"20":{"start":{"line":121,"column":16},"end":{"line":121,"column":29}},"21":{"start":{"line":130,"column":8},"end":{"line":134,"column":9}},"22":{"start":{"line":131,"column":12},"end":{"line":133,"column":13}},"23":{"start":{"line":132,"column":16},"end":{"line":132,"column":43}},"24":{"start":{"line":136,"column":8},"end":{"line":143,"column":10}}},"branchMap":{"1":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":16},"end":{"line":69,"column":27}},{"start":{"line":70,"column":16},"end":{"line":70,"column":53}},{"start":{"line":71,"column":16},"end":{"line":71,"column":45}},{"start":{"line":72,"column":16},"end":{"line":72,"column":50}},{"start":{"line":73,"column":16},"end":{"line":73,"column":50}},{"start":{"line":74,"column":16},"end":{"line":74,"column":38}},{"start":{"line":75,"column":16},"end":{"line":75,"column":65}}]},"2":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":104,"column":12}},{"start":{"line":104,"column":12},"end":{"line":104,"column":12}}]},"3":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":16},"end":{"line":104,"column":33}},{"start":{"line":104,"column":37},"end":{"line":104,"column":57}}]},"4":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":12},"end":{"line":120,"column":12}},{"start":{"line":120,"column":12},"end":{"line":120,"column":12}}]},"5":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":12},"end":{"line":131,"column":12}},{"start":{"line":131,"column":12},"end":{"line":131,"column":12}}]}},"code":["/**"," * @fileoverview Rule to flag unnecessary bind calls"," * @author Bence Dányi <bence@danyi.me>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary calls to `.bind()`\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        let scopeInfo = null;","","        /**","         * Reports a given function node.","         *","         * @param {ASTNode} node - A node to report. This is a FunctionExpression or","         *      an ArrowFunctionExpression.","         * @returns {void}","         */","        function report(node) {","            context.report({","                node: node.parent.parent,","                message: \"The function binding is unnecessary.\",","                loc: node.parent.property.loc.start,","                fix(fixer) {","                    const firstTokenToRemove = context.getSourceCode()","                        .getFirstTokenBetween(node.parent.object, node.parent.property, astUtils.isNotClosingParenToken);","","                    return fixer.removeRange([firstTokenToRemove.range[0], node.parent.parent.range[1]]);","                }","            });","        }","","        /**","         * Checks whether or not a given function node is the callee of `.bind()`","         * method.","         *","         * e.g. `(function() {}.bind(foo))`","         *","         * @param {ASTNode} node - A node to report. This is a FunctionExpression or","         *      an ArrowFunctionExpression.","         * @returns {boolean} `true` if the node is the callee of `.bind()` method.","         */","        function isCalleeOfBindMethod(node) {","            const parent = node.parent;","            const grandparent = parent.parent;","","            return (","                grandparent &&","                grandparent.type === \"CallExpression\" &&","                grandparent.callee === parent &&","                grandparent.arguments.length === 1 &&","                parent.type === \"MemberExpression\" &&","                parent.object === node &&","                astUtils.getStaticPropertyName(parent) === \"bind\"","            );","        }","","        /**","         * Adds a scope information object to the stack.","         *","         * @param {ASTNode} node - A node to add. This node is a FunctionExpression","         *      or a FunctionDeclaration node.","         * @returns {void}","         */","        function enterFunction(node) {","            scopeInfo = {","                isBound: isCalleeOfBindMethod(node),","                thisFound: false,","                upper: scopeInfo","            };","        }","","        /**","         * Removes the scope information object from the top of the stack.","         * At the same time, this reports the function node if the function has","         * `.bind()` and the `this` keywords found.","         *","         * @param {ASTNode} node - A node to remove. This node is a","         *      FunctionExpression or a FunctionDeclaration node.","         * @returns {void}","         */","        function exitFunction(node) {","            if (scopeInfo.isBound && !scopeInfo.thisFound) {","                report(node);","            }","","            scopeInfo = scopeInfo.upper;","        }","","        /**","         * Reports a given arrow function if the function is callee of `.bind()`","         * method.","         *","         * @param {ASTNode} node - A node to report. This node is an","         *      ArrowFunctionExpression.","         * @returns {void}","         */","        function exitArrowFunction(node) {","            if (isCalleeOfBindMethod(node)) {","                report(node);","            }","        }","","        /**","         * Set the mark as the `this` keyword was found in this scope.","         *","         * @returns {void}","         */","        function markAsThisFound() {","            if (scopeInfo) {","                scopeInfo.thisFound = true;","            }","        }","","        return {","            \"ArrowFunctionExpression:exit\": exitArrowFunction,","            FunctionDeclaration: enterFunction,","            \"FunctionDeclaration:exit\": exitFunction,","            FunctionExpression: enterFunction,","            \"FunctionExpression:exit\": exitFunction,","            ThisExpression: markAsThisFound","        };","    }","};",""],"l":{"11":1,"17":1,"31":0,"40":1,"41":0,"46":0,"49":0,"64":1,"65":0,"66":0,"68":0,"86":1,"87":0,"103":1,"104":0,"105":0,"108":0,"119":1,"120":0,"121":0,"130":1,"131":0,"132":0,"136":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-boolean-cast.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-boolean-cast.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"b":{"1":[0,0,0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":20}}},"2":{"name":"isInBooleanContext","line":50,"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":50}}},"3":{"name":"(anonymous_3)","line":63,"loc":{"start":{"line":63,"column":27},"end":{"line":63,"column":34}}},"4":{"name":"(anonymous_4)","line":89,"loc":{"start":{"line":89,"column":26},"end":{"line":89,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":122,"column":2}},"3":{"start":{"line":32,"column":8},"end":{"line":32,"column":51}},"4":{"start":{"line":35,"column":8},"end":{"line":41,"column":10}},"5":{"start":{"line":50,"column":8},"end":{"line":59,"column":9}},"6":{"start":{"line":51,"column":12},"end":{"line":58,"column":14}},"7":{"start":{"line":62,"column":8},"end":{"line":119,"column":10}},"8":{"start":{"line":64,"column":16},"end":{"line":66,"column":50}},"9":{"start":{"line":69,"column":16},"end":{"line":73,"column":17}},"10":{"start":{"line":72,"column":20},"end":{"line":72,"column":27}},"11":{"start":{"line":75,"column":16},"end":{"line":87,"column":17}},"12":{"start":{"line":82,"column":20},"end":{"line":86,"column":23}},"13":{"start":{"line":85,"column":38},"end":{"line":85,"column":98}},"14":{"start":{"line":90,"column":16},"end":{"line":90,"column":43}},"15":{"start":{"line":92,"column":16},"end":{"line":94,"column":17}},"16":{"start":{"line":93,"column":20},"end":{"line":93,"column":27}},"17":{"start":{"line":96,"column":16},"end":{"line":117,"column":17}},"18":{"start":{"line":97,"column":20},"end":{"line":116,"column":23}},"19":{"start":{"line":101,"column":28},"end":{"line":103,"column":29}},"20":{"start":{"line":102,"column":32},"end":{"line":102,"column":73}},"21":{"start":{"line":105,"column":28},"end":{"line":107,"column":29}},"22":{"start":{"line":106,"column":32},"end":{"line":106,"column":44}},"23":{"start":{"line":109,"column":28},"end":{"line":109,"column":63}},"24":{"start":{"line":111,"column":28},"end":{"line":113,"column":29}},"25":{"start":{"line":112,"column":32},"end":{"line":112,"column":100}},"26":{"start":{"line":114,"column":28},"end":{"line":114,"column":89}}},"branchMap":{"1":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":17},"end":{"line":52,"column":63}},{"start":{"line":53,"column":20},"end":{"line":53,"column":40}},{"start":{"line":56,"column":17},"end":{"line":56,"column":50}},{"start":{"line":57,"column":20},"end":{"line":57,"column":43}}]},"2":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":16},"end":{"line":69,"column":16}},{"start":{"line":69,"column":16},"end":{"line":69,"column":16}}]},"3":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":20},"end":{"line":69,"column":41}},{"start":{"line":70,"column":24},"end":{"line":70,"column":57}},{"start":{"line":71,"column":24},"end":{"line":71,"column":47}}]},"4":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":16},"end":{"line":75,"column":16}},{"start":{"line":75,"column":16},"end":{"line":75,"column":16}}]},"5":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":20},"end":{"line":75,"column":59}},{"start":{"line":78,"column":22},"end":{"line":78,"column":59}},{"start":{"line":78,"column":63},"end":{"line":78,"column":99}},{"start":{"line":79,"column":24},"end":{"line":79,"column":64}},{"start":{"line":80,"column":24},"end":{"line":80,"column":61}}]},"6":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16}},{"start":{"line":92,"column":16},"end":{"line":92,"column":16}}]},"7":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":20},"end":{"line":92,"column":53}},{"start":{"line":92,"column":57},"end":{"line":92,"column":87}}]},"8":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":16}},{"start":{"line":96,"column":16},"end":{"line":96,"column":16}}]},"9":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":28},"end":{"line":101,"column":28}},{"start":{"line":101,"column":28},"end":{"line":101,"column":28}}]},"10":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":28},"end":{"line":105,"column":28}},{"start":{"line":105,"column":28},"end":{"line":105,"column":28}}]},"11":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":32},"end":{"line":105,"column":57}},{"start":{"line":105,"column":61},"end":{"line":105,"column":103}}]},"12":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":28},"end":{"line":111,"column":28}},{"start":{"line":111,"column":28},"end":{"line":111,"column":28}}]}},"code":["/**"," * @fileoverview Rule to flag unnecessary double negation in Boolean contexts"," * @author Brandon Mills"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary boolean casts\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        // Node types which have a test which will coerce values to booleans.","        const BOOLEAN_NODE_TYPES = [","            \"IfStatement\",","            \"DoWhileStatement\",","            \"WhileStatement\",","            \"ConditionalExpression\",","            \"ForStatement\"","        ];","","        /**","         * Check if a node is in a context where its value would be coerced to a boolean at runtime.","         *","         * @param {Object} node The node","         * @param {Object} parent Its parent","         * @returns {boolean} If it is in a boolean context","         */","        function isInBooleanContext(node, parent) {","            return (","                (BOOLEAN_NODE_TYPES.indexOf(parent.type) !== -1 &&","                    node === parent.test) ||","","                // !<bool>","                (parent.type === \"UnaryExpression\" &&","                    parent.operator === \"!\")","            );","        }","","","        return {","            UnaryExpression(node) {","                const ancestors = context.getAncestors(),","                    parent = ancestors.pop(),","                    grandparent = ancestors.pop();","","                // Exit early if it's guaranteed not to match","                if (node.operator !== \"!\" ||","                        parent.type !== \"UnaryExpression\" ||","                        parent.operator !== \"!\") {","                    return;","                }","","                if (isInBooleanContext(parent, grandparent) ||","","                    // Boolean(<bool>) and new Boolean(<bool>)","                    ((grandparent.type === \"CallExpression\" || grandparent.type === \"NewExpression\") &&","                        grandparent.callee.type === \"Identifier\" &&","                        grandparent.callee.name === \"Boolean\")","                ) {","                    context.report({","                        node,","                        message: \"Redundant double negation.\",","                        fix: fixer => fixer.replaceText(parent, sourceCode.getText(node.argument))","                    });","                }","            },","            CallExpression(node) {","                const parent = node.parent;","","                if (node.callee.type !== \"Identifier\" || node.callee.name !== \"Boolean\") {","                    return;","                }","","                if (isInBooleanContext(node, parent)) {","                    context.report({","                        node,","                        message: \"Redundant Boolean call.\",","                        fix: fixer => {","                            if (!node.arguments.length) {","                                return fixer.replaceText(parent, \"true\");","                            }","","                            if (node.arguments.length > 1 || node.arguments[0].type === \"SpreadElement\") {","                                return null;","                            }","","                            const argument = node.arguments[0];","","                            if (astUtils.getPrecedence(argument) < astUtils.getPrecedence(node.parent)) {","                                return fixer.replaceText(node, `(${sourceCode.getText(argument)})`);","                            }","                            return fixer.replaceText(node, sourceCode.getText(argument));","                        }","                    });","                }","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"32":0,"35":0,"50":1,"51":0,"62":0,"64":0,"69":0,"72":0,"75":0,"82":0,"85":0,"90":0,"92":0,"93":0,"96":0,"97":0,"101":0,"102":0,"105":0,"106":0,"109":0,"111":0,"112":0,"114":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-label.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-label.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":1,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":20}}},"2":{"name":"enterBreakableStatement","line":41,"loc":{"start":{"line":41,"column":8},"end":{"line":41,"column":47}}},"3":{"name":"exitBreakableStatement","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":42}}},"4":{"name":"enterLabeledStatement","line":67,"loc":{"start":{"line":67,"column":8},"end":{"line":67,"column":45}}},"5":{"name":"exitLabeledStatement","line":86,"loc":{"start":{"line":86,"column":8},"end":{"line":86,"column":44}}},"6":{"name":"reportIfUnnecessary","line":99,"loc":{"start":{"line":99,"column":8},"end":{"line":99,"column":43}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":140,"column":2}},"3":{"start":{"line":32,"column":8},"end":{"line":32,"column":51}},"4":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"5":{"start":{"line":41,"column":8},"end":{"line":47,"column":9}},"6":{"start":{"line":42,"column":12},"end":{"line":46,"column":14}},"7":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"8":{"start":{"line":55,"column":12},"end":{"line":55,"column":40}},"9":{"start":{"line":67,"column":8},"end":{"line":75,"column":9}},"10":{"start":{"line":68,"column":12},"end":{"line":74,"column":13}},"11":{"start":{"line":69,"column":16},"end":{"line":73,"column":18}},"12":{"start":{"line":86,"column":8},"end":{"line":90,"column":9}},"13":{"start":{"line":87,"column":12},"end":{"line":89,"column":13}},"14":{"start":{"line":88,"column":16},"end":{"line":88,"column":44}},"15":{"start":{"line":99,"column":8},"end":{"line":119,"column":9}},"16":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"17":{"start":{"line":101,"column":16},"end":{"line":101,"column":23}},"18":{"start":{"line":104,"column":12},"end":{"line":104,"column":41}},"19":{"start":{"line":106,"column":12},"end":{"line":118,"column":13}},"20":{"start":{"line":107,"column":16},"end":{"line":117,"column":17}},"21":{"start":{"line":108,"column":20},"end":{"line":115,"column":21}},"22":{"start":{"line":109,"column":24},"end":{"line":114,"column":27}},"23":{"start":{"line":113,"column":42},"end":{"line":113,"column":122}},"24":{"start":{"line":116,"column":20},"end":{"line":116,"column":27}},"25":{"start":{"line":121,"column":8},"end":{"line":138,"column":10}}},"branchMap":{"1":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":65},"end":{"line":43,"column":82}},{"start":{"line":43,"column":85},"end":{"line":43,"column":89}}]},"2":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":12}},{"start":{"line":68,"column":12},"end":{"line":68,"column":12}}]},"3":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":12},"end":{"line":87,"column":12}},{"start":{"line":87,"column":12},"end":{"line":87,"column":12}}]},"4":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":100,"column":12}},{"start":{"line":100,"column":12},"end":{"line":100,"column":12}}]},"5":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":16},"end":{"line":107,"column":16}},{"start":{"line":107,"column":16},"end":{"line":107,"column":16}}]},"6":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":20},"end":{"line":107,"column":34}},{"start":{"line":107,"column":38},"end":{"line":107,"column":48}},{"start":{"line":107,"column":52},"end":{"line":107,"column":86}}]},"7":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":20},"end":{"line":108,"column":20}},{"start":{"line":108,"column":20},"end":{"line":108,"column":20}}]},"8":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":24},"end":{"line":108,"column":38}},{"start":{"line":108,"column":42},"end":{"line":108,"column":52}},{"start":{"line":108,"column":56},"end":{"line":108,"column":90}}]}},"code":["/**"," * @fileoverview Rule to disallow unnecessary labels"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary labels\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        let scopeInfo = null;","","        /**","         * Creates a new scope with a breakable statement.","         *","         * @param {ASTNode} node - A node to create. This is a BreakableStatement.","         * @returns {void}","         */","        function enterBreakableStatement(node) {","            scopeInfo = {","                label: node.parent.type === \"LabeledStatement\" ? node.parent.label : null,","                breakable: true,","                upper: scopeInfo","            };","        }","","        /**","         * Removes the top scope of the stack.","         *","         * @returns {void}","         */","        function exitBreakableStatement() {","            scopeInfo = scopeInfo.upper;","        }","","        /**","         * Creates a new scope with a labeled statement.","         *","         * This ignores it if the body is a breakable statement.","         * In this case it's handled in the `enterBreakableStatement` function.","         *","         * @param {ASTNode} node - A node to create. This is a LabeledStatement.","         * @returns {void}","         */","        function enterLabeledStatement(node) {","            if (!astUtils.isBreakableStatement(node.body)) {","                scopeInfo = {","                    label: node.label,","                    breakable: false,","                    upper: scopeInfo","                };","            }","        }","","        /**","         * Removes the top scope of the stack.","         *","         * This ignores it if the body is a breakable statement.","         * In this case it's handled in the `exitBreakableStatement` function.","         *","         * @param {ASTNode} node - A node. This is a LabeledStatement.","         * @returns {void}","         */","        function exitLabeledStatement(node) {","            if (!astUtils.isBreakableStatement(node.body)) {","                scopeInfo = scopeInfo.upper;","            }","        }","","        /**","         * Reports a given control node if it's unnecessary.","         *","         * @param {ASTNode} node - A node. This is a BreakStatement or a","         *      ContinueStatement.","         * @returns {void}","         */","        function reportIfUnnecessary(node) {","            if (!node.label) {","                return;","            }","","            const labelNode = node.label;","","            for (let info = scopeInfo; info !== null; info = info.upper) {","                if (info.breakable || info.label && info.label.name === labelNode.name) {","                    if (info.breakable && info.label && info.label.name === labelNode.name) {","                        context.report({","                            node: labelNode,","                            message: \"This label '{{name}}' is unnecessary.\",","                            data: labelNode,","                            fix: fixer => fixer.removeRange([sourceCode.getFirstToken(node).range[1], labelNode.range[1]])","                        });","                    }","                    return;","                }","            }","        }","","        return {","            WhileStatement: enterBreakableStatement,","            \"WhileStatement:exit\": exitBreakableStatement,","            DoWhileStatement: enterBreakableStatement,","            \"DoWhileStatement:exit\": exitBreakableStatement,","            ForStatement: enterBreakableStatement,","            \"ForStatement:exit\": exitBreakableStatement,","            ForInStatement: enterBreakableStatement,","            \"ForInStatement:exit\": exitBreakableStatement,","            ForOfStatement: enterBreakableStatement,","            \"ForOfStatement:exit\": exitBreakableStatement,","            SwitchStatement: enterBreakableStatement,","            \"SwitchStatement:exit\": exitBreakableStatement,","            LabeledStatement: enterLabeledStatement,","            \"LabeledStatement:exit\": exitLabeledStatement,","            BreakStatement: reportIfUnnecessary,","            ContinueStatement: reportIfUnnecessary","        };","    }","};",""],"l":{"12":1,"18":1,"32":0,"33":0,"41":1,"42":0,"54":1,"55":0,"67":1,"68":0,"69":0,"86":1,"87":0,"88":0,"99":1,"100":0,"101":0,"104":0,"106":0,"107":0,"108":0,"109":0,"113":0,"116":0,"121":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-parens.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-parens.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":1,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":1,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":1,"110":0,"111":0,"112":0,"113":0,"114":0,"115":1,"116":0,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0},"b":{"1":[0,0,0],"2":[0,0,0],"3":[0,0,0],"4":[0,0,0],"5":[0,0],"6":[0,0,0,0],"7":[0,0,0],"8":[0,0,0,0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0,0,0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0,0],"43":[0,0,0,0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0,0,0,0],"50":[0,0,0],"51":[0,0],"52":[0,0,0,0,0],"53":[0,0],"54":[0,0,0,0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0,0,0,0,0,0],"63":[0,0],"64":[0,0],"65":[0,0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0,0,0],"96":[0,0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0,0],"101":[0,0],"102":[0,0],"103":[0,0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0,0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"fnMap":{"1":{"name":"(anonymous_1)","line":60,"loc":{"start":{"line":60,"column":10},"end":{"line":60,"column":20}}},"2":{"name":"ruleApplies","line":80,"loc":{"start":{"line":80,"column":8},"end":{"line":80,"column":35}}},"3":{"name":"isParenthesisedTwice","line":115,"loc":{"start":{"line":115,"column":8},"end":{"line":115,"column":44}}},"4":{"name":"hasExcessParens","line":130,"loc":{"start":{"line":130,"column":8},"end":{"line":130,"column":39}}},"5":{"name":"hasDoubleExcessParens","line":141,"loc":{"start":{"line":141,"column":8},"end":{"line":141,"column":45}}},"6":{"name":"isCondAssignException","line":151,"loc":{"start":{"line":151,"column":8},"end":{"line":151,"column":45}}},"7":{"name":"isInReturnStatement","line":161,"loc":{"start":{"line":161,"column":8},"end":{"line":161,"column":43}}},"8":{"name":"isNewExpressionWithParens","line":179,"loc":{"start":{"line":179,"column":8},"end":{"line":179,"column":58}}},"9":{"name":"containsAssignment","line":192,"loc":{"start":{"line":192,"column":8},"end":{"line":192,"column":42}}},"10":{"name":"isReturnAssignException","line":212,"loc":{"start":{"line":212,"column":8},"end":{"line":212,"column":47}}},"11":{"name":"hasExcessParensNoLineTerminator","line":234,"loc":{"start":{"line":234,"column":8},"end":{"line":234,"column":62}}},"12":{"name":"requiresLeadingSpace","line":248,"loc":{"start":{"line":248,"column":8},"end":{"line":248,"column":44}}},"13":{"name":"report","line":283,"loc":{"start":{"line":283,"column":8},"end":{"line":283,"column":30}}},"14":{"name":"(anonymous_14)","line":295,"loc":{"start":{"line":295,"column":19},"end":{"line":295,"column":27}}},"15":{"name":"checkUnaryUpdate","line":312,"loc":{"start":{"line":312,"column":8},"end":{"line":312,"column":40}}},"16":{"name":"checkCallNew","line":328,"loc":{"start":{"line":328,"column":8},"end":{"line":328,"column":36}}},"17":{"name":"checkBinaryLogical","line":358,"loc":{"start":{"line":358,"column":8},"end":{"line":358,"column":42}}},"18":{"name":"checkClass","line":380,"loc":{"start":{"line":380,"column":8},"end":{"line":380,"column":34}}},"19":{"name":"checkSpreadOperator","line":401,"loc":{"start":{"line":401,"column":8},"end":{"line":401,"column":43}}},"20":{"name":"checkExpressionOrExportStatement","line":416,"loc":{"start":{"line":416,"column":8},"end":{"line":416,"column":56}}},"21":{"name":"(anonymous_21)","line":440,"loc":{"start":{"line":440,"column":27},"end":{"line":440,"column":34}}},"22":{"name":"(anonymous_22)","line":448,"loc":{"start":{"line":448,"column":35},"end":{"line":448,"column":42}}},"23":{"name":"(anonymous_23)","line":466,"loc":{"start":{"line":466,"column":32},"end":{"line":466,"column":39}}},"24":{"name":"(anonymous_24)","line":479,"loc":{"start":{"line":479,"column":33},"end":{"line":479,"column":40}}},"25":{"name":"(anonymous_25)","line":497,"loc":{"start":{"line":497,"column":28},"end":{"line":497,"column":35}}},"26":{"name":"(anonymous_26)","line":506,"loc":{"start":{"line":506,"column":26},"end":{"line":506,"column":33}}},"27":{"name":"(anonymous_27)","line":512,"loc":{"start":{"line":512,"column":26},"end":{"line":512,"column":33}}},"28":{"name":"(anonymous_28)","line":518,"loc":{"start":{"line":518,"column":24},"end":{"line":518,"column":31}}},"29":{"name":"(anonymous_29)","line":532,"loc":{"start":{"line":532,"column":23},"end":{"line":532,"column":30}}},"30":{"name":"(anonymous_30)","line":540,"loc":{"start":{"line":540,"column":28},"end":{"line":540,"column":35}}},"31":{"name":"(anonymous_31)","line":563,"loc":{"start":{"line":563,"column":28},"end":{"line":563,"column":35}}},"32":{"name":"(anonymous_32)","line":573,"loc":{"start":{"line":573,"column":27},"end":{"line":573,"column":34}}},"33":{"name":"(anonymous_33)","line":589,"loc":{"start":{"line":589,"column":30},"end":{"line":589,"column":37}}},"34":{"name":"(anonymous_34)","line":597,"loc":{"start":{"line":597,"column":22},"end":{"line":597,"column":29}}},"35":{"name":"(anonymous_35)","line":603,"loc":{"start":{"line":603,"column":27},"end":{"line":603,"column":34}}},"36":{"name":"(anonymous_36)","line":609,"loc":{"start":{"line":609,"column":26},"end":{"line":609,"column":33}}},"37":{"name":"(anonymous_37)","line":621,"loc":{"start":{"line":621,"column":30},"end":{"line":621,"column":37}}},"38":{"name":"(anonymous_38)","line":631,"loc":{"start":{"line":631,"column":26},"end":{"line":631,"column":33}}},"39":{"name":"(anonymous_39)","line":637,"loc":{"start":{"line":637,"column":25},"end":{"line":637,"column":32}}},"40":{"name":"(anonymous_40)","line":643,"loc":{"start":{"line":643,"column":27},"end":{"line":643,"column":34}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":44}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"3":{"start":{"line":14,"column":0},"end":{"line":664,"column":2}},"4":{"start":{"line":61,"column":8},"end":{"line":61,"column":51}},"5":{"start":{"line":63,"column":8},"end":{"line":63,"column":45}},"6":{"start":{"line":64,"column":8},"end":{"line":64,"column":84}},"7":{"start":{"line":65,"column":8},"end":{"line":65,"column":50}},"8":{"start":{"line":66,"column":8},"end":{"line":66,"column":61}},"9":{"start":{"line":67,"column":8},"end":{"line":67,"column":117}},"10":{"start":{"line":68,"column":8},"end":{"line":68,"column":118}},"11":{"start":{"line":69,"column":8},"end":{"line":69,"column":114}},"12":{"start":{"line":70,"column":8},"end":{"line":70,"column":91}},"13":{"start":{"line":71,"column":8},"end":{"line":71,"column":91}},"14":{"start":{"line":72,"column":8},"end":{"line":72,"column":83}},"15":{"start":{"line":80,"column":8},"end":{"line":107,"column":9}},"16":{"start":{"line":81,"column":12},"end":{"line":104,"column":13}},"17":{"start":{"line":82,"column":16},"end":{"line":82,"column":79}},"18":{"start":{"line":84,"column":16},"end":{"line":103,"column":17}},"19":{"start":{"line":88,"column":24},"end":{"line":88,"column":37}},"20":{"start":{"line":92,"column":24},"end":{"line":92,"column":44}},"21":{"start":{"line":96,"column":24},"end":{"line":96,"column":45}},"22":{"start":{"line":100,"column":24},"end":{"line":100,"column":30}},"23":{"start":{"line":106,"column":12},"end":{"line":106,"column":110}},"24":{"start":{"line":115,"column":8},"end":{"line":122,"column":9}},"25":{"start":{"line":116,"column":12},"end":{"line":117,"column":62}},"26":{"start":{"line":119,"column":12},"end":{"line":121,"column":95}},"27":{"start":{"line":130,"column":8},"end":{"line":132,"column":9}},"28":{"start":{"line":131,"column":12},"end":{"line":131,"column":62}},"29":{"start":{"line":141,"column":8},"end":{"line":143,"column":9}},"30":{"start":{"line":142,"column":12},"end":{"line":142,"column":67}},"31":{"start":{"line":151,"column":8},"end":{"line":153,"column":9}},"32":{"start":{"line":152,"column":12},"end":{"line":152,"column":83}},"33":{"start":{"line":161,"column":8},"end":{"line":171,"column":9}},"34":{"start":{"line":162,"column":12},"end":{"line":168,"column":13}},"35":{"start":{"line":163,"column":16},"end":{"line":166,"column":17}},"36":{"start":{"line":165,"column":20},"end":{"line":165,"column":32}},"37":{"start":{"line":167,"column":16},"end":{"line":167,"column":35}},"38":{"start":{"line":170,"column":12},"end":{"line":170,"column":25}},"39":{"start":{"line":179,"column":8},"end":{"line":184,"column":9}},"40":{"start":{"line":180,"column":12},"end":{"line":180,"column":69}},"41":{"start":{"line":181,"column":12},"end":{"line":181,"column":74}},"42":{"start":{"line":183,"column":12},"end":{"line":183,"column":147}},"43":{"start":{"line":192,"column":8},"end":{"line":204,"column":9}},"44":{"start":{"line":193,"column":12},"end":{"line":201,"column":13}},"45":{"start":{"line":194,"column":16},"end":{"line":194,"column":28}},"46":{"start":{"line":195,"column":19},"end":{"line":201,"column":13}},"47":{"start":{"line":197,"column":16},"end":{"line":197,"column":28}},"48":{"start":{"line":198,"column":19},"end":{"line":201,"column":13}},"49":{"start":{"line":200,"column":16},"end":{"line":200,"column":28}},"50":{"start":{"line":203,"column":12},"end":{"line":203,"column":25}},"51":{"start":{"line":212,"column":8},"end":{"line":224,"column":9}},"52":{"start":{"line":213,"column":12},"end":{"line":215,"column":13}},"53":{"start":{"line":214,"column":16},"end":{"line":214,"column":29}},"54":{"start":{"line":217,"column":12},"end":{"line":221,"column":13}},"55":{"start":{"line":218,"column":16},"end":{"line":218,"column":74}},"56":{"start":{"line":219,"column":19},"end":{"line":221,"column":13}},"57":{"start":{"line":220,"column":16},"end":{"line":220,"column":53}},"58":{"start":{"line":222,"column":12},"end":{"line":222,"column":44}},"59":{"start":{"line":234,"column":8},"end":{"line":240,"column":9}},"60":{"start":{"line":235,"column":12},"end":{"line":237,"column":13}},"61":{"start":{"line":236,"column":16},"end":{"line":236,"column":45}},"62":{"start":{"line":239,"column":12},"end":{"line":239,"column":47}},"63":{"start":{"line":248,"column":8},"end":{"line":275,"column":9}},"64":{"start":{"line":249,"column":12},"end":{"line":249,"column":67}},"65":{"start":{"line":250,"column":12},"end":{"line":250,"column":76}},"66":{"start":{"line":251,"column":12},"end":{"line":251,"column":62}},"67":{"start":{"line":254,"column":12},"end":{"line":256,"column":13}},"68":{"start":{"line":255,"column":16},"end":{"line":255,"column":29}},"69":{"start":{"line":259,"column":12},"end":{"line":259,"column":129}},"70":{"start":{"line":263,"column":12},"end":{"line":263,"column":110}},"71":{"start":{"line":266,"column":12},"end":{"line":266,"column":121}},"72":{"start":{"line":267,"column":12},"end":{"line":267,"column":122}},"73":{"start":{"line":269,"column":12},"end":{"line":269,"column":101}},"74":{"start":{"line":270,"column":12},"end":{"line":270,"column":102}},"75":{"start":{"line":272,"column":12},"end":{"line":274,"column":63}},"76":{"start":{"line":283,"column":8},"end":{"line":304,"column":9}},"77":{"start":{"line":284,"column":12},"end":{"line":284,"column":67}},"78":{"start":{"line":285,"column":12},"end":{"line":285,"column":67}},"79":{"start":{"line":287,"column":12},"end":{"line":289,"column":13}},"80":{"start":{"line":288,"column":16},"end":{"line":288,"column":23}},"81":{"start":{"line":291,"column":12},"end":{"line":303,"column":15}},"82":{"start":{"line":296,"column":20},"end":{"line":296,"column":121}},"83":{"start":{"line":298,"column":20},"end":{"line":301,"column":86}},"84":{"start":{"line":312,"column":8},"end":{"line":320,"column":9}},"85":{"start":{"line":313,"column":12},"end":{"line":315,"column":13}},"86":{"start":{"line":314,"column":16},"end":{"line":314,"column":23}},"87":{"start":{"line":317,"column":12},"end":{"line":319,"column":13}},"88":{"start":{"line":318,"column":16},"end":{"line":318,"column":38}},"89":{"start":{"line":328,"column":8},"end":{"line":350,"column":9}},"90":{"start":{"line":329,"column":12},"end":{"line":338,"column":13}},"91":{"start":{"line":337,"column":16},"end":{"line":337,"column":36}},"92":{"start":{"line":339,"column":12},"end":{"line":349,"column":13}},"93":{"start":{"line":340,"column":16},"end":{"line":342,"column":17}},"94":{"start":{"line":341,"column":20},"end":{"line":341,"column":46}},"95":{"start":{"line":344,"column":16},"end":{"line":348,"column":19}},"96":{"start":{"line":345,"column":20},"end":{"line":347,"column":21}},"97":{"start":{"line":346,"column":24},"end":{"line":346,"column":36}},"98":{"start":{"line":358,"column":8},"end":{"line":373,"column":9}},"99":{"start":{"line":359,"column":12},"end":{"line":359,"column":42}},"100":{"start":{"line":360,"column":12},"end":{"line":360,"column":57}},"101":{"start":{"line":361,"column":12},"end":{"line":361,"column":59}},"102":{"start":{"line":362,"column":12},"end":{"line":362,"column":60}},"103":{"start":{"line":363,"column":12},"end":{"line":364,"column":71}},"104":{"start":{"line":365,"column":12},"end":{"line":365,"column":137}},"105":{"start":{"line":367,"column":12},"end":{"line":369,"column":13}},"106":{"start":{"line":368,"column":16},"end":{"line":368,"column":34}},"107":{"start":{"line":370,"column":12},"end":{"line":372,"column":13}},"108":{"start":{"line":371,"column":16},"end":{"line":371,"column":35}},"109":{"start":{"line":380,"column":8},"end":{"line":394,"column":9}},"110":{"start":{"line":381,"column":12},"end":{"line":383,"column":13}},"111":{"start":{"line":382,"column":16},"end":{"line":382,"column":23}},"112":{"start":{"line":387,"column":12},"end":{"line":389,"column":57}},"113":{"start":{"line":391,"column":12},"end":{"line":393,"column":13}},"114":{"start":{"line":392,"column":16},"end":{"line":392,"column":40}},"115":{"start":{"line":401,"column":8},"end":{"line":409,"column":9}},"116":{"start":{"line":402,"column":12},"end":{"line":404,"column":55}},"117":{"start":{"line":406,"column":12},"end":{"line":408,"column":13}},"118":{"start":{"line":407,"column":16},"end":{"line":407,"column":38}},"119":{"start":{"line":416,"column":8},"end":{"line":437,"column":9}},"120":{"start":{"line":417,"column":12},"end":{"line":417,"column":120}},"121":{"start":{"line":418,"column":12},"end":{"line":418,"column":102}},"122":{"start":{"line":420,"column":12},"end":{"line":432,"column":13}},"123":{"start":{"line":431,"column":16},"end":{"line":431,"column":48}},"124":{"start":{"line":434,"column":12},"end":{"line":436,"column":13}},"125":{"start":{"line":435,"column":16},"end":{"line":435,"column":29}},"126":{"start":{"line":439,"column":8},"end":{"line":661,"column":10}},"127":{"start":{"line":441,"column":16},"end":{"line":445,"column":19}},"128":{"start":{"line":442,"column":20},"end":{"line":444,"column":21}},"129":{"start":{"line":443,"column":24},"end":{"line":443,"column":34}},"130":{"start":{"line":449,"column":16},"end":{"line":451,"column":17}},"131":{"start":{"line":450,"column":20},"end":{"line":450,"column":27}},"132":{"start":{"line":453,"column":16},"end":{"line":463,"column":17}},"133":{"start":{"line":454,"column":20},"end":{"line":454,"column":112}},"134":{"start":{"line":455,"column":20},"end":{"line":455,"column":87}},"135":{"start":{"line":457,"column":20},"end":{"line":459,"column":21}},"136":{"start":{"line":458,"column":24},"end":{"line":458,"column":59}},"137":{"start":{"line":460,"column":20},"end":{"line":462,"column":21}},"138":{"start":{"line":461,"column":24},"end":{"line":461,"column":42}},"139":{"start":{"line":467,"column":16},"end":{"line":469,"column":17}},"140":{"start":{"line":468,"column":20},"end":{"line":468,"column":27}},"141":{"start":{"line":471,"column":16},"end":{"line":473,"column":17}},"142":{"start":{"line":472,"column":20},"end":{"line":472,"column":39}},"143":{"start":{"line":480,"column":16},"end":{"line":482,"column":17}},"144":{"start":{"line":481,"column":20},"end":{"line":481,"column":27}},"145":{"start":{"line":484,"column":16},"end":{"line":486,"column":17}},"146":{"start":{"line":485,"column":20},"end":{"line":485,"column":38}},"147":{"start":{"line":488,"column":16},"end":{"line":490,"column":17}},"148":{"start":{"line":489,"column":20},"end":{"line":489,"column":44}},"149":{"start":{"line":492,"column":16},"end":{"line":494,"column":17}},"150":{"start":{"line":493,"column":20},"end":{"line":493,"column":43}},"151":{"start":{"line":498,"column":16},"end":{"line":500,"column":17}},"152":{"start":{"line":499,"column":20},"end":{"line":499,"column":38}},"153":{"start":{"line":503,"column":46},"end":{"line":503,"column":96}},"154":{"start":{"line":504,"column":41},"end":{"line":504,"column":90}},"155":{"start":{"line":507,"column":16},"end":{"line":509,"column":17}},"156":{"start":{"line":508,"column":20},"end":{"line":508,"column":39}},"157":{"start":{"line":513,"column":16},"end":{"line":515,"column":17}},"158":{"start":{"line":514,"column":20},"end":{"line":514,"column":39}},"159":{"start":{"line":519,"column":16},"end":{"line":521,"column":17}},"160":{"start":{"line":520,"column":20},"end":{"line":520,"column":38}},"161":{"start":{"line":523,"column":16},"end":{"line":525,"column":17}},"162":{"start":{"line":524,"column":20},"end":{"line":524,"column":38}},"163":{"start":{"line":527,"column":16},"end":{"line":529,"column":17}},"164":{"start":{"line":528,"column":20},"end":{"line":528,"column":40}},"165":{"start":{"line":533,"column":16},"end":{"line":535,"column":17}},"166":{"start":{"line":534,"column":20},"end":{"line":534,"column":38}},"167":{"start":{"line":541,"column":16},"end":{"line":555,"column":17}},"168":{"start":{"line":554,"column":20},"end":{"line":554,"column":40}},"169":{"start":{"line":556,"column":16},"end":{"line":558,"column":17}},"170":{"start":{"line":557,"column":20},"end":{"line":557,"column":42}},"171":{"start":{"line":564,"column":16},"end":{"line":570,"column":19}},"172":{"start":{"line":565,"column":20},"end":{"line":565,"column":38}},"173":{"start":{"line":567,"column":20},"end":{"line":569,"column":21}},"174":{"start":{"line":568,"column":24},"end":{"line":568,"column":34}},"175":{"start":{"line":574,"column":16},"end":{"line":574,"column":67}},"176":{"start":{"line":576,"column":16},"end":{"line":578,"column":17}},"177":{"start":{"line":577,"column":20},"end":{"line":577,"column":27}},"178":{"start":{"line":580,"column":16},"end":{"line":586,"column":17}},"179":{"start":{"line":585,"column":20},"end":{"line":585,"column":42}},"180":{"start":{"line":590,"column":16},"end":{"line":594,"column":19}},"181":{"start":{"line":591,"column":20},"end":{"line":593,"column":21}},"182":{"start":{"line":592,"column":24},"end":{"line":592,"column":34}},"183":{"start":{"line":598,"column":16},"end":{"line":600,"column":17}},"184":{"start":{"line":599,"column":20},"end":{"line":599,"column":38}},"185":{"start":{"line":604,"column":16},"end":{"line":606,"column":17}},"186":{"start":{"line":605,"column":20},"end":{"line":605,"column":46}},"187":{"start":{"line":610,"column":16},"end":{"line":610,"column":66}},"188":{"start":{"line":612,"column":16},"end":{"line":614,"column":17}},"189":{"start":{"line":613,"column":20},"end":{"line":613,"column":42}},"190":{"start":{"line":622,"column":16},"end":{"line":628,"column":17}},"191":{"start":{"line":627,"column":20},"end":{"line":627,"column":38}},"192":{"start":{"line":632,"column":16},"end":{"line":634,"column":17}},"193":{"start":{"line":633,"column":20},"end":{"line":633,"column":38}},"194":{"start":{"line":638,"column":16},"end":{"line":640,"column":17}},"195":{"start":{"line":639,"column":20},"end":{"line":639,"column":40}},"196":{"start":{"line":644,"column":16},"end":{"line":652,"column":17}},"197":{"start":{"line":645,"column":20},"end":{"line":645,"column":70}},"198":{"start":{"line":647,"column":20},"end":{"line":651,"column":21}},"199":{"start":{"line":650,"column":24},"end":{"line":650,"column":46}}},"branchMap":{"1":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":35},"end":{"line":67,"column":44}},{"start":{"line":67,"column":48},"end":{"line":67,"column":66}},{"start":{"line":67,"column":70},"end":{"line":67,"column":116}}]},"2":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":30},"end":{"line":68,"column":39}},{"start":{"line":68,"column":43},"end":{"line":68,"column":61}},{"start":{"line":68,"column":65},"end":{"line":68,"column":117}}]},"3":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":37},"end":{"line":69,"column":46}},{"start":{"line":69,"column":50},"end":{"line":69,"column":68}},{"start":{"line":69,"column":72},"end":{"line":69,"column":113}}]},"4":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":27},"end":{"line":70,"column":36}},{"start":{"line":70,"column":40},"end":{"line":70,"column":58}},{"start":{"line":70,"column":62},"end":{"line":70,"column":90}}]},"5":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":12},"end":{"line":81,"column":12}},{"start":{"line":81,"column":12},"end":{"line":81,"column":12}}]},"6":{"line":84,"type":"switch","locations":[{"start":{"line":87,"column":20},"end":{"line":88,"column":37}},{"start":{"line":91,"column":20},"end":{"line":92,"column":44}},{"start":{"line":95,"column":20},"end":{"line":96,"column":45}},{"start":{"line":99,"column":20},"end":{"line":100,"column":30}}]},"7":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":19},"end":{"line":106,"column":28}},{"start":{"line":106,"column":32},"end":{"line":106,"column":66}},{"start":{"line":106,"column":70},"end":{"line":106,"column":109}}]},"8":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":19},"end":{"line":119,"column":40}},{"start":{"line":119,"column":44},"end":{"line":119,"column":57}},{"start":{"line":119,"column":61},"end":{"line":119,"column":70}},{"start":{"line":120,"column":16},"end":{"line":120,"column":59}},{"start":{"line":120,"column":63},"end":{"line":120,"column":102}},{"start":{"line":121,"column":16},"end":{"line":121,"column":55}},{"start":{"line":121,"column":59},"end":{"line":121,"column":94}}]},"9":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":19},"end":{"line":131,"column":36}},{"start":{"line":131,"column":40},"end":{"line":131,"column":61}}]},"10":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":19},"end":{"line":142,"column":36}},{"start":{"line":142,"column":40},"end":{"line":142,"column":66}}]},"11":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":19},"end":{"line":152,"column":37}},{"start":{"line":152,"column":41},"end":{"line":152,"column":82}}]},"12":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":16},"end":{"line":163,"column":16}},{"start":{"line":163,"column":16},"end":{"line":163,"column":16}}]},"13":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":20},"end":{"line":163,"column":51}},{"start":{"line":164,"column":25},"end":{"line":164,"column":64}},{"start":{"line":164,"column":68},"end":{"line":164,"column":103}}]},"14":{"line":183,"type":"binary-expr","locations":[{"start":{"line":183,"column":19},"end":{"line":183,"column":53}},{"start":{"line":183,"column":57},"end":{"line":183,"column":103}},{"start":{"line":183,"column":107},"end":{"line":183,"column":146}}]},"15":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":12},"end":{"line":193,"column":12}},{"start":{"line":193,"column":12},"end":{"line":193,"column":12}}]},"16":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":19},"end":{"line":195,"column":19}},{"start":{"line":195,"column":19},"end":{"line":195,"column":19}}]},"17":{"line":195,"type":"binary-expr","locations":[{"start":{"line":195,"column":23},"end":{"line":195,"column":60}},{"start":{"line":196,"column":21},"end":{"line":196,"column":68}},{"start":{"line":196,"column":72},"end":{"line":196,"column":118}}]},"18":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":19},"end":{"line":198,"column":19}},{"start":{"line":198,"column":19},"end":{"line":198,"column":19}}]},"19":{"line":198,"type":"binary-expr","locations":[{"start":{"line":198,"column":24},"end":{"line":198,"column":33}},{"start":{"line":198,"column":37},"end":{"line":198,"column":78}},{"start":{"line":199,"column":21},"end":{"line":199,"column":31}},{"start":{"line":199,"column":35},"end":{"line":199,"column":77}}]},"20":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":12},"end":{"line":213,"column":12}},{"start":{"line":213,"column":12},"end":{"line":213,"column":12}}]},"21":{"line":213,"type":"binary-expr","locations":[{"start":{"line":213,"column":16},"end":{"line":213,"column":37}},{"start":{"line":213,"column":41},"end":{"line":213,"column":67}}]},"22":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":12},"end":{"line":217,"column":12}},{"start":{"line":217,"column":12},"end":{"line":217,"column":12}}]},"23":{"line":218,"type":"binary-expr","locations":[{"start":{"line":218,"column":23},"end":{"line":218,"column":36}},{"start":{"line":218,"column":40},"end":{"line":218,"column":73}}]},"24":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":19},"end":{"line":219,"column":19}},{"start":{"line":219,"column":19},"end":{"line":219,"column":19}}]},"25":{"line":219,"type":"binary-expr","locations":[{"start":{"line":219,"column":23},"end":{"line":219,"column":62}},{"start":{"line":219,"column":66},"end":{"line":219,"column":101}}]},"26":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":12},"end":{"line":235,"column":12}},{"start":{"line":235,"column":12},"end":{"line":235,"column":12}}]},"27":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":12},"end":{"line":254,"column":12}},{"start":{"line":254,"column":12},"end":{"line":254,"column":12}}]},"28":{"line":254,"type":"binary-expr","locations":[{"start":{"line":254,"column":16},"end":{"line":254,"column":37}},{"start":{"line":254,"column":41},"end":{"line":254,"column":90}}]},"29":{"line":266,"type":"binary-expr","locations":[{"start":{"line":266,"column":40},"end":{"line":266,"column":82}},{"start":{"line":266,"column":86},"end":{"line":266,"column":120}}]},"30":{"line":267,"type":"binary-expr","locations":[{"start":{"line":267,"column":41},"end":{"line":267,"column":83}},{"start":{"line":267,"column":87},"end":{"line":267,"column":121}}]},"31":{"line":269,"type":"binary-expr","locations":[{"start":{"line":269,"column":40},"end":{"line":269,"column":72}},{"start":{"line":269,"column":76},"end":{"line":269,"column":100}}]},"32":{"line":270,"type":"binary-expr","locations":[{"start":{"line":270,"column":41},"end":{"line":270,"column":73}},{"start":{"line":270,"column":77},"end":{"line":270,"column":101}}]},"33":{"line":272,"type":"binary-expr","locations":[{"start":{"line":272,"column":20},"end":{"line":272,"column":43}},{"start":{"line":272,"column":47},"end":{"line":272,"column":71}},{"start":{"line":273,"column":17},"end":{"line":273,"column":36}},{"start":{"line":273,"column":40},"end":{"line":273,"column":59}},{"start":{"line":274,"column":17},"end":{"line":274,"column":37}},{"start":{"line":274,"column":41},"end":{"line":274,"column":61}}]},"34":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":12},"end":{"line":287,"column":12}},{"start":{"line":287,"column":12},"end":{"line":287,"column":12}}]},"35":{"line":287,"type":"binary-expr","locations":[{"start":{"line":287,"column":16},"end":{"line":287,"column":66}},{"start":{"line":287,"column":70},"end":{"line":287,"column":97}}]},"36":{"line":301,"type":"cond-expr","locations":[{"start":{"line":301,"column":53},"end":{"line":301,"column":56}},{"start":{"line":301,"column":59},"end":{"line":301,"column":61}}]},"37":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":12},"end":{"line":313,"column":12}},{"start":{"line":313,"column":12},"end":{"line":313,"column":12}}]},"38":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":16},"end":{"line":313,"column":47}},{"start":{"line":313,"column":51},"end":{"line":313,"column":92}},{"start":{"line":313,"column":96},"end":{"line":313,"column":127}}]},"39":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12}},{"start":{"line":317,"column":12},"end":{"line":317,"column":12}}]},"40":{"line":317,"type":"binary-expr","locations":[{"start":{"line":317,"column":16},"end":{"line":317,"column":46}},{"start":{"line":317,"column":50},"end":{"line":317,"column":95}}]},"41":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":12},"end":{"line":329,"column":12}},{"start":{"line":329,"column":12},"end":{"line":329,"column":12}}]},"42":{"line":329,"type":"binary-expr","locations":[{"start":{"line":329,"column":16},"end":{"line":329,"column":44}},{"start":{"line":329,"column":48},"end":{"line":329,"column":91}},{"start":{"line":329,"column":95},"end":{"line":336,"column":13}}]},"43":{"line":330,"type":"binary-expr","locations":[{"start":{"line":330,"column":16},"end":{"line":330,"column":46}},{"start":{"line":331,"column":17},"end":{"line":331,"column":58}},{"start":{"line":332,"column":18},"end":{"line":332,"column":54}},{"start":{"line":332,"column":58},"end":{"line":332,"column":97}},{"start":{"line":335,"column":16},"end":{"line":335,"column":51}}]},"44":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":12},"end":{"line":339,"column":12}},{"start":{"line":339,"column":12},"end":{"line":339,"column":12}}]},"45":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":16},"end":{"line":340,"column":16}},{"start":{"line":340,"column":16},"end":{"line":340,"column":16}}]},"46":{"line":340,"type":"binary-expr","locations":[{"start":{"line":340,"column":20},"end":{"line":340,"column":60}},{"start":{"line":340,"column":64},"end":{"line":340,"column":126}}]},"47":{"line":345,"type":"if","locations":[{"start":{"line":345,"column":20},"end":{"line":345,"column":20}},{"start":{"line":345,"column":20},"end":{"line":345,"column":20}}]},"48":{"line":345,"type":"binary-expr","locations":[{"start":{"line":345,"column":24},"end":{"line":345,"column":44}},{"start":{"line":345,"column":48},"end":{"line":345,"column":96}}]},"49":{"line":363,"type":"binary-expr","locations":[{"start":{"line":363,"column":36},"end":{"line":363,"column":49}},{"start":{"line":363,"column":54},"end":{"line":363,"column":91}},{"start":{"line":363,"column":95},"end":{"line":363,"column":133}},{"start":{"line":364,"column":14},"end":{"line":364,"column":50}},{"start":{"line":364,"column":54},"end":{"line":364,"column":70}}]},"50":{"line":365,"type":"binary-expr","locations":[{"start":{"line":365,"column":36},"end":{"line":365,"column":49}},{"start":{"line":365,"column":54},"end":{"line":365,"column":92}},{"start":{"line":365,"column":96},"end":{"line":365,"column":135}}]},"51":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":12},"end":{"line":367,"column":12}},{"start":{"line":367,"column":12},"end":{"line":367,"column":12}}]},"52":{"line":367,"type":"binary-expr","locations":[{"start":{"line":367,"column":16},"end":{"line":367,"column":31}},{"start":{"line":367,"column":35},"end":{"line":367,"column":61}},{"start":{"line":367,"column":66},"end":{"line":367,"column":87}},{"start":{"line":367,"column":92},"end":{"line":367,"column":115}},{"start":{"line":367,"column":119},"end":{"line":367,"column":136}}]},"53":{"line":370,"type":"if","locations":[{"start":{"line":370,"column":12},"end":{"line":370,"column":12}},{"start":{"line":370,"column":12},"end":{"line":370,"column":12}}]},"54":{"line":370,"type":"binary-expr","locations":[{"start":{"line":370,"column":16},"end":{"line":370,"column":32}},{"start":{"line":370,"column":36},"end":{"line":370,"column":63}},{"start":{"line":370,"column":68},"end":{"line":370,"column":90}},{"start":{"line":370,"column":95},"end":{"line":370,"column":119}},{"start":{"line":370,"column":123},"end":{"line":370,"column":139}}]},"55":{"line":381,"type":"if","locations":[{"start":{"line":381,"column":12},"end":{"line":381,"column":12}},{"start":{"line":381,"column":12},"end":{"line":381,"column":12}}]},"56":{"line":387,"type":"cond-expr","locations":[{"start":{"line":388,"column":18},"end":{"line":388,"column":50}},{"start":{"line":389,"column":18},"end":{"line":389,"column":56}}]},"57":{"line":391,"type":"if","locations":[{"start":{"line":391,"column":12},"end":{"line":391,"column":12}},{"start":{"line":391,"column":12},"end":{"line":391,"column":12}}]},"58":{"line":402,"type":"cond-expr","locations":[{"start":{"line":403,"column":18},"end":{"line":403,"column":48}},{"start":{"line":404,"column":18},"end":{"line":404,"column":54}}]},"59":{"line":406,"type":"if","locations":[{"start":{"line":406,"column":12},"end":{"line":406,"column":12}},{"start":{"line":406,"column":12},"end":{"line":406,"column":12}}]},"60":{"line":417,"type":"cond-expr","locations":[{"start":{"line":417,"column":55},"end":{"line":417,"column":86}},{"start":{"line":417,"column":89},"end":{"line":417,"column":119}}]},"61":{"line":420,"type":"if","locations":[{"start":{"line":420,"column":12},"end":{"line":420,"column":12}},{"start":{"line":420,"column":12},"end":{"line":420,"column":12}}]},"62":{"line":421,"type":"binary-expr","locations":[{"start":{"line":421,"column":16},"end":{"line":421,"column":56}},{"start":{"line":423,"column":20},"end":{"line":423,"column":61}},{"start":{"line":424,"column":20},"end":{"line":424,"column":50}},{"start":{"line":425,"column":24},"end":{"line":425,"column":56}},{"start":{"line":426,"column":24},"end":{"line":426,"column":53}},{"start":{"line":427,"column":24},"end":{"line":427,"column":51}},{"start":{"line":427,"column":55},"end":{"line":427,"column":124}}]},"63":{"line":434,"type":"if","locations":[{"start":{"line":434,"column":12},"end":{"line":434,"column":12}},{"start":{"line":434,"column":12},"end":{"line":434,"column":12}}]},"64":{"line":442,"type":"if","locations":[{"start":{"line":442,"column":20},"end":{"line":442,"column":20}},{"start":{"line":442,"column":20},"end":{"line":442,"column":20}}]},"65":{"line":442,"type":"binary-expr","locations":[{"start":{"line":442,"column":24},"end":{"line":442,"column":25}},{"start":{"line":442,"column":29},"end":{"line":442,"column":47}},{"start":{"line":442,"column":51},"end":{"line":442,"column":97}}]},"66":{"line":449,"type":"if","locations":[{"start":{"line":449,"column":16},"end":{"line":449,"column":16}},{"start":{"line":449,"column":16},"end":{"line":449,"column":16}}]},"67":{"line":453,"type":"if","locations":[{"start":{"line":453,"column":16},"end":{"line":453,"column":16}},{"start":{"line":453,"column":16},"end":{"line":453,"column":16}}]},"68":{"line":457,"type":"if","locations":[{"start":{"line":457,"column":20},"end":{"line":457,"column":20}},{"start":{"line":457,"column":20},"end":{"line":457,"column":20}}]},"69":{"line":457,"type":"binary-expr","locations":[{"start":{"line":457,"column":24},"end":{"line":457,"column":70}},{"start":{"line":457,"column":74},"end":{"line":457,"column":118}}]},"70":{"line":460,"type":"if","locations":[{"start":{"line":460,"column":20},"end":{"line":460,"column":20}},{"start":{"line":460,"column":20},"end":{"line":460,"column":20}}]},"71":{"line":460,"type":"binary-expr","locations":[{"start":{"line":460,"column":24},"end":{"line":460,"column":50}},{"start":{"line":460,"column":54},"end":{"line":460,"column":108}}]},"72":{"line":467,"type":"if","locations":[{"start":{"line":467,"column":16},"end":{"line":467,"column":16}},{"start":{"line":467,"column":16},"end":{"line":467,"column":16}}]},"73":{"line":471,"type":"if","locations":[{"start":{"line":471,"column":16},"end":{"line":471,"column":16}},{"start":{"line":471,"column":16},"end":{"line":471,"column":16}}]},"74":{"line":471,"type":"binary-expr","locations":[{"start":{"line":471,"column":20},"end":{"line":471,"column":47}},{"start":{"line":471,"column":51},"end":{"line":471,"column":93}}]},"75":{"line":480,"type":"if","locations":[{"start":{"line":480,"column":16},"end":{"line":480,"column":16}},{"start":{"line":480,"column":16},"end":{"line":480,"column":16}}]},"76":{"line":484,"type":"if","locations":[{"start":{"line":484,"column":16},"end":{"line":484,"column":16}},{"start":{"line":484,"column":16},"end":{"line":484,"column":16}}]},"77":{"line":484,"type":"binary-expr","locations":[{"start":{"line":484,"column":20},"end":{"line":484,"column":46}},{"start":{"line":484,"column":50},"end":{"line":484,"column":132}}]},"78":{"line":488,"type":"if","locations":[{"start":{"line":488,"column":16},"end":{"line":488,"column":16}},{"start":{"line":488,"column":16},"end":{"line":488,"column":16}}]},"79":{"line":488,"type":"binary-expr","locations":[{"start":{"line":488,"column":20},"end":{"line":488,"column":52}},{"start":{"line":488,"column":56},"end":{"line":488,"column":116}}]},"80":{"line":492,"type":"if","locations":[{"start":{"line":492,"column":16},"end":{"line":492,"column":16}},{"start":{"line":492,"column":16},"end":{"line":492,"column":16}}]},"81":{"line":492,"type":"binary-expr","locations":[{"start":{"line":492,"column":20},"end":{"line":492,"column":51}},{"start":{"line":492,"column":55},"end":{"line":492,"column":114}}]},"82":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":16},"end":{"line":498,"column":16}},{"start":{"line":498,"column":16},"end":{"line":498,"column":16}}]},"83":{"line":498,"type":"binary-expr","locations":[{"start":{"line":498,"column":20},"end":{"line":498,"column":52}},{"start":{"line":498,"column":56},"end":{"line":498,"column":84}}]},"84":{"line":507,"type":"if","locations":[{"start":{"line":507,"column":16},"end":{"line":507,"column":16}},{"start":{"line":507,"column":16},"end":{"line":507,"column":16}}]},"85":{"line":513,"type":"if","locations":[{"start":{"line":513,"column":16},"end":{"line":513,"column":16}},{"start":{"line":513,"column":16},"end":{"line":513,"column":16}}]},"86":{"line":519,"type":"if","locations":[{"start":{"line":519,"column":16},"end":{"line":519,"column":16}},{"start":{"line":519,"column":16},"end":{"line":519,"column":16}}]},"87":{"line":519,"type":"binary-expr","locations":[{"start":{"line":519,"column":20},"end":{"line":519,"column":29}},{"start":{"line":519,"column":33},"end":{"line":519,"column":59}}]},"88":{"line":523,"type":"if","locations":[{"start":{"line":523,"column":16},"end":{"line":523,"column":16}},{"start":{"line":523,"column":16},"end":{"line":523,"column":16}}]},"89":{"line":523,"type":"binary-expr","locations":[{"start":{"line":523,"column":20},"end":{"line":523,"column":29}},{"start":{"line":523,"column":33},"end":{"line":523,"column":59}},{"start":{"line":523,"column":63},"end":{"line":523,"column":91}}]},"90":{"line":527,"type":"if","locations":[{"start":{"line":527,"column":16},"end":{"line":527,"column":16}},{"start":{"line":527,"column":16},"end":{"line":527,"column":16}}]},"91":{"line":527,"type":"binary-expr","locations":[{"start":{"line":527,"column":20},"end":{"line":527,"column":31}},{"start":{"line":527,"column":35},"end":{"line":527,"column":63}}]},"92":{"line":533,"type":"if","locations":[{"start":{"line":533,"column":16},"end":{"line":533,"column":16}},{"start":{"line":533,"column":16},"end":{"line":533,"column":16}}]},"93":{"line":533,"type":"binary-expr","locations":[{"start":{"line":533,"column":20},"end":{"line":533,"column":52}},{"start":{"line":533,"column":56},"end":{"line":533,"column":84}}]},"94":{"line":541,"type":"if","locations":[{"start":{"line":541,"column":16},"end":{"line":541,"column":16}},{"start":{"line":541,"column":16},"end":{"line":541,"column":16}}]},"95":{"line":542,"type":"binary-expr","locations":[{"start":{"line":542,"column":20},"end":{"line":542,"column":48}},{"start":{"line":543,"column":20},"end":{"line":543,"column":63}},{"start":{"line":545,"column":24},"end":{"line":545,"column":37}},{"start":{"line":546,"column":24},"end":{"line":551,"column":25}}]},"96":{"line":547,"type":"binary-expr","locations":[{"start":{"line":547,"column":28},"end":{"line":547,"column":66}},{"start":{"line":550,"column":29},"end":{"line":550,"column":59}},{"start":{"line":550,"column":63},"end":{"line":550,"column":80}}]},"97":{"line":556,"type":"if","locations":[{"start":{"line":556,"column":16},"end":{"line":556,"column":16}},{"start":{"line":556,"column":16},"end":{"line":556,"column":16}}]},"98":{"line":556,"type":"binary-expr","locations":[{"start":{"line":556,"column":20},"end":{"line":556,"column":33}},{"start":{"line":556,"column":37},"end":{"line":556,"column":67}}]},"99":{"line":567,"type":"if","locations":[{"start":{"line":567,"column":20},"end":{"line":567,"column":20}},{"start":{"line":567,"column":20},"end":{"line":567,"column":20}}]},"100":{"line":567,"type":"binary-expr","locations":[{"start":{"line":567,"column":24},"end":{"line":567,"column":25}},{"start":{"line":567,"column":29},"end":{"line":567,"column":47}},{"start":{"line":567,"column":51},"end":{"line":567,"column":97}}]},"101":{"line":576,"type":"if","locations":[{"start":{"line":576,"column":16},"end":{"line":576,"column":16}},{"start":{"line":576,"column":16},"end":{"line":576,"column":16}}]},"102":{"line":580,"type":"if","locations":[{"start":{"line":580,"column":16},"end":{"line":580,"column":16}},{"start":{"line":580,"column":16},"end":{"line":580,"column":16}}]},"103":{"line":580,"type":"binary-expr","locations":[{"start":{"line":580,"column":20},"end":{"line":580,"column":33}},{"start":{"line":581,"column":24},"end":{"line":581,"column":83}},{"start":{"line":584,"column":24},"end":{"line":584,"column":82}}]},"104":{"line":584,"type":"binary-expr","locations":[{"start":{"line":584,"column":26},"end":{"line":584,"column":58}},{"start":{"line":584,"column":62},"end":{"line":584,"column":81}}]},"105":{"line":591,"type":"if","locations":[{"start":{"line":591,"column":20},"end":{"line":591,"column":20}},{"start":{"line":591,"column":20},"end":{"line":591,"column":20}}]},"106":{"line":591,"type":"binary-expr","locations":[{"start":{"line":591,"column":24},"end":{"line":591,"column":42}},{"start":{"line":591,"column":46},"end":{"line":591,"column":79}}]},"107":{"line":598,"type":"if","locations":[{"start":{"line":598,"column":16},"end":{"line":598,"column":16}},{"start":{"line":598,"column":16},"end":{"line":598,"column":16}}]},"108":{"line":598,"type":"binary-expr","locations":[{"start":{"line":598,"column":20},"end":{"line":598,"column":29}},{"start":{"line":598,"column":33},"end":{"line":598,"column":59}}]},"109":{"line":604,"type":"if","locations":[{"start":{"line":604,"column":16},"end":{"line":604,"column":16}},{"start":{"line":604,"column":16},"end":{"line":604,"column":16}}]},"110":{"line":612,"type":"if","locations":[{"start":{"line":612,"column":16},"end":{"line":612,"column":16}},{"start":{"line":612,"column":16},"end":{"line":612,"column":16}}]},"111":{"line":622,"type":"if","locations":[{"start":{"line":622,"column":16},"end":{"line":622,"column":16}},{"start":{"line":622,"column":16},"end":{"line":622,"column":16}}]},"112":{"line":622,"type":"binary-expr","locations":[{"start":{"line":622,"column":20},"end":{"line":622,"column":29}},{"start":{"line":622,"column":33},"end":{"line":622,"column":59}},{"start":{"line":623,"column":24},"end":{"line":623,"column":78}},{"start":{"line":626,"column":24},"end":{"line":626,"column":74}}]},"113":{"line":626,"type":"binary-expr","locations":[{"start":{"line":626,"column":26},"end":{"line":626,"column":54}},{"start":{"line":626,"column":58},"end":{"line":626,"column":73}}]},"114":{"line":632,"type":"if","locations":[{"start":{"line":632,"column":16},"end":{"line":632,"column":16}},{"start":{"line":632,"column":16},"end":{"line":632,"column":16}}]},"115":{"line":632,"type":"binary-expr","locations":[{"start":{"line":632,"column":20},"end":{"line":632,"column":52}},{"start":{"line":632,"column":56},"end":{"line":632,"column":84}}]},"116":{"line":638,"type":"if","locations":[{"start":{"line":638,"column":16},"end":{"line":638,"column":16}},{"start":{"line":638,"column":16},"end":{"line":638,"column":16}}]},"117":{"line":644,"type":"if","locations":[{"start":{"line":644,"column":16},"end":{"line":644,"column":16}},{"start":{"line":644,"column":16},"end":{"line":644,"column":16}}]},"118":{"line":647,"type":"if","locations":[{"start":{"line":647,"column":20},"end":{"line":647,"column":20}},{"start":{"line":647,"column":20},"end":{"line":647,"column":20}}]},"119":{"line":647,"type":"binary-expr","locations":[{"start":{"line":647,"column":25},"end":{"line":647,"column":70}},{"start":{"line":648,"column":28},"end":{"line":648,"column":86}},{"start":{"line":649,"column":28},"end":{"line":649,"column":64}}]}},"code":["/**"," * @fileoverview Disallow parenthesising higher precedence subexpressions."," * @author Michael Ficarra"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils.js\");","const esUtils = require(\"esutils\");","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary parentheses\",","            category: \"Possible Errors\",","            recommended: false","        },","","        fixable: \"code\",","","        schema: {","            anyOf: [","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"functions\"]","                        }","                    ],","                    minItems: 0,","                    maxItems: 1","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"all\"]","                        },","                        {","                            type: \"object\",","                            properties: {","                                conditionalAssign: { type: \"boolean\" },","                                nestedBinaryExpressions: { type: \"boolean\" },","                                returnAssign: { type: \"boolean\" },","                                ignoreJSX: { enum: [\"none\", \"all\", \"single-line\", \"multi-line\"] }","                            },","                            additionalProperties: false","                        }","                    ],","                    minItems: 0,","                    maxItems: 2","                }","            ]","        }","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        const tokensToIgnore = new WeakSet();","        const isParenthesised = astUtils.isParenthesised.bind(astUtils, sourceCode);","        const precedence = astUtils.getPrecedence;","        const ALL_NODES = context.options[0] !== \"functions\";","        const EXCEPT_COND_ASSIGN = ALL_NODES && context.options[1] && context.options[1].conditionalAssign === false;","        const NESTED_BINARY = ALL_NODES && context.options[1] && context.options[1].nestedBinaryExpressions === false;","        const EXCEPT_RETURN_ASSIGN = ALL_NODES && context.options[1] && context.options[1].returnAssign === false;","        const IGNORE_JSX = ALL_NODES && context.options[1] && context.options[1].ignoreJSX;","        const PRECEDENCE_OF_ASSIGNMENT_EXPR = precedence({ type: \"AssignmentExpression\" });","        const PRECEDENCE_OF_UPDATE_EXPR = precedence({ type: \"UpdateExpression\" });","","        /**","         * Determines if this rule should be enforced for a node given the current configuration.","         * @param {ASTNode} node - The node to be checked.","         * @returns {boolean} True if the rule should be enforced for this node.","         * @private","         */","        function ruleApplies(node) {","            if (node.type === \"JSXElement\") {","                const isSingleLine = node.loc.start.line === node.loc.end.line;","","                switch (IGNORE_JSX) {","","                    // Exclude this JSX element from linting","                    case \"all\":","                        return false;","","                    // Exclude this JSX element if it is multi-line element","                    case \"multi-line\":","                        return isSingleLine;","","                    // Exclude this JSX element if it is single-line element","                    case \"single-line\":","                        return !isSingleLine;","","                    // Nothing special to be done for JSX elements","                    case \"none\":","                        break;","","                    // no default","                }","            }","","            return ALL_NODES || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\";","        }","","        /**","         * Determines if a node is surrounded by parentheses twice.","         * @param {ASTNode} node - The node to be checked.","         * @returns {boolean} True if the node is doubly parenthesised.","         * @private","         */","        function isParenthesisedTwice(node) {","            const previousToken = sourceCode.getTokenBefore(node, 1),","                nextToken = sourceCode.getTokenAfter(node, 1);","","            return isParenthesised(node) && previousToken && nextToken &&","                astUtils.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] &&","                astUtils.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];","        }","","        /**","         * Determines if a node is surrounded by (potentially) invalid parentheses.","         * @param {ASTNode} node - The node to be checked.","         * @returns {boolean} True if the node is incorrectly parenthesised.","         * @private","         */","        function hasExcessParens(node) {","            return ruleApplies(node) && isParenthesised(node);","        }","","        /**","         * Determines if a node that is expected to be parenthesised is surrounded by","         * (potentially) invalid extra parentheses.","         * @param {ASTNode} node - The node to be checked.","         * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.","         * @private","         */","        function hasDoubleExcessParens(node) {","            return ruleApplies(node) && isParenthesisedTwice(node);","        }","","        /**","         * Determines if a node test expression is allowed to have a parenthesised assignment","         * @param {ASTNode} node - The node to be checked.","         * @returns {boolean} True if the assignment can be parenthesised.","         * @private","         */","        function isCondAssignException(node) {","            return EXCEPT_COND_ASSIGN && node.test.type === \"AssignmentExpression\";","        }","","        /**","         * Determines if a node is in a return statement","         * @param {ASTNode} node - The node to be checked.","         * @returns {boolean} True if the node is in a return statement.","         * @private","         */","        function isInReturnStatement(node) {","            while (node) {","                if (node.type === \"ReturnStatement\" ||","                        (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\")) {","                    return true;","                }","                node = node.parent;","            }","","            return false;","        }","","        /**","         * Determines if a constructor function is newed-up with parens","         * @param {ASTNode} newExpression - The NewExpression node to be checked.","         * @returns {boolean} True if the constructor is called with parens.","         * @private","         */","        function isNewExpressionWithParens(newExpression) {","            const lastToken = sourceCode.getLastToken(newExpression);","            const penultimateToken = sourceCode.getTokenBefore(lastToken);","","            return newExpression.arguments.length > 0 || astUtils.isOpeningParenToken(penultimateToken) && astUtils.isClosingParenToken(lastToken);","        }","","        /**","         * Determines if a node is or contains an assignment expression","         * @param {ASTNode} node - The node to be checked.","         * @returns {boolean} True if the node is or contains an assignment expression.","         * @private","         */","        function containsAssignment(node) {","            if (node.type === \"AssignmentExpression\") {","                return true;","            } else if (node.type === \"ConditionalExpression\" &&","                    (node.consequent.type === \"AssignmentExpression\" || node.alternate.type === \"AssignmentExpression\")) {","                return true;","            } else if ((node.left && node.left.type === \"AssignmentExpression\") ||","                    (node.right && node.right.type === \"AssignmentExpression\")) {","                return true;","            }","","            return false;","        }","","        /**","         * Determines if a node is contained by or is itself a return statement and is allowed to have a parenthesised assignment","         * @param {ASTNode} node - The node to be checked.","         * @returns {boolean} True if the assignment can be parenthesised.","         * @private","         */","        function isReturnAssignException(node) {","            if (!EXCEPT_RETURN_ASSIGN || !isInReturnStatement(node)) {","                return false;","            }","","            if (node.type === \"ReturnStatement\") {","                return node.argument && containsAssignment(node.argument);","            } else if (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\") {","                return containsAssignment(node.body);","            }","            return containsAssignment(node);","","        }","","        /**","         * Determines if a node following a [no LineTerminator here] restriction is","         * surrounded by (potentially) invalid extra parentheses.","         * @param {Token} token - The token preceding the [no LineTerminator here] restriction.","         * @param {ASTNode} node - The node to be checked.","         * @returns {boolean} True if the node is incorrectly parenthesised.","         * @private","         */","        function hasExcessParensNoLineTerminator(token, node) {","            if (token.loc.end.line === node.loc.start.line) {","                return hasExcessParens(node);","            }","","            return hasDoubleExcessParens(node);","        }","","        /**","         * Determines whether a node should be preceded by an additional space when removing parens","         * @param {ASTNode} node node to evaluate; must be surrounded by parentheses","         * @returns {boolean} `true` if a space should be inserted before the node","         * @private","         */","        function requiresLeadingSpace(node) {","            const leftParenToken = sourceCode.getTokenBefore(node);","            const tokenBeforeLeftParen = sourceCode.getTokenBefore(node, 1);","            const firstToken = sourceCode.getFirstToken(node);","","            // If there is already whitespace before the previous token, don't add more.","            if (!tokenBeforeLeftParen || tokenBeforeLeftParen.end !== leftParenToken.start) {","                return false;","            }","","            // If the parens are preceded by a keyword (e.g. `typeof(0)`), a space should be inserted (`typeof 0`)","            const precededByIdentiferPart = esUtils.code.isIdentifierPartES6(tokenBeforeLeftParen.value.slice(-1).charCodeAt(0));","","            // However, a space should not be inserted unless the first character of the token is an identifier part","            // e.g. `typeof([])` should be fixed to `typeof[]`","            const startsWithIdentifierPart = esUtils.code.isIdentifierPartES6(firstToken.value.charCodeAt(0));","","            // If the parens are preceded by and start with a unary plus/minus (e.g. `+(+foo)`), a space should be inserted (`+ +foo`)","            const precededByUnaryPlus = tokenBeforeLeftParen.type === \"Punctuator\" && tokenBeforeLeftParen.value === \"+\";","            const precededByUnaryMinus = tokenBeforeLeftParen.type === \"Punctuator\" && tokenBeforeLeftParen.value === \"-\";","","            const startsWithUnaryPlus = firstToken.type === \"Punctuator\" && firstToken.value === \"+\";","            const startsWithUnaryMinus = firstToken.type === \"Punctuator\" && firstToken.value === \"-\";","","            return (precededByIdentiferPart && startsWithIdentifierPart) ||","                (precededByUnaryPlus && startsWithUnaryPlus) ||","                (precededByUnaryMinus && startsWithUnaryMinus);","        }","","        /**","         * Report the node","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function report(node) {","            const leftParenToken = sourceCode.getTokenBefore(node);","            const rightParenToken = sourceCode.getTokenAfter(node);","","            if (tokensToIgnore.has(sourceCode.getFirstToken(node)) && !isParenthesisedTwice(node)) {","                return;","            }","","            context.report({","                node,","                loc: leftParenToken.loc.start,","                message: \"Gratuitous parentheses around expression.\",","                fix(fixer) {","                    const parenthesizedSource = sourceCode.text.slice(leftParenToken.range[1], rightParenToken.range[0]);","","                    return fixer.replaceTextRange([","                        leftParenToken.range[0],","                        rightParenToken.range[1]","                    ], (requiresLeadingSpace(node) ? \" \" : \"\") + parenthesizedSource);","                }","            });","        }","","        /**","         * Evaluate Unary update","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkUnaryUpdate(node) {","            if (node.type === \"UnaryExpression\" && node.argument.type === \"BinaryExpression\" && node.argument.operator === \"**\") {","                return;","            }","","            if (hasExcessParens(node.argument) && precedence(node.argument) >= precedence(node)) {","                report(node.argument);","            }","        }","","        /**","         * Evaluate a new call","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkCallNew(node) {","            if (hasExcessParens(node.callee) && precedence(node.callee) >= precedence(node) && !(","                node.type === \"CallExpression\" &&","                (node.callee.type === \"FunctionExpression\" ||","                  node.callee.type === \"NewExpression\" && !isNewExpressionWithParens(node.callee)) &&","","                // One set of parentheses are allowed for a function expression","                !hasDoubleExcessParens(node.callee)","            )) {","                report(node.callee);","            }","            if (node.arguments.length === 1) {","                if (hasDoubleExcessParens(node.arguments[0]) && precedence(node.arguments[0]) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {","                    report(node.arguments[0]);","                }","            } else {","                [].forEach.call(node.arguments, arg => {","                    if (hasExcessParens(arg) && precedence(arg) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {","                        report(arg);","                    }","                });","            }","        }","","        /**","         * Evaluate binary logicals","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkBinaryLogical(node) {","            const prec = precedence(node);","            const leftPrecedence = precedence(node.left);","            const rightPrecedence = precedence(node.right);","            const isExponentiation = node.operator === \"**\";","            const shouldSkipLeft = (NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\")) ||","              node.left.type === \"UnaryExpression\" && isExponentiation;","            const shouldSkipRight = NESTED_BINARY && (node.right.type === \"BinaryExpression\" || node.right.type === \"LogicalExpression\");","","            if (!shouldSkipLeft && hasExcessParens(node.left) && (leftPrecedence > prec || (leftPrecedence === prec && !isExponentiation))) {","                report(node.left);","            }","            if (!shouldSkipRight && hasExcessParens(node.right) && (rightPrecedence > prec || (rightPrecedence === prec && isExponentiation))) {","                report(node.right);","            }","        }","","        /**","         * Check the parentheses around the super class of the given class definition.","         * @param {ASTNode} node The node of class declarations to check.","         * @returns {void}","         */","        function checkClass(node) {","            if (!node.superClass) {","                return;","            }","","            // If `node.superClass` is a LeftHandSideExpression, parentheses are extra.","            // Otherwise, parentheses are needed.","            const hasExtraParens = precedence(node.superClass) > PRECEDENCE_OF_UPDATE_EXPR","                ? hasExcessParens(node.superClass)","                : hasDoubleExcessParens(node.superClass);","","            if (hasExtraParens) {","                report(node.superClass);","            }","        }","","        /**","         * Check the parentheses around the argument of the given spread operator.","         * @param {ASTNode} node The node of spread elements/properties to check.","         * @returns {void}","         */","        function checkSpreadOperator(node) {","            const hasExtraParens = precedence(node.argument) >= PRECEDENCE_OF_ASSIGNMENT_EXPR","                ? hasExcessParens(node.argument)","                : hasDoubleExcessParens(node.argument);","","            if (hasExtraParens) {","                report(node.argument);","            }","        }","","        /**","         * Checks the parentheses for an ExpressionStatement or ExportDefaultDeclaration","         * @param {ASTNode} node The ExpressionStatement.expression or ExportDefaultDeclaration.declaration node","         * @returns {void}","         */","        function checkExpressionOrExportStatement(node) {","            const firstToken = isParenthesised(node) ? sourceCode.getTokenBefore(node) : sourceCode.getFirstToken(node);","            const secondToken = sourceCode.getTokenAfter(firstToken, astUtils.isNotOpeningParenToken);","","            if (","                astUtils.isOpeningParenToken(firstToken) &&","                (","                    astUtils.isOpeningBraceToken(secondToken) ||","                    secondToken.type === \"Keyword\" && (","                        secondToken.value === \"function\" ||","                        secondToken.value === \"class\" ||","                        secondToken.value === \"let\" && astUtils.isOpeningBracketToken(sourceCode.getTokenAfter(secondToken))","                    )","                )","            ) {","                tokensToIgnore.add(secondToken);","            }","","            if (hasExcessParens(node)) {","                report(node);","            }","        }","","        return {","            ArrayExpression(node) {","                [].forEach.call(node.elements, e => {","                    if (e && hasExcessParens(e) && precedence(e) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {","                        report(e);","                    }","                });","            },","","            ArrowFunctionExpression(node) {","                if (isReturnAssignException(node)) {","                    return;","                }","","                if (node.body.type !== \"BlockStatement\") {","                    const firstBodyToken = sourceCode.getFirstToken(node.body, astUtils.isNotOpeningParenToken);","                    const tokenBeforeFirst = sourceCode.getTokenBefore(firstBodyToken);","","                    if (astUtils.isOpeningParenToken(tokenBeforeFirst) && astUtils.isOpeningBraceToken(firstBodyToken)) {","                        tokensToIgnore.add(firstBodyToken);","                    }","                    if (hasExcessParens(node.body) && precedence(node.body) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {","                        report(node.body);","                    }","                }","            },","","            AssignmentExpression(node) {","                if (isReturnAssignException(node)) {","                    return;","                }","","                if (hasExcessParens(node.right) && precedence(node.right) >= precedence(node)) {","                    report(node.right);","                }","            },","","            BinaryExpression: checkBinaryLogical,","            CallExpression: checkCallNew,","","            ConditionalExpression(node) {","                if (isReturnAssignException(node)) {","                    return;","                }","","                if (hasExcessParens(node.test) && precedence(node.test) >= precedence({ type: \"LogicalExpression\", operator: \"||\" })) {","                    report(node.test);","                }","","                if (hasExcessParens(node.consequent) && precedence(node.consequent) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {","                    report(node.consequent);","                }","","                if (hasExcessParens(node.alternate) && precedence(node.alternate) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {","                    report(node.alternate);","                }","            },","","            DoWhileStatement(node) {","                if (hasDoubleExcessParens(node.test) && !isCondAssignException(node)) {","                    report(node.test);","                }","            },","","            ExportDefaultDeclaration: node => checkExpressionOrExportStatement(node.declaration),","            ExpressionStatement: node => checkExpressionOrExportStatement(node.expression),","","            ForInStatement(node) {","                if (hasExcessParens(node.right)) {","                    report(node.right);","                }","            },","","            ForOfStatement(node) {","                if (hasExcessParens(node.right)) {","                    report(node.right);","                }","            },","","            ForStatement(node) {","                if (node.init && hasExcessParens(node.init)) {","                    report(node.init);","                }","","                if (node.test && hasExcessParens(node.test) && !isCondAssignException(node)) {","                    report(node.test);","                }","","                if (node.update && hasExcessParens(node.update)) {","                    report(node.update);","                }","            },","","            IfStatement(node) {","                if (hasDoubleExcessParens(node.test) && !isCondAssignException(node)) {","                    report(node.test);","                }","            },","","            LogicalExpression: checkBinaryLogical,","","            MemberExpression(node) {","                if (","                    hasExcessParens(node.object) &&","                    precedence(node.object) >= precedence(node) &&","                    (","                        node.computed ||","                        !(","                            astUtils.isDecimalInteger(node.object) ||","","                            // RegExp literal is allowed to have parens (#1589)","                            (node.object.type === \"Literal\" && node.object.regex)","                        )","                    )","                ) {","                    report(node.object);","                }","                if (node.computed && hasExcessParens(node.property)) {","                    report(node.property);","                }","            },","","            NewExpression: checkCallNew,","","            ObjectExpression(node) {","                [].forEach.call(node.properties, e => {","                    const v = e.value;","","                    if (v && hasExcessParens(v) && precedence(v) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {","                        report(v);","                    }","                });","            },","","            ReturnStatement(node) {","                const returnToken = sourceCode.getFirstToken(node);","","                if (isReturnAssignException(node)) {","                    return;","                }","","                if (node.argument &&","                        hasExcessParensNoLineTerminator(returnToken, node.argument) &&","","                        // RegExp literal is allowed to have parens (#1589)","                        !(node.argument.type === \"Literal\" && node.argument.regex)) {","                    report(node.argument);","                }","            },","","            SequenceExpression(node) {","                [].forEach.call(node.expressions, e => {","                    if (hasExcessParens(e) && precedence(e) >= precedence(node)) {","                        report(e);","                    }","                });","            },","","            SwitchCase(node) {","                if (node.test && hasExcessParens(node.test)) {","                    report(node.test);","                }","            },","","            SwitchStatement(node) {","                if (hasDoubleExcessParens(node.discriminant)) {","                    report(node.discriminant);","                }","            },","","            ThrowStatement(node) {","                const throwToken = sourceCode.getFirstToken(node);","","                if (hasExcessParensNoLineTerminator(throwToken, node.argument)) {","                    report(node.argument);","                }","            },","","            UnaryExpression: checkUnaryUpdate,","            UpdateExpression: checkUnaryUpdate,","            AwaitExpression: checkUnaryUpdate,","","            VariableDeclarator(node) {","                if (node.init && hasExcessParens(node.init) &&","                        precedence(node.init) >= PRECEDENCE_OF_ASSIGNMENT_EXPR &&","","                        // RegExp literal is allowed to have parens (#1589)","                        !(node.init.type === \"Literal\" && node.init.regex)) {","                    report(node.init);","                }","            },","","            WhileStatement(node) {","                if (hasDoubleExcessParens(node.test) && !isCondAssignException(node)) {","                    report(node.test);","                }","            },","","            WithStatement(node) {","                if (hasDoubleExcessParens(node.object)) {","                    report(node.object);","                }","            },","","            YieldExpression(node) {","                if (node.argument) {","                    const yieldToken = sourceCode.getFirstToken(node);","","                    if ((precedence(node.argument) >= precedence(node) &&","                            hasExcessParensNoLineTerminator(yieldToken, node.argument)) ||","                            hasDoubleExcessParens(node.argument)) {","                        report(node.argument);","                    }","                }","            },","","            ClassDeclaration: checkClass,","            ClassExpression: checkClass,","","            SpreadElement: checkSpreadOperator,","            SpreadProperty: checkSpreadOperator,","            ExperimentalSpreadProperty: checkSpreadOperator","        };","","    }","};",""],"l":{"11":1,"12":1,"14":1,"61":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"80":1,"81":0,"82":0,"84":0,"88":0,"92":0,"96":0,"100":0,"106":0,"115":1,"116":0,"119":0,"130":1,"131":0,"141":1,"142":0,"151":1,"152":0,"161":1,"162":0,"163":0,"165":0,"167":0,"170":0,"179":1,"180":0,"181":0,"183":0,"192":1,"193":0,"194":0,"195":0,"197":0,"198":0,"200":0,"203":0,"212":1,"213":0,"214":0,"217":0,"218":0,"219":0,"220":0,"222":0,"234":1,"235":0,"236":0,"239":0,"248":1,"249":0,"250":0,"251":0,"254":0,"255":0,"259":0,"263":0,"266":0,"267":0,"269":0,"270":0,"272":0,"283":1,"284":0,"285":0,"287":0,"288":0,"291":0,"296":0,"298":0,"312":1,"313":0,"314":0,"317":0,"318":0,"328":1,"329":0,"337":0,"339":0,"340":0,"341":0,"344":0,"345":0,"346":0,"358":1,"359":0,"360":0,"361":0,"362":0,"363":0,"365":0,"367":0,"368":0,"370":0,"371":0,"380":1,"381":0,"382":0,"387":0,"391":0,"392":0,"401":1,"402":0,"406":0,"407":0,"416":1,"417":0,"418":0,"420":0,"431":0,"434":0,"435":0,"439":0,"441":0,"442":0,"443":0,"449":0,"450":0,"453":0,"454":0,"455":0,"457":0,"458":0,"460":0,"461":0,"467":0,"468":0,"471":0,"472":0,"480":0,"481":0,"484":0,"485":0,"488":0,"489":0,"492":0,"493":0,"498":0,"499":0,"503":0,"504":0,"507":0,"508":0,"513":0,"514":0,"519":0,"520":0,"523":0,"524":0,"527":0,"528":0,"533":0,"534":0,"541":0,"554":0,"556":0,"557":0,"564":0,"565":0,"567":0,"568":0,"574":0,"576":0,"577":0,"580":0,"585":0,"590":0,"591":0,"592":0,"598":0,"599":0,"604":0,"605":0,"610":0,"612":0,"613":0,"622":0,"627":0,"632":0,"633":0,"638":0,"639":0,"644":0,"645":0,"647":0,"650":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-semi.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-extra-semi.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":20}}},"2":{"name":"report","line":39,"loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":37}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":19},"end":{"line":43,"column":27}}},"4":{"name":"checkForPartOfClassBody","line":62,"loc":{"start":{"line":62,"column":8},"end":{"line":62,"column":53}}},"5":{"name":"(anonymous_5)","line":80,"loc":{"start":{"line":80,"column":26},"end":{"line":80,"column":33}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":21},"end":{"line":103,"column":28}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":28},"end":{"line":112,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":50}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":41}},"3":{"start":{"line":19,"column":0},"end":{"line":118,"column":2}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":51}},"5":{"start":{"line":39,"column":8},"end":{"line":53,"column":9}},"6":{"start":{"line":40,"column":12},"end":{"line":52,"column":15}},"7":{"start":{"line":48,"column":20},"end":{"line":50,"column":45}},"8":{"start":{"line":62,"column":8},"end":{"line":71,"column":9}},"9":{"start":{"line":63,"column":12},"end":{"line":70,"column":13}},"10":{"start":{"line":67,"column":16},"end":{"line":69,"column":17}},"11":{"start":{"line":68,"column":20},"end":{"line":68,"column":34}},"12":{"start":{"line":73,"column":8},"end":{"line":115,"column":10}},"13":{"start":{"line":81,"column":16},"end":{"line":91,"column":22}},"14":{"start":{"line":93,"column":16},"end":{"line":95,"column":17}},"15":{"start":{"line":94,"column":20},"end":{"line":94,"column":33}},"16":{"start":{"line":104,"column":16},"end":{"line":104,"column":75}},"17":{"start":{"line":113,"column":16},"end":{"line":113,"column":72}}},"branchMap":{"1":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":16},"end":{"line":64,"column":43}},{"start":{"line":64,"column":47},"end":{"line":64,"column":83}}]},"2":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":16},"end":{"line":67,"column":16}},{"start":{"line":67,"column":16},"end":{"line":67,"column":16}}]},"3":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":16}},{"start":{"line":93,"column":16},"end":{"line":93,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag use of unnecessary semicolons"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const FixTracker = require(\"../util/fix-tracker\");","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary semicolons\",","            category: \"Possible Errors\",","            recommended: true","        },","","        fixable: \"code\",","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        /**","         * Reports an unnecessary semicolon error.","         * @param {Node|Token} nodeOrToken - A node or a token to be reported.","         * @returns {void}","         */","        function report(nodeOrToken) {","            context.report({","                node: nodeOrToken,","                message: \"Unnecessary semicolon.\",","                fix(fixer) {","","                    // Expand the replacement range to include the surrounding","                    // tokens to avoid conflicting with semi.","                    // https://github.com/eslint/eslint/issues/7928","                    return new FixTracker(fixer, context.getSourceCode())","                        .retainSurroundingTokens(nodeOrToken)","                        .remove(nodeOrToken);","                }","            });","        }","","        /**","         * Checks for a part of a class body.","         * This checks tokens from a specified token to a next MethodDefinition or the end of class body.","         *","         * @param {Token} firstToken - The first token to check.","         * @returns {void}","         */","        function checkForPartOfClassBody(firstToken) {","            for (let token = firstToken;","                token.type === \"Punctuator\" && !astUtils.isClosingBraceToken(token);","                token = sourceCode.getTokenAfter(token)","            ) {","                if (astUtils.isSemicolonToken(token)) {","                    report(token);","                }","            }","        }","","        return {","","            /**","             * Reports this empty statement, except if the parent node is a loop.","             * @param {Node} node - A EmptyStatement node to be reported.","             * @returns {void}","             */","            EmptyStatement(node) {","                const parent = node.parent,","                    allowedParentTypes = [","                        \"ForStatement\",","                        \"ForInStatement\",","                        \"ForOfStatement\",","                        \"WhileStatement\",","                        \"DoWhileStatement\",","                        \"IfStatement\",","                        \"LabeledStatement\",","                        \"WithStatement\"","                    ];","","                if (allowedParentTypes.indexOf(parent.type) === -1) {","                    report(node);","                }","            },","","            /**","             * Checks tokens from the head of this class body to the first MethodDefinition or the end of this class body.","             * @param {Node} node - A ClassBody node to check.","             * @returns {void}","             */","            ClassBody(node) {","                checkForPartOfClassBody(sourceCode.getFirstToken(node, 1)); // 0 is `{`.","            },","","            /**","             * Checks tokens from this MethodDefinition to the next MethodDefinition or the end of this class body.","             * @param {Node} node - A MethodDefinition node of the start point.","             * @returns {void}","             */","            MethodDefinition(node) {","                checkForPartOfClassBody(sourceCode.getTokenAfter(node));","            }","        };","","    }","};",""],"l":{"12":1,"13":1,"19":1,"32":0,"39":1,"40":0,"48":0,"62":1,"63":0,"67":0,"68":0,"73":0,"81":0,"93":0,"94":0,"104":0,"113":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-fallthrough.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-fallthrough.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"hasFallthroughComment","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":73}}},"2":{"name":"isReachable","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":30}}},"3":{"name":"hasBlankLinesBetween","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":43}}},"4":{"name":"(anonymous_4)","line":77,"loc":{"start":{"line":77,"column":10},"end":{"line":77,"column":20}}},"5":{"name":"(anonymous_5)","line":96,"loc":{"start":{"line":96,"column":27},"end":{"line":96,"column":38}}},"6":{"name":"(anonymous_6)","line":99,"loc":{"start":{"line":99,"column":25},"end":{"line":99,"column":28}}},"7":{"name":"(anonymous_7)","line":103,"loc":{"start":{"line":103,"column":22},"end":{"line":103,"column":29}}},"8":{"name":"(anonymous_8)","line":119,"loc":{"start":{"line":119,"column":29},"end":{"line":119,"column":36}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":56}},"3":{"start":{"line":26,"column":0},"end":{"line":31,"column":1}},"4":{"start":{"line":27,"column":4},"end":{"line":27,"column":47}},"5":{"start":{"line":28,"column":4},"end":{"line":28,"column":70}},"6":{"start":{"line":30,"column":4},"end":{"line":30,"column":77}},"7":{"start":{"line":38,"column":0},"end":{"line":40,"column":1}},"8":{"start":{"line":39,"column":4},"end":{"line":39,"column":29}},"9":{"start":{"line":48,"column":0},"end":{"line":50,"column":1}},"10":{"start":{"line":49,"column":4},"end":{"line":49,"column":56}},"11":{"start":{"line":56,"column":0},"end":{"line":135,"column":2}},"12":{"start":{"line":78,"column":8},"end":{"line":78,"column":49}},"13":{"start":{"line":79,"column":8},"end":{"line":79,"column":35}},"14":{"start":{"line":80,"column":8},"end":{"line":80,"column":51}},"15":{"start":{"line":86,"column":8},"end":{"line":86,"column":35}},"16":{"start":{"line":87,"column":8},"end":{"line":87,"column":45}},"17":{"start":{"line":89,"column":8},"end":{"line":93,"column":9}},"18":{"start":{"line":90,"column":12},"end":{"line":90,"column":75}},"19":{"start":{"line":92,"column":12},"end":{"line":92,"column":68}},"20":{"start":{"line":95,"column":8},"end":{"line":133,"column":10}},"21":{"start":{"line":97,"column":16},"end":{"line":97,"column":43}},"22":{"start":{"line":100,"column":16},"end":{"line":100,"column":56}},"23":{"start":{"line":109,"column":16},"end":{"line":115,"column":17}},"24":{"start":{"line":110,"column":20},"end":{"line":114,"column":23}},"25":{"start":{"line":116,"column":16},"end":{"line":116,"column":39}},"26":{"start":{"line":120,"column":16},"end":{"line":120,"column":65}},"27":{"start":{"line":127,"column":16},"end":{"line":131,"column":17}},"28":{"start":{"line":130,"column":20},"end":{"line":130,"column":43}}},"branchMap":{"1":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":19},"end":{"line":30,"column":26}},{"start":{"line":30,"column":30},"end":{"line":30,"column":75}}]},"2":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":24},"end":{"line":78,"column":42}},{"start":{"line":78,"column":46},"end":{"line":78,"column":48}}]},"3":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":8}},{"start":{"line":89,"column":8},"end":{"line":89,"column":8}}]},"4":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":16},"end":{"line":109,"column":16}},{"start":{"line":109,"column":16},"end":{"line":109,"column":16}}]},"5":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":20},"end":{"line":109,"column":35}},{"start":{"line":109,"column":39},"end":{"line":109,"column":103}}]},"6":{"line":112,"type":"cond-expr","locations":[{"start":{"line":112,"column":50},"end":{"line":112,"column":56}},{"start":{"line":112,"column":59},"end":{"line":112,"column":68}}]},"7":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":16},"end":{"line":127,"column":16}},{"start":{"line":127,"column":16},"end":{"line":127,"column":16}}]},"8":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":20},"end":{"line":127,"column":69}},{"start":{"line":128,"column":21},"end":{"line":128,"column":47}},{"start":{"line":128,"column":51},"end":{"line":128,"column":88}},{"start":{"line":129,"column":20},"end":{"line":129,"column":59}}]}},"code":["/**"," * @fileoverview Rule to flag fall-through cases in switch statements."," * @author Matt DuVall <http://mattduvall.com/>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const DEFAULT_FALLTHROUGH_COMMENT = /falls?\\s?through/i;","","/**"," * Checks whether or not a given node has a fallthrough comment."," * @param {ASTNode} node - A SwitchCase node to get comments."," * @param {RuleContext} context - A rule context which stores comments."," * @param {RegExp} fallthroughCommentPattern - A pattern to match comment to."," * @returns {boolean} `true` if the node has a valid fallthrough comment."," */","function hasFallthroughComment(node, context, fallthroughCommentPattern) {","    const sourceCode = context.getSourceCode();","    const comment = lodash.last(sourceCode.getComments(node).leading);","","    return Boolean(comment && fallthroughCommentPattern.test(comment.value));","}","","/**"," * Checks whether or not a given code path segment is reachable."," * @param {CodePathSegment} segment - A CodePathSegment to check."," * @returns {boolean} `true` if the segment is reachable."," */","function isReachable(segment) {","    return segment.reachable;","}","","/**"," * Checks whether a node and a token are separated by blank lines"," * @param {ASTNode} node - The node to check"," * @param {Token} token - The token to compare against"," * @returns {boolean} `true` if there are blank lines between node and token"," */","function hasBlankLinesBetween(node, token) {","    return token.loc.start.line > node.loc.end.line + 1;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow fallthrough of `case` statements\",","            category: \"Best Practices\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    commentPattern: {","                        type: \"string\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0] || {};","        let currentCodePath = null;","        const sourceCode = context.getSourceCode();","","        /*","         * We need to use leading comments of the next SwitchCase node because","         * trailing comments is wrong if semicolons are omitted.","         */","        let fallthroughCase = null;","        let fallthroughCommentPattern = null;","","        if (options.commentPattern) {","            fallthroughCommentPattern = new RegExp(options.commentPattern);","        } else {","            fallthroughCommentPattern = DEFAULT_FALLTHROUGH_COMMENT;","        }","","        return {","            onCodePathStart(codePath) {","                currentCodePath = codePath;","            },","            onCodePathEnd() {","                currentCodePath = currentCodePath.upper;","            },","","            SwitchCase(node) {","","                /*","                 * Checks whether or not there is a fallthrough comment.","                 * And reports the previous fallthrough node if that does not exist.","                 */","                if (fallthroughCase && !hasFallthroughComment(node, context, fallthroughCommentPattern)) {","                    context.report({","                        message: \"Expected a 'break' statement before '{{type}}'.\",","                        data: { type: node.test ? \"case\" : \"default\" },","                        node","                    });","                }","                fallthroughCase = null;","            },","","            \"SwitchCase:exit\"(node) {","                const nextToken = sourceCode.getTokenAfter(node);","","                /*","                 * `reachable` meant fall through because statements preceded by","                 * `break`, `return`, or `throw` are unreachable.","                 * And allows empty cases and the last case.","                 */","                if (currentCodePath.currentSegments.some(isReachable) &&","                    (node.consequent.length > 0 || hasBlankLinesBetween(node, nextToken)) &&","                    lodash.last(node.parent.cases) !== node) {","                    fallthroughCase = node;","                }","            }","        };","    }","};",""],"l":{"11":1,"17":1,"26":1,"27":0,"28":0,"30":0,"38":1,"39":0,"48":1,"49":0,"56":1,"78":0,"79":0,"80":0,"86":0,"87":0,"89":0,"90":0,"92":0,"95":0,"97":0,"100":0,"109":0,"110":0,"116":0,"120":0,"127":0,"130":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-floating-decimal.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-floating-decimal.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":19},"end":{"line":28,"column":26}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":50,"column":2}},"2":{"start":{"line":27,"column":8},"end":{"line":47,"column":10}},"3":{"start":{"line":30,"column":16},"end":{"line":45,"column":17}},"4":{"start":{"line":31,"column":20},"end":{"line":37,"column":21}},"5":{"start":{"line":32,"column":24},"end":{"line":36,"column":27}},"6":{"start":{"line":35,"column":42},"end":{"line":35,"column":75}},"7":{"start":{"line":38,"column":20},"end":{"line":44,"column":21}},"8":{"start":{"line":39,"column":24},"end":{"line":43,"column":27}},"9":{"start":{"line":42,"column":42},"end":{"line":42,"column":74}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":16}},{"start":{"line":30,"column":16},"end":{"line":30,"column":16}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":20},"end":{"line":31,"column":20}},{"start":{"line":31,"column":20},"end":{"line":31,"column":20}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":20},"end":{"line":38,"column":20}},{"start":{"line":38,"column":20},"end":{"line":38,"column":20}}]}},"code":["/**"," * @fileoverview Rule to flag use of a leading/trailing decimal point in a numeric literal"," * @author James Allardice"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow leading or trailing decimal points in numeric literals\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","","        return {","            Literal(node) {","","                if (typeof node.value === \"number\") {","                    if (node.raw.indexOf(\".\") === 0) {","                        context.report({","                            node,","                            message: \"A leading decimal point can be confused with a dot.\",","                            fix: fixer => fixer.insertTextBefore(node, \"0\")","                        });","                    }","                    if (node.raw.indexOf(\".\") === node.raw.length - 1) {","                        context.report({","                            node,","                            message: \"A trailing decimal point can be confused with a dot.\",","                            fix: fixer => fixer.insertTextAfter(node, \"0\")","                        });","                    }","                }","            }","        };","","    }","};",""],"l":{"12":1,"27":0,"30":0,"31":0,"32":0,"35":0,"38":0,"39":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-func-assign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-func-assign.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"checkReference","line":32,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":44}}},"3":{"name":"checkVariable","line":43,"loc":{"start":{"line":43,"column":8},"end":{"line":43,"column":41}}},"4":{"name":"checkForFunction","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":40}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":63,"column":2}},"3":{"start":{"line":32,"column":8},"end":{"line":36,"column":9}},"4":{"start":{"line":33,"column":12},"end":{"line":35,"column":15}},"5":{"start":{"line":34,"column":16},"end":{"line":34,"column":144}},"6":{"start":{"line":43,"column":8},"end":{"line":47,"column":9}},"7":{"start":{"line":44,"column":12},"end":{"line":46,"column":13}},"8":{"start":{"line":45,"column":16},"end":{"line":45,"column":52}},"9":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"10":{"start":{"line":55,"column":12},"end":{"line":55,"column":70}},"11":{"start":{"line":58,"column":8},"end":{"line":61,"column":10}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":12}},{"start":{"line":44,"column":12},"end":{"line":44,"column":12}}]}},"code":["/**"," * @fileoverview Rule to flag use of function declaration identifiers as variables."," * @author Ian Christian Myers"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow reassigning `function` declarations\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Reports a reference if is non initializer and writable.","         * @param {References} references - Collection of reference to check.","         * @returns {void}","         */","        function checkReference(references) {","            astUtils.getModifyingReferences(references).forEach(reference => {","                context.report({ node: reference.identifier, message: \"'{{name}}' is a function.\", data: { name: reference.identifier.name } });","            });","        }","","        /**","         * Finds and reports references that are non initializer and writable.","         * @param {Variable} variable - A variable to check.","         * @returns {void}","         */","        function checkVariable(variable) {","            if (variable.defs[0].type === \"FunctionName\") {","                checkReference(variable.references);","            }","        }","","        /**","         * Checks parameters of a given function node.","         * @param {ASTNode} node - A function node to check.","         * @returns {void}","         */","        function checkForFunction(node) {","            context.getDeclaredVariables(node).forEach(checkVariable);","        }","","        return {","            FunctionDeclaration: checkForFunction,","            FunctionExpression: checkForFunction","        };","    }","};",""],"l":{"8":1,"14":1,"32":1,"33":0,"34":0,"43":1,"44":0,"45":0,"54":1,"55":0,"58":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-global-assign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-global-assign.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":20}}},"2":{"name":"checkReference","line":46,"loc":{"start":{"line":46,"column":8},"end":{"line":46,"column":62}}},"3":{"name":"checkVariable","line":69,"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":41}}},"4":{"name":"(anonymous_4)","line":76,"loc":{"start":{"line":76,"column":19},"end":{"line":76,"column":22}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":83,"column":2}},"2":{"start":{"line":36,"column":8},"end":{"line":36,"column":42}},"3":{"start":{"line":37,"column":8},"end":{"line":37,"column":63}},"4":{"start":{"line":46,"column":8},"end":{"line":62,"column":9}},"5":{"start":{"line":47,"column":12},"end":{"line":47,"column":52}},"6":{"start":{"line":49,"column":12},"end":{"line":61,"column":13}},"7":{"start":{"line":56,"column":16},"end":{"line":60,"column":19}},"8":{"start":{"line":69,"column":8},"end":{"line":73,"column":9}},"9":{"start":{"line":70,"column":12},"end":{"line":72,"column":13}},"10":{"start":{"line":71,"column":16},"end":{"line":71,"column":60}},"11":{"start":{"line":75,"column":8},"end":{"line":81,"column":10}},"12":{"start":{"line":77,"column":16},"end":{"line":77,"column":55}},"13":{"start":{"line":79,"column":16},"end":{"line":79,"column":61}}},"branchMap":{"1":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":28},"end":{"line":37,"column":34}},{"start":{"line":37,"column":38},"end":{"line":37,"column":55}},{"start":{"line":37,"column":60},"end":{"line":37,"column":62}}]},"2":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":12}},{"start":{"line":49,"column":12},"end":{"line":49,"column":12}}]},"3":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":16},"end":{"line":49,"column":40}},{"start":{"line":50,"column":16},"end":{"line":50,"column":35}},{"start":{"line":54,"column":17},"end":{"line":54,"column":28}},{"start":{"line":54,"column":32},"end":{"line":54,"column":79}}]},"4":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12}},{"start":{"line":70,"column":12},"end":{"line":70,"column":12}}]},"5":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":44}},{"start":{"line":70,"column":48},"end":{"line":70,"column":88}}]}},"code":["/**"," * @fileoverview Rule to disallow assignments to native objects or read-only global variables"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow assignments to native objects or read-only global variables\",","            category: \"Best Practices\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    exceptions: {","                        type: \"array\",","                        items: { type: \"string\" },","                        uniqueItems: true","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const config = context.options[0];","        const exceptions = (config && config.exceptions) || [];","","        /**","         * Reports write references.","         * @param {Reference} reference - A reference to check.","         * @param {int} index - The index of the reference in the references.","         * @param {Reference[]} references - The array that the reference belongs to.","         * @returns {void}","         */","        function checkReference(reference, index, references) {","            const identifier = reference.identifier;","","            if (reference.init === false &&","                reference.isWrite() &&","","                // Destructuring assignments can have multiple default value,","                // so possibly there are multiple writeable references for the same identifier.","                (index === 0 || references[index - 1].identifier !== identifier)","            ) {","                context.report({","                    node: identifier,","                    message: \"Read-only global '{{name}}' should not be modified.\",","                    data: identifier","                });","            }","        }","","        /**","         * Reports write references if a given variable is read-only builtin.","         * @param {Variable} variable - A variable to check.","         * @returns {void}","         */","        function checkVariable(variable) {","            if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {","                variable.references.forEach(checkReference);","            }","        }","","        return {","            Program() {","                const globalScope = context.getScope();","","                globalScope.variables.forEach(checkVariable);","            }","        };","    }","};",""],"l":{"12":1,"36":0,"37":0,"46":1,"47":0,"49":0,"56":0,"69":1,"70":0,"71":0,"75":0,"77":0,"79":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-implicit-coercion.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-implicit-coercion.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":1,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":1,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0,0,0,0],"8":[0,0,0,0,0],"9":[0,0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0,0],"15":[0,0,0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0,0],"22":[0,0],"23":[0,0,0],"24":[0,0],"25":[0,0,0],"26":[0,0],"27":[0,0,0,0],"28":[0,0,0,0],"29":[0,0],"30":[0,0],"31":[0,0,0],"32":[0,0],"33":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"parseOptions","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":31}}},"2":{"name":"isDoubleLogicalNegating","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":39}}},"3":{"name":"isBinaryNegatingOfIndexOf","line":51,"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":41}}},"4":{"name":"isMultiplyByOne","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":31}}},"5":{"name":"isNumeric","line":78,"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":25}}},"6":{"name":"getNonNumericOperand","line":96,"loc":{"start":{"line":96,"column":0},"end":{"line":96,"column":36}}},"7":{"name":"isEmptyString","line":117,"loc":{"start":{"line":117,"column":0},"end":{"line":117,"column":29}}},"8":{"name":"isConcatWithEmptyString","line":126,"loc":{"start":{"line":126,"column":0},"end":{"line":126,"column":39}}},"9":{"name":"isAppendEmptyString","line":138,"loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":35}}},"10":{"name":"getNonEmptyOperand","line":147,"loc":{"start":{"line":147,"column":0},"end":{"line":147,"column":34}}},"11":{"name":"(anonymous_11)","line":188,"loc":{"start":{"line":188,"column":10},"end":{"line":188,"column":20}}},"12":{"name":"report","line":199,"loc":{"start":{"line":199,"column":8},"end":{"line":199,"column":57}}},"13":{"name":"(anonymous_13)","line":208,"loc":{"start":{"line":208,"column":19},"end":{"line":208,"column":27}}},"14":{"name":"(anonymous_14)","line":229,"loc":{"start":{"line":229,"column":27},"end":{"line":229,"column":34}}},"15":{"name":"(anonymous_15)","line":258,"loc":{"start":{"line":258,"column":35},"end":{"line":258,"column":42}}},"16":{"name":"(anonymous_16)","line":280,"loc":{"start":{"line":280,"column":32},"end":{"line":280,"column":39}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":9,"column":0},"end":{"line":9,"column":35}},"3":{"start":{"line":15,"column":0},"end":{"line":15,"column":47}},"4":{"start":{"line":16,"column":0},"end":{"line":16,"column":50}},"5":{"start":{"line":23,"column":0},"end":{"line":31,"column":1}},"6":{"start":{"line":24,"column":4},"end":{"line":24,"column":28}},"7":{"start":{"line":25,"column":4},"end":{"line":30,"column":6}},"8":{"start":{"line":38,"column":0},"end":{"line":44,"column":1}},"9":{"start":{"line":39,"column":4},"end":{"line":43,"column":6}},"10":{"start":{"line":51,"column":0},"end":{"line":59,"column":1}},"11":{"start":{"line":52,"column":4},"end":{"line":58,"column":6}},"12":{"start":{"line":66,"column":0},"end":{"line":71,"column":1}},"13":{"start":{"line":67,"column":4},"end":{"line":70,"column":6}},"14":{"start":{"line":78,"column":0},"end":{"line":87,"column":1}},"15":{"start":{"line":79,"column":4},"end":{"line":86,"column":6}},"16":{"start":{"line":96,"column":0},"end":{"line":109,"column":1}},"17":{"start":{"line":97,"column":4},"end":{"line":98,"column":27}},"18":{"start":{"line":100,"column":4},"end":{"line":102,"column":5}},"19":{"start":{"line":101,"column":8},"end":{"line":101,"column":21}},"20":{"start":{"line":104,"column":4},"end":{"line":106,"column":5}},"21":{"start":{"line":105,"column":8},"end":{"line":105,"column":20}},"22":{"start":{"line":108,"column":4},"end":{"line":108,"column":16}},"23":{"start":{"line":117,"column":0},"end":{"line":119,"column":1}},"24":{"start":{"line":118,"column":4},"end":{"line":118,"column":168}},"25":{"start":{"line":126,"column":0},"end":{"line":131,"column":1}},"26":{"start":{"line":127,"column":4},"end":{"line":130,"column":6}},"27":{"start":{"line":138,"column":0},"end":{"line":140,"column":1}},"28":{"start":{"line":139,"column":4},"end":{"line":139,"column":63}},"29":{"start":{"line":147,"column":0},"end":{"line":149,"column":1}},"30":{"start":{"line":148,"column":4},"end":{"line":148,"column":61}},"31":{"start":{"line":155,"column":0},"end":{"line":294,"column":2}},"32":{"start":{"line":189,"column":8},"end":{"line":189,"column":57}},"33":{"start":{"line":190,"column":8},"end":{"line":190,"column":51}},"34":{"start":{"line":199,"column":8},"end":{"line":226,"column":9}},"35":{"start":{"line":200,"column":12},"end":{"line":200,"column":76}},"36":{"start":{"line":202,"column":12},"end":{"line":225,"column":15}},"37":{"start":{"line":209,"column":20},"end":{"line":211,"column":21}},"38":{"start":{"line":210,"column":24},"end":{"line":210,"column":36}},"39":{"start":{"line":213,"column":20},"end":{"line":213,"column":72}},"40":{"start":{"line":215,"column":20},"end":{"line":222,"column":21}},"41":{"start":{"line":221,"column":24},"end":{"line":221,"column":77}},"42":{"start":{"line":223,"column":20},"end":{"line":223,"column":67}},"43":{"start":{"line":228,"column":8},"end":{"line":292,"column":10}},"44":{"start":{"line":230,"column":16},"end":{"line":230,"column":36}},"45":{"start":{"line":233,"column":16},"end":{"line":233,"column":67}},"46":{"start":{"line":234,"column":16},"end":{"line":238,"column":17}},"47":{"start":{"line":235,"column":20},"end":{"line":235,"column":100}},"48":{"start":{"line":237,"column":20},"end":{"line":237,"column":49}},"49":{"start":{"line":241,"column":16},"end":{"line":241,"column":66}},"50":{"start":{"line":242,"column":16},"end":{"line":246,"column":17}},"51":{"start":{"line":243,"column":20},"end":{"line":243,"column":89}},"52":{"start":{"line":245,"column":20},"end":{"line":245,"column":56}},"53":{"start":{"line":249,"column":16},"end":{"line":249,"column":66}},"54":{"start":{"line":250,"column":16},"end":{"line":254,"column":17}},"55":{"start":{"line":251,"column":20},"end":{"line":251,"column":90}},"56":{"start":{"line":253,"column":20},"end":{"line":253,"column":49}},"57":{"start":{"line":259,"column":16},"end":{"line":259,"column":36}},"58":{"start":{"line":262,"column":16},"end":{"line":262,"column":66}},"59":{"start":{"line":263,"column":16},"end":{"line":263,"column":132}},"60":{"start":{"line":265,"column":16},"end":{"line":269,"column":17}},"61":{"start":{"line":266,"column":20},"end":{"line":266,"column":94}},"62":{"start":{"line":268,"column":20},"end":{"line":268,"column":49}},"63":{"start":{"line":272,"column":16},"end":{"line":272,"column":66}},"64":{"start":{"line":273,"column":16},"end":{"line":277,"column":17}},"65":{"start":{"line":274,"column":20},"end":{"line":274,"column":101}},"66":{"start":{"line":276,"column":20},"end":{"line":276,"column":49}},"67":{"start":{"line":283,"column":16},"end":{"line":283,"column":72}},"68":{"start":{"line":285,"column":16},"end":{"line":290,"column":17}},"69":{"start":{"line":286,"column":20},"end":{"line":286,"column":78}},"70":{"start":{"line":287,"column":20},"end":{"line":287,"column":71}},"71":{"start":{"line":289,"column":20},"end":{"line":289,"column":49}}},"branchMap":{"1":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":14},"end":{"line":24,"column":21}},{"start":{"line":24,"column":25},"end":{"line":24,"column":27}}]},"2":{"line":26,"type":"cond-expr","locations":[{"start":{"line":26,"column":40},"end":{"line":26,"column":64}},{"start":{"line":26,"column":67},"end":{"line":26,"column":71}}]},"3":{"line":27,"type":"cond-expr","locations":[{"start":{"line":27,"column":38},"end":{"line":27,"column":61}},{"start":{"line":27,"column":64},"end":{"line":27,"column":68}}]},"4":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":38},"end":{"line":28,"column":61}},{"start":{"line":28,"column":64},"end":{"line":28,"column":68}}]},"5":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":15},"end":{"line":29,"column":28}},{"start":{"line":29,"column":32},"end":{"line":29,"column":34}}]},"6":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":29}},{"start":{"line":41,"column":8},"end":{"line":41,"column":48}},{"start":{"line":42,"column":8},"end":{"line":42,"column":38}}]},"7":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":29}},{"start":{"line":54,"column":8},"end":{"line":54,"column":47}},{"start":{"line":55,"column":8},"end":{"line":55,"column":56}},{"start":{"line":56,"column":8},"end":{"line":56,"column":59}},{"start":{"line":57,"column":8},"end":{"line":57,"column":65}}]},"8":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":11},"end":{"line":67,"column":32}},{"start":{"line":68,"column":8},"end":{"line":68,"column":36}},{"start":{"line":68,"column":40},"end":{"line":68,"column":61}},{"start":{"line":69,"column":8},"end":{"line":69,"column":37}},{"start":{"line":69,"column":41},"end":{"line":69,"column":63}}]},"9":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":31}},{"start":{"line":80,"column":35},"end":{"line":80,"column":65}},{"start":{"line":81,"column":8},"end":{"line":81,"column":38}},{"start":{"line":82,"column":12},"end":{"line":82,"column":41}},{"start":{"line":83,"column":12},"end":{"line":83,"column":43}},{"start":{"line":84,"column":12},"end":{"line":84,"column":45}}]},"10":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]},"11":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":8},"end":{"line":100,"column":41}},{"start":{"line":100,"column":45},"end":{"line":100,"column":62}}]},"12":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":104,"column":4}},{"start":{"line":104,"column":4},"end":{"line":104,"column":4}}]},"13":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":8},"end":{"line":104,"column":40}},{"start":{"line":104,"column":44},"end":{"line":104,"column":60}}]},"14":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":11},"end":{"line":118,"column":41}},{"start":{"line":118,"column":46},"end":{"line":118,"column":63}},{"start":{"line":118,"column":68},"end":{"line":118,"column":99}},{"start":{"line":118,"column":103},"end":{"line":118,"column":127}},{"start":{"line":118,"column":131},"end":{"line":118,"column":165}}]},"15":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":11},"end":{"line":127,"column":32}},{"start":{"line":128,"column":9},"end":{"line":128,"column":33}},{"start":{"line":128,"column":37},"end":{"line":128,"column":74}},{"start":{"line":129,"column":9},"end":{"line":129,"column":34}},{"start":{"line":129,"column":38},"end":{"line":129,"column":74}}]},"16":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":11},"end":{"line":139,"column":33}},{"start":{"line":139,"column":37},"end":{"line":139,"column":62}}]},"17":{"line":148,"type":"cond-expr","locations":[{"start":{"line":148,"column":38},"end":{"line":148,"column":48}},{"start":{"line":148,"column":51},"end":{"line":148,"column":60}}]},"18":{"line":200,"type":"cond-expr","locations":[{"start":{"line":200,"column":59},"end":{"line":200,"column":63}},{"start":{"line":200,"column":66},"end":{"line":200,"column":75}}]},"19":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":20},"end":{"line":209,"column":20}},{"start":{"line":209,"column":20},"end":{"line":209,"column":20}}]},"20":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":20},"end":{"line":215,"column":20}},{"start":{"line":215,"column":20},"end":{"line":215,"column":20}}]},"21":{"line":216,"type":"binary-expr","locations":[{"start":{"line":216,"column":24},"end":{"line":216,"column":35}},{"start":{"line":217,"column":24},"end":{"line":217,"column":62}},{"start":{"line":218,"column":24},"end":{"line":218,"column":99}},{"start":{"line":219,"column":24},"end":{"line":219,"column":86}}]},"22":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":16},"end":{"line":234,"column":16}},{"start":{"line":234,"column":16},"end":{"line":234,"column":16}}]},"23":{"line":234,"type":"binary-expr","locations":[{"start":{"line":234,"column":20},"end":{"line":234,"column":36}},{"start":{"line":234,"column":40},"end":{"line":234,"column":55}},{"start":{"line":234,"column":59},"end":{"line":234,"column":88}}]},"24":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":16},"end":{"line":242,"column":16}},{"start":{"line":242,"column":16},"end":{"line":242,"column":16}}]},"25":{"line":242,"type":"binary-expr","locations":[{"start":{"line":242,"column":20},"end":{"line":242,"column":36}},{"start":{"line":242,"column":40},"end":{"line":242,"column":55}},{"start":{"line":242,"column":59},"end":{"line":242,"column":90}}]},"26":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":16},"end":{"line":250,"column":16}},{"start":{"line":250,"column":16},"end":{"line":250,"column":16}}]},"27":{"line":250,"type":"binary-expr","locations":[{"start":{"line":250,"column":20},"end":{"line":250,"column":36}},{"start":{"line":250,"column":40},"end":{"line":250,"column":54}},{"start":{"line":250,"column":58},"end":{"line":250,"column":79}},{"start":{"line":250,"column":83},"end":{"line":250,"column":108}}]},"28":{"line":263,"type":"binary-expr","locations":[{"start":{"line":263,"column":42},"end":{"line":263,"column":58}},{"start":{"line":263,"column":62},"end":{"line":263,"column":76}},{"start":{"line":263,"column":80},"end":{"line":263,"column":101}},{"start":{"line":263,"column":105},"end":{"line":263,"column":131}}]},"29":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":16},"end":{"line":265,"column":16}},{"start":{"line":265,"column":16},"end":{"line":265,"column":16}}]},"30":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":16},"end":{"line":273,"column":16}},{"start":{"line":273,"column":16},"end":{"line":273,"column":16}}]},"31":{"line":273,"type":"binary-expr","locations":[{"start":{"line":273,"column":20},"end":{"line":273,"column":36}},{"start":{"line":273,"column":40},"end":{"line":273,"column":54}},{"start":{"line":273,"column":58},"end":{"line":273,"column":87}}]},"32":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":16},"end":{"line":285,"column":16}},{"start":{"line":285,"column":16},"end":{"line":285,"column":16}}]},"33":{"line":285,"type":"binary-expr","locations":[{"start":{"line":285,"column":20},"end":{"line":285,"column":36}},{"start":{"line":285,"column":40},"end":{"line":285,"column":54}},{"start":{"line":285,"column":58},"end":{"line":285,"column":83}}]}},"code":["/**"," * @fileoverview A rule to disallow the type conversions with shorter notations."," * @author Toru Nagashima"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","const esUtils = require(\"esutils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const INDEX_OF_PATTERN = /^(?:i|lastI)ndexOf$/;","const ALLOWABLE_OPERATORS = [\"~\", \"!!\", \"+\", \"*\"];","","/**"," * Parses and normalizes an option object."," * @param {Object} options - An option object to parse."," * @returns {Object} The parsed and normalized option object."," */","function parseOptions(options) {","    options = options || {};","    return {","        boolean: \"boolean\" in options ? Boolean(options.boolean) : true,","        number: \"number\" in options ? Boolean(options.number) : true,","        string: \"string\" in options ? Boolean(options.string) : true,","        allow: options.allow || []","    };","}","","/**"," * Checks whether or not a node is a double logical nigating."," * @param {ASTNode} node - An UnaryExpression node to check."," * @returns {boolean} Whether or not the node is a double logical nigating."," */","function isDoubleLogicalNegating(node) {","    return (","        node.operator === \"!\" &&","        node.argument.type === \"UnaryExpression\" &&","        node.argument.operator === \"!\"","    );","}","","/**"," * Checks whether or not a node is a binary negating of `.indexOf()` method calling."," * @param {ASTNode} node - An UnaryExpression node to check."," * @returns {boolean} Whether or not the node is a binary negating of `.indexOf()` method calling."," */","function isBinaryNegatingOfIndexOf(node) {","    return (","        node.operator === \"~\" &&","        node.argument.type === \"CallExpression\" &&","        node.argument.callee.type === \"MemberExpression\" &&","        node.argument.callee.property.type === \"Identifier\" &&","        INDEX_OF_PATTERN.test(node.argument.callee.property.name)","    );","}","","/**"," * Checks whether or not a node is a multiplying by one."," * @param {BinaryExpression} node - A BinaryExpression node to check."," * @returns {boolean} Whether or not the node is a multiplying by one."," */","function isMultiplyByOne(node) {","    return node.operator === \"*\" && (","        node.left.type === \"Literal\" && node.left.value === 1 ||","        node.right.type === \"Literal\" && node.right.value === 1","    );","}","","/**"," * Checks whether the result of a node is numeric or not"," * @param {ASTNode} node The node to test"," * @returns {boolean} true if the node is a number literal or a `Number()`, `parseInt` or `parseFloat` call"," */","function isNumeric(node) {","    return (","        node.type === \"Literal\" && typeof node.value === \"number\" ||","        node.type === \"CallExpression\" && (","            node.callee.name === \"Number\" ||","            node.callee.name === \"parseInt\" ||","            node.callee.name === \"parseFloat\"","        )","    );","}","","/**"," * Returns the first non-numeric operand in a BinaryExpression. Designed to be"," * used from bottom to up since it walks up the BinaryExpression trees using"," * node.parent to find the result."," * @param {BinaryExpression} node The BinaryExpression node to be walked up on"," * @returns {ASTNode|null} The first non-numeric item in the BinaryExpression tree or null"," */","function getNonNumericOperand(node) {","    const left = node.left,","        right = node.right;","","    if (right.type !== \"BinaryExpression\" && !isNumeric(right)) {","        return right;","    }","","    if (left.type !== \"BinaryExpression\" && !isNumeric(left)) {","        return left;","    }","","    return null;","}","","/**"," * Checks whether a node is an empty string literal or not."," * @param {ASTNode} node The node to check."," * @returns {boolean} Whether or not the passed in node is an"," * empty string literal or not."," */","function isEmptyString(node) {","    return astUtils.isStringLiteral(node) && (node.value === \"\" || (node.type === \"TemplateLiteral\" && node.quasis.length === 1 && node.quasis[0].value.cooked === \"\"));","}","","/**"," * Checks whether or not a node is a concatenating with an empty string."," * @param {ASTNode} node - A BinaryExpression node to check."," * @returns {boolean} Whether or not the node is a concatenating with an empty string."," */","function isConcatWithEmptyString(node) {","    return node.operator === \"+\" && (","        (isEmptyString(node.left) && !astUtils.isStringLiteral(node.right)) ||","        (isEmptyString(node.right) && !astUtils.isStringLiteral(node.left))","    );","}","","/**"," * Checks whether or not a node is appended with an empty string."," * @param {ASTNode} node - An AssignmentExpression node to check."," * @returns {boolean} Whether or not the node is appended with an empty string."," */","function isAppendEmptyString(node) {","    return node.operator === \"+=\" && isEmptyString(node.right);","}","","/**"," * Returns the operand that is not an empty string from a flagged BinaryExpression."," * @param {ASTNode} node - The flagged BinaryExpression node to check."," * @returns {ASTNode} The operand that is not an empty string from a flagged BinaryExpression."," */","function getNonEmptyOperand(node) {","    return isEmptyString(node.left) ? node.right : node.left;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow shorthand type conversions\",","            category: \"Best Practices\",","            recommended: false","        },","","        fixable: \"code\",","        schema: [{","            type: \"object\",","            properties: {","                boolean: {","                    type: \"boolean\"","                },","                number: {","                    type: \"boolean\"","                },","                string: {","                    type: \"boolean\"","                },","                allow: {","                    type: \"array\",","                    items: {","                        enum: ALLOWABLE_OPERATORS","                    },","                    uniqueItems: true","                }","            },","            additionalProperties: false","        }]","    },","","    create(context) {","        const options = parseOptions(context.options[0]);","        const sourceCode = context.getSourceCode();","","        /**","        * Reports an error and autofixes the node","        * @param {ASTNode} node - An ast node to report the error on.","        * @param {string} recommendation - The recommended code for the issue","        * @param {bool} shouldFix - Whether this report should fix the node","        * @returns {void}","        */","        function report(node, recommendation, shouldFix) {","            shouldFix = typeof shouldFix === \"undefined\" ? true : shouldFix;","","            context.report({","                node,","                message: \"use `{{recommendation}}` instead.\",","                data: {","                    recommendation","                },","                fix(fixer) {","                    if (!shouldFix) {","                        return null;","                    }","","                    const tokenBefore = sourceCode.getTokenBefore(node);","","                    if (","                        tokenBefore &&","                        tokenBefore.range[1] === node.range[0] &&","                        esUtils.code.isIdentifierPartES6(tokenBefore.value.slice(-1).charCodeAt(0)) &&","                        esUtils.code.isIdentifierPartES6(recommendation.charCodeAt(0))","                    ) {","                        return fixer.replaceText(node, ` ${recommendation}`);","                    }","                    return fixer.replaceText(node, recommendation);","                }","            });","        }","","        return {","            UnaryExpression(node) {","                let operatorAllowed;","","                // !!foo","                operatorAllowed = options.allow.indexOf(\"!!\") >= 0;","                if (!operatorAllowed && options.boolean && isDoubleLogicalNegating(node)) {","                    const recommendation = `Boolean(${sourceCode.getText(node.argument.argument)})`;","","                    report(node, recommendation);","                }","","                // ~foo.indexOf(bar)","                operatorAllowed = options.allow.indexOf(\"~\") >= 0;","                if (!operatorAllowed && options.boolean && isBinaryNegatingOfIndexOf(node)) {","                    const recommendation = `${sourceCode.getText(node.argument)} !== -1`;","","                    report(node, recommendation, false);","                }","","                // +foo","                operatorAllowed = options.allow.indexOf(\"+\") >= 0;","                if (!operatorAllowed && options.number && node.operator === \"+\" && !isNumeric(node.argument)) {","                    const recommendation = `Number(${sourceCode.getText(node.argument)})`;","","                    report(node, recommendation);","                }","            },","","            // Use `:exit` to prevent double reporting","            \"BinaryExpression:exit\"(node) {","                let operatorAllowed;","","                // 1 * foo","                operatorAllowed = options.allow.indexOf(\"*\") >= 0;","                const nonNumericOperand = !operatorAllowed && options.number && isMultiplyByOne(node) && getNonNumericOperand(node);","","                if (nonNumericOperand) {","                    const recommendation = `Number(${sourceCode.getText(nonNumericOperand)})`;","","                    report(node, recommendation);","                }","","                // \"\" + foo","                operatorAllowed = options.allow.indexOf(\"+\") >= 0;","                if (!operatorAllowed && options.string && isConcatWithEmptyString(node)) {","                    const recommendation = `String(${sourceCode.getText(getNonEmptyOperand(node))})`;","","                    report(node, recommendation);","                }","            },","","            AssignmentExpression(node) {","","                // foo += \"\"","                const operatorAllowed = options.allow.indexOf(\"+\") >= 0;","","                if (!operatorAllowed && options.string && isAppendEmptyString(node)) {","                    const code = sourceCode.getText(getNonEmptyOperand(node));","                    const recommendation = `${code} = String(${code})`;","","                    report(node, recommendation);","                }","            }","        };","    }","};",""],"l":{"8":1,"9":1,"15":1,"16":1,"23":1,"24":0,"25":0,"38":1,"39":0,"51":1,"52":0,"66":1,"67":0,"78":1,"79":0,"96":1,"97":0,"100":0,"101":0,"104":0,"105":0,"108":0,"117":1,"118":0,"126":1,"127":0,"138":1,"139":0,"147":1,"148":0,"155":1,"189":0,"190":0,"199":1,"200":0,"202":0,"209":0,"210":0,"213":0,"215":0,"221":0,"223":0,"228":0,"230":0,"233":0,"234":0,"235":0,"237":0,"241":0,"242":0,"243":0,"245":0,"249":0,"250":0,"251":0,"253":0,"259":0,"262":0,"263":0,"265":0,"266":0,"268":0,"272":0,"273":0,"274":0,"276":0,"283":0,"285":0,"286":0,"287":0,"289":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-implicit-globals.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-implicit-globals.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":19},"end":{"line":25,"column":22}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":55,"column":2}},"2":{"start":{"line":24,"column":8},"end":{"line":52,"column":10}},"3":{"start":{"line":26,"column":16},"end":{"line":26,"column":49}},"4":{"start":{"line":28,"column":16},"end":{"line":38,"column":19}},"5":{"start":{"line":29,"column":20},"end":{"line":31,"column":21}},"6":{"start":{"line":30,"column":24},"end":{"line":30,"column":31}},"7":{"start":{"line":33,"column":20},"end":{"line":37,"column":23}},"8":{"start":{"line":34,"column":24},"end":{"line":36,"column":25}},"9":{"start":{"line":35,"column":28},"end":{"line":35,"column":136}},"10":{"start":{"line":40,"column":16},"end":{"line":50,"column":19}},"11":{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},"12":{"start":{"line":43,"column":20},"end":{"line":45,"column":21}},"13":{"start":{"line":44,"column":24},"end":{"line":44,"column":31}},"14":{"start":{"line":47,"column":20},"end":{"line":49,"column":23}},"15":{"start":{"line":48,"column":24},"end":{"line":48,"column":132}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":20},"end":{"line":29,"column":20}},{"start":{"line":29,"column":20},"end":{"line":29,"column":20}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":24},"end":{"line":34,"column":24}},{"start":{"line":34,"column":24},"end":{"line":34,"column":24}}]},"3":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":28},"end":{"line":34,"column":55}},{"start":{"line":34,"column":60},"end":{"line":34,"column":83}},{"start":{"line":34,"column":87},"end":{"line":34,"column":112}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":20},"end":{"line":43,"column":20}},{"start":{"line":43,"column":20},"end":{"line":43,"column":20}}]},"5":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":24},"end":{"line":43,"column":37}},{"start":{"line":43,"column":41},"end":{"line":43,"column":64}}]}},"code":["/**"," * @fileoverview Rule to check for implicit global variables and functions."," * @author Joshua Peek"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow variable and `function` declarations in the global scope\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        return {","            Program() {","                const scope = context.getScope();","","                scope.variables.forEach(variable => {","                    if (variable.writeable) {","                        return;","                    }","","                    variable.defs.forEach(def => {","                        if (def.type === \"FunctionName\" || (def.type === \"Variable\" && def.parent.kind === \"var\")) {","                            context.report({ node: def.node, message: \"Implicit global variable, assign as global property instead.\" });","                        }","                    });","                });","","                scope.implicit.variables.forEach(variable => {","                    const scopeVariable = scope.set.get(variable.name);","","                    if (scopeVariable && scopeVariable.writeable) {","                        return;","                    }","","                    variable.defs.forEach(def => {","                        context.report({ node: def.node, message: \"Implicit global variable, assign as global property instead.\" });","                    });","                });","            }","        };","","    }","};",""],"l":{"12":1,"24":0,"26":0,"28":0,"29":0,"30":0,"33":0,"34":0,"35":0,"40":0,"41":0,"43":0,"44":0,"47":0,"48":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-implied-eval.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-implied-eval.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"last","line":42,"loc":{"start":{"line":42,"column":8},"end":{"line":42,"column":27}}},"3":{"name":"isImpliedEvalMemberExpression","line":52,"loc":{"start":{"line":52,"column":8},"end":{"line":52,"column":53}}},"4":{"name":"isImpliedEvalCallExpression","line":69,"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":51}}},"5":{"name":"hasImpliedEvalParent","line":85,"loc":{"start":{"line":85,"column":8},"end":{"line":85,"column":44}}},"6":{"name":"checkString","line":102,"loc":{"start":{"line":102,"column":8},"end":{"line":102,"column":35}}},"7":{"name":"(anonymous_7)","line":117,"loc":{"start":{"line":117,"column":26},"end":{"line":117,"column":33}}},"8":{"name":"(anonymous_8)","line":125,"loc":{"start":{"line":125,"column":33},"end":{"line":125,"column":40}}},"9":{"name":"(anonymous_9)","line":136,"loc":{"start":{"line":136,"column":28},"end":{"line":136,"column":35}}},"10":{"name":"(anonymous_10)","line":142,"loc":{"start":{"line":142,"column":35},"end":{"line":142,"column":42}}},"11":{"name":"(anonymous_11)","line":148,"loc":{"start":{"line":148,"column":19},"end":{"line":148,"column":26}}},"12":{"name":"(anonymous_12)","line":154,"loc":{"start":{"line":154,"column":27},"end":{"line":154,"column":34}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":160,"column":2}},"2":{"start":{"line":24,"column":8},"end":{"line":24,"column":66}},"3":{"start":{"line":30,"column":8},"end":{"line":30,"column":45}},"4":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"5":{"start":{"line":43,"column":12},"end":{"line":43,"column":52}},"6":{"start":{"line":52,"column":8},"end":{"line":58,"column":9}},"7":{"start":{"line":53,"column":12},"end":{"line":55,"column":101}},"8":{"start":{"line":57,"column":12},"end":{"line":57,"column":66}},"9":{"start":{"line":69,"column":8},"end":{"line":77,"column":9}},"10":{"start":{"line":70,"column":12},"end":{"line":74,"column":87}},"11":{"start":{"line":76,"column":12},"end":{"line":76,"column":64}},"12":{"start":{"line":85,"column":8},"end":{"line":92,"column":9}},"13":{"start":{"line":88,"column":12},"end":{"line":91,"column":93}},"14":{"start":{"line":102,"column":8},"end":{"line":110,"column":9}},"15":{"start":{"line":103,"column":12},"end":{"line":109,"column":13}},"16":{"start":{"line":106,"column":16},"end":{"line":106,"column":65}},"17":{"start":{"line":108,"column":16},"end":{"line":108,"column":129}},"18":{"start":{"line":116,"column":8},"end":{"line":157,"column":10}},"19":{"start":{"line":118,"column":16},"end":{"line":122,"column":17}},"20":{"start":{"line":121,"column":20},"end":{"line":121,"column":59}},"21":{"start":{"line":126,"column":16},"end":{"line":133,"column":17}},"22":{"start":{"line":132,"column":20},"end":{"line":132,"column":52}},"23":{"start":{"line":137,"column":16},"end":{"line":139,"column":17}},"24":{"start":{"line":138,"column":20},"end":{"line":138,"column":63}},"25":{"start":{"line":143,"column":16},"end":{"line":145,"column":17}},"26":{"start":{"line":144,"column":20},"end":{"line":144,"column":58}},"27":{"start":{"line":149,"column":16},"end":{"line":151,"column":17}},"28":{"start":{"line":150,"column":20},"end":{"line":150,"column":38}},"29":{"start":{"line":155,"column":16},"end":{"line":155,"column":34}}},"branchMap":{"1":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":25},"end":{"line":43,"column":44}},{"start":{"line":43,"column":47},"end":{"line":43,"column":51}}]},"2":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":37},"end":{"line":55,"column":66}},{"start":{"line":55,"column":70},"end":{"line":55,"column":100}}]},"3":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":19},"end":{"line":57,"column":43}},{"start":{"line":57,"column":47},"end":{"line":57,"column":65}}]},"4":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":21},"end":{"line":73,"column":33}},{"start":{"line":73,"column":37},"end":{"line":73,"column":69}},{"start":{"line":74,"column":21},"end":{"line":74,"column":39}},{"start":{"line":74,"column":43},"end":{"line":74,"column":85}}]},"5":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":19},"end":{"line":76,"column":38}},{"start":{"line":76,"column":42},"end":{"line":76,"column":63}}]},"6":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":19},"end":{"line":88,"column":72}},{"start":{"line":91,"column":17},"end":{"line":91,"column":54}},{"start":{"line":91,"column":58},"end":{"line":91,"column":91}}]},"7":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":12},"end":{"line":103,"column":12}},{"start":{"line":103,"column":12},"end":{"line":103,"column":12}}]},"8":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":16},"end":{"line":118,"column":16}},{"start":{"line":118,"column":16},"end":{"line":118,"column":16}}]},"9":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":16},"end":{"line":126,"column":16}},{"start":{"line":126,"column":16},"end":{"line":126,"column":16}}]},"10":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":16},"end":{"line":137,"column":16}},{"start":{"line":137,"column":16},"end":{"line":137,"column":16}}]},"11":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":20},"end":{"line":137,"column":41}},{"start":{"line":137,"column":45},"end":{"line":137,"column":71}}]},"12":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":16},"end":{"line":143,"column":16}},{"start":{"line":143,"column":16},"end":{"line":143,"column":16}}]},"13":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":16},"end":{"line":149,"column":16}},{"start":{"line":149,"column":16},"end":{"line":149,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag use of implied eval via setTimeout and setInterval"," * @author James Allardice"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of `eval()`-like methods\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const CALLEE_RE = /^(setTimeout|setInterval|execScript)$/;","","        /*","         * Figures out if we should inspect a given binary expression. Is a stack","         * of stacks, where the first element in each substack is a CallExpression.","         */","        const impliedEvalAncestorsStack = [];","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Get the last element of an array, without modifying arr, like pop(), but non-destructive.","         * @param {array} arr What to inspect","         * @returns {*} The last element of arr","         * @private","         */","        function last(arr) {","            return arr ? arr[arr.length - 1] : null;","        }","","        /**","         * Checks if the given MemberExpression node is a potentially implied eval identifier on window.","         * @param {ASTNode} node The MemberExpression node to check.","         * @returns {boolean} Whether or not the given node is potentially an implied eval.","         * @private","         */","        function isImpliedEvalMemberExpression(node) {","            const object = node.object,","                property = node.property,","                hasImpliedEvalName = CALLEE_RE.test(property.name) || CALLEE_RE.test(property.value);","","            return object.name === \"window\" && hasImpliedEvalName;","        }","","        /**","         * Determines if a node represents a call to a potentially implied eval.","         *","         * This checks the callee name and that there's an argument, but not the type of the argument.","         *","         * @param {ASTNode} node The CallExpression to check.","         * @returns {boolean} True if the node matches, false if not.","         * @private","         */","        function isImpliedEvalCallExpression(node) {","            const isMemberExpression = (node.callee.type === \"MemberExpression\"),","                isIdentifier = (node.callee.type === \"Identifier\"),","                isImpliedEvalCallee =","                    (isIdentifier && CALLEE_RE.test(node.callee.name)) ||","                    (isMemberExpression && isImpliedEvalMemberExpression(node.callee));","","            return isImpliedEvalCallee && node.arguments.length;","        }","","        /**","         * Checks that the parent is a direct descendent of an potential implied eval CallExpression, and if the parent is a CallExpression, that we're the first argument.","         * @param {ASTNode} node The node to inspect the parent of.","         * @returns {boolean} Was the parent a direct descendent, and is the child therefore potentially part of a dangerous argument?","         * @private","         */","        function hasImpliedEvalParent(node) {","","            // make sure our parent is marked","            return node.parent === last(last(impliedEvalAncestorsStack)) &&","","                // if our parent is a CallExpression, make sure we're the first argument","                (node.parent.type !== \"CallExpression\" || node === node.parent.arguments[0]);","        }","","        /**","         * Checks if our parent is marked as part of an implied eval argument. If","         * so, collapses the top of impliedEvalAncestorsStack and reports on the","         * original CallExpression.","         * @param {ASTNode} node The CallExpression to check.","         * @returns {boolean} True if the node matches, false if not.","         * @private","         */","        function checkString(node) {","            if (hasImpliedEvalParent(node)) {","","                // remove the entire substack, to avoid duplicate reports","                const substack = impliedEvalAncestorsStack.pop();","","                context.report({ node: substack[0], message: \"Implied eval. Consider passing a function instead of a string.\" });","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            CallExpression(node) {","                if (isImpliedEvalCallExpression(node)) {","","                    // call expressions create a new substack","                    impliedEvalAncestorsStack.push([node]);","                }","            },","","            \"CallExpression:exit\"(node) {","                if (node === last(last(impliedEvalAncestorsStack))) {","","                    /* Destroys the entire sub-stack, rather than just using","                     * last(impliedEvalAncestorsStack).pop(), as a CallExpression is","                     * always the bottom of a impliedEvalAncestorsStack substack.","                     */","                    impliedEvalAncestorsStack.pop();","                }","            },","","            BinaryExpression(node) {","                if (node.operator === \"+\" && hasImpliedEvalParent(node)) {","                    last(impliedEvalAncestorsStack).push(node);","                }","            },","","            \"BinaryExpression:exit\"(node) {","                if (node === last(last(impliedEvalAncestorsStack))) {","                    last(impliedEvalAncestorsStack).pop();","                }","            },","","            Literal(node) {","                if (typeof node.value === \"string\") {","                    checkString(node);","                }","            },","","            TemplateLiteral(node) {","                checkString(node);","            }","        };","","    }","};",""],"l":{"12":1,"24":0,"30":0,"42":1,"43":0,"52":1,"53":0,"57":0,"69":1,"70":0,"76":0,"85":1,"88":0,"102":1,"103":0,"106":0,"108":0,"116":0,"118":0,"121":0,"126":0,"132":0,"137":0,"138":0,"143":0,"144":0,"149":0,"150":0,"155":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-inline-comments.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-inline-comments.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":10},"end":{"line":24,"column":20}}},"2":{"name":"testCodeAroundComment","line":33,"loc":{"start":{"line":33,"column":8},"end":{"line":33,"column":45}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":64,"column":2}},"3":{"start":{"line":25,"column":8},"end":{"line":25,"column":51}},"4":{"start":{"line":33,"column":8},"end":{"line":51,"column":9}},"5":{"start":{"line":36,"column":12},"end":{"line":36,"column":80}},"6":{"start":{"line":37,"column":12},"end":{"line":37,"column":76}},"7":{"start":{"line":39,"column":12},"end":{"line":39,"column":78}},"8":{"start":{"line":42,"column":12},"end":{"line":42,"column":72}},"9":{"start":{"line":45,"column":12},"end":{"line":45,"column":66}},"10":{"start":{"line":48,"column":12},"end":{"line":50,"column":13}},"11":{"start":{"line":49,"column":16},"end":{"line":49,"column":90}},"12":{"start":{"line":57,"column":8},"end":{"line":62,"column":10}}},"branchMap":{"1":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":12}},{"start":{"line":48,"column":12},"end":{"line":48,"column":12}}]},"2":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":16},"end":{"line":48,"column":28}},{"start":{"line":48,"column":33},"end":{"line":48,"column":41}},{"start":{"line":48,"column":45},"end":{"line":48,"column":54}}]}},"code":["/**"," * @fileoverview Enforces or disallows inline comments."," * @author Greg Cochard"," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow inline comments after code\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        /**","         * Will check that comments are not on lines starting with or ending with code","         * @param {ASTNode} node The comment node to check","         * @private","         * @returns {void}","         */","        function testCodeAroundComment(node) {","","            // Get the whole line and cut it off at the start of the comment","            const startLine = String(sourceCode.lines[node.loc.start.line - 1]);","            const endLine = String(sourceCode.lines[node.loc.end.line - 1]);","","            const preamble = startLine.slice(0, node.loc.start.column).trim();","","            // Also check after the comment","            const postamble = endLine.slice(node.loc.end.column).trim();","","            // Check that this comment isn't an ESLint directive","            const isDirective = astUtils.isDirectiveComment(node);","","            // Should be empty if there was only whitespace around the comment","            if (!isDirective && (preamble || postamble)) {","                context.report({ node, message: \"Unexpected comment inline with code.\" });","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            LineComment: testCodeAroundComment,","            BlockComment: testCodeAroundComment","","        };","    }","};",""],"l":{"7":1,"13":1,"25":0,"33":1,"36":0,"37":0,"39":0,"42":0,"45":0,"48":0,"49":0,"57":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-inner-declarations.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-inner-declarations.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":10},"end":{"line":27,"column":20}}},"2":{"name":"nearestBody","line":33,"loc":{"start":{"line":33,"column":8},"end":{"line":33,"column":31}}},"3":{"name":"check","line":60,"loc":{"start":{"line":60,"column":8},"end":{"line":60,"column":29}}},"4":{"name":"(anonymous_4)","line":78,"loc":{"start":{"line":78,"column":31},"end":{"line":78,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":87,"column":2}},"2":{"start":{"line":33,"column":8},"end":{"line":53,"column":9}},"3":{"start":{"line":34,"column":12},"end":{"line":34,"column":53}},"4":{"start":{"line":35,"column":12},"end":{"line":36,"column":31}},"5":{"start":{"line":38,"column":12},"end":{"line":43,"column":13}},"6":{"start":{"line":41,"column":16},"end":{"line":41,"column":32}},"7":{"start":{"line":42,"column":16},"end":{"line":42,"column":43}},"8":{"start":{"line":45,"column":12},"end":{"line":52,"column":14}},"9":{"start":{"line":60,"column":8},"end":{"line":73,"column":9}},"10":{"start":{"line":61,"column":12},"end":{"line":63,"column":41}},"11":{"start":{"line":65,"column":12},"end":{"line":72,"column":13}},"12":{"start":{"line":66,"column":16},"end":{"line":71,"column":21}},"13":{"start":{"line":75,"column":8},"end":{"line":84,"column":10}},"14":{"start":{"line":79,"column":16},"end":{"line":81,"column":17}},"15":{"start":{"line":80,"column":20},"end":{"line":80,"column":32}}},"branchMap":{"1":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":19},"end":{"line":38,"column":27}},{"start":{"line":38,"column":31},"end":{"line":40,"column":40}}]},"2":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":26},"end":{"line":62,"column":49}},{"start":{"line":62,"column":53},"end":{"line":62,"column":72}},{"start":{"line":63,"column":20},"end":{"line":63,"column":39}}]},"3":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":12}},{"start":{"line":65,"column":12},"end":{"line":65,"column":12}}]},"4":{"line":67,"type":"cond-expr","locations":[{"start":{"line":68,"column":30},"end":{"line":68,"column":40}},{"start":{"line":68,"column":43},"end":{"line":68,"column":53}}]},"5":{"line":69,"type":"cond-expr","locations":[{"start":{"line":70,"column":30},"end":{"line":70,"column":39}},{"start":{"line":70,"column":42},"end":{"line":70,"column":57}}]},"6":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":16}},{"start":{"line":79,"column":16},"end":{"line":79,"column":16}}]},"7":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":20},"end":{"line":79,"column":49}},{"start":{"line":79,"column":53},"end":{"line":79,"column":72}}]}},"code":["/**"," * @fileoverview Rule to enforce declarations in program or function body root."," * @author Brandon Mills"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow variable or `function` declarations in nested blocks\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [","            {","                enum: [\"functions\", \"both\"]","            }","        ]","    },","","    create(context) {","","        /**","         * Find the nearest Program or Function ancestor node.","         * @returns {Object} Ancestor's type and distance from node.","         */","        function nearestBody() {","            const ancestors = context.getAncestors();","            let ancestor = ancestors.pop(),","                generation = 1;","","            while (ancestor && [\"Program\", \"FunctionDeclaration\",","                \"FunctionExpression\", \"ArrowFunctionExpression\"","            ].indexOf(ancestor.type) < 0) {","                generation += 1;","                ancestor = ancestors.pop();","            }","","            return {","","                // Type of containing ancestor","                type: ancestor.type,","","                // Separation between ancestor and node","                distance: generation","            };","        }","","        /**","         * Ensure that a given node is at a program or function body's root.","         * @param {ASTNode} node Declaration node to check.","         * @returns {void}","         */","        function check(node) {","            const body = nearestBody(node),","                valid = ((body.type === \"Program\" && body.distance === 1) ||","                    body.distance === 2);","","            if (!valid) {","                context.report({ node, message: \"Move {{type}} declaration to {{body}} root.\", data: {","                    type: (node.type === \"FunctionDeclaration\"","                            ? \"function\" : \"variable\"),","                    body: (body.type === \"Program\"","                            ? \"program\" : \"function body\")","                } });","            }","        }","","        return {","","            FunctionDeclaration: check,","            VariableDeclaration(node) {","                if (context.options[0] === \"both\" && node.kind === \"var\") {","                    check(node);","                }","            }","","        };","","    }","};",""],"l":{"12":1,"33":1,"34":0,"35":0,"38":0,"41":0,"42":0,"45":0,"60":1,"61":0,"65":0,"66":0,"75":0,"79":0,"80":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-invalid-regexp.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-invalid-regexp.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":39,"loc":{"start":{"line":39,"column":10},"end":{"line":39,"column":20}}},"2":{"name":"isString","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":32}}},"3":{"name":"check","line":64,"loc":{"start":{"line":64,"column":8},"end":{"line":64,"column":29}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":17,"column":0},"end":{"line":106,"column":2}},"3":{"start":{"line":41,"column":8},"end":{"line":41,"column":43}},"4":{"start":{"line":42,"column":8},"end":{"line":42,"column":30}},"5":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"6":{"start":{"line":45,"column":12},"end":{"line":45,"column":66}},"7":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"8":{"start":{"line":55,"column":12},"end":{"line":55,"column":85}},"9":{"start":{"line":64,"column":8},"end":{"line":98,"column":9}},"10":{"start":{"line":65,"column":12},"end":{"line":97,"column":13}},"11":{"start":{"line":66,"column":16},"end":{"line":66,"column":87}},"12":{"start":{"line":68,"column":16},"end":{"line":70,"column":17}},"13":{"start":{"line":69,"column":20},"end":{"line":69,"column":85}},"14":{"start":{"line":72,"column":16},"end":{"line":80,"column":17}},"15":{"start":{"line":73,"column":20},"end":{"line":73,"column":61}},"16":{"start":{"line":75,"column":20},"end":{"line":79,"column":23}},"17":{"start":{"line":82,"column":16},"end":{"line":95,"column":17}},"18":{"start":{"line":84,"column":20},"end":{"line":94,"column":21}},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":75}},"20":{"start":{"line":87,"column":24},"end":{"line":93,"column":27}},"21":{"start":{"line":100,"column":8},"end":{"line":103,"column":10}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":8}},{"start":{"line":44,"column":8},"end":{"line":44,"column":8}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":19}},{"start":{"line":44,"column":23},"end":{"line":44,"column":52}}]},"3":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":19},"end":{"line":55,"column":23}},{"start":{"line":55,"column":27},"end":{"line":55,"column":50}},{"start":{"line":55,"column":54},"end":{"line":55,"column":84}}]},"4":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":12}},{"start":{"line":65,"column":12},"end":{"line":65,"column":12}}]},"5":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":16},"end":{"line":65,"column":49}},{"start":{"line":65,"column":53},"end":{"line":65,"column":82}},{"start":{"line":65,"column":86},"end":{"line":65,"column":113}}]},"6":{"line":66,"type":"cond-expr","locations":[{"start":{"line":66,"column":58},"end":{"line":66,"column":81}},{"start":{"line":66,"column":84},"end":{"line":66,"column":86}}]},"7":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":16},"end":{"line":68,"column":16}},{"start":{"line":68,"column":16},"end":{"line":68,"column":16}}]},"8":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":16},"end":{"line":82,"column":16}},{"start":{"line":82,"column":16},"end":{"line":82,"column":16}}]}},"code":["/**"," * @fileoverview Validate strings passed to the RegExp constructor"," * @author Michael Ficarra"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const espree = require(\"espree\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow invalid regular expression strings in `RegExp` constructors\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [{","            type: \"object\",","            properties: {","                allowConstructorFlags: {","                    type: \"array\",","                    items: {","                        type: \"string\"","                    }","                }","            },","            additionalProperties: false","        }]","    },","","    create(context) {","","        const options = context.options[0];","        let allowedFlags = \"\";","","        if (options && options.allowConstructorFlags) {","            allowedFlags = options.allowConstructorFlags.join(\"\");","        }","","        /**","         * Check if node is a string","         * @param {ASTNode} node node to evaluate","         * @returns {boolean} True if its a string","         * @private","         */","        function isString(node) {","            return node && node.type === \"Literal\" && typeof node.value === \"string\";","        }","","        /**","         * Validate strings passed to the RegExp constructor","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function check(node) {","            if (node.callee.type === \"Identifier\" && node.callee.name === \"RegExp\" && isString(node.arguments[0])) {","                let flags = isString(node.arguments[1]) ? node.arguments[1].value : \"\";","","                if (allowedFlags) {","                    flags = flags.replace(new RegExp(`[${allowedFlags}]`, \"gi\"), \"\");","                }","","                try {","                    void new RegExp(node.arguments[0].value);","                } catch (e) {","                    context.report({","                        node,","                        message: \"{{message}}.\",","                        data: e","                    });","                }","","                if (flags) {","","                    try {","                        espree.parse(`/./${flags}`, context.parserOptions);","                    } catch (ex) {","                        context.report({","                            node,","                            message: \"Invalid flags supplied to RegExp constructor '{{flags}}'.\",","                            data: {","                                flags","                            }","                        });","                    }","                }","","            }","        }","","        return {","            CallExpression: check,","            NewExpression: check","        };","","    }","};",""],"l":{"11":1,"17":1,"41":0,"42":0,"44":0,"45":0,"54":1,"55":0,"64":1,"65":0,"66":0,"68":0,"69":0,"72":0,"73":0,"75":0,"82":0,"84":0,"85":0,"87":0,"100":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-invalid-this.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-invalid-this.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":20}}},"2":{"name":"(anonymous_2)","line":42,"loc":{"start":{"line":42,"column":27},"end":{"line":42,"column":38}}},"3":{"name":"enterFunction","line":64,"loc":{"start":{"line":64,"column":8},"end":{"line":64,"column":37}}},"4":{"name":"exitFunction","line":78,"loc":{"start":{"line":78,"column":8},"end":{"line":78,"column":32}}},"5":{"name":"(anonymous_5)","line":88,"loc":{"start":{"line":88,"column":19},"end":{"line":88,"column":26}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":26},"end":{"line":103,"column":29}}},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":26},"end":{"line":113,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":122,"column":2}},"3":{"start":{"line":30,"column":8},"end":{"line":31,"column":49}},"4":{"start":{"line":42,"column":8},"end":{"line":52,"column":10}},"5":{"start":{"line":43,"column":12},"end":{"line":43,"column":50}},"6":{"start":{"line":45,"column":12},"end":{"line":50,"column":13}},"7":{"start":{"line":46,"column":16},"end":{"line":46,"column":36}},"8":{"start":{"line":47,"column":16},"end":{"line":49,"column":32}},"9":{"start":{"line":51,"column":12},"end":{"line":51,"column":27}},"10":{"start":{"line":64,"column":8},"end":{"line":72,"column":9}},"11":{"start":{"line":67,"column":12},"end":{"line":71,"column":15}},"12":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"13":{"start":{"line":79,"column":12},"end":{"line":79,"column":24}},"14":{"start":{"line":82,"column":8},"end":{"line":120,"column":10}},"15":{"start":{"line":89,"column":16},"end":{"line":90,"column":72}},"16":{"start":{"line":92,"column":16},"end":{"line":100,"column":19}},"17":{"start":{"line":104,"column":16},"end":{"line":104,"column":28}},"18":{"start":{"line":114,"column":16},"end":{"line":114,"column":51}},"19":{"start":{"line":116,"column":16},"end":{"line":118,"column":17}},"20":{"start":{"line":117,"column":20},"end":{"line":117,"column":76}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":12}},{"start":{"line":45,"column":12},"end":{"line":45,"column":12}}]},"2":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":31},"end":{"line":90,"column":65}},{"start":{"line":90,"column":69},"end":{"line":90,"column":71}}]},"3":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":24},"end":{"line":96,"column":38}},{"start":{"line":97,"column":24},"end":{"line":97,"column":52}},{"start":{"line":98,"column":25},"end":{"line":98,"column":46}},{"start":{"line":98,"column":50},"end":{"line":98,"column":79}}]},"4":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":16},"end":{"line":116,"column":16}},{"start":{"line":116,"column":16},"end":{"line":116,"column":16}}]},"5":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":20},"end":{"line":116,"column":27}},{"start":{"line":116,"column":31},"end":{"line":116,"column":45}}]}},"code":["/**"," * @fileoverview A rule to disallow `this` keywords outside of classes or class-like objects."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `this` keywords outside of classes or class-like objects\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const stack = [],","            sourceCode = context.getSourceCode();","","        /**","         * Gets the current checking context.","         *","         * The return value has a flag that whether or not `this` keyword is valid.","         * The flag is initialized when got at the first time.","         *","         * @returns {{valid: boolean}}","         *   an object which has a flag that whether or not `this` keyword is valid.","         */","        stack.getCurrent = function() {","            const current = this[this.length - 1];","","            if (!current.init) {","                current.init = true;","                current.valid = !astUtils.isDefaultThisBinding(","                    current.node,","                    sourceCode);","            }","            return current;","        };","","        /**","         * Pushs new checking context into the stack.","         *","         * The checking context is not initialized yet.","         * Because most functions don't have `this` keyword.","         * When `this` keyword was found, the checking context is initialized.","         *","         * @param {ASTNode} node - A function node that was entered.","         * @returns {void}","         */","        function enterFunction(node) {","","            // `this` can be invalid only under strict mode.","            stack.push({","                init: !context.getScope().isStrict,","                node,","                valid: true","            });","        }","","        /**","         * Pops the current checking context from the stack.","         * @returns {void}","         */","        function exitFunction() {","            stack.pop();","        }","","        return {","","            /*","             * `this` is invalid only under strict mode.","             * Modules is always strict mode.","             */","            Program(node) {","                const scope = context.getScope(),","                    features = context.parserOptions.ecmaFeatures || {};","","                stack.push({","                    init: true,","                    node,","                    valid: !(","                        scope.isStrict ||","                        node.sourceType === \"module\" ||","                        (features.globalReturn && scope.childScopes[0].isStrict)","                    )","                });","            },","","            \"Program:exit\"() {","                stack.pop();","            },","","            FunctionDeclaration: enterFunction,","            \"FunctionDeclaration:exit\": exitFunction,","            FunctionExpression: enterFunction,","            \"FunctionExpression:exit\": exitFunction,","","            // Reports if `this` of the current context is invalid.","            ThisExpression(node) {","                const current = stack.getCurrent();","","                if (current && !current.valid) {","                    context.report({ node, message: \"Unexpected 'this'.\" });","                }","            }","        };","    }","};",""],"l":{"12":1,"18":1,"30":0,"42":0,"43":0,"45":0,"46":0,"47":0,"51":0,"64":1,"67":0,"78":1,"79":0,"82":0,"89":0,"92":0,"104":0,"114":0,"116":0,"117":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-irregular-whitespace.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-irregular-whitespace.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":58,"loc":{"start":{"line":58,"column":10},"end":{"line":58,"column":20}}},"2":{"name":"removeWhitespaceError","line":81,"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":45}}},"3":{"name":"removeInvalidNodeErrorsInIdentifierOrLiteral","line":103,"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":68}}},"4":{"name":"removeInvalidNodeErrorsInTemplateLiteral","line":122,"loc":{"start":{"line":122,"column":8},"end":{"line":122,"column":64}}},"5":{"name":"removeInvalidNodeErrorsInComment","line":136,"loc":{"start":{"line":136,"column":8},"end":{"line":136,"column":56}}},"6":{"name":"checkForIrregularWhitespace","line":148,"loc":{"start":{"line":148,"column":8},"end":{"line":148,"column":51}}},"7":{"name":"checkForIrregularLineTerminators","line":172,"loc":{"start":{"line":172,"column":8},"end":{"line":172,"column":56}}},"8":{"name":"rememberCommentNode","line":197,"loc":{"start":{"line":197,"column":8},"end":{"line":197,"column":43}}},"9":{"name":"noop","line":206,"loc":{"start":{"line":206,"column":8},"end":{"line":206,"column":24}}},"10":{"name":"(anonymous_10)","line":211,"loc":{"start":{"line":211,"column":28},"end":{"line":211,"column":43}}},"11":{"name":"(anonymous_11)","line":233,"loc":{"start":{"line":233,"column":36},"end":{"line":233,"column":47}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":13,"column":41}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":170}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":167}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":54}},"5":{"start":{"line":22,"column":0},"end":{"line":22,"column":59}},"6":{"start":{"line":28,"column":0},"end":{"line":252,"column":2}},"7":{"start":{"line":61,"column":8},"end":{"line":61,"column":24}},"8":{"start":{"line":64,"column":8},"end":{"line":64,"column":32}},"9":{"start":{"line":67,"column":8},"end":{"line":67,"column":49}},"10":{"start":{"line":68,"column":8},"end":{"line":68,"column":52}},"11":{"start":{"line":69,"column":8},"end":{"line":69,"column":58}},"12":{"start":{"line":70,"column":8},"end":{"line":70,"column":50}},"13":{"start":{"line":71,"column":8},"end":{"line":71,"column":54}},"14":{"start":{"line":73,"column":8},"end":{"line":73,"column":51}},"15":{"start":{"line":81,"column":8},"end":{"line":95,"column":9}},"16":{"start":{"line":82,"column":12},"end":{"line":82,"column":44}},"17":{"start":{"line":83,"column":12},"end":{"line":83,"column":40}},"18":{"start":{"line":85,"column":12},"end":{"line":94,"column":15}},"19":{"start":{"line":86,"column":16},"end":{"line":86,"column":42}},"20":{"start":{"line":88,"column":16},"end":{"line":92,"column":17}},"21":{"start":{"line":89,"column":20},"end":{"line":91,"column":21}},"22":{"start":{"line":90,"column":24},"end":{"line":90,"column":37}},"23":{"start":{"line":93,"column":16},"end":{"line":93,"column":28}},"24":{"start":{"line":103,"column":8},"end":{"line":114,"column":9}},"25":{"start":{"line":104,"column":12},"end":{"line":104,"column":87}},"26":{"start":{"line":105,"column":12},"end":{"line":105,"column":85}},"27":{"start":{"line":107,"column":12},"end":{"line":113,"column":13}},"28":{"start":{"line":110,"column":16},"end":{"line":112,"column":17}},"29":{"start":{"line":111,"column":20},"end":{"line":111,"column":48}},"30":{"start":{"line":122,"column":8},"end":{"line":128,"column":9}},"31":{"start":{"line":123,"column":12},"end":{"line":127,"column":13}},"32":{"start":{"line":124,"column":16},"end":{"line":126,"column":17}},"33":{"start":{"line":125,"column":20},"end":{"line":125,"column":48}},"34":{"start":{"line":136,"column":8},"end":{"line":140,"column":9}},"35":{"start":{"line":137,"column":12},"end":{"line":139,"column":13}},"36":{"start":{"line":138,"column":16},"end":{"line":138,"column":44}},"37":{"start":{"line":148,"column":8},"end":{"line":164,"column":9}},"38":{"start":{"line":149,"column":12},"end":{"line":149,"column":49}},"39":{"start":{"line":151,"column":12},"end":{"line":163,"column":15}},"40":{"start":{"line":152,"column":16},"end":{"line":152,"column":49}},"41":{"start":{"line":153,"column":16},"end":{"line":153,"column":26}},"42":{"start":{"line":155,"column":16},"end":{"line":162,"column":17}},"43":{"start":{"line":156,"column":20},"end":{"line":159,"column":22}},"44":{"start":{"line":161,"column":20},"end":{"line":161,"column":87}},"45":{"start":{"line":172,"column":8},"end":{"line":189,"column":9}},"46":{"start":{"line":173,"column":12},"end":{"line":175,"column":54}},"47":{"start":{"line":176,"column":12},"end":{"line":177,"column":22}},"48":{"start":{"line":179,"column":12},"end":{"line":188,"column":13}},"49":{"start":{"line":180,"column":16},"end":{"line":180,"column":87}},"50":{"start":{"line":181,"column":16},"end":{"line":184,"column":18}},"51":{"start":{"line":186,"column":16},"end":{"line":186,"column":83}},"52":{"start":{"line":187,"column":16},"end":{"line":187,"column":42}},"53":{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},"54":{"start":{"line":198,"column":12},"end":{"line":198,"column":36}},"55":{"start":{"line":206,"column":8},"end":{"line":206,"column":26}},"56":{"start":{"line":208,"column":8},"end":{"line":208,"column":25}},"57":{"start":{"line":210,"column":8},"end":{"line":248,"column":9}},"58":{"start":{"line":211,"column":12},"end":{"line":226,"column":14}},"59":{"start":{"line":224,"column":16},"end":{"line":224,"column":50}},"60":{"start":{"line":225,"column":16},"end":{"line":225,"column":55}},"61":{"start":{"line":228,"column":12},"end":{"line":228,"column":76}},"62":{"start":{"line":229,"column":12},"end":{"line":229,"column":73}},"63":{"start":{"line":230,"column":12},"end":{"line":230,"column":100}},"64":{"start":{"line":231,"column":12},"end":{"line":231,"column":74}},"65":{"start":{"line":232,"column":12},"end":{"line":232,"column":75}},"66":{"start":{"line":233,"column":12},"end":{"line":245,"column":14}},"67":{"start":{"line":235,"column":16},"end":{"line":239,"column":17}},"68":{"start":{"line":238,"column":20},"end":{"line":238,"column":75}},"69":{"start":{"line":242,"column":16},"end":{"line":244,"column":19}},"70":{"start":{"line":243,"column":20},"end":{"line":243,"column":57}},"71":{"start":{"line":247,"column":12},"end":{"line":247,"column":33}},"72":{"start":{"line":250,"column":8},"end":{"line":250,"column":21}}},"branchMap":{"1":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":24},"end":{"line":67,"column":42}},{"start":{"line":67,"column":46},"end":{"line":67,"column":48}}]},"2":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":16},"end":{"line":88,"column":16}},{"start":{"line":88,"column":16},"end":{"line":88,"column":16}}]},"3":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":20},"end":{"line":88,"column":50}},{"start":{"line":88,"column":54},"end":{"line":88,"column":82}}]},"4":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":20}},{"start":{"line":89,"column":20},"end":{"line":89,"column":20}}]},"5":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":24},"end":{"line":89,"column":58}},{"start":{"line":89,"column":63},"end":{"line":89,"column":95}},{"start":{"line":89,"column":99},"end":{"line":89,"column":126}}]},"6":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":39},"end":{"line":104,"column":50}},{"start":{"line":104,"column":55},"end":{"line":104,"column":85}}]},"7":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":39},"end":{"line":105,"column":50}},{"start":{"line":105,"column":55},"end":{"line":105,"column":83}}]},"8":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":12},"end":{"line":107,"column":12}},{"start":{"line":107,"column":12},"end":{"line":107,"column":12}}]},"9":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":16},"end":{"line":107,"column":34}},{"start":{"line":107,"column":38},"end":{"line":107,"column":56}}]},"10":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":16},"end":{"line":110,"column":16}},{"start":{"line":110,"column":16},"end":{"line":110,"column":16}}]},"11":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":12},"end":{"line":123,"column":12}},{"start":{"line":123,"column":12},"end":{"line":123,"column":12}}]},"12":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":16},"end":{"line":124,"column":16}},{"start":{"line":124,"column":16},"end":{"line":124,"column":16}}]},"13":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":12},"end":{"line":137,"column":12}},{"start":{"line":137,"column":12},"end":{"line":137,"column":12}}]},"14":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":34},"end":{"line":180,"column":81}},{"start":{"line":180,"column":85},"end":{"line":180,"column":86}}]},"15":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":8},"end":{"line":210,"column":8}},{"start":{"line":210,"column":8},"end":{"line":210,"column":8}}]},"16":{"line":230,"type":"cond-expr","locations":[{"start":{"line":230,"column":52},"end":{"line":230,"column":92}},{"start":{"line":230,"column":95},"end":{"line":230,"column":99}}]},"17":{"line":231,"type":"cond-expr","locations":[{"start":{"line":231,"column":47},"end":{"line":231,"column":66}},{"start":{"line":231,"column":69},"end":{"line":231,"column":73}}]},"18":{"line":232,"type":"cond-expr","locations":[{"start":{"line":232,"column":48},"end":{"line":232,"column":67}},{"start":{"line":232,"column":70},"end":{"line":232,"column":74}}]},"19":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":16},"end":{"line":235,"column":16}},{"start":{"line":235,"column":16},"end":{"line":235,"column":16}}]}},"code":["/**"," * @fileoverview Rule to disalow whitespace that is not a tab or space, whitespace inside strings and comments are allowed"," * @author Jonathan Kingston"," * @author Christophe Porteneuve"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const ALL_IRREGULARS = /[\\f\\v\\u0085\\u00A0\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000\\u2028\\u2029]/;","const IRREGULAR_WHITESPACE = /[\\f\\v\\u0085\\u00A0\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000]+/mg;","const IRREGULAR_LINE_TERMINATORS = /[\\u2028\\u2029]/mg;","const LINE_BREAK = astUtils.createGlobalLinebreakMatcher();","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow irregular whitespace outside of strings and comments\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    skipComments: {","                        type: \"boolean\"","                    },","                    skipStrings: {","                        type: \"boolean\"","                    },","                    skipTemplates: {","                        type: \"boolean\"","                    },","                    skipRegExps: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        // Module store of errors that we have found","        let errors = [];","","        // Comment nodes.  We accumulate these as we go, so we can be sure to trigger them after the whole `Program` entity is parsed, even for top-of-file comments.","        const commentNodes = [];","","        // Lookup the `skipComments` option, which defaults to `false`.","        const options = context.options[0] || {};","        const skipComments = !!options.skipComments;","        const skipStrings = options.skipStrings !== false;","        const skipRegExps = !!options.skipRegExps;","        const skipTemplates = !!options.skipTemplates;","","        const sourceCode = context.getSourceCode();","","        /**","         * Removes errors that occur inside a string node","         * @param {ASTNode} node to check for matching errors.","         * @returns {void}","         * @private","         */","        function removeWhitespaceError(node) {","            const locStart = node.loc.start;","            const locEnd = node.loc.end;","","            errors = errors.filter(error => {","                const errorLoc = error[1];","","                if (errorLoc.line >= locStart.line && errorLoc.line <= locEnd.line) {","                    if (errorLoc.column >= locStart.column && (errorLoc.column <= locEnd.column || errorLoc.line < locEnd.line)) {","                        return false;","                    }","                }","                return true;","            });","        }","","        /**","         * Checks identifier or literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors","         * @param {ASTNode} node to check for matching errors.","         * @returns {void}","         * @private","         */","        function removeInvalidNodeErrorsInIdentifierOrLiteral(node) {","            const shouldCheckStrings = skipStrings && (typeof node.value === \"string\");","            const shouldCheckRegExps = skipRegExps && (node.value instanceof RegExp);","","            if (shouldCheckStrings || shouldCheckRegExps) {","","                // If we have irregular characters remove them from the errors list","                if (ALL_IRREGULARS.test(node.raw)) {","                    removeWhitespaceError(node);","                }","            }","        }","","        /**","         * Checks template string literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors","         * @param {ASTNode} node to check for matching errors.","         * @returns {void}","         * @private","         */","        function removeInvalidNodeErrorsInTemplateLiteral(node) {","            if (typeof node.value.raw === \"string\") {","                if (ALL_IRREGULARS.test(node.value.raw)) {","                    removeWhitespaceError(node);","                }","            }","        }","","        /**","         * Checks comment nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors","         * @param {ASTNode} node to check for matching errors.","         * @returns {void}","         * @private","         */","        function removeInvalidNodeErrorsInComment(node) {","            if (ALL_IRREGULARS.test(node.value)) {","                removeWhitespaceError(node);","            }","        }","","        /**","         * Checks the program source for irregular whitespace","         * @param {ASTNode} node The program node","         * @returns {void}","         * @private","         */","        function checkForIrregularWhitespace(node) {","            const sourceLines = sourceCode.lines;","","            sourceLines.forEach((sourceLine, lineIndex) => {","                const lineNumber = lineIndex + 1;","                let match;","","                while ((match = IRREGULAR_WHITESPACE.exec(sourceLine)) !== null) {","                    const location = {","                        line: lineNumber,","                        column: match.index","                    };","","                    errors.push([node, location, \"Irregular whitespace not allowed.\"]);","                }","            });","        }","","        /**","         * Checks the program source for irregular line terminators","         * @param {ASTNode} node The program node","         * @returns {void}","         * @private","         */","        function checkForIrregularLineTerminators(node) {","            const source = sourceCode.getText(),","                sourceLines = sourceCode.lines,","                linebreaks = source.match(LINE_BREAK);","            let lastLineIndex = -1,","                match;","","            while ((match = IRREGULAR_LINE_TERMINATORS.exec(source)) !== null) {","                const lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;","                const location = {","                    line: lineIndex + 1,","                    column: sourceLines[lineIndex].length","                };","","                errors.push([node, location, \"Irregular whitespace not allowed.\"]);","                lastLineIndex = lineIndex;","            }","        }","","        /**","         * Stores a comment node (`LineComment` or `BlockComment`) for later stripping of errors within; a necessary deferring of processing to deal with top-of-file comments.","         * @param {ASTNode} node The comment node","         * @returns {void}","         * @private","         */","        function rememberCommentNode(node) {","            commentNodes.push(node);","        }","","        /**","         * A no-op function to act as placeholder for comment accumulation when the `skipComments` option is `false`.","         * @returns {void}","         * @private","         */","        function noop() {}","","        const nodes = {};","","        if (ALL_IRREGULARS.test(sourceCode.getText())) {","            nodes.Program = function(node) {","","                /*","                 * As we can easily fire warnings for all white space issues with","                 * all the source its simpler to fire them here.","                 * This means we can check all the application code without having","                 * to worry about issues caused in the parser tokens.","                 * When writing this code also evaluating per node was missing out","                 * connecting tokens in some cases.","                 * We can later filter the errors when they are found to be not an","                 * issue in nodes we don't care about.","                 */","","                checkForIrregularWhitespace(node);","                checkForIrregularLineTerminators(node);","            };","","            nodes.Identifier = removeInvalidNodeErrorsInIdentifierOrLiteral;","            nodes.Literal = removeInvalidNodeErrorsInIdentifierOrLiteral;","            nodes.TemplateElement = skipTemplates ? removeInvalidNodeErrorsInTemplateLiteral : noop;","            nodes.LineComment = skipComments ? rememberCommentNode : noop;","            nodes.BlockComment = skipComments ? rememberCommentNode : noop;","            nodes[\"Program:exit\"] = function() {","","                if (skipComments) {","","                    // First strip errors occurring in comment nodes.  We have to do this post-`Program` to deal with top-of-file comments.","                    commentNodes.forEach(removeInvalidNodeErrorsInComment);","                }","","                // If we have any errors remaining report on them","                errors.forEach(error => {","                    context.report.apply(context, error);","                });","            };","        } else {","            nodes.Program = noop;","        }","","        return nodes;","    }","};",""],"l":{"13":1,"19":1,"20":1,"21":1,"22":1,"28":1,"61":0,"64":0,"67":0,"68":0,"69":0,"70":0,"71":0,"73":0,"81":1,"82":0,"83":0,"85":0,"86":0,"88":0,"89":0,"90":0,"93":0,"103":1,"104":0,"105":0,"107":0,"110":0,"111":0,"122":1,"123":0,"124":0,"125":0,"136":1,"137":0,"138":0,"148":1,"149":0,"151":0,"152":0,"153":0,"155":0,"156":0,"161":0,"172":1,"173":0,"176":0,"179":0,"180":0,"181":0,"186":0,"187":0,"197":1,"198":0,"206":1,"208":0,"210":0,"211":0,"224":0,"225":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"235":0,"238":0,"242":0,"243":0,"247":0,"250":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-iterator.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-iterator.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0],"2":[0,0,0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":28},"end":{"line":27,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":38,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":35,"column":10}},"3":{"start":{"line":29,"column":16},"end":{"line":33,"column":17}},"4":{"start":{"line":32,"column":20},"end":{"line":32,"column":87}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":16},"end":{"line":29,"column":16}},{"start":{"line":29,"column":16},"end":{"line":29,"column":16}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":20},"end":{"line":29,"column":33}},{"start":{"line":30,"column":25},"end":{"line":30,"column":60}},{"start":{"line":30,"column":64},"end":{"line":30,"column":101}},{"start":{"line":30,"column":105},"end":{"line":30,"column":119}},{"start":{"line":31,"column":25},"end":{"line":31,"column":57}},{"start":{"line":31,"column":61},"end":{"line":31,"column":99}}]}},"code":["/**"," * @fileoverview Rule to flag usage of __iterator__ property"," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of the `__iterator__` property\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            MemberExpression(node) {","","                if (node.property &&","                        (node.property.type === \"Identifier\" && node.property.name === \"__iterator__\" && !node.computed) ||","                        (node.property.type === \"Literal\" && node.property.value === \"__iterator__\")) {","                    context.report({ node, message: \"Reserved name '__iterator__'.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"29":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-label-var.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-label-var.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":20}}},"2":{"name":"findIdentifier","line":42,"loc":{"start":{"line":42,"column":8},"end":{"line":42,"column":45}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":28},"end":{"line":52,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":67,"column":2}},"3":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"4":{"start":{"line":43,"column":12},"end":{"line":43,"column":68}},"5":{"start":{"line":50,"column":8},"end":{"line":64,"column":10}},"6":{"start":{"line":55,"column":16},"end":{"line":55,"column":49}},"7":{"start":{"line":59,"column":16},"end":{"line":61,"column":17}},"8":{"start":{"line":60,"column":20},"end":{"line":60,"column":99}}},"branchMap":{"1":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":16}},{"start":{"line":59,"column":16},"end":{"line":59,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag labels that are the same as an identifier"," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow labels that share a name with a variable\",","            category: \"Variables\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Check if the identifier is present inside current scope","         * @param {Object} scope current scope","         * @param {string} name To evaluate","         * @returns {boolean} True if its present","         * @private","         */","        function findIdentifier(scope, name) {","            return astUtils.getVariableByName(scope, name) !== null;","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","","            LabeledStatement(node) {","","                // Fetch the innermost scope.","                const scope = context.getScope();","","                // Recursively find the identifier walking up the scope, starting","                // with the innermost scope.","                if (findIdentifier(scope, node.label.name)) {","                    context.report({ node, message: \"Found identifier with same name as label.\" });","                }","            }","","        };","","    }","};",""],"l":{"12":1,"18":1,"42":1,"43":0,"50":0,"55":0,"59":0,"60":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-labels.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-labels.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":41,"loc":{"start":{"line":41,"column":10},"end":{"line":41,"column":20}}},"2":{"name":"getBodyKind","line":53,"loc":{"start":{"line":53,"column":8},"end":{"line":53,"column":35}}},"3":{"name":"isAllowed","line":69,"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":33}}},"4":{"name":"getKind","line":83,"loc":{"start":{"line":83,"column":8},"end":{"line":83,"column":32}}},"5":{"name":"(anonymous_5)","line":102,"loc":{"start":{"line":102,"column":28},"end":{"line":102,"column":35}}},"6":{"name":"(anonymous_6)","line":110,"loc":{"start":{"line":110,"column":35},"end":{"line":110,"column":42}}},"7":{"name":"(anonymous_7)","line":121,"loc":{"start":{"line":121,"column":26},"end":{"line":121,"column":33}}},"8":{"name":"(anonymous_8)","line":130,"loc":{"start":{"line":130,"column":29},"end":{"line":130,"column":36}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":141,"column":2}},"3":{"start":{"line":42,"column":8},"end":{"line":42,"column":43}},"4":{"start":{"line":43,"column":8},"end":{"line":43,"column":64}},"5":{"start":{"line":44,"column":8},"end":{"line":44,"column":68}},"6":{"start":{"line":45,"column":8},"end":{"line":45,"column":29}},"7":{"start":{"line":53,"column":8},"end":{"line":61,"column":9}},"8":{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},"9":{"start":{"line":55,"column":16},"end":{"line":55,"column":30}},"10":{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},"11":{"start":{"line":58,"column":16},"end":{"line":58,"column":32}},"12":{"start":{"line":60,"column":12},"end":{"line":60,"column":27}},"13":{"start":{"line":69,"column":8},"end":{"line":75,"column":9}},"14":{"start":{"line":70,"column":12},"end":{"line":74,"column":13}},"15":{"start":{"line":71,"column":29},"end":{"line":71,"column":46}},"16":{"start":{"line":72,"column":31},"end":{"line":72,"column":50}},"17":{"start":{"line":73,"column":25},"end":{"line":73,"column":38}},"18":{"start":{"line":83,"column":8},"end":{"line":95,"column":9}},"19":{"start":{"line":84,"column":12},"end":{"line":84,"column":33}},"20":{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},"21":{"start":{"line":87,"column":16},"end":{"line":89,"column":17}},"22":{"start":{"line":88,"column":20},"end":{"line":88,"column":37}},"23":{"start":{"line":90,"column":16},"end":{"line":90,"column":34}},"24":{"start":{"line":94,"column":12},"end":{"line":94,"column":27},"skip":true},"25":{"start":{"line":101,"column":8},"end":{"line":138,"column":10}},"26":{"start":{"line":103,"column":16},"end":{"line":107,"column":18}},"27":{"start":{"line":111,"column":16},"end":{"line":116,"column":17}},"28":{"start":{"line":112,"column":20},"end":{"line":115,"column":23}},"29":{"start":{"line":118,"column":16},"end":{"line":118,"column":44}},"30":{"start":{"line":122,"column":16},"end":{"line":127,"column":17}},"31":{"start":{"line":123,"column":20},"end":{"line":126,"column":23}},"32":{"start":{"line":131,"column":16},"end":{"line":136,"column":17}},"33":{"start":{"line":132,"column":20},"end":{"line":135,"column":23}}},"branchMap":{"1":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":34},"end":{"line":43,"column":41}},{"start":{"line":43,"column":45},"end":{"line":43,"column":62}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":36},"end":{"line":44,"column":43}},{"start":{"line":44,"column":47},"end":{"line":44,"column":66}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":12}},{"start":{"line":54,"column":12},"end":{"line":54,"column":12}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":12}},{"start":{"line":57,"column":12},"end":{"line":57,"column":12}}]},"5":{"line":70,"type":"switch","locations":[{"start":{"line":71,"column":16},"end":{"line":71,"column":46}},{"start":{"line":72,"column":16},"end":{"line":72,"column":50}},{"start":{"line":73,"column":16},"end":{"line":73,"column":38}}]},"6":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":16},"end":{"line":87,"column":16}},{"start":{"line":87,"column":16},"end":{"line":87,"column":16}}]},"7":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":16},"end":{"line":111,"column":16}},{"start":{"line":111,"column":16},"end":{"line":111,"column":16}}]},"8":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":16},"end":{"line":122,"column":16}},{"start":{"line":122,"column":16},"end":{"line":122,"column":16}}]},"9":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":20},"end":{"line":122,"column":30}},{"start":{"line":122,"column":34},"end":{"line":122,"column":70}}]},"10":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":16},"end":{"line":131,"column":16}},{"start":{"line":131,"column":16},"end":{"line":131,"column":16}}]},"11":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":20},"end":{"line":131,"column":30}},{"start":{"line":131,"column":34},"end":{"line":131,"column":70}}]}},"code":["/**"," * @fileoverview Disallow Labeled Statements"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow labeled statements\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allowLoop: {","                        type: \"boolean\"","                    },","                    allowSwitch: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0];","        const allowLoop = Boolean(options && options.allowLoop);","        const allowSwitch = Boolean(options && options.allowSwitch);","        let scopeInfo = null;","","        /**","         * Gets the kind of a given node.","         *","         * @param {ASTNode} node - A node to get.","         * @returns {string} The kind of the node.","         */","        function getBodyKind(node) {","            if (astUtils.isLoop(node)) {","                return \"loop\";","            }","            if (node.type === \"SwitchStatement\") {","                return \"switch\";","            }","            return \"other\";","        }","","        /**","         * Checks whether the label of a given kind is allowed or not.","         *","         * @param {string} kind - A kind to check.","         * @returns {boolean} `true` if the kind is allowed.","         */","        function isAllowed(kind) {","            switch (kind) {","                case \"loop\": return allowLoop;","                case \"switch\": return allowSwitch;","                default: return false;","            }","        }","","        /**","         * Checks whether a given name is a label of a loop or not.","         *","         * @param {string} label - A name of a label to check.","         * @returns {boolean} `true` if the name is a label of a loop.","         */","        function getKind(label) {","            let info = scopeInfo;","","            while (info) {","                if (info.label === label) {","                    return info.kind;","                }","                info = info.upper;","            }","","            /* istanbul ignore next: syntax error */","            return \"other\";","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            LabeledStatement(node) {","                scopeInfo = {","                    label: node.label.name,","                    kind: getBodyKind(node.body),","                    upper: scopeInfo","                };","            },","","            \"LabeledStatement:exit\"(node) {","                if (!isAllowed(scopeInfo.kind)) {","                    context.report({","                        node,","                        message: \"Unexpected labeled statement.\"","                    });","                }","","                scopeInfo = scopeInfo.upper;","            },","","            BreakStatement(node) {","                if (node.label && !isAllowed(getKind(node.label.name))) {","                    context.report({","                        node,","                        message: \"Unexpected label in break statement.\"","                    });","                }","            },","","            ContinueStatement(node) {","                if (node.label && !isAllowed(getKind(node.label.name))) {","                    context.report({","                        node,","                        message: \"Unexpected label in continue statement.\"","                    });","                }","            }","        };","","    }","};",""],"l":{"11":1,"17":1,"42":0,"43":0,"44":0,"45":0,"53":1,"54":0,"55":0,"57":0,"58":0,"60":0,"69":1,"70":0,"71":0,"72":0,"73":0,"83":1,"84":0,"86":0,"87":0,"88":0,"90":0,"94":1,"101":0,"103":0,"111":0,"112":0,"118":0,"122":0,"123":0,"131":0,"132":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-lone-blocks.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-lone-blocks.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"report","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":30}}},"3":{"name":"isLoneBlock","line":45,"loc":{"start":{"line":45,"column":8},"end":{"line":45,"column":35}}},"4":{"name":"markLoneBlock","line":58,"loc":{"start":{"line":58,"column":8},"end":{"line":58,"column":33}}},"5":{"name":"(anonymous_5)","line":72,"loc":{"start":{"line":72,"column":26},"end":{"line":72,"column":33}}},"6":{"name":"(anonymous_6)","line":82,"loc":{"start":{"line":82,"column":30},"end":{"line":82,"column":37}}},"7":{"name":"(anonymous_7)","line":87,"loc":{"start":{"line":87,"column":37},"end":{"line":87,"column":44}}},"8":{"name":"(anonymous_8)","line":95,"loc":{"start":{"line":95,"column":42},"end":{"line":95,"column":57}}},"9":{"name":"(anonymous_9)","line":101,"loc":{"start":{"line":101,"column":42},"end":{"line":101,"column":57}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":112,"column":2}},"2":{"start":{"line":26,"column":8},"end":{"line":26,"column":30}},"3":{"start":{"line":27,"column":8},"end":{"line":27,"column":20}},"4":{"start":{"line":34,"column":8},"end":{"line":38,"column":9}},"5":{"start":{"line":35,"column":12},"end":{"line":35,"column":121}},"6":{"start":{"line":37,"column":12},"end":{"line":37,"column":46}},"7":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"8":{"start":{"line":46,"column":12},"end":{"line":50,"column":130}},"9":{"start":{"line":58,"column":8},"end":{"line":68,"column":9}},"10":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"11":{"start":{"line":60,"column":16},"end":{"line":60,"column":23}},"12":{"start":{"line":63,"column":12},"end":{"line":63,"column":55}},"13":{"start":{"line":65,"column":12},"end":{"line":67,"column":13}},"14":{"start":{"line":66,"column":16},"end":{"line":66,"column":33}},"15":{"start":{"line":71,"column":8},"end":{"line":77,"column":10}},"16":{"start":{"line":73,"column":16},"end":{"line":75,"column":17}},"17":{"start":{"line":74,"column":20},"end":{"line":74,"column":33}},"18":{"start":{"line":80,"column":8},"end":{"line":108,"column":9}},"19":{"start":{"line":81,"column":12},"end":{"line":93,"column":14}},"20":{"start":{"line":83,"column":20},"end":{"line":85,"column":21}},"21":{"start":{"line":84,"column":24},"end":{"line":84,"column":46}},"22":{"start":{"line":88,"column":20},"end":{"line":91,"column":21}},"23":{"start":{"line":89,"column":24},"end":{"line":89,"column":41}},"24":{"start":{"line":90,"column":24},"end":{"line":90,"column":37}},"25":{"start":{"line":95,"column":12},"end":{"line":99,"column":14}},"26":{"start":{"line":96,"column":16},"end":{"line":98,"column":17}},"27":{"start":{"line":97,"column":20},"end":{"line":97,"column":40}},"28":{"start":{"line":101,"column":12},"end":{"line":105,"column":14}},"29":{"start":{"line":102,"column":16},"end":{"line":104,"column":17}},"30":{"start":{"line":103,"column":20},"end":{"line":103,"column":40}},"31":{"start":{"line":107,"column":12},"end":{"line":107,"column":53}},"32":{"start":{"line":110,"column":8},"end":{"line":110,"column":23}}},"branchMap":{"1":{"line":35,"type":"cond-expr","locations":[{"start":{"line":35,"column":68},"end":{"line":35,"column":96}},{"start":{"line":35,"column":99},"end":{"line":35,"column":120}}]},"2":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":19},"end":{"line":46,"column":56}},{"start":{"line":47,"column":16},"end":{"line":47,"column":46}},{"start":{"line":50,"column":16},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":129}}]},"3":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":55},"end":{"line":50,"column":89}},{"start":{"line":50,"column":93},"end":{"line":50,"column":128}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":12}},{"start":{"line":59,"column":12},"end":{"line":59,"column":12}}]},"5":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":12}},{"start":{"line":65,"column":12},"end":{"line":65,"column":12}}]},"6":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":16},"end":{"line":73,"column":16}},{"start":{"line":73,"column":16},"end":{"line":73,"column":16}}]},"7":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":8}},{"start":{"line":80,"column":8},"end":{"line":80,"column":8}}]},"8":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":20},"end":{"line":83,"column":20}},{"start":{"line":83,"column":20},"end":{"line":83,"column":20}}]},"9":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":20},"end":{"line":88,"column":20}},{"start":{"line":88,"column":20},"end":{"line":88,"column":20}}]},"10":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":24},"end":{"line":88,"column":45}},{"start":{"line":88,"column":49},"end":{"line":88,"column":91}}]},"11":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":16}},{"start":{"line":96,"column":16},"end":{"line":96,"column":16}}]},"12":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":20},"end":{"line":96,"column":39}},{"start":{"line":96,"column":43},"end":{"line":96,"column":64}}]},"13":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":16},"end":{"line":102,"column":16}},{"start":{"line":102,"column":16},"end":{"line":102,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag blocks with no reason to exist"," * @author Brandon Mills"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary nested blocks\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        // A stack of lone blocks to be checked for block-level bindings","        const loneBlocks = [];","        let ruleDef;","","        /**","         * Reports a node as invalid.","         * @param {ASTNode} node - The node to be reported.","         * @returns {void}","        */","        function report(node) {","            const message = node.parent.type === \"BlockStatement\" ? \"Nested block is redundant.\" : \"Block is redundant.\";","","            context.report({ node, message });","        }","","        /**","         * Checks for any ocurrence of a BlockStatement in a place where lists of statements can appear","         * @param {ASTNode} node The node to check","         * @returns {boolean} True if the node is a lone block.","        */","        function isLoneBlock(node) {","            return node.parent.type === \"BlockStatement\" ||","                node.parent.type === \"Program\" ||","","                // Don't report blocks in switch cases if the block is the only statement of the case.","                node.parent.type === \"SwitchCase\" && !(node.parent.consequent[0] === node && node.parent.consequent.length === 1);","        }","","        /**","         * Checks the enclosing block of the current node for block-level bindings,","         * and \"marks it\" as valid if any.","         * @returns {void}","        */","        function markLoneBlock() {","            if (loneBlocks.length === 0) {","                return;","            }","","            const block = context.getAncestors().pop();","","            if (loneBlocks[loneBlocks.length - 1] === block) {","                loneBlocks.pop();","            }","        }","","        // Default rule definition: report all lone blocks","        ruleDef = {","            BlockStatement(node) {","                if (isLoneBlock(node)) {","                    report(node);","                }","            }","        };","","        // ES6: report blocks without block-level bindings","        if (context.parserOptions.ecmaVersion >= 6) {","            ruleDef = {","                BlockStatement(node) {","                    if (isLoneBlock(node)) {","                        loneBlocks.push(node);","                    }","                },","                \"BlockStatement:exit\"(node) {","                    if (loneBlocks.length > 0 && loneBlocks[loneBlocks.length - 1] === node) {","                        loneBlocks.pop();","                        report(node);","                    }","                }","            };","","            ruleDef.VariableDeclaration = function(node) {","                if (node.kind === \"let\" || node.kind === \"const\") {","                    markLoneBlock(node);","                }","            };","","            ruleDef.FunctionDeclaration = function(node) {","                if (context.getScope().isStrict) {","                    markLoneBlock(node);","                }","            };","","            ruleDef.ClassDeclaration = markLoneBlock;","        }","","        return ruleDef;","    }","};",""],"l":{"12":1,"26":0,"27":0,"34":1,"35":0,"37":0,"45":1,"46":0,"58":1,"59":0,"60":0,"63":0,"65":0,"66":0,"71":0,"73":0,"74":0,"80":0,"81":0,"83":0,"84":0,"88":0,"89":0,"90":0,"95":0,"96":0,"97":0,"101":0,"102":0,"103":0,"107":0,"110":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-lonely-if.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-lonely-if.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0,0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":10},"end":{"line":24,"column":20}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":23},"end":{"line":28,"column":30}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":27},"end":{"line":40,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":82,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":25,"column":51}},"3":{"start":{"line":27,"column":8},"end":{"line":79,"column":10}},"4":{"start":{"line":29,"column":16},"end":{"line":31,"column":50}},"5":{"start":{"line":33,"column":16},"end":{"line":77,"column":17}},"6":{"start":{"line":37,"column":20},"end":{"line":76,"column":23}},"7":{"start":{"line":41,"column":28},"end":{"line":41,"column":86}},"8":{"start":{"line":42,"column":28},"end":{"line":42,"column":85}},"9":{"start":{"line":43,"column":28},"end":{"line":43,"column":92}},"10":{"start":{"line":44,"column":28},"end":{"line":44,"column":99}},"11":{"start":{"line":45,"column":28},"end":{"line":45,"column":89}},"12":{"start":{"line":46,"column":28},"end":{"line":46,"column":68}},"13":{"start":{"line":48,"column":28},"end":{"line":52,"column":29}},"14":{"start":{"line":51,"column":32},"end":{"line":51,"column":44}},"15":{"start":{"line":54,"column":28},"end":{"line":69,"column":29}},"16":{"start":{"line":68,"column":32},"end":{"line":68,"column":44}},"17":{"start":{"line":71,"column":28},"end":{"line":74,"column":30}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":16},"end":{"line":33,"column":16}},{"start":{"line":33,"column":16},"end":{"line":33,"column":16}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":20},"end":{"line":33,"column":26}},{"start":{"line":33,"column":30},"end":{"line":33,"column":62}},{"start":{"line":34,"column":24},"end":{"line":34,"column":48}},{"start":{"line":34,"column":52},"end":{"line":34,"column":63}},{"start":{"line":35,"column":24},"end":{"line":35,"column":58}},{"start":{"line":36,"column":24},"end":{"line":36,"column":56}}]},"3":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":28},"end":{"line":48,"column":28}},{"start":{"line":48,"column":28},"end":{"line":48,"column":28}}]},"4":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":32},"end":{"line":48,"column":97}},{"start":{"line":48,"column":101},"end":{"line":48,"column":166}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":28},"end":{"line":54,"column":28}},{"start":{"line":54,"column":28},"end":{"line":54,"column":28}}]},"6":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":32},"end":{"line":55,"column":73}},{"start":{"line":55,"column":77},"end":{"line":55,"column":102}},{"start":{"line":55,"column":106},"end":{"line":55,"column":125}},{"start":{"line":57,"column":36},"end":{"line":57,"column":103}},{"start":{"line":58,"column":36},"end":{"line":58,"column":79}},{"start":{"line":59,"column":36},"end":{"line":59,"column":62}},{"start":{"line":60,"column":36},"end":{"line":60,"column":62}}]},"7":{"line":73,"type":"cond-expr","locations":[{"start":{"line":73,"column":86},"end":{"line":73,"column":89}},{"start":{"line":73,"column":92},"end":{"line":73,"column":94}}]}},"code":["/**"," * @fileoverview Rule to disallow if as the only statmenet in an else block"," * @author Brandon Mills"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `if` statements as the only statement in `else` blocks\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","            IfStatement(node) {","                const ancestors = context.getAncestors(),","                    parent = ancestors.pop(),","                    grandparent = ancestors.pop();","","                if (parent && parent.type === \"BlockStatement\" &&","                        parent.body.length === 1 && grandparent &&","                        grandparent.type === \"IfStatement\" &&","                        parent === grandparent.alternate) {","                    context.report({","                        node,","                        message: \"Unexpected if as the only statement in an else block.\",","                        fix(fixer) {","                            const openingElseCurly = sourceCode.getFirstToken(parent);","                            const closingElseCurly = sourceCode.getLastToken(parent);","                            const elseKeyword = sourceCode.getTokenBefore(openingElseCurly);","                            const tokenAfterElseBlock = sourceCode.getTokenAfter(closingElseCurly);","                            const lastIfToken = sourceCode.getLastToken(node.consequent);","                            const sourceText = sourceCode.getText();","","                            if (sourceText.slice(openingElseCurly.range[1], node.range[0]).trim() || sourceText.slice(node.range[1], closingElseCurly.range[0]).trim()) {","","                                // Don't fix if there are any non-whitespace characters interfering (e.g. comments)","                                return null;","                            }","","                            if (","                                node.consequent.type !== \"BlockStatement\" && lastIfToken.value !== \";\" && tokenAfterElseBlock &&","                                (","                                    node.consequent.loc.end.line === tokenAfterElseBlock.loc.start.line ||","                                    /^[([/+`-]/.test(tokenAfterElseBlock.value) ||","                                    lastIfToken.value === \"++\" ||","                                    lastIfToken.value === \"--\"","                                )","                            ) {","","                                /*","                                 * If the `if` statement has no block, and is not followed by a semicolon, make sure that fixing","                                 * the issue would not change semantics due to ASI. If this would happen, don't do a fix.","                                 */","                                return null;","                            }","","                            return fixer.replaceTextRange(","                                [openingElseCurly.range[0], closingElseCurly.range[1]],","                                (elseKeyword.range[1] === openingElseCurly.range[0] ? \" \" : \"\") + sourceCode.getText(node)","                            );","                        }","                    });","                }","            }","        };","","    }","};",""],"l":{"11":1,"25":0,"27":0,"29":0,"33":0,"37":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"48":0,"51":0,"54":0,"68":0,"71":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-loop-func.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-loop-func.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":1,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},"b":{"1":[0,0,0,0,0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"getContainingLoopNode","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":37}}},"2":{"name":"getTopLoopNode","line":75,"loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":44}}},"3":{"name":"isSafe","line":96,"loc":{"start":{"line":96,"column":0},"end":{"line":96,"column":47}}},"4":{"name":"isSafeReference","line":137,"loc":{"start":{"line":137,"column":4},"end":{"line":137,"column":39}}},"5":{"name":"(anonymous_5)","line":165,"loc":{"start":{"line":165,"column":10},"end":{"line":165,"column":20}}},"6":{"name":"checkForLoops","line":176,"loc":{"start":{"line":176,"column":8},"end":{"line":176,"column":37}}}},"statementMap":{"1":{"start":{"line":22,"column":0},"end":{"line":64,"column":1}},"2":{"start":{"line":23,"column":4},"end":{"line":23,"column":29}},"3":{"start":{"line":25,"column":4},"end":{"line":61,"column":5}},"4":{"start":{"line":26,"column":8},"end":{"line":57,"column":9}},"5":{"start":{"line":29,"column":16},"end":{"line":29,"column":30}},"6":{"start":{"line":34,"column":16},"end":{"line":36,"column":17}},"7":{"start":{"line":35,"column":20},"end":{"line":35,"column":34}},"8":{"start":{"line":37,"column":16},"end":{"line":37,"column":22}},"9":{"start":{"line":43,"column":16},"end":{"line":45,"column":17}},"10":{"start":{"line":44,"column":20},"end":{"line":44,"column":34}},"11":{"start":{"line":46,"column":16},"end":{"line":46,"column":22}},"12":{"start":{"line":53,"column":16},"end":{"line":53,"column":28}},"13":{"start":{"line":56,"column":16},"end":{"line":56,"column":22}},"14":{"start":{"line":59,"column":8},"end":{"line":59,"column":22}},"15":{"start":{"line":60,"column":8},"end":{"line":60,"column":29}},"16":{"start":{"line":63,"column":4},"end":{"line":63,"column":16}},"17":{"start":{"line":75,"column":0},"end":{"line":85,"column":1}},"18":{"start":{"line":76,"column":4},"end":{"line":76,"column":20}},"19":{"start":{"line":77,"column":4},"end":{"line":77,"column":60}},"20":{"start":{"line":79,"column":4},"end":{"line":82,"column":5}},"21":{"start":{"line":80,"column":8},"end":{"line":80,"column":20}},"22":{"start":{"line":81,"column":8},"end":{"line":81,"column":43}},"23":{"start":{"line":84,"column":4},"end":{"line":84,"column":16}},"24":{"start":{"line":96,"column":0},"end":{"line":148,"column":1}},"25":{"start":{"line":97,"column":4},"end":{"line":97,"column":40}},"26":{"start":{"line":98,"column":4},"end":{"line":98,"column":52}},"27":{"start":{"line":99,"column":4},"end":{"line":99,"column":56}},"28":{"start":{"line":100,"column":4},"end":{"line":102,"column":13}},"29":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"30":{"start":{"line":106,"column":8},"end":{"line":106,"column":20}},"31":{"start":{"line":111,"column":4},"end":{"line":116,"column":5}},"32":{"start":{"line":115,"column":8},"end":{"line":115,"column":20}},"33":{"start":{"line":120,"column":4},"end":{"line":123,"column":15}},"34":{"start":{"line":137,"column":4},"end":{"line":145,"column":5}},"35":{"start":{"line":138,"column":8},"end":{"line":138,"column":39}},"36":{"start":{"line":140,"column":8},"end":{"line":144,"column":10}},"37":{"start":{"line":147,"column":4},"end":{"line":147,"column":75}},"38":{"start":{"line":154,"column":0},"end":{"line":198,"column":2}},"39":{"start":{"line":176,"column":8},"end":{"line":190,"column":9}},"40":{"start":{"line":177,"column":12},"end":{"line":177,"column":57}},"41":{"start":{"line":179,"column":12},"end":{"line":181,"column":13}},"42":{"start":{"line":180,"column":16},"end":{"line":180,"column":23}},"43":{"start":{"line":183,"column":12},"end":{"line":183,"column":58}},"44":{"start":{"line":185,"column":12},"end":{"line":189,"column":13}},"45":{"start":{"line":188,"column":16},"end":{"line":188,"column":89}},"46":{"start":{"line":192,"column":8},"end":{"line":196,"column":10}}},"branchMap":{"1":{"line":26,"type":"switch","locations":[{"start":{"line":27,"column":12},"end":{"line":27,"column":34}},{"start":{"line":28,"column":12},"end":{"line":29,"column":30}},{"start":{"line":31,"column":12},"end":{"line":37,"column":22}},{"start":{"line":39,"column":12},"end":{"line":39,"column":34}},{"start":{"line":40,"column":12},"end":{"line":46,"column":22}},{"start":{"line":48,"column":12},"end":{"line":48,"column":43}},{"start":{"line":49,"column":12},"end":{"line":49,"column":38}},{"start":{"line":50,"column":12},"end":{"line":53,"column":28}},{"start":{"line":55,"column":12},"end":{"line":56,"column":22}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":16},"end":{"line":34,"column":16}},{"start":{"line":34,"column":16},"end":{"line":34,"column":16}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":16},"end":{"line":43,"column":16}},{"start":{"line":43,"column":16},"end":{"line":43,"column":16}}]},"4":{"line":77,"type":"cond-expr","locations":[{"start":{"line":77,"column":34},"end":{"line":77,"column":55}},{"start":{"line":77,"column":58},"end":{"line":77,"column":59}}]},"5":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":11},"end":{"line":79,"column":15}},{"start":{"line":79,"column":19},"end":{"line":79,"column":42}}]},"6":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":23},"end":{"line":98,"column":31}},{"start":{"line":98,"column":35},"end":{"line":98,"column":51}}]},"7":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":24},"end":{"line":99,"column":34}},{"start":{"line":99,"column":38},"end":{"line":99,"column":55}}]},"8":{"line":100,"type":"cond-expr","locations":[{"start":{"line":101,"column":10},"end":{"line":101,"column":26}},{"start":{"line":102,"column":10},"end":{"line":102,"column":12}}]},"9":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":18},"end":{"line":100,"column":29}},{"start":{"line":100,"column":33},"end":{"line":100,"column":75}}]},"10":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"11":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":111,"column":4}},{"start":{"line":111,"column":4},"end":{"line":111,"column":4}}]},"12":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":8},"end":{"line":111,"column":22}},{"start":{"line":112,"column":8},"end":{"line":112,"column":48}},{"start":{"line":113,"column":8},"end":{"line":113,"column":48}}]},"13":{"line":122,"type":"cond-expr","locations":[{"start":{"line":122,"column":27},"end":{"line":122,"column":38}},{"start":{"line":122,"column":41},"end":{"line":122,"column":45}}]},"14":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":12},"end":{"line":141,"column":31}},{"start":{"line":142,"column":12},"end":{"line":142,"column":72}},{"start":{"line":143,"column":12},"end":{"line":143,"column":32}}]},"15":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":11},"end":{"line":147,"column":28}},{"start":{"line":147,"column":32},"end":{"line":147,"column":74}}]},"16":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":12},"end":{"line":179,"column":12}},{"start":{"line":179,"column":12},"end":{"line":179,"column":12}}]},"17":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":12},"end":{"line":185,"column":12}},{"start":{"line":185,"column":12},"end":{"line":185,"column":12}}]},"18":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":16},"end":{"line":185,"column":37}},{"start":{"line":186,"column":16},"end":{"line":186,"column":68}}]}},"code":["/**"," * @fileoverview Rule to flag creation of function inside a loop"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets the containing loop node of a specified node."," *"," * We don't need to check nested functions, so this ignores those."," * `Scope.through` contains references of nested functions."," *"," * @param {ASTNode} node - An AST node to get."," * @returns {ASTNode|null} The containing loop node of the specified node, or"," *      `null`."," */","function getContainingLoopNode(node) {","    let parent = node.parent;","","    while (parent) {","        switch (parent.type) {","            case \"WhileStatement\":","            case \"DoWhileStatement\":","                return parent;","","            case \"ForStatement\":","","                // `init` is outside of the loop.","                if (parent.init !== node) {","                    return parent;","                }","                break;","","            case \"ForInStatement\":","            case \"ForOfStatement\":","","                // `right` is outside of the loop.","                if (parent.right !== node) {","                    return parent;","                }","                break;","","            case \"ArrowFunctionExpression\":","            case \"FunctionExpression\":","            case \"FunctionDeclaration\":","","                // We don't need to check nested functions.","                return null;","","            default:","                break;","        }","","        node = parent;","        parent = node.parent;","    }","","    return null;","}","","/**"," * Gets the containing loop node of a given node."," * If the loop was nested, this returns the most outer loop."," *"," * @param {ASTNode} node - A node to get. This is a loop node."," * @param {ASTNode|null} excludedNode - A node that the result node should not"," *      include."," * @returns {ASTNode} The most outer loop node."," */","function getTopLoopNode(node, excludedNode) {","    let retv = node;","    const border = excludedNode ? excludedNode.range[1] : 0;","","    while (node && node.range[0] >= border) {","        retv = node;","        node = getContainingLoopNode(node);","    }","","    return retv;","}","","/**"," * Checks whether a given reference which refers to an upper scope's variable is"," * safe or not."," *"," * @param {ASTNode} funcNode - A target function node."," * @param {ASTNode} loopNode - A containing loop node."," * @param {escope.Reference} reference - A reference to check."," * @returns {boolean} `true` if the reference is safe or not."," */","function isSafe(funcNode, loopNode, reference) {","    const variable = reference.resolved;","    const definition = variable && variable.defs[0];","    const declaration = definition && definition.parent;","    const kind = (declaration && declaration.type === \"VariableDeclaration\")","        ? declaration.kind","        : \"\";","","    // Variables which are declared by `const` is safe.","    if (kind === \"const\") {","        return true;","    }","","    // Variables which are declared by `let` in the loop is safe.","    // It's a different instance from the next loop step's.","    if (kind === \"let\" &&","        declaration.range[0] > loopNode.range[0] &&","        declaration.range[1] < loopNode.range[1]","    ) {","        return true;","    }","","    // WriteReferences which exist after this border are unsafe because those","    // can modify the variable.","    const border = getTopLoopNode(","        loopNode,","        (kind === \"let\") ? declaration : null","    ).range[0];","","    /**","     * Checks whether a given reference is safe or not.","     * The reference is every reference of the upper scope's variable we are","     * looking now.","     *","     * It's safeafe if the reference matches one of the following condition.","     * - is readonly.","     * - doesn't exist inside a local function and after the border.","     *","     * @param {escope.Reference} upperRef - A reference to check.","     * @returns {boolean} `true` if the reference is safe.","     */","    function isSafeReference(upperRef) {","        const id = upperRef.identifier;","","        return (","            !upperRef.isWrite() ||","            variable.scope.variableScope === upperRef.from.variableScope &&","            id.range[0] < border","        );","    }","","    return Boolean(variable) && variable.references.every(isSafeReference);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `function` declarations and expressions inside loop statements\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Reports functions which match the following condition:","         *","         * - has a loop node in ancestors.","         * - has any references which refers to an unsafe variable.","         *","         * @param {ASTNode} node The AST node to check.","         * @returns {boolean} Whether or not the node is within a loop.","         */","        function checkForLoops(node) {","            const loopNode = getContainingLoopNode(node);","","            if (!loopNode) {","                return;","            }","","            const references = context.getScope().through;","","            if (references.length > 0 &&","                !references.every(isSafe.bind(null, node, loopNode))","            ) {","                context.report({ node, message: \"Don't make functions within a loop.\" });","            }","        }","","        return {","            ArrowFunctionExpression: checkForLoops,","            FunctionExpression: checkForLoops,","            FunctionDeclaration: checkForLoops","        };","    }","};",""],"l":{"22":1,"23":0,"25":0,"26":0,"29":0,"34":0,"35":0,"37":0,"43":0,"44":0,"46":0,"53":0,"56":0,"59":0,"60":0,"63":0,"75":1,"76":0,"77":0,"79":0,"80":0,"81":0,"84":0,"96":1,"97":0,"98":0,"99":0,"100":0,"105":0,"106":0,"111":0,"115":0,"120":0,"137":1,"138":0,"140":0,"147":0,"154":1,"176":1,"177":0,"179":0,"180":0,"183":0,"185":0,"188":0,"192":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-magic-numbers.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-magic-numbers.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":44,"loc":{"start":{"line":44,"column":10},"end":{"line":44,"column":20}}},"2":{"name":"isNumber","line":56,"loc":{"start":{"line":56,"column":8},"end":{"line":56,"column":32}}},"3":{"name":"shouldIgnoreNumber","line":65,"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":41}}},"4":{"name":"shouldIgnoreParseInt","line":75,"loc":{"start":{"line":75,"column":8},"end":{"line":75,"column":52}}},"5":{"name":"shouldIgnoreJSXNumbers","line":88,"loc":{"start":{"line":88,"column":8},"end":{"line":88,"column":48}}},"6":{"name":"shouldIgnoreArrayIndexes","line":97,"loc":{"start":{"line":97,"column":8},"end":{"line":97,"column":50}}},"7":{"name":"(anonymous_7)","line":102,"loc":{"start":{"line":102,"column":19},"end":{"line":102,"column":26}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":149,"column":2}},"2":{"start":{"line":45,"column":8},"end":{"line":49,"column":61}},"3":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"4":{"start":{"line":57,"column":12},"end":{"line":57,"column":50}},"5":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"6":{"start":{"line":66,"column":12},"end":{"line":66,"column":46}},"7":{"start":{"line":75,"column":8},"end":{"line":81,"column":9}},"8":{"start":{"line":76,"column":12},"end":{"line":80,"column":60}},"9":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"10":{"start":{"line":89,"column":12},"end":{"line":89,"column":52}},"11":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"12":{"start":{"line":98,"column":12},"end":{"line":98,"column":76}},"13":{"start":{"line":101,"column":8},"end":{"line":147,"column":10}},"14":{"start":{"line":103,"column":16},"end":{"line":105,"column":35}},"15":{"start":{"line":106,"column":16},"end":{"line":106,"column":110}},"16":{"start":{"line":108,"column":16},"end":{"line":110,"column":17}},"17":{"start":{"line":109,"column":20},"end":{"line":109,"column":27}},"18":{"start":{"line":113,"column":16},"end":{"line":118,"column":17}},"19":{"start":{"line":114,"column":20},"end":{"line":114,"column":34}},"20":{"start":{"line":115,"column":20},"end":{"line":115,"column":41}},"21":{"start":{"line":116,"column":20},"end":{"line":116,"column":35}},"22":{"start":{"line":117,"column":20},"end":{"line":117,"column":36}},"23":{"start":{"line":120,"column":16},"end":{"line":125,"column":17}},"24":{"start":{"line":124,"column":20},"end":{"line":124,"column":27}},"25":{"start":{"line":127,"column":16},"end":{"line":145,"column":17}},"26":{"start":{"line":128,"column":20},"end":{"line":133,"column":21}},"27":{"start":{"line":129,"column":24},"end":{"line":132,"column":27}},"28":{"start":{"line":134,"column":23},"end":{"line":145,"column":17}},"29":{"start":{"line":138,"column":20},"end":{"line":144,"column":23}}},"branchMap":{"1":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":23},"end":{"line":45,"column":41}},{"start":{"line":45,"column":45},"end":{"line":45,"column":47}}]},"2":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":21},"end":{"line":48,"column":34}},{"start":{"line":48,"column":38},"end":{"line":48,"column":40}}]},"3":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":19},"end":{"line":76,"column":51}},{"start":{"line":76,"column":55},"end":{"line":76,"column":83}},{"start":{"line":77,"column":17},"end":{"line":77,"column":50}},{"start":{"line":78,"column":16},"end":{"line":78,"column":57}},{"start":{"line":79,"column":16},"end":{"line":79,"column":54}},{"start":{"line":80,"column":16},"end":{"line":80,"column":58}}]},"4":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":19},"end":{"line":98,"column":53}},{"start":{"line":98,"column":57},"end":{"line":98,"column":75}}]},"5":{"line":106,"type":"cond-expr","locations":[{"start":{"line":106,"column":48},"end":{"line":106,"column":50}},{"start":{"line":106,"column":53},"end":{"line":106,"column":109}}]},"6":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":16}},{"start":{"line":108,"column":16},"end":{"line":108,"column":16}}]},"7":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":16},"end":{"line":113,"column":16}},{"start":{"line":113,"column":16},"end":{"line":113,"column":16}}]},"8":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":20},"end":{"line":113,"column":53}},{"start":{"line":113,"column":57},"end":{"line":113,"column":80}}]},"9":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":16},"end":{"line":120,"column":16}},{"start":{"line":120,"column":16},"end":{"line":120,"column":16}}]},"10":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":20},"end":{"line":120,"column":45}},{"start":{"line":121,"column":20},"end":{"line":121,"column":54}},{"start":{"line":122,"column":20},"end":{"line":122,"column":52}},{"start":{"line":123,"column":20},"end":{"line":123,"column":50}}]},"11":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":16},"end":{"line":127,"column":16}},{"start":{"line":127,"column":16},"end":{"line":127,"column":16}}]},"12":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":20},"end":{"line":128,"column":20}},{"start":{"line":128,"column":20},"end":{"line":128,"column":20}}]},"13":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":24},"end":{"line":128,"column":36}},{"start":{"line":128,"column":40},"end":{"line":128,"column":70}}]},"14":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":23},"end":{"line":134,"column":23}},{"start":{"line":134,"column":23},"end":{"line":134,"column":23}}]},"15":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":20},"end":{"line":135,"column":55}},{"start":{"line":136,"column":21},"end":{"line":136,"column":59}},{"start":{"line":136,"column":63},"end":{"line":136,"column":96}}]}},"code":["/**"," * @fileoverview Rule to flag statements that use magic numbers (adapted from https://github.com/danielstjules/buddy.js)"," * @author Vincent Lemeunier"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow magic numbers\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [{","            type: \"object\",","            properties: {","                detectObjects: {","                    type: \"boolean\"","                },","                enforceConst: {","                    type: \"boolean\"","                },","                ignore: {","                    type: \"array\",","                    items: {","                        type: \"number\"","                    },","                    uniqueItems: true","                },","                ignoreArrayIndexes: {","                    type: \"boolean\"","                }","            },","            additionalProperties: false","        }]","    },","","    create(context) {","        const config = context.options[0] || {},","            detectObjects = !!config.detectObjects,","            enforceConst = !!config.enforceConst,","            ignore = config.ignore || [],","            ignoreArrayIndexes = !!config.ignoreArrayIndexes;","","        /**","         * Returns whether the node is number literal","         * @param {Node} node - the node literal being evaluated","         * @returns {boolean} true if the node is a number literal","         */","        function isNumber(node) {","            return typeof node.value === \"number\";","        }","","        /**","         * Returns whether the number should be ignored","         * @param {number} num - the number","         * @returns {boolean} true if the number should be ignored","         */","        function shouldIgnoreNumber(num) {","            return ignore.indexOf(num) !== -1;","        }","","        /**","         * Returns whether the number should be ignored when used as a radix within parseInt() or Number.parseInt()","         * @param {ASTNode} parent - the non-\"UnaryExpression\" parent","         * @param {ASTNode} node - the node literal being evaluated","         * @returns {boolean} true if the number should be ignored","         */","        function shouldIgnoreParseInt(parent, node) {","            return parent.type === \"CallExpression\" && node === parent.arguments[1] &&","                (parent.callee.name === \"parseInt\" ||","                parent.callee.type === \"MemberExpression\" &&","                parent.callee.object.name === \"Number\" &&","                parent.callee.property.name === \"parseInt\");","        }","","        /**","         * Returns whether the number should be ignored when used to define a JSX prop","         * @param {ASTNode} parent - the non-\"UnaryExpression\" parent","         * @returns {boolean} true if the number should be ignored","         */","        function shouldIgnoreJSXNumbers(parent) {","            return parent.type.indexOf(\"JSX\") === 0;","        }","","        /**","         * Returns whether the number should be ignored when used as an array index with enabled 'ignoreArrayIndexes' option.","         * @param {ASTNode} parent - the non-\"UnaryExpression\" parent.","         * @returns {boolean} true if the number should be ignored","         */","        function shouldIgnoreArrayIndexes(parent) {","            return parent.type === \"MemberExpression\" && ignoreArrayIndexes;","        }","","        return {","            Literal(node) {","                let parent = node.parent,","                    value = node.value,","                    raw = node.raw;","                const okTypes = detectObjects ? [] : [\"ObjectExpression\", \"Property\", \"AssignmentExpression\"];","","                if (!isNumber(node)) {","                    return;","                }","","                // For negative magic numbers: update the value and parent node","                if (parent.type === \"UnaryExpression\" && parent.operator === \"-\") {","                    node = parent;","                    parent = node.parent;","                    value = -value;","                    raw = `-${raw}`;","                }","","                if (shouldIgnoreNumber(value) ||","                    shouldIgnoreParseInt(parent, node) ||","                    shouldIgnoreArrayIndexes(parent) ||","                    shouldIgnoreJSXNumbers(parent)) {","                    return;","                }","","                if (parent.type === \"VariableDeclarator\") {","                    if (enforceConst && parent.parent.kind !== \"const\") {","                        context.report({","                            node,","                            message: \"Number constants declarations must use 'const'.\"","                        });","                    }","                } else if (","                    okTypes.indexOf(parent.type) === -1 ||","                    (parent.type === \"AssignmentExpression\" && parent.left.type === \"Identifier\")","                ) {","                    context.report({","                        node,","                        message: \"No magic number: {{raw}}.\",","                        data: {","                            raw","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"12":1,"45":0,"56":1,"57":0,"65":1,"66":0,"75":1,"76":0,"88":1,"89":0,"97":1,"98":0,"101":0,"103":0,"106":0,"108":0,"109":0,"113":0,"114":0,"115":0,"116":0,"117":0,"120":0,"124":0,"127":0,"128":0,"129":0,"134":0,"138":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-mixed-operators.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-mixed-operators.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":1,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":1,"26":0,"27":1,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"normalizeOptions","line":45,"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":35}}},"2":{"name":"includesBothInAGroup","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":51}}},"3":{"name":"(anonymous_3)","line":102,"loc":{"start":{"line":102,"column":10},"end":{"line":102,"column":20}}},"4":{"name":"shouldIgnore","line":114,"loc":{"start":{"line":114,"column":8},"end":{"line":114,"column":36}}},"5":{"name":"isMixedWithParent","line":136,"loc":{"start":{"line":136,"column":8},"end":{"line":136,"column":41}}},"6":{"name":"getOperatorToken","line":150,"loc":{"start":{"line":150,"column":8},"end":{"line":150,"column":40}}},"7":{"name":"reportBothOperators","line":163,"loc":{"start":{"line":163,"column":8},"end":{"line":163,"column":43}}},"8":{"name":"check","line":195,"loc":{"start":{"line":195,"column":8},"end":{"line":195,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":44}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":61}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":66}},"4":{"start":{"line":20,"column":0},"end":{"line":20,"column":78}},"5":{"start":{"line":21,"column":0},"end":{"line":21,"column":39}},"6":{"start":{"line":22,"column":0},"end":{"line":22,"column":50}},"7":{"start":{"line":23,"column":0},"end":{"line":29,"column":2}},"8":{"start":{"line":30,"column":0},"end":{"line":36,"column":2}},"9":{"start":{"line":37,"column":0},"end":{"line":37,"column":58}},"10":{"start":{"line":45,"column":0},"end":{"line":54,"column":1}},"11":{"start":{"line":46,"column":4},"end":{"line":46,"column":79}},"12":{"start":{"line":47,"column":4},"end":{"line":47,"column":63}},"13":{"start":{"line":48,"column":4},"end":{"line":48,"column":83}},"14":{"start":{"line":50,"column":4},"end":{"line":53,"column":6}},"15":{"start":{"line":64,"column":0},"end":{"line":66,"column":1}},"16":{"start":{"line":65,"column":4},"end":{"line":65,"column":91}},"17":{"start":{"line":65,"column":32},"end":{"line":65,"column":89}},"18":{"start":{"line":72,"column":0},"end":{"line":209,"column":2}},"19":{"start":{"line":103,"column":8},"end":{"line":103,"column":51}},"20":{"start":{"line":104,"column":8},"end":{"line":104,"column":61}},"21":{"start":{"line":114,"column":8},"end":{"line":125,"column":9}},"22":{"start":{"line":115,"column":12},"end":{"line":115,"column":27}},"23":{"start":{"line":116,"column":12},"end":{"line":116,"column":34}},"24":{"start":{"line":118,"column":12},"end":{"line":124,"column":14}},"25":{"start":{"line":136,"column":8},"end":{"line":141,"column":9}},"26":{"start":{"line":137,"column":12},"end":{"line":140,"column":14}},"27":{"start":{"line":150,"column":8},"end":{"line":152,"column":9}},"28":{"start":{"line":151,"column":12},"end":{"line":151,"column":88}},"29":{"start":{"line":163,"column":8},"end":{"line":186,"column":9}},"30":{"start":{"line":164,"column":12},"end":{"line":164,"column":39}},"31":{"start":{"line":165,"column":12},"end":{"line":165,"column":64}},"32":{"start":{"line":166,"column":12},"end":{"line":166,"column":65}},"33":{"start":{"line":167,"column":12},"end":{"line":168,"column":80}},"34":{"start":{"line":169,"column":12},"end":{"line":172,"column":14}},"35":{"start":{"line":174,"column":12},"end":{"line":179,"column":15}},"36":{"start":{"line":180,"column":12},"end":{"line":185,"column":15}},"37":{"start":{"line":195,"column":8},"end":{"line":202,"column":9}},"38":{"start":{"line":196,"column":12},"end":{"line":201,"column":13}},"39":{"start":{"line":200,"column":16},"end":{"line":200,"column":42}},"40":{"start":{"line":204,"column":8},"end":{"line":207,"column":10}}},"branchMap":{"1":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":23},"end":{"line":46,"column":30}},{"start":{"line":46,"column":34},"end":{"line":46,"column":48}},{"start":{"line":46,"column":52},"end":{"line":46,"column":77}}]},"2":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":31},"end":{"line":47,"column":45}},{"start":{"line":47,"column":48},"end":{"line":47,"column":62}}]},"3":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":33},"end":{"line":48,"column":40}},{"start":{"line":48,"column":44},"end":{"line":48,"column":71}}]},"4":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":32},"end":{"line":65,"column":58}},{"start":{"line":65,"column":62},"end":{"line":65,"column":89}}]},"5":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":16},"end":{"line":119,"column":77}},{"start":{"line":121,"column":20},"end":{"line":121,"column":47}},{"start":{"line":122,"column":20},"end":{"line":122,"column":75}}]},"6":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":16},"end":{"line":138,"column":54}},{"start":{"line":139,"column":16},"end":{"line":139,"column":59}}]},"7":{"line":165,"type":"cond-expr","locations":[{"start":{"line":165,"column":50},"end":{"line":165,"column":54}},{"start":{"line":165,"column":57},"end":{"line":165,"column":63}}]},"8":{"line":166,"type":"cond-expr","locations":[{"start":{"line":166,"column":51},"end":{"line":166,"column":55}},{"start":{"line":166,"column":58},"end":{"line":166,"column":64}}]},"9":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":12},"end":{"line":196,"column":12}},{"start":{"line":196,"column":12},"end":{"line":196,"column":12}}]},"10":{"line":196,"type":"binary-expr","locations":[{"start":{"line":196,"column":16},"end":{"line":196,"column":55}},{"start":{"line":197,"column":16},"end":{"line":197,"column":39}},{"start":{"line":198,"column":16},"end":{"line":198,"column":35}}]}},"code":["/**"," * @fileoverview Rule to disallow mixed binary operators."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils.js\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const ARITHMETIC_OPERATORS = [\"+\", \"-\", \"*\", \"/\", \"%\", \"**\"];","const BITWISE_OPERATORS = [\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"];","const COMPARISON_OPERATORS = [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"];","const LOGICAL_OPERATORS = [\"&&\", \"||\"];","const RELATIONAL_OPERATORS = [\"in\", \"instanceof\"];","const ALL_OPERATORS = [].concat(","    ARITHMETIC_OPERATORS,","    BITWISE_OPERATORS,","    COMPARISON_OPERATORS,","    LOGICAL_OPERATORS,","    RELATIONAL_OPERATORS",");","const DEFAULT_GROUPS = [","    ARITHMETIC_OPERATORS,","    BITWISE_OPERATORS,","    COMPARISON_OPERATORS,","    LOGICAL_OPERATORS,","    RELATIONAL_OPERATORS","];","const TARGET_NODE_TYPE = /^(?:Binary|Logical)Expression$/;","","/**"," * Normalizes options."," *"," * @param {Object|undefined} options - A options object to normalize."," * @returns {Object} Normalized option object."," */","function normalizeOptions(options) {","    const hasGroups = (options && options.groups && options.groups.length > 0);","    const groups = hasGroups ? options.groups : DEFAULT_GROUPS;","    const allowSamePrecedence = (options && options.allowSamePrecedence) !== false;","","    return {","        groups,","        allowSamePrecedence","    };","}","","/**"," * Checks whether any group which includes both given operator exists or not."," *"," * @param {Array.<string[]>} groups - A list of groups to check."," * @param {string} left - An operator."," * @param {string} right - Another operator."," * @returns {boolean} `true` if such group existed."," */","function includesBothInAGroup(groups, left, right) {","    return groups.some(group => group.indexOf(left) !== -1 && group.indexOf(right) !== -1);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow mixed binary operators\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        schema: [","            {","                type: \"object\",","                properties: {","                    groups: {","                        type: \"array\",","                        items: {","                            type: \"array\",","                            items: { enum: ALL_OPERATORS },","                            minItems: 2,","                            uniqueItems: true","                        },","                        uniqueItems: true","                    },","                    allowSamePrecedence: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        const options = normalizeOptions(context.options[0]);","","        /**","         * Checks whether a given node should be ignored by options or not.","         *","         * @param {ASTNode} node - A node to check. This is a BinaryExpression","         *      node or a LogicalExpression node. This parent node is one of","         *      them, too.","         * @returns {boolean} `true` if the node should be ignored.","         */","        function shouldIgnore(node) {","            const a = node;","            const b = node.parent;","","            return (","                !includesBothInAGroup(options.groups, a.operator, b.operator) ||","                (","                    options.allowSamePrecedence &&","                    astUtils.getPrecedence(a) === astUtils.getPrecedence(b)","                )","            );","        }","","        /**","         * Checks whether the operator of a given node is mixed with parent","         * node's operator or not.","         *","         * @param {ASTNode} node - A node to check. This is a BinaryExpression","         *      node or a LogicalExpression node. This parent node is one of","         *      them, too.","         * @returns {boolean} `true` if the node was mixed.","         */","        function isMixedWithParent(node) {","            return (","                node.operator !== node.parent.operator &&","                !astUtils.isParenthesised(sourceCode, node)","            );","        }","","        /**","         * Gets the operator token of a given node.","         *","         * @param {ASTNode} node - A node to check. This is a BinaryExpression","         *      node or a LogicalExpression node.","         * @returns {Token} The operator token of the node.","         */","        function getOperatorToken(node) {","            return sourceCode.getTokenAfter(node.left, astUtils.isNotClosingParenToken);","        }","","        /**","         * Reports both the operator of a given node and the operator of the","         * parent node.","         *","         * @param {ASTNode} node - A node to check. This is a BinaryExpression","         *      node or a LogicalExpression node. This parent node is one of","         *      them, too.","         * @returns {void}","         */","        function reportBothOperators(node) {","            const parent = node.parent;","            const left = (parent.left === node) ? node : parent;","            const right = (parent.left !== node) ? node : parent;","            const message =","                \"Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'.\";","            const data = {","                leftOperator: left.operator,","                rightOperator: right.operator","            };","","            context.report({","                node: left,","                loc: getOperatorToken(left).loc.start,","                message,","                data","            });","            context.report({","                node: right,","                loc: getOperatorToken(right).loc.start,","                message,","                data","            });","        }","","        /**","         * Checks between the operator of this node and the operator of the","         * parent node.","         *","         * @param {ASTNode} node - A node to check.","         * @returns {void}","         */","        function check(node) {","            if (TARGET_NODE_TYPE.test(node.parent.type) &&","                isMixedWithParent(node) &&","                !shouldIgnore(node)","            ) {","                reportBothOperators(node);","            }","        }","","        return {","            BinaryExpression: check,","            LogicalExpression: check","        };","    }","};",""],"l":{"12":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"30":1,"37":1,"45":1,"46":0,"47":0,"48":0,"50":0,"64":1,"65":0,"72":1,"103":0,"104":0,"114":1,"115":0,"116":0,"118":0,"136":1,"137":0,"150":1,"151":0,"163":1,"164":0,"165":0,"166":0,"167":0,"169":0,"174":0,"180":0,"195":1,"196":0,"200":0,"204":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-mixed-requires.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-mixed-requires.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":20}}},"2":{"name":"getBuiltinModules","line":61,"loc":{"start":{"line":61,"column":8},"end":{"line":61,"column":37}}},"3":{"name":"getDeclarationType","line":93,"loc":{"start":{"line":93,"column":8},"end":{"line":93,"column":52}}},"4":{"name":"inferModuleType","line":129,"loc":{"start":{"line":129,"column":8},"end":{"line":129,"column":49}}},"5":{"name":"isMixed","line":169,"loc":{"start":{"line":169,"column":8},"end":{"line":169,"column":39}}},"6":{"name":"isGrouped","line":190,"loc":{"start":{"line":190,"column":8},"end":{"line":190,"column":41}}},"7":{"name":"(anonymous_7)","line":205,"loc":{"start":{"line":205,"column":31},"end":{"line":205,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":216,"column":2}},"2":{"start":{"line":45,"column":8},"end":{"line":45,"column":43}},"3":{"start":{"line":46,"column":8},"end":{"line":47,"column":30}},"4":{"start":{"line":49,"column":8},"end":{"line":54,"column":9}},"5":{"start":{"line":50,"column":12},"end":{"line":50,"column":40}},"6":{"start":{"line":51,"column":12},"end":{"line":51,"column":42}},"7":{"start":{"line":53,"column":12},"end":{"line":53,"column":33}},"8":{"start":{"line":61,"column":8},"end":{"line":75,"column":9}},"9":{"start":{"line":68,"column":12},"end":{"line":74,"column":14}},"10":{"start":{"line":77,"column":8},"end":{"line":77,"column":52}},"11":{"start":{"line":79,"column":8},"end":{"line":81,"column":33}},"12":{"start":{"line":83,"column":8},"end":{"line":86,"column":38}},"13":{"start":{"line":93,"column":8},"end":{"line":122,"column":9}},"14":{"start":{"line":94,"column":12},"end":{"line":98,"column":13}},"15":{"start":{"line":97,"column":16},"end":{"line":97,"column":42}},"16":{"start":{"line":100,"column":12},"end":{"line":118,"column":13}},"17":{"start":{"line":106,"column":16},"end":{"line":106,"column":36}},"18":{"start":{"line":107,"column":19},"end":{"line":118,"column":13}},"19":{"start":{"line":113,"column":16},"end":{"line":113,"column":65}},"20":{"start":{"line":114,"column":19},"end":{"line":118,"column":13}},"21":{"start":{"line":117,"column":16},"end":{"line":117,"column":65}},"22":{"start":{"line":121,"column":12},"end":{"line":121,"column":30}},"23":{"start":{"line":129,"column":8},"end":{"line":161,"column":9}},"24":{"start":{"line":130,"column":12},"end":{"line":138,"column":13}},"25":{"start":{"line":133,"column":16},"end":{"line":133,"column":62}},"26":{"start":{"line":134,"column":19},"end":{"line":138,"column":13}},"27":{"start":{"line":137,"column":16},"end":{"line":137,"column":36}},"28":{"start":{"line":140,"column":12},"end":{"line":140,"column":52}},"29":{"start":{"line":142,"column":12},"end":{"line":146,"column":13}},"30":{"start":{"line":145,"column":16},"end":{"line":145,"column":36}},"31":{"start":{"line":148,"column":12},"end":{"line":156,"column":13}},"32":{"start":{"line":151,"column":16},"end":{"line":151,"column":32}},"33":{"start":{"line":152,"column":19},"end":{"line":156,"column":13}},"34":{"start":{"line":155,"column":16},"end":{"line":155,"column":32}},"35":{"start":{"line":159,"column":12},"end":{"line":159,"column":30}},"36":{"start":{"line":169,"column":8},"end":{"line":182,"column":9}},"37":{"start":{"line":170,"column":12},"end":{"line":170,"column":32}},"38":{"start":{"line":172,"column":12},"end":{"line":176,"column":15}},"39":{"start":{"line":173,"column":16},"end":{"line":173,"column":66}},"40":{"start":{"line":175,"column":16},"end":{"line":175,"column":38}},"41":{"start":{"line":178,"column":12},"end":{"line":181,"column":14}},"42":{"start":{"line":190,"column":8},"end":{"line":200,"column":9}},"43":{"start":{"line":191,"column":12},"end":{"line":191,"column":29}},"44":{"start":{"line":193,"column":12},"end":{"line":197,"column":15}},"45":{"start":{"line":194,"column":16},"end":{"line":196,"column":17}},"46":{"start":{"line":195,"column":20},"end":{"line":195,"column":68}},"47":{"start":{"line":199,"column":12},"end":{"line":199,"column":50}},"48":{"start":{"line":203,"column":8},"end":{"line":213,"column":10}},"49":{"start":{"line":207,"column":16},"end":{"line":211,"column":17}},"50":{"start":{"line":208,"column":20},"end":{"line":208,"column":102}},"51":{"start":{"line":209,"column":23},"end":{"line":211,"column":17}},"52":{"start":{"line":210,"column":20},"end":{"line":210,"column":110}}},"branchMap":{"1":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"2":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":12}},{"start":{"line":94,"column":12},"end":{"line":94,"column":12}}]},"3":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":100,"column":12}},{"start":{"line":100,"column":12},"end":{"line":100,"column":12}}]},"4":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":16},"end":{"line":100,"column":56}},{"start":{"line":101,"column":16},"end":{"line":101,"column":59}},{"start":{"line":102,"column":16},"end":{"line":102,"column":56}}]},"5":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":19},"end":{"line":107,"column":19}},{"start":{"line":107,"column":19},"end":{"line":107,"column":19}}]},"6":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":23},"end":{"line":107,"column":32}},{"start":{"line":108,"column":16},"end":{"line":108,"column":56}},{"start":{"line":109,"column":16},"end":{"line":109,"column":63}}]},"7":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":19},"end":{"line":114,"column":19}},{"start":{"line":114,"column":19},"end":{"line":114,"column":19}}]},"8":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":130,"column":12}},{"start":{"line":130,"column":12},"end":{"line":130,"column":12}}]},"9":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":19},"end":{"line":134,"column":19}},{"start":{"line":134,"column":19},"end":{"line":134,"column":19}}]},"10":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":142,"column":12}},{"start":{"line":142,"column":12},"end":{"line":142,"column":12}}]},"11":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":16},"end":{"line":142,"column":38}},{"start":{"line":142,"column":42},"end":{"line":142,"column":71}}]},"12":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":12},"end":{"line":148,"column":12}},{"start":{"line":148,"column":12},"end":{"line":148,"column":12}}]},"13":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":19},"end":{"line":152,"column":19}},{"start":{"line":152,"column":19},"end":{"line":152,"column":19}}]},"14":{"line":179,"type":"binary-expr","locations":[{"start":{"line":179,"column":16},"end":{"line":179,"column":38}},{"start":{"line":180,"column":17},"end":{"line":180,"column":45}},{"start":{"line":180,"column":49},"end":{"line":180,"column":69}}]},"15":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":16},"end":{"line":194,"column":16}},{"start":{"line":194,"column":16},"end":{"line":194,"column":16}}]},"16":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":16},"end":{"line":207,"column":16}},{"start":{"line":207,"column":16},"end":{"line":207,"column":16}}]},"17":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":23},"end":{"line":209,"column":23}},{"start":{"line":209,"column":23},"end":{"line":209,"column":23}}]},"18":{"line":209,"type":"binary-expr","locations":[{"start":{"line":209,"column":27},"end":{"line":209,"column":35}},{"start":{"line":209,"column":39},"end":{"line":209,"column":68}}]}},"code":["/**"," * @fileoverview Rule to enforce grouped require statements for Node.JS"," * @author Raphael Pigulla"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `require` calls to be mixed with regular variable declarations\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        type: \"boolean\"","                    },","                    {","                        type: \"object\",","                        properties: {","                            grouping: {","                                type: \"boolean\"","                            },","                            allowCall: {","                                type: \"boolean\"","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","","        const options = context.options[0];","        let grouping = false,","            allowCall = false;","","        if (typeof options === \"object\") {","            grouping = options.grouping;","            allowCall = options.allowCall;","        } else {","            grouping = !!options;","        }","","        /**","         * Returns the list of built-in modules.","         *","         * @returns {string[]} An array of built-in Node.js modules.","         */","        function getBuiltinModules() {","","            /*","             * This list is generated using:","             * `require(\"repl\")._builtinLibs.concat('repl').sort()`","             * This particular list is as per nodejs v0.12.2 and iojs v0.7.1","             */","            return [","                \"assert\", \"buffer\", \"child_process\", \"cluster\", \"crypto\",","                \"dgram\", \"dns\", \"domain\", \"events\", \"fs\", \"http\", \"https\",","                \"net\", \"os\", \"path\", \"punycode\", \"querystring\", \"readline\",","                \"repl\", \"smalloc\", \"stream\", \"string_decoder\", \"tls\", \"tty\",","                \"url\", \"util\", \"v8\", \"vm\", \"zlib\"","            ];","        }","","        const BUILTIN_MODULES = getBuiltinModules();","","        const DECL_REQUIRE = \"require\",","            DECL_UNINITIALIZED = \"uninitialized\",","            DECL_OTHER = \"other\";","","        const REQ_CORE = \"core\",","            REQ_FILE = \"file\",","            REQ_MODULE = \"module\",","            REQ_COMPUTED = \"computed\";","","        /**","         * Determines the type of a declaration statement.","         * @param {ASTNode} initExpression The init node of the VariableDeclarator.","         * @returns {string} The type of declaration represented by the expression.","         */","        function getDeclarationType(initExpression) {","            if (!initExpression) {","","                // \"var x;\"","                return DECL_UNINITIALIZED;","            }","","            if (initExpression.type === \"CallExpression\" &&","                initExpression.callee.type === \"Identifier\" &&","                initExpression.callee.name === \"require\"","            ) {","","                // \"var x = require('util');\"","                return DECL_REQUIRE;","            } else if (allowCall &&","                initExpression.type === \"CallExpression\" &&","                initExpression.callee.type === \"CallExpression\"","            ) {","","                // \"var x = require('diagnose')('sub-module');\"","                return getDeclarationType(initExpression.callee);","            } else if (initExpression.type === \"MemberExpression\") {","","                // \"var x = require('glob').Glob;\"","                return getDeclarationType(initExpression.object);","            }","","            // \"var x = 42;\"","            return DECL_OTHER;","        }","","        /**","         * Determines the type of module that is loaded via require.","         * @param {ASTNode} initExpression The init node of the VariableDeclarator.","         * @returns {string} The module type.","         */","        function inferModuleType(initExpression) {","            if (initExpression.type === \"MemberExpression\") {","","                // \"var x = require('glob').Glob;\"","                return inferModuleType(initExpression.object);","            } else if (initExpression.arguments.length === 0) {","","                // \"var x = require();\"","                return REQ_COMPUTED;","            }","","            const arg = initExpression.arguments[0];","","            if (arg.type !== \"Literal\" || typeof arg.value !== \"string\") {","","                // \"var x = require(42);\"","                return REQ_COMPUTED;","            }","","            if (BUILTIN_MODULES.indexOf(arg.value) !== -1) {","","                // \"var fs = require('fs');\"","                return REQ_CORE;","            } else if (/^\\.{0,2}\\//.test(arg.value)) {","","                // \"var utils = require('./utils');\"","                return REQ_FILE;","            }","","            // \"var async = require('async');\"","            return REQ_MODULE;","","        }","","        /**","         * Check if the list of variable declarations is mixed, i.e. whether it","         * contains both require and other declarations.","         * @param {ASTNode} declarations The list of VariableDeclarators.","         * @returns {boolean} True if the declarations are mixed, false if not.","         */","        function isMixed(declarations) {","            const contains = {};","","            declarations.forEach(declaration => {","                const type = getDeclarationType(declaration.init);","","                contains[type] = true;","            });","","            return !!(","                contains[DECL_REQUIRE] &&","                (contains[DECL_UNINITIALIZED] || contains[DECL_OTHER])","            );","        }","","        /**","         * Check if all require declarations in the given list are of the same","         * type.","         * @param {ASTNode} declarations The list of VariableDeclarators.","         * @returns {boolean} True if the declarations are grouped, false if not.","         */","        function isGrouped(declarations) {","            const found = {};","","            declarations.forEach(declaration => {","                if (getDeclarationType(declaration.init) === DECL_REQUIRE) {","                    found[inferModuleType(declaration.init)] = true;","                }","            });","","            return Object.keys(found).length <= 1;","        }","","","        return {","","            VariableDeclaration(node) {","","                if (isMixed(node.declarations)) {","                    context.report({ node, message: \"Do not mix 'require' and other declarations.\" });","                } else if (grouping && !isGrouped(node.declarations)) {","                    context.report({ node, message: \"Do not mix core, module, file and computed requires.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"45":0,"46":0,"49":0,"50":0,"51":0,"53":0,"61":1,"68":0,"77":0,"79":0,"83":0,"93":1,"94":0,"97":0,"100":0,"106":0,"107":0,"113":0,"114":0,"117":0,"121":0,"129":1,"130":0,"133":0,"134":0,"137":0,"140":0,"142":0,"145":0,"148":0,"151":0,"152":0,"155":0,"159":0,"169":1,"170":0,"172":0,"173":0,"175":0,"178":0,"190":1,"191":0,"193":0,"194":0,"195":0,"199":0,"203":0,"207":0,"208":0,"209":0,"210":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-mixed-spaces-and-tabs.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-mixed-spaces-and-tabs.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":10},"end":{"line":26,"column":20}}},"2":{"name":"beforeLoc","line":49,"loc":{"start":{"line":49,"column":8},"end":{"line":49,"column":46}}},"3":{"name":"afterLoc","line":64,"loc":{"start":{"line":64,"column":8},"end":{"line":64,"column":45}}},"4":{"name":"(anonymous_4)","line":77,"loc":{"start":{"line":77,"column":27},"end":{"line":77,"column":34}}},"5":{"name":"(anonymous_5)","line":81,"loc":{"start":{"line":81,"column":26},"end":{"line":81,"column":33}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":143,"column":2}},"2":{"start":{"line":27,"column":8},"end":{"line":27,"column":51}},"3":{"start":{"line":29,"column":8},"end":{"line":29,"column":22}},"4":{"start":{"line":30,"column":8},"end":{"line":30,"column":31}},"5":{"start":{"line":32,"column":8},"end":{"line":39,"column":9}},"6":{"start":{"line":35,"column":16},"end":{"line":35,"column":33}},"7":{"start":{"line":36,"column":16},"end":{"line":36,"column":22}},"8":{"start":{"line":38,"column":16},"end":{"line":38,"column":34}},"9":{"start":{"line":49,"column":8},"end":{"line":54,"column":9}},"10":{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},"11":{"start":{"line":51,"column":16},"end":{"line":51,"column":28}},"12":{"start":{"line":53,"column":12},"end":{"line":53,"column":72}},"13":{"start":{"line":64,"column":8},"end":{"line":69,"column":9}},"14":{"start":{"line":65,"column":12},"end":{"line":67,"column":13}},"15":{"start":{"line":66,"column":16},"end":{"line":66,"column":28}},"16":{"start":{"line":68,"column":12},"end":{"line":68,"column":68}},"17":{"start":{"line":75,"column":8},"end":{"line":140,"column":10}},"18":{"start":{"line":78,"column":16},"end":{"line":78,"column":43}},"19":{"start":{"line":88,"column":16},"end":{"line":88,"column":51}},"20":{"start":{"line":89,"column":16},"end":{"line":90,"column":59}},"21":{"start":{"line":92,"column":16},"end":{"line":94,"column":19}},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":50}},"23":{"start":{"line":96,"column":16},"end":{"line":106,"column":19}},"24":{"start":{"line":97,"column":20},"end":{"line":99,"column":21}},"25":{"start":{"line":98,"column":24},"end":{"line":98,"column":33}},"26":{"start":{"line":101,"column":20},"end":{"line":103,"column":21}},"27":{"start":{"line":102,"column":24},"end":{"line":102,"column":34}},"28":{"start":{"line":105,"column":20},"end":{"line":105,"column":29}},"29":{"start":{"line":108,"column":16},"end":{"line":115,"column":17}},"30":{"start":{"line":114,"column":20},"end":{"line":114,"column":45}},"31":{"start":{"line":117,"column":16},"end":{"line":137,"column":19}},"32":{"start":{"line":118,"column":20},"end":{"line":118,"column":51}},"33":{"start":{"line":120,"column":20},"end":{"line":136,"column":21}},"34":{"start":{"line":121,"column":24},"end":{"line":122,"column":53}},"35":{"start":{"line":124,"column":24},"end":{"line":133,"column":25}},"36":{"start":{"line":125,"column":28},"end":{"line":127,"column":29}},"37":{"start":{"line":126,"column":32},"end":{"line":126,"column":41}},"38":{"start":{"line":128,"column":28},"end":{"line":130,"column":29}},"39":{"start":{"line":129,"column":32},"end":{"line":129,"column":41}},"40":{"start":{"line":132,"column":28},"end":{"line":132,"column":35}},"41":{"start":{"line":135,"column":24},"end":{"line":135,"column":119}}},"branchMap":{"1":{"line":32,"type":"switch","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":22}},{"start":{"line":34,"column":12},"end":{"line":36,"column":22}},{"start":{"line":37,"column":12},"end":{"line":38,"column":34}}]},"2":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":12}},{"start":{"line":50,"column":12},"end":{"line":50,"column":12}}]},"3":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":19},"end":{"line":53,"column":42}},{"start":{"line":53,"column":46},"end":{"line":53,"column":71}}]},"4":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":12}},{"start":{"line":65,"column":12},"end":{"line":65,"column":12}}]},"5":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":19},"end":{"line":68,"column":40}},{"start":{"line":68,"column":44},"end":{"line":68,"column":67}}]},"6":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":20},"end":{"line":97,"column":20}},{"start":{"line":97,"column":20},"end":{"line":97,"column":20}}]},"7":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":20},"end":{"line":101,"column":20}},{"start":{"line":101,"column":20},"end":{"line":101,"column":20}}]},"8":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":16}},{"start":{"line":108,"column":16},"end":{"line":108,"column":16}}]},"9":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":20},"end":{"line":120,"column":20}},{"start":{"line":120,"column":20},"end":{"line":120,"column":20}}]},"10":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":28},"end":{"line":125,"column":28}},{"start":{"line":125,"column":28},"end":{"line":125,"column":28}}]},"11":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":28},"end":{"line":128,"column":28}},{"start":{"line":128,"column":28},"end":{"line":128,"column":28}}]}},"code":["/**"," * @fileoverview Disallow mixed spaces and tabs for indentation"," * @author Jary Niebur"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow mixed spaces and tabs for indentation\",","            category: \"Stylistic Issues\",","            recommended: true","        },","","        schema: [","            {","                enum: [\"smart-tabs\", true, false]","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        let smartTabs;","        const ignoredLocs = [];","","        switch (context.options[0]) {","            case true: // Support old syntax, maybe add deprecation warning here","            case \"smart-tabs\":","                smartTabs = true;","                break;","            default:","                smartTabs = false;","        }","","        /**","         * Determines if a given line and column are before a location.","         * @param {Location} loc The location object from an AST node.","         * @param {int} line The line to check.","         * @param {int} column The column to check.","         * @returns {boolean} True if the line and column are before the location, false if not.","         * @private","         */","        function beforeLoc(loc, line, column) {","            if (line < loc.start.line) {","                return true;","            }","            return line === loc.start.line && column < loc.start.column;","        }","","        /**","         * Determines if a given line and column are after a location.","         * @param {Location} loc The location object from an AST node.","         * @param {int} line The line to check.","         * @param {int} column The column to check.","         * @returns {boolean} True if the line and column are after the location, false if not.","         * @private","         */","        function afterLoc(loc, line, column) {","            if (line > loc.end.line) {","                return true;","            }","            return line === loc.end.line && column > loc.end.column;","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            TemplateElement(node) {","                ignoredLocs.push(node.loc);","            },","","            \"Program:exit\"(node) {","","                /*","                 * At least one space followed by a tab","                 * or the reverse before non-tab/-space","                 * characters begin.","                 */","                let regex = /^(?=[\\t ]*(\\t | \\t))/;","                const lines = sourceCode.lines,","                    comments = sourceCode.getAllComments();","","                comments.forEach(comment => {","                    ignoredLocs.push(comment.loc);","                });","","                ignoredLocs.sort((first, second) => {","                    if (beforeLoc(first, second.start.line, second.start.column)) {","                        return 1;","                    }","","                    if (beforeLoc(second, first.start.line, second.start.column)) {","                        return -1;","                    }","","                    return 0;","                });","","                if (smartTabs) {","","                    /*","                     * At least one space followed by a tab","                     * before non-tab/-space characters begin.","                     */","                    regex = /^(?=[\\t ]* \\t)/;","                }","","                lines.forEach((line, i) => {","                    const match = regex.exec(line);","","                    if (match) {","                        const lineNumber = i + 1,","                            column = match.index + 1;","","                        for (let j = 0; j < ignoredLocs.length; j++) {","                            if (beforeLoc(ignoredLocs[j], lineNumber, column)) {","                                continue;","                            }","                            if (afterLoc(ignoredLocs[j], lineNumber, column)) {","                                continue;","                            }","","                            return;","                        }","","                        context.report({ node, loc: { line: lineNumber, column }, message: \"Mixed spaces and tabs.\" });","                    }","                });","            }","","        };","","    }","};",""],"l":{"11":1,"27":0,"29":0,"30":0,"32":0,"35":0,"36":0,"38":0,"49":1,"50":0,"51":0,"53":0,"64":1,"65":0,"66":0,"68":0,"75":0,"78":0,"88":0,"89":0,"92":0,"93":0,"96":0,"97":0,"98":0,"101":0,"102":0,"105":0,"108":0,"114":0,"117":0,"118":0,"120":0,"121":0,"124":0,"125":0,"126":0,"128":0,"129":0,"132":0,"135":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-multi-assign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-multi-assign.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":32},"end":{"line":30,"column":39}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":41,"column":2}},"2":{"start":{"line":29,"column":8},"end":{"line":38,"column":10}},"3":{"start":{"line":31,"column":16},"end":{"line":36,"column":17}},"4":{"start":{"line":32,"column":20},"end":{"line":35,"column":23}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":16},"end":{"line":31,"column":16}},{"start":{"line":31,"column":16},"end":{"line":31,"column":16}}]}},"code":["/**"," * @fileoverview Rule to check use of chained assignment expressions"," * @author Stewart Rand"," */","","\"use strict\";","","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow use of chained assignment expressions\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        schema: []","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            AssignmentExpression(node) {","                if ([\"AssignmentExpression\", \"VariableDeclarator\"].indexOf(node.parent.type) !== -1) {","                    context.report({","                        node,","                        message: \"Unexpected chained assignment.\"","                    });","                }","            }","        };","","    }","};",""],"l":{"13":1,"29":0,"31":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-multi-spaces.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-multi-spaces.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":20}}},"2":{"name":"isIndexInComment","line":72,"loc":{"start":{"line":72,"column":8},"end":{"line":72,"column":51}}},"3":{"name":"(anonymous_3)","line":93,"loc":{"start":{"line":93,"column":19},"end":{"line":93,"column":22}}},"4":{"name":"createFix","line":110,"loc":{"start":{"line":110,"column":16},"end":{"line":110,"column":58}}},"5":{"name":"(anonymous_5)","line":111,"loc":{"start":{"line":111,"column":27},"end":{"line":111,"column":43}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":147,"column":2}},"3":{"start":{"line":46,"column":8},"end":{"line":47,"column":41}},"4":{"start":{"line":48,"column":8},"end":{"line":49,"column":33}},"5":{"start":{"line":51,"column":8},"end":{"line":60,"column":9}},"6":{"start":{"line":52,"column":12},"end":{"line":58,"column":15}},"7":{"start":{"line":53,"column":16},"end":{"line":57,"column":17}},"8":{"start":{"line":54,"column":20},"end":{"line":54,"column":43}},"9":{"start":{"line":56,"column":20},"end":{"line":56,"column":43}},"10":{"start":{"line":59,"column":12},"end":{"line":59,"column":63}},"11":{"start":{"line":72,"column":8},"end":{"line":86,"column":9}},"12":{"start":{"line":73,"column":12},"end":{"line":83,"column":13}},"13":{"start":{"line":74,"column":16},"end":{"line":74,"column":59}},"14":{"start":{"line":76,"column":16},"end":{"line":82,"column":17}},"15":{"start":{"line":77,"column":20},"end":{"line":77,"column":32}},"16":{"start":{"line":78,"column":23},"end":{"line":82,"column":17}},"17":{"start":{"line":79,"column":20},"end":{"line":79,"column":39}},"18":{"start":{"line":81,"column":20},"end":{"line":81,"column":26}},"19":{"start":{"line":85,"column":12},"end":{"line":85,"column":25}},"20":{"start":{"line":92,"column":8},"end":{"line":144,"column":10}},"21":{"start":{"line":95,"column":16},"end":{"line":99,"column":92}},"22":{"start":{"line":100,"column":16},"end":{"line":100,"column":27}},"23":{"start":{"line":110,"column":16},"end":{"line":114,"column":17}},"24":{"start":{"line":111,"column":20},"end":{"line":113,"column":22}},"25":{"start":{"line":112,"column":24},"end":{"line":112,"column":102}},"26":{"start":{"line":116,"column":16},"end":{"line":142,"column":17}},"27":{"start":{"line":119,"column":20},"end":{"line":141,"column":21}},"28":{"start":{"line":121,"column":24},"end":{"line":121,"column":89}},"29":{"start":{"line":123,"column":24},"end":{"line":139,"column":25}},"30":{"start":{"line":124,"column":28},"end":{"line":124,"column":83}},"31":{"start":{"line":126,"column":28},"end":{"line":128,"column":29}},"32":{"start":{"line":127,"column":32},"end":{"line":127,"column":95}},"33":{"start":{"line":130,"column":28},"end":{"line":138,"column":29}},"34":{"start":{"line":131,"column":32},"end":{"line":137,"column":35}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"2":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":19}},{"start":{"line":51,"column":23},"end":{"line":51,"column":41}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":16}},{"start":{"line":53,"column":16},"end":{"line":53,"column":16}}]},"4":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":16},"end":{"line":76,"column":16}},{"start":{"line":76,"column":16},"end":{"line":76,"column":16}}]},"5":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":20},"end":{"line":76,"column":45}},{"start":{"line":76,"column":49},"end":{"line":76,"column":73}}]},"6":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":23},"end":{"line":78,"column":23}},{"start":{"line":78,"column":23},"end":{"line":78,"column":23}}]},"7":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":20},"end":{"line":119,"column":20}},{"start":{"line":119,"column":20},"end":{"line":119,"column":20}}]},"8":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":24},"end":{"line":123,"column":24}},{"start":{"line":123,"column":24},"end":{"line":123,"column":24}}]},"9":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":28},"end":{"line":126,"column":28}},{"start":{"line":126,"column":28},"end":{"line":126,"column":28}}]},"10":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":28},"end":{"line":130,"column":28}},{"start":{"line":130,"column":28},"end":{"line":130,"column":28}}]},"11":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":32},"end":{"line":130,"column":39}},{"start":{"line":130,"column":43},"end":{"line":130,"column":67}}]}},"code":["/**"," * @fileoverview Disallow use of multiple spaces."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow multiple spaces\",","            category: \"Best Practices\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    exceptions: {","                        type: \"object\",","                        patternProperties: {","                            \"^([A-Z][a-z]*)+$\": {","                                type: \"boolean\"","                            }","                        },","                        additionalProperties: false","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        // the index of the last comment that was checked","        const exceptions = { Property: true },","            options = context.options[0];","        let hasExceptions = true,","            lastCommentIndex = 0;","","        if (options && options.exceptions) {","            Object.keys(options.exceptions).forEach(key => {","                if (options.exceptions[key]) {","                    exceptions[key] = true;","                } else {","                    delete exceptions[key];","                }","            });","            hasExceptions = Object.keys(exceptions).length > 0;","        }","","        /**","         * Determines if a given source index is in a comment or not by checking","         * the index against the comment range. Since the check goes straight","         * through the file, once an index is passed a certain comment, we can","         * go to the next comment to check that.","         * @param {int} index The source index to check.","         * @param {ASTNode[]} comments An array of comment nodes.","         * @returns {boolean} True if the index is within a comment, false if not.","         * @private","         */","        function isIndexInComment(index, comments) {","            while (lastCommentIndex < comments.length) {","                const comment = comments[lastCommentIndex];","","                if (comment.range[0] <= index && index < comment.range[1]) {","                    return true;","                } else if (index > comment.range[1]) {","                    lastCommentIndex++;","                } else {","                    break;","                }","            }","","            return false;","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            Program() {","","                const sourceCode = context.getSourceCode(),","                    source = sourceCode.getText(),","                    allComments = sourceCode.getAllComments(),","                    JOINED_LINEBEAKS = Array.from(astUtils.LINEBREAKS).join(\"\"),","                    pattern = new RegExp(String.raw`[^ \\t${JOINED_LINEBEAKS}].? {2,}`, \"g\");  // note: repeating space","                let parent;","","","                /**","                 * Creates a fix function that removes the multiple spaces between the two tokens","                 * @param {RuleFixer} leftToken left token","                 * @param {RuleFixer} rightToken right token","                 * @returns {Function} fix function","                 * @private","                 */","                function createFix(leftToken, rightToken) {","                    return function(fixer) {","                        return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \" \");","                    };","                }","","                while (pattern.test(source)) {","","                    // do not flag anything inside of comments","                    if (!isIndexInComment(pattern.lastIndex, allComments)) {","","                        const token = sourceCode.getTokenByRangeStart(pattern.lastIndex);","","                        if (token) {","                            const previousToken = sourceCode.getTokenBefore(token);","","                            if (hasExceptions) {","                                parent = sourceCode.getNodeByRangeIndex(pattern.lastIndex - 1);","                            }","","                            if (!parent || !exceptions[parent.type]) {","                                context.report({","                                    node: token,","                                    loc: token.loc.start,","                                    message: \"Multiple spaces found before '{{value}}'.\",","                                    data: { value: token.value },","                                    fix: createFix(previousToken, token)","                                });","                            }","                        }","","                    }","                }","            }","        };","","    }","};",""],"l":{"8":1,"14":1,"46":0,"48":0,"51":0,"52":0,"53":0,"54":0,"56":0,"59":0,"72":1,"73":0,"74":0,"76":0,"77":0,"78":0,"79":0,"81":0,"85":0,"92":0,"95":0,"100":0,"110":1,"111":0,"112":0,"116":0,"119":0,"121":0,"123":0,"124":0,"126":0,"127":0,"130":0,"131":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-multi-str.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-multi-str.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":20}}},"2":{"name":"isJSXElement","line":37,"loc":{"start":{"line":37,"column":8},"end":{"line":37,"column":36}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":19},"end":{"line":47,"column":26}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":55,"column":2}},"3":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"4":{"start":{"line":38,"column":12},"end":{"line":38,"column":50}},"5":{"start":{"line":45,"column":8},"end":{"line":52,"column":10}},"6":{"start":{"line":48,"column":16},"end":{"line":50,"column":17}},"7":{"start":{"line":49,"column":20},"end":{"line":49,"column":119}}},"branchMap":{"1":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":16},"end":{"line":48,"column":16}},{"start":{"line":48,"column":16},"end":{"line":48,"column":16}}]},"2":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":20},"end":{"line":48,"column":61}},{"start":{"line":48,"column":65},"end":{"line":48,"column":91}}]}},"code":["/**"," * @fileoverview Rule to flag when using multiline strings"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow multiline strings\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Determines if a given node is part of JSX syntax.","         * @param {ASTNode} node The node to check.","         * @returns {boolean} True if the node is a JSX node, false if not.","         * @private","         */","        function isJSXElement(node) {","            return node.type.indexOf(\"JSX\") === 0;","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","","            Literal(node) {","                if (astUtils.LINEBREAK_MATCHER.test(node.raw) && !isJSXElement(node.parent)) {","                    context.report({ node, message: \"Multiline support is limited to browsers supporting ES5 only.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"37":1,"38":0,"45":0,"48":0,"49":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-multiple-empty-lines.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-multiple-empty-lines.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":45,"loc":{"start":{"line":45,"column":10},"end":{"line":45,"column":20}}},"2":{"name":"(anonymous_2)","line":69,"loc":{"start":{"line":69,"column":27},"end":{"line":69,"column":34}}},"3":{"name":"(anonymous_3)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":33}}},"4":{"name":"(anonymous_4)","line":113,"loc":{"start":{"line":113,"column":35},"end":{"line":113,"column":43}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":127,"column":2}},"2":{"start":{"line":48,"column":8},"end":{"line":50,"column":25}},"3":{"start":{"line":52,"column":8},"end":{"line":56,"column":9}},"4":{"start":{"line":53,"column":12},"end":{"line":53,"column":41}},"5":{"start":{"line":54,"column":12},"end":{"line":54,"column":104}},"6":{"start":{"line":55,"column":12},"end":{"line":55,"column":104}},"7":{"start":{"line":58,"column":8},"end":{"line":58,"column":51}},"8":{"start":{"line":61,"column":8},"end":{"line":61,"column":129}},"9":{"start":{"line":62,"column":8},"end":{"line":62,"column":47}},"10":{"start":{"line":68,"column":8},"end":{"line":125,"column":10}},"11":{"start":{"line":70,"column":16},"end":{"line":76,"column":19}},"12":{"start":{"line":73,"column":20},"end":{"line":75,"column":21}},"13":{"start":{"line":74,"column":24},"end":{"line":74,"column":62}},"14":{"start":{"line":79,"column":16},"end":{"line":123,"column":26}},"15":{"start":{"line":83,"column":24},"end":{"line":85,"column":25}},"16":{"start":{"line":84,"column":28},"end":{"line":84,"column":64}},"17":{"start":{"line":86,"column":24},"end":{"line":86,"column":51}},"18":{"start":{"line":94,"column":24},"end":{"line":94,"column":48}},"19":{"start":{"line":96,"column":24},"end":{"line":105,"column":25}},"20":{"start":{"line":97,"column":28},"end":{"line":97,"column":111}},"21":{"start":{"line":98,"column":28},"end":{"line":98,"column":48}},"22":{"start":{"line":99,"column":31},"end":{"line":105,"column":25}},"23":{"start":{"line":100,"column":28},"end":{"line":100,"column":105}},"24":{"start":{"line":101,"column":28},"end":{"line":101,"column":48}},"25":{"start":{"line":103,"column":28},"end":{"line":103,"column":97}},"26":{"start":{"line":104,"column":28},"end":{"line":104,"column":45}},"27":{"start":{"line":107,"column":24},"end":{"line":120,"column":25}},"28":{"start":{"line":108,"column":28},"end":{"line":119,"column":31}},"29":{"start":{"line":114,"column":36},"end":{"line":117,"column":39}},"30":{"start":{"line":122,"column":24},"end":{"line":122,"column":42}}},"branchMap":{"1":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"2":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":72},"end":{"line":54,"column":97}},{"start":{"line":54,"column":100},"end":{"line":54,"column":103}}]},"3":{"line":55,"type":"cond-expr","locations":[{"start":{"line":55,"column":72},"end":{"line":55,"column":97}},{"start":{"line":55,"column":100},"end":{"line":55,"column":103}}]},"4":{"line":61,"type":"cond-expr","locations":[{"start":{"line":61,"column":80},"end":{"line":61,"column":109}},{"start":{"line":61,"column":112},"end":{"line":61,"column":128}}]},"5":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":24},"end":{"line":83,"column":24}},{"start":{"line":83,"column":24},"end":{"line":83,"column":24}}]},"6":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":28},"end":{"line":83,"column":39}},{"start":{"line":83,"column":43},"end":{"line":83,"column":78}}]},"7":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":24},"end":{"line":96,"column":24}},{"start":{"line":96,"column":24},"end":{"line":96,"column":24}}]},"8":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":31},"end":{"line":99,"column":31}},{"start":{"line":99,"column":31},"end":{"line":99,"column":31}}]},"9":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":24},"end":{"line":107,"column":24}},{"start":{"line":107,"column":24},"end":{"line":107,"column":24}}]},"10":{"line":112,"type":"cond-expr","locations":[{"start":{"line":112,"column":93},"end":{"line":112,"column":99}},{"start":{"line":112,"column":102},"end":{"line":112,"column":109}}]}},"code":["/**"," * @fileoverview Disallows multiple blank lines."," * implementation adapted from the no-trailing-spaces rule."," * @author Greg Cochard"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow multiple empty lines\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    max: {","                        type: \"integer\",","                        minimum: 0","                    },","                    maxEOF: {","                        type: \"integer\",","                        minimum: 0","                    },","                    maxBOF: {","                        type: \"integer\",","                        minimum: 0","                    }","                },","                required: [\"max\"],","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        // Use options.max or 2 as default","        let max = 2,","            maxEOF = max,","            maxBOF = max;","","        if (context.options.length) {","            max = context.options[0].max;","            maxEOF = typeof context.options[0].maxEOF !== \"undefined\" ? context.options[0].maxEOF : max;","            maxBOF = typeof context.options[0].maxBOF !== \"undefined\" ? context.options[0].maxBOF : max;","        }","","        const sourceCode = context.getSourceCode();","","        // Swallow the final newline, as some editors add it automatically and we don't want it to cause an issue","        const allLines = sourceCode.lines[sourceCode.lines.length - 1] === \"\" ? sourceCode.lines.slice(0, -1) : sourceCode.lines;","        const templateLiteralLines = new Set();","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            TemplateLiteral(node) {","                node.quasis.forEach(literalPart => {","","                    // Empty lines have a semantic meaning if they're inside template literals. Don't count these as empty lines.","                    for (let ignoredLine = literalPart.loc.start.line; ignoredLine < literalPart.loc.end.line; ignoredLine++) {","                        templateLiteralLines.add(ignoredLine);","                    }","                });","            },","            \"Program:exit\"(node) {","                return allLines","","                    // Given a list of lines, first get a list of line numbers that are non-empty.","                    .reduce((nonEmptyLineNumbers, line, index) => {","                        if (line.trim() || templateLiteralLines.has(index + 1)) {","                            nonEmptyLineNumbers.push(index + 1);","                        }","                        return nonEmptyLineNumbers;","                    }, [])","","                    // Add a value at the end to allow trailing empty lines to be checked.","                    .concat(allLines.length + 1)","","                    // Given two line numbers of non-empty lines, report the lines between if the difference is too large.","                    .reduce((lastLineNumber, lineNumber) => {","                        let message, maxAllowed;","","                        if (lastLineNumber === 0) {","                            message = \"Too many blank lines at the beginning of file. Max of {{max}} allowed.\";","                            maxAllowed = maxBOF;","                        } else if (lineNumber === allLines.length + 1) {","                            message = \"Too many blank lines at the end of file. Max of {{max}} allowed.\";","                            maxAllowed = maxEOF;","                        } else {","                            message = \"More than {{max}} blank {{pluralizedLines}} not allowed.\";","                            maxAllowed = max;","                        }","","                        if (lineNumber - lastLineNumber - 1 > maxAllowed) {","                            context.report({","                                node,","                                loc: { start: { line: lastLineNumber + 1, column: 0 }, end: { line: lineNumber, column: 0 } },","                                message,","                                data: { max: maxAllowed, pluralizedLines: maxAllowed === 1 ? \"line\" : \"lines\" },","                                fix(fixer) {","                                    return fixer.removeRange([","                                        sourceCode.getIndexFromLoc({ line: lastLineNumber + 1, column: 0 }),","                                        sourceCode.getIndexFromLoc({ line: lineNumber - maxAllowed, column: 0 })","                                    ]);","                                }","                            });","                        }","","                        return lineNumber;","                    }, 0);","            }","        };","    }","};",""],"l":{"12":1,"48":0,"52":0,"53":0,"54":0,"55":0,"58":0,"61":0,"62":0,"68":0,"70":0,"73":0,"74":0,"79":0,"83":0,"84":0,"86":0,"94":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"103":0,"104":0,"107":0,"108":0,"114":0,"122":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-native-reassign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-native-reassign.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":39,"loc":{"start":{"line":39,"column":10},"end":{"line":39,"column":20}}},"2":{"name":"checkReference","line":50,"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":62}}},"3":{"name":"checkVariable","line":73,"loc":{"start":{"line":73,"column":8},"end":{"line":73,"column":41}}},"4":{"name":"(anonymous_4)","line":80,"loc":{"start":{"line":80,"column":19},"end":{"line":80,"column":22}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":87,"column":2}},"2":{"start":{"line":40,"column":8},"end":{"line":40,"column":42}},"3":{"start":{"line":41,"column":8},"end":{"line":41,"column":63}},"4":{"start":{"line":50,"column":8},"end":{"line":66,"column":9}},"5":{"start":{"line":51,"column":12},"end":{"line":51,"column":52}},"6":{"start":{"line":53,"column":12},"end":{"line":65,"column":13}},"7":{"start":{"line":60,"column":16},"end":{"line":64,"column":19}},"8":{"start":{"line":73,"column":8},"end":{"line":77,"column":9}},"9":{"start":{"line":74,"column":12},"end":{"line":76,"column":13}},"10":{"start":{"line":75,"column":16},"end":{"line":75,"column":60}},"11":{"start":{"line":79,"column":8},"end":{"line":85,"column":10}},"12":{"start":{"line":81,"column":16},"end":{"line":81,"column":55}},"13":{"start":{"line":83,"column":16},"end":{"line":83,"column":61}}},"branchMap":{"1":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":28},"end":{"line":41,"column":34}},{"start":{"line":41,"column":38},"end":{"line":41,"column":55}},{"start":{"line":41,"column":60},"end":{"line":41,"column":62}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":12}},{"start":{"line":53,"column":12},"end":{"line":53,"column":12}}]},"3":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":40}},{"start":{"line":54,"column":16},"end":{"line":54,"column":35}},{"start":{"line":58,"column":17},"end":{"line":58,"column":28}},{"start":{"line":58,"column":32},"end":{"line":58,"column":79}}]},"4":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":12},"end":{"line":74,"column":12}},{"start":{"line":74,"column":12},"end":{"line":74,"column":12}}]},"5":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":16},"end":{"line":74,"column":44}},{"start":{"line":74,"column":48},"end":{"line":74,"column":88}}]}},"code":["/**"," * @fileoverview Rule to disallow assignments to native objects or read-only global variables"," * @author Ilya Volodin"," * @deprecated in ESLint v3.3.0"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow assignments to native objects or read-only global variables\",","            category: \"Best Practices\",","            recommended: false,","            replacedBy: [\"no-global-assign\"]","        },","","        deprecated: true,","","        schema: [","            {","                type: \"object\",","                properties: {","                    exceptions: {","                        type: \"array\",","                        items: { type: \"string\" },","                        uniqueItems: true","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const config = context.options[0];","        const exceptions = (config && config.exceptions) || [];","","        /**","         * Reports write references.","         * @param {Reference} reference - A reference to check.","         * @param {int} index - The index of the reference in the references.","         * @param {Reference[]} references - The array that the reference belongs to.","         * @returns {void}","         */","        function checkReference(reference, index, references) {","            const identifier = reference.identifier;","","            if (reference.init === false &&","                reference.isWrite() &&","","                // Destructuring assignments can have multiple default value,","                // so possibly there are multiple writeable references for the same identifier.","                (index === 0 || references[index - 1].identifier !== identifier)","            ) {","                context.report({","                    node: identifier,","                    message: \"Read-only global '{{name}}' should not be modified.\",","                    data: identifier","                });","            }","        }","","        /**","         * Reports write references if a given variable is read-only builtin.","         * @param {Variable} variable - A variable to check.","         * @returns {void}","         */","        function checkVariable(variable) {","            if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {","                variable.references.forEach(checkReference);","            }","        }","","        return {","            Program() {","                const globalScope = context.getScope();","","                globalScope.variables.forEach(checkVariable);","            }","        };","    }","};",""],"l":{"13":1,"40":0,"41":0,"50":1,"51":0,"53":0,"60":0,"73":1,"74":0,"75":0,"79":0,"81":0,"83":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-negated-condition.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-negated-condition.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"hasElseWithoutCondition","line":30,"loc":{"start":{"line":30,"column":8},"end":{"line":30,"column":47}}},"3":{"name":"isNegatedUnaryExpression","line":40,"loc":{"start":{"line":40,"column":8},"end":{"line":40,"column":48}}},"4":{"name":"isNegatedBinaryExpression","line":50,"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":49}}},"5":{"name":"isNegatedIf","line":61,"loc":{"start":{"line":61,"column":8},"end":{"line":61,"column":35}}},"6":{"name":"(anonymous_6)","line":66,"loc":{"start":{"line":66,"column":23},"end":{"line":66,"column":30}}},"7":{"name":"(anonymous_7)","line":75,"loc":{"start":{"line":75,"column":33},"end":{"line":75,"column":40}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":82,"column":2}},"2":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"3":{"start":{"line":31,"column":12},"end":{"line":31,"column":75}},"4":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"5":{"start":{"line":41,"column":12},"end":{"line":41,"column":76}},"6":{"start":{"line":50,"column":8},"end":{"line":53,"column":9}},"7":{"start":{"line":51,"column":12},"end":{"line":52,"column":68}},"8":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"9":{"start":{"line":62,"column":12},"end":{"line":62,"column":95}},"10":{"start":{"line":65,"column":8},"end":{"line":80,"column":10}},"11":{"start":{"line":67,"column":16},"end":{"line":69,"column":17}},"12":{"start":{"line":68,"column":20},"end":{"line":68,"column":27}},"13":{"start":{"line":71,"column":16},"end":{"line":73,"column":17}},"14":{"start":{"line":72,"column":20},"end":{"line":72,"column":87}},"15":{"start":{"line":76,"column":16},"end":{"line":78,"column":17}},"16":{"start":{"line":77,"column":20},"end":{"line":77,"column":87}}},"branchMap":{"1":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":19},"end":{"line":31,"column":33}},{"start":{"line":31,"column":37},"end":{"line":31,"column":74}}]},"2":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":19},"end":{"line":41,"column":50}},{"start":{"line":41,"column":54},"end":{"line":41,"column":75}}]},"3":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":19},"end":{"line":51,"column":51}},{"start":{"line":52,"column":17},"end":{"line":52,"column":39}},{"start":{"line":52,"column":43},"end":{"line":52,"column":66}}]},"4":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":19},"end":{"line":62,"column":54}},{"start":{"line":62,"column":58},"end":{"line":62,"column":94}}]},"5":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":16},"end":{"line":67,"column":16}},{"start":{"line":67,"column":16},"end":{"line":67,"column":16}}]},"6":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":16},"end":{"line":71,"column":16}},{"start":{"line":71,"column":16},"end":{"line":71,"column":16}}]},"7":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":16},"end":{"line":76,"column":16}},{"start":{"line":76,"column":16},"end":{"line":76,"column":16}}]}},"code":["/**"," * @fileoverview Rule to disallow a negated condition"," * @author Alberto Rodríguez"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow negated conditions\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Determines if a given node is an if-else without a condition on the else","         * @param {ASTNode} node The node to check.","         * @returns {boolean} True if the node has an else without an if.","         * @private","         */","        function hasElseWithoutCondition(node) {","            return node.alternate && node.alternate.type !== \"IfStatement\";","        }","","        /**","         * Determines if a given node is a negated unary expression","         * @param {Object} test The test object to check.","         * @returns {boolean} True if the node is a negated unary expression.","         * @private","         */","        function isNegatedUnaryExpression(test) {","            return test.type === \"UnaryExpression\" && test.operator === \"!\";","        }","","        /**","         * Determines if a given node is a negated binary expression","         * @param {Test} test The test to check.","         * @returns {boolean} True if the node is a negated binary expression.","         * @private","         */","        function isNegatedBinaryExpression(test) {","            return test.type === \"BinaryExpression\" &&","                (test.operator === \"!=\" || test.operator === \"!==\");","        }","","        /**","         * Determines if a given node has a negated if expression","         * @param {ASTNode} node The node to check.","         * @returns {boolean} True if the node has a negated if expression.","         * @private","         */","        function isNegatedIf(node) {","            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);","        }","","        return {","            IfStatement(node) {","                if (!hasElseWithoutCondition(node)) {","                    return;","                }","","                if (isNegatedIf(node)) {","                    context.report({ node, message: \"Unexpected negated condition.\" });","                }","            },","            ConditionalExpression(node) {","                if (isNegatedIf(node)) {","                    context.report({ node, message: \"Unexpected negated condition.\" });","                }","            }","        };","    }","};",""],"l":{"11":1,"30":1,"31":0,"40":1,"41":0,"50":1,"51":0,"61":1,"62":0,"65":0,"67":0,"68":0,"71":0,"72":0,"76":0,"77":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-negated-in-lhs.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-negated-in-lhs.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":10},"end":{"line":26,"column":20}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":28},"end":{"line":30,"column":35}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":38,"column":2}},"2":{"start":{"line":28,"column":8},"end":{"line":35,"column":10}},"3":{"start":{"line":31,"column":16},"end":{"line":33,"column":17}},"4":{"start":{"line":32,"column":20},"end":{"line":32,"column":104}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":16},"end":{"line":31,"column":16}},{"start":{"line":31,"column":16},"end":{"line":31,"column":16}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":20},"end":{"line":31,"column":42}},{"start":{"line":31,"column":46},"end":{"line":31,"column":82}},{"start":{"line":31,"column":86},"end":{"line":31,"column":112}}]}},"code":["/**"," * @fileoverview A rule to disallow negated left operands of the `in` operator"," * @author Michael Ficarra"," * @deprecated in ESLint v3.3.0"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow negating the left operand in `in` expressions\",","            category: \"Possible Errors\",","            recommended: false,","            replacedBy: [\"no-unsafe-negation\"]","        },","        deprecated: true,","","        schema: []","    },","","    create(context) {","","        return {","","            BinaryExpression(node) {","                if (node.operator === \"in\" && node.left.type === \"UnaryExpression\" && node.left.operator === \"!\") {","                    context.report({ node, message: \"The 'in' expression's left operand is negated.\" });","                }","            }","        };","","    }","};",""],"l":{"13":1,"28":0,"31":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-nested-ternary.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-nested-ternary.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":33},"end":{"line":26,"column":40}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":34,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":32,"column":10}},"3":{"start":{"line":27,"column":16},"end":{"line":30,"column":17}},"4":{"start":{"line":29,"column":20},"end":{"line":29,"column":90}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":16},"end":{"line":27,"column":16}},{"start":{"line":27,"column":16},"end":{"line":27,"column":16}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":20},"end":{"line":27,"column":67}},{"start":{"line":28,"column":24},"end":{"line":28,"column":72}}]}},"code":["/**"," * @fileoverview Rule to flag nested ternary expressions"," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow nested ternary expressions\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","            ConditionalExpression(node) {","                if (node.alternate.type === \"ConditionalExpression\" ||","                        node.consequent.type === \"ConditionalExpression\") {","                    context.report({ node, message: \"Do not nest ternary expressions.\" });","                }","            }","        };","    }","};",""],"l":{"12":1,"25":0,"27":0,"29":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-func.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-func.js","s":{"1":1,"2":1,"3":0,"4":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"report","line":35,"loc":{"start":{"line":35,"column":8},"end":{"line":35,"column":30}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":45,"column":2}},"2":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"3":{"start":{"line":36,"column":12},"end":{"line":36,"column":83}},"4":{"start":{"line":39,"column":8},"end":{"line":42,"column":10}}},"branchMap":{},"code":["/**"," * @fileoverview Rule to flag when using new Function"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `new` operators with the `Function` object\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Reports a node.","         * @param {ASTNode} node The node to report","         * @returns {void}","         * @private","         */","        function report(node) {","            context.report({ node, message: \"The Function constructor is eval.\" });","        }","","        return {","            \"NewExpression[callee.name = 'Function']\": report,","            \"CallExpression[callee.name = 'Function']\": report","        };","","    }","};",""],"l":{"12":1,"35":1,"36":0,"39":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-object.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-object.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":25},"end":{"line":27,"column":32}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":35,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":32,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":30,"column":17}},"4":{"start":{"line":29,"column":20},"end":{"line":29,"column":104}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":16},"end":{"line":28,"column":16}},{"start":{"line":28,"column":16},"end":{"line":28,"column":16}}]}},"code":["/**"," * @fileoverview A rule to disallow calls to the Object constructor"," * @author Matt DuVall <http://www.mattduvall.com/>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `Object` constructors\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            NewExpression(node) {","                if (node.callee.name === \"Object\") {","                    context.report({ node, message: \"The object literal notation {} is preferrable.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"28":0,"29":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-require.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-require.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":25},"end":{"line":27,"column":32}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":35,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":32,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":30,"column":17}},"4":{"start":{"line":29,"column":20},"end":{"line":29,"column":93}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":16},"end":{"line":28,"column":16}},{"start":{"line":28,"column":16},"end":{"line":28,"column":16}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":20},"end":{"line":28,"column":53}},{"start":{"line":28,"column":57},"end":{"line":28,"column":87}}]}},"code":["/**"," * @fileoverview Rule to disallow use of new operator with the `require` function"," * @author Wil Moore III"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `new` operators with calls to `require`\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            NewExpression(node) {","                if (node.callee.type === \"Identifier\" && node.callee.name === \"require\") {","                    context.report({ node, message: \"Unexpected use of new with require.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"28":0,"29":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-symbol.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-symbol.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":26},"end":{"line":26,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":43,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":40,"column":10}},"3":{"start":{"line":27,"column":16},"end":{"line":27,"column":55}},"4":{"start":{"line":28,"column":16},"end":{"line":28,"column":63}},"5":{"start":{"line":30,"column":16},"end":{"line":38,"column":17}},"6":{"start":{"line":31,"column":20},"end":{"line":37,"column":23}},"7":{"start":{"line":32,"column":24},"end":{"line":32,"column":52}},"8":{"start":{"line":34,"column":24},"end":{"line":36,"column":25}},"9":{"start":{"line":35,"column":28},"end":{"line":35,"column":109}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":16}},{"start":{"line":30,"column":16},"end":{"line":30,"column":16}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":20},"end":{"line":30,"column":28}},{"start":{"line":30,"column":32},"end":{"line":30,"column":58}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":24},"end":{"line":34,"column":24}},{"start":{"line":34,"column":24},"end":{"line":34,"column":24}}]},"4":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":28},"end":{"line":34,"column":39}},{"start":{"line":34,"column":43},"end":{"line":34,"column":79}}]}},"code":["/**"," * @fileoverview Rule to disallow use of the new operator with the `Symbol` object"," * @author Alberto Rodríguez"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `new` operators with the `Symbol` object\",","            category: \"ECMAScript 6\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        return {","            \"Program:exit\"() {","                const globalScope = context.getScope();","                const variable = globalScope.set.get(\"Symbol\");","","                if (variable && variable.defs.length === 0) {","                    variable.references.forEach(ref => {","                        const node = ref.identifier;","","                        if (node.parent && node.parent.type === \"NewExpression\") {","                            context.report({ node, message: \"`Symbol` cannot be called as a constructor.\" });","                        }","                    });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"27":0,"28":0,"30":0,"31":0,"32":0,"34":0,"35":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-wrappers.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new-wrappers.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":25},"end":{"line":27,"column":32}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":37,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":34,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":28,"column":87}},"4":{"start":{"line":30,"column":16},"end":{"line":32,"column":17}},"5":{"start":{"line":31,"column":20},"end":{"line":31,"column":125}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":16}},{"start":{"line":30,"column":16},"end":{"line":30,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag when using constructor for wrapper objects"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `new` operators with the `String`, `Number`, and `Boolean` objects\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            NewExpression(node) {","                const wrapperObjects = [\"String\", \"Number\", \"Boolean\", \"Math\", \"JSON\"];","","                if (wrapperObjects.indexOf(node.callee.name) > -1) {","                    context.report({ node, message: \"Do not use {{fn}} as a constructor.\", data: { fn: node.callee.name } });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"28":0,"30":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-new.js","s":{"1":1,"2":0,"3":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":10},"end":{"line":24,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":49},"end":{"line":27,"column":56}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":33,"column":2}},"2":{"start":{"line":26,"column":8},"end":{"line":30,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":28,"column":101}}},"branchMap":{},"code":["/**"," * @fileoverview Rule to flag statements with function invocation preceded by"," * \"new\" and not part of assignment"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `new` operators outside of assignments or comparisons\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","            \"ExpressionStatement > NewExpression\"(node) {","                context.report({ node: node.parent, message: \"Do not use 'new' for side effects.\" });","            }","        };","","    }","};",""],"l":{"13":1,"26":0,"28":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-obj-calls.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-obj-calls.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":26},"end":{"line":26,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":39,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":36,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":34,"column":17}},"4":{"start":{"line":29,"column":20},"end":{"line":29,"column":50}},"5":{"start":{"line":31,"column":20},"end":{"line":33,"column":21}},"6":{"start":{"line":32,"column":24},"end":{"line":32,"column":107}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":16},"end":{"line":28,"column":16}},{"start":{"line":28,"column":16},"end":{"line":28,"column":16}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":20},"end":{"line":31,"column":20}},{"start":{"line":31,"column":20},"end":{"line":31,"column":20}}]},"3":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":24},"end":{"line":31,"column":39}},{"start":{"line":31,"column":43},"end":{"line":31,"column":58}},{"start":{"line":31,"column":62},"end":{"line":31,"column":80}}]}},"code":["/**"," * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function"," * @author James Allardice"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow calling global object properties as functions\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        return {","            CallExpression(node) {","","                if (node.callee.type === \"Identifier\") {","                    const name = node.callee.name;","","                    if (name === \"Math\" || name === \"JSON\" || name === \"Reflect\") {","                        context.report({ node, message: \"'{{name}}' is not a function.\", data: { name } });","                    }","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"28":0,"29":0,"31":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-octal-escape.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-octal-escape.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":19},"end":{"line":27,"column":26}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":47,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":44,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":30,"column":17}},"4":{"start":{"line":29,"column":20},"end":{"line":29,"column":27}},"5":{"start":{"line":32,"column":16},"end":{"line":32,"column":103}},"6":{"start":{"line":34,"column":16},"end":{"line":41,"column":17}},"7":{"start":{"line":35,"column":20},"end":{"line":35,"column":48}},"8":{"start":{"line":38,"column":20},"end":{"line":40,"column":21}},"9":{"start":{"line":39,"column":24},"end":{"line":39,"column":143}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":16},"end":{"line":28,"column":16}},{"start":{"line":28,"column":16},"end":{"line":28,"column":16}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":16},"end":{"line":34,"column":16}},{"start":{"line":34,"column":16},"end":{"line":34,"column":16}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":20},"end":{"line":38,"column":20}},{"start":{"line":38,"column":20},"end":{"line":38,"column":20}}]},"4":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":24},"end":{"line":38,"column":40}},{"start":{"line":38,"column":44},"end":{"line":38,"column":75}}]}},"code":["/**"," * @fileoverview Rule to flag octal escape sequences in string literals."," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow octal escape sequences in string literals\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            Literal(node) {","                if (typeof node.value !== \"string\") {","                    return;","                }","","                const match = node.raw.match(/^([^\\\\]|\\\\[^0-7])*\\\\([0-3][0-7]{1,2}|[4-7][0-7]|[0-7])/);","","                if (match) {","                    const octalDigit = match[2];","","                    // \\0 is actually not considered an octal","                    if (match[2] !== \"0\" || typeof match[3] !== \"undefined\") {","                        context.report({ node, message: \"Don't use octal: '\\\\{{octalDigit}}'. Use '\\\\u....' instead.\", data: { octalDigit } });","                    }","                }","            }","","        };","","    }","};",""],"l":{"12":1,"25":0,"28":0,"29":0,"32":0,"34":0,"35":0,"38":0,"39":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-octal.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-octal.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":19},"end":{"line":27,"column":26}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":35,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":32,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":30,"column":17}},"4":{"start":{"line":29,"column":20},"end":{"line":29,"column":92}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":16},"end":{"line":28,"column":16}},{"start":{"line":28,"column":16},"end":{"line":28,"column":16}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":20},"end":{"line":28,"column":50}},{"start":{"line":28,"column":54},"end":{"line":28,"column":78}}]}},"code":["/**"," * @fileoverview Rule to flag when initializing octal literal"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow octal literals\",","            category: \"Best Practices\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        return {","","            Literal(node) {","                if (typeof node.value === \"number\" && /^0[0-7]/.test(node.raw)) {","                    context.report({ node, message: \"Octal literals should not be used.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"28":0,"29":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-param-reassign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-param-reassign.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":1,"38":0,"39":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0,0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":54,"loc":{"start":{"line":54,"column":10},"end":{"line":54,"column":20}}},"2":{"name":"isModifyingProp","line":63,"loc":{"start":{"line":63,"column":8},"end":{"line":63,"column":44}}},"3":{"name":"checkReference","line":124,"loc":{"start":{"line":124,"column":8},"end":{"line":124,"column":62}}},"4":{"name":"checkVariable","line":147,"loc":{"start":{"line":147,"column":8},"end":{"line":147,"column":41}}},"5":{"name":"checkForFunction","line":158,"loc":{"start":{"line":158,"column":8},"end":{"line":158,"column":40}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":85}},"2":{"start":{"line":13,"column":0},"end":{"line":171,"column":2}},"3":{"start":{"line":55,"column":8},"end":{"line":55,"column":78}},"4":{"start":{"line":56,"column":8},"end":{"line":56,"column":124}},"5":{"start":{"line":63,"column":8},"end":{"line":115,"column":9}},"6":{"start":{"line":64,"column":12},"end":{"line":64,"column":44}},"7":{"start":{"line":65,"column":12},"end":{"line":65,"column":37}},"8":{"start":{"line":67,"column":12},"end":{"line":112,"column":13}},"9":{"start":{"line":68,"column":16},"end":{"line":108,"column":17}},"10":{"start":{"line":72,"column":24},"end":{"line":72,"column":52}},"11":{"start":{"line":76,"column":24},"end":{"line":76,"column":36}},"12":{"start":{"line":80,"column":24},"end":{"line":82,"column":25}},"13":{"start":{"line":81,"column":28},"end":{"line":81,"column":40}},"14":{"start":{"line":83,"column":24},"end":{"line":83,"column":30}},"15":{"start":{"line":87,"column":24},"end":{"line":89,"column":25}},"16":{"start":{"line":88,"column":28},"end":{"line":88,"column":41}},"17":{"start":{"line":90,"column":24},"end":{"line":90,"column":30}},"18":{"start":{"line":94,"column":24},"end":{"line":96,"column":25}},"19":{"start":{"line":95,"column":28},"end":{"line":95,"column":41}},"20":{"start":{"line":97,"column":24},"end":{"line":97,"column":30}},"21":{"start":{"line":101,"column":24},"end":{"line":103,"column":25}},"22":{"start":{"line":102,"column":28},"end":{"line":102,"column":41}},"23":{"start":{"line":105,"column":24},"end":{"line":105,"column":30}},"24":{"start":{"line":110,"column":16},"end":{"line":110,"column":30}},"25":{"start":{"line":111,"column":16},"end":{"line":111,"column":37}},"26":{"start":{"line":114,"column":12},"end":{"line":114,"column":25}},"27":{"start":{"line":124,"column":8},"end":{"line":140,"column":9}},"28":{"start":{"line":125,"column":12},"end":{"line":125,"column":52}},"29":{"start":{"line":127,"column":12},"end":{"line":139,"column":13}},"30":{"start":{"line":134,"column":16},"end":{"line":138,"column":17}},"31":{"start":{"line":135,"column":20},"end":{"line":135,"column":147}},"32":{"start":{"line":136,"column":23},"end":{"line":138,"column":17}},"33":{"start":{"line":137,"column":20},"end":{"line":137,"column":159}},"34":{"start":{"line":147,"column":8},"end":{"line":151,"column":9}},"35":{"start":{"line":148,"column":12},"end":{"line":150,"column":13}},"36":{"start":{"line":149,"column":16},"end":{"line":149,"column":60}},"37":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"38":{"start":{"line":159,"column":12},"end":{"line":159,"column":70}},"39":{"start":{"line":162,"column":8},"end":{"line":168,"column":10}}},"branchMap":{"1":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":22},"end":{"line":55,"column":40}},{"start":{"line":55,"column":44},"end":{"line":55,"column":77}}]},"2":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":46},"end":{"line":56,"column":64}},{"start":{"line":56,"column":68},"end":{"line":56,"column":117}},{"start":{"line":56,"column":121},"end":{"line":56,"column":123}}]},"3":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":19},"end":{"line":67,"column":25}},{"start":{"line":67,"column":29},"end":{"line":67,"column":63}}]},"4":{"line":68,"type":"switch","locations":[{"start":{"line":71,"column":20},"end":{"line":72,"column":52}},{"start":{"line":75,"column":20},"end":{"line":76,"column":36}},{"start":{"line":79,"column":20},"end":{"line":83,"column":30}},{"start":{"line":86,"column":20},"end":{"line":90,"column":30}},{"start":{"line":93,"column":20},"end":{"line":97,"column":30}},{"start":{"line":100,"column":20},"end":{"line":105,"column":30}}]},"5":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":24},"end":{"line":80,"column":24}},{"start":{"line":80,"column":24},"end":{"line":80,"column":24}}]},"6":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":24},"end":{"line":87,"column":24}},{"start":{"line":87,"column":24},"end":{"line":87,"column":24}}]},"7":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":24},"end":{"line":94,"column":24}},{"start":{"line":94,"column":24},"end":{"line":94,"column":24}}]},"8":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":24},"end":{"line":101,"column":24}},{"start":{"line":101,"column":24},"end":{"line":101,"column":24}}]},"9":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":12},"end":{"line":127,"column":12}},{"start":{"line":127,"column":12},"end":{"line":127,"column":12}}]},"10":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":16},"end":{"line":127,"column":26}},{"start":{"line":128,"column":16},"end":{"line":128,"column":31}},{"start":{"line":132,"column":17},"end":{"line":132,"column":28}},{"start":{"line":132,"column":32},"end":{"line":132,"column":79}}]},"11":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":16}},{"start":{"line":134,"column":16},"end":{"line":134,"column":16}}]},"12":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":23},"end":{"line":136,"column":23}},{"start":{"line":136,"column":23},"end":{"line":136,"column":23}}]},"13":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":27},"end":{"line":136,"column":32}},{"start":{"line":136,"column":36},"end":{"line":136,"column":62}},{"start":{"line":136,"column":66},"end":{"line":136,"column":127}}]},"14":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":12},"end":{"line":148,"column":12}},{"start":{"line":148,"column":12},"end":{"line":148,"column":12}}]}},"code":["/**"," * @fileoverview Disallow reassignment of function parameters."," * @author Nat Burns"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const stopNodePattern = /(?:Statement|Declaration|Function(?:Expression)?|Program)$/;","","module.exports = {","    meta: {","        docs: {","            description: \"disallow reassigning `function` parameters\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        type: \"object\",","                        properties: {","                            props: {","                                enum: [false]","                            }","                        },","                        additionalProperties: false","                    },","                    {","                        type: \"object\",","                        properties: {","                            props: {","                                enum: [true]","                            },","                            ignorePropertyModificationsFor: {","                                type: \"array\",","                                items: {","                                    type: \"string\"","                                },","                                uniqueItems: true","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","        const props = context.options[0] && Boolean(context.options[0].props);","        const ignoredPropertyAssignmentsFor = context.options[0] && context.options[0].ignorePropertyModificationsFor || [];","","        /**","         * Checks whether or not the reference modifies properties of its variable.","         * @param {Reference} reference - A reference to check.","         * @returns {boolean} Whether or not the reference modifies properties of its variable.","         */","        function isModifyingProp(reference) {","            let node = reference.identifier;","            let parent = node.parent;","","            while (parent && !stopNodePattern.test(parent.type)) {","                switch (parent.type) {","","                    // e.g. foo.a = 0;","                    case \"AssignmentExpression\":","                        return parent.left === node;","","                    // e.g. ++foo.a;","                    case \"UpdateExpression\":","                        return true;","","                    // e.g. delete foo.a;","                    case \"UnaryExpression\":","                        if (parent.operator === \"delete\") {","                            return true;","                        }","                        break;","","                    // EXCLUDES: e.g. cache.get(foo.a).b = 0;","                    case \"CallExpression\":","                        if (parent.callee !== node) {","                            return false;","                        }","                        break;","","                    // EXCLUDES: e.g. cache[foo.a] = 0;","                    case \"MemberExpression\":","                        if (parent.property === node) {","                            return false;","                        }","                        break;","","                    // EXCLUDES: e.g. ({ [foo]: a }) = bar;","                    case \"Property\":","                        if (parent.key === node) {","                            return false;","                        }","","                        break;","","                    // no default","                }","","                node = parent;","                parent = node.parent;","            }","","            return false;","        }","","        /**","         * Reports a reference if is non initializer and writable.","         * @param {Reference} reference - A reference to check.","         * @param {int} index - The index of the reference in the references.","         * @param {Reference[]} references - The array that the reference belongs to.","         * @returns {void}","         */","        function checkReference(reference, index, references) {","            const identifier = reference.identifier;","","            if (identifier &&","                !reference.init &&","","                // Destructuring assignments can have multiple default value,","                // so possibly there are multiple writeable references for the same identifier.","                (index === 0 || references[index - 1].identifier !== identifier)","            ) {","                if (reference.isWrite()) {","                    context.report({ node: identifier, message: \"Assignment to function parameter '{{name}}'.\", data: { name: identifier.name } });","                } else if (props && isModifyingProp(reference) && ignoredPropertyAssignmentsFor.indexOf(identifier.name) === -1) {","                    context.report({ node: identifier, message: \"Assignment to property of function parameter '{{name}}'.\", data: { name: identifier.name } });","                }","            }","        }","","        /**","         * Finds and reports references that are non initializer and writable.","         * @param {Variable} variable - A variable to check.","         * @returns {void}","         */","        function checkVariable(variable) {","            if (variable.defs[0].type === \"Parameter\") {","                variable.references.forEach(checkReference);","            }","        }","","        /**","         * Checks parameters of a given function node.","         * @param {ASTNode} node - A function node to check.","         * @returns {void}","         */","        function checkForFunction(node) {","            context.getDeclaredVariables(node).forEach(checkVariable);","        }","","        return {","","            // `:exit` is needed for the `node.parent` property of identifier nodes.","            \"FunctionDeclaration:exit\": checkForFunction,","            \"FunctionExpression:exit\": checkForFunction,","            \"ArrowFunctionExpression:exit\": checkForFunction","        };","","    }","};",""],"l":{"11":1,"13":1,"55":0,"56":0,"63":1,"64":0,"65":0,"67":0,"68":0,"72":0,"76":0,"80":0,"81":0,"83":0,"87":0,"88":0,"90":0,"94":0,"95":0,"97":0,"101":0,"102":0,"105":0,"110":0,"111":0,"114":0,"124":1,"125":0,"127":0,"134":0,"135":0,"136":0,"137":0,"147":1,"148":0,"149":0,"158":1,"159":0,"162":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-path-concat.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-path-concat.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0],"2":[0,0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":28},"end":{"line":32,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":49,"column":2}},"2":{"start":{"line":24,"column":8},"end":{"line":24,"column":47}},"3":{"start":{"line":30,"column":8},"end":{"line":46,"column":10}},"4":{"start":{"line":34,"column":16},"end":{"line":35,"column":39}},"5":{"start":{"line":37,"column":16},"end":{"line":43,"column":17}},"6":{"start":{"line":42,"column":20},"end":{"line":42,"column":121}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":16},"end":{"line":37,"column":16}},{"start":{"line":37,"column":16},"end":{"line":37,"column":16}}]},"2":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":20},"end":{"line":37,"column":41}},{"start":{"line":38,"column":26},"end":{"line":38,"column":52}},{"start":{"line":38,"column":56},"end":{"line":38,"column":79}},{"start":{"line":39,"column":25},"end":{"line":39,"column":52}},{"start":{"line":39,"column":56},"end":{"line":39,"column":80}}]}},"code":["/**"," * @fileoverview Disallow string concatenation when using __dirname and __filename"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow string concatenation with `__dirname` and `__filename`\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        const MATCHER = /^__(?:dir|file)name$/;","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            BinaryExpression(node) {","","                const left = node.left,","                    right = node.right;","","                if (node.operator === \"+\" &&","                        ((left.type === \"Identifier\" && MATCHER.test(left.name)) ||","                        (right.type === \"Identifier\" && MATCHER.test(right.name)))","                ) {","","                    context.report({ node, message: \"Use path.join() or path.resolve() instead of + to create paths.\" });","                }","            }","","        };","","    }","};",""],"l":{"11":1,"24":0,"30":0,"34":0,"37":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-plusplus.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-plusplus.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":34,"loc":{"start":{"line":34,"column":10},"end":{"line":34,"column":20}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":28},"end":{"line":45,"column":35}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":61,"column":2}},"2":{"start":{"line":36,"column":8},"end":{"line":36,"column":42}},"3":{"start":{"line":37,"column":8},"end":{"line":37,"column":43}},"4":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"5":{"start":{"line":40,"column":12},"end":{"line":40,"column":79}},"6":{"start":{"line":43,"column":8},"end":{"line":58,"column":10}},"7":{"start":{"line":46,"column":16},"end":{"line":48,"column":17}},"8":{"start":{"line":47,"column":20},"end":{"line":47,"column":27}},"9":{"start":{"line":49,"column":16},"end":{"line":55,"column":19}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":8}},{"start":{"line":39,"column":8},"end":{"line":39,"column":8}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":16},"end":{"line":46,"column":16}},{"start":{"line":46,"column":16},"end":{"line":46,"column":16}}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":20},"end":{"line":46,"column":42}},{"start":{"line":46,"column":46},"end":{"line":46,"column":81}}]}},"code":["/**"," * @fileoverview Rule to flag use of unary increment and decrement operators."," * @author Ian Christian Myers"," * @author Brody McKee (github.com/mrmckeb)"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the unary operators `++` and `--`\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allowForLoopAfterthoughts: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const config = context.options[0];","        let allowInForAfterthought = false;","","        if (typeof config === \"object\") {","            allowInForAfterthought = config.allowForLoopAfterthoughts === true;","        }","","        return {","","            UpdateExpression(node) {","                if (allowInForAfterthought && node.parent.type === \"ForStatement\") {","                    return;","                }","                context.report({","                    node,","                    message: \"Unary operator '{{operator}}' used.\",","                    data: {","                        operator: node.operator","                    }","                });","            }","","        };","","    }","};",""],"l":{"13":1,"36":0,"37":0,"39":0,"40":0,"43":0,"46":0,"47":0,"49":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-process-env.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-process-env.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":28},"end":{"line":26,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":39,"column":2}},"2":{"start":{"line":24,"column":8},"end":{"line":36,"column":10}},"3":{"start":{"line":27,"column":16},"end":{"line":28,"column":54}},"4":{"start":{"line":30,"column":16},"end":{"line":32,"column":17}},"5":{"start":{"line":31,"column":20},"end":{"line":31,"column":88}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":16}},{"start":{"line":30,"column":16},"end":{"line":30,"column":16}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":20},"end":{"line":30,"column":44}},{"start":{"line":30,"column":48},"end":{"line":30,"column":62}},{"start":{"line":30,"column":66},"end":{"line":30,"column":78}},{"start":{"line":30,"column":82},"end":{"line":30,"column":104}}]}},"code":["/**"," * @fileoverview Disallow the use of process.env()"," * @author Vignesh Anand"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of `process.env`\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            MemberExpression(node) {","                const objectName = node.object.name,","                    propertyName = node.property.name;","","                if (objectName === \"process\" && !node.computed && propertyName && propertyName === \"env\") {","                    context.report({ node, message: \"Unexpected use of process.env.\" });","                }","","            }","","        };","","    }","};",""],"l":{"11":1,"24":0,"27":0,"30":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-process-exit.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-process-exit.js","s":{"1":1,"2":0,"3":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":103},"end":{"line":29,"column":110}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":35,"column":2}},"2":{"start":{"line":28,"column":8},"end":{"line":32,"column":10}},"3":{"start":{"line":30,"column":16},"end":{"line":30,"column":116}}},"branchMap":{},"code":["/**"," * @fileoverview Disallow the use of process.exit()"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of `process.exit()`\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            \"CallExpression > MemberExpression.callee[object.name = 'process'][property.name = 'exit']\"(node) {","                context.report({ node: node.parent, message: \"Don't use process.exit(); throw an error instead.\" });","            }","        };","","    }","};",""],"l":{"11":1,"28":0,"30":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-proto.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-proto.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0],"2":[0,0,0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":28},"end":{"line":27,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":38,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":35,"column":10}},"3":{"start":{"line":29,"column":16},"end":{"line":33,"column":17}},"4":{"start":{"line":32,"column":20},"end":{"line":32,"column":97}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":16},"end":{"line":29,"column":16}},{"start":{"line":29,"column":16},"end":{"line":29,"column":16}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":20},"end":{"line":29,"column":33}},{"start":{"line":30,"column":25},"end":{"line":30,"column":60}},{"start":{"line":30,"column":64},"end":{"line":30,"column":98}},{"start":{"line":30,"column":102},"end":{"line":30,"column":116}},{"start":{"line":31,"column":25},"end":{"line":31,"column":57}},{"start":{"line":31,"column":61},"end":{"line":31,"column":96}}]}},"code":["/**"," * @fileoverview Rule to flag usage of __proto__ property"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of the `__proto__` property\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            MemberExpression(node) {","","                if (node.property &&","                        (node.property.type === \"Identifier\" && node.property.name === \"__proto__\" && !node.computed) ||","                        (node.property.type === \"Literal\" && node.property.value === \"__proto__\")) {","                    context.report({ node, message: \"The '__proto__' property is deprecated.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"29":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-prototype-builtins.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-prototype-builtins.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"disallowBuiltIns","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":40}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":54,"column":2}},"2":{"start":{"line":23,"column":8},"end":{"line":27,"column":10}},"3":{"start":{"line":34,"column":8},"end":{"line":48,"column":9}},"4":{"start":{"line":35,"column":12},"end":{"line":37,"column":13}},"5":{"start":{"line":36,"column":16},"end":{"line":36,"column":23}},"6":{"start":{"line":38,"column":12},"end":{"line":38,"column":55}},"7":{"start":{"line":40,"column":12},"end":{"line":47,"column":13}},"8":{"start":{"line":41,"column":16},"end":{"line":46,"column":19}},"9":{"start":{"line":50,"column":8},"end":{"line":52,"column":10}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":12},"end":{"line":35,"column":12}},{"start":{"line":35,"column":12},"end":{"line":35,"column":12}}]},"2":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":16},"end":{"line":35,"column":55}},{"start":{"line":35,"column":59},"end":{"line":35,"column":79}}]},"3":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":12}},{"start":{"line":40,"column":12},"end":{"line":40,"column":12}}]}},"code":["/**"," * @fileoverview Rule to disallow use of Object.prototype builtins on objects"," * @author Andrew Levine"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow calling some `Object.prototype` methods directly on objects\",","            category: \"Possible Errors\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const DISALLOWED_PROPS = [","            \"hasOwnProperty\",","            \"isPrototypeOf\",","            \"propertyIsEnumerable\"","        ];","","        /**","         * Reports if a disallowed property is used in a CallExpression","         * @param {ASTNode} node The CallExpression node.","         * @returns {void}","         */","        function disallowBuiltIns(node) {","            if (node.callee.type !== \"MemberExpression\" || node.callee.computed) {","                return;","            }","            const propName = node.callee.property.name;","","            if (DISALLOWED_PROPS.indexOf(propName) > -1) {","                context.report({","                    message: \"Do not access Object.prototype method '{{prop}}' from target object.\",","                    loc: node.callee.property.loc.start,","                    data: { prop: propName },","                    node","                });","            }","        }","","        return {","            CallExpression: disallowBuiltIns","        };","    }","};",""],"l":{"11":1,"23":0,"34":1,"35":0,"36":0,"38":0,"40":0,"41":0,"50":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-redeclare.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-redeclare.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":20}}},"2":{"name":"findVariablesInScope","line":42,"loc":{"start":{"line":42,"column":8},"end":{"line":42,"column":45}}},"3":{"name":"checkForGlobal","line":64,"loc":{"start":{"line":64,"column":8},"end":{"line":64,"column":38}}},"4":{"name":"checkForBlock","line":82,"loc":{"start":{"line":82,"column":8},"end":{"line":82,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":101,"column":2}},"2":{"start":{"line":32,"column":8},"end":{"line":34,"column":10}},"3":{"start":{"line":42,"column":8},"end":{"line":56,"column":9}},"4":{"start":{"line":43,"column":12},"end":{"line":54,"column":15}},"5":{"start":{"line":44,"column":16},"end":{"line":44,"column":85}},"6":{"start":{"line":45,"column":16},"end":{"line":45,"column":81}},"7":{"start":{"line":47,"column":16},"end":{"line":53,"column":17}},"8":{"start":{"line":48,"column":20},"end":{"line":48,"column":81}},"9":{"start":{"line":48,"column":56},"end":{"line":48,"column":79}},"10":{"start":{"line":50,"column":20},"end":{"line":52,"column":21}},"11":{"start":{"line":51,"column":24},"end":{"line":51,"column":142}},"12":{"start":{"line":64,"column":8},"end":{"line":75,"column":9}},"13":{"start":{"line":65,"column":12},"end":{"line":67,"column":64}},"14":{"start":{"line":70,"column":12},"end":{"line":74,"column":13}},"15":{"start":{"line":71,"column":16},"end":{"line":71,"column":59}},"16":{"start":{"line":73,"column":16},"end":{"line":73,"column":44}},"17":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"18":{"start":{"line":83,"column":12},"end":{"line":83,"column":53}},"19":{"start":{"line":86,"column":8},"end":{"line":92,"column":9}},"20":{"start":{"line":87,"column":12},"end":{"line":91,"column":14}},"21":{"start":{"line":93,"column":8},"end":{"line":98,"column":10}}},"branchMap":{"1":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":36},"end":{"line":33,"column":54}},{"start":{"line":33,"column":58},"end":{"line":33,"column":91}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":35},"end":{"line":44,"column":57}},{"start":{"line":44,"column":61},"end":{"line":44,"column":84}}]},"3":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":44},"end":{"line":45,"column":45}},{"start":{"line":45,"column":48},"end":{"line":45,"column":49}}]},"4":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":16},"end":{"line":47,"column":16}},{"start":{"line":47,"column":16},"end":{"line":47,"column":16}}]},"5":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":31},"end":{"line":67,"column":57}},{"start":{"line":67,"column":61},"end":{"line":67,"column":63}}]},"6":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12}},{"start":{"line":70,"column":12},"end":{"line":70,"column":12}}]},"7":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":41}},{"start":{"line":70,"column":45},"end":{"line":70,"column":73}}]},"8":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]}},"code":["/**"," * @fileoverview Rule to flag when the same variable is declared more then once."," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow variable redeclaration\",","            category: \"Best Practices\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    builtinGlobals: { type: \"boolean\" }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = {","            builtinGlobals: Boolean(context.options[0] && context.options[0].builtinGlobals)","        };","","        /**","         * Find variables in a given scope and flag redeclared ones.","         * @param {Scope} scope - An escope scope object.","         * @returns {void}","         * @private","         */","        function findVariablesInScope(scope) {","            scope.variables.forEach(variable => {","                const hasBuiltin = options.builtinGlobals && \"writeable\" in variable;","                const count = (hasBuiltin ? 1 : 0) + variable.identifiers.length;","","                if (count >= 2) {","                    variable.identifiers.sort((a, b) => a.range[1] - b.range[1]);","","                    for (let i = (hasBuiltin ? 0 : 1), l = variable.identifiers.length; i < l; i++) {","                        context.report({ node: variable.identifiers[i], message: \"'{{a}}' is already defined.\", data: { a: variable.name } });","                    }","                }","            });","","        }","","        /**","         * Find variables in the current scope.","         * @param {ASTNode} node - The Program node.","         * @returns {void}","         * @private","         */","        function checkForGlobal(node) {","            const scope = context.getScope(),","                parserOptions = context.parserOptions,","                ecmaFeatures = parserOptions.ecmaFeatures || {};","","            // Nodejs env or modules has a special scope.","            if (ecmaFeatures.globalReturn || node.sourceType === \"module\") {","                findVariablesInScope(scope.childScopes[0]);","            } else {","                findVariablesInScope(scope);","            }","        }","","        /**","         * Find variables in the current scope.","         * @returns {void}","         * @private","         */","        function checkForBlock() {","            findVariablesInScope(context.getScope());","        }","","        if (context.parserOptions.ecmaVersion >= 6) {","            return {","                Program: checkForGlobal,","                BlockStatement: checkForBlock,","                SwitchStatement: checkForBlock","            };","        }","        return {","            Program: checkForGlobal,","            FunctionDeclaration: checkForBlock,","            FunctionExpression: checkForBlock,","            ArrowFunctionExpression: checkForBlock","        };","","    }","};",""],"l":{"12":1,"32":0,"42":1,"43":0,"44":0,"45":0,"47":0,"48":0,"50":0,"51":0,"64":1,"65":0,"70":0,"71":0,"73":0,"82":1,"83":0,"86":0,"87":0,"93":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-regex-spaces.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-regex-spaces.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":10},"end":{"line":27,"column":20}}},"2":{"name":"checkRegex","line":39,"loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":53}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":23},"end":{"line":50,"column":31}}},"4":{"name":"checkLiteral","line":71,"loc":{"start":{"line":71,"column":8},"end":{"line":71,"column":36}}},"5":{"name":"isString","line":87,"loc":{"start":{"line":87,"column":8},"end":{"line":87,"column":32}}},"6":{"name":"checkFunction","line":97,"loc":{"start":{"line":97,"column":8},"end":{"line":97,"column":37}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":114,"column":2}},"3":{"start":{"line":28,"column":8},"end":{"line":28,"column":51}},"4":{"start":{"line":39,"column":8},"end":{"line":63,"column":9}},"5":{"start":{"line":40,"column":12},"end":{"line":41,"column":63}},"6":{"start":{"line":43,"column":12},"end":{"line":62,"column":13}},"7":{"start":{"line":44,"column":16},"end":{"line":44,"column":53}},"8":{"start":{"line":46,"column":16},"end":{"line":56,"column":19}},"9":{"start":{"line":51,"column":24},"end":{"line":54,"column":26}},"10":{"start":{"line":71,"column":8},"end":{"line":79,"column":9}},"11":{"start":{"line":72,"column":12},"end":{"line":74,"column":40}},"12":{"start":{"line":76,"column":12},"end":{"line":78,"column":13}},"13":{"start":{"line":77,"column":16},"end":{"line":77,"column":57}},"14":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"15":{"start":{"line":88,"column":12},"end":{"line":88,"column":85}},"16":{"start":{"line":97,"column":8},"end":{"line":105,"column":9}},"17":{"start":{"line":98,"column":12},"end":{"line":98,"column":45}},"18":{"start":{"line":99,"column":12},"end":{"line":99,"column":74}},"19":{"start":{"line":100,"column":12},"end":{"line":100,"column":68}},"20":{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},"21":{"start":{"line":103,"column":16},"end":{"line":103,"column":87}},"22":{"start":{"line":107,"column":8},"end":{"line":111,"column":10}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":12},"end":{"line":43,"column":12}},{"start":{"line":43,"column":12},"end":{"line":43,"column":12}}]},"2":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":12}},{"start":{"line":76,"column":12},"end":{"line":76,"column":12}}]},"3":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":19},"end":{"line":88,"column":23}},{"start":{"line":88,"column":27},"end":{"line":88,"column":50}},{"start":{"line":88,"column":54},"end":{"line":88,"column":84}}]},"4":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":29},"end":{"line":100,"column":38}},{"start":{"line":100,"column":42},"end":{"line":100,"column":67}}]},"5":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":102,"column":12}},{"start":{"line":102,"column":12},"end":{"line":102,"column":12}}]},"6":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":16},"end":{"line":102,"column":49}},{"start":{"line":102,"column":53},"end":{"line":102,"column":82}},{"start":{"line":102,"column":86},"end":{"line":102,"column":113}},{"start":{"line":102,"column":117},"end":{"line":102,"column":126}}]}},"code":["/**"," * @fileoverview Rule to count multiple spaces in regular expressions"," * @author Matt DuVall <http://www.mattduvall.com/>"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow multiple spaces in regular expressions\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        /**","         * Validate regular expressions","         * @param {ASTNode} node node to validate","         * @param {string} value regular expression to validate","         * @param {number} valueStart The start location of the regex/string literal. It will always be the case that","         `sourceCode.getText().slice(valueStart, valueStart + value.length) === value`","         * @returns {void}","         * @private","         */","        function checkRegex(node, value, valueStart) {","            const multipleSpacesRegex = /( {2,})+?/,","                regexResults = multipleSpacesRegex.exec(value);","","            if (regexResults !== null) {","                const count = regexResults[0].length;","","                context.report({","                    node,","                    message: \"Spaces are hard to count. Use {{{count}}}.\",","                    data: { count },","                    fix(fixer) {","                        return fixer.replaceTextRange(","                            [valueStart + regexResults.index, valueStart + regexResults.index + count],","                            ` {${count}}`","                        );","                    }","                });","","                /*","                 * TODO: (platinumazure) Fix message to use rule message","                 * substitution when api.report is fixed in lib/eslint.js.","                 */","            }","        }","","        /**","         * Validate regular expression literals","         * @param {ASTNode} node node to validate","         * @returns {void}","         * @private","         */","        function checkLiteral(node) {","            const token = sourceCode.getFirstToken(node),","                nodeType = token.type,","                nodeValue = token.value;","","            if (nodeType === \"RegularExpression\") {","                checkRegex(node, nodeValue, token.start);","            }","        }","","        /**","         * Check if node is a string","         * @param {ASTNode} node node to evaluate","         * @returns {boolean} True if its a string","         * @private","         */","        function isString(node) {","            return node && node.type === \"Literal\" && typeof node.value === \"string\";","        }","","        /**","         * Validate strings passed to the RegExp constructor","         * @param {ASTNode} node node to validate","         * @returns {void}","         * @private","         */","        function checkFunction(node) {","            const scope = context.getScope();","            const regExpVar = astUtils.getVariableByName(scope, \"RegExp\");","            const shadowed = regExpVar && regExpVar.defs.length > 0;","","            if (node.callee.type === \"Identifier\" && node.callee.name === \"RegExp\" && isString(node.arguments[0]) && !shadowed) {","                checkRegex(node, node.arguments[0].value, node.arguments[0].start + 1);","            }","        }","","        return {","            Literal: checkLiteral,","            CallExpression: checkFunction,","            NewExpression: checkFunction","        };","","    }","};",""],"l":{"8":1,"14":1,"28":0,"39":1,"40":0,"43":0,"44":0,"46":0,"51":0,"71":1,"72":0,"76":0,"77":0,"87":1,"88":0,"97":1,"98":0,"99":0,"100":0,"102":0,"103":0,"107":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-globals.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-globals.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":28,"loc":{"start":{"line":28,"column":10},"end":{"line":28,"column":20}}},"2":{"name":"reportReference","line":42,"loc":{"start":{"line":42,"column":8},"end":{"line":42,"column":44}}},"3":{"name":"isRestricted","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":36}}},"4":{"name":"(anonymous_4)","line":59,"loc":{"start":{"line":59,"column":19},"end":{"line":59,"column":22}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":79,"column":2}},"2":{"start":{"line":29,"column":8},"end":{"line":29,"column":50}},"3":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"4":{"start":{"line":33,"column":12},"end":{"line":33,"column":22}},"5":{"start":{"line":42,"column":8},"end":{"line":46,"column":9}},"6":{"start":{"line":43,"column":12},"end":{"line":45,"column":17}},"7":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"8":{"start":{"line":55,"column":12},"end":{"line":55,"column":56}},"9":{"start":{"line":58,"column":8},"end":{"line":77,"column":10}},"10":{"start":{"line":60,"column":16},"end":{"line":60,"column":49}},"11":{"start":{"line":63,"column":16},"end":{"line":67,"column":19}},"12":{"start":{"line":64,"column":20},"end":{"line":66,"column":21}},"13":{"start":{"line":65,"column":24},"end":{"line":65,"column":69}},"14":{"start":{"line":70,"column":16},"end":{"line":74,"column":19}},"15":{"start":{"line":71,"column":20},"end":{"line":73,"column":21}},"16":{"start":{"line":72,"column":24},"end":{"line":72,"column":51}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"2":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":20},"end":{"line":64,"column":20}},{"start":{"line":64,"column":20},"end":{"line":64,"column":20}}]},"3":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":24},"end":{"line":64,"column":45}},{"start":{"line":64,"column":49},"end":{"line":64,"column":76}}]},"4":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":20},"end":{"line":71,"column":20}},{"start":{"line":71,"column":20},"end":{"line":71,"column":20}}]}},"code":["/**"," * @fileoverview Restrict usage of specified globals."," * @author Benoît Zugmeyer"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow specified global variables\",","            category: \"Variables\",","            recommended: false","        },","","        schema: {","            type: \"array\",","            items: {","                type: \"string\"","            },","            uniqueItems: true","        }","    },","","    create(context) {","        const restrictedGlobals = context.options;","","        // if no globals are restricted we don't need to check","        if (restrictedGlobals.length === 0) {","            return {};","        }","","        /**","         * Report a variable to be used as a restricted global.","         * @param {Reference} reference the variable reference","         * @returns {void}","         * @private","         */","        function reportReference(reference) {","            context.report({ node: reference.identifier, message: \"Unexpected use of '{{name}}'.\", data: {","                name: reference.identifier.name","            } });","        }","","        /**","         * Check if the given name is a restricted global name.","         * @param {string} name name of a variable","         * @returns {boolean} whether the variable is a restricted global or not","         * @private","         */","        function isRestricted(name) {","            return restrictedGlobals.indexOf(name) >= 0;","        }","","        return {","            Program() {","                const scope = context.getScope();","","                // Report variables declared elsewhere (ex: variables defined as \"global\" by eslint)","                scope.variables.forEach(variable => {","                    if (!variable.defs.length && isRestricted(variable.name)) {","                        variable.references.forEach(reportReference);","                    }","                });","","                // Report variables not declared at all","                scope.through.forEach(reference => {","                    if (isRestricted(reference.identifier.name)) {","                        reportReference(reference);","                    }","                });","","            }","        };","    }","};",""],"l":{"11":1,"29":0,"32":0,"33":0,"42":1,"43":0,"54":1,"55":0,"58":0,"60":0,"63":0,"64":0,"65":0,"70":0,"71":0,"72":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-imports.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-imports.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":48,"loc":{"start":{"line":48,"column":10},"end":{"line":48,"column":20}}},"2":{"name":"(anonymous_2)","line":62,"loc":{"start":{"line":62,"column":29},"end":{"line":62,"column":36}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":13,"column":0},"end":{"line":19,"column":2}},"3":{"start":{"line":21,"column":0},"end":{"line":85,"column":2}},"4":{"start":{"line":49,"column":8},"end":{"line":49,"column":78}},"5":{"start":{"line":50,"column":8},"end":{"line":50,"column":61}},"6":{"start":{"line":51,"column":8},"end":{"line":51,"column":98}},"7":{"start":{"line":52,"column":8},"end":{"line":52,"column":82}},"8":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"9":{"start":{"line":56,"column":12},"end":{"line":56,"column":22}},"10":{"start":{"line":59,"column":8},"end":{"line":59,"column":52}},"11":{"start":{"line":61,"column":8},"end":{"line":83,"column":10}},"12":{"start":{"line":63,"column":16},"end":{"line":81,"column":17}},"13":{"start":{"line":65,"column":20},"end":{"line":65,"column":64}},"14":{"start":{"line":67,"column":20},"end":{"line":73,"column":21}},"15":{"start":{"line":68,"column":24},"end":{"line":72,"column":27}},"16":{"start":{"line":74,"column":20},"end":{"line":80,"column":21}},"17":{"start":{"line":75,"column":24},"end":{"line":79,"column":27}}},"branchMap":{"1":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":57},"end":{"line":49,"column":72}},{"start":{"line":49,"column":75},"end":{"line":49,"column":77}}]},"2":{"line":51,"type":"cond-expr","locations":[{"start":{"line":51,"column":56},"end":{"line":51,"column":71}},{"start":{"line":51,"column":74},"end":{"line":51,"column":96}}]},"3":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":74},"end":{"line":51,"column":90}},{"start":{"line":51,"column":94},"end":{"line":51,"column":96}}]},"4":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":51},"end":{"line":52,"column":53}},{"start":{"line":52,"column":56},"end":{"line":52,"column":81}}]},"5":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":56},"end":{"line":52,"column":75}},{"start":{"line":52,"column":79},"end":{"line":52,"column":81}}]},"6":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"7":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":38}},{"start":{"line":55,"column":42},"end":{"line":55,"column":73}}]},"8":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":63,"column":16}},{"start":{"line":63,"column":16},"end":{"line":63,"column":16}}]},"9":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":20},"end":{"line":63,"column":24}},{"start":{"line":63,"column":28},"end":{"line":63,"column":39}},{"start":{"line":63,"column":43},"end":{"line":63,"column":60}}]},"10":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":20},"end":{"line":67,"column":20}},{"start":{"line":67,"column":20},"end":{"line":67,"column":20}}]},"11":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":20},"end":{"line":74,"column":20}},{"start":{"line":74,"column":20},"end":{"line":74,"column":20}}]},"12":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":24},"end":{"line":74,"column":53}},{"start":{"line":74,"column":57},"end":{"line":74,"column":79}}]}},"code":["/**"," * @fileoverview Restrict usage of specified node imports."," * @author Guy Ellis"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const ignore = require(\"ignore\");","","const arrayOfStrings = {","    type: \"array\",","    items: {","        type: \"string\"","    },","    uniqueItems: true","};","","module.exports = {","    meta: {","        docs: {","            description: \"disallow specified modules when loaded by `import`\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: {","            anyOf: [","                arrayOfStrings,","                {","                    type: \"array\",","                    items: [{","                        type: \"object\",","                        properties: {","                            paths: arrayOfStrings,","                            patterns: arrayOfStrings","                        },","                        additionalProperties: false","                    }],","                    additionalItems: false","                }","            ]","        }","    },","","    create(context) {","        const options = Array.isArray(context.options) ? context.options : [];","        const isStringArray = typeof options[0] !== \"object\";","        const restrictedPaths = new Set(isStringArray ? context.options : options[0].paths || []);","        const restrictedPatterns = isStringArray ? [] : options[0].patterns || [];","","        // if no imports are restricted we don\"t need to check","        if (restrictedPaths.size === 0 && restrictedPatterns.length === 0) {","            return {};","        }","","        const ig = ignore().add(restrictedPatterns);","","        return {","            ImportDeclaration(node) {","                if (node && node.source && node.source.value) {","","                    const importName = node.source.value.trim();","","                    if (restrictedPaths.has(importName)) {","                        context.report({","                            node,","                            message: \"'{{importName}}' import is restricted from being used.\",","                            data: { importName }","                        });","                    }","                    if (restrictedPatterns.length > 0 && ig.ignores(importName)) {","                        context.report({","                            node,","                            message: \"'{{importName}}' import is restricted from being used by a pattern.\",","                            data: { importName }","                        });","                    }","                }","            }","        };","    }","};",""],"l":{"11":1,"13":1,"21":1,"49":0,"50":0,"51":0,"52":0,"55":0,"56":0,"59":0,"61":0,"63":0,"65":0,"67":0,"68":0,"74":0,"75":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-modules.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-modules.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":48,"loc":{"start":{"line":48,"column":10},"end":{"line":48,"column":20}}},"2":{"name":"isString","line":66,"loc":{"start":{"line":66,"column":8},"end":{"line":66,"column":32}}},"3":{"name":"isRequireCall","line":75,"loc":{"start":{"line":75,"column":8},"end":{"line":75,"column":37}}},"4":{"name":"(anonymous_4)","line":80,"loc":{"start":{"line":80,"column":26},"end":{"line":80,"column":33}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":13,"column":0},"end":{"line":19,"column":2}},"3":{"start":{"line":21,"column":0},"end":{"line":108,"column":2}},"4":{"start":{"line":49,"column":8},"end":{"line":49,"column":78}},"5":{"start":{"line":50,"column":8},"end":{"line":50,"column":61}},"6":{"start":{"line":51,"column":8},"end":{"line":51,"column":98}},"7":{"start":{"line":52,"column":8},"end":{"line":52,"column":82}},"8":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"9":{"start":{"line":56,"column":12},"end":{"line":56,"column":22}},"10":{"start":{"line":59,"column":8},"end":{"line":59,"column":52}},"11":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"12":{"start":{"line":67,"column":12},"end":{"line":67,"column":85}},"13":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"14":{"start":{"line":76,"column":12},"end":{"line":76,"column":87}},"15":{"start":{"line":79,"column":8},"end":{"line":106,"column":10}},"16":{"start":{"line":81,"column":16},"end":{"line":104,"column":17}},"17":{"start":{"line":84,"column":20},"end":{"line":103,"column":21}},"18":{"start":{"line":85,"column":24},"end":{"line":85,"column":74}},"19":{"start":{"line":88,"column":24},"end":{"line":94,"column":25}},"20":{"start":{"line":89,"column":28},"end":{"line":93,"column":31}},"21":{"start":{"line":96,"column":24},"end":{"line":102,"column":25}},"22":{"start":{"line":97,"column":28},"end":{"line":101,"column":31}}},"branchMap":{"1":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":57},"end":{"line":49,"column":72}},{"start":{"line":49,"column":75},"end":{"line":49,"column":77}}]},"2":{"line":51,"type":"cond-expr","locations":[{"start":{"line":51,"column":56},"end":{"line":51,"column":71}},{"start":{"line":51,"column":74},"end":{"line":51,"column":96}}]},"3":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":74},"end":{"line":51,"column":90}},{"start":{"line":51,"column":94},"end":{"line":51,"column":96}}]},"4":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":51},"end":{"line":52,"column":53}},{"start":{"line":52,"column":56},"end":{"line":52,"column":81}}]},"5":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":56},"end":{"line":52,"column":75}},{"start":{"line":52,"column":79},"end":{"line":52,"column":81}}]},"6":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"7":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":38}},{"start":{"line":55,"column":42},"end":{"line":55,"column":73}}]},"8":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":19},"end":{"line":67,"column":23}},{"start":{"line":67,"column":27},"end":{"line":67,"column":50}},{"start":{"line":67,"column":54},"end":{"line":67,"column":84}}]},"9":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":19},"end":{"line":76,"column":52}},{"start":{"line":76,"column":56},"end":{"line":76,"column":86}}]},"10":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":16},"end":{"line":81,"column":16}},{"start":{"line":81,"column":16},"end":{"line":81,"column":16}}]},"11":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":20},"end":{"line":84,"column":20}},{"start":{"line":84,"column":20},"end":{"line":84,"column":20}}]},"12":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":24},"end":{"line":84,"column":45}},{"start":{"line":84,"column":49},"end":{"line":84,"column":76}}]},"13":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":24},"end":{"line":88,"column":24}},{"start":{"line":88,"column":24},"end":{"line":88,"column":24}}]},"14":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":24},"end":{"line":96,"column":24}},{"start":{"line":96,"column":24},"end":{"line":96,"column":24}}]},"15":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":28},"end":{"line":96,"column":57}},{"start":{"line":96,"column":61},"end":{"line":96,"column":83}}]}},"code":["/**"," * @fileoverview Restrict usage of specified node modules."," * @author Christian Schulz"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const ignore = require(\"ignore\");","","const arrayOfStrings = {","    type: \"array\",","    items: {","        type: \"string\"","    },","    uniqueItems: true","};","","module.exports = {","    meta: {","        docs: {","            description: \"disallow specified modules when loaded by `require`\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: {","            anyOf: [","                arrayOfStrings,","                {","                    type: \"array\",","                    items: [{","                        type: \"object\",","                        properties: {","                            paths: arrayOfStrings,","                            patterns: arrayOfStrings","                        },","                        additionalProperties: false","                    }],","                    additionalItems: false","                }","            ]","        }","    },","","    create(context) {","        const options = Array.isArray(context.options) ? context.options : [];","        const isStringArray = typeof options[0] !== \"object\";","        const restrictedPaths = new Set(isStringArray ? context.options : options[0].paths || []);","        const restrictedPatterns = isStringArray ? [] : options[0].patterns || [];","","        // if no imports are restricted we don\"t need to check","        if (restrictedPaths.size === 0 && restrictedPatterns.length === 0) {","            return {};","        }","","        const ig = ignore().add(restrictedPatterns);","","        /**","         * Function to check if a node is a string literal.","         * @param {ASTNode} node The node to check.","         * @returns {boolean} If the node is a string literal.","         */","        function isString(node) {","            return node && node.type === \"Literal\" && typeof node.value === \"string\";","        }","","        /**","         * Function to check if a node is a require call.","         * @param {ASTNode} node The node to check.","         * @returns {boolean} If the node is a require call.","         */","        function isRequireCall(node) {","            return node.callee.type === \"Identifier\" && node.callee.name === \"require\";","        }","","        return {","            CallExpression(node) {","                if (isRequireCall(node)) {","","                    // node has arguments and first argument is string","                    if (node.arguments.length && isString(node.arguments[0])) {","                        const moduleName = node.arguments[0].value.trim();","","                        // check if argument value is in restricted modules array","                        if (restrictedPaths.has(moduleName)) {","                            context.report({","                                node,","                                message: \"'{{moduleName}}' module is restricted from being used.\",","                                data: { moduleName }","                            });","                        }","","                        if (restrictedPatterns.length > 0 && ig.ignores(moduleName)) {","                            context.report({","                                node,","                                message: \"'{{moduleName}}' module is restricted from being used by a pattern.\",","                                data: { moduleName }","                            });","                        }","                    }","                }","            }","        };","    }","};",""],"l":{"11":1,"13":1,"21":1,"49":0,"50":0,"51":0,"52":0,"55":0,"56":0,"59":0,"66":1,"67":0,"75":1,"76":0,"79":0,"81":0,"84":0,"85":0,"88":0,"89":0,"96":0,"97":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-properties.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-properties.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":64,"loc":{"start":{"line":64,"column":10},"end":{"line":64,"column":20}}},"2":{"name":"checkPropertyAccess","line":101,"loc":{"start":{"line":101,"column":8},"end":{"line":101,"column":69}}},"3":{"name":"checkDestructuringAssignment","line":134,"loc":{"start":{"line":134,"column":8},"end":{"line":134,"column":52}}},"4":{"name":"(anonymous_4)","line":147,"loc":{"start":{"line":147,"column":28},"end":{"line":147,"column":35}}},"5":{"name":"(anonymous_5)","line":150,"loc":{"start":{"line":150,"column":30},"end":{"line":150,"column":37}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":165,"column":2}},"3":{"start":{"line":65,"column":8},"end":{"line":65,"column":48}},"4":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"5":{"start":{"line":68,"column":12},"end":{"line":68,"column":22}},"6":{"start":{"line":71,"column":8},"end":{"line":71,"column":47}},"7":{"start":{"line":72,"column":8},"end":{"line":72,"column":52}},"8":{"start":{"line":73,"column":8},"end":{"line":73,"column":55}},"9":{"start":{"line":75,"column":8},"end":{"line":92,"column":11}},"10":{"start":{"line":76,"column":12},"end":{"line":76,"column":45}},"11":{"start":{"line":77,"column":12},"end":{"line":77,"column":49}},"12":{"start":{"line":79,"column":12},"end":{"line":91,"column":13}},"13":{"start":{"line":80,"column":16},"end":{"line":80,"column":92}},"14":{"start":{"line":81,"column":19},"end":{"line":91,"column":13}},"15":{"start":{"line":82,"column":16},"end":{"line":82,"column":87}},"16":{"start":{"line":84,"column":16},"end":{"line":86,"column":17}},"17":{"start":{"line":85,"column":20},"end":{"line":85,"column":68}},"18":{"start":{"line":88,"column":16},"end":{"line":90,"column":19}},"19":{"start":{"line":101,"column":8},"end":{"line":127,"column":9}},"20":{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},"21":{"start":{"line":103,"column":16},"end":{"line":103,"column":23}},"22":{"start":{"line":105,"column":12},"end":{"line":105,"column":71}},"23":{"start":{"line":106,"column":12},"end":{"line":106,"column":134}},"24":{"start":{"line":107,"column":12},"end":{"line":107,"column":89}},"25":{"start":{"line":109,"column":12},"end":{"line":126,"column":13}},"26":{"start":{"line":110,"column":16},"end":{"line":110,"column":105}},"27":{"start":{"line":113,"column":16},"end":{"line":117,"column":21}},"28":{"start":{"line":118,"column":19},"end":{"line":126,"column":13}},"29":{"start":{"line":119,"column":16},"end":{"line":119,"column":105}},"30":{"start":{"line":122,"column":16},"end":{"line":125,"column":21}},"31":{"start":{"line":134,"column":8},"end":{"line":144,"column":9}},"32":{"start":{"line":135,"column":12},"end":{"line":143,"column":13}},"33":{"start":{"line":136,"column":16},"end":{"line":136,"column":51}},"34":{"start":{"line":138,"column":16},"end":{"line":142,"column":17}},"35":{"start":{"line":139,"column":20},"end":{"line":141,"column":23}},"36":{"start":{"line":140,"column":24},"end":{"line":140,"column":109}},"37":{"start":{"line":146,"column":8},"end":{"line":163,"column":10}},"38":{"start":{"line":148,"column":16},"end":{"line":148,"column":113}},"39":{"start":{"line":151,"column":16},"end":{"line":159,"column":17}},"40":{"start":{"line":152,"column":20},"end":{"line":152,"column":54}},"41":{"start":{"line":154,"column":20},"end":{"line":158,"column":21}},"42":{"start":{"line":155,"column":24},"end":{"line":157,"column":27}},"43":{"start":{"line":156,"column":28},"end":{"line":156,"column":111}}},"branchMap":{"1":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"2":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":12}},{"start":{"line":79,"column":12},"end":{"line":79,"column":12}}]},"3":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":19},"end":{"line":81,"column":19}},{"start":{"line":81,"column":19},"end":{"line":81,"column":19}}]},"4":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":16},"end":{"line":84,"column":16}},{"start":{"line":84,"column":16},"end":{"line":84,"column":16}}]},"5":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":102,"column":12}},{"start":{"line":102,"column":12},"end":{"line":102,"column":12}}]},"6":{"line":106,"type":"cond-expr","locations":[{"start":{"line":106,"column":58},"end":{"line":106,"column":89}},{"start":{"line":106,"column":92},"end":{"line":106,"column":133}}]},"7":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":12},"end":{"line":109,"column":12}},{"start":{"line":109,"column":12},"end":{"line":109,"column":12}}]},"8":{"line":110,"type":"cond-expr","locations":[{"start":{"line":110,"column":64},"end":{"line":110,"column":99}},{"start":{"line":110,"column":102},"end":{"line":110,"column":104}}]},"9":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":19},"end":{"line":118,"column":19}},{"start":{"line":118,"column":19},"end":{"line":118,"column":19}}]},"10":{"line":119,"type":"cond-expr","locations":[{"start":{"line":119,"column":64},"end":{"line":119,"column":99}},{"start":{"line":119,"column":102},"end":{"line":119,"column":104}}]},"11":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":12},"end":{"line":135,"column":12}},{"start":{"line":135,"column":12},"end":{"line":135,"column":12}}]},"12":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":16},"end":{"line":138,"column":16}},{"start":{"line":138,"column":16},"end":{"line":138,"column":16}}]},"13":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":42},"end":{"line":148,"column":53}},{"start":{"line":148,"column":57},"end":{"line":148,"column":73}}]},"14":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":16},"end":{"line":151,"column":16}},{"start":{"line":151,"column":16},"end":{"line":151,"column":16}}]},"15":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":20},"end":{"line":151,"column":29}},{"start":{"line":151,"column":33},"end":{"line":151,"column":64}}]},"16":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":20},"end":{"line":154,"column":20}},{"start":{"line":154,"column":20},"end":{"line":154,"column":20}}]}},"code":["/**"," * @fileoverview Rule to disallow certain object properties"," * @author Will Klein & Eli White"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow certain properties on certain objects\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: {","            type: \"array\",","            items: {","                anyOf: [ // `object` and `property` are both optional, but at least one of them must be provided.","                    {","                        type: \"object\",","                        properties: {","                            object: {","                                type: \"string\"","                            },","                            property: {","                                type: \"string\"","                            },","                            message: {","                                type: \"string\"","                            }","                        },","                        additionalProperties: false,","                        required: [\"object\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            object: {","                                type: \"string\"","                            },","                            property: {","                                type: \"string\"","                            },","                            message: {","                                type: \"string\"","                            }","                        },","                        additionalProperties: false,","                        required: [\"property\"]","                    }","                ]","            },","            uniqueItems: true","        }","    },","","    create(context) {","        const restrictedCalls = context.options;","","        if (restrictedCalls.length === 0) {","            return {};","        }","","        const restrictedProperties = new Map();","        const globallyRestrictedObjects = new Map();","        const globallyRestrictedProperties = new Map();","","        restrictedCalls.forEach(option => {","            const objectName = option.object;","            const propertyName = option.property;","","            if (typeof objectName === \"undefined\") {","                globallyRestrictedProperties.set(propertyName, { message: option.message });","            } else if (typeof propertyName === \"undefined\") {","                globallyRestrictedObjects.set(objectName, { message: option.message });","            } else {","                if (!restrictedProperties.has(objectName)) {","                    restrictedProperties.set(objectName, new Map());","                }","","                restrictedProperties.get(objectName).set(propertyName, {","                    message: option.message","                });","            }","        });","","        /**","        * Checks to see whether a property access is restricted, and reports it if so.","        * @param {ASTNode} node The node to report","        * @param {string} objectName The name of the object","        * @param {string} propertyName The name of the property","        * @returns {undefined}","        */","        function checkPropertyAccess(node, objectName, propertyName) {","            if (propertyName === null) {","                return;","            }","            const matchedObject = restrictedProperties.get(objectName);","            const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);","            const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);","","            if (matchedObjectProperty) {","                const message = matchedObjectProperty.message ? ` ${matchedObjectProperty.message}` : \"\";","","                // eslint-disable-next-line eslint-plugin/report-message-format","                context.report({ node, message: \"'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}\", data: {","                    objectName,","                    propertyName,","                    message","                } });","            } else if (globalMatchedProperty) {","                const message = globalMatchedProperty.message ? ` ${globalMatchedProperty.message}` : \"\";","","                // eslint-disable-next-line eslint-plugin/report-message-format","                context.report({ node, message: \"'{{propertyName}}' is restricted from being used.{{message}}\", data: {","                    propertyName,","                    message","                } });","            }","        }","","        /**","        * Checks property accesses in a destructuring assignment expression, e.g. `var foo; ({foo} = bar);`","        * @param {ASTNode} node An AssignmentExpression or AssignmentPattern node","        * @returns {undefined}","        */","        function checkDestructuringAssignment(node) {","            if (node.right.type === \"Identifier\") {","                const objectName = node.right.name;","","                if (node.left.type === \"ObjectPattern\") {","                    node.left.properties.forEach(property => {","                        checkPropertyAccess(node.left, objectName, astUtils.getStaticPropertyName(property));","                    });","                }","            }","        }","","        return {","            MemberExpression(node) {","                checkPropertyAccess(node, node.object && node.object.name, astUtils.getStaticPropertyName(node));","            },","            VariableDeclarator(node) {","                if (node.init && node.init.type === \"Identifier\") {","                    const objectName = node.init.name;","","                    if (node.id.type === \"ObjectPattern\") {","                        node.id.properties.forEach(property => {","                            checkPropertyAccess(node.id, objectName, astUtils.getStaticPropertyName(property));","                        });","                    }","                }","            },","            AssignmentExpression: checkDestructuringAssignment,","            AssignmentPattern: checkDestructuringAssignment","        };","    }","};",""],"l":{"8":1,"14":1,"65":0,"67":0,"68":0,"71":0,"72":0,"73":0,"75":0,"76":0,"77":0,"79":0,"80":0,"81":0,"82":0,"84":0,"85":0,"88":0,"101":1,"102":0,"103":0,"105":0,"106":0,"107":0,"109":0,"110":0,"113":0,"118":0,"119":0,"122":0,"134":1,"135":0,"136":0,"138":0,"139":0,"140":0,"146":0,"148":0,"151":0,"152":0,"154":0,"155":0,"156":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-syntax.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-restricted-syntax.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":42,"loc":{"start":{"line":42,"column":10},"end":{"line":42,"column":20}}},"2":{"name":"(anonymous_2)","line":51,"loc":{"start":{"line":51,"column":26},"end":{"line":51,"column":33}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":62,"column":2}},"2":{"start":{"line":43,"column":8},"end":{"line":59,"column":15}},"3":{"start":{"line":44,"column":12},"end":{"line":44,"column":74}},"4":{"start":{"line":45,"column":12},"end":{"line":45,"column":90}},"5":{"start":{"line":47,"column":12},"end":{"line":47,"column":91}},"6":{"start":{"line":48,"column":12},"end":{"line":48,"column":113}},"7":{"start":{"line":50,"column":12},"end":{"line":58,"column":15}},"8":{"start":{"line":52,"column":20},"end":{"line":56,"column":23}}},"branchMap":{"1":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":37},"end":{"line":45,"column":52}},{"start":{"line":45,"column":56},"end":{"line":45,"column":89}}]},"2":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":46},"end":{"line":47,"column":62}},{"start":{"line":47,"column":65},"end":{"line":47,"column":90}}]},"3":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":47},"end":{"line":48,"column":71}},{"start":{"line":48,"column":74},"end":{"line":48,"column":112}}]},"4":{"line":55,"type":"cond-expr","locations":[{"start":{"line":55,"column":49},"end":{"line":55,"column":51}},{"start":{"line":55,"column":54},"end":{"line":55,"column":66}}]}},"code":["/**"," * @fileoverview Rule to flag use of certain node types"," * @author Burak Yigit Kaya"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow specified syntax\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: {","            type: \"array\",","            items: [{","                oneOf: [","                    {","                        type: \"string\"","                    },","                    {","                        type: \"object\",","                        properties: {","                            selector: { type: \"string\" },","                            message: { type: \"string\" }","                        },","                        required: [\"selector\"],","                        additionalProperties: false","                    }","                ]","            }],","            uniqueItems: true,","            minItems: 0","        }","    },","","    create(context) {","        return context.options.reduce((result, selectorOrObject) => {","            const isStringFormat = (typeof selectorOrObject === \"string\");","            const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);","","            const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;","            const message = hasCustomMessage ? selectorOrObject.message : \"Using '{{selector}}' is not allowed.\";","","            return Object.assign(result, {","                [selector](node) {","                    context.report({","                        node,","                        message,","                        data: hasCustomMessage ? {} : { selector }","                    });","                }","            });","        }, {});","","    }","};",""],"l":{"11":1,"43":0,"44":0,"45":0,"47":0,"48":0,"50":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-return-assign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-return-assign.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":38,"loc":{"start":{"line":38,"column":10},"end":{"line":38,"column":20}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":32},"end":{"line":43,"column":39}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":109}},"3":{"start":{"line":23,"column":0},"end":{"line":71,"column":2}},"4":{"start":{"line":39,"column":8},"end":{"line":39,"column":83}},"5":{"start":{"line":40,"column":8},"end":{"line":40,"column":51}},"6":{"start":{"line":42,"column":8},"end":{"line":69,"column":10}},"7":{"start":{"line":44,"column":16},"end":{"line":46,"column":17}},"8":{"start":{"line":45,"column":20},"end":{"line":45,"column":27}},"9":{"start":{"line":48,"column":16},"end":{"line":48,"column":41}},"10":{"start":{"line":51,"column":16},"end":{"line":54,"column":17}},"11":{"start":{"line":52,"column":20},"end":{"line":52,"column":34}},"12":{"start":{"line":53,"column":20},"end":{"line":53,"column":43}},"13":{"start":{"line":57,"column":16},"end":{"line":67,"column":17}},"14":{"start":{"line":58,"column":20},"end":{"line":61,"column":23}},"15":{"start":{"line":62,"column":23},"end":{"line":67,"column":17}},"16":{"start":{"line":63,"column":20},"end":{"line":66,"column":23}}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":24},"end":{"line":39,"column":42}},{"start":{"line":39,"column":46},"end":{"line":39,"column":61}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":16}},{"start":{"line":44,"column":16},"end":{"line":44,"column":16}}]},"3":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":20},"end":{"line":44,"column":27}},{"start":{"line":44,"column":31},"end":{"line":44,"column":73}}]},"4":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":23},"end":{"line":51,"column":29}},{"start":{"line":51,"column":33},"end":{"line":51,"column":65}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":16}},{"start":{"line":57,"column":16},"end":{"line":57,"column":16}}]},"6":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":20},"end":{"line":57,"column":26}},{"start":{"line":57,"column":30},"end":{"line":57,"column":63}}]},"7":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":23},"end":{"line":62,"column":23}},{"start":{"line":62,"column":23},"end":{"line":62,"column":23}}]},"8":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":27},"end":{"line":62,"column":33}},{"start":{"line":62,"column":37},"end":{"line":62,"column":78}},{"start":{"line":62,"column":82},"end":{"line":62,"column":102}}]}},"code":["/**"," * @fileoverview Rule to flag when return statement contains assignment"," * @author Ilya Volodin"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/;","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow assignment operators in `return` statements\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"except-parens\", \"always\"]","            }","        ]","    },","","    create(context) {","        const always = (context.options[0] || \"except-parens\") !== \"except-parens\";","        const sourceCode = context.getSourceCode();","","        return {","            AssignmentExpression(node) {","                if (!always && astUtils.isParenthesised(sourceCode, node)) {","                    return;","                }","","                let parent = node.parent;","","                // Find ReturnStatement or ArrowFunctionExpression in ancestors.","                while (parent && !SENTINEL_TYPE.test(parent.type)) {","                    node = parent;","                    parent = parent.parent;","                }","","                // Reports.","                if (parent && parent.type === \"ReturnStatement\") {","                    context.report({","                        node: parent,","                        message: \"Return statement should not contain assignment.\"","                    });","                } else if (parent && parent.type === \"ArrowFunctionExpression\" && parent.body === node) {","                    context.report({","                        node: parent,","                        message: \"Arrow function should not return assignment.\"","                    });","                }","            }","        };","    }","};",""],"l":{"11":1,"17":1,"23":1,"39":0,"40":0,"42":0,"44":0,"45":0,"48":0,"51":0,"52":0,"53":0,"57":0,"58":0,"62":0,"63":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-return-await.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-return-await.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":10},"end":{"line":27,"column":20}}},"2":{"name":"reportUnnecessaryAwait","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":46}}},"3":{"name":"hasErrorHandler","line":49,"loc":{"start":{"line":49,"column":8},"end":{"line":49,"column":39}}},"4":{"name":"isInTailCallPosition","line":67,"loc":{"start":{"line":67,"column":8},"end":{"line":67,"column":44}}},"5":{"name":"(anonymous_5)","line":87,"loc":{"start":{"line":87,"column":27},"end":{"line":87,"column":34}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":62}},"3":{"start":{"line":15,"column":0},"end":{"line":94,"column":2}},"4":{"start":{"line":34,"column":8},"end":{"line":40,"column":9}},"5":{"start":{"line":35,"column":12},"end":{"line":39,"column":15}},"6":{"start":{"line":49,"column":8},"end":{"line":59,"column":9}},"7":{"start":{"line":50,"column":12},"end":{"line":50,"column":32}},"8":{"start":{"line":52,"column":12},"end":{"line":57,"column":13}},"9":{"start":{"line":53,"column":16},"end":{"line":55,"column":17}},"10":{"start":{"line":54,"column":20},"end":{"line":54,"column":32}},"11":{"start":{"line":56,"column":16},"end":{"line":56,"column":43}},"12":{"start":{"line":58,"column":12},"end":{"line":58,"column":25}},"13":{"start":{"line":67,"column":8},"end":{"line":84,"column":9}},"14":{"start":{"line":68,"column":12},"end":{"line":70,"column":13}},"15":{"start":{"line":69,"column":16},"end":{"line":69,"column":28}},"16":{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},"17":{"start":{"line":72,"column":16},"end":{"line":72,"column":53}},"18":{"start":{"line":74,"column":12},"end":{"line":76,"column":13}},"19":{"start":{"line":75,"column":16},"end":{"line":75,"column":57}},"20":{"start":{"line":77,"column":12},"end":{"line":79,"column":13}},"21":{"start":{"line":78,"column":16},"end":{"line":78,"column":57}},"22":{"start":{"line":80,"column":12},"end":{"line":82,"column":13}},"23":{"start":{"line":81,"column":16},"end":{"line":81,"column":57}},"24":{"start":{"line":83,"column":12},"end":{"line":83,"column":25}},"25":{"start":{"line":86,"column":8},"end":{"line":92,"column":10}},"26":{"start":{"line":88,"column":16},"end":{"line":90,"column":17}},"27":{"start":{"line":89,"column":20},"end":{"line":89,"column":49}}},"branchMap":{"1":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":19},"end":{"line":52,"column":49}},{"start":{"line":52,"column":53},"end":{"line":52,"column":80}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":16}},{"start":{"line":53,"column":16},"end":{"line":53,"column":16}}]},"3":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":20},"end":{"line":53,"column":59}},{"start":{"line":53,"column":64},"end":{"line":53,"column":98}},{"start":{"line":53,"column":102},"end":{"line":53,"column":138}},{"start":{"line":53,"column":142},"end":{"line":53,"column":167}}]},"4":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":12}},{"start":{"line":68,"column":12},"end":{"line":68,"column":12}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":12},"end":{"line":71,"column":12}},{"start":{"line":71,"column":12},"end":{"line":71,"column":12}}]},"6":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":12},"end":{"line":74,"column":12}},{"start":{"line":74,"column":12},"end":{"line":74,"column":12}}]},"7":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":16},"end":{"line":74,"column":60}},{"start":{"line":74,"column":65},"end":{"line":74,"column":96}},{"start":{"line":74,"column":100},"end":{"line":74,"column":130}}]},"8":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":12},"end":{"line":77,"column":12}},{"start":{"line":77,"column":12},"end":{"line":77,"column":12}}]},"9":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":16},"end":{"line":77,"column":56}},{"start":{"line":77,"column":60},"end":{"line":77,"column":86}}]},"10":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":12},"end":{"line":80,"column":12}},{"start":{"line":80,"column":12},"end":{"line":80,"column":12}}]},"11":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":16},"end":{"line":80,"column":57}},{"start":{"line":80,"column":61},"end":{"line":80,"column":129}}]},"12":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":16},"end":{"line":88,"column":16}},{"start":{"line":88,"column":16},"end":{"line":88,"column":16}}]},"13":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":20},"end":{"line":88,"column":46}},{"start":{"line":88,"column":50},"end":{"line":88,"column":72}}]}},"code":["/**"," * @fileoverview Disallows unnecessary `return await`"," * @author Jordan Harband"," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const message = \"Redundant use of `await` on a return value.\";","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary `return await`\",","            category: \"Best Practices\",","            recommended: false // TODO: set to true","        },","        fixable: null,","        schema: [","        ]","    },","","    create(context) {","","        /**","         * Reports a found unnecessary `await` expression.","         * @param {ASTNode} node The node representing the `await` expression to report","         * @returns {void}","         */","        function reportUnnecessaryAwait(node) {","            context.report({","                node: context.getSourceCode().getFirstToken(node),","                loc: node.loc,","                message","            });","        }","","        /**","        * Determines whether a thrown error from this node will be caught/handled within this function rather than immediately halting","        * this function. For example, a statement in a `try` block will always have an error handler. A statement in","        * a `catch` block will only have an error handler if there is also a `finally` block.","        * @param {ASTNode} node A node representing a location where an could be thrown","        * @returns {boolean} `true` if a thrown error will be caught/handled in this function","        */","        function hasErrorHandler(node) {","            let ancestor = node;","","            while (!astUtils.isFunction(ancestor) && ancestor.type !== \"Program\") {","                if (ancestor.parent.type === \"TryStatement\" && (ancestor === ancestor.parent.block || ancestor === ancestor.parent.handler && ancestor.parent.finalizer)) {","                    return true;","                }","                ancestor = ancestor.parent;","            }","            return false;","        }","","        /**","         * Checks if a node is placed in tail call position. Once `return` arguments (or arrow function expressions) can be a complex expression,","         * an `await` expression could or could not be unnecessary by the definition of this rule. So we're looking for `await` expressions that are in tail position.","         * @param {ASTNode} node A node representing the `await` expression to check","         * @returns {boolean} The checking result","         */","        function isInTailCallPosition(node) {","            if (node.parent.type === \"ArrowFunctionExpression\") {","                return true;","            }","            if (node.parent.type === \"ReturnStatement\") {","                return !hasErrorHandler(node.parent);","            }","            if (node.parent.type === \"ConditionalExpression\" && (node === node.parent.consequent || node === node.parent.alternate)) {","                return isInTailCallPosition(node.parent);","            }","            if (node.parent.type === \"LogicalExpression\" && node === node.parent.right) {","                return isInTailCallPosition(node.parent);","            }","            if (node.parent.type === \"SequenceExpression\" && node === node.parent.expressions[node.parent.expressions.length - 1]) {","                return isInTailCallPosition(node.parent);","            }","            return false;","        }","","        return {","            AwaitExpression(node) {","                if (isInTailCallPosition(node) && !hasErrorHandler(node)) {","                    reportUnnecessaryAwait(node);","                }","            }","        };","    }","};",""],"l":{"7":1,"13":1,"15":1,"34":1,"35":0,"49":1,"50":0,"52":0,"53":0,"54":0,"56":0,"58":0,"67":1,"68":0,"69":0,"71":0,"72":0,"74":0,"75":0,"77":0,"78":0,"80":0,"81":0,"83":0,"86":0,"88":0,"89":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-script-url.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-script-url.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":19},"end":{"line":29,"column":26}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":41,"column":2}},"2":{"start":{"line":27,"column":8},"end":{"line":38,"column":10}},"3":{"start":{"line":30,"column":16},"end":{"line":36,"column":17}},"4":{"start":{"line":31,"column":20},"end":{"line":31,"column":59}},"5":{"start":{"line":33,"column":20},"end":{"line":35,"column":21}},"6":{"start":{"line":34,"column":24},"end":{"line":34,"column":91}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":16}},{"start":{"line":30,"column":16},"end":{"line":30,"column":16}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":20},"end":{"line":30,"column":30}},{"start":{"line":30,"column":34},"end":{"line":30,"column":64}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":20},"end":{"line":33,"column":20}},{"start":{"line":33,"column":20},"end":{"line":33,"column":20}}]}},"code":["/**"," * @fileoverview Rule to flag when using javascript: urls"," * @author Ilya Volodin"," */","/* jshint scripturl: true */","/* eslint no-script-url: 0 */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `javascript:` urls\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            Literal(node) {","                if (node.value && typeof node.value === \"string\") {","                    const value = node.value.toLowerCase();","","                    if (value.indexOf(\"javascript:\") === 0) {","                        context.report({ node, message: \"Script URL is a form of eval.\" });","                    }","                }","            }","        };","","    }","};",""],"l":{"14":1,"27":0,"30":0,"31":0,"33":0,"34":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-self-assign.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-self-assign.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0,0],"23":[0,0],"24":[0,0,0,0],"25":[0,0],"26":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"isSameProperty","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":37}}},"2":{"name":"isSameMember","line":52,"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":35}}},"3":{"name":"eachSelfAssignment","line":80,"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":56}}},"4":{"name":"(anonymous_4)","line":183,"loc":{"start":{"line":183,"column":10},"end":{"line":183,"column":20}}},"5":{"name":"report","line":194,"loc":{"start":{"line":194,"column":8},"end":{"line":194,"column":30}}},"6":{"name":"(anonymous_6)","line":205,"loc":{"start":{"line":205,"column":32},"end":{"line":205,"column":39}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":22}},"3":{"start":{"line":28,"column":0},"end":{"line":41,"column":1}},"4":{"start":{"line":29,"column":4},"end":{"line":35,"column":5}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":20}},"6":{"start":{"line":37,"column":4},"end":{"line":37,"column":55}},"7":{"start":{"line":38,"column":4},"end":{"line":38,"column":56}},"8":{"start":{"line":40,"column":4},"end":{"line":40,"column":45}},"9":{"start":{"line":52,"column":0},"end":{"line":67,"column":1}},"10":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"11":{"start":{"line":54,"column":8},"end":{"line":54,"column":21}},"12":{"start":{"line":57,"column":4},"end":{"line":57,"column":29}},"13":{"start":{"line":58,"column":4},"end":{"line":58,"column":30}},"14":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"15":{"start":{"line":61,"column":8},"end":{"line":61,"column":21}},"16":{"start":{"line":63,"column":4},"end":{"line":65,"column":5}},"17":{"start":{"line":64,"column":8},"end":{"line":64,"column":40}},"18":{"start":{"line":66,"column":4},"end":{"line":66,"column":65}},"19":{"start":{"line":80,"column":0},"end":{"line":156,"column":1}},"20":{"start":{"line":81,"column":4},"end":{"line":155,"column":5}},"21":{"start":{"line":84,"column":11},"end":{"line":155,"column":5}},"22":{"start":{"line":89,"column":8},"end":{"line":89,"column":22}},"23":{"start":{"line":90,"column":11},"end":{"line":155,"column":5}},"24":{"start":{"line":94,"column":8},"end":{"line":94,"column":74}},"25":{"start":{"line":96,"column":8},"end":{"line":105,"column":9}},"26":{"start":{"line":97,"column":12},"end":{"line":97,"column":51}},"27":{"start":{"line":99,"column":12},"end":{"line":99,"column":78}},"28":{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},"29":{"start":{"line":103,"column":16},"end":{"line":103,"column":22}},"30":{"start":{"line":106,"column":11},"end":{"line":155,"column":5}},"31":{"start":{"line":110,"column":8},"end":{"line":110,"column":73}},"32":{"start":{"line":111,"column":11},"end":{"line":155,"column":5}},"33":{"start":{"line":119,"column":8},"end":{"line":119,"column":23}},"34":{"start":{"line":121,"column":8},"end":{"line":126,"column":9}},"35":{"start":{"line":122,"column":12},"end":{"line":125,"column":13}},"36":{"start":{"line":123,"column":16},"end":{"line":123,"column":31}},"37":{"start":{"line":124,"column":16},"end":{"line":124,"column":22}},"38":{"start":{"line":128,"column":8},"end":{"line":137,"column":9}},"39":{"start":{"line":129,"column":12},"end":{"line":136,"column":13}},"40":{"start":{"line":130,"column":16},"end":{"line":135,"column":18}},"41":{"start":{"line":138,"column":11},"end":{"line":155,"column":5}},"42":{"start":{"line":147,"column":8},"end":{"line":147,"column":67}},"43":{"start":{"line":148,"column":11},"end":{"line":155,"column":5}},"44":{"start":{"line":154,"column":8},"end":{"line":154,"column":22}},"45":{"start":{"line":162,"column":0},"end":{"line":212,"column":2}},"46":{"start":{"line":184,"column":8},"end":{"line":184,"column":51}},"47":{"start":{"line":185,"column":8},"end":{"line":185,"column":43}},"48":{"start":{"line":186,"column":8},"end":{"line":186,"column":56}},"49":{"start":{"line":194,"column":8},"end":{"line":202,"column":9}},"50":{"start":{"line":195,"column":12},"end":{"line":201,"column":15}},"51":{"start":{"line":204,"column":8},"end":{"line":210,"column":10}},"52":{"start":{"line":206,"column":16},"end":{"line":208,"column":17}},"53":{"start":{"line":207,"column":20},"end":{"line":207,"column":77}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":8},"end":{"line":29,"column":43}},{"start":{"line":30,"column":8},"end":{"line":30,"column":50}},{"start":{"line":31,"column":8},"end":{"line":31,"column":50}},{"start":{"line":32,"column":8},"end":{"line":32,"column":40}}]},"3":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":11},"end":{"line":40,"column":25}},{"start":{"line":40,"column":29},"end":{"line":40,"column":44}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":60,"column":4}},{"start":{"line":60,"column":4},"end":{"line":60,"column":4}}]},"6":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":4},"end":{"line":63,"column":4}},{"start":{"line":63,"column":4},"end":{"line":63,"column":4}}]},"7":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":11},"end":{"line":66,"column":37}},{"start":{"line":66,"column":41},"end":{"line":66,"column":64}}]},"8":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"9":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":13}},{"start":{"line":81,"column":17},"end":{"line":81,"column":23}}]},"10":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":11},"end":{"line":84,"column":11}},{"start":{"line":84,"column":11},"end":{"line":84,"column":11}}]},"11":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":34}},{"start":{"line":86,"column":8},"end":{"line":86,"column":35}},{"start":{"line":87,"column":8},"end":{"line":87,"column":32}}]},"12":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":11},"end":{"line":90,"column":11}},{"start":{"line":90,"column":11},"end":{"line":90,"column":11}}]},"13":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":8},"end":{"line":91,"column":36}},{"start":{"line":92,"column":8},"end":{"line":92,"column":40}}]},"14":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":102,"column":12}},{"start":{"line":102,"column":12},"end":{"line":102,"column":12}}]},"15":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":16},"end":{"line":102,"column":28}},{"start":{"line":102,"column":32},"end":{"line":102,"column":69}}]},"16":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":11},"end":{"line":106,"column":11}},{"start":{"line":106,"column":11},"end":{"line":106,"column":11}}]},"17":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":8},"end":{"line":107,"column":35}},{"start":{"line":108,"column":8},"end":{"line":108,"column":38}}]},"18":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":11},"end":{"line":111,"column":11}},{"start":{"line":111,"column":11},"end":{"line":111,"column":11}}]},"19":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":8},"end":{"line":112,"column":37}},{"start":{"line":113,"column":8},"end":{"line":113,"column":41}},{"start":{"line":114,"column":8},"end":{"line":114,"column":36}}]},"20":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":12}},{"start":{"line":122,"column":12},"end":{"line":122,"column":12}}]},"21":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":11},"end":{"line":138,"column":11}},{"start":{"line":138,"column":11},"end":{"line":138,"column":11}}]},"22":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":8},"end":{"line":139,"column":32}},{"start":{"line":140,"column":8},"end":{"line":140,"column":33}},{"start":{"line":141,"column":8},"end":{"line":141,"column":22}},{"start":{"line":142,"column":8},"end":{"line":142,"column":23}},{"start":{"line":143,"column":8},"end":{"line":143,"column":29}},{"start":{"line":144,"column":8},"end":{"line":144,"column":21}},{"start":{"line":145,"column":8},"end":{"line":145,"column":40}}]},"23":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":11},"end":{"line":148,"column":11}},{"start":{"line":148,"column":11},"end":{"line":148,"column":11}}]},"24":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":8},"end":{"line":149,"column":13}},{"start":{"line":150,"column":8},"end":{"line":150,"column":40}},{"start":{"line":151,"column":8},"end":{"line":151,"column":41}},{"start":{"line":152,"column":8},"end":{"line":152,"column":33}}]},"25":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":30},"end":{"line":186,"column":37}},{"start":{"line":186,"column":41},"end":{"line":186,"column":54}}]},"26":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":16},"end":{"line":206,"column":16}},{"start":{"line":206,"column":16},"end":{"line":206,"column":16}}]}},"code":["/**"," * @fileoverview Rule to disallow assignments where both sides are exactly the same"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const SPACES = /\\s+/g;","","/**"," * Checks whether the property of 2 given member expression nodes are the same"," * property or not."," *"," * @param {ASTNode} left - A member expression node to check."," * @param {ASTNode} right - Another member expression node to check."," * @returns {boolean} `true` if the member expressions have the same property."," */","function isSameProperty(left, right) {","    if (left.property.type === \"Identifier\" &&","        left.property.type === right.property.type &&","        left.property.name === right.property.name &&","        left.computed === right.computed","    ) {","        return true;","    }","","    const lname = astUtils.getStaticPropertyName(left);","    const rname = astUtils.getStaticPropertyName(right);","","    return lname !== null && lname === rname;","}","","/**"," * Checks whether 2 given member expression nodes are the reference to the same"," * property or not."," *"," * @param {ASTNode} left - A member expression node to check."," * @param {ASTNode} right - Another member expression node to check."," * @returns {boolean} `true` if the member expressions are the reference to the"," *  same property or not."," */","function isSameMember(left, right) {","    if (!isSameProperty(left, right)) {","        return false;","    }","","    const lobj = left.object;","    const robj = right.object;","","    if (lobj.type !== robj.type) {","        return false;","    }","    if (lobj.type === \"MemberExpression\") {","        return isSameMember(lobj, robj);","    }","    return lobj.type === \"Identifier\" && lobj.name === robj.name;","}","","/**"," * Traverses 2 Pattern nodes in parallel, then reports self-assignments."," *"," * @param {ASTNode|null} left - A left node to traverse. This is a Pattern or"," *      a Property."," * @param {ASTNode|null} right - A right node to traverse. This is a Pattern or"," *      a Property."," * @param {boolean} props - The flag to check member expressions as well."," * @param {Function} report - A callback function to report."," * @returns {void}"," */","function eachSelfAssignment(left, right, props, report) {","    if (!left || !right) {","","        // do nothing","    } else if (","        left.type === \"Identifier\" &&","        right.type === \"Identifier\" &&","        left.name === right.name","    ) {","        report(right);","    } else if (","        left.type === \"ArrayPattern\" &&","        right.type === \"ArrayExpression\"","    ) {","        const end = Math.min(left.elements.length, right.elements.length);","","        for (let i = 0; i < end; ++i) {","            const rightElement = right.elements[i];","","            eachSelfAssignment(left.elements[i], rightElement, props, report);","","            // After a spread element, those indices are unknown.","            if (rightElement && rightElement.type === \"SpreadElement\") {","                break;","            }","        }","    } else if (","        left.type === \"RestElement\" &&","        right.type === \"SpreadElement\"","    ) {","        eachSelfAssignment(left.argument, right.argument, props, report);","    } else if (","        left.type === \"ObjectPattern\" &&","        right.type === \"ObjectExpression\" &&","        right.properties.length >= 1","    ) {","","        // Gets the index of the last spread property.","        // It's possible to overwrite properties followed by it.","        let startJ = 0;","","        for (let i = right.properties.length - 1; i >= 0; --i) {","            if (right.properties[i].type === \"ExperimentalSpreadProperty\") {","                startJ = i + 1;","                break;","            }","        }","","        for (let i = 0; i < left.properties.length; ++i) {","            for (let j = startJ; j < right.properties.length; ++j) {","                eachSelfAssignment(","                    left.properties[i],","                    right.properties[j],","                    props,","                    report","                );","            }","        }","    } else if (","        left.type === \"Property\" &&","        right.type === \"Property\" &&","        !left.computed &&","        !right.computed &&","        right.kind === \"init\" &&","        !right.method &&","        left.key.name === right.key.name","    ) {","        eachSelfAssignment(left.value, right.value, props, report);","    } else if (","        props &&","        left.type === \"MemberExpression\" &&","        right.type === \"MemberExpression\" &&","        isSameMember(left, right)","    ) {","        report(right);","    }","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow assignments where both sides are exactly the same\",","            category: \"Best Practices\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    props: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        const options = context.options[0];","        const props = Boolean(options && options.props);","","        /**","         * Reports a given node as self assignments.","         *","         * @param {ASTNode} node - A node to report. This is an Identifier node.","         * @returns {void}","         */","        function report(node) {","            context.report({","                node,","                message: \"'{{name}}' is assigned to itself.\",","                data: {","                    name: sourceCode.getText(node).replace(SPACES, \"\")","                }","            });","        }","","        return {","            AssignmentExpression(node) {","                if (node.operator === \"=\") {","                    eachSelfAssignment(node.left, node.right, props, report);","                }","            }","        };","    }","};",""],"l":{"12":1,"18":1,"28":1,"29":0,"34":0,"37":0,"38":0,"40":0,"52":1,"53":0,"54":0,"57":0,"58":0,"60":0,"61":0,"63":0,"64":0,"66":0,"80":1,"81":0,"84":0,"89":0,"90":0,"94":0,"96":0,"97":0,"99":0,"102":0,"103":0,"106":0,"110":0,"111":0,"119":0,"121":0,"122":0,"123":0,"124":0,"128":0,"129":0,"130":0,"138":0,"147":0,"148":0,"154":0,"162":1,"184":0,"185":0,"186":0,"194":1,"195":0,"204":0,"206":0,"207":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-self-compare.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-self-compare.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0,0,0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":10},"end":{"line":24,"column":20}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":28},"end":{"line":28,"column":35}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":40,"column":2}},"2":{"start":{"line":26,"column":8},"end":{"line":37,"column":10}},"3":{"start":{"line":29,"column":16},"end":{"line":29,"column":83}},"4":{"start":{"line":31,"column":16},"end":{"line":35,"column":17}},"5":{"start":{"line":34,"column":20},"end":{"line":34,"column":103}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":16},"end":{"line":31,"column":16}},{"start":{"line":31,"column":16},"end":{"line":31,"column":16}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":20},"end":{"line":31,"column":57}},{"start":{"line":32,"column":21},"end":{"line":32,"column":52}},{"start":{"line":32,"column":56},"end":{"line":32,"column":88}},{"start":{"line":32,"column":92},"end":{"line":32,"column":126}},{"start":{"line":33,"column":20},"end":{"line":33,"column":48}},{"start":{"line":33,"column":52},"end":{"line":33,"column":81}},{"start":{"line":33,"column":85},"end":{"line":33,"column":121}}]}},"code":["/**"," * @fileoverview Rule to flag comparison where left part is the same as the right"," * part."," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow comparisons where both sides are exactly the same\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            BinaryExpression(node) {","                const operators = [\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"];","","                if (operators.indexOf(node.operator) > -1 &&","                    (node.left.type === \"Identifier\" && node.right.type === \"Identifier\" && node.left.name === node.right.name ||","                    node.left.type === \"Literal\" && node.right.type === \"Literal\" && node.left.value === node.right.value)) {","                    context.report({ node, message: \"Comparing to itself is potentially pointless.\" });","                }","            }","        };","","    }","};",""],"l":{"13":1,"26":0,"29":0,"31":0,"34":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-sequences.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-sequences.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0,0],"2":[0,0,0,0,0,0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":20}}},"2":{"name":"requiresExtraParens","line":55,"loc":{"start":{"line":55,"column":8},"end":{"line":55,"column":43}}},"3":{"name":"isParenthesised","line":65,"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":39}}},"4":{"name":"isParenthesisedTwice","line":74,"loc":{"start":{"line":74,"column":8},"end":{"line":74,"column":44}}},"5":{"name":"(anonymous_5)","line":84,"loc":{"start":{"line":84,"column":30},"end":{"line":84,"column":37}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":110,"column":2}},"3":{"start":{"line":30,"column":8},"end":{"line":30,"column":51}},"4":{"start":{"line":35,"column":8},"end":{"line":47,"column":10}},"5":{"start":{"line":55,"column":8},"end":{"line":58,"column":9}},"6":{"start":{"line":56,"column":12},"end":{"line":57,"column":74}},"7":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"8":{"start":{"line":66,"column":12},"end":{"line":66,"column":62}},"9":{"start":{"line":74,"column":8},"end":{"line":81,"column":9}},"10":{"start":{"line":75,"column":12},"end":{"line":76,"column":62}},"11":{"start":{"line":78,"column":12},"end":{"line":80,"column":95}},"12":{"start":{"line":83,"column":8},"end":{"line":107,"column":10}},"13":{"start":{"line":87,"column":16},"end":{"line":90,"column":17}},"14":{"start":{"line":89,"column":20},"end":{"line":89,"column":27}},"15":{"start":{"line":93,"column":16},"end":{"line":101,"column":17}},"16":{"start":{"line":94,"column":20},"end":{"line":96,"column":21}},"17":{"start":{"line":95,"column":24},"end":{"line":95,"column":31}},"18":{"start":{"line":98,"column":20},"end":{"line":100,"column":21}},"19":{"start":{"line":99,"column":24},"end":{"line":99,"column":31}},"20":{"start":{"line":103,"column":16},"end":{"line":103,"column":76}},"21":{"start":{"line":105,"column":16},"end":{"line":105,"column":109}}},"branchMap":{"1":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":19},"end":{"line":56,"column":30}},{"start":{"line":56,"column":34},"end":{"line":56,"column":65}},{"start":{"line":57,"column":20},"end":{"line":57,"column":73}}]},"2":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":19},"end":{"line":78,"column":40}},{"start":{"line":78,"column":44},"end":{"line":78,"column":57}},{"start":{"line":78,"column":61},"end":{"line":78,"column":70}},{"start":{"line":79,"column":16},"end":{"line":79,"column":59}},{"start":{"line":79,"column":63},"end":{"line":79,"column":102}},{"start":{"line":80,"column":16},"end":{"line":80,"column":55}},{"start":{"line":80,"column":59},"end":{"line":80,"column":94}}]},"3":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":16},"end":{"line":87,"column":16}},{"start":{"line":87,"column":16},"end":{"line":87,"column":16}}]},"4":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":20},"end":{"line":87,"column":55}},{"start":{"line":88,"column":25},"end":{"line":88,"column":50}},{"start":{"line":88,"column":54},"end":{"line":88,"column":81}}]},"5":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":16}},{"start":{"line":93,"column":16},"end":{"line":93,"column":16}}]},"6":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":20},"end":{"line":94,"column":20}},{"start":{"line":94,"column":20},"end":{"line":94,"column":20}}]},"7":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":20},"end":{"line":98,"column":20}},{"start":{"line":98,"column":20},"end":{"line":98,"column":20}}]}},"code":["/**"," * @fileoverview Rule to flag use of comma operator"," * @author Brandon Mills"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow comma operators\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        /**","         * Parts of the grammar that are required to have parens.","         */","        const parenthesized = {","            DoWhileStatement: \"test\",","            IfStatement: \"test\",","            SwitchStatement: \"discriminant\",","            WhileStatement: \"test\",","            WithStatement: \"object\",","            ArrowFunctionExpression: \"body\"","","            // Omitting CallExpression - commas are parsed as argument separators","            // Omitting NewExpression - commas are parsed as argument separators","            // Omitting ForInStatement - parts aren't individually parenthesised","            // Omitting ForStatement - parts aren't individually parenthesised","        };","","        /**","         * Determines whether a node is required by the grammar to be wrapped in","         * parens, e.g. the test of an if statement.","         * @param {ASTNode} node - The AST node","         * @returns {boolean} True if parens around node belong to parent node.","         */","        function requiresExtraParens(node) {","            return node.parent && parenthesized[node.parent.type] &&","                    node === node.parent[parenthesized[node.parent.type]];","        }","","        /**","         * Check if a node is wrapped in parens.","         * @param {ASTNode} node - The AST node","         * @returns {boolean} True if the node has a paren on each side.","         */","        function isParenthesised(node) {","            return astUtils.isParenthesised(sourceCode, node);","        }","","        /**","         * Check if a node is wrapped in two levels of parens.","         * @param {ASTNode} node - The AST node","         * @returns {boolean} True if two parens surround the node on each side.","         */","        function isParenthesisedTwice(node) {","            const previousToken = sourceCode.getTokenBefore(node, 1),","                nextToken = sourceCode.getTokenAfter(node, 1);","","            return isParenthesised(node) && previousToken && nextToken &&","                astUtils.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] &&","                astUtils.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];","        }","","        return {","            SequenceExpression(node) {","","                // Always allow sequences in for statement update","                if (node.parent.type === \"ForStatement\" &&","                        (node === node.parent.init || node === node.parent.update)) {","                    return;","                }","","                // Wrapping a sequence in extra parens indicates intent","                if (requiresExtraParens(node)) {","                    if (isParenthesisedTwice(node)) {","                        return;","                    }","                } else {","                    if (isParenthesised(node)) {","                        return;","                    }","                }","","                const child = sourceCode.getTokenAfter(node.expressions[0]);","","                context.report({ node, loc: child.loc.start, message: \"Unexpected use of comma operator.\" });","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"30":0,"35":0,"55":1,"56":0,"65":1,"66":0,"74":1,"75":0,"78":0,"83":0,"87":0,"89":0,"93":0,"94":0,"95":0,"98":0,"99":0,"103":0,"105":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-shadow-restricted-names.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-shadow-restricted-names.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"checkForViolation","line":32,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":39}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":30},"end":{"line":45,"column":37}}},"4":{"name":"(anonymous_4)","line":48,"loc":{"start":{"line":48,"column":35},"end":{"line":48,"column":42}}},"5":{"name":"(anonymous_5)","line":51,"loc":{"start":{"line":51,"column":30},"end":{"line":51,"column":37}}},"6":{"name":"(anonymous_6)","line":57,"loc":{"start":{"line":57,"column":31},"end":{"line":57,"column":38}}},"7":{"name":"(anonymous_7)","line":63,"loc":{"start":{"line":63,"column":23},"end":{"line":63,"column":30}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":69,"column":2}},"2":{"start":{"line":24,"column":8},"end":{"line":24,"column":81}},"3":{"start":{"line":32,"column":8},"end":{"line":42,"column":9}},"4":{"start":{"line":33,"column":12},"end":{"line":41,"column":13}},"5":{"start":{"line":34,"column":16},"end":{"line":40,"column":19}},"6":{"start":{"line":44,"column":8},"end":{"line":66,"column":10}},"7":{"start":{"line":46,"column":16},"end":{"line":46,"column":43}},"8":{"start":{"line":49,"column":16},"end":{"line":49,"column":60}},"9":{"start":{"line":52,"column":16},"end":{"line":54,"column":17}},"10":{"start":{"line":53,"column":20},"end":{"line":53,"column":47}},"11":{"start":{"line":55,"column":16},"end":{"line":55,"column":60}},"12":{"start":{"line":58,"column":16},"end":{"line":61,"column":17}},"13":{"start":{"line":59,"column":20},"end":{"line":59,"column":47}},"14":{"start":{"line":60,"column":20},"end":{"line":60,"column":64}},"15":{"start":{"line":64,"column":16},"end":{"line":64,"column":46}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":12}},{"start":{"line":33,"column":12},"end":{"line":33,"column":12}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":16},"end":{"line":52,"column":16}},{"start":{"line":52,"column":16},"end":{"line":52,"column":16}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":16},"end":{"line":58,"column":16}},{"start":{"line":58,"column":16},"end":{"line":58,"column":16}}]}},"code":["/**"," * @fileoverview Disallow shadowing of NaN, undefined, and Infinity (ES5 section 15.1.1)"," * @author Michael Ficarra"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow identifiers from shadowing restricted names\",","            category: \"Variables\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        const RESTRICTED = [\"undefined\", \"NaN\", \"Infinity\", \"arguments\", \"eval\"];","","        /**","         * Check if the node name is present inside the restricted list","         * @param {ASTNode} id id to evaluate","         * @returns {void}","         * @private","         */","        function checkForViolation(id) {","            if (RESTRICTED.indexOf(id.name) > -1) {","                context.report({","                    node: id,","                    message: \"Shadowing of global property '{{idName}}'.\",","                    data: {","                        idName: id.name","                    }","                });","            }","        }","","        return {","            VariableDeclarator(node) {","                checkForViolation(node.id);","            },","            ArrowFunctionExpression(node) {","                [].map.call(node.params, checkForViolation);","            },","            FunctionExpression(node) {","                if (node.id) {","                    checkForViolation(node.id);","                }","                [].map.call(node.params, checkForViolation);","            },","            FunctionDeclaration(node) {","                if (node.id) {","                    checkForViolation(node.id);","                    [].map.call(node.params, checkForViolation);","                }","            },","            CatchClause(node) {","                checkForViolation(node.param);","            }","        };","","    }","};",""],"l":{"11":1,"24":0,"32":1,"33":0,"34":0,"44":0,"46":0,"49":0,"52":0,"53":0,"55":0,"58":0,"59":0,"60":0,"64":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-shadow.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-shadow.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0,0,0,0,0,0,0],"8":[0,0],"9":[0,0,0,0,0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0,0,0,0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":44,"loc":{"start":{"line":44,"column":10},"end":{"line":44,"column":20}}},"2":{"name":"isAllowed","line":58,"loc":{"start":{"line":58,"column":8},"end":{"line":58,"column":37}}},"3":{"name":"isDuplicatedClassNameVariable","line":71,"loc":{"start":{"line":71,"column":8},"end":{"line":71,"column":57}}},"4":{"name":"isOnInitializer","line":87,"loc":{"start":{"line":87,"column":8},"end":{"line":87,"column":53}}},"5":{"name":"getNameRange","line":110,"loc":{"start":{"line":110,"column":8},"end":{"line":110,"column":40}}},"6":{"name":"isInTdz","line":122,"loc":{"start":{"line":122,"column":8},"end":{"line":122,"column":45}}},"7":{"name":"checkForShadows","line":142,"loc":{"start":{"line":142,"column":8},"end":{"line":142,"column":40}}},"8":{"name":"(anonymous_8)","line":174,"loc":{"start":{"line":174,"column":26},"end":{"line":174,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":188,"column":2}},"3":{"start":{"line":46,"column":8},"end":{"line":50,"column":10}},"4":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"5":{"start":{"line":59,"column":12},"end":{"line":59,"column":63}},"6":{"start":{"line":71,"column":8},"end":{"line":75,"column":9}},"7":{"start":{"line":72,"column":12},"end":{"line":72,"column":47}},"8":{"start":{"line":74,"column":12},"end":{"line":74,"column":93}},"9":{"start":{"line":87,"column":8},"end":{"line":103,"column":9}},"10":{"start":{"line":88,"column":12},"end":{"line":88,"column":46}},"11":{"start":{"line":89,"column":12},"end":{"line":89,"column":46}},"12":{"start":{"line":90,"column":12},"end":{"line":90,"column":79}},"13":{"start":{"line":91,"column":12},"end":{"line":91,"column":46}},"14":{"start":{"line":92,"column":12},"end":{"line":92,"column":46}},"15":{"start":{"line":93,"column":12},"end":{"line":93,"column":58}},"16":{"start":{"line":95,"column":12},"end":{"line":102,"column":14}},"17":{"start":{"line":110,"column":8},"end":{"line":114,"column":9}},"18":{"start":{"line":111,"column":12},"end":{"line":111,"column":41}},"19":{"start":{"line":113,"column":12},"end":{"line":113,"column":41}},"20":{"start":{"line":122,"column":8},"end":{"line":135,"column":9}},"21":{"start":{"line":123,"column":12},"end":{"line":123,"column":46}},"22":{"start":{"line":124,"column":12},"end":{"line":124,"column":49}},"23":{"start":{"line":125,"column":12},"end":{"line":125,"column":49}},"24":{"start":{"line":127,"column":12},"end":{"line":134,"column":14}},"25":{"start":{"line":142,"column":8},"end":{"line":171,"column":9}},"26":{"start":{"line":143,"column":12},"end":{"line":143,"column":46}},"27":{"start":{"line":145,"column":12},"end":{"line":170,"column":13}},"28":{"start":{"line":146,"column":16},"end":{"line":146,"column":46}},"29":{"start":{"line":149,"column":16},"end":{"line":154,"column":17}},"30":{"start":{"line":153,"column":20},"end":{"line":153,"column":29}},"31":{"start":{"line":157,"column":16},"end":{"line":157,"column":88}},"32":{"start":{"line":159,"column":16},"end":{"line":169,"column":17}},"33":{"start":{"line":164,"column":20},"end":{"line":168,"column":23}},"34":{"start":{"line":173,"column":8},"end":{"line":185,"column":10}},"35":{"start":{"line":175,"column":16},"end":{"line":175,"column":55}},"36":{"start":{"line":176,"column":16},"end":{"line":176,"column":62}},"37":{"start":{"line":178,"column":16},"end":{"line":183,"column":17}},"38":{"start":{"line":179,"column":20},"end":{"line":179,"column":46}},"39":{"start":{"line":181,"column":20},"end":{"line":181,"column":63}},"40":{"start":{"line":182,"column":20},"end":{"line":182,"column":43}}},"branchMap":{"1":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":36},"end":{"line":47,"column":54}},{"start":{"line":47,"column":58},"end":{"line":47,"column":91}}]},"2":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":20},"end":{"line":48,"column":38}},{"start":{"line":48,"column":42},"end":{"line":48,"column":66}},{"start":{"line":48,"column":71},"end":{"line":48,"column":82}}]},"3":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":20},"end":{"line":49,"column":38}},{"start":{"line":49,"column":42},"end":{"line":49,"column":66}},{"start":{"line":49,"column":71},"end":{"line":49,"column":73}}]},"4":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":19},"end":{"line":74,"column":52}},{"start":{"line":74,"column":56},"end":{"line":74,"column":92}}]},"5":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":26},"end":{"line":90,"column":34}},{"start":{"line":90,"column":38},"end":{"line":90,"column":53}},{"start":{"line":90,"column":57},"end":{"line":90,"column":78}}]},"6":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":26},"end":{"line":93,"column":34}},{"start":{"line":93,"column":38},"end":{"line":93,"column":57}}]},"7":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":21}},{"start":{"line":97,"column":16},"end":{"line":97,"column":21}},{"start":{"line":98,"column":16},"end":{"line":98,"column":35}},{"start":{"line":99,"column":16},"end":{"line":99,"column":35}},{"start":{"line":100,"column":18},"end":{"line":100,"column":50}},{"start":{"line":100,"column":54},"end":{"line":100,"column":97}},{"start":{"line":100,"column":102},"end":{"line":100,"column":142}},{"start":{"line":101,"column":16},"end":{"line":101,"column":47}}]},"8":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":19},"end":{"line":113,"column":22}},{"start":{"line":113,"column":26},"end":{"line":113,"column":40}}]},"9":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":16},"end":{"line":128,"column":21}},{"start":{"line":129,"column":16},"end":{"line":129,"column":21}},{"start":{"line":130,"column":16},"end":{"line":130,"column":35}},{"start":{"line":133,"column":17},"end":{"line":133,"column":46}},{"start":{"line":133,"column":50},"end":{"line":133,"column":59}},{"start":{"line":133,"column":63},"end":{"line":133,"column":107}}]},"10":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":16},"end":{"line":149,"column":16}},{"start":{"line":149,"column":16},"end":{"line":149,"column":16}}]},"11":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":20},"end":{"line":149,"column":53}},{"start":{"line":150,"column":20},"end":{"line":150,"column":59}},{"start":{"line":151,"column":20},"end":{"line":151,"column":39}}]},"12":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":16},"end":{"line":159,"column":16}},{"start":{"line":159,"column":16},"end":{"line":159,"column":16}}]},"13":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":20},"end":{"line":159,"column":28}},{"start":{"line":160,"column":21},"end":{"line":160,"column":52}},{"start":{"line":160,"column":57},"end":{"line":160,"column":79}},{"start":{"line":160,"column":83},"end":{"line":160,"column":106}},{"start":{"line":161,"column":20},"end":{"line":161,"column":56}},{"start":{"line":162,"column":20},"end":{"line":162,"column":77}}]},"14":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":22},"end":{"line":162,"column":45}},{"start":{"line":162,"column":49},"end":{"line":162,"column":76}}]}},"code":["/**"," * @fileoverview Rule to flag on declaring variables already declared in the outer scope"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow variable declarations from shadowing variables declared in the outer scope\",","            category: \"Variables\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    builtinGlobals: { type: \"boolean\" },","                    hoist: { enum: [\"all\", \"functions\", \"never\"] },","                    allow: {","                        type: \"array\",","                        items: {","                            type: \"string\"","                        }","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const options = {","            builtinGlobals: Boolean(context.options[0] && context.options[0].builtinGlobals),","            hoist: (context.options[0] && context.options[0].hoist) || \"functions\",","            allow: (context.options[0] && context.options[0].allow) || []","        };","","        /**","         * Check if variable name is allowed.","         *","         * @param  {ASTNode} variable The variable to check.","         * @returns {boolean} Whether or not the variable name is allowed.","         */","        function isAllowed(variable) {","            return options.allow.indexOf(variable.name) !== -1;","        }","","        /**","         * Checks if a variable of the class name in the class scope of ClassDeclaration.","         *","         * ClassDeclaration creates two variables of its name into its outer scope and its class scope.","         * So we should ignore the variable in the class scope.","         *","         * @param {Object} variable The variable to check.","         * @returns {boolean} Whether or not the variable of the class name in the class scope of ClassDeclaration.","         */","        function isDuplicatedClassNameVariable(variable) {","            const block = variable.scope.block;","","            return block.type === \"ClassDeclaration\" && block.id === variable.identifiers[0];","        }","","        /**","         * Checks if a variable is inside the initializer of scopeVar.","         *","         * To avoid reporting at declarations such as `var a = function a() {};`.","         * But it should report `var a = function(a) {};` or `var a = function() { function a() {} };`.","         *","         * @param {Object} variable The variable to check.","         * @param {Object} scopeVar The scope variable to look for.","         * @returns {boolean} Whether or not the variable is inside initializer of scopeVar.","         */","        function isOnInitializer(variable, scopeVar) {","            const outerScope = scopeVar.scope;","            const outerDef = scopeVar.defs[0];","            const outer = outerDef && outerDef.parent && outerDef.parent.range;","            const innerScope = variable.scope;","            const innerDef = variable.defs[0];","            const inner = innerDef && innerDef.name.range;","","            return (","                outer &&","                inner &&","                outer[0] < inner[0] &&","                inner[1] < outer[1] &&","                ((innerDef.type === \"FunctionName\" && innerDef.node.type === \"FunctionExpression\") || innerDef.node.type === \"ClassExpression\") &&","                outerScope === innerScope.upper","            );","        }","","        /**","         * Get a range of a variable's identifier node.","         * @param {Object} variable The variable to get.","         * @returns {Array|undefined} The range of the variable's identifier node.","         */","        function getNameRange(variable) {","            const def = variable.defs[0];","","            return def && def.name.range;","        }","","        /**","         * Checks if a variable is in TDZ of scopeVar.","         * @param {Object} variable The variable to check.","         * @param {Object} scopeVar The variable of TDZ.","         * @returns {boolean} Whether or not the variable is in TDZ of scopeVar.","         */","        function isInTdz(variable, scopeVar) {","            const outerDef = scopeVar.defs[0];","            const inner = getNameRange(variable);","            const outer = getNameRange(scopeVar);","","            return (","                inner &&","                outer &&","                inner[1] < outer[0] &&","","                // Excepts FunctionDeclaration if is {\"hoist\":\"function\"}.","                (options.hoist !== \"functions\" || !outerDef || outerDef.node.type !== \"FunctionDeclaration\")","            );","        }","","        /**","         * Checks the current context for shadowed variables.","         * @param {Scope} scope - Fixme","         * @returns {void}","         */","        function checkForShadows(scope) {","            const variables = scope.variables;","","            for (let i = 0; i < variables.length; ++i) {","                const variable = variables[i];","","                // Skips \"arguments\" or variables of a class name in the class scope of ClassDeclaration.","                if (variable.identifiers.length === 0 ||","                    isDuplicatedClassNameVariable(variable) ||","                    isAllowed(variable)","                ) {","                    continue;","                }","","                // Gets shadowed variable.","                const shadowed = astUtils.getVariableByName(scope.upper, variable.name);","","                if (shadowed &&","                    (shadowed.identifiers.length > 0 || (options.builtinGlobals && \"writeable\" in shadowed)) &&","                    !isOnInitializer(variable, shadowed) &&","                    !(options.hoist !== \"all\" && isInTdz(variable, shadowed))","                ) {","                    context.report({","                        node: variable.identifiers[0],","                        message: \"'{{name}}' is already declared in the upper scope.\",","                        data: variable","                    });","                }","            }","        }","","        return {","            \"Program:exit\"() {","                const globalScope = context.getScope();","                const stack = globalScope.childScopes.slice();","","                while (stack.length) {","                    const scope = stack.pop();","","                    stack.push.apply(stack, scope.childScopes);","                    checkForShadows(scope);","                }","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"46":0,"58":1,"59":0,"71":1,"72":0,"74":0,"87":1,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"95":0,"110":1,"111":0,"113":0,"122":1,"123":0,"124":0,"125":0,"127":0,"142":1,"143":0,"145":0,"146":0,"149":0,"153":0,"157":0,"159":0,"164":0,"173":0,"175":0,"176":0,"178":0,"179":0,"181":0,"182":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-spaced-func.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-spaced-func.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":28,"loc":{"start":{"line":28,"column":10},"end":{"line":28,"column":20}}},"2":{"name":"detectOpenSpaces","line":38,"loc":{"start":{"line":38,"column":8},"end":{"line":38,"column":40}}},"3":{"name":"(anonymous_3)","line":62,"loc":{"start":{"line":62,"column":23},"end":{"line":62,"column":31}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":75,"column":2}},"2":{"start":{"line":30,"column":8},"end":{"line":30,"column":51}},"3":{"start":{"line":38,"column":8},"end":{"line":67,"column":9}},"4":{"start":{"line":39,"column":12},"end":{"line":39,"column":73}},"5":{"start":{"line":40,"column":12},"end":{"line":41,"column":71}},"6":{"start":{"line":44,"column":12},"end":{"line":51,"column":13}},"7":{"start":{"line":49,"column":16},"end":{"line":49,"column":39}},"8":{"start":{"line":50,"column":16},"end":{"line":50,"column":66}},"9":{"start":{"line":54,"column":12},"end":{"line":66,"column":13}},"10":{"start":{"line":58,"column":16},"end":{"line":65,"column":19}},"11":{"start":{"line":63,"column":24},"end":{"line":63,"column":92}},"12":{"start":{"line":69,"column":8},"end":{"line":72,"column":10}}},"branchMap":{"1":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":16},"end":{"line":45,"column":26}},{"start":{"line":46,"column":16},"end":{"line":46,"column":51}},{"start":{"line":47,"column":16},"end":{"line":47,"column":40}}]},"2":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":12}},{"start":{"line":54,"column":12},"end":{"line":54,"column":12}}]},"3":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":16},"end":{"line":54,"column":26}},{"start":{"line":55,"column":16},"end":{"line":55,"column":51}},{"start":{"line":56,"column":16},"end":{"line":56,"column":70}}]}},"code":["/**"," * @fileoverview Rule to check that spaced function application"," * @author Matt DuVall <http://www.mattduvall.com>"," * @deprecated in ESLint v3.3.0"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow spacing between function identifiers and their applications (deprecated)\",","            category: \"Stylistic Issues\",","            recommended: false,","            replacedBy: [\"func-call-spacing\"]","        },","","        deprecated: true,","","        fixable: \"whitespace\",","        schema: []","    },","","    create(context) {","","        const sourceCode = context.getSourceCode();","","        /**","         * Check if open space is present in a function name","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function detectOpenSpaces(node) {","            const lastCalleeToken = sourceCode.getLastToken(node.callee);","            let prevToken = lastCalleeToken,","                parenToken = sourceCode.getTokenAfter(lastCalleeToken);","","            // advances to an open parenthesis.","            while (","                parenToken &&","                parenToken.range[1] < node.range[1] &&","                parenToken.value !== \"(\"","            ) {","                prevToken = parenToken;","                parenToken = sourceCode.getTokenAfter(parenToken);","            }","","            // look for a space between the callee and the open paren","            if (parenToken &&","                parenToken.range[1] < node.range[1] &&","                sourceCode.isSpaceBetweenTokens(prevToken, parenToken)","            ) {","                context.report({","                    node,","                    loc: lastCalleeToken.loc.start,","                    message: \"Unexpected space between function name and paren.\",","                    fix(fixer) {","                        return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);","                    }","                });","            }","        }","","        return {","            CallExpression: detectOpenSpaces,","            NewExpression: detectOpenSpaces","        };","","    }","};",""],"l":{"13":1,"30":0,"38":1,"39":0,"40":0,"44":0,"49":0,"50":0,"54":0,"58":0,"63":0,"69":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-sparse-arrays.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-sparse-arrays.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":27},"end":{"line":31,"column":34}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":43,"column":2}},"2":{"start":{"line":29,"column":8},"end":{"line":40,"column":10}},"3":{"start":{"line":33,"column":16},"end":{"line":33,"column":67}},"4":{"start":{"line":35,"column":16},"end":{"line":37,"column":17}},"5":{"start":{"line":36,"column":20},"end":{"line":36,"column":94}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":16},"end":{"line":35,"column":16}},{"start":{"line":35,"column":16},"end":{"line":35,"column":16}}]}},"code":["/**"," * @fileoverview Disallow sparse arrays"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow sparse arrays\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            ArrayExpression(node) {","","                const emptySpot = node.elements.indexOf(null) > -1;","","                if (emptySpot) {","                    context.report({ node, message: \"Unexpected comma in middle of array.\" });","                }","            }","","        };","","    }","};",""],"l":{"11":1,"29":0,"33":0,"35":0,"36":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-sync.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-sync.js","s":{"1":1,"2":0,"3":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":55},"end":{"line":29,"column":62}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":41,"column":2}},"2":{"start":{"line":27,"column":8},"end":{"line":38,"column":10}},"3":{"start":{"line":30,"column":16},"end":{"line":36,"column":19}}},"branchMap":{},"code":["/**"," * @fileoverview Rule to check for properties whose identifier ends with the string Sync"," * @author Matt DuVall<http://mattduvall.com/>"," */","","/* jshint node:true */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow synchronous methods\",","            category: \"Node.js and CommonJS\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            \"MemberExpression[property.name=/.*Sync$/]\"(node) {","                context.report({","                    node,","                    message: \"Unexpected sync method: '{{propertyName}}'.\",","                    data: {","                        propertyName: node.property.name","                    }","                });","            }","        };","","    }","};",""],"l":{"14":1,"27":0,"30":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-tabs.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-tabs.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":10},"end":{"line":27,"column":20}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":19},"end":{"line":29,"column":26}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":19}},"2":{"start":{"line":17,"column":0},"end":{"line":43,"column":2}},"3":{"start":{"line":28,"column":8},"end":{"line":41,"column":10}},"4":{"start":{"line":30,"column":16},"end":{"line":39,"column":19}},"5":{"start":{"line":31,"column":20},"end":{"line":31,"column":51}},"6":{"start":{"line":33,"column":20},"end":{"line":38,"column":21}},"7":{"start":{"line":34,"column":24},"end":{"line":37,"column":67}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":20},"end":{"line":33,"column":20}},{"start":{"line":33,"column":20},"end":{"line":33,"column":20}}]}},"code":["/**"," * @fileoverview Rule to check for tabs inside a file"," * @author Gyandeep Singh"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","const regex = /\\t/;","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow all tabs\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        schema: []","    },","","    create(context) {","        return {","            Program(node) {","                context.getSourceLines().forEach((line, index) => {","                    const match = regex.exec(line);","","                    if (match) {","                        context.report({ node, loc: {","                            line: index + 1,","                            column: match.index + 1","                        }, message: \"Unexpected tab character.\" });","                    }","                });","            }","        };","    }","};",""],"l":{"11":1,"17":1,"28":0,"30":0,"31":0,"33":0,"34":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-template-curly-in-string.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-template-curly-in-string.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":19},"end":{"line":26,"column":26}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":37,"column":2}},"2":{"start":{"line":23,"column":8},"end":{"line":23,"column":36}},"3":{"start":{"line":25,"column":8},"end":{"line":34,"column":10}},"4":{"start":{"line":27,"column":16},"end":{"line":32,"column":17}},"5":{"start":{"line":28,"column":20},"end":{"line":31,"column":23}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":16},"end":{"line":27,"column":16}},{"start":{"line":27,"column":16},"end":{"line":27,"column":16}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":20},"end":{"line":27,"column":50}},{"start":{"line":27,"column":54},"end":{"line":27,"column":76}}]}},"code":["/**"," * @fileoverview Warn when using template string syntax in regular strings"," * @author Jeroen Engels"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow template literal placeholder syntax in regular strings\",","            category: \"Possible Errors\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const regex = /\\$\\{[^}]+\\}/;","","        return {","            Literal(node) {","                if (typeof node.value === \"string\" && regex.test(node.value)) {","                    context.report({","                        node,","                        message: \"Unexpected template string expression.\"","                    });","                }","            }","        };","","    }","};",""],"l":{"11":1,"23":0,"25":0,"27":0,"28":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-ternary.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-ternary.js","s":{"1":1,"2":0,"3":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":33},"end":{"line":27,"column":40}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":34,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":31,"column":10}},"3":{"start":{"line":28,"column":16},"end":{"line":28,"column":76}}},"branchMap":{},"code":["/**"," * @fileoverview Rule to flag use of ternary operators."," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow ternary operators\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            ConditionalExpression(node) {","                context.report({ node, message: \"Ternary operator used.\" });","            }","","        };","","    }","};",""],"l":{"12":1,"25":0,"28":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-this-before-super.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-this-before-super.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"isConstructorFunction","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":37}}},"2":{"name":"(anonymous_2)","line":48,"loc":{"start":{"line":48,"column":10},"end":{"line":48,"column":20}}},"3":{"name":"isCalled","line":74,"loc":{"start":{"line":74,"column":8},"end":{"line":74,"column":35}}},"4":{"name":"isInConstructorOfDerivedClass","line":82,"loc":{"start":{"line":82,"column":8},"end":{"line":82,"column":49}}},"5":{"name":"isBeforeCallOfSuper","line":90,"loc":{"start":{"line":90,"column":8},"end":{"line":90,"column":39}}},"6":{"name":"setInvalid","line":103,"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":34}}},"7":{"name":"setSuperCalled","line":119,"loc":{"start":{"line":119,"column":8},"end":{"line":119,"column":34}}},"8":{"name":"(anonymous_8)","line":139,"loc":{"start":{"line":139,"column":27},"end":{"line":139,"column":44}}},"9":{"name":"(anonymous_9)","line":174,"loc":{"start":{"line":174,"column":25},"end":{"line":174,"column":36}}},"10":{"name":"(anonymous_10)","line":208,"loc":{"start":{"line":208,"column":34},"end":{"line":208,"column":44}}},"11":{"name":"(anonymous_11)","line":232,"loc":{"start":{"line":232,"column":33},"end":{"line":232,"column":58}}},"12":{"name":"(anonymous_12)","line":262,"loc":{"start":{"line":262,"column":26},"end":{"line":262,"column":33}}},"13":{"name":"(anonymous_13)","line":273,"loc":{"start":{"line":273,"column":17},"end":{"line":273,"column":24}}},"14":{"name":"(anonymous_14)","line":284,"loc":{"start":{"line":284,"column":33},"end":{"line":284,"column":40}}},"15":{"name":"(anonymous_15)","line":294,"loc":{"start":{"line":294,"column":26},"end":{"line":294,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":25,"column":0},"end":{"line":31,"column":1}},"3":{"start":{"line":26,"column":4},"end":{"line":30,"column":6}},"4":{"start":{"line":37,"column":0},"end":{"line":299,"column":2}},"5":{"start":{"line":58,"column":8},"end":{"line":58,"column":28}},"6":{"start":{"line":67,"column":8},"end":{"line":67,"column":45}},"7":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"8":{"start":{"line":75,"column":12},"end":{"line":75,"column":76}},"9":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"10":{"start":{"line":83,"column":12},"end":{"line":83,"column":86}},"11":{"start":{"line":90,"column":8},"end":{"line":95,"column":9}},"12":{"start":{"line":91,"column":12},"end":{"line":94,"column":14}},"13":{"start":{"line":103,"column":8},"end":{"line":113,"column":9}},"14":{"start":{"line":104,"column":12},"end":{"line":104,"column":63}},"15":{"start":{"line":106,"column":12},"end":{"line":112,"column":13}},"16":{"start":{"line":107,"column":16},"end":{"line":107,"column":44}},"17":{"start":{"line":109,"column":16},"end":{"line":111,"column":17}},"18":{"start":{"line":110,"column":20},"end":{"line":110,"column":67}},"19":{"start":{"line":119,"column":8},"end":{"line":129,"column":9}},"20":{"start":{"line":120,"column":12},"end":{"line":120,"column":63}},"21":{"start":{"line":122,"column":12},"end":{"line":128,"column":13}},"22":{"start":{"line":123,"column":16},"end":{"line":123,"column":44}},"23":{"start":{"line":125,"column":16},"end":{"line":127,"column":17}},"24":{"start":{"line":126,"column":20},"end":{"line":126,"column":62}},"25":{"start":{"line":131,"column":8},"end":{"line":297,"column":10}},"26":{"start":{"line":140,"column":16},"end":{"line":161,"column":17}},"27":{"start":{"line":143,"column":20},"end":{"line":143,"column":64}},"28":{"start":{"line":145,"column":20},"end":{"line":153,"column":22}},"29":{"start":{"line":155,"column":20},"end":{"line":160,"column":22}},"30":{"start":{"line":175,"column":16},"end":{"line":175,"column":59}},"31":{"start":{"line":177,"column":16},"end":{"line":177,"column":42}},"32":{"start":{"line":178,"column":16},"end":{"line":180,"column":17}},"33":{"start":{"line":179,"column":20},"end":{"line":179,"column":27}},"34":{"start":{"line":182,"column":16},"end":{"line":200,"column":19}},"35":{"start":{"line":183,"column":20},"end":{"line":183,"column":56}},"36":{"start":{"line":185,"column":20},"end":{"line":195,"column":21}},"37":{"start":{"line":186,"column":24},"end":{"line":186,"column":65}},"38":{"start":{"line":188,"column":24},"end":{"line":194,"column":27}},"39":{"start":{"line":197,"column":20},"end":{"line":199,"column":21}},"40":{"start":{"line":198,"column":24},"end":{"line":198,"column":42}},"41":{"start":{"line":209,"column":16},"end":{"line":211,"column":17}},"42":{"start":{"line":210,"column":20},"end":{"line":210,"column":27}},"43":{"start":{"line":214,"column":16},"end":{"line":220,"column":18}},"44":{"start":{"line":233,"column":16},"end":{"line":235,"column":17}},"45":{"start":{"line":234,"column":20},"end":{"line":234,"column":27}},"46":{"start":{"line":238,"column":16},"end":{"line":254,"column":18}},"47":{"start":{"line":241,"column":24},"end":{"line":241,"column":60}},"48":{"start":{"line":243,"column":24},"end":{"line":252,"column":25}},"49":{"start":{"line":244,"column":28},"end":{"line":244,"column":51}},"50":{"start":{"line":245,"column":28},"end":{"line":245,"column":46}},"51":{"start":{"line":246,"column":31},"end":{"line":252,"column":25}},"52":{"start":{"line":250,"column":28},"end":{"line":250,"column":52}},"53":{"start":{"line":251,"column":28},"end":{"line":251,"column":51}},"54":{"start":{"line":263,"column":16},"end":{"line":265,"column":17}},"55":{"start":{"line":264,"column":20},"end":{"line":264,"column":37}},"56":{"start":{"line":274,"column":16},"end":{"line":276,"column":17}},"57":{"start":{"line":275,"column":20},"end":{"line":275,"column":37}},"58":{"start":{"line":285,"column":16},"end":{"line":287,"column":17}},"59":{"start":{"line":286,"column":20},"end":{"line":286,"column":37}},"60":{"start":{"line":295,"column":16},"end":{"line":295,"column":49}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":8},"end":{"line":27,"column":42}},{"start":{"line":28,"column":8},"end":{"line":28,"column":47}},{"start":{"line":29,"column":8},"end":{"line":29,"column":42}}]},"2":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":19},"end":{"line":75,"column":37}},{"start":{"line":75,"column":41},"end":{"line":75,"column":75}}]},"3":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":27},"end":{"line":83,"column":35}},{"start":{"line":83,"column":39},"end":{"line":83,"column":61}},{"start":{"line":83,"column":65},"end":{"line":83,"column":84}}]},"4":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":55}},{"start":{"line":93,"column":16},"end":{"line":93,"column":66}}]},"5":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":16},"end":{"line":109,"column":16}},{"start":{"line":109,"column":16},"end":{"line":109,"column":16}}]},"6":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":16},"end":{"line":125,"column":16}},{"start":{"line":125,"column":16},"end":{"line":125,"column":16}}]},"7":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":16},"end":{"line":140,"column":16}},{"start":{"line":140,"column":16},"end":{"line":140,"column":16}}]},"8":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":28},"end":{"line":149,"column":48}},{"start":{"line":150,"column":28},"end":{"line":150,"column":77}}]},"9":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":16},"end":{"line":178,"column":16}},{"start":{"line":178,"column":16},"end":{"line":178,"column":16}}]},"10":{"line":192,"type":"cond-expr","locations":[{"start":{"line":192,"column":69},"end":{"line":192,"column":76}},{"start":{"line":192,"column":79},"end":{"line":192,"column":85}}]},"11":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":20},"end":{"line":197,"column":20}},{"start":{"line":197,"column":20},"end":{"line":197,"column":20}}]},"12":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":16},"end":{"line":209,"column":16}},{"start":{"line":209,"column":16},"end":{"line":209,"column":16}}]},"13":{"line":216,"type":"binary-expr","locations":[{"start":{"line":216,"column":24},"end":{"line":216,"column":55}},{"start":{"line":217,"column":24},"end":{"line":217,"column":60}}]},"14":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":16},"end":{"line":233,"column":16}},{"start":{"line":233,"column":16},"end":{"line":233,"column":16}}]},"15":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":24},"end":{"line":243,"column":24}},{"start":{"line":243,"column":24},"end":{"line":243,"column":24}}]},"16":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":31},"end":{"line":246,"column":31}},{"start":{"line":246,"column":31},"end":{"line":246,"column":31}}]},"17":{"line":247,"type":"binary-expr","locations":[{"start":{"line":247,"column":28},"end":{"line":247,"column":59}},{"start":{"line":248,"column":28},"end":{"line":248,"column":64}}]},"18":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":16},"end":{"line":263,"column":16}},{"start":{"line":263,"column":16},"end":{"line":263,"column":16}}]},"19":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":16},"end":{"line":274,"column":16}},{"start":{"line":274,"column":16},"end":{"line":274,"column":16}}]},"20":{"line":274,"type":"binary-expr","locations":[{"start":{"line":274,"column":20},"end":{"line":274,"column":44}},{"start":{"line":274,"column":48},"end":{"line":274,"column":69}}]},"21":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":16},"end":{"line":285,"column":16}},{"start":{"line":285,"column":16},"end":{"line":285,"column":16}}]},"22":{"line":285,"type":"binary-expr","locations":[{"start":{"line":285,"column":20},"end":{"line":285,"column":48}},{"start":{"line":285,"column":52},"end":{"line":285,"column":73}}]}},"code":["/**"," * @fileoverview A rule to disallow using `this`/`super` before `super()`."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given node is a constructor."," * @param {ASTNode} node - A node to check. This node type is one of"," *   `Program`, `FunctionDeclaration`, `FunctionExpression`, and"," *   `ArrowFunctionExpression`."," * @returns {boolean} `true` if the node is a constructor."," */","function isConstructorFunction(node) {","    return (","        node.type === \"FunctionExpression\" &&","        node.parent.type === \"MethodDefinition\" &&","        node.parent.kind === \"constructor\"","    );","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `this`/`super` before calling `super()` in constructors\",","            category: \"ECMAScript 6\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        /*","         * Information for each constructor.","         * - upper:      Information of the upper constructor.","         * - hasExtends: A flag which shows whether the owner class has a valid","         *   `extends` part.","         * - scope:      The scope of the owner class.","         * - codePath:   The code path of this constructor.","         */","        let funcInfo = null;","","        /*","         * Information for each code path segment.","         * Each key is the id of a code path segment.","         * Each value is an object:","         * - superCalled:  The flag which shows `super()` called in all code paths.","         * - invalidNodes: The array of invalid ThisExpression and Super nodes.","         */","        let segInfoMap = Object.create(null);","","        /**","         * Gets whether or not `super()` is called in a given code path segment.","         * @param {CodePathSegment} segment - A code path segment to get.","         * @returns {boolean} `true` if `super()` is called.","         */","        function isCalled(segment) {","            return !segment.reachable || segInfoMap[segment.id].superCalled;","        }","","        /**","         * Checks whether or not this is in a constructor.","         * @returns {boolean} `true` if this is in a constructor.","         */","        function isInConstructorOfDerivedClass() {","            return Boolean(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends);","        }","","        /**","         * Checks whether or not this is before `super()` is called.","         * @returns {boolean} `true` if this is before `super()` is called.","         */","        function isBeforeCallOfSuper() {","            return (","                isInConstructorOfDerivedClass(funcInfo) &&","                !funcInfo.codePath.currentSegments.every(isCalled)","            );","        }","","        /**","         * Sets a given node as invalid.","         * @param {ASTNode} node - A node to set as invalid. This is one of","         *      a ThisExpression and a Super.","         * @returns {void}","         */","        function setInvalid(node) {","            const segments = funcInfo.codePath.currentSegments;","","            for (let i = 0; i < segments.length; ++i) {","                const segment = segments[i];","","                if (segment.reachable) {","                    segInfoMap[segment.id].invalidNodes.push(node);","                }","            }","        }","","        /**","         * Sets the current segment as `super` was called.","         * @returns {void}","         */","        function setSuperCalled() {","            const segments = funcInfo.codePath.currentSegments;","","            for (let i = 0; i < segments.length; ++i) {","                const segment = segments[i];","","                if (segment.reachable) {","                    segInfoMap[segment.id].superCalled = true;","                }","            }","        }","","        return {","","            /**","             * Adds information of a constructor into the stack.","             * @param {CodePath} codePath - A code path which was started.","             * @param {ASTNode} node - The current node.","             * @returns {void}","             */","            onCodePathStart(codePath, node) {","                if (isConstructorFunction(node)) {","","                    // Class > ClassBody > MethodDefinition > FunctionExpression","                    const classNode = node.parent.parent.parent;","","                    funcInfo = {","                        upper: funcInfo,","                        isConstructor: true,","                        hasExtends: Boolean(","                            classNode.superClass &&","                            !astUtils.isNullOrUndefined(classNode.superClass)","                        ),","                        codePath","                    };","                } else {","                    funcInfo = {","                        upper: funcInfo,","                        isConstructor: false,","                        hasExtends: false,","                        codePath","                    };","                }","            },","","            /**","             * Removes the top of stack item.","             *","             * And this treverses all segments of this code path then reports every","             * invalid node.","             *","             * @param {CodePath} codePath - A code path which was ended.","             * @param {ASTNode} node - The current node.","             * @returns {void}","             */","            onCodePathEnd(codePath) {","                const isDerivedClass = funcInfo.hasExtends;","","                funcInfo = funcInfo.upper;","                if (!isDerivedClass) {","                    return;","                }","","                codePath.traverseSegments((segment, controller) => {","                    const info = segInfoMap[segment.id];","","                    for (let i = 0; i < info.invalidNodes.length; ++i) {","                        const invalidNode = info.invalidNodes[i];","","                        context.report({","                            message: \"'{{kind}}' is not allowed before 'super()'.\",","                            node: invalidNode,","                            data: {","                                kind: invalidNode.type === \"Super\" ? \"super\" : \"this\"","                            }","                        });","                    }","","                    if (info.superCalled) {","                        controller.skip();","                    }","                });","            },","","            /**","             * Initialize information of a given code path segment.","             * @param {CodePathSegment} segment - A code path segment to initialize.","             * @returns {void}","             */","            onCodePathSegmentStart(segment) {","                if (!isInConstructorOfDerivedClass(funcInfo)) {","                    return;","                }","","                // Initialize info.","                segInfoMap[segment.id] = {","                    superCalled: (","                        segment.prevSegments.length > 0 &&","                        segment.prevSegments.every(isCalled)","                    ),","                    invalidNodes: []","                };","            },","","            /**","             * Update information of the code path segment when a code path was","             * looped.","             * @param {CodePathSegment} fromSegment - The code path segment of the","             *      end of a loop.","             * @param {CodePathSegment} toSegment - A code path segment of the head","             *      of a loop.","             * @returns {void}","             */","            onCodePathSegmentLoop(fromSegment, toSegment) {","                if (!isInConstructorOfDerivedClass(funcInfo)) {","                    return;","                }","","                // Update information inside of the loop.","                funcInfo.codePath.traverseSegments(","                    { first: toSegment, last: fromSegment },","                    (segment, controller) => {","                        const info = segInfoMap[segment.id];","","                        if (info.superCalled) {","                            info.invalidNodes = [];","                            controller.skip();","                        } else if (","                            segment.prevSegments.length > 0 &&","                            segment.prevSegments.every(isCalled)","                        ) {","                            info.superCalled = true;","                            info.invalidNodes = [];","                        }","                    }","                );","            },","","            /**","             * Reports if this is before `super()`.","             * @param {ASTNode} node - A target node.","             * @returns {void}","             */","            ThisExpression(node) {","                if (isBeforeCallOfSuper()) {","                    setInvalid(node);","                }","            },","","            /**","             * Reports if this is before `super()`.","             * @param {ASTNode} node - A target node.","             * @returns {void}","             */","            Super(node) {","                if (!astUtils.isCallee(node) && isBeforeCallOfSuper()) {","                    setInvalid(node);","                }","            },","","            /**","             * Marks `super()` called.","             * @param {ASTNode} node - A target node.","             * @returns {void}","             */","            \"CallExpression:exit\"(node) {","                if (node.callee.type === \"Super\" && isBeforeCallOfSuper()) {","                    setSuperCalled();","                }","            },","","            /**","             * Resets state.","             * @returns {void}","             */","            \"Program:exit\"() {","                segInfoMap = Object.create(null);","            }","        };","    }","};",""],"l":{"12":1,"25":1,"26":0,"37":1,"58":0,"67":0,"74":1,"75":0,"82":1,"83":0,"90":1,"91":0,"103":1,"104":0,"106":0,"107":0,"109":0,"110":0,"119":1,"120":0,"122":0,"123":0,"125":0,"126":0,"131":0,"140":0,"143":0,"145":0,"155":0,"175":0,"177":0,"178":0,"179":0,"182":0,"183":0,"185":0,"186":0,"188":0,"197":0,"198":0,"209":0,"210":0,"214":0,"233":0,"234":0,"238":0,"241":0,"243":0,"244":0,"245":0,"246":0,"250":0,"251":0,"263":0,"264":0,"274":0,"275":0,"285":0,"286":0,"295":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-throw-literal.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-throw-literal.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":26},"end":{"line":29,"column":33}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":43,"column":2}},"3":{"start":{"line":27,"column":8},"end":{"line":40,"column":10}},"4":{"start":{"line":30,"column":16},"end":{"line":36,"column":17}},"5":{"start":{"line":31,"column":20},"end":{"line":31,"column":90}},"6":{"start":{"line":32,"column":23},"end":{"line":36,"column":17}},"7":{"start":{"line":33,"column":20},"end":{"line":35,"column":21}},"8":{"start":{"line":34,"column":24},"end":{"line":34,"column":85}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":16}},{"start":{"line":30,"column":16},"end":{"line":30,"column":16}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":23},"end":{"line":32,"column":23}},{"start":{"line":32,"column":23},"end":{"line":32,"column":23}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":20},"end":{"line":33,"column":20}},{"start":{"line":33,"column":20},"end":{"line":33,"column":20}}]}},"code":["/**"," * @fileoverview Rule to restrict what can be thrown as an exception."," * @author Dieter Oberkofler"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow throwing literals as exceptions\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","","            ThrowStatement(node) {","                if (!astUtils.couldBeError(node.argument)) {","                    context.report({ node, message: \"Expected an object to be thrown.\" });","                } else if (node.argument.type === \"Identifier\") {","                    if (node.argument.name === \"undefined\") {","                        context.report({ node, message: \"Do not throw undefined.\" });","                    }","                }","","            }","","        };","","    }","};",""],"l":{"8":1,"14":1,"27":0,"30":0,"31":0,"32":0,"33":0,"34":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-trailing-spaces.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-trailing-spaces.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":40,"loc":{"start":{"line":40,"column":10},"end":{"line":40,"column":20}}},"2":{"name":"report","line":57,"loc":{"start":{"line":57,"column":8},"end":{"line":57,"column":50}}},"3":{"name":"(anonymous_3)","line":69,"loc":{"start":{"line":69,"column":19},"end":{"line":69,"column":27}}},"4":{"name":"checkTrailingSpaces","line":82,"loc":{"start":{"line":82,"column":21},"end":{"line":82,"column":56}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":137,"column":2}},"3":{"start":{"line":41,"column":8},"end":{"line":41,"column":51}},"4":{"start":{"line":43,"column":8},"end":{"line":45,"column":42}},"5":{"start":{"line":47,"column":8},"end":{"line":48,"column":61}},"6":{"start":{"line":57,"column":8},"end":{"line":73,"column":9}},"7":{"start":{"line":65,"column":12},"end":{"line":72,"column":15}},"8":{"start":{"line":70,"column":20},"end":{"line":70,"column":55}},"9":{"start":{"line":80,"column":8},"end":{"line":135,"column":10}},"10":{"start":{"line":87,"column":16},"end":{"line":90,"column":101}},"11":{"start":{"line":91,"column":16},"end":{"line":92,"column":34}},"12":{"start":{"line":94,"column":16},"end":{"line":132,"column":17}},"13":{"start":{"line":95,"column":20},"end":{"line":95,"column":54}},"14":{"start":{"line":100,"column":20},"end":{"line":100,"column":99}},"15":{"start":{"line":101,"column":20},"end":{"line":101,"column":73}},"16":{"start":{"line":103,"column":20},"end":{"line":129,"column":21}},"17":{"start":{"line":104,"column":24},"end":{"line":107,"column":26}},"18":{"start":{"line":109,"column":24},"end":{"line":109,"column":73}},"19":{"start":{"line":110,"column":24},"end":{"line":110,"column":84}},"20":{"start":{"line":111,"column":24},"end":{"line":111,"column":90}},"21":{"start":{"line":113,"column":24},"end":{"line":118,"column":25}},"22":{"start":{"line":116,"column":28},"end":{"line":116,"column":54}},"23":{"start":{"line":117,"column":28},"end":{"line":117,"column":37}},"24":{"start":{"line":122,"column":24},"end":{"line":125,"column":25}},"25":{"start":{"line":123,"column":28},"end":{"line":123,"column":54}},"26":{"start":{"line":124,"column":28},"end":{"line":124,"column":37}},"27":{"start":{"line":127,"column":24},"end":{"line":127,"column":58}},"28":{"start":{"line":128,"column":24},"end":{"line":128,"column":57}},"29":{"start":{"line":131,"column":20},"end":{"line":131,"column":46}}},"branchMap":{"1":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":24},"end":{"line":47,"column":42}},{"start":{"line":47,"column":46},"end":{"line":47,"column":48}}]},"2":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":29},"end":{"line":48,"column":51}},{"start":{"line":48,"column":55},"end":{"line":48,"column":60}}]},"3":{"line":100,"type":"cond-expr","locations":[{"start":{"line":100,"column":74},"end":{"line":100,"column":94}},{"start":{"line":100,"column":97},"end":{"line":100,"column":98}}]},"4":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":44},"end":{"line":100,"column":54}},{"start":{"line":100,"column":58},"end":{"line":100,"column":71}}]},"5":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":20},"end":{"line":103,"column":20}},{"start":{"line":103,"column":20},"end":{"line":103,"column":20}}]},"6":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":24},"end":{"line":113,"column":24}},{"start":{"line":113,"column":24},"end":{"line":113,"column":24}}]},"7":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":28},"end":{"line":113,"column":42}},{"start":{"line":113,"column":46},"end":{"line":113,"column":87}},{"start":{"line":114,"column":26},"end":{"line":114,"column":69}},{"start":{"line":115,"column":26},"end":{"line":115,"column":67}}]},"8":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":24},"end":{"line":122,"column":24}},{"start":{"line":122,"column":24},"end":{"line":122,"column":24}}]},"9":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":28},"end":{"line":122,"column":42}},{"start":{"line":122,"column":46},"end":{"line":122,"column":70}}]}},"code":["/**"," * @fileoverview Disallow trailing spaces at the end of lines."," * @author Nodeca Team <https://github.com/nodeca>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow trailing whitespace at the end of lines\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    skipBlankLines: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        const BLANK_CLASS = \"[ \\t\\u00a0\\u2000-\\u200b\\u3000]\",","            SKIP_BLANK = `^${BLANK_CLASS}*$`,","            NONBLANK = `${BLANK_CLASS}+$`;","","        const options = context.options[0] || {},","            skipBlankLines = options.skipBlankLines || false;","","        /**","         * Report the error message","         * @param {ASTNode} node node to report","         * @param {int[]} location range information","         * @param {int[]} fixRange Range based on the whole program","         * @returns {void}","         */","        function report(node, location, fixRange) {","","            /*","             * Passing node is a bit dirty, because message data will contain big","             * text in `source`. But... who cares :) ?","             * One more kludge will not make worse the bloody wizardry of this","             * plugin.","             */","            context.report({","                node,","                loc: location,","                message: \"Trailing spaces not allowed.\",","                fix(fixer) {","                    return fixer.removeRange(fixRange);","                }","            });","        }","","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            Program: function checkTrailingSpaces(node) {","","                // Let's hack. Since Espree does not return whitespace nodes,","                // fetch the source code and do matching via regexps.","","                const re = new RegExp(NONBLANK),","                    skipMatch = new RegExp(SKIP_BLANK),","                    lines = sourceCode.lines,","                    linebreaks = sourceCode.getText().match(astUtils.createGlobalLinebreakMatcher());","                let totalLength = 0,","                    fixRange = [];","","                for (let i = 0, ii = lines.length; i < ii; i++) {","                    const matches = re.exec(lines[i]);","","                    // Always add linebreak length to line length to accommodate for line break (\\n or \\r\\n)","                    // Because during the fix time they also reserve one spot in the array.","                    // Usually linebreak length is 2 for \\r\\n (CRLF) and 1 for \\n (LF)","                    const linebreakLength = linebreaks && linebreaks[i] ? linebreaks[i].length : 1;","                    const lineLength = lines[i].length + linebreakLength;","","                    if (matches) {","                        const location = {","                            line: i + 1,","                            column: matches.index","                        };","","                        const rangeStart = totalLength + location.column;","                        const rangeEnd = totalLength + lineLength - linebreakLength;","                        const containingNode = sourceCode.getNodeByRangeIndex(rangeStart);","","                        if (containingNode && containingNode.type === \"TemplateElement\" &&","                          rangeStart > containingNode.parent.range[0] &&","                          rangeEnd < containingNode.parent.range[1]) {","                            totalLength += lineLength;","                            continue;","                        }","","                        // If the line has only whitespace, and skipBlankLines","                        // is true, don't report it","                        if (skipBlankLines && skipMatch.test(lines[i])) {","                            totalLength += lineLength;","                            continue;","                        }","","                        fixRange = [rangeStart, rangeEnd];","                        report(node, location, fixRange);","                    }","","                    totalLength += lineLength;","                }","            }","","        };","    }","};",""],"l":{"11":1,"17":1,"41":0,"43":0,"47":0,"57":1,"65":0,"70":0,"80":0,"87":0,"91":0,"94":0,"95":0,"100":0,"101":0,"103":0,"104":0,"109":0,"110":0,"111":0,"113":0,"116":0,"117":0,"122":0,"123":0,"124":0,"127":0,"128":0,"131":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-undef-init.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-undef-init.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":10},"end":{"line":27,"column":20}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":30},"end":{"line":33,"column":37}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":27},"end":{"line":45,"column":35}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":59,"column":2}},"3":{"start":{"line":29,"column":8},"end":{"line":29,"column":51}},"4":{"start":{"line":31,"column":8},"end":{"line":56,"column":10}},"5":{"start":{"line":34,"column":16},"end":{"line":38,"column":76}},"6":{"start":{"line":40,"column":16},"end":{"line":54,"column":17}},"7":{"start":{"line":41,"column":20},"end":{"line":53,"column":23}},"8":{"start":{"line":46,"column":28},"end":{"line":50,"column":29}},"9":{"start":{"line":49,"column":32},"end":{"line":49,"column":44}},"10":{"start":{"line":51,"column":28},"end":{"line":51,"column":88}}},"branchMap":{"1":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":27},"end":{"line":35,"column":36}},{"start":{"line":35,"column":40},"end":{"line":35,"column":54}}]},"2":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":31},"end":{"line":38,"column":43}},{"start":{"line":38,"column":47},"end":{"line":38,"column":75}}]},"3":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":16},"end":{"line":40,"column":16}},{"start":{"line":40,"column":16},"end":{"line":40,"column":16}}]},"4":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":20},"end":{"line":40,"column":40}},{"start":{"line":40,"column":44},"end":{"line":40,"column":72}},{"start":{"line":40,"column":76},"end":{"line":40,"column":85}}]},"5":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":28},"end":{"line":46,"column":28}},{"start":{"line":46,"column":28},"end":{"line":46,"column":28}}]},"6":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":32},"end":{"line":46,"column":63}},{"start":{"line":46,"column":67},"end":{"line":46,"column":99}}]}},"code":["/**"," * @fileoverview Rule to flag when initializing to undefined"," * @author Ilya Volodin"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow initializing variables to `undefined`\",","            category: \"Variables\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","","        const sourceCode = context.getSourceCode();","","        return {","","            VariableDeclarator(node) {","                const name = sourceCode.getText(node.id),","                    init = node.init && node.init.name,","                    scope = context.getScope(),","                    undefinedVar = astUtils.getVariableByName(scope, \"undefined\"),","                    shadowed = undefinedVar && undefinedVar.defs.length > 0;","","                if (init === \"undefined\" && node.parent.kind !== \"const\" && !shadowed) {","                    context.report({","                        node,","                        message: \"It's not necessary to initialize '{{name}}' to undefined.\",","                        data: { name },","                        fix(fixer) {","                            if (node.id.type === \"ArrayPattern\" || node.id.type === \"ObjectPattern\") {","","                                // Don't fix destructuring assignment to `undefined`.","                                return null;","                            }","                            return fixer.removeRange([node.id.range[1], node.range[1]]);","                        }","                    });","                }","            }","        };","","    }","};",""],"l":{"8":1,"14":1,"29":0,"31":0,"34":0,"40":0,"41":0,"46":0,"49":0,"51":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-undef.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-undef.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"hasTypeOfOperator","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":33}}},"2":{"name":"(anonymous_2)","line":47,"loc":{"start":{"line":47,"column":10},"end":{"line":47,"column":20}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":26},"end":{"line":52,"column":39}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":20,"column":1}},"2":{"start":{"line":17,"column":4},"end":{"line":17,"column":31}},"3":{"start":{"line":19,"column":4},"end":{"line":19,"column":77}},"4":{"start":{"line":26,"column":0},"end":{"line":71,"column":2}},"5":{"start":{"line":48,"column":8},"end":{"line":48,"column":43}},"6":{"start":{"line":49,"column":8},"end":{"line":49,"column":75}},"7":{"start":{"line":51,"column":8},"end":{"line":69,"column":10}},"8":{"start":{"line":53,"column":16},"end":{"line":53,"column":55}},"9":{"start":{"line":55,"column":16},"end":{"line":67,"column":19}},"10":{"start":{"line":56,"column":20},"end":{"line":56,"column":54}},"11":{"start":{"line":58,"column":20},"end":{"line":60,"column":21}},"12":{"start":{"line":59,"column":24},"end":{"line":59,"column":31}},"13":{"start":{"line":62,"column":20},"end":{"line":66,"column":23}}},"branchMap":{"1":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":11},"end":{"line":19,"column":44}},{"start":{"line":19,"column":48},"end":{"line":19,"column":76}}]},"2":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":31},"end":{"line":49,"column":38}},{"start":{"line":49,"column":42},"end":{"line":49,"column":65}},{"start":{"line":49,"column":69},"end":{"line":49,"column":74}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":20},"end":{"line":58,"column":20}},{"start":{"line":58,"column":20},"end":{"line":58,"column":20}}]},"4":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":24},"end":{"line":58,"column":39}},{"start":{"line":58,"column":43},"end":{"line":58,"column":72}}]}},"code":["/**"," * @fileoverview Rule to flag references to undeclared variables."," * @author Mark Macdonald"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks if the given node is the argument of a typeof operator."," * @param {ASTNode} node The AST node being checked."," * @returns {boolean} Whether or not the node is the argument of a typeof operator."," */","function hasTypeOfOperator(node) {","    const parent = node.parent;","","    return parent.type === \"UnaryExpression\" && parent.operator === \"typeof\";","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of undeclared variables unless mentioned in `/*global */` comments\",","            category: \"Variables\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    typeof: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0];","        const considerTypeOf = options && options.typeof === true || false;","","        return {","            \"Program:exit\"(/* node */) {","                const globalScope = context.getScope();","","                globalScope.through.forEach(ref => {","                    const identifier = ref.identifier;","","                    if (!considerTypeOf && hasTypeOfOperator(identifier)) {","                        return;","                    }","","                    context.report({","                        node: identifier,","                        message: \"'{{name}}' is not defined.\",","                        data: identifier","                    });","                });","            }","        };","    }","};",""],"l":{"16":1,"17":0,"19":0,"26":1,"48":0,"49":0,"51":0,"53":0,"55":0,"56":0,"58":0,"59":0,"62":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-undefined.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-undefined.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"report","line":29,"loc":{"start":{"line":29,"column":8},"end":{"line":29,"column":30}}},"3":{"name":"checkScope","line":42,"loc":{"start":{"line":42,"column":8},"end":{"line":42,"column":35}}},"4":{"name":"(anonymous_4)","line":62,"loc":{"start":{"line":62,"column":26},"end":{"line":62,"column":29}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":77,"column":2}},"2":{"start":{"line":29,"column":8},"end":{"line":34,"column":9}},"3":{"start":{"line":30,"column":12},"end":{"line":33,"column":15}},"4":{"start":{"line":42,"column":8},"end":{"line":59,"column":9}},"5":{"start":{"line":43,"column":12},"end":{"line":43,"column":60}},"6":{"start":{"line":45,"column":12},"end":{"line":47,"column":13}},"7":{"start":{"line":46,"column":16},"end":{"line":46,"column":23}},"8":{"start":{"line":49,"column":12},"end":{"line":49,"column":55}},"9":{"start":{"line":51,"column":12},"end":{"line":51,"column":43}},"10":{"start":{"line":54,"column":12},"end":{"line":56,"column":56}},"11":{"start":{"line":55,"column":31},"end":{"line":55,"column":40}},"12":{"start":{"line":56,"column":32},"end":{"line":56,"column":54}},"13":{"start":{"line":58,"column":12},"end":{"line":58,"column":50}},"14":{"start":{"line":58,"column":32},"end":{"line":58,"column":48}},"15":{"start":{"line":61,"column":8},"end":{"line":74,"column":10}},"16":{"start":{"line":63,"column":16},"end":{"line":63,"column":55}},"17":{"start":{"line":65,"column":16},"end":{"line":65,"column":44}},"18":{"start":{"line":67,"column":16},"end":{"line":72,"column":17}},"19":{"start":{"line":68,"column":20},"end":{"line":68,"column":46}},"20":{"start":{"line":70,"column":20},"end":{"line":70,"column":63}},"21":{"start":{"line":71,"column":20},"end":{"line":71,"column":38}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":12}},{"start":{"line":45,"column":12},"end":{"line":45,"column":12}}]}},"code":["/**"," * @fileoverview Rule to flag references to the undefined variable."," * @author Michael Ficarra"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of `undefined` as an identifier\",","            category: \"Variables\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Report an invalid \"undefined\" identifier node.","         * @param {ASTNode} node The node to report.","         * @returns {void}","         */","        function report(node) {","            context.report({","                node,","                message: \"Unexpected use of undefined.\"","            });","        }","","        /**","         * Checks the given scope for references to `undefined` and reports","         * all references found.","         * @param {escope.Scope} scope The scope to check.","         * @returns {void}","         */","        function checkScope(scope) {","            const undefinedVar = scope.set.get(\"undefined\");","","            if (!undefinedVar) {","                return;","            }","","            const references = undefinedVar.references;","","            const defs = undefinedVar.defs;","","            // Report non-initializing references (those are covered in defs below)","            references","                .filter(ref => !ref.init)","                .forEach(ref => report(ref.identifier));","","            defs.forEach(def => report(def.name));","        }","","        return {","            \"Program:exit\"() {","                const globalScope = context.getScope();","","                const stack = [globalScope];","","                while (stack.length) {","                    const scope = stack.pop();","","                    stack.push.apply(stack, scope.childScopes);","                    checkScope(scope);","                }","            }","        };","","    }","};",""],"l":{"11":1,"29":1,"30":0,"42":1,"43":0,"45":0,"46":0,"49":0,"51":0,"54":0,"55":0,"56":0,"58":0,"61":0,"63":0,"65":0,"67":0,"68":0,"70":0,"71":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-underscore-dangle.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-underscore-dangle.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0],"12":[0,0,0,0,0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":42,"loc":{"start":{"line":42,"column":10},"end":{"line":42,"column":20}}},"2":{"name":"isAllowed","line":59,"loc":{"start":{"line":59,"column":8},"end":{"line":59,"column":39}}},"3":{"name":"hasTrailingUnderscore","line":69,"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":51}}},"4":{"name":"isSpecialCaseIdentifierForMemberExpression","line":81,"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":72}}},"5":{"name":"isSpecialCaseIdentifierInVariableExpression","line":91,"loc":{"start":{"line":91,"column":8},"end":{"line":91,"column":73}}},"6":{"name":"checkForTrailingUnderscoreInFunctionDeclaration","line":103,"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":71}}},"7":{"name":"checkForTrailingUnderscoreInVariableExpression","line":125,"loc":{"start":{"line":125,"column":8},"end":{"line":125,"column":70}}},"8":{"name":"checkForTrailingUnderscoreInMemberExpression","line":146,"loc":{"start":{"line":146,"column":8},"end":{"line":146,"column":68}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":176,"column":2}},"2":{"start":{"line":44,"column":8},"end":{"line":44,"column":49}},"3":{"start":{"line":45,"column":8},"end":{"line":45,"column":69}},"4":{"start":{"line":46,"column":8},"end":{"line":46,"column":110}},"5":{"start":{"line":47,"column":8},"end":{"line":47,"column":113}},"6":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"7":{"start":{"line":60,"column":12},"end":{"line":60,"column":73}},"8":{"start":{"line":60,"column":51},"end":{"line":60,"column":71}},"9":{"start":{"line":69,"column":8},"end":{"line":73,"column":9}},"10":{"start":{"line":70,"column":12},"end":{"line":70,"column":42}},"11":{"start":{"line":72,"column":12},"end":{"line":72,"column":96}},"12":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"13":{"start":{"line":82,"column":12},"end":{"line":82,"column":46}},"14":{"start":{"line":91,"column":8},"end":{"line":95,"column":9}},"15":{"start":{"line":94,"column":12},"end":{"line":94,"column":38}},"16":{"start":{"line":103,"column":8},"end":{"line":117,"column":9}},"17":{"start":{"line":104,"column":12},"end":{"line":116,"column":13}},"18":{"start":{"line":105,"column":16},"end":{"line":105,"column":48}},"19":{"start":{"line":107,"column":16},"end":{"line":115,"column":17}},"20":{"start":{"line":108,"column":20},"end":{"line":114,"column":23}},"21":{"start":{"line":125,"column":8},"end":{"line":138,"column":9}},"22":{"start":{"line":126,"column":12},"end":{"line":126,"column":44}},"23":{"start":{"line":128,"column":12},"end":{"line":137,"column":13}},"24":{"start":{"line":130,"column":16},"end":{"line":136,"column":19}},"25":{"start":{"line":146,"column":8},"end":{"line":163,"column":9}},"26":{"start":{"line":147,"column":12},"end":{"line":149,"column":63}},"27":{"start":{"line":151,"column":12},"end":{"line":162,"column":13}},"28":{"start":{"line":155,"column":16},"end":{"line":161,"column":19}},"29":{"start":{"line":169,"column":8},"end":{"line":173,"column":10}}},"branchMap":{"1":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":24},"end":{"line":44,"column":42}},{"start":{"line":44,"column":46},"end":{"line":44,"column":48}}]},"2":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":50},"end":{"line":45,"column":63}},{"start":{"line":45,"column":66},"end":{"line":45,"column":68}}]},"3":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":79},"end":{"line":46,"column":101}},{"start":{"line":46,"column":104},"end":{"line":46,"column":109}}]},"4":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":81},"end":{"line":47,"column":104}},{"start":{"line":47,"column":107},"end":{"line":47,"column":112}}]},"5":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":19},"end":{"line":72,"column":37}},{"start":{"line":72,"column":42},"end":{"line":72,"column":63}},{"start":{"line":72,"column":67},"end":{"line":72,"column":94}}]},"6":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":104,"column":12}},{"start":{"line":104,"column":12},"end":{"line":104,"column":12}}]},"7":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":16},"end":{"line":107,"column":16}},{"start":{"line":107,"column":16},"end":{"line":107,"column":16}}]},"8":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":20},"end":{"line":107,"column":53}},{"start":{"line":107,"column":57},"end":{"line":107,"column":90}},{"start":{"line":107,"column":94},"end":{"line":107,"column":116}}]},"9":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":12},"end":{"line":128,"column":12}},{"start":{"line":128,"column":12},"end":{"line":128,"column":12}}]},"10":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":16},"end":{"line":128,"column":49}},{"start":{"line":128,"column":53},"end":{"line":128,"column":86}},{"start":{"line":129,"column":16},"end":{"line":129,"column":72}},{"start":{"line":129,"column":76},"end":{"line":129,"column":98}}]},"11":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":12},"end":{"line":151,"column":12}},{"start":{"line":151,"column":12},"end":{"line":151,"column":12}}]},"12":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":16},"end":{"line":151,"column":49}},{"start":{"line":151,"column":53},"end":{"line":151,"column":86}},{"start":{"line":152,"column":16},"end":{"line":152,"column":51}},{"start":{"line":153,"column":16},"end":{"line":153,"column":53}},{"start":{"line":154,"column":16},"end":{"line":154,"column":71}},{"start":{"line":154,"column":75},"end":{"line":154,"column":97}}]},"13":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":18},"end":{"line":152,"column":32}},{"start":{"line":152,"column":36},"end":{"line":152,"column":50}}]},"14":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":18},"end":{"line":153,"column":33}},{"start":{"line":153,"column":37},"end":{"line":153,"column":52}}]}},"code":["/**"," * @fileoverview Rule to flag trailing underscores in variable declarations."," * @author Matt DuVall <http://www.mattduvall.com>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow dangling underscores in identifiers\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allow: {","                        type: \"array\",","                        items: {","                            type: \"string\"","                        }","                    },","                    allowAfterThis: {","                        type: \"boolean\"","                    },","                    allowAfterSuper: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const options = context.options[0] || {};","        const ALLOWED_VARIABLES = options.allow ? options.allow : [];","        const allowAfterThis = typeof options.allowAfterThis !== \"undefined\" ? options.allowAfterThis : false;","        const allowAfterSuper = typeof options.allowAfterSuper !== \"undefined\" ? options.allowAfterSuper : false;","","        //-------------------------------------------------------------------------","        // Helpers","        //-------------------------------------------------------------------------","","        /**","         * Check if identifier is present inside the allowed option","         * @param {string} identifier name of the node","         * @returns {boolean} true if its is present","         * @private","         */","        function isAllowed(identifier) {","            return ALLOWED_VARIABLES.some(ident => ident === identifier);","        }","","        /**","         * Check if identifier has a underscore at the end","         * @param {ASTNode} identifier node to evaluate","         * @returns {boolean} true if its is present","         * @private","         */","        function hasTrailingUnderscore(identifier) {","            const len = identifier.length;","","            return identifier !== \"_\" && (identifier[0] === \"_\" || identifier[len - 1] === \"_\");","        }","","        /**","         * Check if identifier is a special case member expression","         * @param {ASTNode} identifier node to evaluate","         * @returns {boolean} true if its is a special case","         * @private","         */","        function isSpecialCaseIdentifierForMemberExpression(identifier) {","            return identifier === \"__proto__\";","        }","","        /**","         * Check if identifier is a special case variable expression","         * @param {ASTNode} identifier node to evaluate","         * @returns {boolean} true if its is a special case","         * @private","         */","        function isSpecialCaseIdentifierInVariableExpression(identifier) {","","            // Checks for the underscore library usage here","            return identifier === \"_\";","        }","","        /**","         * Check if function has a underscore at the end","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkForTrailingUnderscoreInFunctionDeclaration(node) {","            if (node.id) {","                const identifier = node.id.name;","","                if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) && !isAllowed(identifier)) {","                    context.report({","                        node,","                        message: \"Unexpected dangling '_' in '{{identifier}}'.\",","                        data: {","                            identifier","                        }","                    });","                }","            }","        }","","        /**","         * Check if variable expression has a underscore at the end","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkForTrailingUnderscoreInVariableExpression(node) {","            const identifier = node.id.name;","","            if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) &&","                !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {","                context.report({","                    node,","                    message: \"Unexpected dangling '_' in '{{identifier}}'.\",","                    data: {","                        identifier","                    }","                });","            }","        }","","        /**","         * Check if member expression has a underscore at the end","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkForTrailingUnderscoreInMemberExpression(node) {","            const identifier = node.property.name,","                isMemberOfThis = node.object.type === \"ThisExpression\",","                isMemberOfSuper = node.object.type === \"Super\";","","            if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) &&","                !(isMemberOfThis && allowAfterThis) &&","                !(isMemberOfSuper && allowAfterSuper) &&","                !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {","                context.report({","                    node,","                    message: \"Unexpected dangling '_' in '{{identifier}}'.\",","                    data: {","                        identifier","                    }","                });","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            FunctionDeclaration: checkForTrailingUnderscoreInFunctionDeclaration,","            VariableDeclarator: checkForTrailingUnderscoreInVariableExpression,","            MemberExpression: checkForTrailingUnderscoreInMemberExpression","        };","","    }","};",""],"l":{"12":1,"44":0,"45":0,"46":0,"47":0,"59":1,"60":0,"69":1,"70":0,"72":0,"81":1,"82":0,"91":1,"94":0,"103":1,"104":0,"105":0,"107":0,"108":0,"125":1,"126":0,"128":0,"130":0,"146":1,"147":0,"151":0,"155":0,"169":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unexpected-multiline.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unexpected-multiline.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":28,"loc":{"start":{"line":28,"column":10},"end":{"line":28,"column":20}}},"2":{"name":"checkForBreakAfter","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":47}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":28},"end":{"line":59,"column":35}}},"4":{"name":"(anonymous_4)","line":66,"loc":{"start":{"line":66,"column":36},"end":{"line":66,"column":43}}},"5":{"name":"(anonymous_5)","line":73,"loc":{"start":{"line":73,"column":26},"end":{"line":73,"column":33}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":82,"column":2}},"3":{"start":{"line":30,"column":8},"end":{"line":30,"column":95}},"4":{"start":{"line":31,"column":8},"end":{"line":31,"column":95}},"5":{"start":{"line":32,"column":8},"end":{"line":32,"column":104}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":51}},"7":{"start":{"line":44,"column":8},"end":{"line":51,"column":9}},"8":{"start":{"line":45,"column":12},"end":{"line":45,"column":94}},"9":{"start":{"line":46,"column":12},"end":{"line":46,"column":75}},"10":{"start":{"line":48,"column":12},"end":{"line":50,"column":13}},"11":{"start":{"line":49,"column":16},"end":{"line":49,"column":114}},"12":{"start":{"line":57,"column":8},"end":{"line":79,"column":10}},"13":{"start":{"line":60,"column":16},"end":{"line":62,"column":17}},"14":{"start":{"line":61,"column":20},"end":{"line":61,"column":27}},"15":{"start":{"line":63,"column":16},"end":{"line":63,"column":66}},"16":{"start":{"line":67,"column":16},"end":{"line":69,"column":17}},"17":{"start":{"line":68,"column":20},"end":{"line":68,"column":27}},"18":{"start":{"line":70,"column":16},"end":{"line":70,"column":96}},"19":{"start":{"line":74,"column":16},"end":{"line":76,"column":17}},"20":{"start":{"line":75,"column":20},"end":{"line":75,"column":27}},"21":{"start":{"line":77,"column":16},"end":{"line":77,"column":66}}},"branchMap":{"1":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":12}},{"start":{"line":48,"column":12},"end":{"line":48,"column":12}}]},"2":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":16},"end":{"line":60,"column":16}},{"start":{"line":60,"column":16},"end":{"line":60,"column":16}}]},"3":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":16},"end":{"line":67,"column":16}},{"start":{"line":67,"column":16},"end":{"line":67,"column":16}}]},"4":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":16},"end":{"line":74,"column":16}},{"start":{"line":74,"column":16},"end":{"line":74,"column":16}}]}},"code":["/**"," * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not."," * @author Glen Mailer"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow confusing multiline expressions\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        const FUNCTION_MESSAGE = \"Unexpected newline between function and ( of function call.\";","        const PROPERTY_MESSAGE = \"Unexpected newline between object and [ of property access.\";","        const TAGGED_TEMPLATE_MESSAGE = \"Unexpected newline between template tag and template literal.\";","","        const sourceCode = context.getSourceCode();","","        /**","         * Check to see if there is a newline between the node and the following open bracket","         * line's expression","         * @param {ASTNode} node The node to check.","         * @param {string} msg The error message to use.","         * @returns {void}","         * @private","         */","        function checkForBreakAfter(node, msg) {","            const openParen = sourceCode.getTokenAfter(node, astUtils.isNotClosingParenToken);","            const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);","","            if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {","                context.report({ node, loc: openParen.loc.start, message: msg, data: { char: openParen.value } });","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","","            MemberExpression(node) {","                if (!node.computed) {","                    return;","                }","                checkForBreakAfter(node.object, PROPERTY_MESSAGE);","            },","","            TaggedTemplateExpression(node) {","                if (node.tag.loc.end.line === node.quasi.loc.start.line) {","                    return;","                }","                context.report({ node, loc: node.loc.start, message: TAGGED_TEMPLATE_MESSAGE });","            },","","            CallExpression(node) {","                if (node.arguments.length === 0) {","                    return;","                }","                checkForBreakAfter(node.callee, FUNCTION_MESSAGE);","            }","        };","","    }","};",""],"l":{"11":1,"17":1,"30":0,"31":0,"32":0,"34":0,"44":1,"45":0,"46":0,"48":0,"49":0,"57":0,"60":0,"61":0,"63":0,"67":0,"68":0,"70":0,"74":0,"75":0,"77":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unmodified-loop-condition.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unmodified-loop-condition.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":0,"21":0,"22":1,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":0,"69":1,"70":0,"71":0,"72":1,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"isWriteReference","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":37}}},"2":{"name":"isUnmodified","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":33}}},"3":{"name":"isUnmodifiedAndNotBelongToGroup","line":72,"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":52}}},"4":{"name":"isInRange","line":83,"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":36}}},"5":{"name":"(anonymous_5)","line":101,"loc":{"start":{"line":101,"column":16},"end":{"line":101,"column":34}}},"6":{"name":"hasDynamicExpressions","line":116,"loc":{"start":{"line":116,"column":0},"end":{"line":116,"column":37}}},"7":{"name":"(anonymous_7)","line":121,"loc":{"start":{"line":121,"column":13},"end":{"line":121,"column":20}}},"8":{"name":"toLoopCondition","line":140,"loc":{"start":{"line":140,"column":0},"end":{"line":140,"column":36}}},"9":{"name":"getEncloseFunctionDeclaration","line":194,"loc":{"start":{"line":194,"column":0},"end":{"line":194,"column":50}}},"10":{"name":"updateModifiedFlag","line":215,"loc":{"start":{"line":215,"column":0},"end":{"line":215,"column":51}}},"11":{"name":"(anonymous_11)","line":256,"loc":{"start":{"line":256,"column":10},"end":{"line":256,"column":20}}},"12":{"name":"report","line":265,"loc":{"start":{"line":265,"column":8},"end":{"line":265,"column":35}}},"13":{"name":"registerConditionsToGroup","line":282,"loc":{"start":{"line":282,"column":8},"end":{"line":282,"column":55}}},"14":{"name":"checkConditionsInGroup","line":304,"loc":{"start":{"line":304,"column":8},"end":{"line":304,"column":52}}},"15":{"name":"checkReferences","line":317,"loc":{"start":{"line":317,"column":8},"end":{"line":317,"column":43}}},"16":{"name":"(anonymous_16)","line":349,"loc":{"start":{"line":349,"column":26},"end":{"line":349,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":39}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":58}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":105}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":56}},"5":{"start":{"line":22,"column":0},"end":{"line":22,"column":69}},"6":{"start":{"line":23,"column":0},"end":{"line":23,"column":68}},"7":{"start":{"line":24,"column":0},"end":{"line":24,"column":79}},"8":{"start":{"line":43,"column":0},"end":{"line":52,"column":1}},"9":{"start":{"line":44,"column":4},"end":{"line":50,"column":5}},"10":{"start":{"line":45,"column":8},"end":{"line":45,"column":69}},"11":{"start":{"line":47,"column":8},"end":{"line":49,"column":9}},"12":{"start":{"line":48,"column":12},"end":{"line":48,"column":25}},"13":{"start":{"line":51,"column":4},"end":{"line":51,"column":31}},"14":{"start":{"line":61,"column":0},"end":{"line":63,"column":1}},"15":{"start":{"line":62,"column":4},"end":{"line":62,"column":31}},"16":{"start":{"line":72,"column":0},"end":{"line":74,"column":1}},"17":{"start":{"line":73,"column":4},"end":{"line":73,"column":52}},"18":{"start":{"line":83,"column":0},"end":{"line":88,"column":1}},"19":{"start":{"line":84,"column":4},"end":{"line":84,"column":26}},"20":{"start":{"line":85,"column":4},"end":{"line":85,"column":42}},"21":{"start":{"line":87,"column":4},"end":{"line":87,"column":44}},"22":{"start":{"line":98,"column":0},"end":{"line":107,"column":2}},"23":{"start":{"line":102,"column":8},"end":{"line":105,"column":10}},"24":{"start":{"line":116,"column":0},"end":{"line":132,"column":1}},"25":{"start":{"line":117,"column":4},"end":{"line":117,"column":21}},"26":{"start":{"line":118,"column":4},"end":{"line":118,"column":38}},"27":{"start":{"line":120,"column":4},"end":{"line":129,"column":7}},"28":{"start":{"line":122,"column":12},"end":{"line":127,"column":13}},"29":{"start":{"line":123,"column":16},"end":{"line":123,"column":28}},"30":{"start":{"line":124,"column":16},"end":{"line":124,"column":29}},"31":{"start":{"line":125,"column":19},"end":{"line":127,"column":13}},"32":{"start":{"line":126,"column":16},"end":{"line":126,"column":28}},"33":{"start":{"line":131,"column":4},"end":{"line":131,"column":16}},"34":{"start":{"line":140,"column":0},"end":{"line":185,"column":1}},"35":{"start":{"line":141,"column":4},"end":{"line":143,"column":5}},"36":{"start":{"line":142,"column":8},"end":{"line":142,"column":20}},"37":{"start":{"line":145,"column":4},"end":{"line":145,"column":21}},"38":{"start":{"line":146,"column":4},"end":{"line":146,"column":37}},"39":{"start":{"line":147,"column":4},"end":{"line":147,"column":28}},"40":{"start":{"line":149,"column":4},"end":{"line":182,"column":5}},"41":{"start":{"line":150,"column":8},"end":{"line":164,"column":9}},"42":{"start":{"line":151,"column":12},"end":{"line":160,"column":13}},"43":{"start":{"line":154,"column":16},"end":{"line":159,"column":18}},"44":{"start":{"line":163,"column":12},"end":{"line":163,"column":18}},"45":{"start":{"line":170,"column":8},"end":{"line":178,"column":9}},"46":{"start":{"line":173,"column":12},"end":{"line":177,"column":13}},"47":{"start":{"line":174,"column":16},"end":{"line":174,"column":22}},"48":{"start":{"line":176,"column":16},"end":{"line":176,"column":29}},"49":{"start":{"line":180,"column":8},"end":{"line":180,"column":21}},"50":{"start":{"line":181,"column":8},"end":{"line":181,"column":27}},"51":{"start":{"line":184,"column":4},"end":{"line":184,"column":16}},"52":{"start":{"line":194,"column":0},"end":{"line":206,"column":1}},"53":{"start":{"line":195,"column":4},"end":{"line":195,"column":36}},"54":{"start":{"line":197,"column":4},"end":{"line":203,"column":5}},"55":{"start":{"line":198,"column":8},"end":{"line":200,"column":9}},"56":{"start":{"line":199,"column":12},"end":{"line":199,"column":41}},"57":{"start":{"line":202,"column":8},"end":{"line":202,"column":27}},"58":{"start":{"line":205,"column":4},"end":{"line":205,"column":16}},"59":{"start":{"line":215,"column":0},"end":{"line":239,"column":1}},"60":{"start":{"line":216,"column":4},"end":{"line":216,"column":26}},"61":{"start":{"line":218,"column":4},"end":{"line":238,"column":5}},"62":{"start":{"line":219,"column":8},"end":{"line":219,"column":40}},"63":{"start":{"line":221,"column":8},"end":{"line":237,"column":9}},"64":{"start":{"line":222,"column":12},"end":{"line":222,"column":42}},"65":{"start":{"line":230,"column":12},"end":{"line":234,"column":14}},"66":{"start":{"line":236,"column":12},"end":{"line":236,"column":40}},"67":{"start":{"line":245,"column":0},"end":{"line":366,"column":2}},"68":{"start":{"line":257,"column":8},"end":{"line":257,"column":28}},"69":{"start":{"line":265,"column":8},"end":{"line":273,"column":9}},"70":{"start":{"line":266,"column":12},"end":{"line":266,"column":56}},"71":{"start":{"line":268,"column":12},"end":{"line":272,"column":15}},"72":{"start":{"line":282,"column":8},"end":{"line":296,"column":9}},"73":{"start":{"line":283,"column":12},"end":{"line":295,"column":13}},"74":{"start":{"line":284,"column":16},"end":{"line":284,"column":48}},"75":{"start":{"line":286,"column":16},"end":{"line":294,"column":17}},"76":{"start":{"line":287,"column":20},"end":{"line":287,"column":62}},"77":{"start":{"line":289,"column":20},"end":{"line":292,"column":21}},"78":{"start":{"line":290,"column":24},"end":{"line":290,"column":35}},"79":{"start":{"line":291,"column":24},"end":{"line":291,"column":61}},"80":{"start":{"line":293,"column":20},"end":{"line":293,"column":42}},"81":{"start":{"line":304,"column":8},"end":{"line":308,"column":9}},"82":{"start":{"line":305,"column":12},"end":{"line":307,"column":13}},"83":{"start":{"line":306,"column":16},"end":{"line":306,"column":43}},"84":{"start":{"line":317,"column":8},"end":{"line":346,"column":9}},"85":{"start":{"line":320,"column":12},"end":{"line":323,"column":33}},"86":{"start":{"line":325,"column":12},"end":{"line":327,"column":13}},"87":{"start":{"line":326,"column":16},"end":{"line":326,"column":23}},"88":{"start":{"line":330,"column":12},"end":{"line":330,"column":50}},"89":{"start":{"line":333,"column":12},"end":{"line":333,"column":75}},"90":{"start":{"line":335,"column":12},"end":{"line":337,"column":13}},"91":{"start":{"line":336,"column":16},"end":{"line":336,"column":58}},"92":{"start":{"line":343,"column":12},"end":{"line":345,"column":33}},"93":{"start":{"line":348,"column":8},"end":{"line":364,"column":10}},"94":{"start":{"line":350,"column":16},"end":{"line":350,"column":51}},"95":{"start":{"line":352,"column":16},"end":{"line":352,"column":37}},"96":{"start":{"line":354,"column":16},"end":{"line":354,"column":26}},"97":{"start":{"line":356,"column":16},"end":{"line":359,"column":17}},"98":{"start":{"line":357,"column":20},"end":{"line":357,"column":54}},"99":{"start":{"line":358,"column":20},"end":{"line":358,"column":61}},"100":{"start":{"line":361,"column":16},"end":{"line":361,"column":57}},"101":{"start":{"line":362,"column":16},"end":{"line":362,"column":32}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":20},"end":{"line":45,"column":38}},{"start":{"line":45,"column":42},"end":{"line":45,"column":68}}]},"3":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":8}},{"start":{"line":47,"column":8},"end":{"line":47,"column":8}}]},"4":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":12},"end":{"line":47,"column":16}},{"start":{"line":47,"column":20},"end":{"line":47,"column":43}},{"start":{"line":47,"column":47},"end":{"line":47,"column":72}}]},"5":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":13},"end":{"line":73,"column":31}},{"start":{"line":73,"column":35},"end":{"line":73,"column":50}}]},"6":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":11},"end":{"line":87,"column":25}},{"start":{"line":87,"column":29},"end":{"line":87,"column":43}}]},"7":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":12},"end":{"line":103,"column":38}},{"start":{"line":104,"column":12},"end":{"line":104,"column":59}}]},"8":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":14},"end":{"line":104,"column":23}},{"start":{"line":104,"column":27},"end":{"line":104,"column":58}}]},"9":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":12}},{"start":{"line":122,"column":12},"end":{"line":122,"column":12}}]},"10":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":19},"end":{"line":125,"column":19}},{"start":{"line":125,"column":19},"end":{"line":125,"column":19}}]},"11":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":141,"column":4}},{"start":{"line":141,"column":4},"end":{"line":141,"column":4}}]},"12":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":8},"end":{"line":150,"column":8}},{"start":{"line":150,"column":8},"end":{"line":150,"column":8}}]},"13":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":12},"end":{"line":151,"column":12}},{"start":{"line":151,"column":12},"end":{"line":151,"column":12}}]},"14":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":16},"end":{"line":151,"column":44}},{"start":{"line":151,"column":48},"end":{"line":151,"column":67}}]},"15":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":8},"end":{"line":170,"column":8}},{"start":{"line":170,"column":8},"end":{"line":170,"column":8}}]},"16":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":12},"end":{"line":173,"column":12}},{"start":{"line":173,"column":12},"end":{"line":173,"column":12}}]},"17":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":8},"end":{"line":198,"column":8}},{"start":{"line":198,"column":8},"end":{"line":198,"column":8}}]},"18":{"line":199,"type":"cond-expr","locations":[{"start":{"line":199,"column":29},"end":{"line":199,"column":33}},{"start":{"line":199,"column":36},"end":{"line":199,"column":40}}]},"19":{"line":221,"type":"binary-expr","locations":[{"start":{"line":221,"column":24},"end":{"line":221,"column":43}},{"start":{"line":221,"column":47},"end":{"line":221,"column":67}}]},"20":{"line":230,"type":"binary-expr","locations":[{"start":{"line":230,"column":27},"end":{"line":230,"column":55}},{"start":{"line":230,"column":59},"end":{"line":234,"column":13}}]},"21":{"line":231,"type":"binary-expr","locations":[{"start":{"line":231,"column":17},"end":{"line":231,"column":67}},{"start":{"line":232,"column":17},"end":{"line":232,"column":92}},{"start":{"line":233,"column":16},"end":{"line":233,"column":59}}]},"22":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":16},"end":{"line":286,"column":16}},{"start":{"line":286,"column":16},"end":{"line":286,"column":16}}]},"23":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":20},"end":{"line":289,"column":20}},{"start":{"line":289,"column":20},"end":{"line":289,"column":20}}]},"24":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":12},"end":{"line":305,"column":12}},{"start":{"line":305,"column":12},"end":{"line":305,"column":12}}]},"25":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":12},"end":{"line":325,"column":12}},{"start":{"line":325,"column":12},"end":{"line":325,"column":12}}]},"26":{"line":335,"type":"if","locations":[{"start":{"line":335,"column":12},"end":{"line":335,"column":12}},{"start":{"line":335,"column":12},"end":{"line":335,"column":12}}]}},"code":["/**"," * @fileoverview Rule to disallow use of unmodified expressions in loop conditions"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Traverser = require(\"../util/traverser\"),","    astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const pushAll = Function.apply.bind(Array.prototype.push);","const SENTINEL_PATTERN = /(?:(?:Call|Class|Function|Member|New|Yield)Expression|Statement|Declaration)$/;","const LOOP_PATTERN = /^(?:DoWhile|For|While)Statement$/;  // for-in/of statements don't have `test` property.","const GROUP_PATTERN = /^(?:BinaryExpression|ConditionalExpression)$/;","const SKIP_PATTERN = /^(?:ArrowFunction|Class|Function)Expression$/;","const DYNAMIC_PATTERN = /^(?:Call|Member|New|TaggedTemplate|Yield)Expression$/;","","/**"," * @typedef {Object} LoopConditionInfo"," * @property {escope.Reference} reference - The reference."," * @property {ASTNode} group - BinaryExpression or ConditionalExpression nodes"," *      that the reference is belonging to."," * @property {Function} isInLoop - The predicate which checks a given reference"," *      is in this loop."," * @property {boolean} modified - The flag that the reference is modified in"," *      this loop."," */","","/**"," * Checks whether or not a given reference is a write reference."," *"," * @param {escope.Reference} reference - A reference to check."," * @returns {boolean} `true` if the reference is a write reference."," */","function isWriteReference(reference) {","    if (reference.init) {","        const def = reference.resolved && reference.resolved.defs[0];","","        if (!def || def.type !== \"Variable\" || def.parent.kind !== \"var\") {","            return false;","        }","    }","    return reference.isWrite();","}","","/**"," * Checks whether or not a given loop condition info does not have the modified"," * flag."," *"," * @param {LoopConditionInfo} condition - A loop condition info to check."," * @returns {boolean} `true` if the loop condition info is \"unmodified\"."," */","function isUnmodified(condition) {","    return !condition.modified;","}","","/**"," * Checks whether or not a given loop condition info does not have the modified"," * flag and does not have the group this condition belongs to."," *"," * @param {LoopConditionInfo} condition - A loop condition info to check."," * @returns {boolean} `true` if the loop condition info is \"unmodified\"."," */","function isUnmodifiedAndNotBelongToGroup(condition) {","    return !(condition.modified || condition.group);","}","","/**"," * Checks whether or not a given reference is inside of a given node."," *"," * @param {ASTNode} node - A node to check."," * @param {escope.Reference} reference - A reference to check."," * @returns {boolean} `true` if the reference is inside of the node."," */","function isInRange(node, reference) {","    const or = node.range;","    const ir = reference.identifier.range;","","    return or[0] <= ir[0] && ir[1] <= or[1];","}","","/**"," * Checks whether or not a given reference is inside of a loop node's condition."," *"," * @param {ASTNode} node - A node to check."," * @param {escope.Reference} reference - A reference to check."," * @returns {boolean} `true` if the reference is inside of the loop node's"," *      condition."," */","const isInLoop = {","    WhileStatement: isInRange,","    DoWhileStatement: isInRange,","    ForStatement(node, reference) {","        return (","            isInRange(node, reference) &&","            !(node.init && isInRange(node.init, reference))","        );","    }","};","","/**"," * Checks whether or not a given group node has any dynamic elements."," *"," * @param {ASTNode} root - A node to check."," *      This node is one of BinaryExpression or ConditionalExpression."," * @returns {boolean} `true` if the node is dynamic."," */","function hasDynamicExpressions(root) {","    let retv = false;","    const traverser = new Traverser();","","    traverser.traverse(root, {","        enter(node) {","            if (DYNAMIC_PATTERN.test(node.type)) {","                retv = true;","                this.break();","            } else if (SKIP_PATTERN.test(node.type)) {","                this.skip();","            }","        }","    });","","    return retv;","}","","/**"," * Creates the loop condition information from a given reference."," *"," * @param {escope.Reference} reference - A reference to create."," * @returns {LoopConditionInfo|null} Created loop condition info, or null."," */","function toLoopCondition(reference) {","    if (reference.init) {","        return null;","    }","","    let group = null;","    let child = reference.identifier;","    let node = child.parent;","","    while (node) {","        if (SENTINEL_PATTERN.test(node.type)) {","            if (LOOP_PATTERN.test(node.type) && node.test === child) {","","                // This reference is inside of a loop condition.","                return {","                    reference,","                    group,","                    isInLoop: isInLoop[node.type].bind(null, node),","                    modified: false","                };","            }","","            // This reference is outside of a loop condition.","            break;","        }","","        /*","         * If it's inside of a group, OK if either operand is modified.","         * So stores the group this reference belongs to.","         */","        if (GROUP_PATTERN.test(node.type)) {","","            // If this expression is dynamic, no need to check.","            if (hasDynamicExpressions(node)) {","                break;","            } else {","                group = node;","            }","        }","","        child = node;","        node = node.parent;","    }","","    return null;","}","","/**"," * Gets the function which encloses a given reference."," * This supports only FunctionDeclaration."," *"," * @param {escope.Reference} reference - A reference to get."," * @returns {ASTNode|null} The function node or null."," */","function getEncloseFunctionDeclaration(reference) {","    let node = reference.identifier;","","    while (node) {","        if (node.type === \"FunctionDeclaration\") {","            return node.id ? node : null;","        }","","        node = node.parent;","    }","","    return null;","}","","/**"," * Updates the \"modified\" flags of given loop conditions with given modifiers."," *"," * @param {LoopConditionInfo[]} conditions - The loop conditions to be updated."," * @param {escope.Reference[]} modifiers - The references to update."," * @returns {void}"," */","function updateModifiedFlag(conditions, modifiers) {","    let funcNode, funcVar;","","    for (let i = 0; i < conditions.length; ++i) {","        const condition = conditions[i];","","        for (let j = 0; !condition.modified && j < modifiers.length; ++j) {","            const modifier = modifiers[j];","","            /*","             * Besides checking for the condition being in the loop, we want to","             * check the function that this modifier is belonging to is called","             * in the loop.","             * FIXME: This should probably be extracted to a function.","             */","            const inLoop = condition.isInLoop(modifier) || Boolean(","                (funcNode = getEncloseFunctionDeclaration(modifier)) &&","                (funcVar = astUtils.getVariableByName(modifier.from.upper, funcNode.id.name)) &&","                funcVar.references.some(condition.isInLoop)","            );","","            condition.modified = inLoop;","        }","    }","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unmodified loop conditions\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        let groupMap = null;","","        /**","         * Reports a given condition info.","         *","         * @param {LoopConditionInfo} condition - A loop condition info to report.","         * @returns {void}","         */","        function report(condition) {","            const node = condition.reference.identifier;","","            context.report({","                node,","                message: \"'{{name}}' is not modified in this loop.\",","                data: node","            });","        }","","        /**","         * Registers given conditions to the group the condition belongs to.","         *","         * @param {LoopConditionInfo[]} conditions - A loop condition info to","         *      register.","         * @returns {void}","         */","        function registerConditionsToGroup(conditions) {","            for (let i = 0; i < conditions.length; ++i) {","                const condition = conditions[i];","","                if (condition.group) {","                    let group = groupMap.get(condition.group);","","                    if (!group) {","                        group = [];","                        groupMap.set(condition.group, group);","                    }","                    group.push(condition);","                }","            }","        }","","        /**","         * Reports references which are inside of unmodified groups.","         *","         * @param {LoopConditionInfo[]} conditions - A loop condition info to report.","         * @returns {void}","         */","        function checkConditionsInGroup(conditions) {","            if (conditions.every(isUnmodified)) {","                conditions.forEach(report);","            }","        }","","        /**","         * Finds unmodified references which are inside of a loop condition.","         * Then reports the references which are outside of groups.","         *","         * @param {escope.Variable} variable - A variable to report.","         * @returns {void}","         */","        function checkReferences(variable) {","","            // Gets references that exist in loop conditions.","            const conditions = variable","                .references","                .map(toLoopCondition)","                .filter(Boolean);","","            if (conditions.length === 0) {","                return;","            }","","            // Registers the conditions to belonging groups.","            registerConditionsToGroup(conditions);","","            // Check the conditions are modified.","            const modifiers = variable.references.filter(isWriteReference);","","            if (modifiers.length > 0) {","                updateModifiedFlag(conditions, modifiers);","            }","","            /*","             * Reports the conditions which are not belonging to groups.","             * Others will be reported after all variables are done.","             */","            conditions","                .filter(isUnmodifiedAndNotBelongToGroup)","                .forEach(report);","        }","","        return {","            \"Program:exit\"() {","                const queue = [context.getScope()];","","                groupMap = new Map();","","                let scope;","","                while ((scope = queue.pop())) {","                    pushAll(queue, scope.childScopes);","                    scope.variables.forEach(checkReferences);","                }","","                groupMap.forEach(checkConditionsInGroup);","                groupMap = null;","            }","        };","    }","};",""],"l":{"12":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"43":1,"44":0,"45":0,"47":0,"48":0,"51":0,"61":1,"62":0,"72":1,"73":0,"83":1,"84":0,"85":0,"87":0,"98":1,"102":0,"116":1,"117":0,"118":0,"120":0,"122":0,"123":0,"124":0,"125":0,"126":0,"131":0,"140":1,"141":0,"142":0,"145":0,"146":0,"147":0,"149":0,"150":0,"151":0,"154":0,"163":0,"170":0,"173":0,"174":0,"176":0,"180":0,"181":0,"184":0,"194":1,"195":0,"197":0,"198":0,"199":0,"202":0,"205":0,"215":1,"216":0,"218":0,"219":0,"221":0,"222":0,"230":0,"236":0,"245":1,"257":0,"265":1,"266":0,"268":0,"282":1,"283":0,"284":0,"286":0,"287":0,"289":0,"290":0,"291":0,"293":0,"304":1,"305":0,"306":0,"317":1,"320":0,"325":0,"326":0,"330":0,"333":0,"335":0,"336":0,"343":0,"348":0,"350":0,"352":0,"354":0,"356":0,"357":0,"358":0,"361":0,"362":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unneeded-ternary.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unneeded-ternary.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":48,"loc":{"start":{"line":48,"column":10},"end":{"line":48,"column":20}}},"2":{"name":"isBooleanLiteral","line":59,"loc":{"start":{"line":59,"column":8},"end":{"line":59,"column":40}}},"3":{"name":"invertExpression","line":68,"loc":{"start":{"line":68,"column":8},"end":{"line":68,"column":40}}},"4":{"name":"isBooleanExpression","line":90,"loc":{"start":{"line":90,"column":8},"end":{"line":90,"column":43}}},"5":{"name":"matchesDefaultAssignment","line":101,"loc":{"start":{"line":101,"column":8},"end":{"line":101,"column":48}}},"6":{"name":"(anonymous_6)","line":109,"loc":{"start":{"line":109,"column":33},"end":{"line":109,"column":40}}},"7":{"name":"(anonymous_7)","line":115,"loc":{"start":{"line":115,"column":27},"end":{"line":115,"column":35}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":11,"column":0},"end":{"line":11,"column":104}},"3":{"start":{"line":12,"column":0},"end":{"line":19,"column":2}},"4":{"start":{"line":25,"column":0},"end":{"line":143,"column":2}},"5":{"start":{"line":49,"column":8},"end":{"line":49,"column":49}},"6":{"start":{"line":50,"column":8},"end":{"line":50,"column":70}},"7":{"start":{"line":51,"column":8},"end":{"line":51,"column":51}},"8":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"9":{"start":{"line":60,"column":12},"end":{"line":60,"column":78}},"10":{"start":{"line":68,"column":8},"end":{"line":83,"column":9}},"11":{"start":{"line":69,"column":12},"end":{"line":77,"column":13}},"12":{"start":{"line":70,"column":16},"end":{"line":74,"column":18}},"13":{"start":{"line":73,"column":29},"end":{"line":73,"column":58}},"14":{"start":{"line":76,"column":16},"end":{"line":76,"column":192}},"15":{"start":{"line":79,"column":12},"end":{"line":81,"column":13}},"16":{"start":{"line":80,"column":16},"end":{"line":80,"column":79}},"17":{"start":{"line":82,"column":12},"end":{"line":82,"column":73}},"18":{"start":{"line":90,"column":8},"end":{"line":93,"column":9}},"19":{"start":{"line":91,"column":12},"end":{"line":92,"column":73}},"20":{"start":{"line":101,"column":8},"end":{"line":105,"column":9}},"21":{"start":{"line":102,"column":12},"end":{"line":104,"column":59}},"22":{"start":{"line":107,"column":8},"end":{"line":141,"column":10}},"23":{"start":{"line":110,"column":16},"end":{"line":139,"column":17}},"24":{"start":{"line":111,"column":20},"end":{"line":131,"column":23}},"25":{"start":{"line":116,"column":28},"end":{"line":120,"column":29}},"26":{"start":{"line":119,"column":32},"end":{"line":119,"column":138}},"27":{"start":{"line":121,"column":28},"end":{"line":125,"column":29}},"28":{"start":{"line":124,"column":32},"end":{"line":124,"column":92}},"29":{"start":{"line":129,"column":28},"end":{"line":129,"column":182}},"30":{"start":{"line":132,"column":23},"end":{"line":139,"column":17}},"31":{"start":{"line":133,"column":20},"end":{"line":138,"column":23}},"32":{"start":{"line":137,"column":38},"end":{"line":137,"column":184}}},"branchMap":{"1":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":24},"end":{"line":49,"column":42}},{"start":{"line":49,"column":46},"end":{"line":49,"column":48}}]},"2":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":19},"end":{"line":60,"column":42}},{"start":{"line":60,"column":46},"end":{"line":60,"column":77}}]},"3":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":12},"end":{"line":69,"column":12}},{"start":{"line":69,"column":12},"end":{"line":69,"column":12}}]},"4":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":16},"end":{"line":69,"column":48}},{"start":{"line":69,"column":52},"end":{"line":69,"column":122}}]},"5":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":12}},{"start":{"line":79,"column":12},"end":{"line":79,"column":12}}]},"6":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":19},"end":{"line":91,"column":51}},{"start":{"line":91,"column":55},"end":{"line":91,"column":91}},{"start":{"line":92,"column":16},"end":{"line":92,"column":47}},{"start":{"line":92,"column":51},"end":{"line":92,"column":72}}]},"7":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":19},"end":{"line":102,"column":50}},{"start":{"line":103,"column":19},"end":{"line":103,"column":56}},{"start":{"line":104,"column":19},"end":{"line":104,"column":58}}]},"8":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":16},"end":{"line":110,"column":16}},{"start":{"line":110,"column":16},"end":{"line":110,"column":16}}]},"9":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":20},"end":{"line":110,"column":52}},{"start":{"line":110,"column":56},"end":{"line":110,"column":89}}]},"10":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":28},"end":{"line":116,"column":28}},{"start":{"line":116,"column":28},"end":{"line":116,"column":28}}]},"11":{"line":119,"type":"cond-expr","locations":[{"start":{"line":119,"column":73},"end":{"line":119,"column":130}},{"start":{"line":119,"column":133},"end":{"line":119,"column":137}}]},"12":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":28},"end":{"line":121,"column":28}},{"start":{"line":121,"column":28},"end":{"line":121,"column":28}}]},"13":{"line":129,"type":"cond-expr","locations":[{"start":{"line":129,"column":92},"end":{"line":129,"column":144}},{"start":{"line":129,"column":147},"end":{"line":129,"column":180}}]},"14":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":23},"end":{"line":132,"column":23}},{"start":{"line":132,"column":23},"end":{"line":132,"column":23}}]},"15":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":27},"end":{"line":132,"column":45}},{"start":{"line":132,"column":49},"end":{"line":132,"column":79}}]}},"code":["/**"," * @fileoverview Rule to flag no-unneeded-ternary"," * @author Gyandeep Singh"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","// Operators that always result in a boolean value","const BOOLEAN_OPERATORS = new Set([\"==\", \"===\", \"!=\", \"!==\", \">\", \">=\", \"<\", \"<=\", \"in\", \"instanceof\"]);","const OPERATOR_INVERSES = {","    \"==\": \"!=\",","    \"!=\": \"==\",","    \"===\": \"!==\",","    \"!==\": \"===\"","","    // Operators like < and >= are not true inverses, since both will return false with NaN.","};","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow ternary operators when simpler alternatives exist\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    defaultAssignment: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","        const options = context.options[0] || {};","        const defaultAssignment = options.defaultAssignment !== false;","        const sourceCode = context.getSourceCode();","","        /**","         * Test if the node is a boolean literal","         * @param {ASTNode} node - The node to report.","         * @returns {boolean} True if the its a boolean literal","         * @private","         */","        function isBooleanLiteral(node) {","            return node.type === \"Literal\" && typeof node.value === \"boolean\";","        }","","        /**","         * Creates an expression that represents the boolean inverse of the expression represented by the original node","         * @param {ASTNode} node A node representing an expression","         * @returns {string} A string representing an inverted expression","         */","        function invertExpression(node) {","            if (node.type === \"BinaryExpression\" && Object.prototype.hasOwnProperty.call(OPERATOR_INVERSES, node.operator)) {","                const operatorToken = sourceCode.getFirstTokenBetween(","                    node.left,","                    node.right,","                    token => token.value === node.operator","                );","","                return sourceCode.getText().slice(node.range[0], operatorToken.range[0]) + OPERATOR_INVERSES[node.operator] + sourceCode.getText().slice(operatorToken.range[1], node.range[1]);","            }","","            if (astUtils.getPrecedence(node) < astUtils.getPrecedence({ type: \"UnaryExpression\" })) {","                return `!(${astUtils.getParenthesisedText(sourceCode, node)})`;","            }","            return `!${astUtils.getParenthesisedText(sourceCode, node)}`;","        }","","        /**","         * Tests if a given node always evaluates to a boolean value","         * @param {ASTNode} node - An expression node","         * @returns {boolean} True if it is determined that the node will always evaluate to a boolean value","         */","        function isBooleanExpression(node) {","            return node.type === \"BinaryExpression\" && BOOLEAN_OPERATORS.has(node.operator) ||","                node.type === \"UnaryExpression\" && node.operator === \"!\";","        }","","        /**","         * Test if the node matches the pattern id ? id : expression","         * @param {ASTNode} node - The ConditionalExpression to check.","         * @returns {boolean} True if the pattern is matched, and false otherwise","         * @private","         */","        function matchesDefaultAssignment(node) {","            return node.test.type === \"Identifier\" &&","                   node.consequent.type === \"Identifier\" &&","                   node.test.name === node.consequent.name;","        }","","        return {","","            ConditionalExpression(node) {","                if (isBooleanLiteral(node.alternate) && isBooleanLiteral(node.consequent)) {","                    context.report({","                        node,","                        loc: node.consequent.loc.start,","                        message: \"Unnecessary use of boolean literals in conditional expression.\",","                        fix(fixer) {","                            if (node.consequent.value === node.alternate.value) {","","                                // Replace `foo ? true : true` with just `true`, but don't replace `foo() ? true : true`","                                return node.test.type === \"Identifier\" ? fixer.replaceText(node, node.consequent.value.toString()) : null;","                            }","                            if (node.alternate.value) {","","                                // Replace `foo() ? false : true` with `!(foo())`","                                return fixer.replaceText(node, invertExpression(node.test));","                            }","","                            // Replace `foo ? true : false` with `foo` if `foo` is guaranteed to be a boolean, or `!!foo` otherwise.","","                            return fixer.replaceText(node, isBooleanExpression(node.test) ? astUtils.getParenthesisedText(sourceCode, node.test) : `!${invertExpression(node.test)}`);","                        }","                    });","                } else if (!defaultAssignment && matchesDefaultAssignment(node)) {","                    context.report({","                        node,","                        loc: node.consequent.loc.start,","                        message: \"Unnecessary use of conditional expression for default assignment.\",","                        fix: fixer => fixer.replaceText(node, `${astUtils.getParenthesisedText(sourceCode, node.test)} || ${astUtils.getParenthesisedText(sourceCode, node.alternate)}`)","                    });","                }","            }","        };","    }","};",""],"l":{"8":1,"11":1,"12":1,"25":1,"49":0,"50":0,"51":0,"59":1,"60":0,"68":1,"69":0,"70":0,"73":0,"76":0,"79":0,"80":0,"82":0,"90":1,"91":0,"101":1,"102":0,"107":0,"110":0,"111":0,"116":0,"119":0,"121":0,"124":0,"129":0,"132":0,"133":0,"137":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unreachable.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unreachable.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"isInitialized","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":29}}},"2":{"name":"isUnreachable","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":32}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":28}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":16},"end":{"line":43,"column":19}}},"5":{"name":"(anonymous_5)","line":54,"loc":{"start":{"line":54,"column":15},"end":{"line":54,"column":18}}},"6":{"name":"(anonymous_6)","line":63,"loc":{"start":{"line":63,"column":12},"end":{"line":63,"column":19}}},"7":{"name":"(anonymous_7)","line":75,"loc":{"start":{"line":75,"column":17},"end":{"line":75,"column":24}}},"8":{"name":"(anonymous_8)","line":84,"loc":{"start":{"line":84,"column":9},"end":{"line":84,"column":16}}},"9":{"name":"(anonymous_9)","line":93,"loc":{"start":{"line":93,"column":9},"end":{"line":93,"column":16}}},"10":{"name":"(anonymous_10)","line":113,"loc":{"start":{"line":113,"column":10},"end":{"line":113,"column":20}}},"11":{"name":"reportIfUnreachable","line":123,"loc":{"start":{"line":123,"column":8},"end":{"line":123,"column":43}}},"12":{"name":"(anonymous_12)","line":165,"loc":{"start":{"line":165,"column":27},"end":{"line":165,"column":38}}},"13":{"name":"(anonymous_13)","line":169,"loc":{"start":{"line":169,"column":25},"end":{"line":169,"column":28}}},"14":{"name":"(anonymous_14)","line":193,"loc":{"start":{"line":193,"column":31},"end":{"line":193,"column":38}}},"15":{"name":"(anonymous_15)","line":205,"loc":{"start":{"line":205,"column":26},"end":{"line":205,"column":29}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":18,"column":1}},"2":{"start":{"line":17,"column":4},"end":{"line":17,"column":30}},"3":{"start":{"line":25,"column":0},"end":{"line":27,"column":1}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":30}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":37}},"6":{"start":{"line":35,"column":8},"end":{"line":35,"column":30}},"7":{"start":{"line":36,"column":8},"end":{"line":36,"column":28}},"8":{"start":{"line":44,"column":8},"end":{"line":47,"column":10}},"9":{"start":{"line":55,"column":8},"end":{"line":55,"column":49}},"10":{"start":{"line":64,"column":8},"end":{"line":67,"column":10}},"11":{"start":{"line":76,"column":8},"end":{"line":76,"column":67}},"12":{"start":{"line":85,"column":8},"end":{"line":85,"column":28}},"13":{"start":{"line":94,"column":8},"end":{"line":94,"column":45}},"14":{"start":{"line":102,"column":0},"end":{"line":210,"column":2}},"15":{"start":{"line":114,"column":8},"end":{"line":114,"column":35}},"16":{"start":{"line":116,"column":8},"end":{"line":116,"column":68}},"17":{"start":{"line":123,"column":8},"end":{"line":160,"column":9}},"18":{"start":{"line":124,"column":12},"end":{"line":124,"column":32}},"19":{"start":{"line":126,"column":12},"end":{"line":146,"column":13}},"20":{"start":{"line":129,"column":16},"end":{"line":132,"column":17}},"21":{"start":{"line":130,"column":20},"end":{"line":130,"column":38}},"22":{"start":{"line":131,"column":20},"end":{"line":131,"column":27}},"23":{"start":{"line":135,"column":16},"end":{"line":137,"column":17}},"24":{"start":{"line":136,"column":20},"end":{"line":136,"column":27}},"25":{"start":{"line":140,"column":16},"end":{"line":143,"column":17}},"26":{"start":{"line":141,"column":20},"end":{"line":141,"column":38}},"27":{"start":{"line":142,"column":20},"end":{"line":142,"column":27}},"28":{"start":{"line":145,"column":16},"end":{"line":145,"column":32}},"29":{"start":{"line":150,"column":12},"end":{"line":156,"column":13}},"30":{"start":{"line":151,"column":16},"end":{"line":155,"column":19}},"31":{"start":{"line":159,"column":12},"end":{"line":159,"column":34}},"32":{"start":{"line":162,"column":8},"end":{"line":208,"column":10}},"33":{"start":{"line":166,"column":16},"end":{"line":166,"column":43}},"34":{"start":{"line":170,"column":16},"end":{"line":170,"column":56}},"35":{"start":{"line":194,"column":16},"end":{"line":196,"column":17}},"36":{"start":{"line":195,"column":20},"end":{"line":195,"column":46}},"37":{"start":{"line":206,"column":16},"end":{"line":206,"column":38}}},"branchMap":{"1":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":17},"end":{"line":55,"column":31}},{"start":{"line":55,"column":35},"end":{"line":55,"column":47}}]},"2":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":52}},{"start":{"line":66,"column":12},"end":{"line":66,"column":50}}]},"3":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":12}},{"start":{"line":126,"column":12},"end":{"line":126,"column":12}}]},"4":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":16},"end":{"line":126,"column":20}},{"start":{"line":126,"column":24},"end":{"line":126,"column":76}}]},"5":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16}},{"start":{"line":129,"column":16},"end":{"line":129,"column":16}}]},"6":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":16},"end":{"line":135,"column":16}},{"start":{"line":135,"column":16},"end":{"line":135,"column":16}}]},"7":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":16},"end":{"line":140,"column":16}},{"start":{"line":140,"column":16},"end":{"line":140,"column":16}}]},"8":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":12},"end":{"line":150,"column":12}},{"start":{"line":150,"column":12},"end":{"line":150,"column":12}}]},"9":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":16},"end":{"line":194,"column":16}},{"start":{"line":194,"column":16},"end":{"line":194,"column":16}}]},"10":{"line":194,"type":"binary-expr","locations":[{"start":{"line":194,"column":20},"end":{"line":194,"column":39}},{"start":{"line":194,"column":43},"end":{"line":194,"column":80}}]}},"code":["/**"," * @fileoverview Checks for unreachable code due to return, throws, break, and continue."," * @author Joel Feenstra"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given variable declarator has the initializer."," * @param {ASTNode} node - A VariableDeclarator node to check."," * @returns {boolean} `true` if the node has the initializer."," */","function isInitialized(node) {","    return Boolean(node.init);","}","","/**"," * Checks whether or not a given code path segment is unreachable."," * @param {CodePathSegment} segment - A CodePathSegment to check."," * @returns {boolean} `true` if the segment is unreachable."," */","function isUnreachable(segment) {","    return !segment.reachable;","}","","/**"," * The class to distinguish consecutive unreachable statements."," */","class ConsecutiveRange {","    constructor(sourceCode) {","        this.sourceCode = sourceCode;","        this.startNode = null;","        this.endNode = null;","    }","","    /**","     * The location object of this range.","     * @type {Object}","     */","    get location() {","        return {","            start: this.startNode.loc.start,","            end: this.endNode.loc.end","        };","    }","","    /**","     * `true` if this range is empty.","     * @type {boolean}","     */","    get isEmpty() {","        return !(this.startNode && this.endNode);","    }","","    /**","     * Checks whether the given node is inside of this range.","     * @param {ASTNode|Token} node - The node to check.","     * @returns {boolean} `true` if the node is inside of this range.","     */","    contains(node) {","        return (","            node.range[0] >= this.startNode.range[0] &&","            node.range[1] <= this.endNode.range[1]","        );","    }","","    /**","     * Checks whether the given node is consecutive to this range.","     * @param {ASTNode} node - The node to check.","     * @returns {boolean} `true` if the node is consecutive to this range.","     */","    isConsecutive(node) {","        return this.contains(this.sourceCode.getTokenBefore(node));","    }","","    /**","     * Merges the given node to this range.","     * @param {ASTNode} node - The node to merge.","     * @returns {void}","     */","    merge(node) {","        this.endNode = node;","    }","","    /**","     * Resets this range by the given node or null.","     * @param {ASTNode|null} node - The node to reset, or null.","     * @returns {void}","     */","    reset(node) {","        this.startNode = this.endNode = node;","    }","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unreachable code after `return`, `throw`, `continue`, and `break` statements\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","        let currentCodePath = null;","","        const range = new ConsecutiveRange(context.getSourceCode());","","        /**","         * Reports a given node if it's unreachable.","         * @param {ASTNode} node - A statement node to report.","         * @returns {void}","         */","        function reportIfUnreachable(node) {","            let nextNode = null;","","            if (node && currentCodePath.currentSegments.every(isUnreachable)) {","","                // Store this statement to distinguish consecutive statements.","                if (range.isEmpty) {","                    range.reset(node);","                    return;","                }","","                // Skip if this statement is inside of the current range.","                if (range.contains(node)) {","                    return;","                }","","                // Merge if this statement is consecutive to the current range.","                if (range.isConsecutive(node)) {","                    range.merge(node);","                    return;","                }","","                nextNode = node;","            }","","            // Report the current range since this statement is reachable or is","            // not consecutive to the current range.","            if (!range.isEmpty) {","                context.report({","                    message: \"Unreachable code.\",","                    loc: range.location,","                    node: range.startNode","                });","            }","","            // Update the current range.","            range.reset(nextNode);","        }","","        return {","","            // Manages the current code path.","            onCodePathStart(codePath) {","                currentCodePath = codePath;","            },","","            onCodePathEnd() {","                currentCodePath = currentCodePath.upper;","            },","","            // Registers for all statement nodes (excludes FunctionDeclaration).","            BlockStatement: reportIfUnreachable,","            BreakStatement: reportIfUnreachable,","            ClassDeclaration: reportIfUnreachable,","            ContinueStatement: reportIfUnreachable,","            DebuggerStatement: reportIfUnreachable,","            DoWhileStatement: reportIfUnreachable,","            EmptyStatement: reportIfUnreachable,","            ExpressionStatement: reportIfUnreachable,","            ForInStatement: reportIfUnreachable,","            ForOfStatement: reportIfUnreachable,","            ForStatement: reportIfUnreachable,","            IfStatement: reportIfUnreachable,","            ImportDeclaration: reportIfUnreachable,","            LabeledStatement: reportIfUnreachable,","            ReturnStatement: reportIfUnreachable,","            SwitchStatement: reportIfUnreachable,","            ThrowStatement: reportIfUnreachable,","            TryStatement: reportIfUnreachable,","","            VariableDeclaration(node) {","                if (node.kind !== \"var\" || node.declarations.some(isInitialized)) {","                    reportIfUnreachable(node);","                }","            },","","            WhileStatement: reportIfUnreachable,","            WithStatement: reportIfUnreachable,","            ExportNamedDeclaration: reportIfUnreachable,","            ExportDefaultDeclaration: reportIfUnreachable,","            ExportAllDeclaration: reportIfUnreachable,","","            \"Program:exit\"() {","                reportIfUnreachable();","            }","        };","    }","};",""],"l":{"16":1,"17":0,"25":1,"26":0,"34":0,"35":0,"36":0,"44":0,"55":0,"64":0,"76":0,"85":0,"94":0,"102":1,"114":0,"116":0,"123":1,"124":0,"126":0,"129":0,"130":0,"131":0,"135":0,"136":0,"140":0,"141":0,"142":0,"145":0,"150":0,"151":0,"159":0,"162":0,"166":0,"170":0,"194":0,"195":0,"206":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unsafe-finally.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unsafe-finally.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":20}}},"2":{"name":"isFinallyBlock","line":39,"loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":38}}},"3":{"name":"isInFinallyBlock","line":50,"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":47}}},"4":{"name":"check","line":83,"loc":{"start":{"line":83,"column":8},"end":{"line":83,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":125}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":209}},"3":{"start":{"line":14,"column":0},"end":{"line":14,"column":196}},"4":{"start":{"line":21,"column":0},"end":{"line":104,"column":2}},"5":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"6":{"start":{"line":40,"column":12},"end":{"line":40,"column":89}},"7":{"start":{"line":50,"column":8},"end":{"line":75,"column":9}},"8":{"start":{"line":51,"column":12},"end":{"line":51,"column":36}},"9":{"start":{"line":52,"column":12},"end":{"line":52,"column":33}},"10":{"start":{"line":54,"column":12},"end":{"line":60,"column":13}},"11":{"start":{"line":55,"column":16},"end":{"line":55,"column":60}},"12":{"start":{"line":56,"column":19},"end":{"line":60,"column":13}},"13":{"start":{"line":57,"column":16},"end":{"line":57,"column":63}},"14":{"start":{"line":59,"column":16},"end":{"line":59,"column":67}},"15":{"start":{"line":62,"column":12},"end":{"line":73,"column":13}},"16":{"start":{"line":63,"column":16},"end":{"line":65,"column":17}},"17":{"start":{"line":64,"column":20},"end":{"line":64,"column":39}},"18":{"start":{"line":66,"column":16},"end":{"line":71,"column":17}},"19":{"start":{"line":67,"column":20},"end":{"line":69,"column":21}},"20":{"start":{"line":68,"column":24},"end":{"line":68,"column":37}},"21":{"start":{"line":70,"column":20},"end":{"line":70,"column":32}},"22":{"start":{"line":72,"column":16},"end":{"line":72,"column":35}},"23":{"start":{"line":74,"column":12},"end":{"line":74,"column":25}},"24":{"start":{"line":83,"column":8},"end":{"line":95,"column":9}},"25":{"start":{"line":84,"column":12},"end":{"line":94,"column":13}},"26":{"start":{"line":85,"column":16},"end":{"line":93,"column":19}},"27":{"start":{"line":97,"column":8},"end":{"line":102,"column":10}}},"branchMap":{"1":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":19},"end":{"line":40,"column":54}},{"start":{"line":40,"column":58},"end":{"line":40,"column":88}}]},"2":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":12}},{"start":{"line":54,"column":12},"end":{"line":54,"column":12}}]},"3":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":16},"end":{"line":54,"column":46}},{"start":{"line":54,"column":50},"end":{"line":54,"column":61}}]},"4":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":19},"end":{"line":56,"column":19}},{"start":{"line":56,"column":19},"end":{"line":56,"column":19}}]},"5":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":19},"end":{"line":62,"column":23}},{"start":{"line":62,"column":27},"end":{"line":62,"column":60}}]},"6":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":63,"column":16}},{"start":{"line":63,"column":16},"end":{"line":63,"column":16}}]},"7":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":20},"end":{"line":63,"column":37}},{"start":{"line":63,"column":41},"end":{"line":63,"column":46}},{"start":{"line":63,"column":51},"end":{"line":63,"column":88}}]},"8":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":16},"end":{"line":66,"column":16}},{"start":{"line":66,"column":16},"end":{"line":66,"column":16}}]},"9":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":20},"end":{"line":67,"column":20}},{"start":{"line":67,"column":20},"end":{"line":67,"column":20}}]},"10":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":24},"end":{"line":67,"column":29}},{"start":{"line":67,"column":33},"end":{"line":67,"column":44}}]},"11":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":12}},{"start":{"line":84,"column":12},"end":{"line":84,"column":12}}]}},"code":["/**"," * @fileoverview Rule to flag unsafe statements in finally block"," * @author Onur Temizkan"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const SENTINEL_NODE_TYPE_RETURN_THROW = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/;","const SENTINEL_NODE_TYPE_BREAK = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement|SwitchStatement)$/;","const SENTINEL_NODE_TYPE_CONTINUE = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement)$/;","","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow control flow statements in `finally` blocks\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","    create(context) {","","        /**","         * Checks if the node is the finalizer of a TryStatement","         *","         * @param {ASTNode} node - node to check.","         * @returns {boolean} - true if the node is the finalizer of a TryStatement","         */","        function isFinallyBlock(node) {","            return node.parent.type === \"TryStatement\" && node.parent.finalizer === node;","        }","","        /**","         * Climbs up the tree if the node is not a sentinel node","         *","         * @param {ASTNode} node - node to check.","         * @param {string} label - label of the break or continue statement","         * @returns {boolean} - return whether the node is a finally block or a sentinel node","         */","        function isInFinallyBlock(node, label) {","            let labelInside = false;","            let sentinelNodeType;","","            if (node.type === \"BreakStatement\" && !node.label) {","                sentinelNodeType = SENTINEL_NODE_TYPE_BREAK;","            } else if (node.type === \"ContinueStatement\") {","                sentinelNodeType = SENTINEL_NODE_TYPE_CONTINUE;","            } else {","                sentinelNodeType = SENTINEL_NODE_TYPE_RETURN_THROW;","            }","","            while (node && !sentinelNodeType.test(node.type)) {","                if (node.parent.label && label && (node.parent.label.name === label.name)) {","                    labelInside = true;","                }","                if (isFinallyBlock(node)) {","                    if (label && labelInside) {","                        return false;","                    }","                    return true;","                }","                node = node.parent;","            }","            return false;","        }","","        /**","         * Checks whether the possibly-unsafe statement is inside a finally block.","         *","         * @param {ASTNode} node - node to check.","         * @returns {void}","         */","        function check(node) {","            if (isInFinallyBlock(node, node.label)) {","                context.report({","                    message: \"Unsafe usage of {{nodeType}}.\",","                    data: {","                        nodeType: node.type","                    },","                    node,","                    line: node.loc.line,","                    column: node.loc.column","                });","            }","        }","","        return {","            ReturnStatement: check,","            ThrowStatement: check,","            BreakStatement: check,","            ContinueStatement: check","        };","    }","};",""],"l":{"12":1,"13":1,"14":1,"21":1,"39":1,"40":0,"50":1,"51":0,"52":0,"54":0,"55":0,"56":0,"57":0,"59":0,"62":0,"63":0,"64":0,"66":0,"67":0,"68":0,"70":0,"72":0,"74":0,"83":1,"84":0,"85":0,"97":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unsafe-negation.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unsafe-negation.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"isRelationalOperator","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":34}}},"2":{"name":"isNegation","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":26}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":10},"end":{"line":53,"column":20}}},"4":{"name":"(anonymous_4)","line":57,"loc":{"start":{"line":57,"column":28},"end":{"line":57,"column":35}}},"5":{"name":"(anonymous_5)","line":68,"loc":{"start":{"line":68,"column":27},"end":{"line":68,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":24,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":46}},"4":{"start":{"line":34,"column":0},"end":{"line":36,"column":1}},"5":{"start":{"line":35,"column":4},"end":{"line":35,"column":68}},"6":{"start":{"line":42,"column":0},"end":{"line":80,"column":2}},"7":{"start":{"line":54,"column":8},"end":{"line":54,"column":51}},"8":{"start":{"line":56,"column":8},"end":{"line":78,"column":10}},"9":{"start":{"line":58,"column":16},"end":{"line":76,"column":17}},"10":{"start":{"line":62,"column":20},"end":{"line":75,"column":23}},"11":{"start":{"line":69,"column":28},"end":{"line":69,"column":86}},"12":{"start":{"line":70,"column":28},"end":{"line":70,"column":85}},"13":{"start":{"line":71,"column":28},"end":{"line":71,"column":89}},"14":{"start":{"line":73,"column":28},"end":{"line":73,"column":81}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":11},"end":{"line":25,"column":22}},{"start":{"line":25,"column":26},"end":{"line":25,"column":45}}]},"2":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":11},"end":{"line":35,"column":42}},{"start":{"line":35,"column":46},"end":{"line":35,"column":67}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":16},"end":{"line":58,"column":16}},{"start":{"line":58,"column":16},"end":{"line":58,"column":16}}]},"4":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":20},"end":{"line":58,"column":55}},{"start":{"line":59,"column":20},"end":{"line":59,"column":41}},{"start":{"line":60,"column":20},"end":{"line":60,"column":68}}]}},"code":["/**"," * @fileoverview Rule to disallow negating the left operand of relational operators"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether the given operator is a relational operator or not."," *"," * @param {string} op - The operator type to check."," * @returns {boolean} `true` if the operator is a relational operator."," */","function isRelationalOperator(op) {","    return op === \"in\" || op === \"instanceof\";","}","","/**"," * Checks whether the given node is a logical negation expression or not."," *"," * @param {ASTNode} node - The node to check."," * @returns {boolean} `true` if the node is a logical negation expression."," */","function isNegation(node) {","    return node.type === \"UnaryExpression\" && node.operator === \"!\";","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow negating the left operand of relational operators\",","            category: \"Possible Errors\",","            recommended: true","        },","        schema: [],","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","            BinaryExpression(node) {","                if (isRelationalOperator(node.operator) &&","                    isNegation(node.left) &&","                    !astUtils.isParenthesised(sourceCode, node.left)","                ) {","                    context.report({","                        node,","                        loc: node.left.loc,","                        message: \"Unexpected negating the left operand of '{{operator}}' operator.\",","                        data: node,","","                        fix(fixer) {","                            const negationToken = sourceCode.getFirstToken(node.left);","                            const fixRange = [negationToken.range[1], node.range[1]];","                            const text = sourceCode.text.slice(fixRange[0], fixRange[1]);","","                            return fixer.replaceTextRange(fixRange, `(${text})`);","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"12":1,"24":1,"25":0,"34":1,"35":0,"42":1,"54":0,"56":0,"58":0,"62":0,"69":0,"70":0,"71":0,"73":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unused-expressions.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unused-expressions.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":38,"loc":{"start":{"line":38,"column":10},"end":{"line":38,"column":20}}},"2":{"name":"looksLikeDirective","line":48,"loc":{"start":{"line":48,"column":8},"end":{"line":48,"column":42}}},"3":{"name":"takeWhile","line":58,"loc":{"start":{"line":58,"column":8},"end":{"line":58,"column":44}}},"4":{"name":"directives","line":71,"loc":{"start":{"line":71,"column":8},"end":{"line":71,"column":34}}},"5":{"name":"isDirective","line":80,"loc":{"start":{"line":80,"column":8},"end":{"line":80,"column":46}}},"6":{"name":"isValidExpression","line":94,"loc":{"start":{"line":94,"column":8},"end":{"line":94,"column":41}}},"7":{"name":"(anonymous_7)","line":118,"loc":{"start":{"line":118,"column":31},"end":{"line":118,"column":38}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":126,"column":2}},"2":{"start":{"line":39,"column":8},"end":{"line":42,"column":72}},"3":{"start":{"line":48,"column":8},"end":{"line":51,"column":9}},"4":{"start":{"line":49,"column":12},"end":{"line":50,"column":96}},"5":{"start":{"line":58,"column":8},"end":{"line":65,"column":9}},"6":{"start":{"line":59,"column":12},"end":{"line":63,"column":13}},"7":{"start":{"line":60,"column":16},"end":{"line":62,"column":17}},"8":{"start":{"line":61,"column":20},"end":{"line":61,"column":44}},"9":{"start":{"line":64,"column":12},"end":{"line":64,"column":32}},"10":{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},"11":{"start":{"line":72,"column":12},"end":{"line":72,"column":60}},"12":{"start":{"line":80,"column":8},"end":{"line":87,"column":9}},"13":{"start":{"line":81,"column":12},"end":{"line":82,"column":62}},"14":{"start":{"line":84,"column":12},"end":{"line":86,"column":58}},"15":{"start":{"line":94,"column":8},"end":{"line":115,"column":9}},"16":{"start":{"line":95,"column":12},"end":{"line":101,"column":13}},"17":{"start":{"line":98,"column":16},"end":{"line":100,"column":17}},"18":{"start":{"line":99,"column":20},"end":{"line":99,"column":99}},"19":{"start":{"line":103,"column":12},"end":{"line":107,"column":13}},"20":{"start":{"line":104,"column":16},"end":{"line":106,"column":17}},"21":{"start":{"line":105,"column":20},"end":{"line":105,"column":57}},"22":{"start":{"line":109,"column":12},"end":{"line":111,"column":13}},"23":{"start":{"line":110,"column":16},"end":{"line":110,"column":28}},"24":{"start":{"line":113,"column":12},"end":{"line":114,"column":100}},"25":{"start":{"line":117,"column":8},"end":{"line":123,"column":10}},"26":{"start":{"line":119,"column":16},"end":{"line":121,"column":17}},"27":{"start":{"line":120,"column":20},"end":{"line":120,"column":128}}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":41}},{"start":{"line":39,"column":45},"end":{"line":39,"column":47}}]},"2":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":32},"end":{"line":40,"column":56}},{"start":{"line":40,"column":60},"end":{"line":40,"column":65}}]},"3":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":27},"end":{"line":41,"column":46}},{"start":{"line":41,"column":50},"end":{"line":41,"column":55}}]},"4":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":35},"end":{"line":42,"column":62}},{"start":{"line":42,"column":66},"end":{"line":42,"column":71}}]},"5":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":19},"end":{"line":49,"column":54}},{"start":{"line":50,"column":16},"end":{"line":50,"column":50}},{"start":{"line":50,"column":54},"end":{"line":50,"column":95}}]},"6":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":16},"end":{"line":60,"column":16}},{"start":{"line":60,"column":16},"end":{"line":60,"column":16}}]},"7":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":20},"end":{"line":84,"column":45}},{"start":{"line":84,"column":49},"end":{"line":84,"column":81}},{"start":{"line":85,"column":21},"end":{"line":85,"column":54}},{"start":{"line":86,"column":20},"end":{"line":86,"column":57}}]},"8":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":12},"end":{"line":95,"column":12}},{"start":{"line":95,"column":12},"end":{"line":95,"column":12}}]},"9":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":16}},{"start":{"line":98,"column":16},"end":{"line":98,"column":16}}]},"10":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":27},"end":{"line":99,"column":61}},{"start":{"line":99,"column":65},"end":{"line":99,"column":98}}]},"11":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":12},"end":{"line":103,"column":12}},{"start":{"line":103,"column":12},"end":{"line":103,"column":12}}]},"12":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":16},"end":{"line":104,"column":16}},{"start":{"line":104,"column":16},"end":{"line":104,"column":16}}]},"13":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":12},"end":{"line":109,"column":12}},{"start":{"line":109,"column":12},"end":{"line":109,"column":12}}]},"14":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":16},"end":{"line":109,"column":36}},{"start":{"line":109,"column":40},"end":{"line":109,"column":80}}]},"15":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":19},"end":{"line":113,"column":91}},{"start":{"line":114,"column":17},"end":{"line":114,"column":48}},{"start":{"line":114,"column":52},"end":{"line":114,"column":98}}]},"16":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":16},"end":{"line":119,"column":16}},{"start":{"line":119,"column":16},"end":{"line":119,"column":16}}]},"17":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":20},"end":{"line":119,"column":55}},{"start":{"line":119,"column":59},"end":{"line":119,"column":101}}]}},"code":["/**"," * @fileoverview Flag expressions in statement position that do not side effect"," * @author Michael Ficarra"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unused expressions\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allowShortCircuit: {","                        type: \"boolean\"","                    },","                    allowTernary: {","                        type: \"boolean\"","                    },","                    allowTaggedTemplates: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const config = context.options[0] || {},","            allowShortCircuit = config.allowShortCircuit || false,","            allowTernary = config.allowTernary || false,","            allowTaggedTemplates = config.allowTaggedTemplates || false;","","        /**","         * @param {ASTNode} node - any node","         * @returns {boolean} whether the given node structurally represents a directive","         */","        function looksLikeDirective(node) {","            return node.type === \"ExpressionStatement\" &&","                node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";","        }","","        /**","         * @param {Function} predicate - ([a] -> Boolean) the function used to make the determination","         * @param {a[]} list - the input list","         * @returns {a[]} the leading sequence of members in the given list that pass the given predicate","         */","        function takeWhile(predicate, list) {","            for (let i = 0; i < list.length; ++i) {","                if (!predicate(list[i])) {","                    return list.slice(0, i);","                }","            }","            return list.slice();","        }","","        /**","         * @param {ASTNode} node - a Program or BlockStatement node","         * @returns {ASTNode[]} the leading sequence of directive nodes in the given node's body","         */","        function directives(node) {","            return takeWhile(looksLikeDirective, node.body);","        }","","        /**","         * @param {ASTNode} node - any node","         * @param {ASTNode[]} ancestors - the given node's ancestors","         * @returns {boolean} whether the given node is considered a directive in its current position","         */","        function isDirective(node, ancestors) {","            const parent = ancestors[ancestors.length - 1],","                grandparent = ancestors[ancestors.length - 2];","","            return (parent.type === \"Program\" || parent.type === \"BlockStatement\" &&","                    (/Function/.test(grandparent.type))) &&","                    directives(parent).indexOf(node) >= 0;","        }","","        /**","         * Determines whether or not a given node is a valid expression. Recurses on short circuit eval and ternary nodes if enabled by flags.","         * @param {ASTNode} node - any node","         * @returns {boolean} whether the given node is a valid expression","         */","        function isValidExpression(node) {","            if (allowTernary) {","","                // Recursive check for ternary and logical expressions","                if (node.type === \"ConditionalExpression\") {","                    return isValidExpression(node.consequent) && isValidExpression(node.alternate);","                }","            }","","            if (allowShortCircuit) {","                if (node.type === \"LogicalExpression\") {","                    return isValidExpression(node.right);","                }","            }","","            if (allowTaggedTemplates && node.type === \"TaggedTemplateExpression\") {","                return true;","            }","","            return /^(?:Assignment|Call|New|Update|Yield|Await)Expression$/.test(node.type) ||","                (node.type === \"UnaryExpression\" && [\"delete\", \"void\"].indexOf(node.operator) >= 0);","        }","","        return {","            ExpressionStatement(node) {","                if (!isValidExpression(node.expression) && !isDirective(node, context.getAncestors())) {","                    context.report({ node, message: \"Expected an assignment or function call and instead saw an expression.\" });","                }","            }","        };","","    }","};",""],"l":{"11":1,"39":0,"48":1,"49":0,"58":1,"59":0,"60":0,"61":0,"64":0,"71":1,"72":0,"80":1,"81":0,"84":0,"94":1,"95":0,"98":0,"99":0,"103":0,"104":0,"105":0,"109":0,"110":0,"113":0,"117":0,"119":0,"120":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unused-labels.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unused-labels.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"enterLabeledScope","line":35,"loc":{"start":{"line":35,"column":8},"end":{"line":35,"column":41}}},"3":{"name":"exitLabeledScope","line":50,"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":40}}},"4":{"name":"(anonymous_4)","line":56,"loc":{"start":{"line":56,"column":23},"end":{"line":56,"column":31}}},"5":{"name":"markAsUsed","line":81,"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":34}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":105,"column":2}},"2":{"start":{"line":26,"column":8},"end":{"line":26,"column":51}},"3":{"start":{"line":27,"column":8},"end":{"line":27,"column":29}},"4":{"start":{"line":35,"column":8},"end":{"line":41,"column":9}},"5":{"start":{"line":36,"column":12},"end":{"line":40,"column":14}},"6":{"start":{"line":50,"column":8},"end":{"line":72,"column":9}},"7":{"start":{"line":51,"column":12},"end":{"line":69,"column":13}},"8":{"start":{"line":52,"column":16},"end":{"line":68,"column":19}},"9":{"start":{"line":62,"column":24},"end":{"line":64,"column":25}},"10":{"start":{"line":63,"column":28},"end":{"line":63,"column":90}},"11":{"start":{"line":66,"column":24},"end":{"line":66,"column":36}},"12":{"start":{"line":71,"column":12},"end":{"line":71,"column":40}},"13":{"start":{"line":81,"column":8},"end":{"line":96,"column":9}},"14":{"start":{"line":82,"column":12},"end":{"line":84,"column":13}},"15":{"start":{"line":83,"column":16},"end":{"line":83,"column":23}},"16":{"start":{"line":86,"column":12},"end":{"line":86,"column":42}},"17":{"start":{"line":87,"column":12},"end":{"line":87,"column":33}},"18":{"start":{"line":89,"column":12},"end":{"line":95,"column":13}},"19":{"start":{"line":90,"column":16},"end":{"line":93,"column":17}},"20":{"start":{"line":91,"column":20},"end":{"line":91,"column":37}},"21":{"start":{"line":92,"column":20},"end":{"line":92,"column":26}},"22":{"start":{"line":94,"column":16},"end":{"line":94,"column":34}},"23":{"start":{"line":98,"column":8},"end":{"line":103,"column":10}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":12}},{"start":{"line":51,"column":12},"end":{"line":51,"column":12}}]},"2":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":24},"end":{"line":62,"column":24}},{"start":{"line":62,"column":24},"end":{"line":62,"column":24}}]},"3":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":12},"end":{"line":82,"column":12}},{"start":{"line":82,"column":12},"end":{"line":82,"column":12}}]},"4":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":16},"end":{"line":90,"column":16}},{"start":{"line":90,"column":16},"end":{"line":90,"column":16}}]}},"code":["/**"," * @fileoverview Rule to disallow unused labels."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unused labels\",","            category: \"Best Practices\",","            recommended: true","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        let scopeInfo = null;","","        /**","         * Adds a scope info to the stack.","         *","         * @param {ASTNode} node - A node to add. This is a LabeledStatement.","         * @returns {void}","         */","        function enterLabeledScope(node) {","            scopeInfo = {","                label: node.label.name,","                used: false,","                upper: scopeInfo","            };","        }","","        /**","         * Removes the top of the stack.","         * At the same time, this reports the label if it's never used.","         *","         * @param {ASTNode} node - A node to report. This is a LabeledStatement.","         * @returns {void}","         */","        function exitLabeledScope(node) {","            if (!scopeInfo.used) {","                context.report({","                    node: node.label,","                    message: \"'{{name}}:' is defined but never used.\",","                    data: node.label,","                    fix(fixer) {","","                        /*","                         * Only perform a fix if there are no comments between the label and the body. This will be the case","                         * when there is exactly one token/comment (the \":\") between the label and the body.","                         */","                        if (sourceCode.getTokenAfter(node.label, { includeComments: true }) === sourceCode.getTokenBefore(node.body, { includeComments: true })) {","                            return fixer.removeRange([node.range[0], node.body.range[0]]);","                        }","","                        return null;","                    }","                });","            }","","            scopeInfo = scopeInfo.upper;","        }","","        /**","         * Marks the label of a given node as used.","         *","         * @param {ASTNode} node - A node to mark. This is a BreakStatement or","         *      ContinueStatement.","         * @returns {void}","         */","        function markAsUsed(node) {","            if (!node.label) {","                return;","            }","","            const label = node.label.name;","            let info = scopeInfo;","","            while (info) {","                if (info.label === label) {","                    info.used = true;","                    break;","                }","                info = info.upper;","            }","        }","","        return {","            LabeledStatement: enterLabeledScope,","            \"LabeledStatement:exit\": exitLabeledScope,","            BreakStatement: markAsUsed,","            ContinueStatement: markAsUsed","        };","    }","};",""],"l":{"12":1,"26":0,"27":0,"35":1,"36":0,"50":1,"51":0,"52":0,"62":0,"63":0,"66":0,"71":0,"81":1,"82":0,"83":0,"86":0,"87":0,"89":0,"90":0,"91":0,"92":0,"94":0,"98":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unused-vars.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-unused-vars.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":1,"83":0,"84":0,"85":0,"86":0,"87":1,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":1,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":1,"159":0,"160":0,"161":0,"162":0,"163":1,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0,0],"22":[0,0],"23":[0,0,0,0,0,0,0],"24":[0,0],"25":[0,0],"26":[0,0,0],"27":[0,0,0,0,0,0,0,0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":64,"loc":{"start":{"line":64,"column":10},"end":{"line":64,"column":20}}},"2":{"name":"isExported","line":115,"loc":{"start":{"line":115,"column":8},"end":{"line":115,"column":38}}},"3":{"name":"hasRestSpreadSibling","line":141,"loc":{"start":{"line":141,"column":8},"end":{"line":141,"column":48}}},"4":{"name":"isReadRef","line":164,"loc":{"start":{"line":164,"column":8},"end":{"line":164,"column":32}}},"5":{"name":"isSelfReference","line":175,"loc":{"start":{"line":175,"column":8},"end":{"line":175,"column":45}}},"6":{"name":"isInside","line":197,"loc":{"start":{"line":197,"column":8},"end":{"line":197,"column":40}}},"7":{"name":"getRhsNode","line":220,"loc":{"start":{"line":220,"column":8},"end":{"line":220,"column":46}}},"8":{"name":"isStorableFunction","line":258,"loc":{"start":{"line":258,"column":8},"end":{"line":258,"column":55}}},"9":{"name":"isInsideOfStorableFunction","line":312,"loc":{"start":{"line":312,"column":8},"end":{"line":312,"column":57}}},"10":{"name":"isReadForItself","line":330,"loc":{"start":{"line":330,"column":8},"end":{"line":330,"column":47}}},"11":{"name":"isForInRef","line":364,"loc":{"start":{"line":364,"column":8},"end":{"line":364,"column":33}}},"12":{"name":"isUsedVariable","line":400,"loc":{"start":{"line":400,"column":8},"end":{"line":400,"column":42}}},"13":{"name":"isLastInNonIgnoredParameters","line":428,"loc":{"start":{"line":428,"column":8},"end":{"line":428,"column":56}}},"14":{"name":"collectUnusedVariables","line":456,"loc":{"start":{"line":456,"column":8},"end":{"line":456,"column":59}}},"15":{"name":"getColumnInComment","line":548,"loc":{"start":{"line":548,"column":8},"end":{"line":548,"column":55}}},"16":{"name":"getLocation","line":568,"loc":{"start":{"line":568,"column":8},"end":{"line":568,"column":39}}},"17":{"name":"(anonymous_17)","line":579,"loc":{"start":{"line":579,"column":26},"end":{"line":579,"column":40}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":41}},"3":{"start":{"line":19,"column":0},"end":{"line":604,"column":2}},"4":{"start":{"line":65,"column":8},"end":{"line":65,"column":51}},"5":{"start":{"line":67,"column":8},"end":{"line":67,"column":72}},"6":{"start":{"line":68,"column":8},"end":{"line":68,"column":82}},"7":{"start":{"line":69,"column":8},"end":{"line":69,"column":69}},"8":{"start":{"line":71,"column":8},"end":{"line":76,"column":10}},"9":{"start":{"line":78,"column":8},"end":{"line":78,"column":47}},"10":{"start":{"line":80,"column":8},"end":{"line":101,"column":9}},"11":{"start":{"line":81,"column":12},"end":{"line":100,"column":13}},"12":{"start":{"line":82,"column":16},"end":{"line":82,"column":42}},"13":{"start":{"line":84,"column":16},"end":{"line":84,"column":62}},"14":{"start":{"line":85,"column":16},"end":{"line":85,"column":62}},"15":{"start":{"line":86,"column":16},"end":{"line":86,"column":104}},"16":{"start":{"line":87,"column":16},"end":{"line":87,"column":86}},"17":{"start":{"line":89,"column":16},"end":{"line":91,"column":17}},"18":{"start":{"line":90,"column":20},"end":{"line":90,"column":89}},"19":{"start":{"line":93,"column":16},"end":{"line":95,"column":17}},"20":{"start":{"line":94,"column":20},"end":{"line":94,"column":89}},"21":{"start":{"line":97,"column":16},"end":{"line":99,"column":17}},"22":{"start":{"line":98,"column":20},"end":{"line":98,"column":105}},"23":{"start":{"line":107,"column":8},"end":{"line":107,"column":60}},"24":{"start":{"line":115,"column":8},"end":{"line":133,"column":9}},"25":{"start":{"line":117,"column":12},"end":{"line":117,"column":48}},"26":{"start":{"line":119,"column":12},"end":{"line":130,"column":13}},"27":{"start":{"line":121,"column":16},"end":{"line":121,"column":43}},"28":{"start":{"line":123,"column":16},"end":{"line":127,"column":17}},"29":{"start":{"line":124,"column":20},"end":{"line":124,"column":39}},"30":{"start":{"line":125,"column":23},"end":{"line":127,"column":17}},"31":{"start":{"line":126,"column":20},"end":{"line":126,"column":33}},"32":{"start":{"line":129,"column":16},"end":{"line":129,"column":64}},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":25}},"34":{"start":{"line":141,"column":8},"end":{"line":156,"column":9}},"35":{"start":{"line":142,"column":12},"end":{"line":153,"column":13}},"36":{"start":{"line":143,"column":16},"end":{"line":152,"column":19}},"37":{"start":{"line":144,"column":20},"end":{"line":144,"column":57}},"38":{"start":{"line":145,"column":20},"end":{"line":145,"column":60}},"39":{"start":{"line":147,"column":20},"end":{"line":151,"column":22}},"40":{"start":{"line":155,"column":12},"end":{"line":155,"column":25}},"41":{"start":{"line":164,"column":8},"end":{"line":166,"column":9}},"42":{"start":{"line":165,"column":12},"end":{"line":165,"column":32}},"43":{"start":{"line":175,"column":8},"end":{"line":187,"column":9}},"44":{"start":{"line":176,"column":12},"end":{"line":176,"column":33}},"45":{"start":{"line":178,"column":12},"end":{"line":184,"column":13}},"46":{"start":{"line":179,"column":16},"end":{"line":181,"column":17}},"47":{"start":{"line":180,"column":20},"end":{"line":180,"column":32}},"48":{"start":{"line":183,"column":16},"end":{"line":183,"column":36}},"49":{"start":{"line":186,"column":12},"end":{"line":186,"column":25}},"50":{"start":{"line":197,"column":8},"end":{"line":202,"column":9}},"51":{"start":{"line":198,"column":12},"end":{"line":201,"column":14}},"52":{"start":{"line":220,"column":8},"end":{"line":244,"column":9}},"53":{"start":{"line":221,"column":12},"end":{"line":221,"column":38}},"54":{"start":{"line":222,"column":12},"end":{"line":222,"column":37}},"55":{"start":{"line":223,"column":12},"end":{"line":223,"column":41}},"56":{"start":{"line":224,"column":12},"end":{"line":224,"column":52}},"57":{"start":{"line":225,"column":12},"end":{"line":225,"column":62}},"58":{"start":{"line":226,"column":12},"end":{"line":226,"column":82}},"59":{"start":{"line":232,"column":12},"end":{"line":234,"column":13}},"60":{"start":{"line":233,"column":16},"end":{"line":233,"column":35}},"61":{"start":{"line":236,"column":12},"end":{"line":242,"column":13}},"62":{"start":{"line":241,"column":16},"end":{"line":241,"column":36}},"63":{"start":{"line":243,"column":12},"end":{"line":243,"column":24}},"64":{"start":{"line":258,"column":8},"end":{"line":295,"column":9}},"65":{"start":{"line":259,"column":12},"end":{"line":259,"column":32}},"66":{"start":{"line":260,"column":12},"end":{"line":260,"column":41}},"67":{"start":{"line":262,"column":12},"end":{"line":292,"column":13}},"68":{"start":{"line":263,"column":16},"end":{"line":288,"column":17}},"69":{"start":{"line":265,"column":24},"end":{"line":267,"column":25}},"70":{"start":{"line":266,"column":28},"end":{"line":266,"column":41}},"71":{"start":{"line":268,"column":24},"end":{"line":268,"column":30}},"72":{"start":{"line":272,"column":24},"end":{"line":272,"column":54}},"73":{"start":{"line":277,"column":24},"end":{"line":277,"column":36}},"74":{"start":{"line":280,"column":24},"end":{"line":287,"column":25}},"75":{"start":{"line":286,"column":28},"end":{"line":286,"column":40}},"76":{"start":{"line":290,"column":16},"end":{"line":290,"column":30}},"77":{"start":{"line":291,"column":16},"end":{"line":291,"column":39}},"78":{"start":{"line":294,"column":12},"end":{"line":294,"column":25}},"79":{"start":{"line":312,"column":8},"end":{"line":320,"column":9}},"80":{"start":{"line":313,"column":12},"end":{"line":313,"column":59}},"81":{"start":{"line":315,"column":12},"end":{"line":319,"column":14}},"82":{"start":{"line":330,"column":8},"end":{"line":355,"column":9}},"83":{"start":{"line":331,"column":12},"end":{"line":331,"column":38}},"84":{"start":{"line":332,"column":12},"end":{"line":332,"column":37}},"85":{"start":{"line":333,"column":12},"end":{"line":333,"column":41}},"86":{"start":{"line":335,"column":12},"end":{"line":354,"column":14}},"87":{"start":{"line":364,"column":8},"end":{"line":392,"column":9}},"88":{"start":{"line":365,"column":12},"end":{"line":365,"column":47}},"89":{"start":{"line":369,"column":12},"end":{"line":371,"column":13}},"90":{"start":{"line":370,"column":16},"end":{"line":370,"column":46}},"91":{"start":{"line":373,"column":12},"end":{"line":375,"column":13}},"92":{"start":{"line":374,"column":16},"end":{"line":374,"column":29}},"93":{"start":{"line":378,"column":12},"end":{"line":384,"column":13}},"94":{"start":{"line":379,"column":16},"end":{"line":379,"column":45}},"95":{"start":{"line":383,"column":16},"end":{"line":383,"column":37}},"96":{"start":{"line":387,"column":12},"end":{"line":389,"column":13}},"97":{"start":{"line":388,"column":16},"end":{"line":388,"column":29}},"98":{"start":{"line":391,"column":12},"end":{"line":391,"column":53}},"99":{"start":{"line":400,"column":8},"end":{"line":420,"column":9}},"100":{"start":{"line":401,"column":12},"end":{"line":402,"column":64}},"101":{"start":{"line":401,"column":62},"end":{"line":401,"column":89}},"102":{"start":{"line":401,"column":102},"end":{"line":401,"column":110}},"103":{"start":{"line":403,"column":12},"end":{"line":403,"column":31}},"104":{"start":{"line":405,"column":12},"end":{"line":419,"column":15}},"105":{"start":{"line":406,"column":16},"end":{"line":408,"column":17}},"106":{"start":{"line":407,"column":20},"end":{"line":407,"column":32}},"107":{"start":{"line":410,"column":16},"end":{"line":410,"column":64}},"108":{"start":{"line":412,"column":16},"end":{"line":412,"column":51}},"109":{"start":{"line":414,"column":16},"end":{"line":418,"column":18}},"110":{"start":{"line":428,"column":8},"end":{"line":447,"column":9}},"111":{"start":{"line":429,"column":12},"end":{"line":429,"column":41}},"112":{"start":{"line":432,"column":12},"end":{"line":434,"column":13}},"113":{"start":{"line":433,"column":16},"end":{"line":433,"column":28}},"114":{"start":{"line":437,"column":12},"end":{"line":444,"column":13}},"115":{"start":{"line":438,"column":16},"end":{"line":438,"column":70}},"116":{"start":{"line":439,"column":16},"end":{"line":439,"column":83}},"117":{"start":{"line":441,"column":16},"end":{"line":443,"column":17}},"118":{"start":{"line":441,"column":47},"end":{"line":441,"column":113}},"119":{"start":{"line":442,"column":20},"end":{"line":442,"column":32}},"120":{"start":{"line":446,"column":12},"end":{"line":446,"column":25}},"121":{"start":{"line":456,"column":8},"end":{"line":539,"column":9}},"122":{"start":{"line":457,"column":12},"end":{"line":457,"column":46}},"123":{"start":{"line":458,"column":12},"end":{"line":458,"column":50}},"124":{"start":{"line":459,"column":12},"end":{"line":459,"column":21}},"125":{"start":{"line":461,"column":12},"end":{"line":532,"column":13}},"126":{"start":{"line":462,"column":16},"end":{"line":531,"column":17}},"127":{"start":{"line":463,"column":20},"end":{"line":463,"column":50}},"128":{"start":{"line":466,"column":20},"end":{"line":468,"column":21}},"129":{"start":{"line":467,"column":24},"end":{"line":467,"column":33}},"130":{"start":{"line":471,"column":20},"end":{"line":473,"column":21}},"131":{"start":{"line":472,"column":24},"end":{"line":472,"column":33}},"132":{"start":{"line":476,"column":20},"end":{"line":478,"column":21}},"133":{"start":{"line":477,"column":24},"end":{"line":477,"column":33}},"134":{"start":{"line":481,"column":20},"end":{"line":481,"column":49}},"135":{"start":{"line":483,"column":20},"end":{"line":526,"column":21}},"136":{"start":{"line":484,"column":24},"end":{"line":484,"column":46}},"137":{"start":{"line":487,"column":24},"end":{"line":496,"column":25}},"138":{"start":{"line":488,"column":28},"end":{"line":490,"column":29}},"139":{"start":{"line":489,"column":32},"end":{"line":489,"column":41}},"140":{"start":{"line":493,"column":28},"end":{"line":495,"column":29}},"141":{"start":{"line":494,"column":32},"end":{"line":494,"column":41}},"142":{"start":{"line":498,"column":24},"end":{"line":525,"column":25}},"143":{"start":{"line":501,"column":28},"end":{"line":503,"column":29}},"144":{"start":{"line":502,"column":32},"end":{"line":502,"column":41}},"145":{"start":{"line":506,"column":28},"end":{"line":508,"column":29}},"146":{"start":{"line":507,"column":32},"end":{"line":507,"column":41}},"147":{"start":{"line":511,"column":28},"end":{"line":513,"column":29}},"148":{"start":{"line":512,"column":32},"end":{"line":512,"column":41}},"149":{"start":{"line":516,"column":28},"end":{"line":518,"column":29}},"150":{"start":{"line":517,"column":32},"end":{"line":517,"column":41}},"151":{"start":{"line":522,"column":28},"end":{"line":524,"column":29}},"152":{"start":{"line":523,"column":32},"end":{"line":523,"column":41}},"153":{"start":{"line":528,"column":20},"end":{"line":530,"column":21}},"154":{"start":{"line":529,"column":24},"end":{"line":529,"column":50}},"155":{"start":{"line":534,"column":12},"end":{"line":536,"column":13}},"156":{"start":{"line":535,"column":16},"end":{"line":535,"column":67}},"157":{"start":{"line":538,"column":12},"end":{"line":538,"column":30}},"158":{"start":{"line":548,"column":8},"end":{"line":558,"column":9}},"159":{"start":{"line":549,"column":12},"end":{"line":549,"column":108}},"160":{"start":{"line":552,"column":12},"end":{"line":552,"column":72}},"161":{"start":{"line":555,"column":12},"end":{"line":555,"column":58}},"162":{"start":{"line":557,"column":12},"end":{"line":557,"column":47}},"163":{"start":{"line":568,"column":8},"end":{"line":572,"column":9}},"164":{"start":{"line":569,"column":12},"end":{"line":569,"column":65}},"165":{"start":{"line":571,"column":12},"end":{"line":571,"column":108}},"166":{"start":{"line":578,"column":8},"end":{"line":601,"column":10}},"167":{"start":{"line":580,"column":16},"end":{"line":580,"column":82}},"168":{"start":{"line":582,"column":16},"end":{"line":599,"column":17}},"169":{"start":{"line":583,"column":20},"end":{"line":583,"column":52}},"170":{"start":{"line":585,"column":20},"end":{"line":598,"column":21}},"171":{"start":{"line":586,"column":24},"end":{"line":591,"column":27}},"172":{"start":{"line":592,"column":27},"end":{"line":598,"column":21}},"173":{"start":{"line":593,"column":24},"end":{"line":597,"column":27}},"174":{"start":{"line":595,"column":70},"end":{"line":595,"column":83}}},"branchMap":{"1":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":8}},{"start":{"line":80,"column":8},"end":{"line":80,"column":8}}]},"2":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":12},"end":{"line":81,"column":12}},{"start":{"line":81,"column":12},"end":{"line":81,"column":12}}]},"3":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":30},"end":{"line":84,"column":46}},{"start":{"line":84,"column":50},"end":{"line":84,"column":61}}]},"4":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":30},"end":{"line":85,"column":46}},{"start":{"line":85,"column":50},"end":{"line":85,"column":61}}]},"5":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":44},"end":{"line":86,"column":74}},{"start":{"line":86,"column":78},"end":{"line":86,"column":103}}]},"6":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":38},"end":{"line":87,"column":62}},{"start":{"line":87,"column":66},"end":{"line":87,"column":85}}]},"7":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":16},"end":{"line":89,"column":16}},{"start":{"line":89,"column":16},"end":{"line":89,"column":16}}]},"8":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":16}},{"start":{"line":93,"column":16},"end":{"line":93,"column":16}}]},"9":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":16},"end":{"line":97,"column":16}},{"start":{"line":97,"column":16},"end":{"line":97,"column":16}}]},"10":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":12},"end":{"line":119,"column":12}},{"start":{"line":119,"column":12},"end":{"line":119,"column":12}}]},"11":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":16},"end":{"line":123,"column":16}},{"start":{"line":123,"column":16},"end":{"line":123,"column":16}}]},"12":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":23},"end":{"line":125,"column":23}},{"start":{"line":125,"column":23},"end":{"line":125,"column":23}}]},"13":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":142,"column":12}},{"start":{"line":142,"column":12},"end":{"line":142,"column":12}}]},"14":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":24},"end":{"line":148,"column":56}},{"start":{"line":149,"column":24},"end":{"line":149,"column":60}},{"start":{"line":150,"column":24},"end":{"line":150,"column":111}}]},"15":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":16},"end":{"line":179,"column":16}},{"start":{"line":179,"column":16},"end":{"line":179,"column":16}}]},"16":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":16},"end":{"line":199,"column":48}},{"start":{"line":200,"column":16},"end":{"line":200,"column":48}}]},"17":{"line":226,"type":"binary-expr","locations":[{"start":{"line":226,"column":35},"end":{"line":226,"column":56}},{"start":{"line":226,"column":60},"end":{"line":226,"column":81}}]},"18":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":12},"end":{"line":232,"column":12}},{"start":{"line":232,"column":12},"end":{"line":232,"column":12}}]},"19":{"line":232,"type":"binary-expr","locations":[{"start":{"line":232,"column":16},"end":{"line":232,"column":27}},{"start":{"line":232,"column":31},"end":{"line":232,"column":56}}]},"20":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":12},"end":{"line":236,"column":12}},{"start":{"line":236,"column":12},"end":{"line":236,"column":12}}]},"21":{"line":236,"type":"binary-expr","locations":[{"start":{"line":236,"column":16},"end":{"line":236,"column":54}},{"start":{"line":237,"column":16},"end":{"line":237,"column":53}},{"start":{"line":238,"column":16},"end":{"line":238,"column":34}},{"start":{"line":239,"column":16},"end":{"line":239,"column":31}}]},"22":{"line":262,"type":"binary-expr","locations":[{"start":{"line":262,"column":19},"end":{"line":262,"column":25}},{"start":{"line":262,"column":29},"end":{"line":262,"column":54}}]},"23":{"line":263,"type":"switch","locations":[{"start":{"line":264,"column":20},"end":{"line":268,"column":30}},{"start":{"line":270,"column":20},"end":{"line":270,"column":42}},{"start":{"line":271,"column":20},"end":{"line":272,"column":54}},{"start":{"line":274,"column":20},"end":{"line":274,"column":48}},{"start":{"line":275,"column":20},"end":{"line":275,"column":52}},{"start":{"line":276,"column":20},"end":{"line":277,"column":36}},{"start":{"line":279,"column":20},"end":{"line":287,"column":25}}]},"24":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":24},"end":{"line":265,"column":24}},{"start":{"line":265,"column":24},"end":{"line":265,"column":24}}]},"25":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":24},"end":{"line":280,"column":24}},{"start":{"line":280,"column":24},"end":{"line":280,"column":24}}]},"26":{"line":316,"type":"binary-expr","locations":[{"start":{"line":316,"column":16},"end":{"line":316,"column":24}},{"start":{"line":317,"column":16},"end":{"line":317,"column":43}},{"start":{"line":318,"column":16},"end":{"line":318,"column":53}}]},"27":{"line":335,"type":"binary-expr","locations":[{"start":{"line":335,"column":19},"end":{"line":335,"column":31}},{"start":{"line":339,"column":20},"end":{"line":339,"column":58}},{"start":{"line":340,"column":20},"end":{"line":340,"column":57}},{"start":{"line":341,"column":20},"end":{"line":341,"column":38}},{"start":{"line":344,"column":20},"end":{"line":344,"column":54}},{"start":{"line":345,"column":20},"end":{"line":345,"column":57}},{"start":{"line":350,"column":20},"end":{"line":350,"column":27}},{"start":{"line":351,"column":20},"end":{"line":351,"column":41}},{"start":{"line":352,"column":20},"end":{"line":352,"column":60}}]},"28":{"line":369,"type":"if","locations":[{"start":{"line":369,"column":12},"end":{"line":369,"column":12}},{"start":{"line":369,"column":12},"end":{"line":369,"column":12}}]},"29":{"line":373,"type":"if","locations":[{"start":{"line":373,"column":12},"end":{"line":373,"column":12}},{"start":{"line":373,"column":12},"end":{"line":373,"column":12}}]},"30":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":12},"end":{"line":378,"column":12}},{"start":{"line":378,"column":12},"end":{"line":378,"column":12}}]},"31":{"line":387,"type":"if","locations":[{"start":{"line":387,"column":12},"end":{"line":387,"column":12}},{"start":{"line":387,"column":12},"end":{"line":387,"column":12}}]},"32":{"line":406,"type":"if","locations":[{"start":{"line":406,"column":16},"end":{"line":406,"column":16}},{"start":{"line":406,"column":16},"end":{"line":406,"column":16}}]},"33":{"line":415,"type":"binary-expr","locations":[{"start":{"line":415,"column":20},"end":{"line":415,"column":34}},{"start":{"line":416,"column":20},"end":{"line":416,"column":30}},{"start":{"line":417,"column":20},"end":{"line":417,"column":82}}]},"34":{"line":417,"type":"binary-expr","locations":[{"start":{"line":417,"column":22},"end":{"line":417,"column":42}},{"start":{"line":417,"column":46},"end":{"line":417,"column":81}}]},"35":{"line":432,"type":"if","locations":[{"start":{"line":432,"column":12},"end":{"line":432,"column":12}},{"start":{"line":432,"column":12},"end":{"line":432,"column":12}}]},"36":{"line":437,"type":"if","locations":[{"start":{"line":437,"column":12},"end":{"line":437,"column":12}},{"start":{"line":437,"column":12},"end":{"line":437,"column":12}}]},"37":{"line":441,"type":"if","locations":[{"start":{"line":441,"column":16},"end":{"line":441,"column":16}},{"start":{"line":441,"column":16},"end":{"line":441,"column":16}}]},"38":{"line":441,"type":"binary-expr","locations":[{"start":{"line":441,"column":47},"end":{"line":441,"column":72}},{"start":{"line":441,"column":76},"end":{"line":441,"column":113}}]},"39":{"line":461,"type":"if","locations":[{"start":{"line":461,"column":12},"end":{"line":461,"column":12}},{"start":{"line":461,"column":12},"end":{"line":461,"column":12}}]},"40":{"line":461,"type":"binary-expr","locations":[{"start":{"line":461,"column":16},"end":{"line":461,"column":36}},{"start":{"line":461,"column":41},"end":{"line":461,"column":64}},{"start":{"line":461,"column":68},"end":{"line":461,"column":89}}]},"41":{"line":466,"type":"if","locations":[{"start":{"line":466,"column":20},"end":{"line":466,"column":20}},{"start":{"line":466,"column":20},"end":{"line":466,"column":20}}]},"42":{"line":466,"type":"binary-expr","locations":[{"start":{"line":466,"column":24},"end":{"line":466,"column":46}},{"start":{"line":466,"column":50},"end":{"line":466,"column":92}}]},"43":{"line":471,"type":"if","locations":[{"start":{"line":471,"column":20},"end":{"line":471,"column":20}},{"start":{"line":471,"column":20},"end":{"line":471,"column":20}}]},"44":{"line":471,"type":"binary-expr","locations":[{"start":{"line":471,"column":24},"end":{"line":471,"column":53}},{"start":{"line":471,"column":57},"end":{"line":471,"column":76}}]},"45":{"line":476,"type":"if","locations":[{"start":{"line":476,"column":20},"end":{"line":476,"column":20}},{"start":{"line":476,"column":20},"end":{"line":476,"column":20}}]},"46":{"line":476,"type":"binary-expr","locations":[{"start":{"line":476,"column":24},"end":{"line":476,"column":49}},{"start":{"line":476,"column":53},"end":{"line":476,"column":82}},{"start":{"line":476,"column":86},"end":{"line":476,"column":119}}]},"47":{"line":483,"type":"if","locations":[{"start":{"line":483,"column":20},"end":{"line":483,"column":20}},{"start":{"line":483,"column":20},"end":{"line":483,"column":20}}]},"48":{"line":487,"type":"if","locations":[{"start":{"line":487,"column":24},"end":{"line":487,"column":24}},{"start":{"line":487,"column":24},"end":{"line":487,"column":24}}]},"49":{"line":488,"type":"if","locations":[{"start":{"line":488,"column":28},"end":{"line":488,"column":28}},{"start":{"line":488,"column":28},"end":{"line":488,"column":28}}]},"50":{"line":493,"type":"if","locations":[{"start":{"line":493,"column":28},"end":{"line":493,"column":28}},{"start":{"line":493,"column":28},"end":{"line":493,"column":28}}]},"51":{"line":493,"type":"binary-expr","locations":[{"start":{"line":493,"column":32},"end":{"line":493,"column":64}},{"start":{"line":493,"column":68},"end":{"line":493,"column":120}}]},"52":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":24},"end":{"line":498,"column":24}},{"start":{"line":498,"column":24},"end":{"line":498,"column":24}}]},"53":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":28},"end":{"line":501,"column":28}},{"start":{"line":501,"column":28},"end":{"line":501,"column":28}}]},"54":{"line":501,"type":"binary-expr","locations":[{"start":{"line":501,"column":33},"end":{"line":501,"column":68}},{"start":{"line":501,"column":72},"end":{"line":501,"column":115}},{"start":{"line":501,"column":120},"end":{"line":501,"column":150}}]},"55":{"line":506,"type":"if","locations":[{"start":{"line":506,"column":28},"end":{"line":506,"column":28}},{"start":{"line":506,"column":28},"end":{"line":506,"column":28}}]},"56":{"line":511,"type":"if","locations":[{"start":{"line":511,"column":28},"end":{"line":511,"column":28}},{"start":{"line":511,"column":28},"end":{"line":511,"column":28}}]},"57":{"line":511,"type":"binary-expr","locations":[{"start":{"line":511,"column":32},"end":{"line":511,"column":56}},{"start":{"line":511,"column":60},"end":{"line":511,"column":104}}]},"58":{"line":516,"type":"if","locations":[{"start":{"line":516,"column":28},"end":{"line":516,"column":28}},{"start":{"line":516,"column":28},"end":{"line":516,"column":28}}]},"59":{"line":516,"type":"binary-expr","locations":[{"start":{"line":516,"column":32},"end":{"line":516,"column":60}},{"start":{"line":516,"column":64},"end":{"line":516,"column":103}}]},"60":{"line":522,"type":"if","locations":[{"start":{"line":522,"column":28},"end":{"line":522,"column":28}},{"start":{"line":522,"column":28},"end":{"line":522,"column":28}}]},"61":{"line":522,"type":"binary-expr","locations":[{"start":{"line":522,"column":32},"end":{"line":522,"column":56}},{"start":{"line":522,"column":60},"end":{"line":522,"column":104}}]},"62":{"line":528,"type":"if","locations":[{"start":{"line":528,"column":20},"end":{"line":528,"column":20}},{"start":{"line":528,"column":20},"end":{"line":528,"column":20}}]},"63":{"line":528,"type":"binary-expr","locations":[{"start":{"line":528,"column":24},"end":{"line":528,"column":49}},{"start":{"line":528,"column":53},"end":{"line":528,"column":74}},{"start":{"line":528,"column":78},"end":{"line":528,"column":109}}]},"64":{"line":557,"type":"cond-expr","locations":[{"start":{"line":557,"column":27},"end":{"line":557,"column":42}},{"start":{"line":557,"column":45},"end":{"line":557,"column":46}}]},"65":{"line":585,"type":"if","locations":[{"start":{"line":585,"column":20},"end":{"line":585,"column":20}},{"start":{"line":585,"column":20},"end":{"line":585,"column":20}}]},"66":{"line":592,"type":"if","locations":[{"start":{"line":592,"column":27},"end":{"line":592,"column":27}},{"start":{"line":592,"column":27},"end":{"line":592,"column":27}}]},"67":{"line":595,"type":"cond-expr","locations":[{"start":{"line":595,"column":87},"end":{"line":595,"column":103}},{"start":{"line":595,"column":106},"end":{"line":595,"column":121}}]}},"code":["/**"," * @fileoverview Rule to flag declared but unused variables"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unused variables\",","            category: \"Variables\",","            recommended: true","        },","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"all\", \"local\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            vars: {","                                enum: [\"all\", \"local\"]","                            },","                            varsIgnorePattern: {","                                type: \"string\"","                            },","                            args: {","                                enum: [\"all\", \"after-used\", \"none\"]","                            },","                            ignoreRestSiblings: {","                                type: \"boolean\"","                            },","                            argsIgnorePattern: {","                                type: \"string\"","                            },","                            caughtErrors: {","                                enum: [\"all\", \"none\"]","                            },","                            caughtErrorsIgnorePattern: {","                                type: \"string\"","                            }","                        }","                    }","                ]","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        const DEFINED_MESSAGE = \"'{{name}}' is defined but never used.\";","        const ASSIGNED_MESSAGE = \"'{{name}}' is assigned a value but never used.\";","        const REST_PROPERTY_TYPE = /^(?:Experimental)?RestProperty$/;","","        const config = {","            vars: \"all\",","            args: \"after-used\",","            ignoreRestSiblings: false,","            caughtErrors: \"none\"","        };","","        const firstOption = context.options[0];","","        if (firstOption) {","            if (typeof firstOption === \"string\") {","                config.vars = firstOption;","            } else {","                config.vars = firstOption.vars || config.vars;","                config.args = firstOption.args || config.args;","                config.ignoreRestSiblings = firstOption.ignoreRestSiblings || config.ignoreRestSiblings;","                config.caughtErrors = firstOption.caughtErrors || config.caughtErrors;","","                if (firstOption.varsIgnorePattern) {","                    config.varsIgnorePattern = new RegExp(firstOption.varsIgnorePattern);","                }","","                if (firstOption.argsIgnorePattern) {","                    config.argsIgnorePattern = new RegExp(firstOption.argsIgnorePattern);","                }","","                if (firstOption.caughtErrorsIgnorePattern) {","                    config.caughtErrorsIgnorePattern = new RegExp(firstOption.caughtErrorsIgnorePattern);","                }","            }","        }","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        const STATEMENT_TYPE = /(?:Statement|Declaration)$/;","","        /**","         * Determines if a given variable is being exported from a module.","         * @param {Variable} variable - EScope variable object.","         * @returns {boolean} True if the variable is exported, false if not.","         * @private","         */","        function isExported(variable) {","","            const definition = variable.defs[0];","","            if (definition) {","","                let node = definition.node;","","                if (node.type === \"VariableDeclarator\") {","                    node = node.parent;","                } else if (definition.type === \"Parameter\") {","                    return false;","                }","","                return node.parent.type.indexOf(\"Export\") === 0;","            }","            return false;","","        }","","        /**","         * Determines if a variable has a sibling rest property","         * @param {Variable} variable - EScope variable object.","         * @returns {boolean} True if the variable is exported, false if not.","         * @private","         */","        function hasRestSpreadSibling(variable) {","            if (config.ignoreRestSiblings) {","                return variable.defs.some(def => {","                    const propertyNode = def.name.parent;","                    const patternNode = propertyNode.parent;","","                    return (","                        propertyNode.type === \"Property\" &&","                        patternNode.type === \"ObjectPattern\" &&","                        REST_PROPERTY_TYPE.test(patternNode.properties[patternNode.properties.length - 1].type)","                    );","                });","            }","","            return false;","        }","","        /**","         * Determines if a reference is a read operation.","         * @param {Reference} ref - An escope Reference","         * @returns {boolean} whether the given reference represents a read operation","         * @private","         */","        function isReadRef(ref) {","            return ref.isRead();","        }","","        /**","         * Determine if an identifier is referencing an enclosing function name.","         * @param {Reference} ref - The reference to check.","         * @param {ASTNode[]} nodes - The candidate function nodes.","         * @returns {boolean} True if it's a self-reference, false if not.","         * @private","         */","        function isSelfReference(ref, nodes) {","            let scope = ref.from;","","            while (scope) {","                if (nodes.indexOf(scope.block) >= 0) {","                    return true;","                }","","                scope = scope.upper;","            }","","            return false;","        }","","        /**","         * Checks the position of given nodes.","         *","         * @param {ASTNode} inner - A node which is expected as inside.","         * @param {ASTNode} outer - A node which is expected as outside.","         * @returns {boolean} `true` if the `inner` node exists in the `outer` node.","         * @private","         */","        function isInside(inner, outer) {","            return (","                inner.range[0] >= outer.range[0] &&","                inner.range[1] <= outer.range[1]","            );","        }","","        /**","         * If a given reference is left-hand side of an assignment, this gets","         * the right-hand side node of the assignment.","         *","         * In the following cases, this returns null.","         *","         * - The reference is not the LHS of an assignment expression.","         * - The reference is inside of a loop.","         * - The reference is inside of a function scope which is different from","         *   the declaration.","         *","         * @param {escope.Reference} ref - A reference to check.","         * @param {ASTNode} prevRhsNode - The previous RHS node.","         * @returns {ASTNode|null} The RHS node or null.","         * @private","         */","        function getRhsNode(ref, prevRhsNode) {","            const id = ref.identifier;","            const parent = id.parent;","            const granpa = parent.parent;","            const refScope = ref.from.variableScope;","            const varScope = ref.resolved.scope.variableScope;","            const canBeUsedLater = refScope !== varScope || astUtils.isInLoop(id);","","            /*","             * Inherits the previous node if this reference is in the node.","             * This is for `a = a + a`-like code.","             */","            if (prevRhsNode && isInside(id, prevRhsNode)) {","                return prevRhsNode;","            }","","            if (parent.type === \"AssignmentExpression\" &&","                granpa.type === \"ExpressionStatement\" &&","                id === parent.left &&","                !canBeUsedLater","            ) {","                return parent.right;","            }","            return null;","        }","","        /**","         * Checks whether a given function node is stored to somewhere or not.","         * If the function node is stored, the function can be used later.","         *","         * @param {ASTNode} funcNode - A function node to check.","         * @param {ASTNode} rhsNode - The RHS node of the previous assignment.","         * @returns {boolean} `true` if under the following conditions:","         *      - the funcNode is assigned to a variable.","         *      - the funcNode is bound as an argument of a function call.","         *      - the function is bound to a property and the object satisfies above conditions.","         * @private","         */","        function isStorableFunction(funcNode, rhsNode) {","            let node = funcNode;","            let parent = funcNode.parent;","","            while (parent && isInside(parent, rhsNode)) {","                switch (parent.type) {","                    case \"SequenceExpression\":","                        if (parent.expressions[parent.expressions.length - 1] !== node) {","                            return false;","                        }","                        break;","","                    case \"CallExpression\":","                    case \"NewExpression\":","                        return parent.callee !== node;","","                    case \"AssignmentExpression\":","                    case \"TaggedTemplateExpression\":","                    case \"YieldExpression\":","                        return true;","","                    default:","                        if (STATEMENT_TYPE.test(parent.type)) {","","                            /*","                             * If it encountered statements, this is a complex pattern.","                             * Since analyzeing complex patterns is hard, this returns `true` to avoid false positive.","                             */","                            return true;","                        }","                }","","                node = parent;","                parent = parent.parent;","            }","","            return false;","        }","","        /**","         * Checks whether a given Identifier node exists inside of a function node which can be used later.","         *","         * \"can be used later\" means:","         * - the function is assigned to a variable.","         * - the function is bound to a property and the object can be used later.","         * - the function is bound as an argument of a function call.","         *","         * If a reference exists in a function which can be used later, the reference is read when the function is called.","         *","         * @param {ASTNode} id - An Identifier node to check.","         * @param {ASTNode} rhsNode - The RHS node of the previous assignment.","         * @returns {boolean} `true` if the `id` node exists inside of a function node which can be used later.","         * @private","         */","        function isInsideOfStorableFunction(id, rhsNode) {","            const funcNode = astUtils.getUpperFunction(id);","","            return (","                funcNode &&","                isInside(funcNode, rhsNode) &&","                isStorableFunction(funcNode, rhsNode)","            );","        }","","        /**","         * Checks whether a given reference is a read to update itself or not.","         *","         * @param {escope.Reference} ref - A reference to check.","         * @param {ASTNode} rhsNode - The RHS node of the previous assignment.","         * @returns {boolean} The reference is a read to update itself.","         * @private","         */","        function isReadForItself(ref, rhsNode) {","            const id = ref.identifier;","            const parent = id.parent;","            const granpa = parent.parent;","","            return ref.isRead() && (","","                // self update. e.g. `a += 1`, `a++`","                (","                    parent.type === \"AssignmentExpression\" &&","                    granpa.type === \"ExpressionStatement\" &&","                    parent.left === id","                ) ||","                (","                    parent.type === \"UpdateExpression\" &&","                    granpa.type === \"ExpressionStatement\"","                ) ||","","                // in RHS of an assignment for itself. e.g. `a = a + 1`","                (","                    rhsNode &&","                    isInside(id, rhsNode) &&","                    !isInsideOfStorableFunction(id, rhsNode)","                )","            );","        }","","        /**","         * Determine if an identifier is used either in for-in loops.","         *","         * @param {Reference} ref - The reference to check.","         * @returns {boolean} whether reference is used in the for-in loops","         * @private","         */","        function isForInRef(ref) {","            let target = ref.identifier.parent;","","","            // \"for (var ...) { return; }\"","            if (target.type === \"VariableDeclarator\") {","                target = target.parent.parent;","            }","","            if (target.type !== \"ForInStatement\") {","                return false;","            }","","            // \"for (...) { return; }\"","            if (target.body.type === \"BlockStatement\") {","                target = target.body.body[0];","","            // \"for (...) return;\"","            } else {","                target = target.body;","            }","","            // For empty loop body","            if (!target) {","                return false;","            }","","            return target.type === \"ReturnStatement\";","        }","","        /**","         * Determines if the variable is used.","         * @param {Variable} variable - The variable to check.","         * @returns {boolean} True if the variable is used","         * @private","         */","        function isUsedVariable(variable) {","            const functionNodes = variable.defs.filter(def => def.type === \"FunctionName\").map(def => def.node),","                isFunctionDefinition = functionNodes.length > 0;","            let rhsNode = null;","","            return variable.references.some(ref => {","                if (isForInRef(ref)) {","                    return true;","                }","","                const forItself = isReadForItself(ref, rhsNode);","","                rhsNode = getRhsNode(ref, rhsNode);","","                return (","                    isReadRef(ref) &&","                    !forItself &&","                    !(isFunctionDefinition && isSelfReference(ref, functionNodes))","                );","            });","        }","","        /**","         * Checks whether the given variable is the last parameter in the non-ignored parameters.","         *","         * @param {escope.Variable} variable - The variable to check.","         * @returns {boolean} `true` if the variable is the last.","         */","        function isLastInNonIgnoredParameters(variable) {","            const def = variable.defs[0];","","            // This is the last.","            if (def.index === def.node.params.length - 1) {","                return true;","            }","","            // if all parameters preceded by this variable are ignored and unused, this is the last.","            if (config.argsIgnorePattern) {","                const params = context.getDeclaredVariables(def.node);","                const posteriorParams = params.slice(params.indexOf(variable) + 1);","","                if (posteriorParams.every(v => v.references.length === 0 && config.argsIgnorePattern.test(v.name))) {","                    return true;","                }","            }","","            return false;","        }","","        /**","         * Gets an array of variables without read references.","         * @param {Scope} scope - an escope Scope object.","         * @param {Variable[]} unusedVars - an array that saving result.","         * @returns {Variable[]} unused variables of the scope and descendant scopes.","         * @private","         */","        function collectUnusedVariables(scope, unusedVars) {","            const variables = scope.variables;","            const childScopes = scope.childScopes;","            let i, l;","","            if (scope.type !== \"TDZ\" && (scope.type !== \"global\" || config.vars === \"all\")) {","                for (i = 0, l = variables.length; i < l; ++i) {","                    const variable = variables[i];","","                    // skip a variable of class itself name in the class scope","                    if (scope.type === \"class\" && scope.block.id === variable.identifiers[0]) {","                        continue;","                    }","","                    // skip function expression names and variables marked with markVariableAsUsed()","                    if (scope.functionExpressionScope || variable.eslintUsed) {","                        continue;","                    }","","                    // skip implicit \"arguments\" variable","                    if (scope.type === \"function\" && variable.name === \"arguments\" && variable.identifiers.length === 0) {","                        continue;","                    }","","                    // explicit global variables don't have definitions.","                    const def = variable.defs[0];","","                    if (def) {","                        const type = def.type;","","                        // skip catch variables","                        if (type === \"CatchClause\") {","                            if (config.caughtErrors === \"none\") {","                                continue;","                            }","","                            // skip ignored parameters","                            if (config.caughtErrorsIgnorePattern && config.caughtErrorsIgnorePattern.test(def.name.name)) {","                                continue;","                            }","                        }","","                        if (type === \"Parameter\") {","","                            // skip any setter argument","                            if ((def.node.parent.type === \"Property\" || def.node.parent.type === \"MethodDefinition\") && def.node.parent.kind === \"set\") {","                                continue;","                            }","","                            // if \"args\" option is \"none\", skip any parameter","                            if (config.args === \"none\") {","                                continue;","                            }","","                            // skip ignored parameters","                            if (config.argsIgnorePattern && config.argsIgnorePattern.test(def.name.name)) {","                                continue;","                            }","","                            // if \"args\" option is \"after-used\", skip all but the last parameter","                            if (config.args === \"after-used\" && !isLastInNonIgnoredParameters(variable)) {","                                continue;","                            }","                        } else {","","                            // skip ignored variables","                            if (config.varsIgnorePattern && config.varsIgnorePattern.test(def.name.name)) {","                                continue;","                            }","                        }","                    }","","                    if (!isUsedVariable(variable) && !isExported(variable) && !hasRestSpreadSibling(variable)) {","                        unusedVars.push(variable);","                    }","                }","            }","","            for (i = 0, l = childScopes.length; i < l; ++i) {","                collectUnusedVariables(childScopes[i], unusedVars);","            }","","            return unusedVars;","        }","","        /**","         * Gets the index of a given variable name in a given comment.","         * @param {escope.Variable} variable - A variable to get.","         * @param {ASTNode} comment - A comment node which includes the variable name.","         * @returns {number} The index of the variable name's location.","         * @private","         */","        function getColumnInComment(variable, comment) {","            const namePattern = new RegExp(`[\\\\s,]${lodash.escapeRegExp(variable.name)}(?:$|[\\\\s,:])`, \"g\");","","            // To ignore the first text \"global\".","            namePattern.lastIndex = comment.value.indexOf(\"global\") + 6;","","            // Search a given variable name.","            const match = namePattern.exec(comment.value);","","            return match ? match.index + 1 : 0;","        }","","        /**","         * Creates the correct location of a given variables.","         * The location is at its name string in a `/*global` comment.","         *","         * @param {escope.Variable} variable - A variable to get its location.","         * @returns {{line: number, column: number}} The location object for the variable.","         * @private","         */","        function getLocation(variable) {","            const comment = variable.eslintExplicitGlobalComment;","","            return sourceCode.getLocFromIndex(comment.range[0] + 2 + getColumnInComment(variable, comment));","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            \"Program:exit\"(programNode) {","                const unusedVars = collectUnusedVariables(context.getScope(), []);","","                for (let i = 0, l = unusedVars.length; i < l; ++i) {","                    const unusedVar = unusedVars[i];","","                    if (unusedVar.eslintExplicitGlobal) {","                        context.report({","                            node: programNode,","                            loc: getLocation(unusedVar),","                            message: DEFINED_MESSAGE,","                            data: unusedVar","                        });","                    } else if (unusedVar.defs.length > 0) {","                        context.report({","                            node: unusedVar.identifiers[0],","                            message: unusedVar.references.some(ref => ref.isWrite()) ? ASSIGNED_MESSAGE : DEFINED_MESSAGE,","                            data: unusedVar","                        });","                    }","                }","            }","        };","","    }","};",""],"l":{"12":1,"13":1,"19":1,"65":0,"67":0,"68":0,"69":0,"71":0,"78":0,"80":0,"81":0,"82":0,"84":0,"85":0,"86":0,"87":0,"89":0,"90":0,"93":0,"94":0,"97":0,"98":0,"107":0,"115":1,"117":0,"119":0,"121":0,"123":0,"124":0,"125":0,"126":0,"129":0,"131":0,"141":1,"142":0,"143":0,"144":0,"145":0,"147":0,"155":0,"164":1,"165":0,"175":1,"176":0,"178":0,"179":0,"180":0,"183":0,"186":0,"197":1,"198":0,"220":1,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"232":0,"233":0,"236":0,"241":0,"243":0,"258":1,"259":0,"260":0,"262":0,"263":0,"265":0,"266":0,"268":0,"272":0,"277":0,"280":0,"286":0,"290":0,"291":0,"294":0,"312":1,"313":0,"315":0,"330":1,"331":0,"332":0,"333":0,"335":0,"364":1,"365":0,"369":0,"370":0,"373":0,"374":0,"378":0,"379":0,"383":0,"387":0,"388":0,"391":0,"400":1,"401":0,"403":0,"405":0,"406":0,"407":0,"410":0,"412":0,"414":0,"428":1,"429":0,"432":0,"433":0,"437":0,"438":0,"439":0,"441":0,"442":0,"446":0,"456":1,"457":0,"458":0,"459":0,"461":0,"462":0,"463":0,"466":0,"467":0,"471":0,"472":0,"476":0,"477":0,"481":0,"483":0,"484":0,"487":0,"488":0,"489":0,"493":0,"494":0,"498":0,"501":0,"502":0,"506":0,"507":0,"511":0,"512":0,"516":0,"517":0,"522":0,"523":0,"528":0,"529":0,"534":0,"535":0,"538":0,"548":1,"549":0,"552":0,"555":0,"557":0,"568":1,"569":0,"571":0,"578":0,"580":0,"582":0,"583":0,"585":0,"586":0,"592":0,"593":0,"595":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-use-before-define.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-use-before-define.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0,0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"parseOptions","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":31}}},"2":{"name":"isFunction","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":30}}},"3":{"name":"isOuterClass","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":43}}},"4":{"name":"isOuterVariable","line":67,"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":46}}},"5":{"name":"isInRange","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":35}}},"6":{"name":"isInInitializer","line":100,"loc":{"start":{"line":100,"column":0},"end":{"line":100,"column":46}}},"7":{"name":"(anonymous_7)","line":165,"loc":{"start":{"line":165,"column":10},"end":{"line":165,"column":20}}},"8":{"name":"isForbidden","line":174,"loc":{"start":{"line":174,"column":8},"end":{"line":174,"column":50}}},"9":{"name":"findVariablesInScope","line":193,"loc":{"start":{"line":193,"column":8},"end":{"line":193,"column":45}}},"10":{"name":"findVariables","line":227,"loc":{"start":{"line":227,"column":8},"end":{"line":227,"column":33}}},"11":{"name":"(anonymous_11)","line":234,"loc":{"start":{"line":234,"column":26},"end":{"line":234,"column":33}}},"12":{"name":"(anonymous_12)","line":251,"loc":{"start":{"line":251,"column":61},"end":{"line":251,"column":76}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":152}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":49}},"3":{"start":{"line":21,"column":0},"end":{"line":35,"column":1}},"4":{"start":{"line":22,"column":4},"end":{"line":22,"column":25}},"5":{"start":{"line":23,"column":4},"end":{"line":23,"column":23}},"6":{"start":{"line":24,"column":4},"end":{"line":24,"column":25}},"7":{"start":{"line":26,"column":4},"end":{"line":32,"column":5}},"8":{"start":{"line":27,"column":8},"end":{"line":27,"column":43}},"9":{"start":{"line":28,"column":11},"end":{"line":32,"column":5}},"10":{"start":{"line":29,"column":8},"end":{"line":29,"column":48}},"11":{"start":{"line":30,"column":8},"end":{"line":30,"column":44}},"12":{"start":{"line":31,"column":8},"end":{"line":31,"column":48}},"13":{"start":{"line":34,"column":4},"end":{"line":34,"column":45}},"14":{"start":{"line":43,"column":0},"end":{"line":45,"column":1}},"15":{"start":{"line":44,"column":4},"end":{"line":44,"column":52}},"16":{"start":{"line":54,"column":0},"end":{"line":59,"column":1}},"17":{"start":{"line":55,"column":4},"end":{"line":58,"column":6}},"18":{"start":{"line":67,"column":0},"end":{"line":72,"column":1}},"19":{"start":{"line":68,"column":4},"end":{"line":71,"column":6}},"20":{"start":{"line":81,"column":0},"end":{"line":83,"column":1}},"21":{"start":{"line":82,"column":4},"end":{"line":82,"column":74}},"22":{"start":{"line":100,"column":0},"end":{"line":131,"column":1}},"23":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"24":{"start":{"line":102,"column":8},"end":{"line":102,"column":21}},"25":{"start":{"line":105,"column":4},"end":{"line":105,"column":46}},"26":{"start":{"line":106,"column":4},"end":{"line":106,"column":51}},"27":{"start":{"line":108,"column":4},"end":{"line":128,"column":5}},"28":{"start":{"line":109,"column":8},"end":{"line":125,"column":9}},"29":{"start":{"line":110,"column":12},"end":{"line":112,"column":13}},"30":{"start":{"line":111,"column":16},"end":{"line":111,"column":28}},"31":{"start":{"line":113,"column":12},"end":{"line":117,"column":13}},"32":{"start":{"line":116,"column":16},"end":{"line":116,"column":28}},"33":{"start":{"line":118,"column":12},"end":{"line":118,"column":18}},"34":{"start":{"line":119,"column":15},"end":{"line":125,"column":9}},"35":{"start":{"line":120,"column":12},"end":{"line":122,"column":13}},"36":{"start":{"line":121,"column":16},"end":{"line":121,"column":28}},"37":{"start":{"line":123,"column":15},"end":{"line":125,"column":9}},"38":{"start":{"line":124,"column":12},"end":{"line":124,"column":18}},"39":{"start":{"line":127,"column":8},"end":{"line":127,"column":27}},"40":{"start":{"line":130,"column":4},"end":{"line":130,"column":17}},"41":{"start":{"line":137,"column":0},"end":{"line":264,"column":2}},"42":{"start":{"line":166,"column":8},"end":{"line":166,"column":57}},"43":{"start":{"line":174,"column":8},"end":{"line":185,"column":9}},"44":{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},"45":{"start":{"line":176,"column":16},"end":{"line":176,"column":41}},"46":{"start":{"line":178,"column":12},"end":{"line":180,"column":13}},"47":{"start":{"line":179,"column":16},"end":{"line":179,"column":39}},"48":{"start":{"line":181,"column":12},"end":{"line":183,"column":13}},"49":{"start":{"line":182,"column":16},"end":{"line":182,"column":41}},"50":{"start":{"line":184,"column":12},"end":{"line":184,"column":24}},"51":{"start":{"line":193,"column":8},"end":{"line":219,"column":9}},"52":{"start":{"line":194,"column":12},"end":{"line":218,"column":15}},"53":{"start":{"line":195,"column":16},"end":{"line":195,"column":52}},"54":{"start":{"line":203,"column":16},"end":{"line":210,"column":17}},"55":{"start":{"line":209,"column":20},"end":{"line":209,"column":27}},"56":{"start":{"line":213,"column":16},"end":{"line":217,"column":19}},"57":{"start":{"line":227,"column":8},"end":{"line":231,"column":9}},"58":{"start":{"line":228,"column":12},"end":{"line":228,"column":45}},"59":{"start":{"line":230,"column":12},"end":{"line":230,"column":40}},"60":{"start":{"line":233,"column":8},"end":{"line":245,"column":10}},"61":{"start":{"line":235,"column":16},"end":{"line":236,"column":76}},"62":{"start":{"line":238,"column":16},"end":{"line":238,"column":44}},"63":{"start":{"line":241,"column":16},"end":{"line":243,"column":17}},"64":{"start":{"line":242,"column":20},"end":{"line":242,"column":63}},"65":{"start":{"line":247,"column":8},"end":{"line":260,"column":9}},"66":{"start":{"line":248,"column":12},"end":{"line":249,"column":71}},"67":{"start":{"line":251,"column":12},"end":{"line":255,"column":14}},"68":{"start":{"line":252,"column":16},"end":{"line":254,"column":17}},"69":{"start":{"line":253,"column":20},"end":{"line":253,"column":40}},"70":{"start":{"line":257,"column":12},"end":{"line":259,"column":79}},"71":{"start":{"line":262,"column":8},"end":{"line":262,"column":30}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":11},"end":{"line":28,"column":11}},{"start":{"line":28,"column":11},"end":{"line":28,"column":11}}]},"3":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":15},"end":{"line":28,"column":42}},{"start":{"line":28,"column":46},"end":{"line":28,"column":62}}]},"4":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":45}},{"start":{"line":57,"column":8},"end":{"line":57,"column":69}}]},"5":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":44}},{"start":{"line":70,"column":8},"end":{"line":70,"column":69}}]},"6":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":11},"end":{"line":82,"column":15}},{"start":{"line":82,"column":19},"end":{"line":82,"column":44}},{"start":{"line":82,"column":48},"end":{"line":82,"column":73}}]},"7":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":101,"column":4}},{"start":{"line":101,"column":4},"end":{"line":101,"column":4}}]},"8":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":109,"column":8}},{"start":{"line":109,"column":8},"end":{"line":109,"column":8}}]},"9":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":12},"end":{"line":110,"column":12}},{"start":{"line":110,"column":12},"end":{"line":110,"column":12}}]},"10":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":12},"end":{"line":113,"column":12}},{"start":{"line":113,"column":12},"end":{"line":113,"column":12}}]},"11":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":16},"end":{"line":113,"column":60}},{"start":{"line":114,"column":16},"end":{"line":114,"column":61}}]},"12":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":15},"end":{"line":119,"column":15}},{"start":{"line":119,"column":15},"end":{"line":119,"column":15}}]},"13":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":12},"end":{"line":120,"column":12}},{"start":{"line":120,"column":12},"end":{"line":120,"column":12}}]},"14":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":15},"end":{"line":123,"column":15}},{"start":{"line":123,"column":15},"end":{"line":123,"column":15}}]},"15":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":12},"end":{"line":175,"column":12}},{"start":{"line":175,"column":12},"end":{"line":175,"column":12}}]},"16":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":12},"end":{"line":178,"column":12}},{"start":{"line":178,"column":12},"end":{"line":178,"column":12}}]},"17":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":12},"end":{"line":181,"column":12}},{"start":{"line":181,"column":12},"end":{"line":181,"column":12}}]},"18":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":16},"end":{"line":203,"column":16}},{"start":{"line":203,"column":16},"end":{"line":203,"column":16}}]},"19":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":20},"end":{"line":203,"column":34}},{"start":{"line":204,"column":20},"end":{"line":204,"column":29}},{"start":{"line":205,"column":20},"end":{"line":205,"column":53}},{"start":{"line":206,"column":21},"end":{"line":206,"column":85}},{"start":{"line":206,"column":89},"end":{"line":206,"column":126}},{"start":{"line":207,"column":20},"end":{"line":207,"column":53}}]},"20":{"line":236,"type":"binary-expr","locations":[{"start":{"line":236,"column":35},"end":{"line":236,"column":69}},{"start":{"line":236,"column":73},"end":{"line":236,"column":75}}]},"21":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":16},"end":{"line":241,"column":16}},{"start":{"line":241,"column":16},"end":{"line":241,"column":16}}]},"22":{"line":241,"type":"binary-expr","locations":[{"start":{"line":241,"column":20},"end":{"line":241,"column":45}},{"start":{"line":241,"column":49},"end":{"line":241,"column":77}}]},"23":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":8},"end":{"line":247,"column":8}},{"start":{"line":247,"column":8},"end":{"line":247,"column":8}}]},"24":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":16},"end":{"line":252,"column":16}},{"start":{"line":252,"column":16},"end":{"line":252,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag use of variables before they are defined"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const SENTINEL_TYPE = /^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/;","const FOR_IN_OF_TYPE = /^For(?:In|Of)Statement$/;","","/**"," * Parses a given value as options."," *"," * @param {any} options - A value to parse."," * @returns {Object} The parsed options."," */","function parseOptions(options) {","    let functions = true;","    let classes = true;","    let variables = true;","","    if (typeof options === \"string\") {","        functions = (options !== \"nofunc\");","    } else if (typeof options === \"object\" && options !== null) {","        functions = options.functions !== false;","        classes = options.classes !== false;","        variables = options.variables !== false;","    }","","    return { functions, classes, variables };","}","","/**"," * Checks whether or not a given variable is a function declaration."," *"," * @param {escope.Variable} variable - A variable to check."," * @returns {boolean} `true` if the variable is a function declaration."," */","function isFunction(variable) {","    return variable.defs[0].type === \"FunctionName\";","}","","/**"," * Checks whether or not a given variable is a class declaration in an upper function scope."," *"," * @param {escope.Variable} variable - A variable to check."," * @param {escope.Reference} reference - A reference to check."," * @returns {boolean} `true` if the variable is a class declaration."," */","function isOuterClass(variable, reference) {","    return (","        variable.defs[0].type === \"ClassName\" &&","        variable.scope.variableScope !== reference.from.variableScope","    );","}","","/**","* Checks whether or not a given variable is a variable declaration in an upper function scope.","* @param {escope.Variable} variable - A variable to check.","* @param {escope.Reference} reference - A reference to check.","* @returns {boolean} `true` if the variable is a variable declaration.","*/","function isOuterVariable(variable, reference) {","    return (","        variable.defs[0].type === \"Variable\" &&","        variable.scope.variableScope !== reference.from.variableScope","    );","}","","/**"," * Checks whether or not a given location is inside of the range of a given node."," *"," * @param {ASTNode} node - An node to check."," * @param {number} location - A location to check."," * @returns {boolean} `true` if the location is inside of the range of the node."," */","function isInRange(node, location) {","    return node && node.range[0] <= location && location <= node.range[1];","}","","/**"," * Checks whether or not a given reference is inside of the initializers of a given variable."," *"," * This returns `true` in the following cases:"," *"," *     var a = a"," *     var [a = a] = list"," *     var {a = a} = obj"," *     for (var a in a) {}"," *     for (var a of a) {}"," *"," * @param {Variable} variable - A variable to check."," * @param {Reference} reference - A reference to check."," * @returns {boolean} `true` if the reference is inside of the initializers."," */","function isInInitializer(variable, reference) {","    if (variable.scope !== reference.from) {","        return false;","    }","","    let node = variable.identifiers[0].parent;","    const location = reference.identifier.range[1];","","    while (node) {","        if (node.type === \"VariableDeclarator\") {","            if (isInRange(node.init, location)) {","                return true;","            }","            if (FOR_IN_OF_TYPE.test(node.parent.parent.type) &&","                isInRange(node.parent.parent.right, location)","            ) {","                return true;","            }","            break;","        } else if (node.type === \"AssignmentPattern\") {","            if (isInRange(node.right, location)) {","                return true;","            }","        } else if (SENTINEL_TYPE.test(node.type)) {","            break;","        }","","        node = node.parent;","    }","","    return false;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow the use of variables before they are defined\",","            category: \"Variables\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"nofunc\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            functions: { type: \"boolean\" },","                            classes: { type: \"boolean\" },","                            variables: { type: \"boolean\" }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","        const options = parseOptions(context.options[0]);","","        /**","         * Determines whether a given use-before-define case should be reported according to the options.","         * @param {escope.Variable} variable The variable that gets used before being defined","         * @param {escope.Reference} reference The reference to the variable","         * @returns {boolean} `true` if the usage should be reported","         */","        function isForbidden(variable, reference) {","            if (isFunction(variable)) {","                return options.functions;","            }","            if (isOuterClass(variable, reference)) {","                return options.classes;","            }","            if (isOuterVariable(variable, reference)) {","                return options.variables;","            }","            return true;","        }","","        /**","         * Finds and validates all variables in a given scope.","         * @param {Scope} scope The scope object.","         * @returns {void}","         * @private","         */","        function findVariablesInScope(scope) {","            scope.references.forEach(reference => {","                const variable = reference.resolved;","","                // Skips when the reference is:","                // - initialization's.","                // - referring to an undefined variable.","                // - referring to a global environment variable (there're no identifiers).","                // - located preceded by the variable (except in initializers).","                // - allowed by options.","                if (reference.init ||","                    !variable ||","                    variable.identifiers.length === 0 ||","                    (variable.identifiers[0].range[1] < reference.identifier.range[1] && !isInInitializer(variable, reference)) ||","                    !isForbidden(variable, reference)","                ) {","                    return;","                }","","                // Reports.","                context.report({","                    node: reference.identifier,","                    message: \"'{{name}}' was used before it was defined.\",","                    data: reference.identifier","                });","            });","        }","","        /**","         * Validates variables inside of a node's scope.","         * @param {ASTNode} node The node to check.","         * @returns {void}","         * @private","         */","        function findVariables() {","            const scope = context.getScope();","","            findVariablesInScope(scope);","        }","","        const ruleDefinition = {","            \"Program:exit\"(node) {","                const scope = context.getScope(),","                    ecmaFeatures = context.parserOptions.ecmaFeatures || {};","","                findVariablesInScope(scope);","","                // both Node.js and Modules have an extra scope","                if (ecmaFeatures.globalReturn || node.sourceType === \"module\") {","                    findVariablesInScope(scope.childScopes[0]);","                }","            }","        };","","        if (context.parserOptions.ecmaVersion >= 6) {","            ruleDefinition[\"BlockStatement:exit\"] =","                ruleDefinition[\"SwitchStatement:exit\"] = findVariables;","","            ruleDefinition[\"ArrowFunctionExpression:exit\"] = function(node) {","                if (node.body.type !== \"BlockStatement\") {","                    findVariables(node);","                }","            };","        } else {","            ruleDefinition[\"FunctionExpression:exit\"] =","                ruleDefinition[\"FunctionDeclaration:exit\"] =","                ruleDefinition[\"ArrowFunctionExpression:exit\"] = findVariables;","        }","","        return ruleDefinition;","    }","};",""],"l":{"12":1,"13":1,"21":1,"22":0,"23":0,"24":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"34":0,"43":1,"44":0,"54":1,"55":0,"67":1,"68":0,"81":1,"82":0,"100":1,"101":0,"102":0,"105":0,"106":0,"108":0,"109":0,"110":0,"111":0,"113":0,"116":0,"118":0,"119":0,"120":0,"121":0,"123":0,"124":0,"127":0,"130":0,"137":1,"166":0,"174":1,"175":0,"176":0,"178":0,"179":0,"181":0,"182":0,"184":0,"193":1,"194":0,"195":0,"203":0,"209":0,"213":0,"227":1,"228":0,"230":0,"233":0,"235":0,"238":0,"241":0,"242":0,"247":0,"248":0,"251":0,"252":0,"253":0,"257":0,"262":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-call.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-call.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"b":{"1":[0,0,0,0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"isCallOrNonVariadicApply","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":40}}},"2":{"name":"equalTokens","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":46}}},"3":{"name":"isValidThisArg","line":63,"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":59}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":10},"end":{"line":85,"column":20}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":26},"end":{"line":89,"column":33}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":19,"column":0},"end":{"line":29,"column":1}},"3":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"4":{"start":{"line":38,"column":0},"end":{"line":54,"column":1}},"5":{"start":{"line":39,"column":4},"end":{"line":39,"column":47}},"6":{"start":{"line":40,"column":4},"end":{"line":40,"column":48}},"7":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"8":{"start":{"line":43,"column":8},"end":{"line":43,"column":21}},"9":{"start":{"line":45,"column":4},"end":{"line":51,"column":5}},"10":{"start":{"line":46,"column":8},"end":{"line":50,"column":9}},"11":{"start":{"line":49,"column":12},"end":{"line":49,"column":25}},"12":{"start":{"line":53,"column":4},"end":{"line":53,"column":16}},"13":{"start":{"line":63,"column":0},"end":{"line":68,"column":1}},"14":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"15":{"start":{"line":65,"column":8},"end":{"line":65,"column":51}},"16":{"start":{"line":67,"column":4},"end":{"line":67,"column":58}},"17":{"start":{"line":74,"column":0},"end":{"line":104,"column":2}},"18":{"start":{"line":86,"column":8},"end":{"line":86,"column":51}},"19":{"start":{"line":88,"column":8},"end":{"line":102,"column":10}},"20":{"start":{"line":90,"column":16},"end":{"line":92,"column":17}},"21":{"start":{"line":91,"column":20},"end":{"line":91,"column":27}},"22":{"start":{"line":94,"column":16},"end":{"line":94,"column":51}},"23":{"start":{"line":95,"column":16},"end":{"line":95,"column":99}},"24":{"start":{"line":96,"column":16},"end":{"line":96,"column":50}},"25":{"start":{"line":98,"column":16},"end":{"line":100,"column":17}},"26":{"start":{"line":99,"column":20},"end":{"line":99,"column":127}}},"branchMap":{"1":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":47}},{"start":{"line":22,"column":8},"end":{"line":22,"column":50}},{"start":{"line":23,"column":8},"end":{"line":23,"column":38}},{"start":{"line":25,"column":13},"end":{"line":25,"column":49}},{"start":{"line":25,"column":53},"end":{"line":25,"column":79}},{"start":{"line":26,"column":13},"end":{"line":26,"column":50}},{"start":{"line":26,"column":54},"end":{"line":26,"column":81}},{"start":{"line":26,"column":85},"end":{"line":26,"column":129}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"4":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":47}},{"start":{"line":47,"column":12},"end":{"line":47,"column":49}}]},"5":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"6":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":16},"end":{"line":90,"column":16}},{"start":{"line":90,"column":16},"end":{"line":90,"column":16}}]},"7":{"line":95,"type":"cond-expr","locations":[{"start":{"line":95,"column":77},"end":{"line":95,"column":91}},{"start":{"line":95,"column":94},"end":{"line":95,"column":98}}]},"8":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":16}},{"start":{"line":98,"column":16},"end":{"line":98,"column":16}}]}},"code":["/**"," * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`."," * @author Toru Nagashima"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a node is a `.call()`/`.apply()`."," * @param {ASTNode} node - A CallExpression node to check."," * @returns {boolean} Whether or not the node is a `.call()`/`.apply()`."," */","function isCallOrNonVariadicApply(node) {","    return (","        node.callee.type === \"MemberExpression\" &&","        node.callee.property.type === \"Identifier\" &&","        node.callee.computed === false &&","        (","            (node.callee.property.name === \"call\" && node.arguments.length >= 1) ||","            (node.callee.property.name === \"apply\" && node.arguments.length === 2 && node.arguments[1].type === \"ArrayExpression\")","        )","    );","}","","/**"," * Checks whether or not the tokens of two given nodes are same."," * @param {ASTNode} left - A node 1 to compare."," * @param {ASTNode} right - A node 2 to compare."," * @param {SourceCode} sourceCode - The ESLint source code object."," * @returns {boolean} the source code for the given node."," */","function equalTokens(left, right, sourceCode) {","    const tokensL = sourceCode.getTokens(left);","    const tokensR = sourceCode.getTokens(right);","","    if (tokensL.length !== tokensR.length) {","        return false;","    }","    for (let i = 0; i < tokensL.length; ++i) {","        if (tokensL[i].type !== tokensR[i].type ||","            tokensL[i].value !== tokensR[i].value","        ) {","            return false;","        }","    }","","    return true;","}","","/**"," * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`."," * @param {ASTNode|null} expectedThis - The node that is the owner of the applied function."," * @param {ASTNode} thisArg - The node that is given to the first argument of the `.call()`/`.apply()`."," * @param {SourceCode} sourceCode - The ESLint source code object."," * @returns {boolean} Whether or not `thisArg` is not changed by `.call()`/`.apply()`."," */","function isValidThisArg(expectedThis, thisArg, sourceCode) {","    if (!expectedThis) {","        return astUtils.isNullOrUndefined(thisArg);","    }","    return equalTokens(expectedThis, thisArg, sourceCode);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary calls to `.call()` and `.apply()`\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","            CallExpression(node) {","                if (!isCallOrNonVariadicApply(node)) {","                    return;","                }","","                const applied = node.callee.object;","                const expectedThis = (applied.type === \"MemberExpression\") ? applied.object : null;","                const thisArg = node.arguments[0];","","                if (isValidThisArg(expectedThis, thisArg, sourceCode)) {","                    context.report({ node, message: \"unnecessary '.{{name}}()'.\", data: { name: node.callee.property.name } });","                }","            }","        };","    }","};",""],"l":{"8":1,"19":1,"20":0,"38":1,"39":0,"40":0,"42":0,"43":0,"45":0,"46":0,"49":0,"53":0,"63":1,"64":0,"65":0,"67":0,"74":1,"86":0,"88":0,"90":0,"91":0,"94":0,"95":0,"96":0,"98":0,"99":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-computed-key.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-computed-key.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":32,"loc":{"start":{"line":32,"column":10},"end":{"line":32,"column":20}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":20},"end":{"line":36,"column":27}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":27},"end":{"line":49,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"3":{"start":{"line":18,"column":0},"end":{"line":18,"column":93}},"4":{"start":{"line":20,"column":0},"end":{"line":76,"column":2}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":51}},"6":{"start":{"line":35,"column":8},"end":{"line":74,"column":10}},"7":{"start":{"line":37,"column":16},"end":{"line":39,"column":17}},"8":{"start":{"line":38,"column":20},"end":{"line":38,"column":27}},"9":{"start":{"line":41,"column":16},"end":{"line":42,"column":48}},"10":{"start":{"line":44,"column":16},"end":{"line":72,"column":17}},"11":{"start":{"line":45,"column":20},"end":{"line":71,"column":23}},"12":{"start":{"line":50,"column":28},"end":{"line":50,"column":117}},"13":{"start":{"line":51,"column":28},"end":{"line":51,"column":141}},"14":{"start":{"line":52,"column":28},"end":{"line":52,"column":120}},"15":{"start":{"line":54,"column":28},"end":{"line":58,"column":29}},"16":{"start":{"line":54,"column":82},"end":{"line":54,"column":166}},"17":{"start":{"line":57,"column":32},"end":{"line":57,"column":44}},"18":{"start":{"line":60,"column":28},"end":{"line":60,"column":104}},"19":{"start":{"line":63,"column":28},"end":{"line":65,"column":88}},"20":{"start":{"line":67,"column":28},"end":{"line":67,"column":94}},"21":{"start":{"line":69,"column":28},"end":{"line":69,"column":133}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":16},"end":{"line":37,"column":16}},{"start":{"line":37,"column":16},"end":{"line":37,"column":16}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":16}},{"start":{"line":44,"column":16},"end":{"line":44,"column":16}}]},"3":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":20},"end":{"line":44,"column":42}},{"start":{"line":44,"column":47},"end":{"line":44,"column":68}},{"start":{"line":44,"column":72},"end":{"line":44,"column":93}},{"start":{"line":44,"column":98},"end":{"line":44,"column":123}}]},"4":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":28},"end":{"line":54,"column":28}},{"start":{"line":54,"column":28},"end":{"line":54,"column":28}}]},"5":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":56},"end":{"line":63,"column":118}},{"start":{"line":64,"column":32},"end":{"line":64,"column":118}},{"start":{"line":65,"column":32},"end":{"line":65,"column":87}}]},"6":{"line":67,"type":"cond-expr","locations":[{"start":{"line":67,"column":74},"end":{"line":67,"column":77}},{"start":{"line":67,"column":80},"end":{"line":67,"column":82}}]}},"code":["/**"," * @fileoverview Rule to disallow unnecessary computed property keys in object literals"," * @author Burak Yigit Kaya"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","const esUtils = require(\"esutils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const MESSAGE_UNNECESSARY_COMPUTED = \"Unnecessarily computed property [{{property}}] found.\";","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary computed property keys in object literals\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","            Property(node) {","                if (!node.computed) {","                    return;","                }","","                const key = node.key,","                    nodeType = typeof key.value;","","                if (key.type === \"Literal\" && (nodeType === \"string\" || nodeType === \"number\") && key.value !== \"__proto__\") {","                    context.report({","                        node,","                        message: MESSAGE_UNNECESSARY_COMPUTED,","                        data: { property: sourceCode.getText(key) },","                        fix(fixer) {","                            const leftSquareBracket = sourceCode.getFirstToken(node, astUtils.isOpeningBracketToken);","                            const rightSquareBracket = sourceCode.getFirstTokenBetween(node.key, node.value, astUtils.isClosingBracketToken);","                            const tokensBetween = sourceCode.getTokensBetween(leftSquareBracket, rightSquareBracket, 1);","","                            if (tokensBetween.slice(0, -1).some((token, index) => sourceCode.getText().slice(token.range[1], tokensBetween[index + 1].range[0]).trim())) {","","                                // If there are comments between the brackets and the property name, don't do a fix.","                                return null;","                            }","","                            const tokenBeforeLeftBracket = sourceCode.getTokenBefore(leftSquareBracket);","","                            // Insert a space before the key to avoid changing identifiers, e.g. ({ get[2]() {} }) to ({ get2() {} })","                            const needsSpaceBeforeKey = tokenBeforeLeftBracket.range[1] === leftSquareBracket.range[0] &&","                                esUtils.code.isIdentifierPartES6(tokenBeforeLeftBracket.value.slice(-1).charCodeAt(0)) &&","                                esUtils.code.isIdentifierPartES6(key.raw.charCodeAt(0));","","                            const replacementKey = (needsSpaceBeforeKey ? \" \" : \"\") + key.raw;","","                            return fixer.replaceTextRange([leftSquareBracket.range[0], rightSquareBracket.range[1]], replacementKey);","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"11":1,"12":1,"18":1,"20":1,"33":0,"35":0,"37":0,"38":0,"41":0,"44":0,"45":0,"50":0,"51":0,"52":0,"54":0,"57":0,"60":0,"63":0,"67":0,"69":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-concat.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-concat.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"isConcatenation","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":31}}},"2":{"name":"isConcatOperatorToken","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":38}}},"3":{"name":"getLeft","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":23}}},"4":{"name":"getRight","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}}},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":10},"end":{"line":78,"column":20}}},"6":{"name":"(anonymous_6)","line":82,"loc":{"start":{"line":82,"column":28},"end":{"line":82,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":22,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":23,"column":4},"end":{"line":23,"column":69}},"4":{"start":{"line":31,"column":0},"end":{"line":33,"column":1}},"5":{"start":{"line":32,"column":4},"end":{"line":32,"column":62}},"6":{"start":{"line":40,"column":0},"end":{"line":47,"column":1}},"7":{"start":{"line":41,"column":4},"end":{"line":41,"column":25}},"8":{"start":{"line":43,"column":4},"end":{"line":45,"column":5}},"9":{"start":{"line":44,"column":8},"end":{"line":44,"column":26}},"10":{"start":{"line":46,"column":4},"end":{"line":46,"column":16}},"11":{"start":{"line":54,"column":0},"end":{"line":61,"column":1}},"12":{"start":{"line":55,"column":4},"end":{"line":55,"column":27}},"13":{"start":{"line":57,"column":4},"end":{"line":59,"column":5}},"14":{"start":{"line":58,"column":8},"end":{"line":58,"column":27}},"15":{"start":{"line":60,"column":4},"end":{"line":60,"column":17}},"16":{"start":{"line":67,"column":0},"end":{"line":108,"column":2}},"17":{"start":{"line":79,"column":8},"end":{"line":79,"column":51}},"18":{"start":{"line":81,"column":8},"end":{"line":106,"column":10}},"19":{"start":{"line":85,"column":16},"end":{"line":87,"column":17}},"20":{"start":{"line":86,"column":20},"end":{"line":86,"column":27}},"21":{"start":{"line":90,"column":16},"end":{"line":90,"column":43}},"22":{"start":{"line":91,"column":16},"end":{"line":91,"column":45}},"23":{"start":{"line":93,"column":16},"end":{"line":104,"column":17}},"24":{"start":{"line":97,"column":20},"end":{"line":97,"column":110}},"25":{"start":{"line":99,"column":20},"end":{"line":103,"column":23}}},"branchMap":{"1":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":11},"end":{"line":23,"column":43}},{"start":{"line":23,"column":47},"end":{"line":23,"column":68}}]},"2":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":11},"end":{"line":32,"column":30}},{"start":{"line":32,"column":34},"end":{"line":32,"column":61}}]},"3":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":16},"end":{"line":85,"column":16}},{"start":{"line":85,"column":16},"end":{"line":85,"column":16}}]},"4":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":16}},{"start":{"line":93,"column":16},"end":{"line":93,"column":16}}]},"5":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":20},"end":{"line":93,"column":50}},{"start":{"line":94,"column":20},"end":{"line":94,"column":51}},{"start":{"line":95,"column":20},"end":{"line":95,"column":59}}]}},"code":["/**"," * @fileoverview disallow unncessary concatenation of template strings"," * @author Henry Zhu"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given node is a concatenation."," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node is a concatenation."," */","function isConcatenation(node) {","    return node.type === \"BinaryExpression\" && node.operator === \"+\";","}","","/**"," * Checks if the given token is a `+` token or not."," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a `+` token."," */","function isConcatOperatorToken(token) {","    return token.value === \"+\" && token.type === \"Punctuator\";","}","","/**"," * Get's the right most node on the left side of a BinaryExpression with + operator."," * @param {ASTNode} node - A BinaryExpression node to check."," * @returns {ASTNode} node"," */","function getLeft(node) {","    let left = node.left;","","    while (isConcatenation(left)) {","        left = left.right;","    }","    return left;","}","","/**"," * Get's the left most node on the right side of a BinaryExpression with + operator."," * @param {ASTNode} node - A BinaryExpression node to check."," * @returns {ASTNode} node"," */","function getRight(node) {","    let right = node.right;","","    while (isConcatenation(right)) {","        right = right.left;","    }","    return right;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary concatenation of literals or template literals\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","            BinaryExpression(node) {","","                // check if not concatenation","                if (node.operator !== \"+\") {","                    return;","                }","","                // account for the `foo + \"a\" + \"b\"` case","                const left = getLeft(node);","                const right = getRight(node);","","                if (astUtils.isStringLiteral(left) &&","                    astUtils.isStringLiteral(right) &&","                    astUtils.isTokenOnSameLine(left, right)","                ) {","                    const operatorToken = sourceCode.getFirstTokenBetween(left, right, isConcatOperatorToken);","","                    context.report({","                        node,","                        loc: operatorToken.loc.start,","                        message: \"Unexpected string concatenation of literals.\"","                    });","                }","            }","        };","    }","};",""],"l":{"11":1,"22":1,"23":0,"31":1,"32":0,"40":1,"41":0,"43":0,"44":0,"46":0,"54":1,"55":0,"57":0,"58":0,"60":0,"67":1,"79":0,"81":0,"85":0,"86":0,"90":0,"91":0,"93":0,"97":0,"99":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-constructor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-constructor.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},"b":{"1":[0,0,0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"isSingleSuperCall","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":33}}},"2":{"name":"isSimple","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":24}}},"3":{"name":"isSpreadArguments","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":38}}},"4":{"name":"isValidIdentifierPair","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":52}}},"5":{"name":"isValidRestSpreadPair","line":77,"loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":52}}},"6":{"name":"isValidPair","line":92,"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":42}}},"7":{"name":"isPassingThrough","line":107,"loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":49}}},"8":{"name":"isRedundantSuperCall","line":128,"loc":{"start":{"line":128,"column":0},"end":{"line":128,"column":48}}},"9":{"name":"(anonymous_9)","line":154,"loc":{"start":{"line":154,"column":10},"end":{"line":154,"column":20}}},"10":{"name":"checkForConstructor","line":161,"loc":{"start":{"line":161,"column":8},"end":{"line":161,"column":43}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":24,"column":1}},"2":{"start":{"line":18,"column":4},"end":{"line":23,"column":6}},"3":{"start":{"line":33,"column":0},"end":{"line":35,"column":1}},"4":{"start":{"line":34,"column":4},"end":{"line":34,"column":69}},"5":{"start":{"line":44,"column":0},"end":{"line":51,"column":1}},"6":{"start":{"line":45,"column":4},"end":{"line":50,"column":6}},"7":{"start":{"line":61,"column":0},"end":{"line":67,"column":1}},"8":{"start":{"line":62,"column":4},"end":{"line":66,"column":6}},"9":{"start":{"line":77,"column":0},"end":{"line":83,"column":1}},"10":{"start":{"line":78,"column":4},"end":{"line":82,"column":6}},"11":{"start":{"line":92,"column":0},"end":{"line":97,"column":1}},"12":{"start":{"line":93,"column":4},"end":{"line":96,"column":6}},"13":{"start":{"line":107,"column":0},"end":{"line":119,"column":1}},"14":{"start":{"line":108,"column":4},"end":{"line":110,"column":5}},"15":{"start":{"line":109,"column":8},"end":{"line":109,"column":21}},"16":{"start":{"line":112,"column":4},"end":{"line":116,"column":5}},"17":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"18":{"start":{"line":114,"column":12},"end":{"line":114,"column":25}},"19":{"start":{"line":118,"column":4},"end":{"line":118,"column":16}},"20":{"start":{"line":128,"column":0},"end":{"line":137,"column":1}},"21":{"start":{"line":129,"column":4},"end":{"line":136,"column":6}},"22":{"start":{"line":143,"column":0},"end":{"line":182,"column":2}},"23":{"start":{"line":161,"column":8},"end":{"line":176,"column":9}},"24":{"start":{"line":162,"column":12},"end":{"line":164,"column":13}},"25":{"start":{"line":163,"column":16},"end":{"line":163,"column":23}},"26":{"start":{"line":166,"column":12},"end":{"line":166,"column":46}},"27":{"start":{"line":167,"column":12},"end":{"line":167,"column":49}},"28":{"start":{"line":168,"column":12},"end":{"line":168,"column":61}},"29":{"start":{"line":170,"column":12},"end":{"line":175,"column":13}},"30":{"start":{"line":171,"column":16},"end":{"line":174,"column":19}},"31":{"start":{"line":178,"column":8},"end":{"line":180,"column":10}}},"branchMap":{"1":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":25}},{"start":{"line":20,"column":8},"end":{"line":20,"column":46}},{"start":{"line":21,"column":8},"end":{"line":21,"column":52}},{"start":{"line":22,"column":8},"end":{"line":22,"column":50}}]},"2":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":11},"end":{"line":34,"column":37}},{"start":{"line":34,"column":41},"end":{"line":34,"column":68}}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":30}},{"start":{"line":47,"column":8},"end":{"line":47,"column":45}},{"start":{"line":48,"column":8},"end":{"line":48,"column":51}},{"start":{"line":49,"column":8},"end":{"line":49,"column":50}}]},"4":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":39}},{"start":{"line":64,"column":8},"end":{"line":64,"column":38}},{"start":{"line":65,"column":8},"end":{"line":65,"column":40}}]},"5":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":40}},{"start":{"line":80,"column":8},"end":{"line":80,"column":41}},{"start":{"line":81,"column":8},"end":{"line":81,"column":68}}]},"6":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":50}},{"start":{"line":95,"column":8},"end":{"line":95,"column":50}}]},"7":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"8":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":113,"column":8}},{"start":{"line":113,"column":8},"end":{"line":113,"column":8}}]},"9":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":31}},{"start":{"line":131,"column":8},"end":{"line":131,"column":34}},{"start":{"line":133,"column":12},"end":{"line":133,"column":59}},{"start":{"line":134,"column":12},"end":{"line":134,"column":70}}]},"10":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":12},"end":{"line":162,"column":12}},{"start":{"line":162,"column":12},"end":{"line":162,"column":12}}]},"11":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":12},"end":{"line":170,"column":12}},{"start":{"line":170,"column":12},"end":{"line":170,"column":12}}]},"12":{"line":170,"type":"cond-expr","locations":[{"start":{"line":170,"column":29},"end":{"line":170,"column":67}},{"start":{"line":170,"column":71},"end":{"line":170,"column":88}}]}},"code":["/**"," * @fileoverview Rule to flag the use of redundant constructors in classes."," * @author Alberto Rodríguez"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether a given array of statements is a single call of `super`."," *"," * @param {ASTNode[]} body - An array of statements to check."," * @returns {boolean} `true` if the body is a single call of `super`."," */","function isSingleSuperCall(body) {","    return (","        body.length === 1 &&","        body[0].type === \"ExpressionStatement\" &&","        body[0].expression.type === \"CallExpression\" &&","        body[0].expression.callee.type === \"Super\"","    );","}","","/**"," * Checks whether a given node is a pattern which doesn't have any side effects."," * Default parameters and Destructuring parameters can have side effects."," *"," * @param {ASTNode} node - A pattern node."," * @returns {boolean} `true` if the node doesn't have any side effects."," */","function isSimple(node) {","    return node.type === \"Identifier\" || node.type === \"RestElement\";","}","","/**"," * Checks whether a given array of expressions is `...arguments` or not."," * `super(...arguments)` passes all arguments through."," *"," * @param {ASTNode[]} superArgs - An array of expressions to check."," * @returns {boolean} `true` if the superArgs is `...arguments`."," */","function isSpreadArguments(superArgs) {","    return (","        superArgs.length === 1 &&","        superArgs[0].type === \"SpreadElement\" &&","        superArgs[0].argument.type === \"Identifier\" &&","        superArgs[0].argument.name === \"arguments\"","    );","}","","/**"," * Checks whether given 2 nodes are identifiers which have the same name or not."," *"," * @param {ASTNode} ctorParam - A node to check."," * @param {ASTNode} superArg - A node to check."," * @returns {boolean} `true` if the nodes are identifiers which have the same"," *      name."," */","function isValidIdentifierPair(ctorParam, superArg) {","    return (","        ctorParam.type === \"Identifier\" &&","        superArg.type === \"Identifier\" &&","        ctorParam.name === superArg.name","    );","}","","/**"," * Checks whether given 2 nodes are a rest/spread pair which has the same values."," *"," * @param {ASTNode} ctorParam - A node to check."," * @param {ASTNode} superArg - A node to check."," * @returns {boolean} `true` if the nodes are a rest/spread pair which has the"," *      same values."," */","function isValidRestSpreadPair(ctorParam, superArg) {","    return (","        ctorParam.type === \"RestElement\" &&","        superArg.type === \"SpreadElement\" &&","        isValidIdentifierPair(ctorParam.argument, superArg.argument)","    );","}","","/**"," * Checks whether given 2 nodes have the same value or not."," *"," * @param {ASTNode} ctorParam - A node to check."," * @param {ASTNode} superArg - A node to check."," * @returns {boolean} `true` if the nodes have the same value or not."," */","function isValidPair(ctorParam, superArg) {","    return (","        isValidIdentifierPair(ctorParam, superArg) ||","        isValidRestSpreadPair(ctorParam, superArg)","    );","}","","/**"," * Checks whether the parameters of a constructor and the arguments of `super()`"," * have the same values or not."," *"," * @param {ASTNode} ctorParams - The parameters of a constructor to check."," * @param {ASTNode} superArgs - The arguments of `super()` to check."," * @returns {boolean} `true` if those have the same values."," */","function isPassingThrough(ctorParams, superArgs) {","    if (ctorParams.length !== superArgs.length) {","        return false;","    }","","    for (let i = 0; i < ctorParams.length; ++i) {","        if (!isValidPair(ctorParams[i], superArgs[i])) {","            return false;","        }","    }","","    return true;","}","","/**"," * Checks whether the constructor body is a redundant super call."," *"," * @param {Array} body - constructor body content."," * @param {Array} ctorParams - The params to check against super call."," * @returns {boolean} true if the construtor body is redundant"," */","function isRedundantSuperCall(body, ctorParams) {","    return (","        isSingleSuperCall(body) &&","        ctorParams.every(isSimple) &&","        (","            isSpreadArguments(body[0].expression.arguments) ||","            isPassingThrough(ctorParams, body[0].expression.arguments)","        )","    );","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary constructors\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Checks whether a node is a redundant constructor","         * @param {ASTNode} node - node to check","         * @returns {void}","         */","        function checkForConstructor(node) {","            if (node.kind !== \"constructor\") {","                return;","            }","","            const body = node.value.body.body;","            const ctorParams = node.value.params;","            const superClass = node.parent.parent.superClass;","","            if (superClass ? isRedundantSuperCall(body, ctorParams) : (body.length === 0)) {","                context.report({","                    node,","                    message: \"Useless constructor.\"","                });","            }","        }","","        return {","            MethodDefinition: checkForConstructor","        };","    }","};",""],"l":{"17":1,"18":0,"33":1,"34":0,"44":1,"45":0,"61":1,"62":0,"77":1,"78":0,"92":1,"93":0,"107":1,"108":0,"109":0,"112":0,"113":0,"114":0,"118":0,"128":1,"129":0,"143":1,"161":1,"162":0,"163":0,"166":0,"167":0,"168":0,"170":0,"171":0,"178":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-escape.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-escape.js","s":{"1":1,"2":1,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":1,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0],"23":[0,0],"24":[0,0]},"f":{"1":2,"2":2,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"union","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":27}}},"2":{"name":"(anonymous_2)","line":21,"loc":{"start":{"line":21,"column":19},"end":{"line":21,"column":32}}},"3":{"name":"parseRegExp","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":33}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":10},"end":{"line":84,"column":20}}},"5":{"name":"report","line":94,"loc":{"start":{"line":94,"column":8},"end":{"line":94,"column":54}}},"6":{"name":"validateString","line":111,"loc":{"start":{"line":111,"column":8},"end":{"line":111,"column":45}}},"7":{"name":"check","line":147,"loc":{"start":{"line":147,"column":8},"end":{"line":147,"column":29}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":20,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":21,"column":4},"end":{"line":24,"column":9}},"4":{"start":{"line":22,"column":8},"end":{"line":22,"column":20}},"5":{"start":{"line":23,"column":8},"end":{"line":23,"column":20}},"6":{"start":{"line":27,"column":0},"end":{"line":27,"column":79}},"7":{"start":{"line":28,"column":0},"end":{"line":28,"column":70}},"8":{"start":{"line":29,"column":0},"end":{"line":29,"column":92}},"9":{"start":{"line":48,"column":0},"end":{"line":71,"column":1}},"10":{"start":{"line":49,"column":4},"end":{"line":49,"column":24}},"11":{"start":{"line":51,"column":4},"end":{"line":68,"column":80}},"12":{"start":{"line":52,"column":8},"end":{"line":65,"column":9}},"13":{"start":{"line":53,"column":12},"end":{"line":55,"column":13}},"14":{"start":{"line":54,"column":16},"end":{"line":54,"column":70}},"15":{"start":{"line":56,"column":12},"end":{"line":58,"column":13}},"16":{"start":{"line":57,"column":16},"end":{"line":57,"column":92}},"17":{"start":{"line":59,"column":12},"end":{"line":64,"column":13}},"18":{"start":{"line":60,"column":16},"end":{"line":62,"column":17}},"19":{"start":{"line":61,"column":20},"end":{"line":61,"column":71}},"20":{"start":{"line":63,"column":16},"end":{"line":63,"column":94}},"21":{"start":{"line":66,"column":8},"end":{"line":66,"column":172}},"22":{"start":{"line":67,"column":8},"end":{"line":67,"column":89}},"23":{"start":{"line":70,"column":4},"end":{"line":70,"column":20}},"24":{"start":{"line":73,"column":0},"end":{"line":215,"column":2}},"25":{"start":{"line":85,"column":8},"end":{"line":85,"column":51}},"26":{"start":{"line":94,"column":8},"end":{"line":101,"column":9}},"27":{"start":{"line":95,"column":12},"end":{"line":100,"column":15}},"28":{"start":{"line":111,"column":8},"end":{"line":139,"column":9}},"29":{"start":{"line":112,"column":12},"end":{"line":112,"column":70}},"30":{"start":{"line":113,"column":12},"end":{"line":113,"column":44}},"31":{"start":{"line":114,"column":12},"end":{"line":114,"column":77}},"32":{"start":{"line":115,"column":12},"end":{"line":115,"column":30}},"33":{"start":{"line":117,"column":12},"end":{"line":134,"column":13}},"34":{"start":{"line":118,"column":16},"end":{"line":118,"column":52}},"35":{"start":{"line":120,"column":16},"end":{"line":131,"column":17}},"36":{"start":{"line":123,"column":20},"end":{"line":123,"column":79}},"37":{"start":{"line":124,"column":23},"end":{"line":131,"column":17}},"38":{"start":{"line":130,"column":20},"end":{"line":130,"column":79}},"39":{"start":{"line":133,"column":16},"end":{"line":133,"column":60}},"40":{"start":{"line":136,"column":12},"end":{"line":138,"column":13}},"41":{"start":{"line":137,"column":16},"end":{"line":137,"column":65}},"42":{"start":{"line":147,"column":8},"end":{"line":208,"column":9}},"43":{"start":{"line":148,"column":12},"end":{"line":148,"column":70}},"44":{"start":{"line":150,"column":12},"end":{"line":160,"column":13}},"45":{"start":{"line":159,"column":16},"end":{"line":159,"column":23}},"46":{"start":{"line":162,"column":12},"end":{"line":206,"column":13}},"47":{"start":{"line":168,"column":16},"end":{"line":170,"column":17}},"48":{"start":{"line":169,"column":20},"end":{"line":169,"column":27}},"49":{"start":{"line":172,"column":16},"end":{"line":172,"column":89}},"50":{"start":{"line":173,"column":16},"end":{"line":173,"column":43}},"51":{"start":{"line":174,"column":16},"end":{"line":174,"column":26}},"52":{"start":{"line":176,"column":16},"end":{"line":178,"column":17}},"53":{"start":{"line":177,"column":20},"end":{"line":177,"column":48}},"54":{"start":{"line":179,"column":19},"end":{"line":206,"column":13}},"55":{"start":{"line":180,"column":16},"end":{"line":205,"column":86}},"56":{"start":{"line":188,"column":40},"end":{"line":188,"column":144}},"57":{"start":{"line":196,"column":40},"end":{"line":196,"column":92}},"58":{"start":{"line":199,"column":40},"end":{"line":199,"column":56}},"59":{"start":{"line":202,"column":40},"end":{"line":202,"column":136}},"60":{"start":{"line":205,"column":41},"end":{"line":205,"column":84}},"61":{"start":{"line":210,"column":8},"end":{"line":213,"column":10}}},"branchMap":{"1":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":12}},{"start":{"line":53,"column":12},"end":{"line":53,"column":12}}]},"3":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":12}},{"start":{"line":56,"column":12},"end":{"line":56,"column":12}}]},"4":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":16},"end":{"line":56,"column":28}},{"start":{"line":56,"column":32},"end":{"line":56,"column":50}}]},"5":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":12}},{"start":{"line":59,"column":12},"end":{"line":59,"column":12}}]},"6":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":28}},{"start":{"line":59,"column":32},"end":{"line":59,"column":49}}]},"7":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":16},"end":{"line":60,"column":16}},{"start":{"line":60,"column":16},"end":{"line":60,"column":16}}]},"8":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":20},"end":{"line":60,"column":35}},{"start":{"line":60,"column":39},"end":{"line":60,"column":80}}]},"9":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":12},"end":{"line":117,"column":12}},{"start":{"line":117,"column":12},"end":{"line":117,"column":12}}]},"10":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":16},"end":{"line":120,"column":16}},{"start":{"line":120,"column":16},"end":{"line":120,"column":16}}]},"11":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":23},"end":{"line":124,"column":23}},{"start":{"line":124,"column":23},"end":{"line":124,"column":23}}]},"12":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":12},"end":{"line":136,"column":12}},{"start":{"line":136,"column":12},"end":{"line":136,"column":12}}]},"13":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":16},"end":{"line":136,"column":35}},{"start":{"line":136,"column":39},"end":{"line":136,"column":53}}]},"14":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":12},"end":{"line":150,"column":12}},{"start":{"line":150,"column":12},"end":{"line":150,"column":12}}]},"15":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":16},"end":{"line":151,"column":33}},{"start":{"line":152,"column":16},"end":{"line":152,"column":27}},{"start":{"line":153,"column":16},"end":{"line":153,"column":34}},{"start":{"line":154,"column":16},"end":{"line":154,"column":70}},{"start":{"line":155,"column":16},"end":{"line":155,"column":56}}]},"16":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":12},"end":{"line":162,"column":12}},{"start":{"line":162,"column":12},"end":{"line":162,"column":12}}]},"17":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":16},"end":{"line":162,"column":46}},{"start":{"line":162,"column":50},"end":{"line":162,"column":67}}]},"18":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":16},"end":{"line":168,"column":16}},{"start":{"line":168,"column":16},"end":{"line":168,"column":16}}]},"19":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":20},"end":{"line":168,"column":55}},{"start":{"line":168,"column":59},"end":{"line":168,"column":92}}]},"20":{"line":172,"type":"cond-expr","locations":[{"start":{"line":172,"column":50},"end":{"line":172,"column":64}},{"start":{"line":172,"column":67},"end":{"line":172,"column":88}}]},"21":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":19},"end":{"line":179,"column":19}},{"start":{"line":179,"column":19},"end":{"line":179,"column":19}}]},"22":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":42},"end":{"line":188,"column":63}},{"start":{"line":188,"column":67},"end":{"line":188,"column":87}},{"start":{"line":188,"column":91},"end":{"line":188,"column":116}},{"start":{"line":188,"column":120},"end":{"line":188,"column":143}}]},"23":{"line":196,"type":"binary-expr","locations":[{"start":{"line":196,"column":42},"end":{"line":196,"column":63}},{"start":{"line":196,"column":67},"end":{"line":196,"column":91}}]},"24":{"line":202,"type":"cond-expr","locations":[{"start":{"line":202,"column":65},"end":{"line":202,"column":86}},{"start":{"line":202,"column":89},"end":{"line":202,"column":116}}]}},"code":["/**"," * @fileoverview Look for useless escapes in strings and regexes"," * @author Onur Temizkan"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","/**","* Returns the union of two sets.","* @param {Set} setA The first set","* @param {Set} setB The second set","* @returns {Set} The union of the two sets","*/","function union(setA, setB) {","    return new Set(function *() {","        yield* setA;","        yield* setB;","    }());","}","","const VALID_STRING_ESCAPES = union(new Set(\"\\\\nrvtbfux\"), astUtils.LINEBREAKS);","const REGEX_GENERAL_ESCAPES = new Set(\"\\\\bcdDfnrsStvwWxu0123456789]\");","const REGEX_NON_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set(\"^/.$*+?[{}|()B\"));","","/**","* Parses a regular expression into a list of characters with character class info.","* @param {string} regExpText The raw text used to create the regular expression","* @returns {Object[]} A list of characters, each with info on escaping and whether they're in a character class.","* @example","*","* parseRegExp('a\\\\b[cd-]')","*","* returns:","* [","*   {text: 'a', index: 0, escaped: false, inCharClass: false, startsCharClass: false, endsCharClass: false},","*   {text: 'b', index: 2, escaped: true, inCharClass: false, startsCharClass: false, endsCharClass: false},","*   {text: 'c', index: 4, escaped: false, inCharClass: true, startsCharClass: true, endsCharClass: false},","*   {text: 'd', index: 5, escaped: false, inCharClass: true, startsCharClass: false, endsCharClass: false},","*   {text: '-', index: 6, escaped: false, inCharClass: true, startsCharClass: false, endsCharClass: false}","* ]","*/","function parseRegExp(regExpText) {","    const charList = [];","","    regExpText.split(\"\").reduce((state, char, index) => {","        if (!state.escapeNextChar) {","            if (char === \"\\\\\") {","                return Object.assign(state, { escapeNextChar: true });","            }","            if (char === \"[\" && !state.inCharClass) {","                return Object.assign(state, { inCharClass: true, startingCharClass: true });","            }","            if (char === \"]\" && state.inCharClass) {","                if (charList.length && charList[charList.length - 1].inCharClass) {","                    charList[charList.length - 1].endsCharClass = true;","                }","                return Object.assign(state, { inCharClass: false, startingCharClass: false });","            }","        }","        charList.push({ text: char, index, escaped: state.escapeNextChar, inCharClass: state.inCharClass, startsCharClass: state.startingCharClass, endsCharClass: false });","        return Object.assign(state, { escapeNextChar: false, startingCharClass: false });","    }, { escapeNextChar: false, inCharClass: false, startingCharClass: false });","","    return charList;","}","","module.exports = {","    meta: {","        docs: {","            description: \"disallow unnecessary escape characters\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        /**","         * Reports a node","         * @param {ASTNode} node The node to report","         * @param {number} startOffset The backslash's offset from the start of the node","         * @param {string} character The uselessly escaped character (not including the backslash)","         * @returns {void}","         */","        function report(node, startOffset, character) {","            context.report({","                node,","                loc: sourceCode.getLocFromIndex(sourceCode.getIndexFromLoc(node.loc.start) + startOffset),","                message: \"Unnecessary escape character: \\\\{{character}}.\",","                data: { character }","            });","        }","","        /**","         * Checks if the escape character in given string slice is unnecessary.","         *","         * @private","         * @param {ASTNode} node - node to validate.","         * @param {string} match - string slice to validate.","         * @returns {void}","         */","        function validateString(node, match) {","            const isTemplateElement = node.type === \"TemplateElement\";","            const escapedChar = match[0][1];","            let isUnnecessaryEscape = !VALID_STRING_ESCAPES.has(escapedChar);","            let isQuoteEscape;","","            if (isTemplateElement) {","                isQuoteEscape = escapedChar === \"`\";","","                if (escapedChar === \"$\") {","","                    // Warn if `\\$` is not followed by `{`","                    isUnnecessaryEscape = match.input[match.index + 2] !== \"{\";","                } else if (escapedChar === \"{\") {","","                    /* Warn if `\\{` is not preceded by `$`. If preceded by `$`, escaping","                     * is necessary and the rule should not warn. If preceded by `/$`, the rule","                     * will warn for the `/$` instead, as it is the first unnecessarily escaped character.","                     */","                    isUnnecessaryEscape = match.input[match.index - 1] !== \"$\";","                }","            } else {","                isQuoteEscape = escapedChar === node.raw[0];","            }","","            if (isUnnecessaryEscape && !isQuoteEscape) {","                report(node, match.index + 1, match[0].slice(1));","            }","        }","","        /**","         * Checks if a node has an escape.","         *","         * @param {ASTNode} node - node to check.","         * @returns {void}","         */","        function check(node) {","            const isTemplateElement = node.type === \"TemplateElement\";","","            if (","                isTemplateElement &&","                node.parent &&","                node.parent.parent &&","                node.parent.parent.type === \"TaggedTemplateExpression\" &&","                node.parent === node.parent.parent.quasi","            ) {","","                // Don't report tagged template literals, because the backslash character is accessible to the tag function.","                return;","            }","","            if (typeof node.value === \"string\" || isTemplateElement) {","","                /*","                 * JSXAttribute doesn't have any escape sequence: https://facebook.github.io/jsx/.","                 * In addition, backticks are not supported by JSX yet: https://github.com/facebook/jsx/issues/25.","                 */","                if (node.parent.type === \"JSXAttribute\" || node.parent.type === \"JSXElement\") {","                    return;","                }","","                const value = isTemplateElement ? node.value.raw : node.raw.slice(1, -1);","                const pattern = /\\\\[^\\d]/g;","                let match;","","                while ((match = pattern.exec(value))) {","                    validateString(node, match);","                }","            } else if (node.regex) {","                parseRegExp(node.regex.pattern)","","                    /*","                     * The '-' character is a special case, because it's only valid to escape it if it's in a character","                     * class, and is not at either edge of the character class. To account for this, don't consider '-'","                     * characters to be valid in general, and filter out '-' characters that appear in the middle of a","                     * character class.","                     */","                    .filter(charInfo => !(charInfo.text === \"-\" && charInfo.inCharClass && !charInfo.startsCharClass && !charInfo.endsCharClass))","","                    /*","                     * The '^' character is also a special case; it must always be escaped outside of character classes, but","                     * it only needs to be escaped in character classes if it's at the beginning of the character class. To","                     * account for this, consider it to be a valid escape character outside of character classes, and filter","                     * out '^' characters that appear at the start of a character class.","                     */","                    .filter(charInfo => !(charInfo.text === \"^\" && charInfo.startsCharClass))","","                    // Filter out characters that aren't escaped.","                    .filter(charInfo => charInfo.escaped)","","                    // Filter out characters that are valid to escape, based on their position in the regular expression.","                    .filter(charInfo => !(charInfo.inCharClass ? REGEX_GENERAL_ESCAPES : REGEX_NON_CHARCLASS_ESCAPES).has(charInfo.text))","","                    // Report all the remaining characters.","                    .forEach(charInfo => report(node, charInfo.index, charInfo.text));","            }","","        }","","        return {","            Literal: check,","            TemplateElement: check","        };","    }","};",""],"l":{"8":1,"20":1,"21":2,"22":2,"23":2,"27":1,"28":1,"29":1,"48":1,"49":0,"51":0,"52":0,"53":0,"54":0,"56":0,"57":0,"59":0,"60":0,"61":0,"63":0,"66":0,"67":0,"70":0,"73":1,"85":0,"94":1,"95":0,"111":1,"112":0,"113":0,"114":0,"115":0,"117":0,"118":0,"120":0,"123":0,"124":0,"130":0,"133":0,"136":0,"137":0,"147":1,"148":0,"150":0,"159":0,"162":0,"168":0,"169":0,"172":0,"173":0,"174":0,"176":0,"177":0,"179":0,"180":0,"188":0,"196":0,"199":0,"202":0,"205":0,"210":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-rename.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-rename.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":33,"loc":{"start":{"line":33,"column":10},"end":{"line":33,"column":20}}},"2":{"name":"reportError","line":51,"loc":{"start":{"line":51,"column":8},"end":{"line":51,"column":58}}},"3":{"name":"(anonymous_3)","line":61,"loc":{"start":{"line":61,"column":19},"end":{"line":61,"column":27}}},"4":{"name":"checkDestructured","line":75,"loc":{"start":{"line":75,"column":8},"end":{"line":75,"column":41}}},"5":{"name":"checkImport","line":109,"loc":{"start":{"line":109,"column":8},"end":{"line":109,"column":35}}},"6":{"name":"checkExport","line":125,"loc":{"start":{"line":125,"column":8},"end":{"line":125,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":147,"column":2}},"2":{"start":{"line":34,"column":8},"end":{"line":37,"column":57}},"3":{"start":{"line":51,"column":8},"end":{"line":68,"column":9}},"4":{"start":{"line":52,"column":12},"end":{"line":52,"column":86}},"5":{"start":{"line":54,"column":12},"end":{"line":67,"column":15}},"6":{"start":{"line":62,"column":20},"end":{"line":65,"column":29}},"7":{"start":{"line":75,"column":8},"end":{"line":102,"column":9}},"8":{"start":{"line":76,"column":12},"end":{"line":78,"column":13}},"9":{"start":{"line":77,"column":16},"end":{"line":77,"column":23}},"10":{"start":{"line":80,"column":12},"end":{"line":80,"column":47}},"11":{"start":{"line":82,"column":12},"end":{"line":101,"column":13}},"12":{"start":{"line":83,"column":16},"end":{"line":85,"column":17}},"13":{"start":{"line":84,"column":20},"end":{"line":84,"column":29}},"14":{"start":{"line":93,"column":16},"end":{"line":95,"column":17}},"15":{"start":{"line":94,"column":20},"end":{"line":94,"column":29}},"16":{"start":{"line":97,"column":16},"end":{"line":100,"column":17}},"17":{"start":{"line":99,"column":20},"end":{"line":99,"column":115}},"18":{"start":{"line":109,"column":8},"end":{"line":118,"column":9}},"19":{"start":{"line":110,"column":12},"end":{"line":112,"column":13}},"20":{"start":{"line":111,"column":16},"end":{"line":111,"column":23}},"21":{"start":{"line":114,"column":12},"end":{"line":117,"column":13}},"22":{"start":{"line":116,"column":16},"end":{"line":116,"column":71}},"23":{"start":{"line":125,"column":8},"end":{"line":135,"column":9}},"24":{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},"25":{"start":{"line":127,"column":16},"end":{"line":127,"column":23}},"26":{"start":{"line":130,"column":12},"end":{"line":133,"column":13}},"27":{"start":{"line":132,"column":16},"end":{"line":132,"column":71}},"28":{"start":{"line":141,"column":8},"end":{"line":145,"column":10}}},"branchMap":{"1":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":24},"end":{"line":34,"column":42}},{"start":{"line":34,"column":46},"end":{"line":34,"column":48}}]},"2":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":57},"end":{"line":52,"column":69}},{"start":{"line":52,"column":72},"end":{"line":52,"column":85}}]},"3":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":12}},{"start":{"line":76,"column":12},"end":{"line":76,"column":12}}]},"4":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":16},"end":{"line":83,"column":16}},{"start":{"line":83,"column":16},"end":{"line":83,"column":16}}]},"5":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":16}},{"start":{"line":93,"column":16},"end":{"line":93,"column":16}}]},"6":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":20},"end":{"line":93,"column":42}},{"start":{"line":93,"column":46},"end":{"line":93,"column":64}}]},"7":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":16},"end":{"line":97,"column":16}},{"start":{"line":97,"column":16},"end":{"line":97,"column":16}}]},"8":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":20},"end":{"line":97,"column":59}},{"start":{"line":97,"column":63},"end":{"line":97,"column":114}},{"start":{"line":98,"column":24},"end":{"line":98,"column":60}},{"start":{"line":98,"column":64},"end":{"line":98,"column":116}}]},"9":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":12},"end":{"line":110,"column":12}},{"start":{"line":110,"column":12},"end":{"line":110,"column":12}}]},"10":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":12},"end":{"line":114,"column":12}},{"start":{"line":114,"column":12},"end":{"line":114,"column":12}}]},"11":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":16},"end":{"line":114,"column":54}},{"start":{"line":115,"column":20},"end":{"line":115,"column":66}}]},"12":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":12}},{"start":{"line":126,"column":12},"end":{"line":126,"column":12}}]},"13":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":130,"column":12}},{"start":{"line":130,"column":12},"end":{"line":130,"column":12}}]},"14":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":16},"end":{"line":130,"column":54}},{"start":{"line":131,"column":20},"end":{"line":131,"column":66}}]}},"code":["/**"," * @fileoverview Disallow renaming import, export, and destructured assignments to the same name."," * @author Kai Cataldo"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow renaming import, export, and destructured assignments to the same name\",","            category: \"ECMAScript 6\",","            recommended: false","        },","        fixable: \"code\",","        schema: [","            {","                type: \"object\",","                properties: {","                    ignoreDestructuring: { type: \"boolean\" },","                    ignoreImport: { type: \"boolean\" },","                    ignoreExport: { type: \"boolean\" }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0] || {},","            ignoreDestructuring = options.ignoreDestructuring === true,","            ignoreImport = options.ignoreImport === true,","            ignoreExport = options.ignoreExport === true;","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Reports error for unnecessarily renamed assignments","         * @param {ASTNode} node - node to report","         * @param {ASTNode} initial - node with initial name value","         * @param {ASTNode} result - node with new name value","         * @param {string} type - the type of the offending node","         * @returns {void}","         */","        function reportError(node, initial, result, type) {","            const name = initial.type === \"Identifier\" ? initial.name : initial.value;","","            return context.report({","                node,","                message: \"{{type}} {{name}} unnecessarily renamed.\",","                data: {","                    name,","                    type","                },","                fix(fixer) {","                    return fixer.replaceTextRange([","                        initial.range[0],","                        result.range[1]","                    ], name);","                }","            });","        }","","        /**","         * Checks whether a destructured assignment is unnecessarily renamed","         * @param {ASTNode} node - node to check","         * @returns {void}","         */","        function checkDestructured(node) {","            if (ignoreDestructuring) {","                return;","            }","","            const properties = node.properties;","","            for (let i = 0; i < properties.length; i++) {","                if (properties[i].shorthand) {","                    continue;","                }","","                /**","                 * If an ObjectPattern property is computed, we have no idea","                 * if a rename is useless or not. If an ObjectPattern property","                 * lacks a key, it is likely an ExperimentalRestProperty and","                 * so there is no \"renaming\" occurring here.","                 */","                if (properties[i].computed || !properties[i].key) {","                    continue;","                }","","                if (properties[i].key.type === \"Identifier\" && properties[i].key.name === properties[i].value.name ||","                        properties[i].key.type === \"Literal\" && properties[i].key.value === properties[i].value.name) {","                    reportError(properties[i], properties[i].key, properties[i].value, \"Destructuring assignment\");","                }","            }","        }","","        /**","         * Checks whether an import is unnecessarily renamed","         * @param {ASTNode} node - node to check","         * @returns {void}","         */","        function checkImport(node) {","            if (ignoreImport) {","                return;","            }","","            if (node.imported.name === node.local.name &&","                    node.imported.range[0] !== node.local.range[0]) {","                reportError(node, node.imported, node.local, \"Import\");","            }","        }","","        /**","         * Checks whether an export is unnecessarily renamed","         * @param {ASTNode} node - node to check","         * @returns {void}","         */","        function checkExport(node) {","            if (ignoreExport) {","                return;","            }","","            if (node.local.name === node.exported.name &&","                    node.local.range[0] !== node.exported.range[0]) {","                reportError(node, node.local, node.exported, \"Export\");","            }","","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            ObjectPattern: checkDestructured,","            ImportSpecifier: checkImport,","            ExportSpecifier: checkExport","        };","    }","};",""],"l":{"12":1,"34":0,"51":1,"52":0,"54":0,"62":0,"75":1,"76":0,"77":0,"80":0,"82":0,"83":0,"84":0,"93":0,"94":0,"97":0,"99":0,"109":1,"110":0,"111":0,"114":0,"116":0,"125":1,"126":0,"127":0,"130":0,"132":0,"141":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-return.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-useless-return.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"remove","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":32}}},"2":{"name":"isRemovable","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":27}}},"3":{"name":"isInFinally","line":58,"loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":27}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":10},"end":{"line":85,"column":20}}},"5":{"name":"isReturned","line":96,"loc":{"start":{"line":96,"column":8},"end":{"line":96,"column":37}}},"6":{"name":"getUselessReturns","line":121,"loc":{"start":{"line":121,"column":8},"end":{"line":121,"column":84}}},"7":{"name":"markReturnStatementsOnSegmentAsUsed","line":162,"loc":{"start":{"line":162,"column":8},"end":{"line":162,"column":62}}},"8":{"name":"markReturnStatementsOnCurrentSegmentsAsUsed","line":193,"loc":{"start":{"line":193,"column":8},"end":{"line":193,"column":63}}},"9":{"name":"(anonymous_9)","line":207,"loc":{"start":{"line":207,"column":27},"end":{"line":207,"column":38}}},"10":{"name":"(anonymous_10)","line":216,"loc":{"start":{"line":216,"column":25},"end":{"line":216,"column":28}}},"11":{"name":"(anonymous_11)","line":222,"loc":{"start":{"line":222,"column":27},"end":{"line":222,"column":35}}},"12":{"name":"(anonymous_12)","line":243,"loc":{"start":{"line":243,"column":34},"end":{"line":243,"column":44}}},"13":{"name":"(anonymous_13)","line":254,"loc":{"start":{"line":254,"column":27},"end":{"line":254,"column":34}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":12,"column":48}},"2":{"start":{"line":25,"column":0},"end":{"line":25,"column":58}},"3":{"start":{"line":34,"column":0},"end":{"line":40,"column":1}},"4":{"start":{"line":35,"column":4},"end":{"line":35,"column":41}},"5":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"6":{"start":{"line":38,"column":8},"end":{"line":38,"column":31}},"7":{"start":{"line":48,"column":0},"end":{"line":50,"column":1}},"8":{"start":{"line":49,"column":4},"end":{"line":49,"column":65}},"9":{"start":{"line":58,"column":0},"end":{"line":68,"column":1}},"10":{"start":{"line":59,"column":4},"end":{"line":65,"column":5}},"11":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"12":{"start":{"line":61,"column":12},"end":{"line":61,"column":24}},"13":{"start":{"line":64,"column":8},"end":{"line":64,"column":27}},"14":{"start":{"line":67,"column":4},"end":{"line":67,"column":17}},"15":{"start":{"line":74,"column":0},"end":{"line":298,"column":2}},"16":{"start":{"line":86,"column":8},"end":{"line":86,"column":45}},"17":{"start":{"line":87,"column":8},"end":{"line":87,"column":54}},"18":{"start":{"line":88,"column":8},"end":{"line":88,"column":29}},"19":{"start":{"line":96,"column":8},"end":{"line":100,"column":9}},"20":{"start":{"line":97,"column":12},"end":{"line":97,"column":53}},"21":{"start":{"line":99,"column":12},"end":{"line":99,"column":42}},"22":{"start":{"line":121,"column":8},"end":{"line":142,"column":9}},"23":{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},"24":{"start":{"line":123,"column":16},"end":{"line":123,"column":50}},"25":{"start":{"line":125,"column":12},"end":{"line":139,"column":13}},"26":{"start":{"line":126,"column":16},"end":{"line":136,"column":17}},"27":{"start":{"line":127,"column":20},"end":{"line":134,"column":21}},"28":{"start":{"line":128,"column":24},"end":{"line":128,"column":55}},"29":{"start":{"line":129,"column":24},"end":{"line":133,"column":26}},"30":{"start":{"line":135,"column":20},"end":{"line":135,"column":29}},"31":{"start":{"line":138,"column":16},"end":{"line":138,"column":84}},"32":{"start":{"line":141,"column":12},"end":{"line":141,"column":34}},"33":{"start":{"line":162,"column":8},"end":{"line":178,"column":9}},"34":{"start":{"line":163,"column":12},"end":{"line":170,"column":13}},"35":{"start":{"line":164,"column":16},"end":{"line":164,"column":53}},"36":{"start":{"line":165,"column":16},"end":{"line":168,"column":66}},"37":{"start":{"line":167,"column":43},"end":{"line":167,"column":84}},"38":{"start":{"line":169,"column":16},"end":{"line":169,"column":23}},"39":{"start":{"line":172,"column":12},"end":{"line":172,"column":53}},"40":{"start":{"line":174,"column":12},"end":{"line":176,"column":13}},"41":{"start":{"line":175,"column":16},"end":{"line":175,"column":55}},"42":{"start":{"line":177,"column":12},"end":{"line":177,"column":37}},"43":{"start":{"line":193,"column":8},"end":{"line":198,"column":9}},"44":{"start":{"line":194,"column":12},"end":{"line":197,"column":62}},"45":{"start":{"line":204,"column":8},"end":{"line":296,"column":10}},"46":{"start":{"line":208,"column":16},"end":{"line":212,"column":18}},"47":{"start":{"line":217,"column":16},"end":{"line":236,"column":17}},"48":{"start":{"line":218,"column":20},"end":{"line":235,"column":23}},"49":{"start":{"line":223,"column":28},"end":{"line":232,"column":29}},"50":{"start":{"line":229,"column":32},"end":{"line":231,"column":50}},"51":{"start":{"line":233,"column":28},"end":{"line":233,"column":40}},"52":{"start":{"line":238,"column":16},"end":{"line":238,"column":44}},"53":{"start":{"line":244,"column":16},"end":{"line":247,"column":18}},"54":{"start":{"line":250,"column":16},"end":{"line":250,"column":50}},"55":{"start":{"line":255,"column":16},"end":{"line":257,"column":17}},"56":{"start":{"line":256,"column":20},"end":{"line":256,"column":66}},"57":{"start":{"line":258,"column":16},"end":{"line":260,"column":17}},"58":{"start":{"line":259,"column":20},"end":{"line":259,"column":27}},"59":{"start":{"line":262,"column":16},"end":{"line":269,"column":17}},"60":{"start":{"line":263,"column":20},"end":{"line":263,"column":61}},"61":{"start":{"line":265,"column":20},"end":{"line":268,"column":21}},"62":{"start":{"line":266,"column":24},"end":{"line":266,"column":55}},"63":{"start":{"line":267,"column":24},"end":{"line":267,"column":45}},"64":{"start":{"line":270,"column":16},"end":{"line":270,"column":52}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"2":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":11},"end":{"line":59,"column":15}},{"start":{"line":59,"column":19},"end":{"line":59,"column":30}},{"start":{"line":59,"column":34},"end":{"line":59,"column":60}}]},"3":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"4":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":47}},{"start":{"line":60,"column":51},"end":{"line":60,"column":81}}]},"5":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":19},"end":{"line":99,"column":24}},{"start":{"line":99,"column":28},"end":{"line":99,"column":41}}]},"6":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":12}},{"start":{"line":122,"column":12},"end":{"line":122,"column":12}}]},"7":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":16},"end":{"line":126,"column":16}},{"start":{"line":126,"column":16},"end":{"line":126,"column":16}}]},"8":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":20},"end":{"line":127,"column":20}},{"start":{"line":127,"column":20},"end":{"line":127,"column":20}}]},"9":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":12},"end":{"line":163,"column":12}},{"start":{"line":163,"column":12},"end":{"line":163,"column":12}}]},"10":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":28},"end":{"line":223,"column":28}},{"start":{"line":223,"column":28},"end":{"line":223,"column":28}}]},"11":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":16},"end":{"line":255,"column":16}},{"start":{"line":255,"column":16},"end":{"line":255,"column":16}}]},"12":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":16},"end":{"line":258,"column":16}},{"start":{"line":258,"column":16},"end":{"line":258,"column":16}}]},"13":{"line":258,"type":"binary-expr","locations":[{"start":{"line":258,"column":20},"end":{"line":258,"column":33}},{"start":{"line":258,"column":37},"end":{"line":258,"column":60}},{"start":{"line":258,"column":64},"end":{"line":258,"column":81}}]},"14":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":20},"end":{"line":265,"column":20}},{"start":{"line":265,"column":20},"end":{"line":265,"column":20}}]}},"code":["/**"," * @fileoverview Disallow redundant return statements"," * @author Teddy Katz"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\"),","    FixTracker = require(\"../util/fix-tracker\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Adds all elements of 2nd argument into 1st argument."," *"," * @param {Array} array - The destination array to add."," * @param {Array} elements - The source array to add."," * @returns {void}"," */","const pushAll = Function.apply.bind(Array.prototype.push);","","/**"," * Removes the given element from the array."," *"," * @param {Array} array - The source array to remove."," * @param {any} element - The target item to remove."," * @returns {void}"," */","function remove(array, element) {","    const index = array.indexOf(element);","","    if (index !== -1) {","        array.splice(index, 1);","    }","}","","/**"," * Checks whether it can remove the given return statement or not."," *"," * @param {ASTNode} node - The return statement node to check."," * @returns {boolean} `true` if the node is removeable."," */","function isRemovable(node) {","    return astUtils.STATEMENT_LIST_PARENTS.has(node.parent.type);","}","","/**"," * Checks whether the given return statement is in a `finally` block or not."," *"," * @param {ASTNode} node - The return statement node to check."," * @returns {boolean} `true` if the node is in a `finally` block."," */","function isInFinally(node) {","    while (node && node.parent && !astUtils.isFunction(node)) {","        if (node.parent.type === \"TryStatement\" && node.parent.finalizer === node) {","            return true;","        }","","        node = node.parent;","    }","","    return false;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow redundant return statements\",","            category: \"Best Practices\",","            recommended: false","        },","        fixable: \"code\",","        schema: []","    },","","    create(context) {","        const segmentInfoMap = new WeakMap();","        const usedUnreachableSegments = new WeakSet();","        let scopeInfo = null;","","        /**","         * Checks whether the given segment is terminated by a return statement or not.","         *","         * @param {CodePathSegment} segment - The segment to check.","         * @returns {boolean} `true` if the segment is terminated by a return statement, or if it's still a part of unreachable.","         */","        function isReturned(segment) {","            const info = segmentInfoMap.get(segment);","","            return !info || info.returned;","        }","","        /**","         * Collects useless return statements from the given previous segments.","         *","         * A previous segment may be an unreachable segment.","         * In that case, the information object of the unreachable segment is not","         * initialized because `onCodePathSegmentStart` event is not notified for","         * unreachable segments.","         * This goes to the previous segments of the unreachable segment recursively","         * if the unreachable segment was generated by a return statement. Otherwise,","         * this ignores the unreachable segment.","         *","         * This behavior would simulate code paths for the case that the return","         * statement does not exist.","         *","         * @param {ASTNode[]} uselessReturns - The collected return statements.","         * @param {CodePathSegment[]} prevSegments - The previous segments to traverse.","         * @param {WeakSet<CodePathSegment>} [traversedSegments] A set of segments that have already been traversed in this call","         * @returns {ASTNode[]} `uselessReturns`.","         */","        function getUselessReturns(uselessReturns, prevSegments, traversedSegments) {","            if (!traversedSegments) {","                traversedSegments = new WeakSet();","            }","            for (const segment of prevSegments) {","                if (!segment.reachable) {","                    if (!traversedSegments.has(segment)) {","                        traversedSegments.add(segment);","                        getUselessReturns(","                            uselessReturns,","                            segment.allPrevSegments.filter(isReturned),","                            traversedSegments","                        );","                    }","                    continue;","                }","","                pushAll(uselessReturns, segmentInfoMap.get(segment).uselessReturns);","            }","","            return uselessReturns;","        }","","        /**","         * Removes the return statements on the given segment from the useless return","         * statement list.","         *","         * This segment may be an unreachable segment.","         * In that case, the information object of the unreachable segment is not","         * initialized because `onCodePathSegmentStart` event is not notified for","         * unreachable segments.","         * This goes to the previous segments of the unreachable segment recursively","         * if the unreachable segment was generated by a return statement. Otherwise,","         * this ignores the unreachable segment.","         *","         * This behavior would simulate code paths for the case that the return","         * statement does not exist.","         *","         * @param {CodePathSegment} segment - The segment to get return statements.","         * @returns {void}","         */","        function markReturnStatementsOnSegmentAsUsed(segment) {","            if (!segment.reachable) {","                usedUnreachableSegments.add(segment);","                segment.allPrevSegments","                    .filter(isReturned)","                    .filter(prevSegment => !usedUnreachableSegments.has(prevSegment))","                    .forEach(markReturnStatementsOnSegmentAsUsed);","                return;","            }","","            const info = segmentInfoMap.get(segment);","","            for (const node of info.uselessReturns) {","                remove(scopeInfo.uselessReturns, node);","            }","            info.uselessReturns = [];","        }","","        /**","         * Removes the return statements on the current segments from the useless","         * return statement list.","         *","         * This function will be called at every statement except FunctionDeclaration,","         * BlockStatement, and BreakStatement.","         *","         * - FunctionDeclarations are always executed whether it's returned or not.","         * - BlockStatements do nothing.","         * - BreakStatements go the next merely.","         *","         * @returns {void}","         */","        function markReturnStatementsOnCurrentSegmentsAsUsed() {","            scopeInfo","                .codePath","                .currentSegments","                .forEach(markReturnStatementsOnSegmentAsUsed);","        }","","        //----------------------------------------------------------------------","        // Public","        //----------------------------------------------------------------------","","        return {","","            // Makes and pushs a new scope information.","            onCodePathStart(codePath) {","                scopeInfo = {","                    upper: scopeInfo,","                    uselessReturns: [],","                    codePath","                };","            },","","            // Reports useless return statements if exist.","            onCodePathEnd() {","                for (const node of scopeInfo.uselessReturns) {","                    context.report({","                        node,","                        loc: node.loc,","                        message: \"Unnecessary return statement.\",","                        fix(fixer) {","                            if (isRemovable(node)) {","","                                // Extend the replacement range to include the","                                // entire function to avoid conflicting with","                                // no-else-return.","                                // https://github.com/eslint/eslint/issues/8026","                                return new FixTracker(fixer, context.getSourceCode())","                                    .retainEnclosingFunction(node)","                                    .remove(node);","                            }","                            return null;","                        }","                    });","                }","","                scopeInfo = scopeInfo.upper;","            },","","            // Initializes segments.","            // NOTE: This event is notified for only reachable segments.","            onCodePathSegmentStart(segment) {","                const info = {","                    uselessReturns: getUselessReturns([], segment.allPrevSegments),","                    returned: false","                };","","                // Stores the info.","                segmentInfoMap.set(segment, info);","            },","","            // Adds ReturnStatement node to check whether it's useless or not.","            ReturnStatement(node) {","                if (node.argument) {","                    markReturnStatementsOnCurrentSegmentsAsUsed();","                }","                if (node.argument || astUtils.isInLoop(node) || isInFinally(node)) {","                    return;","                }","","                for (const segment of scopeInfo.codePath.currentSegments) {","                    const info = segmentInfoMap.get(segment);","","                    if (info) {","                        info.uselessReturns.push(node);","                        info.returned = true;","                    }","                }","                scopeInfo.uselessReturns.push(node);","            },","","            // Registers for all statement nodes except FunctionDeclaration, BlockStatement, BreakStatement.","            // Removes return statements of the current segments from the useless return statement list.","            ClassDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,","            ContinueStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            DebuggerStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            DoWhileStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            EmptyStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            ExpressionStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            ForInStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            ForOfStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            ForStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            IfStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            ImportDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,","            LabeledStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            SwitchStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            ThrowStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            TryStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            VariableDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,","            WhileStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            WithStatement: markReturnStatementsOnCurrentSegmentsAsUsed,","            ExportNamedDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,","            ExportDefaultDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,","            ExportAllDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed","        };","    }","};",""],"l":{"11":1,"25":1,"34":1,"35":0,"37":0,"38":0,"48":1,"49":0,"58":1,"59":0,"60":0,"61":0,"64":0,"67":0,"74":1,"86":0,"87":0,"88":0,"96":1,"97":0,"99":0,"121":1,"122":0,"123":0,"125":0,"126":0,"127":0,"128":0,"129":0,"135":0,"138":0,"141":0,"162":1,"163":0,"164":0,"165":0,"167":0,"169":0,"172":0,"174":0,"175":0,"177":0,"193":1,"194":0,"204":0,"208":0,"217":0,"218":0,"223":0,"229":0,"233":0,"238":0,"244":0,"250":0,"255":0,"256":0,"258":0,"259":0,"262":0,"263":0,"265":0,"266":0,"267":0,"270":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-var.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-var.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":0,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":1,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"getEnclosingFunctionScope","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":42}}},"2":{"name":"isReferencedInClosure","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":41}}},"3":{"name":"isLoopAssignee","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":30}}},"4":{"name":"isDeclarationInitialized","line":65,"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":40}}},"5":{"name":"getScopeNode","line":80,"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":28}}},"6":{"name":"isRedeclared","line":99,"loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":32}}},"7":{"name":"isUsedFromOutsideOf","line":110,"loc":{"start":{"line":110,"column":0},"end":{"line":110,"column":40}}},"8":{"name":"isOutsideOfScope","line":119,"loc":{"start":{"line":119,"column":4},"end":{"line":119,"column":41}}},"9":{"name":"(anonymous_9)","line":126,"loc":{"start":{"line":126,"column":11},"end":{"line":126,"column":30}}},"10":{"name":"hasReferenceInTDZ","line":144,"loc":{"start":{"line":144,"column":0},"end":{"line":144,"column":33}}},"11":{"name":"(anonymous_11)","line":184,"loc":{"start":{"line":184,"column":10},"end":{"line":184,"column":20}}},"12":{"name":"hasSelfReferenceInTDZ","line":193,"loc":{"start":{"line":193,"column":8},"end":{"line":193,"column":51}}},"13":{"name":"canFix","line":253,"loc":{"start":{"line":253,"column":8},"end":{"line":253,"column":30}}},"14":{"name":"report","line":293,"loc":{"start":{"line":293,"column":8},"end":{"line":293,"column":30}}},"15":{"name":"(anonymous_15)","line":300,"loc":{"start":{"line":300,"column":19},"end":{"line":300,"column":27}}},"16":{"name":"(anonymous_16)","line":310,"loc":{"start":{"line":310,"column":38},"end":{"line":310,"column":45}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":26,"column":0},"end":{"line":31,"column":1}},"3":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"4":{"start":{"line":28,"column":8},"end":{"line":28,"column":28}},"5":{"start":{"line":30,"column":4},"end":{"line":30,"column":17}},"6":{"start":{"line":40,"column":0},"end":{"line":45,"column":1}},"7":{"start":{"line":41,"column":4},"end":{"line":41,"column":77}},"8":{"start":{"line":43,"column":4},"end":{"line":44,"column":78}},"9":{"start":{"line":44,"column":8},"end":{"line":44,"column":76}},"10":{"start":{"line":54,"column":0},"end":{"line":57,"column":1}},"11":{"start":{"line":55,"column":4},"end":{"line":56,"column":34}},"12":{"start":{"line":65,"column":0},"end":{"line":67,"column":1}},"13":{"start":{"line":66,"column":4},"end":{"line":66,"column":75}},"14":{"start":{"line":66,"column":49},"end":{"line":66,"column":73}},"15":{"start":{"line":69,"column":0},"end":{"line":69,"column":114}},"16":{"start":{"line":80,"column":0},"end":{"line":91,"column":1}},"17":{"start":{"line":81,"column":4},"end":{"line":87,"column":5}},"18":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"19":{"start":{"line":83,"column":12},"end":{"line":83,"column":24}},"20":{"start":{"line":86,"column":8},"end":{"line":86,"column":27}},"21":{"start":{"line":90,"column":4},"end":{"line":90,"column":16},"skip":true},"22":{"start":{"line":99,"column":0},"end":{"line":101,"column":1}},"23":{"start":{"line":100,"column":4},"end":{"line":100,"column":37}},"24":{"start":{"line":110,"column":0},"end":{"line":129,"column":1}},"25":{"start":{"line":119,"column":4},"end":{"line":124,"column":5}},"26":{"start":{"line":120,"column":8},"end":{"line":120,"column":38}},"27":{"start":{"line":121,"column":8},"end":{"line":121,"column":46}},"28":{"start":{"line":123,"column":8},"end":{"line":123,"column":52}},"29":{"start":{"line":126,"column":4},"end":{"line":128,"column":6}},"30":{"start":{"line":127,"column":8},"end":{"line":127,"column":58}},"31":{"start":{"line":144,"column":0},"end":{"line":166,"column":1}},"32":{"start":{"line":145,"column":4},"end":{"line":145,"column":36}},"33":{"start":{"line":146,"column":4},"end":{"line":146,"column":34}},"34":{"start":{"line":148,"column":4},"end":{"line":165,"column":6}},"35":{"start":{"line":149,"column":8},"end":{"line":149,"column":41}},"36":{"start":{"line":150,"column":8},"end":{"line":150,"column":36}},"37":{"start":{"line":151,"column":8},"end":{"line":151,"column":95}},"38":{"start":{"line":152,"column":8},"end":{"line":152,"column":67}},"39":{"start":{"line":153,"column":8},"end":{"line":153,"column":65}},"40":{"start":{"line":155,"column":8},"end":{"line":164,"column":11}},"41":{"start":{"line":156,"column":12},"end":{"line":156,"column":56}},"42":{"start":{"line":157,"column":12},"end":{"line":157,"column":54}},"43":{"start":{"line":159,"column":12},"end":{"line":163,"column":14}},"44":{"start":{"line":172,"column":0},"end":{"line":317,"column":2}},"45":{"start":{"line":185,"column":8},"end":{"line":185,"column":51}},"46":{"start":{"line":193,"column":8},"end":{"line":200,"column":9}},"47":{"start":{"line":194,"column":12},"end":{"line":196,"column":13}},"48":{"start":{"line":195,"column":16},"end":{"line":195,"column":29}},"49":{"start":{"line":197,"column":12},"end":{"line":197,"column":71}},"50":{"start":{"line":199,"column":12},"end":{"line":199,"column":70}},"51":{"start":{"line":253,"column":8},"end":{"line":285,"column":9}},"52":{"start":{"line":254,"column":12},"end":{"line":254,"column":65}},"53":{"start":{"line":255,"column":12},"end":{"line":255,"column":49}},"54":{"start":{"line":257,"column":12},"end":{"line":263,"column":13}},"55":{"start":{"line":262,"column":16},"end":{"line":262,"column":29}},"56":{"start":{"line":265,"column":12},"end":{"line":272,"column":13}},"57":{"start":{"line":266,"column":16},"end":{"line":268,"column":17}},"58":{"start":{"line":267,"column":20},"end":{"line":267,"column":33}},"59":{"start":{"line":269,"column":16},"end":{"line":271,"column":17}},"60":{"start":{"line":270,"column":20},"end":{"line":270,"column":33}},"61":{"start":{"line":274,"column":12},"end":{"line":282,"column":13}},"62":{"start":{"line":281,"column":16},"end":{"line":281,"column":29}},"63":{"start":{"line":284,"column":12},"end":{"line":284,"column":24}},"64":{"start":{"line":293,"column":8},"end":{"line":307,"column":9}},"65":{"start":{"line":294,"column":12},"end":{"line":294,"column":60}},"66":{"start":{"line":296,"column":12},"end":{"line":306,"column":15}},"67":{"start":{"line":301,"column":20},"end":{"line":303,"column":21}},"68":{"start":{"line":302,"column":24},"end":{"line":302,"column":66}},"69":{"start":{"line":304,"column":20},"end":{"line":304,"column":32}},"70":{"start":{"line":309,"column":8},"end":{"line":315,"column":10}},"71":{"start":{"line":311,"column":16},"end":{"line":313,"column":17}},"72":{"start":{"line":312,"column":20},"end":{"line":312,"column":33}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":11},"end":{"line":27,"column":36}},{"start":{"line":27,"column":40},"end":{"line":27,"column":63}}]},"2":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":49}},{"start":{"line":55,"column":53},"end":{"line":55,"column":90}},{"start":{"line":56,"column":8},"end":{"line":56,"column":33}}]},"3":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"4":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":15},"end":{"line":123,"column":31}},{"start":{"line":123,"column":35},"end":{"line":123,"column":51}}]},"5":{"line":151,"type":"cond-expr","locations":[{"start":{"line":151,"column":71},"end":{"line":151,"column":86}},{"start":{"line":151,"column":89},"end":{"line":151,"column":93}}]},"6":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":29},"end":{"line":152,"column":41}},{"start":{"line":152,"column":45},"end":{"line":152,"column":66}}]},"7":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":27},"end":{"line":153,"column":39}},{"start":{"line":153,"column":43},"end":{"line":153,"column":64}}]},"8":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":19},"end":{"line":159,"column":34}},{"start":{"line":160,"column":16},"end":{"line":160,"column":31}},{"start":{"line":161,"column":17},"end":{"line":161,"column":38}},{"start":{"line":161,"column":42},"end":{"line":161,"column":63}},{"start":{"line":161,"column":67},"end":{"line":161,"column":84}},{"start":{"line":162,"column":17},"end":{"line":162,"column":35}},{"start":{"line":162,"column":39},"end":{"line":162,"column":53}}]},"9":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":12},"end":{"line":194,"column":12}},{"start":{"line":194,"column":12},"end":{"line":194,"column":12}}]},"10":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":12},"end":{"line":257,"column":12}},{"start":{"line":257,"column":12},"end":{"line":257,"column":12}}]},"11":{"line":257,"type":"binary-expr","locations":[{"start":{"line":257,"column":16},"end":{"line":257,"column":49}},{"start":{"line":258,"column":16},"end":{"line":258,"column":61}},{"start":{"line":259,"column":16},"end":{"line":259,"column":44}},{"start":{"line":260,"column":16},"end":{"line":260,"column":62}}]},"12":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":12},"end":{"line":265,"column":12}},{"start":{"line":265,"column":12},"end":{"line":265,"column":12}}]},"13":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":16},"end":{"line":266,"column":16}},{"start":{"line":266,"column":16},"end":{"line":266,"column":16}}]},"14":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":16},"end":{"line":269,"column":16}},{"start":{"line":269,"column":16},"end":{"line":269,"column":16}}]},"15":{"line":269,"type":"binary-expr","locations":[{"start":{"line":269,"column":20},"end":{"line":269,"column":41}},{"start":{"line":269,"column":45},"end":{"line":269,"column":76}}]},"16":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":12},"end":{"line":274,"column":12}},{"start":{"line":274,"column":12},"end":{"line":274,"column":12}}]},"17":{"line":275,"type":"binary-expr","locations":[{"start":{"line":275,"column":16},"end":{"line":275,"column":37}},{"start":{"line":276,"column":16},"end":{"line":276,"column":83}},{"start":{"line":277,"column":16},"end":{"line":277,"column":70}}]},"18":{"line":276,"type":"binary-expr","locations":[{"start":{"line":276,"column":18},"end":{"line":276,"column":53}},{"start":{"line":276,"column":57},"end":{"line":276,"column":82}}]},"19":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":20},"end":{"line":301,"column":20}},{"start":{"line":301,"column":20},"end":{"line":301,"column":20}}]},"20":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":16},"end":{"line":311,"column":16}},{"start":{"line":311,"column":16},"end":{"line":311,"column":16}}]}},"code":["/**"," * @fileoverview Rule to check for the usage of var."," * @author Jamund Ferguson"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Finds the nearest function scope or global scope walking up the scope"," * hierarchy."," *"," * @param {escope.Scope} scope - The scope to traverse."," * @returns {escope.Scope} a function scope or global scope containing the given"," *      scope."," */","function getEnclosingFunctionScope(scope) {","    while (scope.type !== \"function\" && scope.type !== \"global\") {","        scope = scope.upper;","    }","    return scope;","}","","/**"," * Checks whether the given variable has any references from a more specific"," * function expression (i.e. a closure)."," *"," * @param {escope.Variable} variable - A variable to check."," * @returns {boolean} `true` if the variable is used from a closure."," */","function isReferencedInClosure(variable) {","    const enclosingFunctionScope = getEnclosingFunctionScope(variable.scope);","","    return variable.references.some(reference =>","        getEnclosingFunctionScope(reference.from) !== enclosingFunctionScope);","}","","/**"," * Checks whether the given node is the assignee of a loop."," *"," * @param {ASTNode} node - A VariableDeclaration node to check."," * @returns {boolean} `true` if the declaration is assigned as part of loop"," *      iteration."," */","function isLoopAssignee(node) {","    return (node.parent.type === \"ForOfStatement\" || node.parent.type === \"ForInStatement\") &&","        node === node.parent.left;","}","","/**"," * Checks whether the given variable declaration is immediately initialized."," *"," * @param {ASTNode} node - A VariableDeclaration node to check."," * @returns {boolean} `true` if the declaration has an initializer."," */","function isDeclarationInitialized(node) {","    return node.declarations.every(declarator => declarator.init !== null);","}","","const SCOPE_NODE_TYPE = /^(?:Program|BlockStatement|SwitchStatement|ForStatement|ForInStatement|ForOfStatement)$/;","","/**"," * Gets the scope node which directly contains a given node."," *"," * @param {ASTNode} node - A node to get. This is a `VariableDeclaration` or"," *      an `Identifier`."," * @returns {ASTNode} A scope node. This is one of `Program`, `BlockStatement`,"," *      `SwitchStatement`, `ForStatement`, `ForInStatement`, and"," *      `ForOfStatement`."," */","function getScopeNode(node) {","    while (node) {","        if (SCOPE_NODE_TYPE.test(node.type)) {","            return node;","        }","","        node = node.parent;","    }","","    /* istanbul ignore next : unreachable */","    return null;","}","","/**"," * Checks whether a given variable is redeclared or not."," *"," * @param {escope.Variable} variable - A variable to check."," * @returns {boolean} `true` if the variable is redeclared."," */","function isRedeclared(variable) {","    return variable.defs.length >= 2;","}","","/**"," * Checks whether a given variable is used from outside of the specified scope."," *"," * @param {ASTNode} scopeNode - A scope node to check."," * @returns {Function} The predicate function which checks whether a given"," *      variable is used from outside of the specified scope."," */","function isUsedFromOutsideOf(scopeNode) {","","    /**","     * Checks whether a given reference is inside of the specified scope or not.","     *","     * @param {escope.Reference} reference - A reference to check.","     * @returns {boolean} `true` if the reference is inside of the specified","     *      scope.","     */","    function isOutsideOfScope(reference) {","        const scope = scopeNode.range;","        const id = reference.identifier.range;","","        return id[0] < scope[0] || id[1] > scope[1];","    }","","    return function(variable) {","        return variable.references.some(isOutsideOfScope);","    };","}","","/**"," * Creates the predicate function which checks whether a variable has their references in TDZ."," *"," * The predicate function would return `true`:"," *"," * - if a reference is before the declarator. E.g. (var a = b, b = 1;)(var {a = b, b} = {};)"," * - if a reference is in the expression of their default value.  E.g. (var {a = a} = {};)"," * - if a reference is in the expression of their initializer.  E.g. (var a = a;)"," *"," * @param {ASTNode} node - The initializer node of VariableDeclarator."," * @returns {Function} The predicate function."," * @private"," */","function hasReferenceInTDZ(node) {","    const initStart = node.range[0];","    const initEnd = node.range[1];","","    return variable => {","        const id = variable.defs[0].name;","        const idStart = id.range[0];","        const defaultValue = (id.parent.type === \"AssignmentPattern\" ? id.parent.right : null);","        const defaultStart = defaultValue && defaultValue.range[0];","        const defaultEnd = defaultValue && defaultValue.range[1];","","        return variable.references.some(reference => {","            const start = reference.identifier.range[0];","            const end = reference.identifier.range[1];","","            return !reference.init && (","                start < idStart ||","                (defaultValue !== null && start >= defaultStart && end <= defaultEnd) ||","                (start >= initStart && end <= initEnd)","            );","        });","    };","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require `let` or `const` instead of `var`\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [],","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        /**","         * Checks whether the variables which are defined by the given declarator node have their references in TDZ.","         *","         * @param {ASTNode} declarator - The VariableDeclarator node to check.","         * @returns {boolean} `true` if one of the variables which are defined by the given declarator node have their references in TDZ.","         */","        function hasSelfReferenceInTDZ(declarator) {","            if (!declarator.init) {","                return false;","            }","            const variables = context.getDeclaredVariables(declarator);","","            return variables.some(hasReferenceInTDZ(declarator.init));","        }","","        /**","         * Checks whether it can fix a given variable declaration or not.","         * It cannot fix if the following cases:","         *","         * - A variable is declared on a SwitchCase node.","         * - A variable is redeclared.","         * - A variable is used from outside the scope.","         * - A variable is used from a closure within a loop.","         * - A variable might be used before it is assigned within a loop.","         * - A variable might be used in TDZ.","         * - A variable is declared in statement position (e.g. a single-line `IfStatement`)","         *","         * ## A variable is declared on a SwitchCase node.","         *","         * If this rule modifies 'var' declarations on a SwitchCase node, it","         * would generate the warnings of 'no-case-declarations' rule. And the","         * 'eslint:recommended' preset includes 'no-case-declarations' rule, so","         * this rule doesn't modify those declarations.","         *","         * ## A variable is redeclared.","         *","         * The language spec disallows redeclarations of `let` declarations.","         * Those variables would cause syntax errors.","         *","         * ## A variable is used from outside the scope.","         *","         * The language spec disallows accesses from outside of the scope for","         * `let` declarations. Those variables would cause reference errors.","         *","         * ## A variable is used from a closure within a loop.","         *","         * A `var` declaration within a loop shares the same variable instance","         * across all loop iterations, while a `let` declaration creates a new","         * instance for each iteration. This means if a variable in a loop is","         * referenced by any closure, changing it from `var` to `let` would","         * change the behavior in a way that is generally unsafe.","         *","         * ## A variable might be used before it is assigned within a loop.","         *","         * Within a loop, a `let` declaration without an initializer will be","         * initialized to null, while a `var` declaration will retain its value","         * from the previous iteration, so it is only safe to change `var` to","         * `let` if we can statically determine that the variable is always","         * assigned a value before its first access in the loop body. To keep","         * the implementation simple, we only convert `var` to `let` within","         * loops when the variable is a loop assignee or the declaration has an","         * initializer.","         *","         * @param {ASTNode} node - A variable declaration node to check.","         * @returns {boolean} `true` if it can fix the node.","         */","        function canFix(node) {","            const variables = context.getDeclaredVariables(node);","            const scopeNode = getScopeNode(node);","","            if (node.parent.type === \"SwitchCase\" ||","                node.declarations.some(hasSelfReferenceInTDZ) ||","                variables.some(isRedeclared) ||","                variables.some(isUsedFromOutsideOf(scopeNode))","            ) {","                return false;","            }","","            if (astUtils.isInLoop(node)) {","                if (variables.some(isReferencedInClosure)) {","                    return false;","                }","                if (!isLoopAssignee(node) && !isDeclarationInitialized(node)) {","                    return false;","                }","            }","","            if (","                !isLoopAssignee(node) &&","                !(node.parent.type === \"ForStatement\" && node.parent.init === node) &&","                !astUtils.STATEMENT_LIST_PARENTS.has(node.parent.type)","            ) {","","                // If the declaration is not in a block, e.g. `if (foo) var bar = 1;`, then it can't be fixed.","                return false;","            }","","            return true;","        }","","        /**","         * Reports a given variable declaration node.","         *","         * @param {ASTNode} node - A variable declaration node to report.","         * @returns {void}","         */","        function report(node) {","            const varToken = sourceCode.getFirstToken(node);","","            context.report({","                node,","                message: \"Unexpected var, use let or const instead.\",","","                fix(fixer) {","                    if (canFix(node)) {","                        return fixer.replaceText(varToken, \"let\");","                    }","                    return null;","                }","            });","        }","","        return {","            \"VariableDeclaration:exit\"(node) {","                if (node.kind === \"var\") {","                    report(node);","                }","            }","        };","    }","};",""],"l":{"12":1,"26":1,"27":0,"28":0,"30":0,"40":1,"41":0,"43":0,"44":0,"54":1,"55":0,"65":1,"66":0,"69":1,"80":1,"81":0,"82":0,"83":0,"86":0,"90":1,"99":1,"100":0,"110":1,"119":1,"120":0,"121":0,"123":0,"126":0,"127":0,"144":1,"145":0,"146":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"155":0,"156":0,"157":0,"159":0,"172":1,"185":0,"193":1,"194":0,"195":0,"197":0,"199":0,"253":1,"254":0,"255":0,"257":0,"262":0,"265":0,"266":0,"267":0,"269":0,"270":0,"274":0,"281":0,"284":0,"293":1,"294":0,"296":0,"301":0,"302":0,"304":0,"309":0,"311":0,"312":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-void.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-void.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":20}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":27},"end":{"line":29,"column":34}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":37,"column":2}},"2":{"start":{"line":28,"column":8},"end":{"line":34,"column":10}},"3":{"start":{"line":30,"column":16},"end":{"line":32,"column":17}},"4":{"start":{"line":31,"column":20},"end":{"line":31,"column":102}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":16}},{"start":{"line":30,"column":16},"end":{"line":30,"column":16}}]}},"code":["/**"," * @fileoverview Rule to disallow use of void operator."," * @author Mike Sidorov"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `void` operators\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            UnaryExpression(node) {","                if (node.operator === \"void\") {","                    context.report({ node, message: \"Expected 'undefined' and instead saw 'void'.\" });","                }","            }","        };","","    }","};",""],"l":{"11":1,"28":0,"30":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-warning-comments.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-warning-comments.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":41,"loc":{"start":{"line":41,"column":10},"end":{"line":41,"column":20}}},"2":{"name":"convertToRegExp","line":56,"loc":{"start":{"line":56,"column":8},"end":{"line":56,"column":39}}},"3":{"name":"commentContainsWarningTerm","line":95,"loc":{"start":{"line":95,"column":8},"end":{"line":95,"column":53}}},"4":{"name":"checkComment","line":112,"loc":{"start":{"line":112,"column":8},"end":{"line":112,"column":36}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":135,"column":2}},"3":{"start":{"line":43,"column":8},"end":{"line":46,"column":56}},"4":{"start":{"line":56,"column":8},"end":{"line":86,"column":9}},"5":{"start":{"line":57,"column":12},"end":{"line":57,"column":74}},"6":{"start":{"line":58,"column":12},"end":{"line":58,"column":23}},"7":{"start":{"line":70,"column":12},"end":{"line":70,"column":57}},"8":{"start":{"line":72,"column":12},"end":{"line":83,"column":13}},"9":{"start":{"line":78,"column":16},"end":{"line":78,"column":33}},"10":{"start":{"line":79,"column":19},"end":{"line":83,"column":13}},"11":{"start":{"line":80,"column":16},"end":{"line":80,"column":31}},"12":{"start":{"line":82,"column":16},"end":{"line":82,"column":28}},"13":{"start":{"line":85,"column":12},"end":{"line":85,"column":62}},"14":{"start":{"line":88,"column":8},"end":{"line":88,"column":65}},"15":{"start":{"line":95,"column":8},"end":{"line":105,"column":9}},"16":{"start":{"line":96,"column":12},"end":{"line":96,"column":31}},"17":{"start":{"line":98,"column":12},"end":{"line":102,"column":15}},"18":{"start":{"line":99,"column":16},"end":{"line":101,"column":17}},"19":{"start":{"line":100,"column":20},"end":{"line":100,"column":54}},"20":{"start":{"line":104,"column":12},"end":{"line":104,"column":27}},"21":{"start":{"line":112,"column":8},"end":{"line":128,"column":9}},"22":{"start":{"line":113,"column":12},"end":{"line":115,"column":13}},"23":{"start":{"line":114,"column":16},"end":{"line":114,"column":23}},"24":{"start":{"line":117,"column":12},"end":{"line":117,"column":67}},"25":{"start":{"line":119,"column":12},"end":{"line":127,"column":15}},"26":{"start":{"line":120,"column":16},"end":{"line":126,"column":19}},"27":{"start":{"line":130,"column":8},"end":{"line":133,"column":10}}},"branchMap":{"1":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":30},"end":{"line":43,"column":48}},{"start":{"line":43,"column":52},"end":{"line":43,"column":54}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":27},"end":{"line":44,"column":46}},{"start":{"line":44,"column":50},"end":{"line":44,"column":74}}]},"3":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":23},"end":{"line":45,"column":45}},{"start":{"line":45,"column":49},"end":{"line":45,"column":56}}]},"4":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":46},"end":{"line":70,"column":51}},{"start":{"line":70,"column":54},"end":{"line":70,"column":56}}]},"5":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":72,"column":12}},{"start":{"line":72,"column":12},"end":{"line":72,"column":12}}]},"6":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":19},"end":{"line":79,"column":19}},{"start":{"line":79,"column":19},"end":{"line":79,"column":19}}]},"7":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":16}},{"start":{"line":99,"column":16},"end":{"line":99,"column":16}}]},"8":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":12},"end":{"line":113,"column":12}},{"start":{"line":113,"column":12},"end":{"line":113,"column":12}}]},"9":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":16},"end":{"line":113,"column":49}},{"start":{"line":113,"column":53},"end":{"line":113,"column":85}}]}},"code":["/**"," * @fileoverview Rule that warns about used warning comments"," * @author Alexander Schmidt <https://github.com/lxanders>"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow specified warning terms in comments\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    terms: {","                        type: \"array\",","                        items: {","                            type: \"string\"","                        }","                    },","                    location: {","                        enum: [\"start\", \"anywhere\"]","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const configuration = context.options[0] || {},","            warningTerms = configuration.terms || [\"todo\", \"fixme\", \"xxx\"],","            location = configuration.location || \"start\",","            selfConfigRegEx = /\\bno-warning-comments\\b/;","","        /**","         * Convert a warning term into a RegExp which will match a comment containing that whole word in the specified","         * location (\"start\" or \"anywhere\"). If the term starts or ends with non word characters, then the match will not","         * require word boundaries on that side.","         *","         * @param {string} term A term to convert to a RegExp","         * @returns {RegExp} The term converted to a RegExp","         */","        function convertToRegExp(term) {","            const escaped = term.replace(/[-/\\\\$^*+?.()|[\\]{}]/g, \"\\\\$&\");","            let prefix;","","            /*","             * If the term ends in a word character (a-z0-9_), ensure a word","             * boundary at the end, so that substrings do not get falsely","             * matched. eg \"todo\" in a string such as \"mastodon\".","             * If the term ends in a non-word character, then \\b won't match on","             * the boundary to the next non-word character, which would likely","             * be a space. For example `/\\bFIX!\\b/.test('FIX! blah') === false`.","             * In these cases, use no bounding match. Same applies for the","             * prefix, handled below.","             */","            const suffix = /\\w$/.test(term) ? \"\\\\b\" : \"\";","","            if (location === \"start\") {","","                /*","                 * When matching at the start, ignore leading whitespace, and","                 * there's no need to worry about word boundaries.","                 */","                prefix = \"^\\\\s*\";","            } else if (/^\\w/.test(term)) {","                prefix = \"\\\\b\";","            } else {","                prefix = \"\";","            }","","            return new RegExp(prefix + escaped + suffix, \"i\");","        }","","        const warningRegExps = warningTerms.map(convertToRegExp);","","        /**","         * Checks the specified comment for matches of the configured warning terms and returns the matches.","         * @param {string} comment The comment which is checked.","         * @returns {Array} All matched warning terms for this comment.","         */","        function commentContainsWarningTerm(comment) {","            const matches = [];","","            warningRegExps.forEach((regex, index) => {","                if (regex.test(comment)) {","                    matches.push(warningTerms[index]);","                }","            });","","            return matches;","        }","","        /**","         * Checks the specified node for matching warning comments and reports them.","         * @param {ASTNode} node The AST node being checked.","         * @returns {void} undefined.","         */","        function checkComment(node) {","            if (astUtils.isDirectiveComment(node) && selfConfigRegEx.test(node.value)) {","                return;","            }","","            const matches = commentContainsWarningTerm(node.value);","","            matches.forEach(matchedTerm => {","                context.report({","                    node,","                    message: \"Unexpected '{{matchedTerm}}' comment.\",","                    data: {","                        matchedTerm","                    }","                });","            });","        }","","        return {","            BlockComment: checkComment,","            LineComment: checkComment","        };","    }","};",""],"l":{"8":1,"14":1,"43":0,"56":1,"57":0,"58":0,"70":0,"72":0,"78":0,"79":0,"80":0,"82":0,"85":0,"88":0,"95":1,"96":0,"98":0,"99":0,"100":0,"104":0,"112":1,"113":0,"114":0,"117":0,"119":0,"120":0,"130":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-whitespace-before-property.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-whitespace-before-property.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":20}}},"2":{"name":"reportError","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":58}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":19},"end":{"line":53,"column":27}}},"4":{"name":"(anonymous_4)","line":70,"loc":{"start":{"line":70,"column":28},"end":{"line":70,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":92,"column":2}},"3":{"start":{"line":30,"column":8},"end":{"line":30,"column":51}},"4":{"start":{"line":44,"column":8},"end":{"line":63,"column":9}},"5":{"start":{"line":45,"column":12},"end":{"line":45,"column":61}},"6":{"start":{"line":47,"column":12},"end":{"line":62,"column":15}},"7":{"start":{"line":54,"column":20},"end":{"line":59,"column":21}},"8":{"start":{"line":58,"column":24},"end":{"line":58,"column":36}},"9":{"start":{"line":60,"column":20},"end":{"line":60,"column":110}},"10":{"start":{"line":69,"column":8},"end":{"line":90,"column":10}},"11":{"start":{"line":71,"column":16},"end":{"line":71,"column":31}},"12":{"start":{"line":72,"column":16},"end":{"line":72,"column":30}},"13":{"start":{"line":74,"column":16},"end":{"line":76,"column":17}},"14":{"start":{"line":75,"column":20},"end":{"line":75,"column":27}},"15":{"start":{"line":78,"column":16},"end":{"line":84,"column":17}},"16":{"start":{"line":79,"column":20},"end":{"line":79,"column":106}},"17":{"start":{"line":80,"column":20},"end":{"line":80,"column":70}},"18":{"start":{"line":82,"column":20},"end":{"line":82,"column":73}},"19":{"start":{"line":83,"column":20},"end":{"line":83,"column":73}},"20":{"start":{"line":86,"column":16},"end":{"line":88,"column":17}},"21":{"start":{"line":87,"column":20},"end":{"line":87,"column":61}}},"branchMap":{"1":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":52},"end":{"line":45,"column":54}},{"start":{"line":45,"column":57},"end":{"line":45,"column":60}}]},"2":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":20},"end":{"line":54,"column":20}},{"start":{"line":54,"column":20},"end":{"line":54,"column":20}}]},"3":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":24},"end":{"line":54,"column":38}},{"start":{"line":54,"column":42},"end":{"line":54,"column":80}}]},"4":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":16},"end":{"line":74,"column":16}},{"start":{"line":74,"column":16},"end":{"line":74,"column":16}}]},"5":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":16},"end":{"line":78,"column":16}},{"start":{"line":78,"column":16},"end":{"line":78,"column":16}}]},"6":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":16},"end":{"line":86,"column":16}},{"start":{"line":86,"column":16},"end":{"line":86,"column":16}}]}},"code":["/**"," * @fileoverview Rule to disallow whitespace before properties"," * @author Kai Cataldo"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow whitespace before properties\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Reports whitespace before property token","         * @param {ASTNode} node - the node to report in the event of an error","         * @param {Token} leftToken - the left token","         * @param {Token} rightToken - the right token","         * @returns {void}","         * @private","         */","        function reportError(node, leftToken, rightToken) {","            const replacementText = node.computed ? \"\" : \".\";","","            context.report({","                node,","                message: \"Unexpected whitespace before property {{propName}}.\",","                data: {","                    propName: sourceCode.getText(node.property)","                },","                fix(fixer) {","                    if (!node.computed && astUtils.isDecimalInteger(node.object)) {","","                        // If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.","                        // Don't fix this case.","                        return null;","                    }","                    return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);","                }","            });","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            MemberExpression(node) {","                let rightToken;","                let leftToken;","","                if (!astUtils.isTokenOnSameLine(node.object, node.property)) {","                    return;","                }","","                if (node.computed) {","                    rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);","                    leftToken = sourceCode.getTokenBefore(rightToken);","                } else {","                    rightToken = sourceCode.getFirstToken(node.property);","                    leftToken = sourceCode.getTokenBefore(rightToken, 1);","                }","","                if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {","                    reportError(node, leftToken, rightToken);","                }","            }","        };","    }","};",""],"l":{"11":1,"17":1,"30":0,"44":1,"45":0,"47":0,"54":0,"58":0,"60":0,"69":0,"71":0,"72":0,"74":0,"75":0,"78":0,"79":0,"80":0,"82":0,"83":0,"86":0,"87":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-with.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/no-with.js","s":{"1":1,"2":0,"3":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":25},"end":{"line":26,"column":32}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":32,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":29,"column":10}},"3":{"start":{"line":27,"column":16},"end":{"line":27,"column":89}}},"branchMap":{},"code":["/**"," * @fileoverview Rule to flag use of with statement"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `with` statements\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        return {","            WithStatement(node) {","                context.report({ node, message: \"Unexpected use of 'with' statement.\" });","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"27":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/nonblock-statement-body-position.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/nonblock-statement-body-position.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":41,"loc":{"start":{"line":41,"column":10},"end":{"line":41,"column":20}}},"2":{"name":"getOption","line":53,"loc":{"start":{"line":53,"column":8},"end":{"line":53,"column":40}}},"3":{"name":"validateStatement","line":65,"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":54}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":23},"end":{"line":84,"column":31}}},"5":{"name":"(anonymous_5)","line":99,"loc":{"start":{"line":99,"column":23},"end":{"line":99,"column":30}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":61}},"2":{"start":{"line":13,"column":0},"end":{"line":114,"column":2}},"3":{"start":{"line":42,"column":8},"end":{"line":42,"column":51}},"4":{"start":{"line":53,"column":8},"end":{"line":57,"column":9}},"5":{"start":{"line":54,"column":12},"end":{"line":56,"column":25}},"6":{"start":{"line":65,"column":8},"end":{"line":92,"column":9}},"7":{"start":{"line":66,"column":12},"end":{"line":66,"column":50}},"8":{"start":{"line":68,"column":12},"end":{"line":70,"column":13}},"9":{"start":{"line":69,"column":16},"end":{"line":69,"column":23}},"10":{"start":{"line":72,"column":12},"end":{"line":72,"column":64}},"11":{"start":{"line":74,"column":12},"end":{"line":91,"column":13}},"12":{"start":{"line":75,"column":16},"end":{"line":79,"column":19}},"13":{"start":{"line":78,"column":34},"end":{"line":78,"column":68}},"14":{"start":{"line":80,"column":19},"end":{"line":91,"column":13}},"15":{"start":{"line":81,"column":16},"end":{"line":90,"column":19}},"16":{"start":{"line":85,"column":24},"end":{"line":87,"column":25}},"17":{"start":{"line":86,"column":28},"end":{"line":86,"column":40}},"18":{"start":{"line":88,"column":24},"end":{"line":88,"column":98}},"19":{"start":{"line":98,"column":8},"end":{"line":112,"column":10}},"20":{"start":{"line":100,"column":16},"end":{"line":100,"column":57}},"21":{"start":{"line":103,"column":16},"end":{"line":105,"column":17}},"22":{"start":{"line":104,"column":20},"end":{"line":104,"column":62}},"23":{"start":{"line":107,"column":36},"end":{"line":107,"column":73}},"24":{"start":{"line":108,"column":38},"end":{"line":108,"column":72}},"25":{"start":{"line":109,"column":34},"end":{"line":109,"column":69}},"26":{"start":{"line":110,"column":36},"end":{"line":110,"column":71}},"27":{"start":{"line":111,"column":36},"end":{"line":111,"column":71}}},"branchMap":{"1":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":19},"end":{"line":54,"column":37}},{"start":{"line":54,"column":41},"end":{"line":54,"column":69}},{"start":{"line":54,"column":73},"end":{"line":54,"column":114}},{"start":{"line":55,"column":16},"end":{"line":55,"column":34}},{"start":{"line":56,"column":16},"end":{"line":56,"column":24}}]},"2":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":12}},{"start":{"line":68,"column":12},"end":{"line":68,"column":12}}]},"3":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":16},"end":{"line":68,"column":46}},{"start":{"line":68,"column":50},"end":{"line":68,"column":66}}]},"4":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":12},"end":{"line":74,"column":12}},{"start":{"line":74,"column":12},"end":{"line":74,"column":12}}]},"5":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":16},"end":{"line":74,"column":64}},{"start":{"line":74,"column":68},"end":{"line":74,"column":86}}]},"6":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":19},"end":{"line":80,"column":19}},{"start":{"line":80,"column":19},"end":{"line":80,"column":19}}]},"7":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":23},"end":{"line":80,"column":71}},{"start":{"line":80,"column":75},"end":{"line":80,"column":94}}]},"8":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":24},"end":{"line":85,"column":24}},{"start":{"line":85,"column":24},"end":{"line":85,"column":24}}]},"9":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":16},"end":{"line":103,"column":16}},{"start":{"line":103,"column":16},"end":{"line":103,"column":16}}]},"10":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":20},"end":{"line":103,"column":34}},{"start":{"line":103,"column":38},"end":{"line":103,"column":75}}]}},"code":["/**"," * @fileoverview enforce the location of single-line statements"," * @author Teddy Katz"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","const POSITION_SCHEMA = { enum: [\"beside\", \"below\", \"any\"] };","","module.exports = {","    meta: {","        docs: {","            description: \"enforce the location of single-line statements\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        fixable: \"whitespace\",","        schema: [","            POSITION_SCHEMA,","            {","                properties: {","                    overrides: {","                        properties: {","                            if: POSITION_SCHEMA,","                            else: POSITION_SCHEMA,","                            while: POSITION_SCHEMA,","                            do: POSITION_SCHEMA,","                            for: POSITION_SCHEMA","                        },","                        additionalProperties: false","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        //----------------------------------------------------------------------","        // Helpers","        //----------------------------------------------------------------------","","        /**","         * Gets the applicable preference for a particular keyword","         * @param {string} keywordName The name of a keyword, e.g. 'if'","         * @returns {string} The applicable option for the keyword, e.g. 'beside'","         */","        function getOption(keywordName) {","            return context.options[1] && context.options[1].overrides && context.options[1].overrides[keywordName] ||","                context.options[0] ||","                \"beside\";","        }","","        /**","         * Validates the location of a single-line statement","         * @param {ASTNode} node The single-line statement","         * @param {string} keywordName The applicable keyword name for the single-line statement","         * @returns {void}","         */","        function validateStatement(node, keywordName) {","            const option = getOption(keywordName);","","            if (node.type === \"BlockStatement\" || option === \"any\") {","                return;","            }","","            const tokenBefore = sourceCode.getTokenBefore(node);","","            if (tokenBefore.loc.end.line === node.loc.start.line && option === \"below\") {","                context.report({","                    node,","                    message: \"Expected a linebreak before this statement.\",","                    fix: fixer => fixer.insertTextBefore(node, \"\\n\")","                });","            } else if (tokenBefore.loc.end.line !== node.loc.start.line && option === \"beside\") {","                context.report({","                    node,","                    message: \"Expected no linebreak before this statement.\",","                    fix(fixer) {","                        if (sourceCode.getText().slice(tokenBefore.range[1], node.range[0]).trim()) {","                            return null;","                        }","                        return fixer.replaceTextRange([tokenBefore.range[1], node.range[0]], \" \");","                    }","                });","            }","        }","","        //----------------------------------------------------------------------","        // Public","        //----------------------------------------------------------------------","","        return {","            IfStatement(node) {","                validateStatement(node.consequent, \"if\");","","                // Check the `else` node, but don't check 'else if' statements.","                if (node.alternate && node.alternate.type !== \"IfStatement\") {","                    validateStatement(node.alternate, \"else\");","                }","            },","            WhileStatement: node => validateStatement(node.body, \"while\"),","            DoWhileStatement: node => validateStatement(node.body, \"do\"),","            ForStatement: node => validateStatement(node.body, \"for\"),","            ForInStatement: node => validateStatement(node.body, \"for\"),","            ForOfStatement: node => validateStatement(node.body, \"for\")","        };","    }","};",""],"l":{"11":1,"13":1,"42":0,"53":1,"54":0,"65":1,"66":0,"68":0,"69":0,"72":0,"74":0,"75":0,"78":0,"80":0,"81":0,"85":0,"86":0,"88":0,"98":0,"100":0,"103":0,"104":0,"107":0,"108":0,"109":0,"110":0,"111":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/object-curly-newline.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/object-curly-newline.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"normalizeOptionValue","line":47,"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":37}}},"2":{"name":"normalizeOptions","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":35}}},"3":{"name":"(anonymous_3)","line":116,"loc":{"start":{"line":116,"column":10},"end":{"line":116,"column":20}}},"4":{"name":"check","line":127,"loc":{"start":{"line":127,"column":8},"end":{"line":127,"column":29}}},"5":{"name":"(anonymous_5)","line":159,"loc":{"start":{"line":159,"column":27},"end":{"line":159,"column":35}}},"6":{"name":"(anonymous_6)","line":169,"loc":{"start":{"line":169,"column":27},"end":{"line":169,"column":35}}},"7":{"name":"(anonymous_7)","line":180,"loc":{"start":{"line":180,"column":27},"end":{"line":180,"column":35}}},"8":{"name":"(anonymous_8)","line":193,"loc":{"start":{"line":193,"column":27},"end":{"line":193,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":19,"column":0},"end":{"line":39,"column":2}},"3":{"start":{"line":47,"column":0},"end":{"line":65,"column":1}},"4":{"start":{"line":48,"column":4},"end":{"line":48,"column":26}},"5":{"start":{"line":49,"column":4},"end":{"line":49,"column":49}},"6":{"start":{"line":51,"column":4},"end":{"line":62,"column":5}},"7":{"start":{"line":52,"column":8},"end":{"line":59,"column":9}},"8":{"start":{"line":53,"column":12},"end":{"line":53,"column":30}},"9":{"start":{"line":54,"column":15},"end":{"line":59,"column":9}},"10":{"start":{"line":55,"column":12},"end":{"line":55,"column":53}},"11":{"start":{"line":57,"column":12},"end":{"line":57,"column":49}},"12":{"start":{"line":58,"column":12},"end":{"line":58,"column":76}},"13":{"start":{"line":61,"column":8},"end":{"line":61,"column":25}},"14":{"start":{"line":64,"column":4},"end":{"line":64,"column":40}},"15":{"start":{"line":73,"column":0},"end":{"line":84,"column":1}},"16":{"start":{"line":74,"column":4},"end":{"line":79,"column":5}},"17":{"start":{"line":75,"column":8},"end":{"line":78,"column":10}},"18":{"start":{"line":81,"column":4},"end":{"line":81,"column":48}},"19":{"start":{"line":83,"column":4},"end":{"line":83,"column":61}},"20":{"start":{"line":90,"column":0},"end":{"line":209,"column":2}},"21":{"start":{"line":117,"column":8},"end":{"line":117,"column":51}},"22":{"start":{"line":118,"column":8},"end":{"line":118,"column":71}},"23":{"start":{"line":127,"column":8},"end":{"line":202,"column":9}},"24":{"start":{"line":128,"column":12},"end":{"line":128,"column":57}},"25":{"start":{"line":129,"column":12},"end":{"line":129,"column":61}},"26":{"start":{"line":130,"column":12},"end":{"line":130,"column":61}},"27":{"start":{"line":131,"column":12},"end":{"line":131,"column":87}},"28":{"start":{"line":132,"column":12},"end":{"line":132,"column":88}},"29":{"start":{"line":133,"column":12},"end":{"line":140,"column":14}},"30":{"start":{"line":150,"column":12},"end":{"line":150,"column":56}},"31":{"start":{"line":151,"column":12},"end":{"line":151,"column":57}},"32":{"start":{"line":153,"column":12},"end":{"line":201,"column":13}},"33":{"start":{"line":154,"column":16},"end":{"line":163,"column":17}},"34":{"start":{"line":155,"column":20},"end":{"line":162,"column":23}},"35":{"start":{"line":160,"column":28},"end":{"line":160,"column":74}},"36":{"start":{"line":164,"column":16},"end":{"line":173,"column":17}},"37":{"start":{"line":165,"column":20},"end":{"line":172,"column":23}},"38":{"start":{"line":170,"column":28},"end":{"line":170,"column":76}},"39":{"start":{"line":175,"column":16},"end":{"line":187,"column":17}},"40":{"start":{"line":176,"column":20},"end":{"line":186,"column":23}},"41":{"start":{"line":181,"column":28},"end":{"line":184,"column":31}},"42":{"start":{"line":188,"column":16},"end":{"line":200,"column":17}},"43":{"start":{"line":189,"column":20},"end":{"line":199,"column":23}},"44":{"start":{"line":194,"column":28},"end":{"line":197,"column":31}},"45":{"start":{"line":204,"column":8},"end":{"line":207,"column":10}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":15},"end":{"line":54,"column":15}},{"start":{"line":54,"column":15},"end":{"line":54,"column":15}}]},"4":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":28},"end":{"line":58,"column":47}},{"start":{"line":58,"column":51},"end":{"line":58,"column":75}}]},"5":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":74,"column":4}},{"start":{"line":74,"column":4},"end":{"line":74,"column":4}}]},"6":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":15}},{"start":{"line":74,"column":20},"end":{"line":74,"column":44}},{"start":{"line":74,"column":48},"end":{"line":74,"column":69}}]},"7":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":63}},{"start":{"line":136,"column":20},"end":{"line":136,"column":37}},{"start":{"line":137,"column":20},"end":{"line":137,"column":46}},{"start":{"line":138,"column":20},"end":{"line":138,"column":62}}]},"8":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":12},"end":{"line":153,"column":12}},{"start":{"line":153,"column":12},"end":{"line":153,"column":12}}]},"9":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":16},"end":{"line":154,"column":16}},{"start":{"line":154,"column":16},"end":{"line":154,"column":16}}]},"10":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":16},"end":{"line":164,"column":16}},{"start":{"line":164,"column":16},"end":{"line":164,"column":16}}]},"11":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":16},"end":{"line":175,"column":16}},{"start":{"line":175,"column":16},"end":{"line":175,"column":16}}]},"12":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":16},"end":{"line":188,"column":16}},{"start":{"line":188,"column":16},"end":{"line":188,"column":16}}]}},"code":["/**"," * @fileoverview Rule to require or disallow line breaks inside braces."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","// Schema objects.","const OPTION_VALUE = {","    oneOf: [","        {","            enum: [\"always\", \"never\"]","        },","        {","            type: \"object\",","            properties: {","                multiline: {","                    type: \"boolean\"","                },","                minProperties: {","                    type: \"integer\",","                    minimum: 0","                }","            },","            additionalProperties: false,","            minProperties: 1","        }","    ]","};","","/**"," * Normalizes a given option value."," *"," * @param {string|Object|undefined} value - An option value to parse."," * @returns {{multiline: boolean, minProperties: number}} Normalized option object."," */","function normalizeOptionValue(value) {","    let multiline = false;","    let minProperties = Number.POSITIVE_INFINITY;","","    if (value) {","        if (value === \"always\") {","            minProperties = 0;","        } else if (value === \"never\") {","            minProperties = Number.POSITIVE_INFINITY;","        } else {","            multiline = Boolean(value.multiline);","            minProperties = value.minProperties || Number.POSITIVE_INFINITY;","        }","    } else {","        multiline = true;","    }","","    return { multiline, minProperties };","}","","/**"," * Normalizes a given option value."," *"," * @param {string|Object|undefined} options - An option value to parse."," * @returns {{ObjectExpression: {multiline: boolean, minProperties: number}, ObjectPattern: {multiline: boolean, minProperties: number}}} Normalized option object."," */","function normalizeOptions(options) {","    if (options && (options.ObjectExpression || options.ObjectPattern)) {","        return {","            ObjectExpression: normalizeOptionValue(options.ObjectExpression),","            ObjectPattern: normalizeOptionValue(options.ObjectPattern)","        };","    }","","    const value = normalizeOptionValue(options);","","    return { ObjectExpression: value, ObjectPattern: value };","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent line breaks inside braces\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        fixable: \"whitespace\",","        schema: [","            {","                oneOf: [","                    OPTION_VALUE,","                    {","                        type: \"object\",","                        properties: {","                            ObjectExpression: OPTION_VALUE,","                            ObjectPattern: OPTION_VALUE","                        },","                        additionalProperties: false,","                        minProperties: 1","                    }","                ]","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        const normalizedOptions = normalizeOptions(context.options[0]);","","        /**","         * Reports a given node if it violated this rule.","         *","         * @param {ASTNode} node - A node to check. This is an ObjectExpression node or an ObjectPattern node.","         * @param {{multiline: boolean, minProperties: number}} options - An option object.","         * @returns {void}","         */","        function check(node) {","            const options = normalizedOptions[node.type];","            const openBrace = sourceCode.getFirstToken(node);","            const closeBrace = sourceCode.getLastToken(node);","            let first = sourceCode.getTokenAfter(openBrace, { includeComments: true });","            let last = sourceCode.getTokenBefore(closeBrace, { includeComments: true });","            const needsLinebreaks = (","                node.properties.length >= options.minProperties ||","                (","                    options.multiline &&","                    node.properties.length > 0 &&","                    first.loc.start.line !== last.loc.end.line","                )","            );","","            /*","             * Use tokens or comments to check multiline or not.","             * But use only tokens to check whether line breaks are needed.","             * This allows:","             *     var obj = { // eslint-disable-line foo","             *         a: 1","             *     }","             */","            first = sourceCode.getTokenAfter(openBrace);","            last = sourceCode.getTokenBefore(closeBrace);","","            if (needsLinebreaks) {","                if (astUtils.isTokenOnSameLine(openBrace, first)) {","                    context.report({","                        message: \"Expected a line break after this opening brace.\",","                        node,","                        loc: openBrace.loc.start,","                        fix(fixer) {","                            return fixer.insertTextAfter(openBrace, \"\\n\");","                        }","                    });","                }","                if (astUtils.isTokenOnSameLine(last, closeBrace)) {","                    context.report({","                        message: \"Expected a line break before this closing brace.\",","                        node,","                        loc: closeBrace.loc.start,","                        fix(fixer) {","                            return fixer.insertTextBefore(closeBrace, \"\\n\");","                        }","                    });","                }","            } else {","                if (!astUtils.isTokenOnSameLine(openBrace, first)) {","                    context.report({","                        message: \"Unexpected line break after this opening brace.\",","                        node,","                        loc: openBrace.loc.start,","                        fix(fixer) {","                            return fixer.removeRange([","                                openBrace.range[1],","                                first.range[0]","                            ]);","                        }","                    });","                }","                if (!astUtils.isTokenOnSameLine(last, closeBrace)) {","                    context.report({","                        message: \"Unexpected line break before this closing brace.\",","                        node,","                        loc: closeBrace.loc.start,","                        fix(fixer) {","                            return fixer.removeRange([","                                last.range[1],","                                closeBrace.range[0]","                            ]);","                        }","                    });","                }","            }","        }","","        return {","            ObjectExpression: check,","            ObjectPattern: check","        };","    }","};",""],"l":{"12":1,"19":1,"47":1,"48":0,"49":0,"51":0,"52":0,"53":0,"54":0,"55":0,"57":0,"58":0,"61":0,"64":0,"73":1,"74":0,"75":0,"81":0,"83":0,"90":1,"117":0,"118":0,"127":1,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"150":0,"151":0,"153":0,"154":0,"155":0,"160":0,"164":0,"165":0,"170":0,"175":0,"176":0,"181":0,"188":0,"189":0,"194":0,"204":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/object-curly-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/object-curly-spacing.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":1,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"(anonymous_1)","line":42,"loc":{"start":{"line":42,"column":10},"end":{"line":42,"column":20}}},"2":{"name":"isOptionSet","line":53,"loc":{"start":{"line":53,"column":8},"end":{"line":53,"column":37}}},"3":{"name":"reportNoBeginningSpace","line":73,"loc":{"start":{"line":73,"column":8},"end":{"line":73,"column":53}}},"4":{"name":"(anonymous_4)","line":81,"loc":{"start":{"line":81,"column":19},"end":{"line":81,"column":27}}},"5":{"name":"reportNoEndingSpace","line":95,"loc":{"start":{"line":95,"column":8},"end":{"line":95,"column":50}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":19},"end":{"line":103,"column":27}}},"7":{"name":"reportRequiredBeginningSpace","line":117,"loc":{"start":{"line":117,"column":8},"end":{"line":117,"column":59}}},"8":{"name":"(anonymous_8)","line":125,"loc":{"start":{"line":125,"column":19},"end":{"line":125,"column":27}}},"9":{"name":"reportRequiredEndingSpace","line":137,"loc":{"start":{"line":137,"column":8},"end":{"line":137,"column":56}}},"10":{"name":"(anonymous_10)","line":145,"loc":{"start":{"line":145,"column":19},"end":{"line":145,"column":27}}},"11":{"name":"validateBraceSpacing","line":160,"loc":{"start":{"line":160,"column":8},"end":{"line":160,"column":78}}},"12":{"name":"getClosingBraceOfObject","line":207,"loc":{"start":{"line":207,"column":8},"end":{"line":207,"column":47}}},"13":{"name":"checkForObject","line":218,"loc":{"start":{"line":218,"column":8},"end":{"line":218,"column":38}}},"14":{"name":"checkForImport","line":236,"loc":{"start":{"line":236,"column":8},"end":{"line":236,"column":38}}},"15":{"name":"checkForExport","line":264,"loc":{"start":{"line":264,"column":8},"end":{"line":264,"column":38}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":299,"column":2}},"3":{"start":{"line":43,"column":8},"end":{"line":44,"column":49}},"4":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"5":{"start":{"line":54,"column":12},"end":{"line":54,"column":87}},"6":{"start":{"line":57,"column":8},"end":{"line":61,"column":10}},"7":{"start":{"line":73,"column":8},"end":{"line":87,"column":9}},"8":{"start":{"line":74,"column":12},"end":{"line":86,"column":15}},"9":{"start":{"line":82,"column":20},"end":{"line":82,"column":83}},"10":{"start":{"line":84,"column":20},"end":{"line":84,"column":83}},"11":{"start":{"line":95,"column":8},"end":{"line":109,"column":9}},"12":{"start":{"line":96,"column":12},"end":{"line":108,"column":15}},"13":{"start":{"line":104,"column":20},"end":{"line":104,"column":88}},"14":{"start":{"line":106,"column":20},"end":{"line":106,"column":87}},"15":{"start":{"line":117,"column":8},"end":{"line":129,"column":9}},"16":{"start":{"line":118,"column":12},"end":{"line":128,"column":15}},"17":{"start":{"line":126,"column":20},"end":{"line":126,"column":61}},"18":{"start":{"line":137,"column":8},"end":{"line":149,"column":9}},"19":{"start":{"line":138,"column":12},"end":{"line":148,"column":15}},"20":{"start":{"line":146,"column":20},"end":{"line":146,"column":62}},"21":{"start":{"line":160,"column":8},"end":{"line":193,"column":9}},"22":{"start":{"line":161,"column":12},"end":{"line":170,"column":13}},"23":{"start":{"line":162,"column":16},"end":{"line":162,"column":83}},"24":{"start":{"line":164,"column":16},"end":{"line":166,"column":17}},"25":{"start":{"line":165,"column":20},"end":{"line":165,"column":62}},"26":{"start":{"line":167,"column":16},"end":{"line":169,"column":17}},"27":{"start":{"line":168,"column":20},"end":{"line":168,"column":56}},"28":{"start":{"line":172,"column":12},"end":{"line":192,"column":13}},"29":{"start":{"line":173,"column":16},"end":{"line":176,"column":18}},"30":{"start":{"line":177,"column":16},"end":{"line":177,"column":121}},"31":{"start":{"line":179,"column":16},"end":{"line":182,"column":53}},"32":{"start":{"line":184,"column":16},"end":{"line":184,"column":86}},"33":{"start":{"line":186,"column":16},"end":{"line":188,"column":17}},"34":{"start":{"line":187,"column":20},"end":{"line":187,"column":58}},"35":{"start":{"line":189,"column":16},"end":{"line":191,"column":17}},"36":{"start":{"line":190,"column":20},"end":{"line":190,"column":52}},"37":{"start":{"line":207,"column":8},"end":{"line":211,"column":9}},"38":{"start":{"line":208,"column":12},"end":{"line":208,"column":77}},"39":{"start":{"line":210,"column":12},"end":{"line":210,"column":88}},"40":{"start":{"line":218,"column":8},"end":{"line":229,"column":9}},"41":{"start":{"line":219,"column":12},"end":{"line":221,"column":13}},"42":{"start":{"line":220,"column":16},"end":{"line":220,"column":23}},"43":{"start":{"line":223,"column":12},"end":{"line":226,"column":62}},"44":{"start":{"line":228,"column":12},"end":{"line":228,"column":73}},"45":{"start":{"line":236,"column":8},"end":{"line":257,"column":9}},"46":{"start":{"line":237,"column":12},"end":{"line":239,"column":13}},"47":{"start":{"line":238,"column":16},"end":{"line":238,"column":23}},"48":{"start":{"line":241,"column":12},"end":{"line":241,"column":52}},"49":{"start":{"line":242,"column":12},"end":{"line":242,"column":78}},"50":{"start":{"line":244,"column":12},"end":{"line":246,"column":13}},"51":{"start":{"line":245,"column":16},"end":{"line":245,"column":23}},"52":{"start":{"line":247,"column":12},"end":{"line":249,"column":13}},"53":{"start":{"line":248,"column":16},"end":{"line":248,"column":52}},"54":{"start":{"line":251,"column":12},"end":{"line":254,"column":62}},"55":{"start":{"line":256,"column":12},"end":{"line":256,"column":73}},"56":{"start":{"line":264,"column":8},"end":{"line":277,"column":9}},"57":{"start":{"line":265,"column":12},"end":{"line":267,"column":13}},"58":{"start":{"line":266,"column":16},"end":{"line":266,"column":23}},"59":{"start":{"line":269,"column":12},"end":{"line":274,"column":62}},"60":{"start":{"line":276,"column":12},"end":{"line":276,"column":73}},"61":{"start":{"line":283,"column":8},"end":{"line":296,"column":10}}},"branchMap":{"1":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":40},"end":{"line":54,"column":78}},{"start":{"line":54,"column":81},"end":{"line":54,"column":86}}]},"2":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":12},"end":{"line":161,"column":12}},{"start":{"line":161,"column":12},"end":{"line":161,"column":12}}]},"3":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":16},"end":{"line":164,"column":16}},{"start":{"line":164,"column":16},"end":{"line":164,"column":16}}]},"4":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":20},"end":{"line":164,"column":34}},{"start":{"line":164,"column":38},"end":{"line":164,"column":50}}]},"5":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":16},"end":{"line":167,"column":16}},{"start":{"line":167,"column":16},"end":{"line":167,"column":16}}]},"6":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":20},"end":{"line":167,"column":35}},{"start":{"line":167,"column":39},"end":{"line":167,"column":50}}]},"7":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":12},"end":{"line":172,"column":12}},{"start":{"line":172,"column":12},"end":{"line":172,"column":12}}]},"8":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":20},"end":{"line":174,"column":52}},{"start":{"line":174,"column":56},"end":{"line":174,"column":99}},{"start":{"line":175,"column":20},"end":{"line":175,"column":53}},{"start":{"line":175,"column":57},"end":{"line":175,"column":98}}]},"9":{"line":177,"type":"binary-expr","locations":[{"start":{"line":177,"column":40},"end":{"line":177,"column":62}},{"start":{"line":177,"column":66},"end":{"line":177,"column":120}}]},"10":{"line":179,"type":"cond-expr","locations":[{"start":{"line":182,"column":20},"end":{"line":182,"column":35}},{"start":{"line":182,"column":38},"end":{"line":182,"column":52}}]},"11":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":20},"end":{"line":180,"column":52}},{"start":{"line":180,"column":56},"end":{"line":180,"column":93}},{"start":{"line":181,"column":20},"end":{"line":181,"column":53}},{"start":{"line":181,"column":58},"end":{"line":181,"column":96}},{"start":{"line":181,"column":100},"end":{"line":181,"column":135}}]},"12":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":16},"end":{"line":186,"column":16}},{"start":{"line":186,"column":16},"end":{"line":186,"column":16}}]},"13":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":20},"end":{"line":186,"column":49}},{"start":{"line":186,"column":53},"end":{"line":186,"column":64}}]},"14":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":16},"end":{"line":189,"column":16}},{"start":{"line":189,"column":16},"end":{"line":189,"column":16}}]},"15":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":20},"end":{"line":189,"column":50}},{"start":{"line":189,"column":54},"end":{"line":189,"column":64}}]},"16":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":12},"end":{"line":219,"column":12}},{"start":{"line":219,"column":12},"end":{"line":219,"column":12}}]},"17":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":12},"end":{"line":237,"column":12}},{"start":{"line":237,"column":12},"end":{"line":237,"column":12}}]},"18":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":12},"end":{"line":244,"column":12}},{"start":{"line":244,"column":12},"end":{"line":244,"column":12}}]},"19":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":12},"end":{"line":247,"column":12}},{"start":{"line":247,"column":12},"end":{"line":247,"column":12}}]},"20":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":12},"end":{"line":265,"column":12}},{"start":{"line":265,"column":12},"end":{"line":265,"column":12}}]}},"code":["/**"," * @fileoverview Disallows or enforces spaces inside of object literals."," * @author Jamund Ferguson"," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing inside braces\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                enum: [\"always\", \"never\"]","            },","            {","                type: \"object\",","                properties: {","                    arraysInObjects: {","                        type: \"boolean\"","                    },","                    objectsInObjects: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const spaced = context.options[0] === \"always\",","            sourceCode = context.getSourceCode();","","        /**","         * Determines whether an option is set, relative to the spacing option.","         * If spaced is \"always\", then check whether option is set to false.","         * If spaced is \"never\", then check whether option is set to true.","         * @param {Object} option - The option to exclude.","         * @returns {boolean} Whether or not the property is excluded.","         */","        function isOptionSet(option) {","            return context.options[1] ? context.options[1][option] === !spaced : false;","        }","","        const options = {","            spaced,","            arraysInObjectsException: isOptionSet(\"arraysInObjects\"),","            objectsInObjectsException: isOptionSet(\"objectsInObjects\")","        };","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","        * Reports that there shouldn't be a space after the first token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportNoBeginningSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"There should be no space after '{{token}}'.\",","                data: {","                    token: token.value","                },","                fix(fixer) {","                    const nextToken = context.getSourceCode().getTokenAfter(token);","","                    return fixer.removeRange([token.range[1], nextToken.range[0]]);","                }","            });","        }","","        /**","        * Reports that there shouldn't be a space before the last token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportNoEndingSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"There should be no space before '{{token}}'.\",","                data: {","                    token: token.value","                },","                fix(fixer) {","                    const previousToken = context.getSourceCode().getTokenBefore(token);","","                    return fixer.removeRange([previousToken.range[1], token.range[0]]);","                }","            });","        }","","        /**","        * Reports that there should be a space after the first token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportRequiredBeginningSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"A space is required after '{{token}}'.\",","                data: {","                    token: token.value","                },","                fix(fixer) {","                    return fixer.insertTextAfter(token, \" \");","                }","            });","        }","","        /**","        * Reports that there should be a space before the last token","        * @param {ASTNode} node - The node to report in the event of an error.","        * @param {Token} token - The token to use for the report.","        * @returns {void}","        */","        function reportRequiredEndingSpace(node, token) {","            context.report({","                node,","                loc: token.loc.start,","                message: \"A space is required before '{{token}}'.\",","                data: {","                    token: token.value","                },","                fix(fixer) {","                    return fixer.insertTextBefore(token, \" \");","                }","            });","        }","","        /**","         * Determines if spacing in curly braces is valid.","         * @param {ASTNode} node The AST node to check.","         * @param {Token} first The first token to check (should be the opening brace)","         * @param {Token} second The second token to check (should be first after the opening brace)","         * @param {Token} penultimate The penultimate token to check (should be last before closing brace)","         * @param {Token} last The last token to check (should be closing brace)","         * @returns {void}","         */","        function validateBraceSpacing(node, first, second, penultimate, last) {","            if (astUtils.isTokenOnSameLine(first, second)) {","                const firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);","","                if (options.spaced && !firstSpaced) {","                    reportRequiredBeginningSpace(node, first);","                }","                if (!options.spaced && firstSpaced) {","                    reportNoBeginningSpace(node, first);","                }","            }","","            if (astUtils.isTokenOnSameLine(penultimate, last)) {","                const shouldCheckPenultimate = (","                    options.arraysInObjectsException && astUtils.isClosingBracketToken(penultimate) ||","                    options.objectsInObjectsException && astUtils.isClosingBraceToken(penultimate)","                );","                const penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.start).type;","","                const closingCurlyBraceMustBeSpaced = (","                    options.arraysInObjectsException && penultimateType === \"ArrayExpression\" ||","                    options.objectsInObjectsException && (penultimateType === \"ObjectExpression\" || penultimateType === \"ObjectPattern\")","                ) ? !options.spaced : options.spaced;","","                const lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);","","                if (closingCurlyBraceMustBeSpaced && !lastSpaced) {","                    reportRequiredEndingSpace(node, last);","                }","                if (!closingCurlyBraceMustBeSpaced && lastSpaced) {","                    reportNoEndingSpace(node, last);","                }","            }","        }","","        /**","         * Gets '}' token of an object node.","         *","         * Because the last token of object patterns might be a type annotation,","         * this traverses tokens preceded by the last property, then returns the","         * first '}' token.","         *","         * @param {ASTNode} node - The node to get. This node is an","         *      ObjectExpression or an ObjectPattern. And this node has one or","         *      more properties.","         * @returns {Token} '}' token.","         */","        function getClosingBraceOfObject(node) {","            const lastProperty = node.properties[node.properties.length - 1];","","            return sourceCode.getTokenAfter(lastProperty, astUtils.isClosingBraceToken);","        }","","        /**","         * Reports a given object node if spacing in curly braces is invalid.","         * @param {ASTNode} node - An ObjectExpression or ObjectPattern node to check.","         * @returns {void}","         */","        function checkForObject(node) {","            if (node.properties.length === 0) {","                return;","            }","","            const first = sourceCode.getFirstToken(node),","                last = getClosingBraceOfObject(node),","                second = sourceCode.getTokenAfter(first),","                penultimate = sourceCode.getTokenBefore(last);","","            validateBraceSpacing(node, first, second, penultimate, last);","        }","","        /**","         * Reports a given import node if spacing in curly braces is invalid.","         * @param {ASTNode} node - An ImportDeclaration node to check.","         * @returns {void}","         */","        function checkForImport(node) {","            if (node.specifiers.length === 0) {","                return;","            }","","            let firstSpecifier = node.specifiers[0];","            const lastSpecifier = node.specifiers[node.specifiers.length - 1];","","            if (lastSpecifier.type !== \"ImportSpecifier\") {","                return;","            }","            if (firstSpecifier.type !== \"ImportSpecifier\") {","                firstSpecifier = node.specifiers[1];","            }","","            const first = sourceCode.getTokenBefore(firstSpecifier),","                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),","                second = sourceCode.getTokenAfter(first),","                penultimate = sourceCode.getTokenBefore(last);","","            validateBraceSpacing(node, first, second, penultimate, last);","        }","","        /**","         * Reports a given export node if spacing in curly braces is invalid.","         * @param {ASTNode} node - An ExportNamedDeclaration node to check.","         * @returns {void}","         */","        function checkForExport(node) {","            if (node.specifiers.length === 0) {","                return;","            }","","            const firstSpecifier = node.specifiers[0],","                lastSpecifier = node.specifiers[node.specifiers.length - 1],","                first = sourceCode.getTokenBefore(firstSpecifier),","                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),","                second = sourceCode.getTokenAfter(first),","                penultimate = sourceCode.getTokenBefore(last);","","            validateBraceSpacing(node, first, second, penultimate, last);","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            // var {x} = y;","            ObjectPattern: checkForObject,","","            // var y = {x: 'y'}","            ObjectExpression: checkForObject,","","            // import {y} from 'x';","            ImportDeclaration: checkForImport,","","            // export {name} from 'yo';","            ExportNamedDeclaration: checkForExport","        };","","    }","};",""],"l":{"7":1,"13":1,"43":0,"53":1,"54":0,"57":0,"73":1,"74":0,"82":0,"84":0,"95":1,"96":0,"104":0,"106":0,"117":1,"118":0,"126":0,"137":1,"138":0,"146":0,"160":1,"161":0,"162":0,"164":0,"165":0,"167":0,"168":0,"172":0,"173":0,"177":0,"179":0,"184":0,"186":0,"187":0,"189":0,"190":0,"207":1,"208":0,"210":0,"218":1,"219":0,"220":0,"223":0,"228":0,"236":1,"237":0,"238":0,"241":0,"242":0,"244":0,"245":0,"247":0,"248":0,"251":0,"256":0,"264":1,"265":0,"266":0,"269":0,"276":0,"283":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/object-property-newline.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/object-property-newline.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":20}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":28},"end":{"line":44,"column":35}}},"3":{"name":"(anonymous_3)","line":67,"loc":{"start":{"line":67,"column":31},"end":{"line":67,"column":39}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":84,"column":2}},"2":{"start":{"line":36,"column":8},"end":{"line":36,"column":111}},"3":{"start":{"line":37,"column":8},"end":{"line":39,"column":57}},"4":{"start":{"line":41,"column":8},"end":{"line":41,"column":51}},"5":{"start":{"line":43,"column":8},"end":{"line":82,"column":10}},"6":{"start":{"line":45,"column":16},"end":{"line":56,"column":17}},"7":{"start":{"line":46,"column":20},"end":{"line":55,"column":21}},"8":{"start":{"line":47,"column":24},"end":{"line":47,"column":103}},"9":{"start":{"line":48,"column":24},"end":{"line":48,"column":125}},"10":{"start":{"line":50,"column":24},"end":{"line":54,"column":25}},"11":{"start":{"line":53,"column":28},"end":{"line":53,"column":35}},"12":{"start":{"line":58,"column":16},"end":{"line":80,"column":17}},"13":{"start":{"line":59,"column":20},"end":{"line":59,"column":104}},"14":{"start":{"line":60,"column":20},"end":{"line":60,"column":101}},"15":{"start":{"line":62,"column":20},"end":{"line":79,"column":21}},"16":{"start":{"line":63,"column":24},"end":{"line":78,"column":27}},"17":{"start":{"line":68,"column":32},"end":{"line":68,"column":101}},"18":{"start":{"line":69,"column":32},"end":{"line":69,"column":111}},"19":{"start":{"line":72,"column":32},"end":{"line":74,"column":33}},"20":{"start":{"line":73,"column":36},"end":{"line":73,"column":48}},"21":{"start":{"line":76,"column":32},"end":{"line":76,"column":85}}},"branchMap":{"1":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":30},"end":{"line":36,"column":48}},{"start":{"line":36,"column":52},"end":{"line":36,"column":110}}]},"2":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":92}},{"start":{"line":39,"column":14},"end":{"line":39,"column":56}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":16},"end":{"line":45,"column":16}},{"start":{"line":45,"column":16},"end":{"line":45,"column":16}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":20},"end":{"line":46,"column":20}},{"start":{"line":46,"column":20},"end":{"line":46,"column":20}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":24},"end":{"line":50,"column":24}},{"start":{"line":50,"column":24},"end":{"line":50,"column":24}}]},"6":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":20},"end":{"line":62,"column":20}},{"start":{"line":62,"column":20},"end":{"line":62,"column":20}}]},"7":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":32},"end":{"line":72,"column":32}},{"start":{"line":72,"column":32},"end":{"line":72,"column":32}}]}},"code":["/**"," * @fileoverview Rule to enforce placing object properties on separate lines."," * @author Vitor Balocco"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce placing object properties on separate lines\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allowMultiplePropertiesPerLine: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ],","","        fixable: \"whitespace\"","    },","","    create(context) {","        const allowSameLine = context.options[0] && Boolean(context.options[0].allowMultiplePropertiesPerLine);","        const errorMessage = allowSameLine","            ? \"Object properties must go on a new line if they aren't all on the same line.\"","            : \"Object properties must go on a new line.\";","","        const sourceCode = context.getSourceCode();","","        return {","            ObjectExpression(node) {","                if (allowSameLine) {","                    if (node.properties.length > 1) {","                        const firstTokenOfFirstProperty = sourceCode.getFirstToken(node.properties[0]);","                        const lastTokenOfLastProperty = sourceCode.getLastToken(node.properties[node.properties.length - 1]);","","                        if (firstTokenOfFirstProperty.loc.end.line === lastTokenOfLastProperty.loc.start.line) {","","                            // All keys and values are on the same line","                            return;","                        }","                    }","                }","","                for (let i = 1; i < node.properties.length; i++) {","                    const lastTokenOfPreviousProperty = sourceCode.getLastToken(node.properties[i - 1]);","                    const firstTokenOfCurrentProperty = sourceCode.getFirstToken(node.properties[i]);","","                    if (lastTokenOfPreviousProperty.loc.end.line === firstTokenOfCurrentProperty.loc.start.line) {","                        context.report({","                            node,","                            loc: firstTokenOfCurrentProperty.loc.start,","                            message: errorMessage,","                            fix(fixer) {","                                const comma = sourceCode.getTokenBefore(firstTokenOfCurrentProperty);","                                const rangeAfterComma = [comma.range[1], firstTokenOfCurrentProperty.range[0]];","","                                // Don't perform a fix if there are any comments between the comma and the next property.","                                if (sourceCode.text.slice(rangeAfterComma[0], rangeAfterComma[1]).trim()) {","                                    return null;","                                }","","                                return fixer.replaceTextRange(rangeAfterComma, \"\\n\");","                            }","                        });","                    }","                }","            }","        };","    }","};",""],"l":{"12":1,"36":0,"37":0,"41":0,"43":0,"45":0,"46":0,"47":0,"48":0,"50":0,"53":0,"58":0,"59":0,"60":0,"62":0,"63":0,"68":0,"69":0,"72":0,"73":0,"76":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/object-shorthand.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/object-shorthand.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":1,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1,"86":0,"87":1,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0,0],"40":[0,0],"41":[0,0],"42":[0,0,0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0,0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0,0,0,0],"53":[0,0],"54":[0,0,0],"55":[0,0],"56":[0,0,0,0],"57":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"fnMap":{"1":{"name":"(anonymous_1)","line":95,"loc":{"start":{"line":95,"column":10},"end":{"line":95,"column":20}}},"2":{"name":"isConstructor","line":119,"loc":{"start":{"line":119,"column":8},"end":{"line":119,"column":37}}},"3":{"name":"canHaveShorthand","line":131,"loc":{"start":{"line":131,"column":8},"end":{"line":131,"column":44}}},"4":{"name":"isStringLiteral","line":140,"loc":{"start":{"line":140,"column":8},"end":{"line":140,"column":39}}},"5":{"name":"isShorthand","line":150,"loc":{"start":{"line":150,"column":8},"end":{"line":150,"column":39}}},"6":{"name":"isRedundant","line":162,"loc":{"start":{"line":162,"column":8},"end":{"line":162,"column":39}}},"7":{"name":"checkConsistency","line":181,"loc":{"start":{"line":181,"column":8},"end":{"line":181,"column":57}}},"8":{"name":"makeFunctionShorthand","line":217,"loc":{"start":{"line":217,"column":8},"end":{"line":217,"column":52}}},"9":{"name":"makeFunctionLongform","line":257,"loc":{"start":{"line":257,"column":8},"end":{"line":257,"column":51}}},"10":{"name":"enterFunction","line":291,"loc":{"start":{"line":291,"column":8},"end":{"line":291,"column":33}}},"11":{"name":"exitFunction","line":302,"loc":{"start":{"line":302,"column":8},"end":{"line":302,"column":32}}},"12":{"name":"reportLexicalIdentifier","line":311,"loc":{"start":{"line":311,"column":8},"end":{"line":311,"column":43}}},"13":{"name":"(anonymous_13)","line":327,"loc":{"start":{"line":327,"column":35},"end":{"line":327,"column":42}}},"14":{"name":"(anonymous_14)","line":330,"loc":{"start":{"line":330,"column":42},"end":{"line":330,"column":49}}},"15":{"name":"(anonymous_15)","line":336,"loc":{"start":{"line":336,"column":24},"end":{"line":336,"column":31}}},"16":{"name":"(anonymous_16)","line":341,"loc":{"start":{"line":341,"column":22},"end":{"line":341,"column":29}}},"17":{"name":"(anonymous_17)","line":347,"loc":{"start":{"line":347,"column":28},"end":{"line":347,"column":35}}},"18":{"name":"(anonymous_18)","line":355,"loc":{"start":{"line":355,"column":27},"end":{"line":355,"column":34}}},"19":{"name":"(anonymous_19)","line":421,"loc":{"start":{"line":421,"column":27},"end":{"line":421,"column":35}}},"20":{"name":"(anonymous_20)","line":434,"loc":{"start":{"line":434,"column":27},"end":{"line":434,"column":35}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":15,"column":2}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":41}},"3":{"start":{"line":25,"column":0},"end":{"line":442,"column":2}},"4":{"start":{"line":96,"column":8},"end":{"line":96,"column":59}},"5":{"start":{"line":97,"column":8},"end":{"line":97,"column":87}},"6":{"start":{"line":98,"column":8},"end":{"line":98,"column":88}},"7":{"start":{"line":99,"column":8},"end":{"line":99,"column":52}},"8":{"start":{"line":100,"column":8},"end":{"line":100,"column":62}},"9":{"start":{"line":101,"column":8},"end":{"line":101,"column":80}},"10":{"start":{"line":103,"column":8},"end":{"line":103,"column":48}},"11":{"start":{"line":104,"column":8},"end":{"line":104,"column":62}},"12":{"start":{"line":105,"column":8},"end":{"line":105,"column":48}},"13":{"start":{"line":106,"column":8},"end":{"line":106,"column":80}},"14":{"start":{"line":107,"column":8},"end":{"line":107,"column":51}},"15":{"start":{"line":119,"column":8},"end":{"line":123,"column":9}},"16":{"start":{"line":120,"column":12},"end":{"line":120,"column":45}},"17":{"start":{"line":122,"column":12},"end":{"line":122,"column":57}},"18":{"start":{"line":131,"column":8},"end":{"line":133,"column":9}},"19":{"start":{"line":132,"column":12},"end":{"line":132,"column":160}},"20":{"start":{"line":140,"column":8},"end":{"line":142,"column":9}},"21":{"start":{"line":141,"column":12},"end":{"line":141,"column":77}},"22":{"start":{"line":150,"column":8},"end":{"line":154,"column":9}},"23":{"start":{"line":153,"column":12},"end":{"line":153,"column":59}},"24":{"start":{"line":162,"column":8},"end":{"line":173,"column":9}},"25":{"start":{"line":163,"column":12},"end":{"line":163,"column":41}},"26":{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},"27":{"start":{"line":166,"column":16},"end":{"line":166,"column":33}},"28":{"start":{"line":168,"column":12},"end":{"line":170,"column":13}},"29":{"start":{"line":169,"column":16},"end":{"line":169,"column":79}},"30":{"start":{"line":172,"column":12},"end":{"line":172,"column":25}},"31":{"start":{"line":181,"column":8},"end":{"line":209,"column":9}},"32":{"start":{"line":184,"column":12},"end":{"line":184,"column":72}},"33":{"start":{"line":187,"column":12},"end":{"line":208,"column":13}},"34":{"start":{"line":188,"column":16},"end":{"line":188,"column":75}},"35":{"start":{"line":192,"column":16},"end":{"line":207,"column":17}},"36":{"start":{"line":195,"column":20},"end":{"line":206,"column":21}},"37":{"start":{"line":196,"column":24},"end":{"line":196,"column":119}},"38":{"start":{"line":197,"column":27},"end":{"line":206,"column":21}},"39":{"start":{"line":201,"column":24},"end":{"line":201,"column":84}},"40":{"start":{"line":203,"column":24},"end":{"line":205,"column":25}},"41":{"start":{"line":204,"column":28},"end":{"line":204,"column":104}},"42":{"start":{"line":217,"column":8},"end":{"line":249,"column":9}},"43":{"start":{"line":218,"column":12},"end":{"line":218,"column":150}},"44":{"start":{"line":219,"column":12},"end":{"line":219,"column":171}},"45":{"start":{"line":220,"column":12},"end":{"line":220,"column":97}},"46":{"start":{"line":221,"column":12},"end":{"line":221,"column":31}},"47":{"start":{"line":223,"column":12},"end":{"line":227,"column":13}},"48":{"start":{"line":224,"column":16},"end":{"line":224,"column":32}},"49":{"start":{"line":225,"column":19},"end":{"line":227,"column":13}},"50":{"start":{"line":226,"column":16},"end":{"line":226,"column":37}},"51":{"start":{"line":229,"column":12},"end":{"line":237,"column":13}},"52":{"start":{"line":230,"column":16},"end":{"line":230,"column":141}},"53":{"start":{"line":230,"column":85},"end":{"line":230,"column":139}},"54":{"start":{"line":231,"column":16},"end":{"line":231,"column":121}},"55":{"start":{"line":233,"column":16},"end":{"line":236,"column":18}},"56":{"start":{"line":238,"column":12},"end":{"line":238,"column":100}},"57":{"start":{"line":238,"column":78},"end":{"line":238,"column":98}},"58":{"start":{"line":239,"column":12},"end":{"line":239,"column":75}},"59":{"start":{"line":240,"column":12},"end":{"line":240,"column":119}},"60":{"start":{"line":241,"column":12},"end":{"line":241,"column":155}},"61":{"start":{"line":242,"column":12},"end":{"line":242,"column":96}},"62":{"start":{"line":244,"column":12},"end":{"line":247,"column":14}},"63":{"start":{"line":257,"column":8},"end":{"line":270,"column":9}},"64":{"start":{"line":258,"column":12},"end":{"line":258,"column":149}},"65":{"start":{"line":258,"column":91},"end":{"line":258,"column":110}},"66":{"start":{"line":259,"column":12},"end":{"line":259,"column":170}},"67":{"start":{"line":259,"column":113},"end":{"line":259,"column":132}},"68":{"start":{"line":260,"column":12},"end":{"line":260,"column":97}},"69":{"start":{"line":261,"column":12},"end":{"line":261,"column":44}},"70":{"start":{"line":263,"column":12},"end":{"line":267,"column":13}},"71":{"start":{"line":264,"column":16},"end":{"line":264,"column":45}},"72":{"start":{"line":265,"column":19},"end":{"line":267,"column":13}},"73":{"start":{"line":266,"column":16},"end":{"line":266,"column":50}},"74":{"start":{"line":269,"column":12},"end":{"line":269,"column":115}},"75":{"start":{"line":282,"column":8},"end":{"line":282,"column":37}},"76":{"start":{"line":283,"column":8},"end":{"line":283,"column":59}},"77":{"start":{"line":284,"column":8},"end":{"line":284,"column":51}},"78":{"start":{"line":291,"column":8},"end":{"line":296,"column":9}},"79":{"start":{"line":292,"column":12},"end":{"line":292,"column":49}},"80":{"start":{"line":293,"column":12},"end":{"line":295,"column":15}},"81":{"start":{"line":293,"column":60},"end":{"line":293,"column":89}},"82":{"start":{"line":294,"column":16},"end":{"line":294,"column":123}},"83":{"start":{"line":294,"column":47},"end":{"line":294,"column":61}},"84":{"start":{"line":294,"column":85},"end":{"line":294,"column":121}},"85":{"start":{"line":302,"column":8},"end":{"line":304,"column":9}},"86":{"start":{"line":303,"column":12},"end":{"line":303,"column":38}},"87":{"start":{"line":311,"column":8},"end":{"line":313,"column":9}},"88":{"start":{"line":312,"column":12},"end":{"line":312,"column":107}},"89":{"start":{"line":312,"column":58},"end":{"line":312,"column":105}},"90":{"start":{"line":319,"column":8},"end":{"line":440,"column":10}},"91":{"start":{"line":328,"column":16},"end":{"line":328,"column":47}},"92":{"start":{"line":331,"column":16},"end":{"line":331,"column":50}},"93":{"start":{"line":337,"column":16},"end":{"line":339,"column":17}},"94":{"start":{"line":338,"column":20},"end":{"line":338,"column":46}},"95":{"start":{"line":342,"column":16},"end":{"line":344,"column":17}},"96":{"start":{"line":343,"column":20},"end":{"line":343,"column":46}},"97":{"start":{"line":348,"column":16},"end":{"line":352,"column":17}},"98":{"start":{"line":349,"column":20},"end":{"line":349,"column":50}},"99":{"start":{"line":350,"column":23},"end":{"line":352,"column":17}},"100":{"start":{"line":351,"column":20},"end":{"line":351,"column":49}},"101":{"start":{"line":356,"column":16},"end":{"line":356,"column":72}},"102":{"start":{"line":359,"column":16},"end":{"line":361,"column":17}},"103":{"start":{"line":360,"column":20},"end":{"line":360,"column":27}},"104":{"start":{"line":364,"column":16},"end":{"line":366,"column":17}},"105":{"start":{"line":365,"column":20},"end":{"line":365,"column":27}},"106":{"start":{"line":369,"column":16},"end":{"line":371,"column":17}},"107":{"start":{"line":370,"column":20},"end":{"line":370,"column":27}},"108":{"start":{"line":375,"column":16},"end":{"line":438,"column":17}},"109":{"start":{"line":376,"column":20},"end":{"line":393,"column":21}},"110":{"start":{"line":377,"column":24},"end":{"line":377,"column":150}},"111":{"start":{"line":380,"column":24},"end":{"line":384,"column":27}},"112":{"start":{"line":383,"column":42},"end":{"line":383,"column":75}},"113":{"start":{"line":385,"column":27},"end":{"line":393,"column":21}},"114":{"start":{"line":388,"column":24},"end":{"line":392,"column":27}},"115":{"start":{"line":391,"column":42},"end":{"line":391,"column":95}},"116":{"start":{"line":394,"column":23},"end":{"line":438,"column":17}},"117":{"start":{"line":395,"column":20},"end":{"line":397,"column":21}},"118":{"start":{"line":396,"column":24},"end":{"line":396,"column":31}},"119":{"start":{"line":398,"column":20},"end":{"line":400,"column":21}},"120":{"start":{"line":399,"column":24},"end":{"line":399,"column":31}},"121":{"start":{"line":403,"column":20},"end":{"line":414,"column":21}},"122":{"start":{"line":409,"column":24},"end":{"line":413,"column":27}},"123":{"start":{"line":412,"column":42},"end":{"line":412,"column":76}},"124":{"start":{"line":415,"column":23},"end":{"line":438,"column":17}},"125":{"start":{"line":418,"column":20},"end":{"line":424,"column":23}},"126":{"start":{"line":422,"column":28},"end":{"line":422,"column":76}},"127":{"start":{"line":425,"column":23},"end":{"line":438,"column":17}},"128":{"start":{"line":426,"column":20},"end":{"line":428,"column":21}},"129":{"start":{"line":427,"column":24},"end":{"line":427,"column":31}},"130":{"start":{"line":431,"column":20},"end":{"line":437,"column":23}},"131":{"start":{"line":435,"column":28},"end":{"line":435,"column":76}}},"branchMap":{"1":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":22},"end":{"line":96,"column":40}},{"start":{"line":96,"column":44},"end":{"line":96,"column":58}}]},"2":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":33},"end":{"line":97,"column":58}},{"start":{"line":97,"column":62},"end":{"line":97,"column":86}}]},"3":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":31},"end":{"line":98,"column":59}},{"start":{"line":98,"column":63},"end":{"line":98,"column":87}}]},"4":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":23},"end":{"line":103,"column":41}},{"start":{"line":103,"column":45},"end":{"line":103,"column":47}}]},"5":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":20},"end":{"line":132,"column":43}},{"start":{"line":132,"column":47},"end":{"line":132,"column":70}},{"start":{"line":132,"column":74},"end":{"line":132,"column":108}},{"start":{"line":132,"column":112},"end":{"line":132,"column":158}}]},"6":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":19},"end":{"line":141,"column":42}},{"start":{"line":141,"column":46},"end":{"line":141,"column":76}}]},"7":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":20},"end":{"line":153,"column":38}},{"start":{"line":153,"column":42},"end":{"line":153,"column":57}}]},"8":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":165,"column":12}},{"start":{"line":165,"column":12},"end":{"line":165,"column":12}}]},"9":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":12},"end":{"line":168,"column":12}},{"start":{"line":168,"column":12},"end":{"line":168,"column":12}}]},"10":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":12},"end":{"line":187,"column":12}},{"start":{"line":187,"column":12},"end":{"line":187,"column":12}}]},"11":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":16},"end":{"line":192,"column":16}},{"start":{"line":192,"column":16},"end":{"line":192,"column":16}}]},"12":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":20},"end":{"line":195,"column":20}},{"start":{"line":195,"column":20},"end":{"line":195,"column":20}}]},"13":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":27},"end":{"line":197,"column":27}},{"start":{"line":197,"column":27},"end":{"line":197,"column":27}}]},"14":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":24},"end":{"line":203,"column":24}},{"start":{"line":203,"column":24},"end":{"line":203,"column":24}}]},"15":{"line":218,"type":"cond-expr","locations":[{"start":{"line":218,"column":50},"end":{"line":218,"column":112}},{"start":{"line":218,"column":115},"end":{"line":218,"column":149}}]},"16":{"line":219,"type":"cond-expr","locations":[{"start":{"line":219,"column":49},"end":{"line":219,"column":134}},{"start":{"line":219,"column":137},"end":{"line":219,"column":170}}]},"17":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":12},"end":{"line":223,"column":12}},{"start":{"line":223,"column":12},"end":{"line":223,"column":12}}]},"18":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":19},"end":{"line":225,"column":19}},{"start":{"line":225,"column":19},"end":{"line":225,"column":19}}]},"19":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":12},"end":{"line":229,"column":12}},{"start":{"line":229,"column":12},"end":{"line":229,"column":12}}]},"20":{"line":230,"type":"binary-expr","locations":[{"start":{"line":230,"column":85},"end":{"line":230,"column":109}},{"start":{"line":230,"column":113},"end":{"line":230,"column":139}}]},"21":{"line":231,"type":"cond-expr","locations":[{"start":{"line":231,"column":65},"end":{"line":231,"column":104}},{"start":{"line":231,"column":107},"end":{"line":231,"column":120}}]},"22":{"line":240,"type":"binary-expr","locations":[{"start":{"line":240,"column":46},"end":{"line":240,"column":84}},{"start":{"line":240,"column":88},"end":{"line":240,"column":118}}]},"23":{"line":241,"type":"cond-expr","locations":[{"start":{"line":241,"column":111},"end":{"line":241,"column":112}},{"start":{"line":241,"column":115},"end":{"line":241,"column":116}}]},"24":{"line":242,"type":"cond-expr","locations":[{"start":{"line":242,"column":61},"end":{"line":242,"column":73}},{"start":{"line":242,"column":76},"end":{"line":242,"column":95}}]},"25":{"line":258,"type":"cond-expr","locations":[{"start":{"line":258,"column":50},"end":{"line":258,"column":111}},{"start":{"line":258,"column":114},"end":{"line":258,"column":148}}]},"26":{"line":259,"type":"cond-expr","locations":[{"start":{"line":259,"column":49},"end":{"line":259,"column":133}},{"start":{"line":259,"column":136},"end":{"line":259,"column":169}}]},"27":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":12},"end":{"line":263,"column":12}},{"start":{"line":263,"column":12},"end":{"line":263,"column":12}}]},"28":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":19},"end":{"line":265,"column":19}},{"start":{"line":265,"column":19},"end":{"line":265,"column":19}}]},"29":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":16},"end":{"line":337,"column":16}},{"start":{"line":337,"column":16},"end":{"line":337,"column":16}}]},"30":{"line":337,"type":"binary-expr","locations":[{"start":{"line":337,"column":20},"end":{"line":337,"column":44}},{"start":{"line":337,"column":48},"end":{"line":337,"column":79}}]},"31":{"line":342,"type":"if","locations":[{"start":{"line":342,"column":16},"end":{"line":342,"column":16}},{"start":{"line":342,"column":16},"end":{"line":342,"column":16}}]},"32":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":16},"end":{"line":348,"column":16}},{"start":{"line":348,"column":16},"end":{"line":348,"column":16}}]},"33":{"line":350,"type":"if","locations":[{"start":{"line":350,"column":23},"end":{"line":350,"column":23}},{"start":{"line":350,"column":23},"end":{"line":350,"column":23}}]},"34":{"line":356,"type":"binary-expr","locations":[{"start":{"line":356,"column":42},"end":{"line":356,"column":53}},{"start":{"line":356,"column":57},"end":{"line":356,"column":71}}]},"35":{"line":359,"type":"if","locations":[{"start":{"line":359,"column":16},"end":{"line":359,"column":16}},{"start":{"line":359,"column":16},"end":{"line":359,"column":16}}]},"36":{"line":364,"type":"if","locations":[{"start":{"line":364,"column":16},"end":{"line":364,"column":16}},{"start":{"line":364,"column":16},"end":{"line":364,"column":16}}]},"37":{"line":364,"type":"binary-expr","locations":[{"start":{"line":364,"column":20},"end":{"line":364,"column":39}},{"start":{"line":364,"column":43},"end":{"line":364,"column":62}}]},"38":{"line":369,"type":"if","locations":[{"start":{"line":369,"column":16},"end":{"line":369,"column":16}},{"start":{"line":369,"column":16},"end":{"line":369,"column":16}}]},"39":{"line":369,"type":"binary-expr","locations":[{"start":{"line":369,"column":20},"end":{"line":369,"column":33}},{"start":{"line":369,"column":37},"end":{"line":369,"column":77}},{"start":{"line":369,"column":81},"end":{"line":369,"column":126}}]},"40":{"line":375,"type":"if","locations":[{"start":{"line":375,"column":16},"end":{"line":375,"column":16}},{"start":{"line":375,"column":16},"end":{"line":375,"column":16}}]},"41":{"line":376,"type":"if","locations":[{"start":{"line":376,"column":20},"end":{"line":376,"column":20}},{"start":{"line":376,"column":20},"end":{"line":376,"column":20}}]},"42":{"line":376,"type":"binary-expr","locations":[{"start":{"line":376,"column":24},"end":{"line":376,"column":35}},{"start":{"line":376,"column":40},"end":{"line":376,"column":51}},{"start":{"line":376,"column":55},"end":{"line":376,"column":67}},{"start":{"line":376,"column":71},"end":{"line":376,"column":96}}]},"43":{"line":377,"type":"cond-expr","locations":[{"start":{"line":377,"column":54},"end":{"line":377,"column":88}},{"start":{"line":377,"column":91},"end":{"line":377,"column":149}}]},"44":{"line":385,"type":"if","locations":[{"start":{"line":385,"column":27},"end":{"line":385,"column":27}},{"start":{"line":385,"column":27},"end":{"line":385,"column":27}}]},"45":{"line":394,"type":"if","locations":[{"start":{"line":394,"column":23},"end":{"line":394,"column":23}},{"start":{"line":394,"column":23},"end":{"line":394,"column":23}}]},"46":{"line":394,"type":"binary-expr","locations":[{"start":{"line":394,"column":27},"end":{"line":394,"column":43}},{"start":{"line":394,"column":47},"end":{"line":394,"column":61}},{"start":{"line":394,"column":66},"end":{"line":394,"column":106}},{"start":{"line":394,"column":110},"end":{"line":394,"column":155}}]},"47":{"line":395,"type":"if","locations":[{"start":{"line":395,"column":20},"end":{"line":395,"column":20}},{"start":{"line":395,"column":20},"end":{"line":395,"column":20}}]},"48":{"line":395,"type":"binary-expr","locations":[{"start":{"line":395,"column":24},"end":{"line":395,"column":43}},{"start":{"line":395,"column":47},"end":{"line":395,"column":75}}]},"49":{"line":398,"type":"if","locations":[{"start":{"line":398,"column":20},"end":{"line":398,"column":20}},{"start":{"line":398,"column":20},"end":{"line":398,"column":20}}]},"50":{"line":398,"type":"binary-expr","locations":[{"start":{"line":398,"column":24},"end":{"line":398,"column":36}},{"start":{"line":398,"column":40},"end":{"line":398,"column":65}}]},"51":{"line":403,"type":"if","locations":[{"start":{"line":403,"column":20},"end":{"line":403,"column":20}},{"start":{"line":403,"column":20},"end":{"line":403,"column":20}}]},"52":{"line":403,"type":"binary-expr","locations":[{"start":{"line":403,"column":24},"end":{"line":403,"column":64}},{"start":{"line":404,"column":24},"end":{"line":404,"column":69}},{"start":{"line":405,"column":24},"end":{"line":405,"column":65}},{"start":{"line":406,"column":24},"end":{"line":406,"column":52}},{"start":{"line":407,"column":24},"end":{"line":407,"column":69}}]},"53":{"line":415,"type":"if","locations":[{"start":{"line":415,"column":23},"end":{"line":415,"column":23}},{"start":{"line":415,"column":23},"end":{"line":415,"column":23}}]},"54":{"line":415,"type":"binary-expr","locations":[{"start":{"line":415,"column":27},"end":{"line":415,"column":59}},{"start":{"line":415,"column":63},"end":{"line":415,"column":96}},{"start":{"line":415,"column":100},"end":{"line":415,"column":114}}]},"55":{"line":425,"type":"if","locations":[{"start":{"line":425,"column":23},"end":{"line":425,"column":23}},{"start":{"line":425,"column":23},"end":{"line":425,"column":23}}]},"56":{"line":425,"type":"binary-expr","locations":[{"start":{"line":425,"column":27},"end":{"line":425,"column":59}},{"start":{"line":425,"column":63},"end":{"line":425,"column":90}},{"start":{"line":425,"column":94},"end":{"line":425,"column":128}},{"start":{"line":425,"column":132},"end":{"line":425,"column":146}}]},"57":{"line":426,"type":"if","locations":[{"start":{"line":426,"column":20},"end":{"line":426,"column":20}},{"start":{"line":426,"column":20},"end":{"line":426,"column":20}}]}},"code":["/**"," * @fileoverview Rule to enforce concise object methods and properties."," * @author Jamund Ferguson"," */","","\"use strict\";","","const OPTIONS = {","    always: \"always\",","    never: \"never\",","    methods: \"methods\",","    properties: \"properties\",","    consistent: \"consistent\",","    consistentAsNeeded: \"consistent-as-needed\"","};","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow method and property shorthand syntax for object literals\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        fixable: \"code\",","","        schema: {","            anyOf: [","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\", \"methods\", \"properties\", \"never\", \"consistent\", \"consistent-as-needed\"]","                        }","                    ],","                    minItems: 0,","                    maxItems: 1","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\", \"methods\", \"properties\"]","                        },","                        {","                            type: \"object\",","                            properties: {","                                avoidQuotes: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        }","                    ],","                    minItems: 0,","                    maxItems: 2","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\", \"methods\"]","                        },","                        {","                            type: \"object\",","                            properties: {","                                ignoreConstructors: {","                                    type: \"boolean\"","                                },","                                avoidQuotes: {","                                    type: \"boolean\"","                                },","                                avoidExplicitReturnArrows: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        }","                    ],","                    minItems: 0,","                    maxItems: 2","                }","            ]","        }","    },","","    create(context) {","        const APPLY = context.options[0] || OPTIONS.always;","        const APPLY_TO_METHODS = APPLY === OPTIONS.methods || APPLY === OPTIONS.always;","        const APPLY_TO_PROPS = APPLY === OPTIONS.properties || APPLY === OPTIONS.always;","        const APPLY_NEVER = APPLY === OPTIONS.never;","        const APPLY_CONSISTENT = APPLY === OPTIONS.consistent;","        const APPLY_CONSISTENT_AS_NEEDED = APPLY === OPTIONS.consistentAsNeeded;","","        const PARAMS = context.options[1] || {};","        const IGNORE_CONSTRUCTORS = PARAMS.ignoreConstructors;","        const AVOID_QUOTES = PARAMS.avoidQuotes;","        const AVOID_EXPLICIT_RETURN_ARROWS = !!PARAMS.avoidExplicitReturnArrows;","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Determines if the first character of the name is a capital letter.","         * @param {string} name The name of the node to evaluate.","         * @returns {boolean} True if the first character of the property name is a capital letter, false if not.","         * @private","         */","        function isConstructor(name) {","            const firstChar = name.charAt(0);","","            return firstChar === firstChar.toUpperCase();","        }","","        /**","         * Determines if the property can have a shorthand form.","         * @param {ASTNode} property Property AST node","         * @returns {boolean} True if the property can have a shorthand form","         * @private","         **/","        function canHaveShorthand(property) {","            return (property.kind !== \"set\" && property.kind !== \"get\" && property.type !== \"SpreadProperty\" && property.type !== \"ExperimentalSpreadProperty\");","        }","","        /**","          * Checks whether a node is a string literal.","          * @param   {ASTNode} node - Any AST node.","          * @returns {boolean} `true` if it is a string literal.","          */","        function isStringLiteral(node) {","            return node.type === \"Literal\" && typeof node.value === \"string\";","        }","","        /**","         * Determines if the property is a shorthand or not.","         * @param {ASTNode} property Property AST node","         * @returns {boolean} True if the property is considered shorthand, false if not.","         * @private","         **/","        function isShorthand(property) {","","            // property.method is true when `{a(){}}`.","            return (property.shorthand || property.method);","        }","","        /**","         * Determines if the property's key and method or value are named equally.","         * @param {ASTNode} property Property AST node","         * @returns {boolean} True if the key and value are named equally, false if not.","         * @private","         **/","        function isRedundant(property) {","            const value = property.value;","","            if (value.type === \"FunctionExpression\") {","                return !value.id; // Only anonymous should be shorthand method.","            }","            if (value.type === \"Identifier\") {","                return astUtils.getStaticPropertyName(property) === value.name;","            }","","            return false;","        }","","        /**","         * Ensures that an object's properties are consistently shorthand, or not shorthand at all.","         * @param   {ASTNode} node Property AST node","         * @param   {boolean} checkRedundancy Whether to check longform redundancy","         * @returns {void}","         **/","        function checkConsistency(node, checkRedundancy) {","","            // We are excluding getters/setters and spread properties as they are considered neither longform nor shorthand.","            const properties = node.properties.filter(canHaveShorthand);","","            // Do we still have properties left after filtering the getters and setters?","            if (properties.length > 0) {","                const shorthandProperties = properties.filter(isShorthand);","","                // If we do not have an equal number of longform properties as","                // shorthand properties, we are using the annotations inconsistently","                if (shorthandProperties.length !== properties.length) {","","                    // We have at least 1 shorthand property","                    if (shorthandProperties.length > 0) {","                        context.report({ node, message: \"Unexpected mix of shorthand and non-shorthand properties.\" });","                    } else if (checkRedundancy) {","","                        // If all properties of the object contain a method or value with a name matching it's key,","                        // all the keys are redundant.","                        const canAlwaysUseShorthand = properties.every(isRedundant);","","                        if (canAlwaysUseShorthand) {","                            context.report({ node, message: \"Expected shorthand for all properties.\" });","                        }","                    }","                }","            }","        }","","        /**","        * Fixes a FunctionExpression node by making it into a shorthand property.","        * @param {SourceCodeFixer} fixer The fixer object","        * @param {ASTNode} node A `Property` node that has a `FunctionExpression` or `ArrowFunctionExpression` as its value","        * @returns {Object} A fix for this node","        */","        function makeFunctionShorthand(fixer, node) {","            const firstKeyToken = node.computed ? sourceCode.getFirstToken(node, astUtils.isOpeningBracketToken) : sourceCode.getFirstToken(node.key);","            const lastKeyToken = node.computed ? sourceCode.getFirstTokenBetween(node.key, node.value, astUtils.isClosingBracketToken) : sourceCode.getLastToken(node.key);","            const keyText = sourceCode.text.slice(firstKeyToken.range[0], lastKeyToken.range[1]);","            let keyPrefix = \"\";","","            if (node.value.generator) {","                keyPrefix = \"*\";","            } else if (node.value.async) {","                keyPrefix = \"async \";","            }","","            if (node.value.type === \"FunctionExpression\") {","                const functionToken = sourceCode.getTokens(node.value).find(token => token.type === \"Keyword\" && token.value === \"function\");","                const tokenBeforeParams = node.value.generator ? sourceCode.getTokenAfter(functionToken) : functionToken;","","                return fixer.replaceTextRange(","                    [firstKeyToken.range[0], node.range[1]],","                    keyPrefix + keyText + sourceCode.text.slice(tokenBeforeParams.range[1], node.value.range[1])","                );","            }","            const arrowToken = sourceCode.getTokens(node.value).find(token => token.value === \"=>\");","            const tokenBeforeArrow = sourceCode.getTokenBefore(arrowToken);","            const hasParensAroundParameters = tokenBeforeArrow.type === \"Punctuator\" && tokenBeforeArrow.value === \")\";","            const oldParamText = sourceCode.text.slice(sourceCode.getFirstToken(node.value, node.value.async ? 1 : 0).range[0], tokenBeforeArrow.range[1]);","            const newParamText = hasParensAroundParameters ? oldParamText : `(${oldParamText})`;","","            return fixer.replaceTextRange(","                [firstKeyToken.range[0], node.range[1]],","                keyPrefix + keyText + newParamText + sourceCode.text.slice(arrowToken.range[1], node.value.range[1])","            );","","        }","","        /**","        * Fixes a FunctionExpression node by making it into a longform property.","        * @param {SourceCodeFixer} fixer The fixer object","        * @param {ASTNode} node A `Property` node that has a `FunctionExpression` as its value","        * @returns {Object} A fix for this node","        */","        function makeFunctionLongform(fixer, node) {","            const firstKeyToken = node.computed ? sourceCode.getTokens(node).find(token => token.value === \"[\") : sourceCode.getFirstToken(node.key);","            const lastKeyToken = node.computed ? sourceCode.getTokensBetween(node.key, node.value).find(token => token.value === \"]\") : sourceCode.getLastToken(node.key);","            const keyText = sourceCode.text.slice(firstKeyToken.range[0], lastKeyToken.range[1]);","            let functionHeader = \"function\";","","            if (node.value.generator) {","                functionHeader = \"function*\";","            } else if (node.value.async) {","                functionHeader = \"async function\";","            }","","            return fixer.replaceTextRange([node.range[0], lastKeyToken.range[1]], `${keyText}: ${functionHeader}`);","        }","","        /*","         * To determine whether a given arrow function has a lexical identifier (`this`, `arguments`, `super`, or `new.target`),","         * create a stack of functions that define these identifiers (i.e. all functions except arrow functions) as the AST is","         * traversed. Whenever a new function is encountered, create a new entry on the stack (corresponding to a different lexical","         * scope of `this`), and whenever a function is exited, pop that entry off the stack. When an arrow function is entered,","         * keep a reference to it on the current stack entry, and remove that reference when the arrow function is exited.","         * When a lexical identifier is encountered, mark all the arrow functions on the current stack entry by adding them","         * to an `arrowsWithLexicalIdentifiers` set. Any arrow function in that set will not be reported by this rule,","         * because converting it into a method would change the value of one of the lexical identifiers.","         */","        const lexicalScopeStack = [];","        const arrowsWithLexicalIdentifiers = new WeakSet();","        const argumentsIdentifiers = new WeakSet();","","        /**","        * Enters a function. This creates a new lexical identifier scope, so a new Set of arrow functions is pushed onto the stack.","        * Also, this marks all `arguments` identifiers so that they can be detected later.","        * @returns {void}","        */","        function enterFunction() {","            lexicalScopeStack.unshift(new Set());","            context.getScope().variables.filter(variable => variable.name === \"arguments\").forEach(variable => {","                variable.references.map(ref => ref.identifier).forEach(identifier => argumentsIdentifiers.add(identifier));","            });","        }","","        /**","        * Exits a function. This pops the current set of arrow functions off the lexical scope stack.","        * @returns {void}","        */","        function exitFunction() {","            lexicalScopeStack.shift();","        }","","        /**","        * Marks the current function as having a lexical keyword. This implies that all arrow functions","        * in the current lexical scope contain a reference to this lexical keyword.","        * @returns {void}","        */","        function reportLexicalIdentifier() {","            lexicalScopeStack[0].forEach(arrowFunction => arrowsWithLexicalIdentifiers.add(arrowFunction));","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            Program: enterFunction,","            FunctionDeclaration: enterFunction,","            FunctionExpression: enterFunction,","            \"Program:exit\": exitFunction,","            \"FunctionDeclaration:exit\": exitFunction,","            \"FunctionExpression:exit\": exitFunction,","","            ArrowFunctionExpression(node) {","                lexicalScopeStack[0].add(node);","            },","            \"ArrowFunctionExpression:exit\"(node) {","                lexicalScopeStack[0].delete(node);","            },","","            ThisExpression: reportLexicalIdentifier,","            Super: reportLexicalIdentifier,","            MetaProperty(node) {","                if (node.meta.name === \"new\" && node.property.name === \"target\") {","                    reportLexicalIdentifier();","                }","            },","            Identifier(node) {","                if (argumentsIdentifiers.has(node)) {","                    reportLexicalIdentifier();","                }","            },","","            ObjectExpression(node) {","                if (APPLY_CONSISTENT) {","                    checkConsistency(node, false);","                } else if (APPLY_CONSISTENT_AS_NEEDED) {","                    checkConsistency(node, true);","                }","            },","","            \"Property:exit\"(node) {","                const isConciseProperty = node.method || node.shorthand;","","                // Ignore destructuring assignment","                if (node.parent.type === \"ObjectPattern\") {","                    return;","                }","","                // getters and setters are ignored","                if (node.kind === \"get\" || node.kind === \"set\") {","                    return;","                }","","                // only computed methods can fail the following checks","                if (node.computed && node.value.type !== \"FunctionExpression\" && node.value.type !== \"ArrowFunctionExpression\") {","                    return;","                }","","                //--------------------------------------------------------------","                // Checks for property/method shorthand.","                if (isConciseProperty) {","                    if (node.method && (APPLY_NEVER || AVOID_QUOTES && isStringLiteral(node.key))) {","                        const message = APPLY_NEVER ? \"Expected longform method syntax.\" : \"Expected longform method syntax for string literal keys.\";","","                        // { x() {} } should be written as { x: function() {} }","                        context.report({","                            node,","                            message,","                            fix: fixer => makeFunctionLongform(fixer, node)","                        });","                    } else if (APPLY_NEVER) {","","                        // { x } should be written as { x: x }","                        context.report({","                            node,","                            message: \"Expected longform property syntax.\",","                            fix: fixer => fixer.insertTextAfter(node.key, `: ${node.key.name}`)","                        });","                    }","                } else if (APPLY_TO_METHODS && !node.value.id && (node.value.type === \"FunctionExpression\" || node.value.type === \"ArrowFunctionExpression\")) {","                    if (IGNORE_CONSTRUCTORS && isConstructor(node.key.name)) {","                        return;","                    }","                    if (AVOID_QUOTES && isStringLiteral(node.key)) {","                        return;","                    }","","                    // {[x]: function(){}} should be written as {[x]() {}}","                    if (node.value.type === \"FunctionExpression\" ||","                        node.value.type === \"ArrowFunctionExpression\" &&","                        node.value.body.type === \"BlockStatement\" &&","                        AVOID_EXPLICIT_RETURN_ARROWS &&","                        !arrowsWithLexicalIdentifiers.has(node.value)","                    ) {","                        context.report({","                            node,","                            message: \"Expected method shorthand.\",","                            fix: fixer => makeFunctionShorthand(fixer, node)","                        });","                    }","                } else if (node.value.type === \"Identifier\" && node.key.name === node.value.name && APPLY_TO_PROPS) {","","                    // {x: x} should be written as {x}","                    context.report({","                        node,","                        message: \"Expected property shorthand.\",","                        fix(fixer) {","                            return fixer.replaceText(node, node.value.name);","                        }","                    });","                } else if (node.value.type === \"Identifier\" && node.key.type === \"Literal\" && node.key.value === node.value.name && APPLY_TO_PROPS) {","                    if (AVOID_QUOTES) {","                        return;","                    }","","                    // {\"x\": x} should be written as {x}","                    context.report({","                        node,","                        message: \"Expected property shorthand.\",","                        fix(fixer) {","                            return fixer.replaceText(node, node.value.name);","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"8":1,"20":1,"25":1,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"103":0,"104":0,"105":0,"106":0,"107":0,"119":1,"120":0,"122":0,"131":1,"132":0,"140":1,"141":0,"150":1,"153":0,"162":1,"163":0,"165":0,"166":0,"168":0,"169":0,"172":0,"181":1,"184":0,"187":0,"188":0,"192":0,"195":0,"196":0,"197":0,"201":0,"203":0,"204":0,"217":1,"218":0,"219":0,"220":0,"221":0,"223":0,"224":0,"225":0,"226":0,"229":0,"230":0,"231":0,"233":0,"238":0,"239":0,"240":0,"241":0,"242":0,"244":0,"257":1,"258":0,"259":0,"260":0,"261":0,"263":0,"264":0,"265":0,"266":0,"269":0,"282":0,"283":0,"284":0,"291":1,"292":0,"293":0,"294":0,"302":1,"303":0,"311":1,"312":0,"319":0,"328":0,"331":0,"337":0,"338":0,"342":0,"343":0,"348":0,"349":0,"350":0,"351":0,"356":0,"359":0,"360":0,"364":0,"365":0,"369":0,"370":0,"375":0,"376":0,"377":0,"380":0,"383":0,"385":0,"388":0,"391":0,"394":0,"395":0,"396":0,"398":0,"399":0,"403":0,"409":0,"412":0,"415":0,"418":0,"422":0,"425":0,"426":0,"427":0,"431":0,"435":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/one-var-declaration-per-line.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/one-var-declaration-per-line.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":28,"loc":{"start":{"line":28,"column":10},"end":{"line":28,"column":20}}},"2":{"name":"isForTypeSpecifier","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":45}}},"3":{"name":"checkForNewLine","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":39}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":86,"column":2}},"2":{"start":{"line":30,"column":8},"end":{"line":30,"column":83}},"3":{"start":{"line":31,"column":8},"end":{"line":31,"column":55}},"4":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"5":{"start":{"line":45,"column":12},"end":{"line":45,"column":110}},"6":{"start":{"line":54,"column":8},"end":{"line":75,"column":9}},"7":{"start":{"line":55,"column":12},"end":{"line":57,"column":13}},"8":{"start":{"line":56,"column":16},"end":{"line":56,"column":23}},"9":{"start":{"line":59,"column":12},"end":{"line":59,"column":51}},"10":{"start":{"line":60,"column":12},"end":{"line":60,"column":21}},"11":{"start":{"line":62,"column":12},"end":{"line":74,"column":15}},"12":{"start":{"line":63,"column":16},"end":{"line":72,"column":17}},"13":{"start":{"line":64,"column":20},"end":{"line":71,"column":21}},"14":{"start":{"line":65,"column":24},"end":{"line":70,"column":27}},"15":{"start":{"line":69,"column":42},"end":{"line":69,"column":79}},"16":{"start":{"line":73,"column":16},"end":{"line":73,"column":31}},"17":{"start":{"line":81,"column":8},"end":{"line":83,"column":10}}},"branchMap":{"1":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":19},"end":{"line":45,"column":45}},{"start":{"line":45,"column":49},"end":{"line":45,"column":77}},{"start":{"line":45,"column":81},"end":{"line":45,"column":109}}]},"2":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":12}},{"start":{"line":55,"column":12},"end":{"line":55,"column":12}}]},"3":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":63,"column":16}},{"start":{"line":63,"column":16},"end":{"line":63,"column":16}}]},"4":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":20},"end":{"line":63,"column":24}},{"start":{"line":63,"column":28},"end":{"line":63,"column":72}}]},"5":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":20},"end":{"line":64,"column":20}},{"start":{"line":64,"column":20},"end":{"line":64,"column":20}}]},"6":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":24},"end":{"line":64,"column":30}},{"start":{"line":64,"column":34},"end":{"line":64,"column":43}},{"start":{"line":64,"column":47},"end":{"line":64,"column":59}}]}},"code":["/**"," * @fileoverview Rule to check multiple var declarations per line"," * @author Alberto Rodríguez"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow newlines around variable declarations\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"always\", \"initializations\"]","            }","        ],","","        fixable: \"whitespace\"","    },","","    create(context) {","","        const ERROR_MESSAGE = \"Expected variable declaration to be on a new line.\";","        const always = context.options[0] === \"always\";","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","","        /**","         * Determine if provided keyword is a variant of for specifiers","         * @private","         * @param {string} keyword - keyword to test","         * @returns {boolean} True if `keyword` is a variant of for specifier","         */","        function isForTypeSpecifier(keyword) {","            return keyword === \"ForStatement\" || keyword === \"ForInStatement\" || keyword === \"ForOfStatement\";","        }","","        /**","         * Checks newlines around variable declarations.","         * @private","         * @param {ASTNode} node - `VariableDeclaration` node to test","         * @returns {void}","         */","        function checkForNewLine(node) {","            if (isForTypeSpecifier(node.parent.type)) {","                return;","            }","","            const declarations = node.declarations;","            let prev;","","            declarations.forEach(current => {","                if (prev && prev.loc.end.line === current.loc.start.line) {","                    if (always || prev.init || current.init) {","                        context.report({","                            node,","                            message: ERROR_MESSAGE,","                            loc: current.loc.start,","                            fix: fixer => fixer.insertTextBefore(current, \"\\n\")","                        });","                    }","                }","                prev = current;","            });","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            VariableDeclaration: checkForNewLine","        };","","    }","};",""],"l":{"11":1,"30":0,"31":0,"44":1,"45":0,"54":1,"55":0,"56":0,"59":0,"60":0,"62":0,"63":0,"64":0,"65":0,"69":0,"73":0,"81":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/one-var.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/one-var.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":1,"41":0,"42":0,"43":1,"44":0,"45":1,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":58,"loc":{"start":{"line":58,"column":10},"end":{"line":58,"column":20}}},"2":{"name":"startBlock","line":124,"loc":{"start":{"line":124,"column":8},"end":{"line":124,"column":30}}},"3":{"name":"startFunction","line":136,"loc":{"start":{"line":136,"column":8},"end":{"line":136,"column":33}}},"4":{"name":"endBlock","line":146,"loc":{"start":{"line":146,"column":8},"end":{"line":146,"column":28}}},"5":{"name":"endFunction","line":155,"loc":{"start":{"line":155,"column":8},"end":{"line":155,"column":31}}},"6":{"name":"recordTypes","line":168,"loc":{"start":{"line":168,"column":8},"end":{"line":168,"column":72}}},"7":{"name":"getCurrentScope","line":187,"loc":{"start":{"line":187,"column":8},"end":{"line":187,"column":48}}},"8":{"name":"countDeclarations","line":206,"loc":{"start":{"line":206,"column":8},"end":{"line":206,"column":49}}},"9":{"name":"hasOnlyOneStatement","line":226,"loc":{"start":{"line":226,"column":8},"end":{"line":226,"column":66}}},"10":{"name":"(anonymous_10)","line":268,"loc":{"start":{"line":268,"column":31},"end":{"line":268,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":367,"column":2}},"2":{"start":{"line":60,"column":8},"end":{"line":61,"column":33}},"3":{"start":{"line":63,"column":8},"end":{"line":63,"column":55}},"4":{"start":{"line":65,"column":8},"end":{"line":66,"column":10}},"5":{"start":{"line":68,"column":8},"end":{"line":110,"column":9}},"6":{"start":{"line":69,"column":12},"end":{"line":69,"column":69}},"7":{"start":{"line":70,"column":12},"end":{"line":70,"column":69}},"8":{"start":{"line":71,"column":12},"end":{"line":71,"column":71}},"9":{"start":{"line":72,"column":15},"end":{"line":110,"column":9}},"10":{"start":{"line":73,"column":12},"end":{"line":75,"column":13}},"11":{"start":{"line":74,"column":16},"end":{"line":74,"column":81}},"12":{"start":{"line":76,"column":12},"end":{"line":78,"column":13}},"13":{"start":{"line":77,"column":16},"end":{"line":77,"column":81}},"14":{"start":{"line":79,"column":12},"end":{"line":81,"column":13}},"15":{"start":{"line":80,"column":16},"end":{"line":80,"column":87}},"16":{"start":{"line":82,"column":12},"end":{"line":95,"column":13}},"17":{"start":{"line":83,"column":16},"end":{"line":85,"column":17}},"18":{"start":{"line":84,"column":20},"end":{"line":84,"column":37}},"19":{"start":{"line":86,"column":16},"end":{"line":88,"column":17}},"20":{"start":{"line":87,"column":20},"end":{"line":87,"column":37}},"21":{"start":{"line":89,"column":16},"end":{"line":91,"column":17}},"22":{"start":{"line":90,"column":20},"end":{"line":90,"column":39}},"23":{"start":{"line":92,"column":16},"end":{"line":92,"column":63}},"24":{"start":{"line":93,"column":16},"end":{"line":93,"column":63}},"25":{"start":{"line":94,"column":16},"end":{"line":94,"column":65}},"26":{"start":{"line":96,"column":12},"end":{"line":109,"column":13}},"27":{"start":{"line":97,"column":16},"end":{"line":99,"column":17}},"28":{"start":{"line":98,"column":20},"end":{"line":98,"column":37}},"29":{"start":{"line":100,"column":16},"end":{"line":102,"column":17}},"30":{"start":{"line":101,"column":20},"end":{"line":101,"column":37}},"31":{"start":{"line":103,"column":16},"end":{"line":105,"column":17}},"32":{"start":{"line":104,"column":20},"end":{"line":104,"column":39}},"33":{"start":{"line":106,"column":16},"end":{"line":106,"column":59}},"34":{"start":{"line":107,"column":16},"end":{"line":107,"column":59}},"35":{"start":{"line":108,"column":16},"end":{"line":108,"column":61}},"36":{"start":{"line":116,"column":8},"end":{"line":116,"column":33}},"37":{"start":{"line":117,"column":8},"end":{"line":117,"column":30}},"38":{"start":{"line":124,"column":8},"end":{"line":129,"column":9}},"39":{"start":{"line":125,"column":12},"end":{"line":128,"column":15}},"40":{"start":{"line":136,"column":8},"end":{"line":139,"column":9}},"41":{"start":{"line":137,"column":12},"end":{"line":137,"column":77}},"42":{"start":{"line":138,"column":12},"end":{"line":138,"column":25}},"43":{"start":{"line":146,"column":8},"end":{"line":148,"column":9}},"44":{"start":{"line":147,"column":12},"end":{"line":147,"column":29}},"45":{"start":{"line":155,"column":8},"end":{"line":158,"column":9}},"46":{"start":{"line":156,"column":12},"end":{"line":156,"column":32}},"47":{"start":{"line":157,"column":12},"end":{"line":157,"column":23}},"48":{"start":{"line":168,"column":8},"end":{"line":180,"column":9}},"49":{"start":{"line":169,"column":12},"end":{"line":179,"column":13}},"50":{"start":{"line":170,"column":16},"end":{"line":178,"column":17}},"51":{"start":{"line":171,"column":20},"end":{"line":173,"column":21}},"52":{"start":{"line":172,"column":24},"end":{"line":172,"column":58}},"53":{"start":{"line":175,"column":20},"end":{"line":177,"column":21}},"54":{"start":{"line":176,"column":24},"end":{"line":176,"column":56}},"55":{"start":{"line":187,"column":8},"end":{"line":198,"column":9}},"56":{"start":{"line":188,"column":12},"end":{"line":188,"column":29}},"57":{"start":{"line":190,"column":12},"end":{"line":196,"column":13}},"58":{"start":{"line":191,"column":16},"end":{"line":191,"column":71}},"59":{"start":{"line":192,"column":19},"end":{"line":196,"column":13}},"60":{"start":{"line":193,"column":16},"end":{"line":193,"column":69}},"61":{"start":{"line":194,"column":19},"end":{"line":196,"column":13}},"62":{"start":{"line":195,"column":16},"end":{"line":195,"column":71}},"63":{"start":{"line":197,"column":12},"end":{"line":197,"column":32}},"64":{"start":{"line":206,"column":8},"end":{"line":217,"column":9}},"65":{"start":{"line":207,"column":12},"end":{"line":207,"column":64}},"66":{"start":{"line":209,"column":12},"end":{"line":215,"column":13}},"67":{"start":{"line":210,"column":16},"end":{"line":214,"column":17}},"68":{"start":{"line":211,"column":20},"end":{"line":211,"column":43}},"69":{"start":{"line":213,"column":20},"end":{"line":213,"column":41}},"70":{"start":{"line":216,"column":12},"end":{"line":216,"column":26}},"71":{"start":{"line":226,"column":8},"end":{"line":250,"column":9}},"72":{"start":{"line":228,"column":12},"end":{"line":228,"column":70}},"73":{"start":{"line":229,"column":12},"end":{"line":229,"column":64}},"74":{"start":{"line":230,"column":12},"end":{"line":230,"column":64}},"75":{"start":{"line":232,"column":12},"end":{"line":236,"column":13}},"76":{"start":{"line":233,"column":16},"end":{"line":235,"column":17}},"77":{"start":{"line":234,"column":20},"end":{"line":234,"column":33}},"78":{"start":{"line":238,"column":12},"end":{"line":242,"column":13}},"79":{"start":{"line":239,"column":16},"end":{"line":241,"column":17}},"80":{"start":{"line":240,"column":20},"end":{"line":240,"column":33}},"81":{"start":{"line":243,"column":12},"end":{"line":247,"column":13}},"82":{"start":{"line":244,"column":16},"end":{"line":246,"column":17}},"83":{"start":{"line":245,"column":20},"end":{"line":245,"column":33}},"84":{"start":{"line":248,"column":12},"end":{"line":248,"column":67}},"85":{"start":{"line":249,"column":12},"end":{"line":249,"column":24}},"86":{"start":{"line":257,"column":8},"end":{"line":364,"column":10}},"87":{"start":{"line":269,"column":16},"end":{"line":269,"column":43}},"88":{"start":{"line":270,"column":16},"end":{"line":270,"column":39}},"89":{"start":{"line":272,"column":16},"end":{"line":274,"column":17}},"90":{"start":{"line":273,"column":20},"end":{"line":273,"column":27}},"91":{"start":{"line":276,"column":16},"end":{"line":276,"column":55}},"92":{"start":{"line":277,"column":16},"end":{"line":277,"column":74}},"93":{"start":{"line":280,"column":16},"end":{"line":312,"column":17}},"94":{"start":{"line":281,"column":20},"end":{"line":311,"column":21}},"95":{"start":{"line":282,"column":24},"end":{"line":288,"column":27}},"96":{"start":{"line":290,"column":24},"end":{"line":298,"column":25}},"97":{"start":{"line":291,"column":28},"end":{"line":297,"column":31}},"98":{"start":{"line":299,"column":24},"end":{"line":310,"column":25}},"99":{"start":{"line":300,"column":28},"end":{"line":302,"column":29}},"100":{"start":{"line":301,"column":32},"end":{"line":301,"column":39}},"101":{"start":{"line":303,"column":28},"end":{"line":309,"column":31}},"102":{"start":{"line":315,"column":16},"end":{"line":352,"column":17}},"103":{"start":{"line":316,"column":20},"end":{"line":316,"column":110}},"104":{"start":{"line":318,"column":20},"end":{"line":351,"column":21}},"105":{"start":{"line":320,"column":24},"end":{"line":350,"column":25}},"106":{"start":{"line":323,"column":28},"end":{"line":329,"column":31}},"107":{"start":{"line":330,"column":31},"end":{"line":350,"column":25}},"108":{"start":{"line":333,"column":28},"end":{"line":339,"column":31}},"109":{"start":{"line":340,"column":31},"end":{"line":350,"column":25}},"110":{"start":{"line":343,"column":28},"end":{"line":349,"column":31}}},"branchMap":{"1":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":21},"end":{"line":63,"column":39}},{"start":{"line":63,"column":43},"end":{"line":63,"column":54}}]},"2":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":15},"end":{"line":72,"column":15}},{"start":{"line":72,"column":15},"end":{"line":72,"column":15}}]},"4":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":12},"end":{"line":73,"column":12}},{"start":{"line":73,"column":12},"end":{"line":73,"column":12}}]},"5":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":16},"end":{"line":73,"column":42}},{"start":{"line":73,"column":46},"end":{"line":73,"column":74}}]},"6":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":12}},{"start":{"line":76,"column":12},"end":{"line":76,"column":12}}]},"7":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":16},"end":{"line":76,"column":42}},{"start":{"line":76,"column":46},"end":{"line":76,"column":74}}]},"8":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":12}},{"start":{"line":79,"column":12},"end":{"line":79,"column":12}}]},"9":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":44}},{"start":{"line":79,"column":48},"end":{"line":79,"column":78}}]},"10":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":12},"end":{"line":82,"column":12}},{"start":{"line":82,"column":12},"end":{"line":82,"column":12}}]},"11":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":16},"end":{"line":83,"column":16}},{"start":{"line":83,"column":16},"end":{"line":83,"column":16}}]},"12":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":16},"end":{"line":86,"column":16}},{"start":{"line":86,"column":16},"end":{"line":86,"column":16}}]},"13":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":16},"end":{"line":89,"column":16}},{"start":{"line":89,"column":16},"end":{"line":89,"column":16}}]},"14":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":12},"end":{"line":96,"column":12}},{"start":{"line":96,"column":12},"end":{"line":96,"column":12}}]},"15":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":16},"end":{"line":97,"column":16}},{"start":{"line":97,"column":16},"end":{"line":97,"column":16}}]},"16":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":16},"end":{"line":100,"column":16}},{"start":{"line":100,"column":16},"end":{"line":100,"column":16}}]},"17":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":16},"end":{"line":103,"column":16}},{"start":{"line":103,"column":16},"end":{"line":103,"column":16}}]},"18":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":16},"end":{"line":170,"column":16}},{"start":{"line":170,"column":16},"end":{"line":170,"column":16}}]},"19":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":20},"end":{"line":171,"column":20}},{"start":{"line":171,"column":20},"end":{"line":171,"column":20}}]},"20":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":24},"end":{"line":171,"column":46}},{"start":{"line":171,"column":50},"end":{"line":171,"column":102}}]},"21":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":20},"end":{"line":175,"column":20}},{"start":{"line":175,"column":20},"end":{"line":175,"column":20}}]},"22":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":24},"end":{"line":175,"column":46}},{"start":{"line":175,"column":50},"end":{"line":175,"column":100}}]},"23":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":12},"end":{"line":190,"column":12}},{"start":{"line":190,"column":12},"end":{"line":190,"column":12}}]},"24":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":19},"end":{"line":192,"column":19}},{"start":{"line":192,"column":19},"end":{"line":192,"column":19}}]},"25":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":19},"end":{"line":194,"column":19}},{"start":{"line":194,"column":19},"end":{"line":194,"column":19}}]},"26":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":16},"end":{"line":210,"column":16}},{"start":{"line":210,"column":16},"end":{"line":210,"column":16}}]},"27":{"line":229,"type":"binary-expr","locations":[{"start":{"line":229,"column":35},"end":{"line":229,"column":57}},{"start":{"line":229,"column":61},"end":{"line":229,"column":63}}]},"28":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":12},"end":{"line":232,"column":12}},{"start":{"line":232,"column":12},"end":{"line":232,"column":12}}]},"29":{"line":232,"type":"binary-expr","locations":[{"start":{"line":232,"column":16},"end":{"line":232,"column":60}},{"start":{"line":232,"column":64},"end":{"line":232,"column":106}}]},"30":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":16},"end":{"line":233,"column":16}},{"start":{"line":233,"column":16},"end":{"line":233,"column":16}}]},"31":{"line":233,"type":"binary-expr","locations":[{"start":{"line":233,"column":20},"end":{"line":233,"column":46}},{"start":{"line":233,"column":50},"end":{"line":233,"column":74}}]},"32":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":12},"end":{"line":238,"column":12}},{"start":{"line":238,"column":12},"end":{"line":238,"column":12}}]},"33":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":16},"end":{"line":239,"column":16}},{"start":{"line":239,"column":16},"end":{"line":239,"column":16}}]},"34":{"line":239,"type":"binary-expr","locations":[{"start":{"line":239,"column":20},"end":{"line":239,"column":64}},{"start":{"line":239,"column":68},"end":{"line":239,"column":94}}]},"35":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":12},"end":{"line":243,"column":12}},{"start":{"line":243,"column":12},"end":{"line":243,"column":12}}]},"36":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":16},"end":{"line":244,"column":16}},{"start":{"line":244,"column":16},"end":{"line":244,"column":16}}]},"37":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":20},"end":{"line":244,"column":62}},{"start":{"line":244,"column":66},"end":{"line":244,"column":90}}]},"38":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":16},"end":{"line":272,"column":16}},{"start":{"line":272,"column":16},"end":{"line":272,"column":16}}]},"39":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":16},"end":{"line":280,"column":16}},{"start":{"line":280,"column":16},"end":{"line":280,"column":16}}]},"40":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":20},"end":{"line":281,"column":20}},{"start":{"line":281,"column":20},"end":{"line":281,"column":20}}]},"41":{"line":281,"type":"binary-expr","locations":[{"start":{"line":281,"column":24},"end":{"line":281,"column":65}},{"start":{"line":281,"column":69},"end":{"line":281,"column":112}}]},"42":{"line":290,"type":"if","locations":[{"start":{"line":290,"column":24},"end":{"line":290,"column":24}},{"start":{"line":290,"column":24},"end":{"line":290,"column":24}}]},"43":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":24},"end":{"line":299,"column":24}},{"start":{"line":299,"column":24},"end":{"line":299,"column":24}}]},"44":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":28},"end":{"line":300,"column":28}},{"start":{"line":300,"column":28},"end":{"line":300,"column":28}}]},"45":{"line":300,"type":"binary-expr","locations":[{"start":{"line":300,"column":32},"end":{"line":300,"column":57}},{"start":{"line":300,"column":62},"end":{"line":300,"column":99}},{"start":{"line":300,"column":103},"end":{"line":300,"column":140}}]},"46":{"line":315,"type":"if","locations":[{"start":{"line":315,"column":16},"end":{"line":315,"column":16}},{"start":{"line":315,"column":16},"end":{"line":315,"column":16}}]},"47":{"line":315,"type":"binary-expr","locations":[{"start":{"line":315,"column":20},"end":{"line":315,"column":50}},{"start":{"line":315,"column":54},"end":{"line":315,"column":74}}]},"48":{"line":318,"type":"if","locations":[{"start":{"line":318,"column":20},"end":{"line":318,"column":20}},{"start":{"line":318,"column":20},"end":{"line":318,"column":20}}]},"49":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":24},"end":{"line":320,"column":24}},{"start":{"line":320,"column":24},"end":{"line":320,"column":24}}]},"50":{"line":320,"type":"binary-expr","locations":[{"start":{"line":320,"column":28},"end":{"line":320,"column":68}},{"start":{"line":320,"column":72},"end":{"line":320,"column":114}}]},"51":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":31},"end":{"line":330,"column":31}},{"start":{"line":330,"column":31},"end":{"line":330,"column":31}}]},"52":{"line":330,"type":"binary-expr","locations":[{"start":{"line":330,"column":35},"end":{"line":330,"column":75}},{"start":{"line":330,"column":79},"end":{"line":330,"column":112}}]},"53":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":31},"end":{"line":340,"column":31}},{"start":{"line":340,"column":31},"end":{"line":340,"column":31}}]},"54":{"line":340,"type":"binary-expr","locations":[{"start":{"line":340,"column":35},"end":{"line":340,"column":77}},{"start":{"line":340,"column":81},"end":{"line":340,"column":116}}]}},"code":["/**"," * @fileoverview A rule to control the use of single variable declarations."," * @author Ian Christian Myers"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce variables to be declared either together or separately in functions\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"always\", \"never\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            var: {","                                enum: [\"always\", \"never\"]","                            },","                            let: {","                                enum: [\"always\", \"never\"]","                            },","                            const: {","                                enum: [\"always\", \"never\"]","                            }","                        },","                        additionalProperties: false","                    },","                    {","                        type: \"object\",","                        properties: {","                            initialized: {","                                enum: [\"always\", \"never\"]","                            },","                            uninitialized: {","                                enum: [\"always\", \"never\"]","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","","        const MODE_ALWAYS = \"always\",","            MODE_NEVER = \"never\";","","        const mode = context.options[0] || MODE_ALWAYS;","","        const options = {","        };","","        if (typeof mode === \"string\") { // simple options configuration with just a string","            options.var = { uninitialized: mode, initialized: mode };","            options.let = { uninitialized: mode, initialized: mode };","            options.const = { uninitialized: mode, initialized: mode };","        } else if (typeof mode === \"object\") { // options configuration is an object","            if (mode.hasOwnProperty(\"var\") && typeof mode.var === \"string\") {","                options.var = { uninitialized: mode.var, initialized: mode.var };","            }","            if (mode.hasOwnProperty(\"let\") && typeof mode.let === \"string\") {","                options.let = { uninitialized: mode.let, initialized: mode.let };","            }","            if (mode.hasOwnProperty(\"const\") && typeof mode.const === \"string\") {","                options.const = { uninitialized: mode.const, initialized: mode.const };","            }","            if (mode.hasOwnProperty(\"uninitialized\")) {","                if (!options.var) {","                    options.var = {};","                }","                if (!options.let) {","                    options.let = {};","                }","                if (!options.const) {","                    options.const = {};","                }","                options.var.uninitialized = mode.uninitialized;","                options.let.uninitialized = mode.uninitialized;","                options.const.uninitialized = mode.uninitialized;","            }","            if (mode.hasOwnProperty(\"initialized\")) {","                if (!options.var) {","                    options.var = {};","                }","                if (!options.let) {","                    options.let = {};","                }","                if (!options.const) {","                    options.const = {};","                }","                options.var.initialized = mode.initialized;","                options.let.initialized = mode.initialized;","                options.const.initialized = mode.initialized;","            }","        }","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        const functionStack = [];","        const blockStack = [];","","        /**","         * Increments the blockStack counter.","         * @returns {void}","         * @private","         */","        function startBlock() {","            blockStack.push({","                let: { initialized: false, uninitialized: false },","                const: { initialized: false, uninitialized: false }","            });","        }","","        /**","         * Increments the functionStack counter.","         * @returns {void}","         * @private","         */","        function startFunction() {","            functionStack.push({ initialized: false, uninitialized: false });","            startBlock();","        }","","        /**","         * Decrements the blockStack counter.","         * @returns {void}","         * @private","         */","        function endBlock() {","            blockStack.pop();","        }","","        /**","         * Decrements the functionStack counter.","         * @returns {void}","         * @private","         */","        function endFunction() {","            functionStack.pop();","            endBlock();","        }","","        /**","         * Records whether initialized or uninitialized variables are defined in current scope.","         * @param {string} statementType node.kind, one of: \"var\", \"let\", or \"const\"","         * @param {ASTNode[]} declarations List of declarations","         * @param {Object} currentScope The scope being investigated","         * @returns {void}","         * @private","         */","        function recordTypes(statementType, declarations, currentScope) {","            for (let i = 0; i < declarations.length; i++) {","                if (declarations[i].init === null) {","                    if (options[statementType] && options[statementType].uninitialized === MODE_ALWAYS) {","                        currentScope.uninitialized = true;","                    }","                } else {","                    if (options[statementType] && options[statementType].initialized === MODE_ALWAYS) {","                        currentScope.initialized = true;","                    }","                }","            }","        }","","        /**","         * Determines the current scope (function or block)","         * @param  {string} statementType node.kind, one of: \"var\", \"let\", or \"const\"","         * @returns {Object} The scope associated with statementType","         */","        function getCurrentScope(statementType) {","            let currentScope;","","            if (statementType === \"var\") {","                currentScope = functionStack[functionStack.length - 1];","            } else if (statementType === \"let\") {","                currentScope = blockStack[blockStack.length - 1].let;","            } else if (statementType === \"const\") {","                currentScope = blockStack[blockStack.length - 1].const;","            }","            return currentScope;","        }","","        /**","         * Counts the number of initialized and uninitialized declarations in a list of declarations","         * @param {ASTNode[]} declarations List of declarations","         * @returns {Object} Counts of 'uninitialized' and 'initialized' declarations","         * @private","         */","        function countDeclarations(declarations) {","            const counts = { uninitialized: 0, initialized: 0 };","","            for (let i = 0; i < declarations.length; i++) {","                if (declarations[i].init === null) {","                    counts.uninitialized++;","                } else {","                    counts.initialized++;","                }","            }","            return counts;","        }","","        /**","         * Determines if there is more than one var statement in the current scope.","         * @param {string} statementType node.kind, one of: \"var\", \"let\", or \"const\"","         * @param {ASTNode[]} declarations List of declarations","         * @returns {boolean} Returns true if it is the first var declaration, false if not.","         * @private","         */","        function hasOnlyOneStatement(statementType, declarations) {","","            const declarationCounts = countDeclarations(declarations);","            const currentOptions = options[statementType] || {};","            const currentScope = getCurrentScope(statementType);","","            if (currentOptions.uninitialized === MODE_ALWAYS && currentOptions.initialized === MODE_ALWAYS) {","                if (currentScope.uninitialized || currentScope.initialized) {","                    return false;","                }","            }","","            if (declarationCounts.uninitialized > 0) {","                if (currentOptions.uninitialized === MODE_ALWAYS && currentScope.uninitialized) {","                    return false;","                }","            }","            if (declarationCounts.initialized > 0) {","                if (currentOptions.initialized === MODE_ALWAYS && currentScope.initialized) {","                    return false;","                }","            }","            recordTypes(statementType, declarations, currentScope);","            return true;","        }","","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            Program: startFunction,","            FunctionDeclaration: startFunction,","            FunctionExpression: startFunction,","            ArrowFunctionExpression: startFunction,","            BlockStatement: startBlock,","            ForStatement: startBlock,","            ForInStatement: startBlock,","            ForOfStatement: startBlock,","            SwitchStatement: startBlock,","","            VariableDeclaration(node) {","                const parent = node.parent;","                const type = node.kind;","","                if (!options[type]) {","                    return;","                }","","                const declarations = node.declarations;","                const declarationCounts = countDeclarations(declarations);","","                // always","                if (!hasOnlyOneStatement(type, declarations)) {","                    if (options[type].initialized === MODE_ALWAYS && options[type].uninitialized === MODE_ALWAYS) {","                        context.report({","                            node,","                            message: \"Combine this with the previous '{{type}}' statement.\",","                            data: {","                                type","                            }","                        });","                    } else {","                        if (options[type].initialized === MODE_ALWAYS) {","                            context.report({","                                node,","                                message: \"Combine this with the previous '{{type}}' statement with initialized variables.\",","                                data: {","                                    type","                                }","                            });","                        }","                        if (options[type].uninitialized === MODE_ALWAYS) {","                            if (node.parent.left === node && (node.parent.type === \"ForInStatement\" || node.parent.type === \"ForOfStatement\")) {","                                return;","                            }","                            context.report({","                                node,","                                message: \"Combine this with the previous '{{type}}' statement with uninitialized variables.\",","                                data: {","                                    type","                                }","                            });","                        }","                    }","                }","","                // never","                if (parent.type !== \"ForStatement\" || parent.init !== node) {","                    const totalDeclarations = declarationCounts.uninitialized + declarationCounts.initialized;","","                    if (totalDeclarations > 1) {","","                        if (options[type].initialized === MODE_NEVER && options[type].uninitialized === MODE_NEVER) {","","                            // both initialized and uninitialized","                            context.report({","                                node,","                                message: \"Split '{{type}}' declarations into multiple statements.\",","                                data: {","                                    type","                                }","                            });","                        } else if (options[type].initialized === MODE_NEVER && declarationCounts.initialized > 0) {","","                            // initialized","                            context.report({","                                node,","                                message: \"Split initialized '{{type}}' declarations into multiple statements.\",","                                data: {","                                    type","                                }","                            });","                        } else if (options[type].uninitialized === MODE_NEVER && declarationCounts.uninitialized > 0) {","","                            // uninitialized","                            context.report({","                                node,","                                message: \"Split uninitialized '{{type}}' declarations into multiple statements.\",","                                data: {","                                    type","                                }","                            });","                        }","                    }","                }","            },","","            \"ForStatement:exit\": endBlock,","            \"ForOfStatement:exit\": endBlock,","            \"ForInStatement:exit\": endBlock,","            \"SwitchStatement:exit\": endBlock,","            \"BlockStatement:exit\": endBlock,","            \"Program:exit\": endFunction,","            \"FunctionDeclaration:exit\": endFunction,","            \"FunctionExpression:exit\": endFunction,","            \"ArrowFunctionExpression:exit\": endFunction","        };","","    }","};",""],"l":{"12":1,"60":0,"63":0,"65":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"76":0,"77":0,"79":0,"80":0,"82":0,"83":0,"84":0,"86":0,"87":0,"89":0,"90":0,"92":0,"93":0,"94":0,"96":0,"97":0,"98":0,"100":0,"101":0,"103":0,"104":0,"106":0,"107":0,"108":0,"116":0,"117":0,"124":1,"125":0,"136":1,"137":0,"138":0,"146":1,"147":0,"155":1,"156":0,"157":0,"168":1,"169":0,"170":0,"171":0,"172":0,"175":0,"176":0,"187":1,"188":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"197":0,"206":1,"207":0,"209":0,"210":0,"211":0,"213":0,"216":0,"226":1,"228":0,"229":0,"230":0,"232":0,"233":0,"234":0,"238":0,"239":0,"240":0,"243":0,"244":0,"245":0,"248":0,"249":0,"257":0,"269":0,"270":0,"272":0,"273":0,"276":0,"277":0,"280":0,"281":0,"282":0,"290":0,"291":0,"299":0,"300":0,"301":0,"303":0,"315":0,"316":0,"318":0,"320":0,"323":0,"330":0,"333":0,"340":0,"343":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/operator-assignment.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/operator-assignment.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"isCommutativeOperatorWithShorthand","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":54}}},"2":{"name":"isNonCommutativeOperatorWithShorthand","line":35,"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":57}}},"3":{"name":"same","line":53,"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":20}}},"4":{"name":"canBeFixed","line":85,"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":26}}},"5":{"name":"(anonymous_5)","line":107,"loc":{"start":{"line":107,"column":10},"end":{"line":107,"column":20}}},"6":{"name":"getOperatorToken","line":116,"loc":{"start":{"line":116,"column":8},"end":{"line":116,"column":40}}},"7":{"name":"verify","line":125,"loc":{"start":{"line":125,"column":8},"end":{"line":125,"column":30}}},"8":{"name":"(anonymous_8)","line":139,"loc":{"start":{"line":139,"column":27},"end":{"line":139,"column":35}}},"9":{"name":"prohibit","line":171,"loc":{"start":{"line":171,"column":8},"end":{"line":171,"column":32}}},"10":{"name":"(anonymous_10)","line":176,"loc":{"start":{"line":176,"column":23},"end":{"line":176,"column":31}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":24,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":55}},"4":{"start":{"line":35,"column":0},"end":{"line":37,"column":1}},"5":{"start":{"line":36,"column":4},"end":{"line":36,"column":80}},"6":{"start":{"line":53,"column":0},"end":{"line":77,"column":1}},"7":{"start":{"line":54,"column":4},"end":{"line":56,"column":5}},"8":{"start":{"line":55,"column":8},"end":{"line":55,"column":21}},"9":{"start":{"line":58,"column":4},"end":{"line":76,"column":5}},"10":{"start":{"line":60,"column":12},"end":{"line":60,"column":37}},"11":{"start":{"line":63,"column":12},"end":{"line":63,"column":39}},"12":{"start":{"line":72,"column":12},"end":{"line":72,"column":76}},"13":{"start":{"line":75,"column":12},"end":{"line":75,"column":25}},"14":{"start":{"line":85,"column":0},"end":{"line":88,"column":1}},"15":{"start":{"line":86,"column":4},"end":{"line":87,"column":134}},"16":{"start":{"line":90,"column":0},"end":{"line":206,"column":2}},"17":{"start":{"line":109,"column":8},"end":{"line":109,"column":51}},"18":{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},"19":{"start":{"line":117,"column":12},"end":{"line":117,"column":114}},"20":{"start":{"line":117,"column":83},"end":{"line":117,"column":112}},"21":{"start":{"line":125,"column":8},"end":{"line":164,"column":9}},"22":{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},"23":{"start":{"line":127,"column":16},"end":{"line":127,"column":23}},"24":{"start":{"line":130,"column":12},"end":{"line":130,"column":35}},"25":{"start":{"line":131,"column":12},"end":{"line":131,"column":36}},"26":{"start":{"line":132,"column":12},"end":{"line":132,"column":43}},"27":{"start":{"line":134,"column":12},"end":{"line":163,"column":13}},"28":{"start":{"line":135,"column":16},"end":{"line":162,"column":17}},"29":{"start":{"line":136,"column":20},"end":{"line":150,"column":23}},"30":{"start":{"line":140,"column":28},"end":{"line":147,"column":29}},"31":{"start":{"line":141,"column":32},"end":{"line":141,"column":75}},"32":{"start":{"line":142,"column":32},"end":{"line":142,"column":77}},"33":{"start":{"line":143,"column":32},"end":{"line":143,"column":113}},"34":{"start":{"line":144,"column":32},"end":{"line":144,"column":122}},"35":{"start":{"line":146,"column":32},"end":{"line":146,"column":107}},"36":{"start":{"line":148,"column":28},"end":{"line":148,"column":40}},"37":{"start":{"line":151,"column":23},"end":{"line":162,"column":17}},"38":{"start":{"line":158,"column":20},"end":{"line":161,"column":23}},"39":{"start":{"line":171,"column":8},"end":{"line":199,"column":9}},"40":{"start":{"line":172,"column":12},"end":{"line":198,"column":13}},"41":{"start":{"line":173,"column":16},"end":{"line":197,"column":19}},"42":{"start":{"line":177,"column":24},"end":{"line":194,"column":25}},"43":{"start":{"line":178,"column":28},"end":{"line":178,"column":73}},"44":{"start":{"line":179,"column":28},"end":{"line":179,"column":111}},"45":{"start":{"line":180,"column":28},"end":{"line":180,"column":75}},"46":{"start":{"line":181,"column":28},"end":{"line":181,"column":42}},"47":{"start":{"line":184,"column":28},"end":{"line":191,"column":29}},"48":{"start":{"line":188,"column":32},"end":{"line":188,"column":151}},"49":{"start":{"line":190,"column":32},"end":{"line":190,"column":105}},"50":{"start":{"line":193,"column":28},"end":{"line":193,"column":113}},"51":{"start":{"line":195,"column":24},"end":{"line":195,"column":36}},"52":{"start":{"line":201,"column":8},"end":{"line":203,"column":10}}},"branchMap":{"1":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"2":{"line":58,"type":"switch","locations":[{"start":{"line":59,"column":8},"end":{"line":60,"column":37}},{"start":{"line":62,"column":8},"end":{"line":63,"column":39}},{"start":{"line":65,"column":8},"end":{"line":72,"column":76}},{"start":{"line":74,"column":8},"end":{"line":75,"column":25}}]},"3":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":19},"end":{"line":72,"column":43}},{"start":{"line":72,"column":47},"end":{"line":72,"column":75}}]},"4":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":11},"end":{"line":86,"column":37}},{"start":{"line":87,"column":8},"end":{"line":87,"column":40}},{"start":{"line":87,"column":44},"end":{"line":87,"column":77}},{"start":{"line":87,"column":82},"end":{"line":87,"column":96}},{"start":{"line":87,"column":100},"end":{"line":87,"column":132}}]},"5":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":12}},{"start":{"line":126,"column":12},"end":{"line":126,"column":12}}]},"6":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":16},"end":{"line":126,"column":37}},{"start":{"line":126,"column":41},"end":{"line":126,"column":79}}]},"7":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":12},"end":{"line":134,"column":12}},{"start":{"line":134,"column":12},"end":{"line":134,"column":12}}]},"8":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":60}},{"start":{"line":134,"column":64},"end":{"line":134,"column":111}}]},"9":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":16},"end":{"line":135,"column":16}},{"start":{"line":135,"column":16},"end":{"line":135,"column":16}}]},"10":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":28},"end":{"line":140,"column":28}},{"start":{"line":140,"column":28},"end":{"line":140,"column":28}}]},"11":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":23},"end":{"line":151,"column":23}},{"start":{"line":151,"column":23},"end":{"line":151,"column":23}}]},"12":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":27},"end":{"line":151,"column":49}},{"start":{"line":151,"column":53},"end":{"line":151,"column":97}}]},"13":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":12},"end":{"line":172,"column":12}},{"start":{"line":172,"column":12},"end":{"line":172,"column":12}}]},"14":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":24},"end":{"line":177,"column":24}},{"start":{"line":177,"column":24},"end":{"line":177,"column":24}}]},"15":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":28},"end":{"line":184,"column":28}},{"start":{"line":184,"column":28},"end":{"line":184,"column":28}}]},"16":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":32},"end":{"line":185,"column":145}},{"start":{"line":186,"column":32},"end":{"line":186,"column":81}}]},"17":{"line":202,"type":"cond-expr","locations":[{"start":{"line":202,"column":67},"end":{"line":202,"column":73}},{"start":{"line":202,"column":76},"end":{"line":202,"column":84}}]}},"code":["/**"," * @fileoverview Rule to replace assignment expressions with operator assignment"," * @author Brandon Mills"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether an operator is commutative and has an operator assignment"," * shorthand form."," * @param   {string}  operator Operator to check."," * @returns {boolean}          True if the operator is commutative and has a"," *     shorthand form."," */","function isCommutativeOperatorWithShorthand(operator) {","    return [\"*\", \"&\", \"^\", \"|\"].indexOf(operator) >= 0;","}","","/**"," * Checks whether an operator is not commuatative and has an operator assignment"," * shorthand form."," * @param   {string}  operator Operator to check."," * @returns {boolean}          True if the operator is not commuatative and has"," *     a shorthand form."," */","function isNonCommutativeOperatorWithShorthand(operator) {","    return [\"+\", \"-\", \"/\", \"%\", \"<<\", \">>\", \">>>\", \"**\"].indexOf(operator) >= 0;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","/**"," * Checks whether two expressions reference the same value. For example:"," *     a = a"," *     a.b = a.b"," *     a[0] = a[0]"," *     a['b'] = a['b']"," * @param   {ASTNode} a Left side of the comparison."," * @param   {ASTNode} b Right side of the comparison."," * @returns {boolean}   True if both sides match and reference the same value."," */","function same(a, b) {","    if (a.type !== b.type) {","        return false;","    }","","    switch (a.type) {","        case \"Identifier\":","            return a.name === b.name;","","        case \"Literal\":","            return a.value === b.value;","","        case \"MemberExpression\":","","            /*","             * x[0] = x[0]","             * x[y] = x[y]","             * x.y = x.y","             */","            return same(a.object, b.object) && same(a.property, b.property);","","        default:","            return false;","    }","}","","/**","* Determines if the left side of a node can be safely fixed (i.e. if it activates the same getters/setters and)","* toString calls regardless of whether assignment shorthand is used)","* @param {ASTNode} node The node on the left side of the expression","* @returns {boolean} `true` if the node can be fixed","*/","function canBeFixed(node) {","    return node.type === \"Identifier\" ||","        node.type === \"MemberExpression\" && node.object.type === \"Identifier\" && (!node.computed || node.property.type === \"Literal\");","}","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow assignment operator shorthand where possible\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"always\", \"never\"]","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","","        const sourceCode = context.getSourceCode();","","        /**","        * Returns the operator token of an AssignmentExpression or BinaryExpression","        * @param {ASTNode} node An AssignmentExpression or BinaryExpression node","        * @returns {Token} The operator token in the node","        */","        function getOperatorToken(node) {","            return sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);","        }","","        /**","         * Ensures that an assignment uses the shorthand form where possible.","         * @param   {ASTNode} node An AssignmentExpression node.","         * @returns {void}","         */","        function verify(node) {","            if (node.operator !== \"=\" || node.right.type !== \"BinaryExpression\") {","                return;","            }","","            const left = node.left;","            const expr = node.right;","            const operator = expr.operator;","","            if (isCommutativeOperatorWithShorthand(operator) || isNonCommutativeOperatorWithShorthand(operator)) {","                if (same(left, expr.left)) {","                    context.report({","                        node,","                        message: \"Assignment can be replaced with operator assignment.\",","                        fix(fixer) {","                            if (canBeFixed(left)) {","                                const equalsToken = getOperatorToken(node);","                                const operatorToken = getOperatorToken(expr);","                                const leftText = sourceCode.getText().slice(node.range[0], equalsToken.range[0]);","                                const rightText = sourceCode.getText().slice(operatorToken.range[1], node.right.range[1]);","","                                return fixer.replaceText(node, `${leftText}${expr.operator}=${rightText}`);","                            }","                            return null;","                        }","                    });","                } else if (same(left, expr.right) && isCommutativeOperatorWithShorthand(operator)) {","","                    /*","                     * This case can't be fixed safely.","                     * If `a` and `b` both have custom valueOf() behavior, then fixing `a = b * a` to `a *= b` would","                     * change the execution order of the valueOf() functions.","                     */","                    context.report({","                        node,","                        message: \"Assignment can be replaced with operator assignment.\"","                    });","                }","            }","        }","","        /**","         * Warns if an assignment expression uses operator assignment shorthand.","         * @param   {ASTNode} node An AssignmentExpression node.","         * @returns {void}","         */","        function prohibit(node) {","            if (node.operator !== \"=\") {","                context.report({","                    node,","                    message: \"Unexpected operator assignment shorthand.\",","                    fix(fixer) {","                        if (canBeFixed(node.left)) {","                            const operatorToken = getOperatorToken(node);","                            const leftText = sourceCode.getText().slice(node.range[0], operatorToken.range[0]);","                            const newOperator = node.operator.slice(0, -1);","                            let rightText;","","                            // If this change would modify precedence (e.g. `foo *= bar + 1` => `foo = foo * (bar + 1)`), parenthesize the right side.","                            if (","                                astUtils.getPrecedence(node.right) <= astUtils.getPrecedence({ type: \"BinaryExpression\", operator: newOperator }) &&","                                !astUtils.isParenthesised(sourceCode, node.right)","                            ) {","                                rightText = `${sourceCode.text.slice(operatorToken.range[1], node.right.range[0])}(${sourceCode.getText(node.right)})`;","                            } else {","                                rightText = sourceCode.text.slice(operatorToken.range[1], node.range[1]);","                            }","","                            return fixer.replaceText(node, `${leftText}= ${leftText}${newOperator}${rightText}`);","                        }","                        return null;","                    }","                });","            }","        }","","        return {","            AssignmentExpression: context.options[0] !== \"never\" ? verify : prohibit","        };","","    }","};",""],"l":{"11":1,"24":1,"25":0,"35":1,"36":0,"53":1,"54":0,"55":0,"58":0,"60":0,"63":0,"72":0,"75":0,"85":1,"86":0,"90":1,"109":0,"116":1,"117":0,"125":1,"126":0,"127":0,"130":0,"131":0,"132":0,"134":0,"135":0,"136":0,"140":0,"141":0,"142":0,"143":0,"144":0,"146":0,"148":0,"151":0,"158":0,"171":1,"172":0,"173":0,"177":0,"178":0,"179":0,"180":0,"181":0,"184":0,"188":0,"190":0,"193":0,"195":0,"201":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/operator-linebreak.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/operator-linebreak.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":50,"loc":{"start":{"line":50,"column":10},"end":{"line":50,"column":20}}},"2":{"name":"getFixer","line":77,"loc":{"start":{"line":77,"column":8},"end":{"line":77,"column":55}}},"3":{"name":"validateNode","line":134,"loc":{"start":{"line":134,"column":8},"end":{"line":134,"column":46}}},"4":{"name":"validateBinaryExpression","line":225,"loc":{"start":{"line":225,"column":8},"end":{"line":225,"column":48}}},"5":{"name":"(anonymous_5)","line":237,"loc":{"start":{"line":237,"column":30},"end":{"line":237,"column":37}}},"6":{"name":"(anonymous_6)","line":242,"loc":{"start":{"line":242,"column":33},"end":{"line":242,"column":40}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":248,"column":2}},"3":{"start":{"line":52,"column":8},"end":{"line":52,"column":54}},"4":{"start":{"line":53,"column":8},"end":{"line":53,"column":58}},"5":{"start":{"line":54,"column":8},"end":{"line":54,"column":49}},"6":{"start":{"line":55,"column":8},"end":{"line":55,"column":93}},"7":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"8":{"start":{"line":58,"column":12},"end":{"line":58,"column":43}},"9":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"10":{"start":{"line":62,"column":12},"end":{"line":62,"column":43}},"11":{"start":{"line":65,"column":8},"end":{"line":65,"column":51}},"12":{"start":{"line":77,"column":8},"end":{"line":125,"column":9}},"13":{"start":{"line":78,"column":12},"end":{"line":124,"column":14}},"14":{"start":{"line":79,"column":16},"end":{"line":79,"column":77}},"15":{"start":{"line":80,"column":16},"end":{"line":80,"column":75}},"16":{"start":{"line":81,"column":16},"end":{"line":81,"column":103}},"17":{"start":{"line":82,"column":16},"end":{"line":82,"column":101}},"18":{"start":{"line":83,"column":16},"end":{"line":83,"column":99}},"19":{"start":{"line":84,"column":16},"end":{"line":84,"column":97}},"20":{"start":{"line":85,"column":16},"end":{"line":85,"column":48}},"21":{"start":{"line":87,"column":16},"end":{"line":115,"column":17}},"22":{"start":{"line":90,"column":20},"end":{"line":92,"column":21}},"23":{"start":{"line":91,"column":24},"end":{"line":91,"column":36}},"24":{"start":{"line":102,"column":20},"end":{"line":102,"column":46}},"25":{"start":{"line":103,"column":20},"end":{"line":103,"column":46}},"26":{"start":{"line":105,"column":20},"end":{"line":105,"column":84}},"27":{"start":{"line":108,"column":20},"end":{"line":108,"column":138}},"28":{"start":{"line":109,"column":20},"end":{"line":109,"column":133}},"29":{"start":{"line":112,"column":20},"end":{"line":114,"column":21}},"30":{"start":{"line":113,"column":24},"end":{"line":113,"column":36}},"31":{"start":{"line":117,"column":16},"end":{"line":121,"column":17}},"32":{"start":{"line":120,"column":20},"end":{"line":120,"column":40}},"33":{"start":{"line":123,"column":16},"end":{"line":123,"column":143}},"34":{"start":{"line":134,"column":8},"end":{"line":218,"column":9}},"35":{"start":{"line":141,"column":12},"end":{"line":141,"column":102}},"36":{"start":{"line":142,"column":12},"end":{"line":142,"column":71}},"37":{"start":{"line":143,"column":12},"end":{"line":143,"column":71}},"38":{"start":{"line":144,"column":12},"end":{"line":144,"column":49}},"39":{"start":{"line":145,"column":12},"end":{"line":145,"column":67}},"40":{"start":{"line":146,"column":12},"end":{"line":146,"column":63}},"41":{"start":{"line":147,"column":12},"end":{"line":147,"column":55}},"42":{"start":{"line":150,"column":12},"end":{"line":217,"column":13}},"43":{"start":{"line":155,"column":19},"end":{"line":217,"column":13}},"44":{"start":{"line":159,"column":16},"end":{"line":170,"column":19}},"45":{"start":{"line":172,"column":19},"end":{"line":217,"column":13}},"46":{"start":{"line":174,"column":16},"end":{"line":185,"column":19}},"47":{"start":{"line":187,"column":19},"end":{"line":217,"column":13}},"48":{"start":{"line":189,"column":16},"end":{"line":200,"column":19}},"49":{"start":{"line":202,"column":19},"end":{"line":217,"column":13}},"50":{"start":{"line":204,"column":16},"end":{"line":215,"column":19}},"51":{"start":{"line":225,"column":8},"end":{"line":227,"column":9}},"52":{"start":{"line":226,"column":12},"end":{"line":226,"column":42}},"53":{"start":{"line":233,"column":8},"end":{"line":246,"column":10}},"54":{"start":{"line":238,"column":16},"end":{"line":240,"column":17}},"55":{"start":{"line":239,"column":20},"end":{"line":239,"column":48}},"56":{"start":{"line":243,"column":16},"end":{"line":243,"column":46}},"57":{"start":{"line":244,"column":16},"end":{"line":244,"column":52}}},"branchMap":{"1":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":28},"end":{"line":53,"column":46}},{"start":{"line":53,"column":50},"end":{"line":53,"column":57}}]},"2":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":24},"end":{"line":54,"column":42}},{"start":{"line":54,"column":46},"end":{"line":54,"column":48}}]},"3":{"line":55,"type":"cond-expr","locations":[{"start":{"line":55,"column":51},"end":{"line":55,"column":87}},{"start":{"line":55,"column":90},"end":{"line":55,"column":92}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"5":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":29}},{"start":{"line":57,"column":33},"end":{"line":57,"column":53}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]},"7":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":29}},{"start":{"line":61,"column":33},"end":{"line":61,"column":53}}]},"8":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":16},"end":{"line":87,"column":16}},{"start":{"line":87,"column":16},"end":{"line":87,"column":16}}]},"9":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":20},"end":{"line":87,"column":60}},{"start":{"line":87,"column":64},"end":{"line":87,"column":87}}]},"10":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":20},"end":{"line":90,"column":20}},{"start":{"line":90,"column":20},"end":{"line":90,"column":20}}]},"11":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":24},"end":{"line":90,"column":107}},{"start":{"line":90,"column":111},"end":{"line":90,"column":192}}]},"12":{"line":108,"type":"cond-expr","locations":[{"start":{"line":108,"column":85},"end":{"line":108,"column":95}},{"start":{"line":108,"column":98},"end":{"line":108,"column":137}}]},"13":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":36},"end":{"line":108,"column":61}},{"start":{"line":108,"column":65},"end":{"line":108,"column":82}}]},"14":{"line":109,"type":"cond-expr","locations":[{"start":{"line":109,"column":82},"end":{"line":109,"column":91}},{"start":{"line":109,"column":94},"end":{"line":109,"column":132}}]},"15":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":35},"end":{"line":109,"column":59}},{"start":{"line":109,"column":63},"end":{"line":109,"column":79}}]},"16":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":20},"end":{"line":112,"column":20}},{"start":{"line":112,"column":20},"end":{"line":112,"column":20}}]},"17":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":24},"end":{"line":112,"column":52}},{"start":{"line":112,"column":56},"end":{"line":112,"column":82}}]},"18":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":16},"end":{"line":117,"column":16}},{"start":{"line":117,"column":16},"end":{"line":117,"column":16}}]},"19":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":20},"end":{"line":117,"column":39}},{"start":{"line":117,"column":43},"end":{"line":117,"column":75}},{"start":{"line":117,"column":79},"end":{"line":117,"column":113}},{"start":{"line":117,"column":117},"end":{"line":117,"column":157}}]},"20":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":26},"end":{"line":146,"column":47}},{"start":{"line":146,"column":51},"end":{"line":146,"column":62}}]},"21":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":12},"end":{"line":150,"column":12}},{"start":{"line":150,"column":12},"end":{"line":150,"column":12}}]},"22":{"line":150,"type":"binary-expr","locations":[{"start":{"line":150,"column":16},"end":{"line":150,"column":68}},{"start":{"line":151,"column":20},"end":{"line":151,"column":73}}]},"23":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":19},"end":{"line":155,"column":19}},{"start":{"line":155,"column":19},"end":{"line":155,"column":19}}]},"24":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":23},"end":{"line":155,"column":57}},{"start":{"line":155,"column":61},"end":{"line":155,"column":114}},{"start":{"line":156,"column":20},"end":{"line":156,"column":74}}]},"25":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":19},"end":{"line":172,"column":19}},{"start":{"line":172,"column":19},"end":{"line":172,"column":19}}]},"26":{"line":172,"type":"binary-expr","locations":[{"start":{"line":172,"column":23},"end":{"line":172,"column":41}},{"start":{"line":172,"column":45},"end":{"line":172,"column":97}}]},"27":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":19},"end":{"line":187,"column":19}},{"start":{"line":187,"column":19},"end":{"line":187,"column":19}}]},"28":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":23},"end":{"line":187,"column":40}},{"start":{"line":187,"column":44},"end":{"line":187,"column":97}}]},"29":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":19},"end":{"line":202,"column":19}},{"start":{"line":202,"column":19},"end":{"line":202,"column":19}}]},"30":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":16},"end":{"line":238,"column":16}},{"start":{"line":238,"column":16},"end":{"line":238,"column":16}}]}},"code":["/**"," * @fileoverview Operator linebreak - enforces operator linebreak style of two types: after and before"," * @author Benoît Zugmeyer"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent linebreak style for operators\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"after\", \"before\", \"none\", null]","            },","            {","                type: \"object\",","                properties: {","                    overrides: {","                        type: \"object\",","                        properties: {","                            anyOf: {","                                type: \"string\",","                                enum: [\"after\", \"before\", \"none\", \"ignore\"]","                            }","                        }","                    }","                },","                additionalProperties: false","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","","        const usedDefaultGlobal = !context.options[0];","        const globalStyle = context.options[0] || \"after\";","        const options = context.options[1] || {};","        const styleOverrides = options.overrides ? Object.assign({}, options.overrides) : {};","","        if (usedDefaultGlobal && !styleOverrides[\"?\"]) {","            styleOverrides[\"?\"] = \"before\";","        }","","        if (usedDefaultGlobal && !styleOverrides[\":\"]) {","            styleOverrides[\":\"] = \"before\";","        }","","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","        * Gets a fixer function to fix rule issues","        * @param {Token} operatorToken The operator token of an expression","        * @param {string} desiredStyle The style for the rule. One of 'before', 'after', 'none'","        * @returns {Function} A fixer function","        */","        function getFixer(operatorToken, desiredStyle) {","            return fixer => {","                const tokenBefore = sourceCode.getTokenBefore(operatorToken);","                const tokenAfter = sourceCode.getTokenAfter(operatorToken);","                const textBefore = sourceCode.text.slice(tokenBefore.range[1], operatorToken.range[0]);","                const textAfter = sourceCode.text.slice(operatorToken.range[1], tokenAfter.range[0]);","                const hasLinebreakBefore = !astUtils.isTokenOnSameLine(tokenBefore, operatorToken);","                const hasLinebreakAfter = !astUtils.isTokenOnSameLine(operatorToken, tokenAfter);","                let newTextBefore, newTextAfter;","","                if (hasLinebreakBefore !== hasLinebreakAfter && desiredStyle !== \"none\") {","","                    // If there is a comment before and after the operator, don't do a fix.","                    if (sourceCode.getTokenBefore(operatorToken, { includeComments: true }) !== tokenBefore && sourceCode.getTokenAfter(operatorToken, { includeComments: true }) !== tokenAfter) {","                        return null;","                    }","","                    /*","                     * If there is only one linebreak and it's on the wrong side of the operator, swap the text before and after the operator.","                     * foo &&","                     *           bar","                     * would get fixed to","                     * foo","                     *        && bar","                     */","                    newTextBefore = textAfter;","                    newTextAfter = textBefore;","                } else {","                    const LINEBREAK_REGEX = astUtils.createGlobalLinebreakMatcher();","","                    // Otherwise, if no linebreak is desired and no comments interfere, replace the linebreaks with empty strings.","                    newTextBefore = desiredStyle === \"before\" || textBefore.trim() ? textBefore : textBefore.replace(LINEBREAK_REGEX, \"\");","                    newTextAfter = desiredStyle === \"after\" || textAfter.trim() ? textAfter : textAfter.replace(LINEBREAK_REGEX, \"\");","","                    // If there was no change (due to interfering comments), don't output a fix.","                    if (newTextBefore === textBefore && newTextAfter === textAfter) {","                        return null;","                    }","                }","","                if (newTextAfter === \"\" && tokenAfter.type === \"Punctuator\" && \"+-\".includes(operatorToken.value) && tokenAfter.value === operatorToken.value) {","","                    // To avoid accidentally creating a ++ or -- operator, insert a space if the operator is a +/- and the following token is a unary +/-.","                    newTextAfter += \" \";","                }","","                return fixer.replaceTextRange([tokenBefore.range[1], tokenAfter.range[0]], newTextBefore + operatorToken.value + newTextAfter);","            };","        }","","        /**","         * Checks the operator placement","         * @param {ASTNode} node The node to check","         * @param {ASTNode} leftSide The node that comes before the operator in `node`","         * @private","         * @returns {void}","         */","        function validateNode(node, leftSide) {","","            // When the left part of a binary expression is a single expression wrapped in","            // parentheses (ex: `(a) + b`), leftToken will be the last token of the expression","            // and operatorToken will be the closing parenthesis.","            // The leftToken should be the last closing parenthesis, and the operatorToken","            // should be the token right after that.","            const operatorToken = sourceCode.getTokenAfter(leftSide, astUtils.isNotClosingParenToken);","            const leftToken = sourceCode.getTokenBefore(operatorToken);","            const rightToken = sourceCode.getTokenAfter(operatorToken);","            const operator = operatorToken.value;","            const operatorStyleOverride = styleOverrides[operator];","            const style = operatorStyleOverride || globalStyle;","            const fix = getFixer(operatorToken, style);","","            // if single line","            if (astUtils.isTokenOnSameLine(leftToken, operatorToken) &&","                    astUtils.isTokenOnSameLine(operatorToken, rightToken)) {","","                // do nothing.","","            } else if (operatorStyleOverride !== \"ignore\" && !astUtils.isTokenOnSameLine(leftToken, operatorToken) &&","                    !astUtils.isTokenOnSameLine(operatorToken, rightToken)) {","","                // lone operator","                context.report({","                    node,","                    loc: {","                        line: operatorToken.loc.end.line,","                        column: operatorToken.loc.end.column","                    },","                    message: \"Bad line breaking before and after '{{operator}}'.\",","                    data: {","                        operator","                    },","                    fix","                });","","            } else if (style === \"before\" && astUtils.isTokenOnSameLine(leftToken, operatorToken)) {","","                context.report({","                    node,","                    loc: {","                        line: operatorToken.loc.end.line,","                        column: operatorToken.loc.end.column","                    },","                    message: \"'{{operator}}' should be placed at the beginning of the line.\",","                    data: {","                        operator","                    },","                    fix","                });","","            } else if (style === \"after\" && astUtils.isTokenOnSameLine(operatorToken, rightToken)) {","","                context.report({","                    node,","                    loc: {","                        line: operatorToken.loc.end.line,","                        column: operatorToken.loc.end.column","                    },","                    message: \"'{{operator}}' should be placed at the end of the line.\",","                    data: {","                        operator","                    },","                    fix","                });","","            } else if (style === \"none\") {","","                context.report({","                    node,","                    loc: {","                        line: operatorToken.loc.end.line,","                        column: operatorToken.loc.end.column","                    },","                    message: \"There should be no line break before or after '{{operator}}'.\",","                    data: {","                        operator","                    },","                    fix","                });","","            }","        }","","        /**","         * Validates a binary expression using `validateNode`","         * @param {BinaryExpression|LogicalExpression|AssignmentExpression} node node to be validated","         * @returns {void}","         */","        function validateBinaryExpression(node) {","            validateNode(node, node.left);","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            BinaryExpression: validateBinaryExpression,","            LogicalExpression: validateBinaryExpression,","            AssignmentExpression: validateBinaryExpression,","            VariableDeclarator(node) {","                if (node.init) {","                    validateNode(node, node.id);","                }","            },","            ConditionalExpression(node) {","                validateNode(node, node.test);","                validateNode(node, node.consequent);","            }","        };","    }","};",""],"l":{"12":1,"18":1,"52":0,"53":0,"54":0,"55":0,"57":0,"58":0,"61":0,"62":0,"65":0,"77":1,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"87":0,"90":0,"91":0,"102":0,"103":0,"105":0,"108":0,"109":0,"112":0,"113":0,"117":0,"120":0,"123":0,"134":1,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"150":0,"155":0,"159":0,"172":0,"174":0,"187":0,"189":0,"202":0,"204":0,"225":1,"226":0,"233":0,"238":0,"239":0,"243":0,"244":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/padded-blocks.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/padded-blocks.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"(anonymous_1)","line":49,"loc":{"start":{"line":49,"column":10},"end":{"line":49,"column":20}}},"2":{"name":"getOpenBrace","line":77,"loc":{"start":{"line":77,"column":8},"end":{"line":77,"column":36}}},"3":{"name":"isComment","line":89,"loc":{"start":{"line":89,"column":8},"end":{"line":89,"column":33}}},"4":{"name":"isPaddingBetweenTokens","line":99,"loc":{"start":{"line":99,"column":8},"end":{"line":99,"column":55}}},"5":{"name":"getFirstBlockToken","line":109,"loc":{"start":{"line":109,"column":8},"end":{"line":109,"column":43}}},"6":{"name":"getLastBlockToken","line":126,"loc":{"start":{"line":126,"column":8},"end":{"line":126,"column":42}}},"7":{"name":"requirePaddingFor","line":143,"loc":{"start":{"line":143,"column":8},"end":{"line":143,"column":41}}},"8":{"name":"checkPadding","line":163,"loc":{"start":{"line":163,"column":8},"end":{"line":163,"column":36}}},"9":{"name":"(anonymous_9)","line":178,"loc":{"start":{"line":178,"column":27},"end":{"line":178,"column":35}}},"10":{"name":"(anonymous_10)","line":188,"loc":{"start":{"line":188,"column":27},"end":{"line":188,"column":35}}},"11":{"name":"(anonymous_11)","line":200,"loc":{"start":{"line":200,"column":27},"end":{"line":200,"column":35}}},"12":{"name":"(anonymous_12)","line":213,"loc":{"start":{"line":213,"column":27},"end":{"line":213,"column":35}}},"13":{"name":"(anonymous_13)","line":224,"loc":{"start":{"line":224,"column":35},"end":{"line":224,"column":50}}},"14":{"name":"(anonymous_14)","line":233,"loc":{"start":{"line":233,"column":34},"end":{"line":233,"column":49}}},"15":{"name":"(anonymous_15)","line":242,"loc":{"start":{"line":242,"column":29},"end":{"line":242,"column":44}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":252,"column":2}},"2":{"start":{"line":50,"column":8},"end":{"line":50,"column":27}},"3":{"start":{"line":51,"column":8},"end":{"line":51,"column":54}},"4":{"start":{"line":53,"column":8},"end":{"line":65,"column":9}},"5":{"start":{"line":54,"column":12},"end":{"line":54,"column":49}},"6":{"start":{"line":56,"column":12},"end":{"line":58,"column":13}},"7":{"start":{"line":57,"column":16},"end":{"line":57,"column":60}},"8":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"9":{"start":{"line":60,"column":16},"end":{"line":60,"column":64}},"10":{"start":{"line":62,"column":12},"end":{"line":64,"column":13}},"11":{"start":{"line":63,"column":16},"end":{"line":63,"column":62}},"12":{"start":{"line":67,"column":8},"end":{"line":68,"column":71}},"13":{"start":{"line":70,"column":8},"end":{"line":70,"column":51}},"14":{"start":{"line":77,"column":8},"end":{"line":82,"column":9}},"15":{"start":{"line":78,"column":12},"end":{"line":80,"column":13}},"16":{"start":{"line":79,"column":16},"end":{"line":79,"column":64}},"17":{"start":{"line":81,"column":12},"end":{"line":81,"column":50}},"18":{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},"19":{"start":{"line":90,"column":12},"end":{"line":90,"column":65}},"20":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"21":{"start":{"line":100,"column":12},"end":{"line":100,"column":67}},"22":{"start":{"line":109,"column":8},"end":{"line":119,"column":9}},"23":{"start":{"line":110,"column":12},"end":{"line":111,"column":30}},"24":{"start":{"line":113,"column":12},"end":{"line":116,"column":85}},"25":{"start":{"line":114,"column":16},"end":{"line":114,"column":29}},"26":{"start":{"line":115,"column":16},"end":{"line":115,"column":83}},"27":{"start":{"line":118,"column":12},"end":{"line":118,"column":25}},"28":{"start":{"line":126,"column":8},"end":{"line":136,"column":9}},"29":{"start":{"line":127,"column":12},"end":{"line":128,"column":29}},"30":{"start":{"line":130,"column":12},"end":{"line":133,"column":83}},"31":{"start":{"line":131,"column":16},"end":{"line":131,"column":28}},"32":{"start":{"line":132,"column":16},"end":{"line":132,"column":82}},"33":{"start":{"line":135,"column":12},"end":{"line":135,"column":24}},"34":{"start":{"line":143,"column":8},"end":{"line":156,"column":9}},"35":{"start":{"line":144,"column":12},"end":{"line":155,"column":13}},"36":{"start":{"line":146,"column":20},"end":{"line":146,"column":42}},"37":{"start":{"line":148,"column":20},"end":{"line":148,"column":44}},"38":{"start":{"line":150,"column":20},"end":{"line":150,"column":43}},"39":{"start":{"line":154,"column":20},"end":{"line":154,"column":51},"skip":true},"40":{"start":{"line":163,"column":8},"end":{"line":219,"column":9}},"41":{"start":{"line":164,"column":12},"end":{"line":171,"column":95}},"42":{"start":{"line":173,"column":12},"end":{"line":218,"column":13}},"43":{"start":{"line":174,"column":16},"end":{"line":183,"column":17}},"44":{"start":{"line":175,"column":20},"end":{"line":182,"column":23}},"45":{"start":{"line":179,"column":28},"end":{"line":179,"column":81}},"46":{"start":{"line":184,"column":16},"end":{"line":193,"column":17}},"47":{"start":{"line":185,"column":20},"end":{"line":192,"column":23}},"48":{"start":{"line":189,"column":28},"end":{"line":189,"column":80}},"49":{"start":{"line":195,"column":16},"end":{"line":205,"column":17}},"50":{"start":{"line":197,"column":20},"end":{"line":204,"column":23}},"51":{"start":{"line":201,"column":28},"end":{"line":201,"column":146}},"52":{"start":{"line":207,"column":16},"end":{"line":217,"column":17}},"53":{"start":{"line":209,"column":20},"end":{"line":216,"column":23}},"54":{"start":{"line":214,"column":28},"end":{"line":214,"column":142}},"55":{"start":{"line":221,"column":8},"end":{"line":221,"column":24}},"56":{"start":{"line":223,"column":8},"end":{"line":230,"column":9}},"57":{"start":{"line":224,"column":12},"end":{"line":229,"column":14}},"58":{"start":{"line":225,"column":16},"end":{"line":227,"column":17}},"59":{"start":{"line":226,"column":20},"end":{"line":226,"column":27}},"60":{"start":{"line":228,"column":16},"end":{"line":228,"column":35}},"61":{"start":{"line":232,"column":8},"end":{"line":239,"column":9}},"62":{"start":{"line":233,"column":12},"end":{"line":238,"column":14}},"63":{"start":{"line":234,"column":16},"end":{"line":236,"column":17}},"64":{"start":{"line":235,"column":20},"end":{"line":235,"column":27}},"65":{"start":{"line":237,"column":16},"end":{"line":237,"column":35}},"66":{"start":{"line":241,"column":8},"end":{"line":248,"column":9}},"67":{"start":{"line":242,"column":12},"end":{"line":247,"column":14}},"68":{"start":{"line":243,"column":16},"end":{"line":245,"column":17}},"69":{"start":{"line":244,"column":20},"end":{"line":244,"column":27}},"70":{"start":{"line":246,"column":16},"end":{"line":246,"column":35}},"71":{"start":{"line":250,"column":8},"end":{"line":250,"column":20}}},"branchMap":{"1":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":23},"end":{"line":51,"column":41}},{"start":{"line":51,"column":45},"end":{"line":51,"column":53}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"3":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":12}},{"start":{"line":56,"column":12},"end":{"line":56,"column":12}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":12}},{"start":{"line":59,"column":12},"end":{"line":59,"column":12}}]},"5":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":12}},{"start":{"line":62,"column":12},"end":{"line":62,"column":12}}]},"6":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":12},"end":{"line":78,"column":12}},{"start":{"line":78,"column":12},"end":{"line":78,"column":12}}]},"7":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":19},"end":{"line":90,"column":39}},{"start":{"line":90,"column":43},"end":{"line":90,"column":64}}]},"8":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":21},"end":{"line":116,"column":37}},{"start":{"line":116,"column":41},"end":{"line":116,"column":83}}]},"9":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":21},"end":{"line":133,"column":36}},{"start":{"line":133,"column":40},"end":{"line":133,"column":81}}]},"10":{"line":144,"type":"switch","locations":[{"start":{"line":145,"column":16},"end":{"line":146,"column":42}},{"start":{"line":147,"column":16},"end":{"line":148,"column":44}},{"start":{"line":149,"column":16},"end":{"line":150,"column":43}},{"start":{"line":153,"column":16},"end":{"line":154,"column":51},"skip":true}]},"11":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":12},"end":{"line":173,"column":12}},{"start":{"line":173,"column":12},"end":{"line":173,"column":12}}]},"12":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":16},"end":{"line":174,"column":16}},{"start":{"line":174,"column":16},"end":{"line":174,"column":16}}]},"13":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":16},"end":{"line":184,"column":16}},{"start":{"line":184,"column":16},"end":{"line":184,"column":16}}]},"14":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":16},"end":{"line":195,"column":16}},{"start":{"line":195,"column":16},"end":{"line":195,"column":16}}]},"15":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":16},"end":{"line":207,"column":16}},{"start":{"line":207,"column":16},"end":{"line":207,"column":16}}]},"16":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":8},"end":{"line":223,"column":8}},{"start":{"line":223,"column":8},"end":{"line":223,"column":8}}]},"17":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":16},"end":{"line":225,"column":16}},{"start":{"line":225,"column":16},"end":{"line":225,"column":16}}]},"18":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":8},"end":{"line":232,"column":8}},{"start":{"line":232,"column":8},"end":{"line":232,"column":8}}]},"19":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":16},"end":{"line":234,"column":16}},{"start":{"line":234,"column":16},"end":{"line":234,"column":16}}]},"20":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":8},"end":{"line":241,"column":8}},{"start":{"line":241,"column":8},"end":{"line":241,"column":8}}]},"21":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":16},"end":{"line":243,"column":16}},{"start":{"line":243,"column":16},"end":{"line":243,"column":16}}]}},"code":["/**"," * @fileoverview A rule to ensure blank lines within blocks."," * @author Mathias Schreck <https://github.com/lo1tuma>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow padding within blocks\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"always\", \"never\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            blocks: {","                                enum: [\"always\", \"never\"]","                            },","                            switches: {","                                enum: [\"always\", \"never\"]","                            },","                            classes: {","                                enum: [\"always\", \"never\"]","                            }","                        },","                        additionalProperties: false,","                        minProperties: 1","                    }","                ]","            }","        ]","    },","","    create(context) {","        const options = {};","        const config = context.options[0] || \"always\";","","        if (typeof config === \"string\") {","            options.blocks = config === \"always\";","        } else {","            if (config.hasOwnProperty(\"blocks\")) {","                options.blocks = config.blocks === \"always\";","            }","            if (config.hasOwnProperty(\"switches\")) {","                options.switches = config.switches === \"always\";","            }","            if (config.hasOwnProperty(\"classes\")) {","                options.classes = config.classes === \"always\";","            }","        }","","        const ALWAYS_MESSAGE = \"Block must be padded by blank lines.\",","            NEVER_MESSAGE = \"Block must not be padded by blank lines.\";","","        const sourceCode = context.getSourceCode();","","        /**","         * Gets the open brace token from a given node.","         * @param {ASTNode} node - A BlockStatement or SwitchStatement node from which to get the open brace.","         * @returns {Token} The token of the open brace.","         */","        function getOpenBrace(node) {","            if (node.type === \"SwitchStatement\") {","                return sourceCode.getTokenBefore(node.cases[0]);","            }","            return sourceCode.getFirstToken(node);","        }","","        /**","         * Checks if the given parameter is a comment node","         * @param {ASTNode|Token} node An AST node or token","         * @returns {boolean} True if node is a comment","         */","        function isComment(node) {","            return node.type === \"Line\" || node.type === \"Block\";","        }","","        /**","         * Checks if there is padding between two tokens","         * @param {Token} first The first token","         * @param {Token} second The second token","         * @returns {boolean} True if there is at least a line between the tokens","         */","        function isPaddingBetweenTokens(first, second) {","            return second.loc.start.line - first.loc.end.line >= 2;","        }","","","        /**","         * Checks if the given token has a blank line after it.","         * @param {Token} token The token to check.","         * @returns {boolean} Whether or not the token is followed by a blank line.","         */","        function getFirstBlockToken(token) {","            let prev = token,","                first = token;","","            do {","                prev = first;","                first = sourceCode.getTokenAfter(first, { includeComments: true });","            } while (isComment(first) && first.loc.start.line === prev.loc.end.line);","","            return first;","        }","","        /**","         * Checks if the given token is preceeded by a blank line.","         * @param {Token} token The token to check","         * @returns {boolean} Whether or not the token is preceeded by a blank line","         */","        function getLastBlockToken(token) {","            let last = token,","                next = token;","","            do {","                next = last;","                last = sourceCode.getTokenBefore(last, { includeComments: true });","            } while (isComment(last) && last.loc.end.line === next.loc.start.line);","","            return last;","        }","","        /**","         * Checks if a node should be padded, according to the rule config.","         * @param {ASTNode} node The AST node to check.","         * @returns {boolean} True if the node should be padded, false otherwise.","         */","        function requirePaddingFor(node) {","            switch (node.type) {","                case \"BlockStatement\":","                    return options.blocks;","                case \"SwitchStatement\":","                    return options.switches;","                case \"ClassBody\":","                    return options.classes;","","                /* istanbul ignore next */","                default:","                    throw new Error(\"unreachable\");","            }","        }","","        /**","         * Checks the given BlockStatement node to be padded if the block is not empty.","         * @param {ASTNode} node The AST node of a BlockStatement.","         * @returns {void} undefined.","         */","        function checkPadding(node) {","            const openBrace = getOpenBrace(node),","                firstBlockToken = getFirstBlockToken(openBrace),","                tokenBeforeFirst = sourceCode.getTokenBefore(firstBlockToken, { includeComments: true }),","                closeBrace = sourceCode.getLastToken(node),","                lastBlockToken = getLastBlockToken(closeBrace),","                tokenAfterLast = sourceCode.getTokenAfter(lastBlockToken, { includeComments: true }),","                blockHasTopPadding = isPaddingBetweenTokens(tokenBeforeFirst, firstBlockToken),","                blockHasBottomPadding = isPaddingBetweenTokens(lastBlockToken, tokenAfterLast);","","            if (requirePaddingFor(node)) {","                if (!blockHasTopPadding) {","                    context.report({","                        node,","                        loc: { line: tokenBeforeFirst.loc.start.line, column: tokenBeforeFirst.loc.start.column },","                        fix(fixer) {","                            return fixer.insertTextAfter(tokenBeforeFirst, \"\\n\");","                        },","                        message: ALWAYS_MESSAGE","                    });","                }","                if (!blockHasBottomPadding) {","                    context.report({","                        node,","                        loc: { line: tokenAfterLast.loc.end.line, column: tokenAfterLast.loc.end.column - 1 },","                        fix(fixer) {","                            return fixer.insertTextBefore(tokenAfterLast, \"\\n\");","                        },","                        message: ALWAYS_MESSAGE","                    });","                }","            } else {","                if (blockHasTopPadding) {","","                    context.report({","                        node,","                        loc: { line: tokenBeforeFirst.loc.start.line, column: tokenBeforeFirst.loc.start.column },","                        fix(fixer) {","                            return fixer.replaceTextRange([tokenBeforeFirst.end, firstBlockToken.start - firstBlockToken.loc.start.column], \"\\n\");","                        },","                        message: NEVER_MESSAGE","                    });","                }","","                if (blockHasBottomPadding) {","","                    context.report({","                        node,","                        loc: { line: tokenAfterLast.loc.end.line, column: tokenAfterLast.loc.end.column - 1 },","                        message: NEVER_MESSAGE,","                        fix(fixer) {","                            return fixer.replaceTextRange([lastBlockToken.end, tokenAfterLast.start - tokenAfterLast.loc.start.column], \"\\n\");","                        }","                    });","                }","            }","        }","","        const rule = {};","","        if (options.hasOwnProperty(\"switches\")) {","            rule.SwitchStatement = function(node) {","                if (node.cases.length === 0) {","                    return;","                }","                checkPadding(node);","            };","        }","","        if (options.hasOwnProperty(\"blocks\")) {","            rule.BlockStatement = function(node) {","                if (node.body.length === 0) {","                    return;","                }","                checkPadding(node);","            };","        }","","        if (options.hasOwnProperty(\"classes\")) {","            rule.ClassBody = function(node) {","                if (node.body.length === 0) {","                    return;","                }","                checkPadding(node);","            };","        }","","        return rule;","    }","};",""],"l":{"12":1,"50":0,"51":0,"53":0,"54":0,"56":0,"57":0,"59":0,"60":0,"62":0,"63":0,"67":0,"70":0,"77":1,"78":0,"79":0,"81":0,"89":1,"90":0,"99":1,"100":0,"109":1,"110":0,"113":0,"114":0,"115":0,"118":0,"126":1,"127":0,"130":0,"131":0,"132":0,"135":0,"143":1,"144":0,"146":0,"148":0,"150":0,"154":1,"163":1,"164":0,"173":0,"174":0,"175":0,"179":0,"184":0,"185":0,"189":0,"195":0,"197":0,"201":0,"207":0,"209":0,"214":0,"221":0,"223":0,"224":0,"225":0,"226":0,"228":0,"232":0,"233":0,"234":0,"235":0,"237":0,"241":0,"242":0,"243":0,"244":0,"246":0,"250":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-arrow-callback.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-arrow-callback.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0,0],"6":[0,0],"7":[0,0,0,0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0,0,0,0,0],"25":[0,0],"26":[0,0,0],"27":[0,0],"28":[0,0],"29":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"isFunctionName","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":34}}},"2":{"name":"checkMetaProperty","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":57}}},"3":{"name":"getVariableOfArguments","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":39}}},"4":{"name":"getCallbackInfo","line":65,"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":31}}},"5":{"name":"hasDuplicateParams","line":125,"loc":{"start":{"line":125,"column":0},"end":{"line":125,"column":40}}},"6":{"name":"(anonymous_6)","line":159,"loc":{"start":{"line":159,"column":10},"end":{"line":159,"column":20}}},"7":{"name":"enterScope","line":178,"loc":{"start":{"line":178,"column":8},"end":{"line":178,"column":30}}},"8":{"name":"exitScope","line":186,"loc":{"start":{"line":186,"column":8},"end":{"line":186,"column":29}}},"9":{"name":"(anonymous_9)","line":193,"loc":{"start":{"line":193,"column":19},"end":{"line":193,"column":22}}},"10":{"name":"(anonymous_10)","line":198,"loc":{"start":{"line":198,"column":26},"end":{"line":198,"column":29}}},"11":{"name":"(anonymous_11)","line":206,"loc":{"start":{"line":206,"column":17},"end":{"line":206,"column":20}}},"12":{"name":"(anonymous_12)","line":214,"loc":{"start":{"line":214,"column":24},"end":{"line":214,"column":31}}},"13":{"name":"(anonymous_13)","line":228,"loc":{"start":{"line":228,"column":37},"end":{"line":228,"column":44}}},"14":{"name":"(anonymous_14)","line":266,"loc":{"start":{"line":266,"column":27},"end":{"line":266,"column":35}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":19,"column":1}},"2":{"start":{"line":18,"column":4},"end":{"line":18,"column":64}},"3":{"start":{"line":28,"column":0},"end":{"line":30,"column":1}},"4":{"start":{"line":29,"column":4},"end":{"line":29,"column":78}},"5":{"start":{"line":37,"column":0},"end":{"line":56,"column":1}},"6":{"start":{"line":38,"column":4},"end":{"line":38,"column":38}},"7":{"start":{"line":40,"column":4},"end":{"line":52,"column":5}},"8":{"start":{"line":41,"column":8},"end":{"line":41,"column":38}},"9":{"start":{"line":43,"column":8},"end":{"line":51,"column":9}},"10":{"start":{"line":50,"column":12},"end":{"line":50,"column":73}},"11":{"start":{"line":55,"column":4},"end":{"line":55,"column":16},"skip":true},"12":{"start":{"line":65,"column":0},"end":{"line":116,"column":1}},"13":{"start":{"line":66,"column":4},"end":{"line":66,"column":61}},"14":{"start":{"line":67,"column":4},"end":{"line":67,"column":29}},"15":{"start":{"line":69,"column":4},"end":{"line":112,"column":5}},"16":{"start":{"line":70,"column":8},"end":{"line":108,"column":9}},"17":{"start":{"line":76,"column":16},"end":{"line":76,"column":22}},"18":{"start":{"line":80,"column":16},"end":{"line":95,"column":17}},"19":{"start":{"line":87,"column":20},"end":{"line":90,"column":22}},"20":{"start":{"line":91,"column":20},"end":{"line":91,"column":34}},"21":{"start":{"line":92,"column":20},"end":{"line":92,"column":43}},"22":{"start":{"line":94,"column":20},"end":{"line":94,"column":32}},"23":{"start":{"line":96,"column":16},"end":{"line":96,"column":22}},"24":{"start":{"line":101,"column":16},"end":{"line":103,"column":17}},"25":{"start":{"line":102,"column":20},"end":{"line":102,"column":43}},"26":{"start":{"line":104,"column":16},"end":{"line":104,"column":28}},"27":{"start":{"line":107,"column":16},"end":{"line":107,"column":28}},"28":{"start":{"line":110,"column":8},"end":{"line":110,"column":22}},"29":{"start":{"line":111,"column":8},"end":{"line":111,"column":31}},"30":{"start":{"line":115,"column":4},"end":{"line":115,"column":35},"skip":true},"31":{"start":{"line":125,"column":0},"end":{"line":127,"column":1}},"32":{"start":{"line":126,"column":4},"end":{"line":126,"column":141}},"33":{"start":{"line":126,"column":37},"end":{"line":126,"column":64}},"34":{"start":{"line":126,"column":123},"end":{"line":126,"column":133}},"35":{"start":{"line":133,"column":0},"end":{"line":295,"column":2}},"36":{"start":{"line":160,"column":8},"end":{"line":160,"column":49}},"37":{"start":{"line":162,"column":8},"end":{"line":162,"column":68}},"38":{"start":{"line":163,"column":8},"end":{"line":163,"column":64}},"39":{"start":{"line":164,"column":8},"end":{"line":164,"column":51}},"40":{"start":{"line":172,"column":8},"end":{"line":172,"column":23}},"41":{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},"42":{"start":{"line":179,"column":12},"end":{"line":179,"column":67}},"43":{"start":{"line":186,"column":8},"end":{"line":188,"column":9}},"44":{"start":{"line":187,"column":12},"end":{"line":187,"column":31}},"45":{"start":{"line":190,"column":8},"end":{"line":293,"column":10}},"46":{"start":{"line":194,"column":16},"end":{"line":194,"column":27}},"47":{"start":{"line":199,"column":16},"end":{"line":199,"column":53}},"48":{"start":{"line":201,"column":16},"end":{"line":203,"column":17}},"49":{"start":{"line":202,"column":20},"end":{"line":202,"column":37}},"50":{"start":{"line":207,"column":16},"end":{"line":207,"column":53}},"51":{"start":{"line":209,"column":16},"end":{"line":211,"column":17}},"52":{"start":{"line":210,"column":20},"end":{"line":210,"column":38}},"53":{"start":{"line":215,"column":16},"end":{"line":215,"column":53}},"54":{"start":{"line":217,"column":16},"end":{"line":219,"column":17}},"55":{"start":{"line":218,"column":20},"end":{"line":218,"column":37}},"56":{"start":{"line":229,"column":16},"end":{"line":229,"column":46}},"57":{"start":{"line":232,"column":16},"end":{"line":234,"column":17}},"58":{"start":{"line":233,"column":20},"end":{"line":233,"column":27}},"59":{"start":{"line":237,"column":16},"end":{"line":239,"column":17}},"60":{"start":{"line":238,"column":20},"end":{"line":238,"column":27}},"61":{"start":{"line":242,"column":16},"end":{"line":242,"column":70}},"62":{"start":{"line":244,"column":16},"end":{"line":246,"column":17}},"63":{"start":{"line":245,"column":20},"end":{"line":245,"column":27}},"64":{"start":{"line":249,"column":16},"end":{"line":249,"column":76}},"65":{"start":{"line":251,"column":16},"end":{"line":253,"column":17}},"66":{"start":{"line":252,"column":20},"end":{"line":252,"column":27}},"67":{"start":{"line":256,"column":16},"end":{"line":256,"column":59}},"68":{"start":{"line":258,"column":16},"end":{"line":291,"column":17}},"69":{"start":{"line":263,"column":20},"end":{"line":290,"column":23}},"70":{"start":{"line":267,"column":28},"end":{"line":274,"column":29}},"71":{"start":{"line":273,"column":32},"end":{"line":273,"column":44}},"72":{"start":{"line":276,"column":28},"end":{"line":276,"column":157}},"73":{"start":{"line":277,"column":28},"end":{"line":277,"column":90}},"74":{"start":{"line":278,"column":28},"end":{"line":278,"column":76}},"75":{"start":{"line":279,"column":28},"end":{"line":279,"column":126}},"76":{"start":{"line":281,"column":28},"end":{"line":285,"column":29}},"77":{"start":{"line":284,"column":32},"end":{"line":284,"column":149}},"78":{"start":{"line":288,"column":28},"end":{"line":288,"column":129}}},"branchMap":{"1":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":11},"end":{"line":18,"column":19}},{"start":{"line":18,"column":23},"end":{"line":18,"column":63}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":11},"end":{"line":29,"column":38}},{"start":{"line":29,"column":42},"end":{"line":29,"column":77}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":8}},{"start":{"line":43,"column":8},"end":{"line":43,"column":8}}]},"4":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":57},"end":{"line":50,"column":65}},{"start":{"line":50,"column":68},"end":{"line":50,"column":72}}]},"5":{"line":70,"type":"switch","locations":[{"start":{"line":74,"column":12},"end":{"line":74,"column":37}},{"start":{"line":75,"column":12},"end":{"line":76,"column":22}},{"start":{"line":79,"column":12},"end":{"line":96,"column":22}},{"start":{"line":99,"column":12},"end":{"line":99,"column":34}},{"start":{"line":100,"column":12},"end":{"line":104,"column":28}},{"start":{"line":106,"column":12},"end":{"line":107,"column":28}}]},"6":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":16},"end":{"line":80,"column":16}},{"start":{"line":80,"column":16},"end":{"line":80,"column":16}}]},"7":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":42}},{"start":{"line":81,"column":20},"end":{"line":81,"column":45}},{"start":{"line":82,"column":20},"end":{"line":82,"column":57}},{"start":{"line":83,"column":20},"end":{"line":83,"column":51}},{"start":{"line":84,"column":20},"end":{"line":84,"column":59}},{"start":{"line":85,"column":20},"end":{"line":85,"column":51}}]},"8":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":24},"end":{"line":88,"column":60}},{"start":{"line":89,"column":24},"end":{"line":89,"column":76}}]},"9":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":16},"end":{"line":101,"column":16}},{"start":{"line":101,"column":16},"end":{"line":101,"column":16}}]},"10":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":11},"end":{"line":126,"column":65}},{"start":{"line":126,"column":69},"end":{"line":126,"column":140}}]},"11":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":24},"end":{"line":160,"column":42}},{"start":{"line":160,"column":46},"end":{"line":160,"column":48}}]},"12":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":16},"end":{"line":201,"column":16}},{"start":{"line":201,"column":16},"end":{"line":201,"column":16}}]},"13":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":16},"end":{"line":209,"column":16}},{"start":{"line":209,"column":16},"end":{"line":209,"column":16}}]},"14":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":16},"end":{"line":217,"column":16}},{"start":{"line":217,"column":16},"end":{"line":217,"column":16}}]},"15":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":20},"end":{"line":217,"column":24}},{"start":{"line":217,"column":28},"end":{"line":217,"column":68}}]},"16":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":16},"end":{"line":232,"column":16}},{"start":{"line":232,"column":16},"end":{"line":232,"column":16}}]},"17":{"line":232,"type":"binary-expr","locations":[{"start":{"line":232,"column":20},"end":{"line":232,"column":39}},{"start":{"line":232,"column":43},"end":{"line":232,"column":50}},{"start":{"line":232,"column":54},"end":{"line":232,"column":66}}]},"18":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":16},"end":{"line":237,"column":16}},{"start":{"line":237,"column":16},"end":{"line":237,"column":16}}]},"19":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":16},"end":{"line":244,"column":16}},{"start":{"line":244,"column":16},"end":{"line":244,"column":16}}]},"20":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":20},"end":{"line":244,"column":43}},{"start":{"line":244,"column":47},"end":{"line":244,"column":76}}]},"21":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":16},"end":{"line":251,"column":16}},{"start":{"line":251,"column":16},"end":{"line":251,"column":16}}]},"22":{"line":251,"type":"binary-expr","locations":[{"start":{"line":251,"column":20},"end":{"line":251,"column":28}},{"start":{"line":251,"column":32},"end":{"line":251,"column":62}}]},"23":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":16},"end":{"line":258,"column":16}},{"start":{"line":258,"column":16},"end":{"line":258,"column":16}}]},"24":{"line":258,"type":"binary-expr","locations":[{"start":{"line":258,"column":20},"end":{"line":258,"column":43}},{"start":{"line":259,"column":21},"end":{"line":259,"column":38}},{"start":{"line":259,"column":42},"end":{"line":259,"column":57}},{"start":{"line":259,"column":61},"end":{"line":259,"column":87}},{"start":{"line":260,"column":20},"end":{"line":260,"column":36}},{"start":{"line":261,"column":20},"end":{"line":261,"column":35}}]},"25":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":28},"end":{"line":267,"column":28}},{"start":{"line":267,"column":28},"end":{"line":267,"column":28}}]},"26":{"line":267,"type":"binary-expr","locations":[{"start":{"line":267,"column":33},"end":{"line":267,"column":60}},{"start":{"line":267,"column":64},"end":{"line":267,"column":78}},{"start":{"line":267,"column":83},"end":{"line":267,"column":114}}]},"27":{"line":276,"type":"cond-expr","locations":[{"start":{"line":276,"column":73},"end":{"line":276,"column":114}},{"start":{"line":276,"column":117},"end":{"line":276,"column":156}}]},"28":{"line":278,"type":"cond-expr","locations":[{"start":{"line":278,"column":62},"end":{"line":278,"column":70}},{"start":{"line":278,"column":73},"end":{"line":278,"column":75}}]},"29":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":28},"end":{"line":281,"column":28}},{"start":{"line":281,"column":28},"end":{"line":281,"column":28}}]}},"code":["/**"," * @fileoverview A rule to suggest using arrow functions as callbacks."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given variable is a function name."," * @param {escope.Variable} variable - A variable to check."," * @returns {boolean} `true` if the variable is a function name."," */","function isFunctionName(variable) {","    return variable && variable.defs[0].type === \"FunctionName\";","}","","/**"," * Checks whether or not a given MetaProperty node equals to a given value."," * @param {ASTNode} node - A MetaProperty node to check."," * @param {string} metaName - The name of `MetaProperty.meta`."," * @param {string} propertyName - The name of `MetaProperty.property`."," * @returns {boolean} `true` if the node is the specific value."," */","function checkMetaProperty(node, metaName, propertyName) {","    return node.meta.name === metaName && node.property.name === propertyName;","}","","/**"," * Gets the variable object of `arguments` which is defined implicitly."," * @param {escope.Scope} scope - A scope to get."," * @returns {escope.Variable} The found variable object."," */","function getVariableOfArguments(scope) {","    const variables = scope.variables;","","    for (let i = 0; i < variables.length; ++i) {","        const variable = variables[i];","","        if (variable.name === \"arguments\") {","","            /*","             * If there was a parameter which is named \"arguments\", the","             * implicit \"arguments\" is not defined.","             * So does fast return with null.","             */","            return (variable.identifiers.length === 0) ? variable : null;","        }","    }","","    /* istanbul ignore next */","    return null;","}","","/**"," * Checkes whether or not a given node is a callback."," * @param {ASTNode} node - A node to check."," * @returns {Object}"," *   {boolean} retv.isCallback - `true` if the node is a callback."," *   {boolean} retv.isLexicalThis - `true` if the node is with `.bind(this)`."," */","function getCallbackInfo(node) {","    const retv = { isCallback: false, isLexicalThis: false };","    let parent = node.parent;","","    while (node) {","        switch (parent.type) {","","            // Checks parents recursively.","","            case \"LogicalExpression\":","            case \"ConditionalExpression\":","                break;","","            // Checks whether the parent node is `.bind(this)` call.","            case \"MemberExpression\":","                if (parent.object === node &&","                    !parent.property.computed &&","                    parent.property.type === \"Identifier\" &&","                    parent.property.name === \"bind\" &&","                    parent.parent.type === \"CallExpression\" &&","                    parent.parent.callee === parent","                ) {","                    retv.isLexicalThis = (","                        parent.parent.arguments.length === 1 &&","                        parent.parent.arguments[0].type === \"ThisExpression\"","                    );","                    node = parent;","                    parent = parent.parent;","                } else {","                    return retv;","                }","                break;","","            // Checks whether the node is a callback.","            case \"CallExpression\":","            case \"NewExpression\":","                if (parent.callee !== node) {","                    retv.isCallback = true;","                }","                return retv;","","            default:","                return retv;","        }","","        node = parent;","        parent = parent.parent;","    }","","    /* istanbul ignore next */","    throw new Error(\"unreachable\");","}","","/**","* Checks whether a simple list of parameters contains any duplicates. This does not handle complex","parameter lists (e.g. with destructuring), since complex parameter lists are a SyntaxError with duplicate","parameter names anyway. Instead, it always returns `false` for complex parameter lists.","* @param {ASTNode[]} paramsList The list of parameters for a function","* @returns {boolean} `true` if the list of parameters contains any duplicates","*/","function hasDuplicateParams(paramsList) {","    return paramsList.every(param => param.type === \"Identifier\") && paramsList.length !== new Set(paramsList.map(param => param.name)).size;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require arrow functions as callbacks\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    allowNamedFunctions: {","                        type: \"boolean\"","                    },","                    allowUnboundThis: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","        const options = context.options[0] || {};","","        const allowUnboundThis = options.allowUnboundThis !== false;  // default to true","        const allowNamedFunctions = options.allowNamedFunctions;","        const sourceCode = context.getSourceCode();","","        /*","         * {Array<{this: boolean, super: boolean, meta: boolean}>}","         * - this - A flag which shows there are one or more ThisExpression.","         * - super - A flag which shows there are one or more Super.","         * - meta - A flag which shows there are one or more MethProperty.","         */","        let stack = [];","","        /**","         * Pushes new function scope with all `false` flags.","         * @returns {void}","         */","        function enterScope() {","            stack.push({ this: false, super: false, meta: false });","        }","","        /**","         * Pops a function scope from the stack.","         * @returns {{this: boolean, super: boolean, meta: boolean}} The information of the last scope.","         */","        function exitScope() {","            return stack.pop();","        }","","        return {","","            // Reset internal state.","            Program() {","                stack = [];","            },","","            // If there are below, it cannot replace with arrow functions merely.","            ThisExpression() {","                const info = stack[stack.length - 1];","","                if (info) {","                    info.this = true;","                }","            },","","            Super() {","                const info = stack[stack.length - 1];","","                if (info) {","                    info.super = true;","                }","            },","","            MetaProperty(node) {","                const info = stack[stack.length - 1];","","                if (info && checkMetaProperty(node, \"new\", \"target\")) {","                    info.meta = true;","                }","            },","","            // To skip nested scopes.","            FunctionDeclaration: enterScope,","            \"FunctionDeclaration:exit\": exitScope,","","            // Main.","            FunctionExpression: enterScope,","            \"FunctionExpression:exit\"(node) {","                const scopeInfo = exitScope();","","                // Skip named function expressions","                if (allowNamedFunctions && node.id && node.id.name) {","                    return;","                }","","                // Skip generators.","                if (node.generator) {","                    return;","                }","","                // Skip recursive functions.","                const nameVar = context.getDeclaredVariables(node)[0];","","                if (isFunctionName(nameVar) && nameVar.references.length > 0) {","                    return;","                }","","                // Skip if it's using arguments.","                const variable = getVariableOfArguments(context.getScope());","","                if (variable && variable.references.length > 0) {","                    return;","                }","","                // Reports if it's a callback which can replace with arrows.","                const callbackInfo = getCallbackInfo(node);","","                if (callbackInfo.isCallback &&","                    (!allowUnboundThis || !scopeInfo.this || callbackInfo.isLexicalThis) &&","                    !scopeInfo.super &&","                    !scopeInfo.meta","                ) {","                    context.report({","                        node,","                        message: \"Unexpected function expression.\",","                        fix(fixer) {","                            if ((!callbackInfo.isLexicalThis && scopeInfo.this) || hasDuplicateParams(node.params)) {","","                                // If the callback function does not have .bind(this) and contains a reference to `this`, there","                                // is no way to determine what `this` should be, so don't perform any fixes.","                                // If the callback function has duplicates in its list of parameters (possible in sloppy mode),","                                // don't replace it with an arrow function, because this is a SyntaxError with arrow functions.","                                return null;","                            }","","                            const paramsLeftParen = node.params.length ? sourceCode.getTokenBefore(node.params[0]) : sourceCode.getTokenBefore(node.body, 1);","                            const paramsRightParen = sourceCode.getTokenBefore(node.body);","                            const asyncKeyword = node.async ? \"async \" : \"\";","                            const paramsFullText = sourceCode.text.slice(paramsLeftParen.range[0], paramsRightParen.range[1]);","","                            if (callbackInfo.isLexicalThis) {","","                                // If the callback function has `.bind(this)`, replace it with an arrow function and remove the binding.","                                return fixer.replaceText(node.parent.parent, `${asyncKeyword}${paramsFullText} => ${sourceCode.getText(node.body)}`);","                            }","","                            // Otherwise, only replace the `function` keyword and parameters with the arrow function parameters.","                            return fixer.replaceTextRange([node.start, node.body.start], `${asyncKeyword}${paramsFullText} => `);","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"17":1,"18":0,"28":1,"29":0,"37":1,"38":0,"40":0,"41":0,"43":0,"50":0,"55":1,"65":1,"66":0,"67":0,"69":0,"70":0,"76":0,"80":0,"87":0,"91":0,"92":0,"94":0,"96":0,"101":0,"102":0,"104":0,"107":0,"110":0,"111":0,"115":1,"125":1,"126":0,"133":1,"160":0,"162":0,"163":0,"164":0,"172":0,"178":1,"179":0,"186":1,"187":0,"190":0,"194":0,"199":0,"201":0,"202":0,"207":0,"209":0,"210":0,"215":0,"217":0,"218":0,"229":0,"232":0,"233":0,"237":0,"238":0,"242":0,"244":0,"245":0,"249":0,"251":0,"252":0,"256":0,"258":0,"263":0,"267":0,"273":0,"276":0,"277":0,"278":0,"279":0,"281":0,"284":0,"288":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-const.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-const.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0],"26":[0,0,0,0,0,0],"27":[0,0],"28":[0,0],"29":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"isInitOfForStatement","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":36}}},"2":{"name":"canBecomeVariableDeclaration","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":50}}},"3":{"name":"getIdentifierIfShouldBeConst","line":83,"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":72}}},"4":{"name":"getDestructuringHost","line":153,"loc":{"start":{"line":153,"column":0},"end":{"line":153,"column":41}}},"5":{"name":"groupByDestructuring","line":180,"loc":{"start":{"line":180,"column":0},"end":{"line":180,"column":65}}},"6":{"name":"findUp","line":224,"loc":{"start":{"line":224,"column":0},"end":{"line":224,"column":40}}},"7":{"name":"(anonymous_7)","line":260,"loc":{"start":{"line":260,"column":10},"end":{"line":260,"column":20}}},"8":{"name":"checkGroup","line":281,"loc":{"start":{"line":281,"column":8},"end":{"line":281,"column":35}}},"9":{"name":"(anonymous_9)","line":313,"loc":{"start":{"line":313,"column":26},"end":{"line":313,"column":29}}},"10":{"name":"(anonymous_10)","line":317,"loc":{"start":{"line":317,"column":31},"end":{"line":317,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":101}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":72}},"3":{"start":{"line":14,"column":0},"end":{"line":14,"column":80}},"4":{"start":{"line":23,"column":0},"end":{"line":23,"column":58}},"5":{"start":{"line":31,"column":0},"end":{"line":33,"column":1}},"6":{"start":{"line":32,"column":4},"end":{"line":32,"column":76}},"7":{"start":{"line":41,"column":0},"end":{"line":56,"column":1}},"8":{"start":{"line":42,"column":4},"end":{"line":42,"column":33}},"9":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"10":{"start":{"line":45,"column":8},"end":{"line":45,"column":27}},"11":{"start":{"line":48,"column":4},"end":{"line":55,"column":6}},"12":{"start":{"line":83,"column":0},"end":{"line":141,"column":1}},"13":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"14":{"start":{"line":85,"column":8},"end":{"line":85,"column":20}},"15":{"start":{"line":95,"column":4},"end":{"line":97,"column":5}},"16":{"start":{"line":96,"column":8},"end":{"line":96,"column":20}},"17":{"start":{"line":100,"column":4},"end":{"line":100,"column":22}},"18":{"start":{"line":101,"column":4},"end":{"line":101,"column":33}},"19":{"start":{"line":102,"column":4},"end":{"line":102,"column":43}},"20":{"start":{"line":104,"column":4},"end":{"line":124,"column":5}},"21":{"start":{"line":105,"column":8},"end":{"line":105,"column":40}},"22":{"start":{"line":107,"column":8},"end":{"line":123,"column":9}},"23":{"start":{"line":108,"column":12},"end":{"line":111,"column":14}},"24":{"start":{"line":113,"column":12},"end":{"line":115,"column":13}},"25":{"start":{"line":114,"column":16},"end":{"line":114,"column":28}},"26":{"start":{"line":116,"column":12},"end":{"line":116,"column":31}},"27":{"start":{"line":118,"column":15},"end":{"line":123,"column":9}},"28":{"start":{"line":119,"column":12},"end":{"line":121,"column":13}},"29":{"start":{"line":120,"column":16},"end":{"line":120,"column":28}},"30":{"start":{"line":122,"column":12},"end":{"line":122,"column":36}},"31":{"start":{"line":128,"column":4},"end":{"line":132,"column":6}},"32":{"start":{"line":134,"column":4},"end":{"line":136,"column":5}},"33":{"start":{"line":135,"column":8},"end":{"line":135,"column":20}},"34":{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},"35":{"start":{"line":138,"column":8},"end":{"line":138,"column":37}},"36":{"start":{"line":140,"column":4},"end":{"line":140,"column":29}},"37":{"start":{"line":153,"column":0},"end":{"line":167,"column":1}},"38":{"start":{"line":154,"column":4},"end":{"line":156,"column":5}},"39":{"start":{"line":155,"column":8},"end":{"line":155,"column":20}},"40":{"start":{"line":157,"column":4},"end":{"line":157,"column":43}},"41":{"start":{"line":159,"column":4},"end":{"line":161,"column":5}},"42":{"start":{"line":160,"column":8},"end":{"line":160,"column":27}},"43":{"start":{"line":163,"column":4},"end":{"line":165,"column":5}},"44":{"start":{"line":164,"column":8},"end":{"line":164,"column":20}},"45":{"start":{"line":166,"column":4},"end":{"line":166,"column":16}},"46":{"start":{"line":180,"column":0},"end":{"line":214,"column":1}},"47":{"start":{"line":181,"column":4},"end":{"line":181,"column":36}},"48":{"start":{"line":183,"column":4},"end":{"line":211,"column":5}},"49":{"start":{"line":184,"column":8},"end":{"line":184,"column":38}},"50":{"start":{"line":185,"column":8},"end":{"line":185,"column":47}},"51":{"start":{"line":186,"column":8},"end":{"line":186,"column":90}},"52":{"start":{"line":187,"column":8},"end":{"line":187,"column":26}},"53":{"start":{"line":189,"column":8},"end":{"line":210,"column":9}},"54":{"start":{"line":190,"column":12},"end":{"line":190,"column":44}},"55":{"start":{"line":191,"column":12},"end":{"line":191,"column":44}},"56":{"start":{"line":195,"column":12},"end":{"line":197,"column":13}},"57":{"start":{"line":196,"column":16},"end":{"line":196,"column":25}},"58":{"start":{"line":198,"column":12},"end":{"line":198,"column":24}},"59":{"start":{"line":201,"column":12},"end":{"line":201,"column":58}},"60":{"start":{"line":203,"column":12},"end":{"line":209,"column":13}},"61":{"start":{"line":204,"column":16},"end":{"line":208,"column":17}},"62":{"start":{"line":205,"column":20},"end":{"line":205,"column":62}},"63":{"start":{"line":207,"column":20},"end":{"line":207,"column":59}},"64":{"start":{"line":213,"column":4},"end":{"line":213,"column":25}},"65":{"start":{"line":224,"column":0},"end":{"line":232,"column":1}},"66":{"start":{"line":225,"column":4},"end":{"line":227,"column":5}},"67":{"start":{"line":226,"column":8},"end":{"line":226,"column":20}},"68":{"start":{"line":228,"column":4},"end":{"line":230,"column":5}},"69":{"start":{"line":229,"column":8},"end":{"line":229,"column":20}},"70":{"start":{"line":231,"column":4},"end":{"line":231,"column":49}},"71":{"start":{"line":238,"column":0},"end":{"line":324,"column":2}},"72":{"start":{"line":261,"column":8},"end":{"line":261,"column":49}},"73":{"start":{"line":262,"column":8},"end":{"line":262,"column":51}},"74":{"start":{"line":263,"column":8},"end":{"line":263,"column":75}},"75":{"start":{"line":264,"column":8},"end":{"line":264,"column":79}},"76":{"start":{"line":265,"column":8},"end":{"line":265,"column":29}},"77":{"start":{"line":281,"column":8},"end":{"line":310,"column":9}},"78":{"start":{"line":282,"column":12},"end":{"line":282,"column":56}},"79":{"start":{"line":284,"column":12},"end":{"line":309,"column":13}},"80":{"start":{"line":285,"column":16},"end":{"line":285,"column":131}},"81":{"start":{"line":285,"column":92},"end":{"line":285,"column":129}},"82":{"start":{"line":286,"column":16},"end":{"line":299,"column":58}},"83":{"start":{"line":301,"column":16},"end":{"line":308,"column":19}},"84":{"start":{"line":302,"column":20},"end":{"line":307,"column":23}},"85":{"start":{"line":306,"column":50},"end":{"line":306,"column":117}},"86":{"start":{"line":312,"column":8},"end":{"line":322,"column":10}},"87":{"start":{"line":314,"column":16},"end":{"line":314,"column":92}},"88":{"start":{"line":318,"column":16},"end":{"line":320,"column":17}},"89":{"start":{"line":319,"column":20},"end":{"line":319,"column":75}}},"branchMap":{"1":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":11},"end":{"line":32,"column":46}},{"start":{"line":32,"column":50},"end":{"line":32,"column":75}}]},"2":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":42}},{"start":{"line":51,"column":12},"end":{"line":51,"column":48}},{"start":{"line":52,"column":12},"end":{"line":52,"column":54}},{"start":{"line":53,"column":12},"end":{"line":53,"column":63}}]},"3":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":84,"column":4}},{"start":{"line":84,"column":4},"end":{"line":84,"column":4}}]},"4":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":8},"end":{"line":84,"column":27}},{"start":{"line":84,"column":31},"end":{"line":84,"column":63}}]},"5":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":4},"end":{"line":95,"column":4}},{"start":{"line":95,"column":4},"end":{"line":95,"column":4}}]},"6":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":107,"column":8}},{"start":{"line":107,"column":8},"end":{"line":107,"column":8}}]},"7":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":16},"end":{"line":109,"column":31}},{"start":{"line":110,"column":16},"end":{"line":110,"column":58}}]},"8":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":12},"end":{"line":113,"column":12}},{"start":{"line":113,"column":12},"end":{"line":113,"column":12}}]},"9":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":15},"end":{"line":118,"column":15}},{"start":{"line":118,"column":15},"end":{"line":118,"column":15}}]},"10":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":19},"end":{"line":118,"column":37}},{"start":{"line":118,"column":41},"end":{"line":118,"column":56}}]},"11":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":12},"end":{"line":119,"column":12}},{"start":{"line":119,"column":12},"end":{"line":119,"column":12}}]},"12":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":8},"end":{"line":129,"column":23}},{"start":{"line":130,"column":8},"end":{"line":130,"column":38}},{"start":{"line":131,"column":8},"end":{"line":131,"column":55}}]},"13":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":4},"end":{"line":134,"column":4}},{"start":{"line":134,"column":4},"end":{"line":134,"column":4}}]},"14":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":4},"end":{"line":137,"column":4}},{"start":{"line":137,"column":4},"end":{"line":137,"column":4}}]},"15":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]},"16":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":4},"end":{"line":163,"column":4}},{"start":{"line":163,"column":4},"end":{"line":163,"column":4}}]},"17":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":12},"end":{"line":195,"column":12}},{"start":{"line":195,"column":12},"end":{"line":195,"column":12}}]},"18":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":12},"end":{"line":203,"column":12}},{"start":{"line":203,"column":12},"end":{"line":203,"column":12}}]},"19":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":16},"end":{"line":204,"column":16}},{"start":{"line":204,"column":16},"end":{"line":204,"column":16}}]},"20":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":4},"end":{"line":225,"column":4}},{"start":{"line":225,"column":4},"end":{"line":225,"column":4}}]},"21":{"line":225,"type":"binary-expr","locations":[{"start":{"line":225,"column":8},"end":{"line":225,"column":13}},{"start":{"line":225,"column":17},"end":{"line":225,"column":33}}]},"22":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":4},"end":{"line":228,"column":4}},{"start":{"line":228,"column":4},"end":{"line":228,"column":4}}]},"23":{"line":261,"type":"binary-expr","locations":[{"start":{"line":261,"column":24},"end":{"line":261,"column":42}},{"start":{"line":261,"column":46},"end":{"line":261,"column":48}}]},"24":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":12},"end":{"line":284,"column":12}},{"start":{"line":284,"column":12},"end":{"line":284,"column":12}}]},"25":{"line":284,"type":"binary-expr","locations":[{"start":{"line":284,"column":16},"end":{"line":284,"column":28}},{"start":{"line":284,"column":33},"end":{"line":284,"column":59}},{"start":{"line":284,"column":63},"end":{"line":284,"column":100}}]},"26":{"line":286,"type":"binary-expr","locations":[{"start":{"line":286,"column":34},"end":{"line":286,"column":47}},{"start":{"line":291,"column":20},"end":{"line":291,"column":59}},{"start":{"line":294,"column":21},"end":{"line":294,"column":67}},{"start":{"line":294,"column":71},"end":{"line":294,"column":117}},{"start":{"line":294,"column":121},"end":{"line":294,"column":155}},{"start":{"line":299,"column":20},"end":{"line":299,"column":57}}]},"27":{"line":306,"type":"cond-expr","locations":[{"start":{"line":306,"column":41},"end":{"line":306,"column":117}},{"start":{"line":306,"column":120},"end":{"line":306,"column":124}}]},"28":{"line":318,"type":"if","locations":[{"start":{"line":318,"column":16},"end":{"line":318,"column":16}},{"start":{"line":318,"column":16},"end":{"line":318,"column":16}}]},"29":{"line":318,"type":"binary-expr","locations":[{"start":{"line":318,"column":20},"end":{"line":318,"column":39}},{"start":{"line":318,"column":43},"end":{"line":318,"column":70}}]}},"code":["/**"," * @fileoverview A rule to suggest using of const declaration for variables that are never reassigned after declared."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const PATTERN_TYPE = /^(?:.+?Pattern|RestElement|SpreadProperty|ExperimentalRestProperty|Property)$/;","const DECLARATION_HOST_TYPE = /^(?:Program|BlockStatement|SwitchCase)$/;","const DESTRUCTURING_HOST_TYPE = /^(?:VariableDeclarator|AssignmentExpression)$/;","","/**"," * Adds multiple items to the tail of an array."," *"," * @param {any[]} array - A destination to add."," * @param {any[]} values - Items to be added."," * @returns {void}"," */","const pushAll = Function.apply.bind(Array.prototype.push);","","/**"," * Checks whether a given node is located at `ForStatement.init` or not."," *"," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node is located at `ForStatement.init`."," */","function isInitOfForStatement(node) {","    return node.parent.type === \"ForStatement\" && node.parent.init === node;","}","","/**"," * Checks whether a given Identifier node becomes a VariableDeclaration or not."," *"," * @param {ASTNode} identifier - An Identifier node to check."," * @returns {boolean} `true` if the node can become a VariableDeclaration."," */","function canBecomeVariableDeclaration(identifier) {","    let node = identifier.parent;","","    while (PATTERN_TYPE.test(node.type)) {","        node = node.parent;","    }","","    return (","        node.type === \"VariableDeclarator\" ||","        (","            node.type === \"AssignmentExpression\" &&","            node.parent.type === \"ExpressionStatement\" &&","            DECLARATION_HOST_TYPE.test(node.parent.parent.type)","        )","    );","}","","/**"," * Gets an identifier node of a given variable."," *"," * If the initialization exists or one or more reading references exist before"," * the first assignment, the identifier node is the node of the declaration."," * Otherwise, the identifier node is the node of the first assignment."," *"," * If the variable should not change to const, this function returns null."," * - If the variable is reassigned."," * - If the variable is never initialized nor assigned."," * - If the variable is initialized in a different scope from the declaration."," * - If the unique assignment of the variable cannot change to a declaration."," *   e.g. `if (a) b = 1` / `return (b = 1)`"," * - If the variable is declared in the global scope and `eslintUsed` is `true`."," *   `/*exported foo` directive comment makes such variables. This rule does not"," *   warn such variables because this rule cannot distinguish whether the"," *   exported variables are reassigned or not."," *"," * @param {escope.Variable} variable - A variable to get."," * @param {boolean} ignoreReadBeforeAssign -"," *      The value of `ignoreReadBeforeAssign` option."," * @returns {ASTNode|null}"," *      An Identifier node if the variable should change to const."," *      Otherwise, null."," */","function getIdentifierIfShouldBeConst(variable, ignoreReadBeforeAssign) {","    if (variable.eslintUsed && variable.scope.type === \"global\") {","        return null;","    }","","    /*","     * Due to a bug in acorn, code such as `let foo = 1; let foo = 2;` will not throw a syntax error. As a sanity","     * check, make sure that the variable only has one declaration. After the parsing bug is fixed, this check","     * will no longer be necessary, because variables declared with `let` or `const` should always have exactly one","     * declaration.","     * https://github.com/ternjs/acorn/issues/487","     */","    if (variable.defs.length > 1) {","        return null;","    }","","    // Finds the unique WriteReference.","    let writer = null;","    let isReadBeforeInit = false;","    const references = variable.references;","","    for (let i = 0; i < references.length; ++i) {","        const reference = references[i];","","        if (reference.isWrite()) {","            const isReassigned = (","                writer !== null &&","                writer.identifier !== reference.identifier","            );","","            if (isReassigned) {","                return null;","            }","            writer = reference;","","        } else if (reference.isRead() && writer === null) {","            if (ignoreReadBeforeAssign) {","                return null;","            }","            isReadBeforeInit = true;","        }","    }","","    // If the assignment is from a different scope, ignore it.","    // If the assignment cannot change to a declaration, ignore it.","    const shouldBeConst = (","        writer !== null &&","        writer.from === variable.scope &&","        canBecomeVariableDeclaration(writer.identifier)","    );","","    if (!shouldBeConst) {","        return null;","    }","    if (isReadBeforeInit) {","        return variable.defs[0].name;","    }","    return writer.identifier;","}","","/**"," * Gets the VariableDeclarator/AssignmentExpression node that a given reference"," * belongs to."," * This is used to detect a mix of reassigned and never reassigned in a"," * destructuring."," *"," * @param {escope.Reference} reference - A reference to get."," * @returns {ASTNode|null} A VariableDeclarator/AssignmentExpression node or"," *      null."," */","function getDestructuringHost(reference) {","    if (!reference.isWrite()) {","        return null;","    }","    let node = reference.identifier.parent;","","    while (PATTERN_TYPE.test(node.type)) {","        node = node.parent;","    }","","    if (!DESTRUCTURING_HOST_TYPE.test(node.type)) {","        return null;","    }","    return node;","}","","/**"," * Groups by the VariableDeclarator/AssignmentExpression node that each"," * reference of given variables belongs to."," * This is used to detect a mix of reassigned and never reassigned in a"," * destructuring."," *"," * @param {escope.Variable[]} variables - Variables to group by destructuring."," * @param {boolean} ignoreReadBeforeAssign -"," *      The value of `ignoreReadBeforeAssign` option."," * @returns {Map<ASTNode, ASTNode[]>} Grouped identifier nodes."," */","function groupByDestructuring(variables, ignoreReadBeforeAssign) {","    const identifierMap = new Map();","","    for (let i = 0; i < variables.length; ++i) {","        const variable = variables[i];","        const references = variable.references;","        const identifier = getIdentifierIfShouldBeConst(variable, ignoreReadBeforeAssign);","        let prevId = null;","","        for (let j = 0; j < references.length; ++j) {","            const reference = references[j];","            const id = reference.identifier;","","            // Avoid counting a reference twice or more for default values of","            // destructuring.","            if (id === prevId) {","                continue;","            }","            prevId = id;","","            // Add the identifier node into the destructuring group.","            const group = getDestructuringHost(reference);","","            if (group) {","                if (identifierMap.has(group)) {","                    identifierMap.get(group).push(identifier);","                } else {","                    identifierMap.set(group, [identifier]);","                }","            }","        }","    }","","    return identifierMap;","}","","/**"," * Finds the nearest parent of node with a given type."," *"," * @param {ASTNode} node – The node to search from."," * @param {string} type – The type field of the parent node."," * @param {Function} shouldStop – a predicate that returns true if the traversal should stop, and false otherwise."," * @returns {ASTNode} The closest ancestor with the specified type; null if no such ancestor exists."," */","function findUp(node, type, shouldStop) {","    if (!node || shouldStop(node)) {","        return null;","    }","    if (node.type === type) {","        return node;","    }","    return findUp(node.parent, type, shouldStop);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require `const` declarations for variables that are never reassigned after declared\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        fixable: \"code\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    destructuring: { enum: [\"any\", \"all\"] },","                    ignoreReadBeforeAssign: { type: \"boolean\" }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options[0] || {};","        const sourceCode = context.getSourceCode();","        const checkingMixedDestructuring = options.destructuring !== \"all\";","        const ignoreReadBeforeAssign = options.ignoreReadBeforeAssign === true;","        const variables = [];","","        /**","         * Reports given identifier nodes if all of the nodes should be declared","         * as const.","         *","         * The argument 'nodes' is an array of Identifier nodes.","         * This node is the result of 'getIdentifierIfShouldBeConst()', so it's","         * nullable. In simple declaration or assignment cases, the length of","         * the array is 1. In destructuring cases, the length of the array can","         * be 2 or more.","         *","         * @param {(escope.Reference|null)[]} nodes -","         *      References which are grouped by destructuring to report.","         * @returns {void}","         */","        function checkGroup(nodes) {","            const nodesToReport = nodes.filter(Boolean);","","            if (nodes.length && (checkingMixedDestructuring || nodesToReport.length === nodes.length)) {","                const varDeclParent = findUp(nodes[0], \"VariableDeclaration\", parentNode => parentNode.type.endsWith(\"Statement\"));","                const shouldFix = varDeclParent &&","","                    // If there are multiple variable declarations, like {let a = 1, b = 2}, then","                    // do not attempt to fix if one of the declarations should be `const`. It's","                    // too hard to know how the developer would want to automatically resolve the issue.","                    varDeclParent.declarations.length === 1 &&","","                    // Don't do a fix unless the variable is initialized (or it's in a for-in or for-of loop)","                    (varDeclParent.parent.type === \"ForInStatement\" || varDeclParent.parent.type === \"ForOfStatement\" || varDeclParent.declarations[0].init) &&","","                    // If options.destucturing is \"all\", then this warning will not occur unless","                    // every assignment in the destructuring should be const. In that case, it's safe","                    // to apply the fix.","                    nodesToReport.length === nodes.length;","","                nodesToReport.forEach(node => {","                    context.report({","                        node,","                        message: \"'{{name}}' is never reassigned. Use 'const' instead.\",","                        data: node,","                        fix: shouldFix ? fixer => fixer.replaceText(sourceCode.getFirstToken(varDeclParent), \"const\") : null","                    });","                });","            }","        }","","        return {","            \"Program:exit\"() {","                groupByDestructuring(variables, ignoreReadBeforeAssign).forEach(checkGroup);","            },","","            VariableDeclaration(node) {","                if (node.kind === \"let\" && !isInitOfForStatement(node)) {","                    pushAll(variables, context.getDeclaredVariables(node));","                }","            }","        };","    }","};",""],"l":{"12":1,"13":1,"14":1,"23":1,"31":1,"32":0,"41":1,"42":0,"44":0,"45":0,"48":0,"83":1,"84":0,"85":0,"95":0,"96":0,"100":0,"101":0,"102":0,"104":0,"105":0,"107":0,"108":0,"113":0,"114":0,"116":0,"118":0,"119":0,"120":0,"122":0,"128":0,"134":0,"135":0,"137":0,"138":0,"140":0,"153":1,"154":0,"155":0,"157":0,"159":0,"160":0,"163":0,"164":0,"166":0,"180":1,"181":0,"183":0,"184":0,"185":0,"186":0,"187":0,"189":0,"190":0,"191":0,"195":0,"196":0,"198":0,"201":0,"203":0,"204":0,"205":0,"207":0,"213":0,"224":1,"225":0,"226":0,"228":0,"229":0,"231":0,"238":1,"261":0,"262":0,"263":0,"264":0,"265":0,"281":1,"282":0,"284":0,"285":0,"286":0,"301":0,"302":0,"306":0,"312":0,"314":0,"318":0,"319":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-destructuring.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-destructuring.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":20}}},"2":{"name":"isArrayIndexAccess","line":80,"loc":{"start":{"line":80,"column":8},"end":{"line":80,"column":42}}},"3":{"name":"report","line":91,"loc":{"start":{"line":91,"column":8},"end":{"line":91,"column":42}}},"4":{"name":"performCheck","line":107,"loc":{"start":{"line":107,"column":8},"end":{"line":107,"column":63}}},"5":{"name":"checkVariableDeclarator","line":139,"loc":{"start":{"line":139,"column":8},"end":{"line":139,"column":47}}},"6":{"name":"checkAssigmentExpression","line":160,"loc":{"start":{"line":160,"column":8},"end":{"line":160,"column":48}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":175,"column":2}},"2":{"start":{"line":45,"column":8},"end":{"line":45,"column":31}},"3":{"start":{"line":46,"column":8},"end":{"line":46,"column":32}},"4":{"start":{"line":47,"column":8},"end":{"line":47,"column":48}},"5":{"start":{"line":48,"column":8},"end":{"line":48,"column":48}},"6":{"start":{"line":49,"column":8},"end":{"line":49,"column":53}},"7":{"start":{"line":51,"column":8},"end":{"line":59,"column":9}},"8":{"start":{"line":52,"column":12},"end":{"line":54,"column":13}},"9":{"start":{"line":53,"column":16},"end":{"line":53,"column":49}},"10":{"start":{"line":56,"column":12},"end":{"line":58,"column":13}},"11":{"start":{"line":57,"column":16},"end":{"line":57,"column":51}},"12":{"start":{"line":61,"column":8},"end":{"line":65,"column":9}},"13":{"start":{"line":62,"column":12},"end":{"line":64,"column":13}},"14":{"start":{"line":63,"column":16},"end":{"line":63,"column":92}},"15":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"16":{"start":{"line":81,"column":12},"end":{"line":81,"column":57}},"17":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"18":{"start":{"line":92,"column":12},"end":{"line":92,"column":105}},"19":{"start":{"line":107,"column":8},"end":{"line":130,"column":9}},"20":{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},"21":{"start":{"line":109,"column":16},"end":{"line":109,"column":23}},"22":{"start":{"line":112,"column":12},"end":{"line":115,"column":13}},"23":{"start":{"line":113,"column":16},"end":{"line":113,"column":44}},"24":{"start":{"line":114,"column":16},"end":{"line":114,"column":23}},"25":{"start":{"line":117,"column":12},"end":{"line":120,"column":13}},"26":{"start":{"line":118,"column":16},"end":{"line":118,"column":45}},"27":{"start":{"line":119,"column":16},"end":{"line":119,"column":23}},"28":{"start":{"line":122,"column":12},"end":{"line":129,"column":13}},"29":{"start":{"line":123,"column":16},"end":{"line":123,"column":52}},"30":{"start":{"line":125,"column":16},"end":{"line":128,"column":17}},"31":{"start":{"line":127,"column":20},"end":{"line":127,"column":49}},"32":{"start":{"line":139,"column":8},"end":{"line":152,"column":9}},"33":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"34":{"start":{"line":143,"column":16},"end":{"line":143,"column":23}},"35":{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},"36":{"start":{"line":148,"column":16},"end":{"line":148,"column":23}},"37":{"start":{"line":151,"column":12},"end":{"line":151,"column":51}},"38":{"start":{"line":160,"column":8},"end":{"line":164,"column":9}},"39":{"start":{"line":161,"column":12},"end":{"line":163,"column":13}},"40":{"start":{"line":162,"column":16},"end":{"line":162,"column":58}},"41":{"start":{"line":170,"column":8},"end":{"line":173,"column":10}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":52,"column":12}},{"start":{"line":52,"column":12},"end":{"line":52,"column":12}}]},"3":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":12}},{"start":{"line":56,"column":12},"end":{"line":56,"column":12}}]},"4":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]},"5":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":12}},{"start":{"line":62,"column":12},"end":{"line":62,"column":12}}]},"6":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12}},{"start":{"line":108,"column":12},"end":{"line":108,"column":12}}]},"7":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":12},"end":{"line":112,"column":12}},{"start":{"line":112,"column":12},"end":{"line":112,"column":12}}]},"8":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":16},"end":{"line":112,"column":27}},{"start":{"line":112,"column":31},"end":{"line":112,"column":60}}]},"9":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":12},"end":{"line":117,"column":12}},{"start":{"line":117,"column":12},"end":{"line":117,"column":12}}]},"10":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":16},"end":{"line":117,"column":28}},{"start":{"line":117,"column":32},"end":{"line":117,"column":59}}]},"11":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":12}},{"start":{"line":122,"column":12},"end":{"line":122,"column":12}}]},"12":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":16},"end":{"line":125,"column":16}},{"start":{"line":125,"column":16},"end":{"line":125,"column":16}}]},"13":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":21},"end":{"line":125,"column":48}},{"start":{"line":125,"column":52},"end":{"line":125,"column":84}},{"start":{"line":126,"column":21},"end":{"line":126,"column":51}},{"start":{"line":126,"column":55},"end":{"line":126,"column":86}}]},"14":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":142,"column":12}},{"start":{"line":142,"column":12},"end":{"line":142,"column":12}}]},"15":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":12},"end":{"line":147,"column":12}},{"start":{"line":147,"column":12},"end":{"line":147,"column":12}}]},"16":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":12},"end":{"line":161,"column":12}},{"start":{"line":161,"column":12},"end":{"line":161,"column":12}}]}},"code":["/**"," * @fileoverview Prefer destructuring from arrays and objects"," * @author Alex LaFroscia"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require destructuring from arrays and/or objects\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    array: {","                        type: \"boolean\"","                    },","                    object: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            },","            {","                type: \"object\",","                properties: {","                    enforceForRenamedProperties: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","    create(context) {","","        let checkArrays = true;","        let checkObjects = true;","        let enforceForRenamedProperties = false;","        const enabledTypes = context.options[0];","        const additionalOptions = context.options[1];","","        if (enabledTypes) {","            if (typeof enabledTypes.array !== \"undefined\") {","                checkArrays = enabledTypes.array;","            }","","            if (typeof enabledTypes.object !== \"undefined\") {","                checkObjects = enabledTypes.object;","            }","        }","","        if (additionalOptions) {","            if (typeof additionalOptions.enforceForRenamedProperties !== \"undefined\") {","                enforceForRenamedProperties = additionalOptions.enforceForRenamedProperties;","            }","        }","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Determines if the given node node is accessing an array index","         *","         * This is used to differentiate array index access from object property","         * access.","         *","         * @param {ASTNode} node the node to evaluate","         * @returns {boolean} whether or not the node is an integer","         */","        function isArrayIndexAccess(node) {","            return Number.isInteger(node.property.value);","        }","","        /**","         * Report that the given node should use destructuring","         *","         * @param {ASTNode} reportNode the node to report","         * @param {string} type the type of destructuring that should have been done","         * @returns {void}","         */","        function report(reportNode, type) {","            context.report({ node: reportNode, message: \"Use {{type}} destructuring.\", data: { type } });","        }","","        /**","         * Check that the `prefer-destructuring` rules are followed based on the","         * given left- and right-hand side of the assignment.","         *","         * Pulled out into a separate method so that VariableDeclarators and","         * AssignmentExpressions can share the same verification logic.","         *","         * @param {ASTNode} leftNode the left-hand side of the assignment","         * @param {ASTNode} rightNode the right-hand side of the assignment","         * @param {ASTNode} reportNode the node to report the error on","         * @returns {void}","         */","        function performCheck(leftNode, rightNode, reportNode) {","            if (rightNode.type !== \"MemberExpression\") {","                return;","            }","","            if (checkArrays && isArrayIndexAccess(rightNode)) {","                report(reportNode, \"array\");","                return;","            }","","            if (checkObjects && enforceForRenamedProperties) {","                report(reportNode, \"object\");","                return;","            }","","            if (checkObjects) {","                const property = rightNode.property;","","                if ((property.type === \"Literal\" && leftNode.name === property.value) ||","                    (property.type === \"Identifier\" && leftNode.name === property.name)) {","                    report(reportNode, \"object\");","                }","            }","        }","","        /**","         * Check if a given variable declarator is coming from an property access","         * that should be using destructuring instead","         *","         * @param {ASTNode} node the variable declarator to check","         * @returns {void}","         */","        function checkVariableDeclarator(node) {","","            // Skip if variable is declared without assignment","            if (!node.init) {","                return;","            }","","            // We only care about member expressions past this point","            if (node.init.type !== \"MemberExpression\") {","                return;","            }","","            performCheck(node.id, node.init, node);","        }","","        /**","         * Run the `prefer-destructuring` check on an AssignmentExpression","         *","         * @param {ASTNode} node the AssignmentExpression node","         * @returns {void}","         */","        function checkAssigmentExpression(node) {","            if (node.operator === \"=\") {","                performCheck(node.left, node.right, node);","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            VariableDeclarator: checkVariableDeclarator,","            AssignmentExpression: checkAssigmentExpression","        };","    }","};",""],"l":{"11":1,"45":0,"46":0,"47":0,"48":0,"49":0,"51":0,"52":0,"53":0,"56":0,"57":0,"61":0,"62":0,"63":0,"80":1,"81":0,"91":1,"92":0,"107":1,"108":0,"109":0,"112":0,"113":0,"114":0,"117":0,"118":0,"119":0,"122":0,"123":0,"125":0,"127":0,"139":1,"142":0,"143":0,"147":0,"148":0,"151":0,"160":1,"161":0,"162":0,"170":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-numeric-literals.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-numeric-literals.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":26},"end":{"line":44,"column":33}}},"3":{"name":"(anonymous_3)","line":65,"loc":{"start":{"line":65,"column":27},"end":{"line":65,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":81,"column":2}},"2":{"start":{"line":26,"column":8},"end":{"line":30,"column":10}},"3":{"start":{"line":32,"column":8},"end":{"line":36,"column":10}},"4":{"start":{"line":42,"column":8},"end":{"line":79,"column":10}},"5":{"start":{"line":47,"column":16},"end":{"line":49,"column":17}},"6":{"start":{"line":48,"column":20},"end":{"line":48,"column":27}},"7":{"start":{"line":52,"column":16},"end":{"line":52,"column":68}},"8":{"start":{"line":54,"column":16},"end":{"line":77,"column":17}},"9":{"start":{"line":59,"column":20},"end":{"line":76,"column":23}},"10":{"start":{"line":66,"column":28},"end":{"line":66,"column":81}},"11":{"start":{"line":68,"column":28},"end":{"line":73,"column":29}},"12":{"start":{"line":72,"column":32},"end":{"line":72,"column":44}},"13":{"start":{"line":74,"column":28},"end":{"line":74,"column":121}}},"branchMap":{"1":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":16},"end":{"line":47,"column":16}},{"start":{"line":47,"column":16},"end":{"line":47,"column":16}}]},"2":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":16},"end":{"line":54,"column":16}},{"start":{"line":54,"column":16},"end":{"line":54,"column":16}}]},"3":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":20},"end":{"line":54,"column":53}},{"start":{"line":55,"column":20},"end":{"line":55,"column":51}},{"start":{"line":56,"column":20},"end":{"line":56,"column":29}},{"start":{"line":57,"column":20},"end":{"line":57,"column":56}}]},"4":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":28},"end":{"line":68,"column":28}},{"start":{"line":68,"column":28},"end":{"line":68,"column":28}}]}},"code":["/**"," * @fileoverview Rule to disallow `parseInt()` in favor of binary, octal, and hexadecimal literals"," * @author Annie Zhang, Henry Zhu"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow `parseInt()` in favor of binary, octal, and hexadecimal literals\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const radixMap = {","            2: \"binary\",","            8: \"octal\",","            16: \"hexadecimal\"","        };","","        const prefixMap = {","            2: \"0b\",","            8: \"0o\",","            16: \"0x\"","        };","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            CallExpression(node) {","","                // doesn't check parseInt() if it doesn't have a radix argument","                if (node.arguments.length !== 2) {","                    return;","                }","","                // only error if the radix is 2, 8, or 16","                const radixName = radixMap[node.arguments[1].value];","","                if (node.callee.type === \"Identifier\" &&","                    node.callee.name === \"parseInt\" &&","                    radixName &&","                    node.arguments[0].type === \"Literal\"","                ) {","                    context.report({","                        node,","                        message: \"Use {{radixName}} literals instead of parseInt().\",","                        data: {","                            radixName","                        },","                        fix(fixer) {","                            const newPrefix = prefixMap[node.arguments[1].value];","","                            if (+(newPrefix + node.arguments[0].value) !== parseInt(node.arguments[0].value, node.arguments[1].value)) {","","                                // If the newly-produced literal would be invalid, (e.g. 0b1234),","                                // or it would yield an incorrect parseInt result for some other reason, don't make a fix.","                                return null;","                            }","                            return fixer.replaceText(node, prefixMap[node.arguments[1].value] + node.arguments[0].value);","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"12":1,"26":0,"32":0,"42":0,"47":0,"48":0,"52":0,"54":0,"59":0,"66":0,"68":0,"72":0,"74":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-promise-reject-errors.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-promise-reject-errors.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0],"6":[0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":32,"loc":{"start":{"line":32,"column":10},"end":{"line":32,"column":20}}},"2":{"name":"checkRejectCall","line":45,"loc":{"start":{"line":45,"column":8},"end":{"line":45,"column":49}}},"3":{"name":"isPromiseRejectCall","line":66,"loc":{"start":{"line":66,"column":8},"end":{"line":66,"column":43}}},"4":{"name":"(anonymous_4)","line":79,"loc":{"start":{"line":79,"column":26},"end":{"line":79,"column":33}}},"5":{"name":"(anonymous_5)","line":90,"loc":{"start":{"line":90,"column":32},"end":{"line":90,"column":39}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":124,"column":2}},"3":{"start":{"line":34,"column":8},"end":{"line":34,"column":97}},"4":{"start":{"line":45,"column":8},"end":{"line":59,"column":9}},"5":{"start":{"line":46,"column":12},"end":{"line":48,"column":13}},"6":{"start":{"line":47,"column":16},"end":{"line":47,"column":23}},"7":{"start":{"line":49,"column":12},"end":{"line":58,"column":13}},"8":{"start":{"line":54,"column":16},"end":{"line":57,"column":19}},"9":{"start":{"line":66,"column":8},"end":{"line":70,"column":9}},"10":{"start":{"line":67,"column":12},"end":{"line":69,"column":101}},"11":{"start":{"line":76,"column":8},"end":{"line":122,"column":10}},"12":{"start":{"line":80,"column":16},"end":{"line":82,"column":17}},"13":{"start":{"line":81,"column":20},"end":{"line":81,"column":42}},"14":{"start":{"line":91,"column":16},"end":{"line":120,"column":17}},"15":{"start":{"line":96,"column":20},"end":{"line":119,"column":80}},"16":{"start":{"line":107,"column":42},"end":{"line":107,"column":92}},"17":{"start":{"line":113,"column":39},"end":{"line":113,"column":51}},"18":{"start":{"line":116,"column":39},"end":{"line":116,"column":137}},"19":{"start":{"line":119,"column":40},"end":{"line":119,"column":78}}},"branchMap":{"1":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":35},"end":{"line":34,"column":57}},{"start":{"line":34,"column":61},"end":{"line":34,"column":96}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":12}},{"start":{"line":46,"column":12},"end":{"line":46,"column":12}}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":16},"end":{"line":46,"column":48}},{"start":{"line":46,"column":52},"end":{"line":46,"column":70}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":12}},{"start":{"line":49,"column":12},"end":{"line":49,"column":12}}]},"5":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":16},"end":{"line":50,"column":48}},{"start":{"line":51,"column":16},"end":{"line":51,"column":67}},{"start":{"line":52,"column":16},"end":{"line":52,"column":65}},{"start":{"line":52,"column":69},"end":{"line":52,"column":117}}]},"6":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":19},"end":{"line":67,"column":58}},{"start":{"line":68,"column":16},"end":{"line":68,"column":56}},{"start":{"line":68,"column":60},"end":{"line":68,"column":97}},{"start":{"line":69,"column":16},"end":{"line":69,"column":58}},{"start":{"line":69,"column":62},"end":{"line":69,"column":100}}]},"7":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":16},"end":{"line":80,"column":16}},{"start":{"line":80,"column":16},"end":{"line":80,"column":16}}]},"8":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":16},"end":{"line":91,"column":16}},{"start":{"line":91,"column":16},"end":{"line":91,"column":16}}]},"9":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":20},"end":{"line":92,"column":53}},{"start":{"line":92,"column":57},"end":{"line":92,"column":87}},{"start":{"line":93,"column":20},"end":{"line":93,"column":41}},{"start":{"line":93,"column":45},"end":{"line":93,"column":83}},{"start":{"line":94,"column":20},"end":{"line":94,"column":55}},{"start":{"line":94,"column":59},"end":{"line":94,"column":108}}]},"10":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":39},"end":{"line":116,"column":86}},{"start":{"line":116,"column":90},"end":{"line":116,"column":137}}]}},"code":["/**"," * @fileoverview restrict values that can be used as Promise rejection reasons"," * @author Teddy Katz"," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require using Error objects as Promise rejection reasons\",","            category: \"Best Practices\",","            recommended: false","        },","        fixable: null,","        schema: [","            {","                type: \"object\",","                properties: {","                    allowEmptyReject: { type: \"boolean\" }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const ALLOW_EMPTY_REJECT = context.options.length && context.options[0].allowEmptyReject;","","        //----------------------------------------------------------------------","        // Helpers","        //----------------------------------------------------------------------","","        /**","        * Checks the argument of a reject() or Promise.reject() CallExpression, and reports it if it can't be an Error","        * @param {ASTNode} callExpression A CallExpression node which is used to reject a Promise","        * @returns {void}","        */","        function checkRejectCall(callExpression) {","            if (!callExpression.arguments.length && ALLOW_EMPTY_REJECT) {","                return;","            }","            if (","                !callExpression.arguments.length ||","                !astUtils.couldBeError(callExpression.arguments[0]) ||","                callExpression.arguments[0].type === \"Identifier\" && callExpression.arguments[0].name === \"undefined\"","            ) {","                context.report({","                    node: callExpression,","                    message: \"Expected the Promise rejection reason to be an Error.\"","                });","            }","        }","","        /**","        * Determines whether a function call is a Promise.reject() call","        * @param {ASTNode} node A CallExpression node","        * @returns {boolean} `true` if the call is a Promise.reject() call","        */","        function isPromiseRejectCall(node) {","            return node.callee.type === \"MemberExpression\" &&","                node.callee.object.type === \"Identifier\" && node.callee.object.name === \"Promise\" &&","                node.callee.property.type === \"Identifier\" && node.callee.property.name === \"reject\";","        }","","        //----------------------------------------------------------------------","        // Public","        //----------------------------------------------------------------------","","        return {","","            // Check `Promise.reject(value)` calls.","            CallExpression(node) {","                if (isPromiseRejectCall(node)) {","                    checkRejectCall(node);","                }","            },","","            /*","             * Check for `new Promise((resolve, reject) => {})`, and check for reject() calls.","             * This function is run on \"NewExpression:exit\" instead of \"NewExpression\" to ensure that","             * the nodes in the expression already have the `parent` property.","             */","            \"NewExpression:exit\"(node) {","                if (","                    node.callee.type === \"Identifier\" && node.callee.name === \"Promise\" &&","                    node.arguments.length && astUtils.isFunction(node.arguments[0]) &&","                    node.arguments[0].params.length > 1 && node.arguments[0].params[1].type === \"Identifier\"","                ) {","                    context.getDeclaredVariables(node.arguments[0])","","                        /*","                        * Find the first variable that matches the second parameter's name.","                        * If the first parameter has the same name as the second parameter, then the variable will actually","                        * be \"declared\" when the first parameter is evaluated, but then it will be immediately overwritten","                        * by the second parameter. It's not possible for an expression with the variable to be evaluated before","                        * the variable is overwritten, because functions with duplicate parameters cannot have destructuring or","                        * default assignments in their parameter lists. Therefore, it's not necessary to explicitly account for","                        * this case.","                        */","                        .find(variable => variable.name === node.arguments[0].params[1].name)","","                        // Get the references to that variable.","                        .references","","                        // Only check the references that read the parameter's value.","                        .filter(ref => ref.isRead())","","                        // Only check the references that are used as the callee in a function call, e.g. `reject(foo)`.","                        .filter(ref => ref.identifier.parent.type === \"CallExpression\" && ref.identifier === ref.identifier.parent.callee)","","                        // Check the argument of the function call to determine whether it's an Error.","                        .forEach(ref => checkRejectCall(ref.identifier.parent));","                }","            }","        };","    }","};",""],"l":{"7":1,"13":1,"34":0,"45":1,"46":0,"47":0,"49":0,"54":0,"66":1,"67":0,"76":0,"80":0,"81":0,"91":0,"96":0,"107":0,"113":0,"116":0,"119":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-reflect.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-reflect.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":51,"loc":{"start":{"line":51,"column":10},"end":{"line":51,"column":20}}},"2":{"name":"report","line":85,"loc":{"start":{"line":85,"column":8},"end":{"line":85,"column":52}}},"3":{"name":"(anonymous_3)","line":93,"loc":{"start":{"line":93,"column":26},"end":{"line":93,"column":33}}},"4":{"name":"(anonymous_4)","line":103,"loc":{"start":{"line":103,"column":27},"end":{"line":103,"column":34}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":115,"column":2}},"2":{"start":{"line":52,"column":8},"end":{"line":62,"column":10}},"3":{"start":{"line":64,"column":8},"end":{"line":74,"column":10}},"4":{"start":{"line":76,"column":8},"end":{"line":76,"column":71}},"5":{"start":{"line":85,"column":8},"end":{"line":90,"column":9}},"6":{"start":{"line":86,"column":12},"end":{"line":89,"column":17}},"7":{"start":{"line":92,"column":8},"end":{"line":112,"column":10}},"8":{"start":{"line":94,"column":16},"end":{"line":94,"column":69}},"9":{"start":{"line":95,"column":16},"end":{"line":95,"column":84}},"10":{"start":{"line":96,"column":16},"end":{"line":96,"column":89}},"11":{"start":{"line":97,"column":16},"end":{"line":97,"column":86}},"12":{"start":{"line":99,"column":16},"end":{"line":101,"column":17}},"13":{"start":{"line":100,"column":20},"end":{"line":100,"column":91}},"14":{"start":{"line":104,"column":16},"end":{"line":104,"column":68}},"15":{"start":{"line":105,"column":16},"end":{"line":105,"column":78}},"16":{"start":{"line":106,"column":16},"end":{"line":106,"column":84}},"17":{"start":{"line":108,"column":16},"end":{"line":110,"column":17}},"18":{"start":{"line":109,"column":20},"end":{"line":109,"column":81}}},"branchMap":{"1":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":27},"end":{"line":76,"column":64}},{"start":{"line":76,"column":68},"end":{"line":76,"column":70}}]},"2":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":28},"end":{"line":76,"column":46}},{"start":{"line":76,"column":50},"end":{"line":76,"column":52}}]},"3":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":36},"end":{"line":94,"column":56}},{"start":{"line":94,"column":60},"end":{"line":94,"column":62}}]},"4":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":39},"end":{"line":95,"column":57}},{"start":{"line":95,"column":61},"end":{"line":95,"column":63}}]},"5":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":16}},{"start":{"line":99,"column":16},"end":{"line":99,"column":16}}]},"6":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":20},"end":{"line":99,"column":39}},{"start":{"line":99,"column":43},"end":{"line":99,"column":57}},{"start":{"line":99,"column":61},"end":{"line":99,"column":85}}]},"7":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":16}},{"start":{"line":108,"column":16},"end":{"line":108,"column":16}}]},"8":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":20},"end":{"line":108,"column":36}},{"start":{"line":108,"column":40},"end":{"line":108,"column":58}},{"start":{"line":108,"column":62},"end":{"line":108,"column":86}}]}},"code":["/**"," * @fileoverview Rule to suggest using \"Reflect\" api over Function/Object methods"," * @author Keith Cirkel <http://keithcirkel.co.uk>"," * @deprecated in ESLint v3.9.0"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require `Reflect` methods where applicable\",","            category: \"ECMAScript 6\",","            recommended: false,","            replacedBy: []","        },","","        deprecated: true,","","        schema: [","            {","                type: \"object\",","                properties: {","                    exceptions: {","                        type: \"array\",","                        items: {","                            enum: [","                                \"apply\",","                                \"call\",","                                \"delete\",","                                \"defineProperty\",","                                \"getOwnPropertyDescriptor\",","                                \"getPrototypeOf\",","                                \"setPrototypeOf\",","                                \"isExtensible\",","                                \"getOwnPropertyNames\",","                                \"preventExtensions\"","                            ]","                        },","                        uniqueItems: true","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const existingNames = {","            apply: \"Function.prototype.apply\",","            call: \"Function.prototype.call\",","            defineProperty: \"Object.defineProperty\",","            getOwnPropertyDescriptor: \"Object.getOwnPropertyDescriptor\",","            getPrototypeOf: \"Object.getPrototypeOf\",","            setPrototypeOf: \"Object.setPrototypeOf\",","            isExtensible: \"Object.isExtensible\",","            getOwnPropertyNames: \"Object.getOwnPropertyNames\",","            preventExtensions: \"Object.preventExtensions\"","        };","","        const reflectSubsitutes = {","            apply: \"Reflect.apply\",","            call: \"Reflect.apply\",","            defineProperty: \"Reflect.defineProperty\",","            getOwnPropertyDescriptor: \"Reflect.getOwnPropertyDescriptor\",","            getPrototypeOf: \"Reflect.getPrototypeOf\",","            setPrototypeOf: \"Reflect.setPrototypeOf\",","            isExtensible: \"Reflect.isExtensible\",","            getOwnPropertyNames: \"Reflect.getOwnPropertyNames\",","            preventExtensions: \"Reflect.preventExtensions\"","        };","","        const exceptions = (context.options[0] || {}).exceptions || [];","","        /**","         * Reports the Reflect violation based on the `existing` and `substitute`","         * @param {Object} node The node that violates the rule.","         * @param {string} existing The existing method name that has been used.","         * @param {string} substitute The Reflect substitute that should be used.","         * @returns {void}","         */","        function report(node, existing, substitute) {","            context.report({ node, message: \"Avoid using {{existing}}, instead use {{substitute}}.\", data: {","                existing,","                substitute","            } });","        }","","        return {","            CallExpression(node) {","                const methodName = (node.callee.property || {}).name;","                const isReflectCall = (node.callee.object || {}).name === \"Reflect\";","                const hasReflectSubsitute = reflectSubsitutes.hasOwnProperty(methodName);","                const userConfiguredException = exceptions.indexOf(methodName) !== -1;","","                if (hasReflectSubsitute && !isReflectCall && !userConfiguredException) {","                    report(node, existingNames[methodName], reflectSubsitutes[methodName]);","                }","            },","            UnaryExpression(node) {","                const isDeleteOperator = node.operator === \"delete\";","                const targetsIdentifier = node.argument.type === \"Identifier\";","                const userConfiguredException = exceptions.indexOf(\"delete\") !== -1;","","                if (isDeleteOperator && !targetsIdentifier && !userConfiguredException) {","                    report(node, \"the delete keyword\", \"Reflect.deleteProperty\");","                }","            }","        };","","    }","};",""],"l":{"12":1,"52":0,"64":0,"76":0,"85":1,"86":0,"92":0,"94":0,"95":0,"96":0,"97":0,"99":0,"100":0,"104":0,"105":0,"106":0,"108":0,"109":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-rest-params.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-rest-params.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":1,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"getVariableOfArguments","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":39}}},"2":{"name":"isNotNormalMemberAccess","line":46,"loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":44}}},"3":{"name":"(anonymous_3)","line":72,"loc":{"start":{"line":72,"column":10},"end":{"line":72,"column":20}}},"4":{"name":"report","line":80,"loc":{"start":{"line":80,"column":8},"end":{"line":80,"column":35}}},"5":{"name":"checkForArguments","line":93,"loc":{"start":{"line":93,"column":8},"end":{"line":93,"column":37}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":33,"column":1}},"2":{"start":{"line":18,"column":4},"end":{"line":18,"column":38}},"3":{"start":{"line":20,"column":4},"end":{"line":29,"column":5}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":38}},"5":{"start":{"line":23,"column":8},"end":{"line":28,"column":9}},"6":{"start":{"line":27,"column":12},"end":{"line":27,"column":73}},"7":{"start":{"line":32,"column":4},"end":{"line":32,"column":16},"skip":true},"8":{"start":{"line":46,"column":0},"end":{"line":55,"column":1}},"9":{"start":{"line":47,"column":4},"end":{"line":47,"column":36}},"10":{"start":{"line":48,"column":4},"end":{"line":48,"column":29}},"11":{"start":{"line":50,"column":4},"end":{"line":54,"column":6}},"12":{"start":{"line":61,"column":0},"end":{"line":109,"column":2}},"13":{"start":{"line":80,"column":8},"end":{"line":86,"column":9}},"14":{"start":{"line":81,"column":12},"end":{"line":85,"column":15}},"15":{"start":{"line":93,"column":8},"end":{"line":102,"column":9}},"16":{"start":{"line":94,"column":12},"end":{"line":94,"column":76}},"17":{"start":{"line":96,"column":12},"end":{"line":101,"column":13}},"18":{"start":{"line":97,"column":16},"end":{"line":100,"column":37}},"19":{"start":{"line":104,"column":8},"end":{"line":107,"column":10}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]},"2":{"line":27,"type":"cond-expr","locations":[{"start":{"line":27,"column":57},"end":{"line":27,"column":65}},{"start":{"line":27,"column":68},"end":{"line":27,"column":72}}]},"3":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":42}},{"start":{"line":52,"column":8},"end":{"line":52,"column":28}},{"start":{"line":53,"column":8},"end":{"line":53,"column":24}}]},"4":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":12},"end":{"line":96,"column":12}},{"start":{"line":96,"column":12},"end":{"line":96,"column":12}}]}},"code":["/**"," * @fileoverview Rule to"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets the variable object of `arguments` which is defined implicitly."," * @param {escope.Scope} scope - A scope to get."," * @returns {escope.Variable} The found variable object."," */","function getVariableOfArguments(scope) {","    const variables = scope.variables;","","    for (let i = 0; i < variables.length; ++i) {","        const variable = variables[i];","","        if (variable.name === \"arguments\") {","","            // If there was a parameter which is named \"arguments\", the implicit \"arguments\" is not defined.","            // So does fast return with null.","            return (variable.identifiers.length === 0) ? variable : null;","        }","    }","","    /* istanbul ignore next : unreachable */","    return null;","}","","/**"," * Checks if the given reference is not normal member access."," *"," * - arguments         .... true    // not member access"," * - arguments[i]      .... true    // computed member access"," * - arguments[0]      .... true    // computed member access"," * - arguments.length  .... false   // normal member access"," *"," * @param {escope.Reference} reference - The reference to check."," * @returns {boolean} `true` if the reference is not normal member access."," */","function isNotNormalMemberAccess(reference) {","    const id = reference.identifier;","    const parent = id.parent;","","    return !(","        parent.type === \"MemberExpression\" &&","        parent.object === id &&","        !parent.computed","    );","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require rest parameters instead of `arguments`\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Reports a given reference.","         *","         * @param {escope.Reference} reference - A reference to report.","         * @returns {void}","         */","        function report(reference) {","            context.report({","                node: reference.identifier,","                loc: reference.identifier.loc,","                message: \"Use the rest parameters instead of 'arguments'.\"","            });","        }","","        /**","         * Reports references of the implicit `arguments` variable if exist.","         *","         * @returns {void}","         */","        function checkForArguments() {","            const argumentsVar = getVariableOfArguments(context.getScope());","","            if (argumentsVar) {","                argumentsVar","                    .references","                    .filter(isNotNormalMemberAccess)","                    .forEach(report);","            }","        }","","        return {","            \"FunctionDeclaration:exit\": checkForArguments,","            \"FunctionExpression:exit\": checkForArguments","        };","    }","};",""],"l":{"17":1,"18":0,"20":0,"21":0,"23":0,"27":0,"32":1,"46":1,"47":0,"48":0,"50":0,"61":1,"80":1,"81":0,"93":1,"94":0,"96":0,"97":0,"104":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-spread.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-spread.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},"b":{"1":[0,0,0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"isVariadicApplyCalling","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":38}}},"2":{"name":"equalTokens","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":46}}},"3":{"name":"isValidThisArg","line":63,"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":56}}},"4":{"name":"(anonymous_4)","line":87,"loc":{"start":{"line":87,"column":10},"end":{"line":87,"column":20}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":26},"end":{"line":91,"column":33}}},"6":{"name":"(anonymous_6)","line":104,"loc":{"start":{"line":104,"column":27},"end":{"line":104,"column":35}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":19,"column":0},"end":{"line":29,"column":1}},"3":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"4":{"start":{"line":38,"column":0},"end":{"line":54,"column":1}},"5":{"start":{"line":39,"column":4},"end":{"line":39,"column":47}},"6":{"start":{"line":40,"column":4},"end":{"line":40,"column":48}},"7":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"8":{"start":{"line":43,"column":8},"end":{"line":43,"column":21}},"9":{"start":{"line":45,"column":4},"end":{"line":51,"column":5}},"10":{"start":{"line":46,"column":8},"end":{"line":50,"column":9}},"11":{"start":{"line":49,"column":12},"end":{"line":49,"column":25}},"12":{"start":{"line":53,"column":4},"end":{"line":53,"column":16}},"13":{"start":{"line":63,"column":0},"end":{"line":68,"column":1}},"14":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"15":{"start":{"line":65,"column":8},"end":{"line":65,"column":51}},"16":{"start":{"line":67,"column":4},"end":{"line":67,"column":55}},"17":{"start":{"line":74,"column":0},"end":{"line":120,"column":2}},"18":{"start":{"line":88,"column":8},"end":{"line":88,"column":51}},"19":{"start":{"line":90,"column":8},"end":{"line":118,"column":10}},"20":{"start":{"line":92,"column":16},"end":{"line":94,"column":17}},"21":{"start":{"line":93,"column":20},"end":{"line":93,"column":27}},"22":{"start":{"line":96,"column":16},"end":{"line":96,"column":51}},"23":{"start":{"line":97,"column":16},"end":{"line":97,"column":99}},"24":{"start":{"line":98,"column":16},"end":{"line":98,"column":50}},"25":{"start":{"line":100,"column":16},"end":{"line":116,"column":17}},"26":{"start":{"line":101,"column":20},"end":{"line":115,"column":23}},"27":{"start":{"line":105,"column":28},"end":{"line":109,"column":29}},"28":{"start":{"line":108,"column":32},"end":{"line":108,"column":44}},"29":{"start":{"line":111,"column":28},"end":{"line":111,"column":141}},"30":{"start":{"line":111,"column":120},"end":{"line":111,"column":139}},"31":{"start":{"line":113,"column":28},"end":{"line":113,"column":146}}},"branchMap":{"1":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":47}},{"start":{"line":22,"column":8},"end":{"line":22,"column":50}},{"start":{"line":23,"column":8},"end":{"line":23,"column":45}},{"start":{"line":24,"column":8},"end":{"line":24,"column":38}},{"start":{"line":25,"column":8},"end":{"line":25,"column":35}},{"start":{"line":26,"column":8},"end":{"line":26,"column":52}},{"start":{"line":27,"column":8},"end":{"line":27,"column":50}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"4":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":47}},{"start":{"line":47,"column":12},"end":{"line":47,"column":49}}]},"5":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"6":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16}},{"start":{"line":92,"column":16},"end":{"line":92,"column":16}}]},"7":{"line":97,"type":"cond-expr","locations":[{"start":{"line":97,"column":77},"end":{"line":97,"column":91}},{"start":{"line":97,"column":94},"end":{"line":97,"column":98}}]},"8":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":16},"end":{"line":100,"column":16}},{"start":{"line":100,"column":16},"end":{"line":100,"column":16}}]},"9":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":28},"end":{"line":105,"column":28}},{"start":{"line":105,"column":28},"end":{"line":105,"column":28}}]},"10":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":32},"end":{"line":105,"column":44}},{"start":{"line":105,"column":48},"end":{"line":105,"column":82}}]}},"code":["/**"," * @fileoverview A rule to suggest using of the spread operator instead of `.apply()`."," * @author Toru Nagashima"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a node is a `.apply()` for variadic."," * @param {ASTNode} node - A CallExpression node to check."," * @returns {boolean} Whether or not the node is a `.apply()` for variadic."," */","function isVariadicApplyCalling(node) {","    return (","        node.callee.type === \"MemberExpression\" &&","        node.callee.property.type === \"Identifier\" &&","        node.callee.property.name === \"apply\" &&","        node.callee.computed === false &&","        node.arguments.length === 2 &&","        node.arguments[1].type !== \"ArrayExpression\" &&","        node.arguments[1].type !== \"SpreadElement\"","    );","}","","/**"," * Checks whether or not the tokens of two given nodes are same."," * @param {ASTNode} left - A node 1 to compare."," * @param {ASTNode} right - A node 2 to compare."," * @param {SourceCode} sourceCode - The ESLint source code object."," * @returns {boolean} the source code for the given node."," */","function equalTokens(left, right, sourceCode) {","    const tokensL = sourceCode.getTokens(left);","    const tokensR = sourceCode.getTokens(right);","","    if (tokensL.length !== tokensR.length) {","        return false;","    }","    for (let i = 0; i < tokensL.length; ++i) {","        if (tokensL[i].type !== tokensR[i].type ||","            tokensL[i].value !== tokensR[i].value","        ) {","            return false;","        }","    }","","    return true;","}","","/**"," * Checks whether or not `thisArg` is not changed by `.apply()`."," * @param {ASTNode|null} expectedThis - The node that is the owner of the applied function."," * @param {ASTNode} thisArg - The node that is given to the first argument of the `.apply()`."," * @param {RuleContext} context - The ESLint rule context object."," * @returns {boolean} Whether or not `thisArg` is not changed by `.apply()`."," */","function isValidThisArg(expectedThis, thisArg, context) {","    if (!expectedThis) {","        return astUtils.isNullOrUndefined(thisArg);","    }","    return equalTokens(expectedThis, thisArg, context);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require spread operators instead of `.apply()`\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","            CallExpression(node) {","                if (!isVariadicApplyCalling(node)) {","                    return;","                }","","                const applied = node.callee.object;","                const expectedThis = (applied.type === \"MemberExpression\") ? applied.object : null;","                const thisArg = node.arguments[0];","","                if (isValidThisArg(expectedThis, thisArg, sourceCode)) {","                    context.report({","                        node,","                        message: \"Use the spread operator instead of '.apply()'.\",","                        fix(fixer) {","                            if (expectedThis && expectedThis.type !== \"Identifier\") {","","                                // Don't fix cases where the `this` value could be a computed expression.","                                return null;","                            }","","                            const propertyDot = sourceCode.getFirstTokenBetween(applied, node.callee.property, token => token.value === \".\");","","                            return fixer.replaceTextRange([propertyDot.range[0], node.range[1]], `(...${sourceCode.getText(node.arguments[1])})`);","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"8":1,"19":1,"20":0,"38":1,"39":0,"40":0,"42":0,"43":0,"45":0,"46":0,"49":0,"53":0,"63":1,"64":0,"65":0,"67":0,"74":1,"88":0,"90":0,"92":0,"93":0,"96":0,"97":0,"98":0,"100":0,"101":0,"105":0,"108":0,"111":0,"113":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-template.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/prefer-template.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"isConcatenation","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":31}}},"2":{"name":"getTopConcatBinaryExpression","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":44}}},"3":{"name":"hasStringLiteral","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":32}}},"4":{"name":"hasNonStringLiteral","line":58,"loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":35}}},"5":{"name":"startsWithTemplateCurly","line":72,"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":39}}},"6":{"name":"endsWithTemplateCurly","line":87,"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":37}}},"7":{"name":"(anonymous_7)","line":114,"loc":{"start":{"line":114,"column":10},"end":{"line":114,"column":20}}},"8":{"name":"getTextBetween","line":124,"loc":{"start":{"line":124,"column":8},"end":{"line":124,"column":46}}},"9":{"name":"getTemplateLiteral","line":138,"loc":{"start":{"line":138,"column":8},"end":{"line":138,"column":80}}},"10":{"name":"checkForStringConcat","line":195,"loc":{"start":{"line":195,"column":8},"end":{"line":195,"column":44}}},"11":{"name":"(anonymous_11)","line":212,"loc":{"start":{"line":212,"column":23},"end":{"line":212,"column":31}}},"12":{"name":"(anonymous_12)","line":220,"loc":{"start":{"line":220,"column":19},"end":{"line":220,"column":22}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":23,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":24,"column":4},"end":{"line":24,"column":69}},"4":{"start":{"line":32,"column":0},"end":{"line":37,"column":1}},"5":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":27}},"7":{"start":{"line":36,"column":4},"end":{"line":36,"column":16}},"8":{"start":{"line":44,"column":0},"end":{"line":51,"column":1}},"9":{"start":{"line":45,"column":4},"end":{"line":49,"column":5}},"10":{"start":{"line":48,"column":8},"end":{"line":48,"column":75}},"11":{"start":{"line":50,"column":4},"end":{"line":50,"column":42}},"12":{"start":{"line":58,"column":0},"end":{"line":65,"column":1}},"13":{"start":{"line":59,"column":4},"end":{"line":63,"column":5}},"14":{"start":{"line":62,"column":8},"end":{"line":62,"column":81}},"15":{"start":{"line":64,"column":4},"end":{"line":64,"column":43}},"16":{"start":{"line":72,"column":0},"end":{"line":80,"column":1}},"17":{"start":{"line":73,"column":4},"end":{"line":75,"column":5}},"18":{"start":{"line":74,"column":8},"end":{"line":74,"column":50}},"19":{"start":{"line":76,"column":4},"end":{"line":78,"column":5}},"20":{"start":{"line":77,"column":8},"end":{"line":77,"column":108}},"21":{"start":{"line":79,"column":4},"end":{"line":79,"column":69}},"22":{"start":{"line":87,"column":0},"end":{"line":95,"column":1}},"23":{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},"24":{"start":{"line":89,"column":8},"end":{"line":89,"column":51}},"25":{"start":{"line":91,"column":4},"end":{"line":93,"column":5}},"26":{"start":{"line":92,"column":8},"end":{"line":92,"column":150}},"27":{"start":{"line":94,"column":4},"end":{"line":94,"column":69}},"28":{"start":{"line":101,"column":0},"end":{"line":228,"column":2}},"29":{"start":{"line":115,"column":8},"end":{"line":115,"column":51}},"30":{"start":{"line":116,"column":8},"end":{"line":116,"column":39}},"31":{"start":{"line":124,"column":8},"end":{"line":129,"column":9}},"32":{"start":{"line":125,"column":12},"end":{"line":125,"column":102}},"33":{"start":{"line":126,"column":12},"end":{"line":126,"column":52}},"34":{"start":{"line":128,"column":12},"end":{"line":128,"column":163}},"35":{"start":{"line":128,"column":80},"end":{"line":128,"column":157}},"36":{"start":{"line":138,"column":8},"end":{"line":187,"column":9}},"37":{"start":{"line":139,"column":12},"end":{"line":153,"column":13}},"38":{"start":{"line":145,"column":16},"end":{"line":152,"column":97}},"39":{"start":{"line":146,"column":20},"end":{"line":148,"column":21}},"40":{"start":{"line":147,"column":24},"end":{"line":147,"column":46}},"41":{"start":{"line":149,"column":20},"end":{"line":149,"column":35}},"42":{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},"43":{"start":{"line":156,"column":16},"end":{"line":156,"column":55}},"44":{"start":{"line":159,"column":12},"end":{"line":184,"column":13}},"45":{"start":{"line":160,"column":16},"end":{"line":160,"column":132}},"46":{"start":{"line":160,"column":111},"end":{"line":160,"column":130}},"47":{"start":{"line":161,"column":16},"end":{"line":161,"column":82}},"48":{"start":{"line":162,"column":16},"end":{"line":162,"column":82}},"49":{"start":{"line":163,"column":16},"end":{"line":163,"column":82}},"50":{"start":{"line":164,"column":16},"end":{"line":164,"column":88}},"51":{"start":{"line":166,"column":16},"end":{"line":172,"column":17}},"52":{"start":{"line":170,"column":20},"end":{"line":171,"column":92}},"53":{"start":{"line":173,"column":16},"end":{"line":179,"column":17}},"54":{"start":{"line":177,"column":20},"end":{"line":178,"column":118}},"55":{"start":{"line":183,"column":16},"end":{"line":183,"column":182}},"56":{"start":{"line":186,"column":12},"end":{"line":186,"column":109}},"57":{"start":{"line":195,"column":8},"end":{"line":217,"column":9}},"58":{"start":{"line":196,"column":12},"end":{"line":198,"column":13}},"59":{"start":{"line":197,"column":16},"end":{"line":197,"column":23}},"60":{"start":{"line":200,"column":12},"end":{"line":200,"column":76}},"61":{"start":{"line":203,"column":12},"end":{"line":205,"column":13}},"62":{"start":{"line":204,"column":16},"end":{"line":204,"column":23}},"63":{"start":{"line":206,"column":12},"end":{"line":206,"column":48}},"64":{"start":{"line":208,"column":12},"end":{"line":216,"column":13}},"65":{"start":{"line":209,"column":16},"end":{"line":215,"column":19}},"66":{"start":{"line":213,"column":24},"end":{"line":213,"column":111}},"67":{"start":{"line":219,"column":8},"end":{"line":226,"column":10}},"68":{"start":{"line":221,"column":16},"end":{"line":221,"column":43}}},"branchMap":{"1":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":11},"end":{"line":24,"column":43}},{"start":{"line":24,"column":47},"end":{"line":24,"column":68}}]},"2":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]},"3":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":15},"end":{"line":48,"column":43}},{"start":{"line":48,"column":47},"end":{"line":48,"column":74}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"5":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":15},"end":{"line":62,"column":46}},{"start":{"line":62,"column":50},"end":{"line":62,"column":80}}]},"6":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"7":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":4},"end":{"line":76,"column":4}},{"start":{"line":76,"column":4},"end":{"line":76,"column":4}}]},"8":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":15},"end":{"line":77,"column":38}},{"start":{"line":77,"column":42},"end":{"line":77,"column":60}},{"start":{"line":77,"column":64},"end":{"line":77,"column":107}}]},"9":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":11},"end":{"line":79,"column":34}},{"start":{"line":79,"column":38},"end":{"line":79,"column":68}}]},"10":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"11":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"12":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":15},"end":{"line":92,"column":38}},{"start":{"line":92,"column":42},"end":{"line":92,"column":60}},{"start":{"line":92,"column":64},"end":{"line":92,"column":149}}]},"13":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":11},"end":{"line":94,"column":34}},{"start":{"line":94,"column":38},"end":{"line":94,"column":68}}]},"14":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":12},"end":{"line":139,"column":12}},{"start":{"line":139,"column":12},"end":{"line":139,"column":12}}]},"15":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":16},"end":{"line":139,"column":46}},{"start":{"line":139,"column":50},"end":{"line":139,"column":87}}]},"16":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":20},"end":{"line":146,"column":20}},{"start":{"line":146,"column":20},"end":{"line":146,"column":20}}]},"17":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":12},"end":{"line":155,"column":12}},{"start":{"line":155,"column":12},"end":{"line":155,"column":12}}]},"18":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":12},"end":{"line":159,"column":12}},{"start":{"line":159,"column":12},"end":{"line":159,"column":12}}]},"19":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":16},"end":{"line":159,"column":44}},{"start":{"line":159,"column":48},"end":{"line":159,"column":77}},{"start":{"line":159,"column":81},"end":{"line":159,"column":113}}]},"20":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":16},"end":{"line":166,"column":16}},{"start":{"line":166,"column":16},"end":{"line":166,"column":16}}]},"21":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":16},"end":{"line":173,"column":16}},{"start":{"line":173,"column":16},"end":{"line":173,"column":16}}]},"22":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":27},"end":{"line":186,"column":41}},{"start":{"line":186,"column":45},"end":{"line":186,"column":47}}]},"23":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":84},"end":{"line":186,"column":97}},{"start":{"line":186,"column":101},"end":{"line":186,"column":103}}]},"24":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":12},"end":{"line":196,"column":12}},{"start":{"line":196,"column":12},"end":{"line":196,"column":12}}]},"25":{"line":196,"type":"binary-expr","locations":[{"start":{"line":196,"column":16},"end":{"line":196,"column":47}},{"start":{"line":196,"column":51},"end":{"line":196,"column":80}}]},"26":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":12},"end":{"line":203,"column":12}},{"start":{"line":203,"column":12},"end":{"line":203,"column":12}}]},"27":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":12},"end":{"line":208,"column":12}},{"start":{"line":208,"column":12},"end":{"line":208,"column":12}}]}},"code":["/**"," * @fileoverview A rule to suggest using template literals instead of string concatenation."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given node is a concatenation."," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node is a concatenation."," */","function isConcatenation(node) {","    return node.type === \"BinaryExpression\" && node.operator === \"+\";","}","","/**"," * Gets the top binary expression node for concatenation in parents of a given node."," * @param {ASTNode} node - A node to get."," * @returns {ASTNode} the top binary expression node in parents of a given node."," */","function getTopConcatBinaryExpression(node) {","    while (isConcatenation(node.parent)) {","        node = node.parent;","    }","    return node;","}","","/**","* Checks whether or not a given binary expression has string literals.","* @param {ASTNode} node - A node to check.","* @returns {boolean} `true` if the node has string literals.","*/","function hasStringLiteral(node) {","    if (isConcatenation(node)) {","","        // `left` is deeper than `right` normally.","        return hasStringLiteral(node.right) || hasStringLiteral(node.left);","    }","    return astUtils.isStringLiteral(node);","}","","/**"," * Checks whether or not a given binary expression has non string literals."," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node has non string literals."," */","function hasNonStringLiteral(node) {","    if (isConcatenation(node)) {","","        // `left` is deeper than `right` normally.","        return hasNonStringLiteral(node.right) || hasNonStringLiteral(node.left);","    }","    return !astUtils.isStringLiteral(node);","}","","/**","* Determines whether a given node will start with a template curly expression (`${}`) when being converted to a template literal.","* @param {ASTNode} node The node that will be fixed to a template literal","* @returns {boolean} `true` if the node will start with a template curly.","*/","function startsWithTemplateCurly(node) {","    if (node.type === \"BinaryExpression\") {","        return startsWithTemplateCurly(node.left);","    }","    if (node.type === \"TemplateLiteral\") {","        return node.expressions.length && node.quasis.length && node.quasis[0].start === node.quasis[0].end;","    }","    return node.type !== \"Literal\" || typeof node.value !== \"string\";","}","","/**","* Determines whether a given node end with a template curly expression (`${}`) when being converted to a template literal.","* @param {ASTNode} node The node that will be fixed to a template literal","* @returns {boolean} `true` if the node will end with a template curly.","*/","function endsWithTemplateCurly(node) {","    if (node.type === \"BinaryExpression\") {","        return startsWithTemplateCurly(node.right);","    }","    if (node.type === \"TemplateLiteral\") {","        return node.expressions.length && node.quasis.length && node.quasis[node.quasis.length - 1].start === node.quasis[node.quasis.length - 1].end;","    }","    return node.type !== \"Literal\" || typeof node.value !== \"string\";","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require template literals instead of string concatenation\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        let done = Object.create(null);","","        /**","        * Gets the non-token text between two nodes, ignoring any other tokens that appear between the two tokens.","        * @param {ASTNode} node1 The first node","        * @param {ASTNode} node2 The second node","        * @returns {string} The text between the nodes, excluding other tokens","        */","        function getTextBetween(node1, node2) {","            const allTokens = [node1].concat(sourceCode.getTokensBetween(node1, node2)).concat(node2);","            const sourceText = sourceCode.getText();","","            return allTokens.slice(0, -1).reduce((accumulator, token, index) => accumulator + sourceText.slice(token.range[1], allTokens[index + 1].range[0]), \"\");","        }","","        /**","        * Returns a template literal form of the given node.","        * @param {ASTNode} currentNode A node that should be converted to a template literal","        * @param {string} textBeforeNode Text that should appear before the node","        * @param {string} textAfterNode Text that should appear after the node","        * @returns {string} A string form of this node, represented as a template literal","        */","        function getTemplateLiteral(currentNode, textBeforeNode, textAfterNode) {","            if (currentNode.type === \"Literal\" && typeof currentNode.value === \"string\") {","","                // If the current node is a string literal, escape any instances of ${ or ` to prevent them from being interpreted","                // as a template placeholder. However, if the code already contains a backslash before the ${ or `","                // for some reason, don't add another backslash, because that would change the meaning of the code (it would cause","                // an actual backslash character to appear before the dollar sign).","                return `\\`${currentNode.raw.slice(1, -1).replace(/\\\\*(\\${|`)/g, matched => {","                    if (matched.lastIndexOf(\"\\\\\") % 2) {","                        return `\\\\${matched}`;","                    }","                    return matched;","","                // Unescape any quotes that appear in the original Literal that no longer need to be escaped.","                }).replace(new RegExp(`\\\\\\\\${currentNode.raw[0]}`, \"g\"), currentNode.raw[0])}\\``;","            }","","            if (currentNode.type === \"TemplateLiteral\") {","                return sourceCode.getText(currentNode);","            }","","            if (isConcatenation(currentNode) && hasStringLiteral(currentNode) && hasNonStringLiteral(currentNode)) {","                const plusSign = sourceCode.getFirstTokenBetween(currentNode.left, currentNode.right, token => token.value === \"+\");","                const textBeforePlus = getTextBetween(currentNode.left, plusSign);","                const textAfterPlus = getTextBetween(plusSign, currentNode.right);","                const leftEndsWithCurly = endsWithTemplateCurly(currentNode.left);","                const rightStartsWithCurly = startsWithTemplateCurly(currentNode.right);","","                if (leftEndsWithCurly) {","","                    // If the left side of the expression ends with a template curly, add the extra text to the end of the curly bracket.","                    // `foo${bar}` /* comment */ + 'baz' --> `foo${bar /* comment */  }${baz}`","                    return getTemplateLiteral(currentNode.left, textBeforeNode, textBeforePlus + textAfterPlus).slice(0, -1) +","                        getTemplateLiteral(currentNode.right, null, textAfterNode).slice(1);","                }","                if (rightStartsWithCurly) {","","                    // Otherwise, if the right side of the expression starts with a template curly, add the text there.","                    // 'foo' /* comment */ + `${bar}baz` --> `foo${ /* comment */  bar}baz`","                    return getTemplateLiteral(currentNode.left, textBeforeNode, null).slice(0, -1) +","                        getTemplateLiteral(currentNode.right, textBeforePlus + textAfterPlus, textAfterNode).slice(1);","                }","","                // Otherwise, these nodes should not be combined into a template curly, since there is nowhere to put","                // the text between them.","                return `${getTemplateLiteral(currentNode.left, textBeforeNode, null)}${textBeforePlus}+${textAfterPlus}${getTemplateLiteral(currentNode.right, textAfterNode, null)}`;","            }","","            return `\\`\\${${textBeforeNode || \"\"}${sourceCode.getText(currentNode)}${textAfterNode || \"\"}}\\``;","        }","","        /**","         * Reports if a given node is string concatenation with non string literals.","         *","         * @param {ASTNode} node - A node to check.","         * @returns {void}","         */","        function checkForStringConcat(node) {","            if (!astUtils.isStringLiteral(node) || !isConcatenation(node.parent)) {","                return;","            }","","            const topBinaryExpr = getTopConcatBinaryExpression(node.parent);","","            // Checks whether or not this node had been checked already.","            if (done[topBinaryExpr.range[0]]) {","                return;","            }","            done[topBinaryExpr.range[0]] = true;","","            if (hasNonStringLiteral(topBinaryExpr)) {","                context.report({","                    node: topBinaryExpr,","                    message: \"Unexpected string concatenation.\",","                    fix(fixer) {","                        return fixer.replaceText(topBinaryExpr, getTemplateLiteral(topBinaryExpr, null, null));","                    }","                });","            }","        }","","        return {","            Program() {","                done = Object.create(null);","            },","","            Literal: checkForStringConcat,","            TemplateLiteral: checkForStringConcat","        };","    }","};",""],"l":{"12":1,"23":1,"24":0,"32":1,"33":0,"34":0,"36":0,"44":1,"45":0,"48":0,"50":0,"58":1,"59":0,"62":0,"64":0,"72":1,"73":0,"74":0,"76":0,"77":0,"79":0,"87":1,"88":0,"89":0,"91":0,"92":0,"94":0,"101":1,"115":0,"116":0,"124":1,"125":0,"126":0,"128":0,"138":1,"139":0,"145":0,"146":0,"147":0,"149":0,"155":0,"156":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"166":0,"170":0,"173":0,"177":0,"183":0,"186":0,"195":1,"196":0,"197":0,"200":0,"203":0,"204":0,"206":0,"208":0,"209":0,"213":0,"219":0,"221":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/quote-props.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/quote-props.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0],"20":[0,0],"21":[0,0,0],"22":[0,0],"23":[0,0,0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0,0,0],"32":[0,0],"33":[0,0,0,0],"34":[0,0],"35":[0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":69,"loc":{"start":{"line":69,"column":10},"end":{"line":69,"column":20}}},"2":{"name":"isKeyword","line":88,"loc":{"start":{"line":88,"column":8},"end":{"line":88,"column":37}}},"3":{"name":"areQuotesRedundant","line":100,"loc":{"start":{"line":100,"column":8},"end":{"line":100,"column":72}}},"4":{"name":"getUnquotedKey","line":111,"loc":{"start":{"line":111,"column":8},"end":{"line":111,"column":37}}},"5":{"name":"getQuotedKey","line":120,"loc":{"start":{"line":120,"column":8},"end":{"line":120,"column":35}}},"6":{"name":"checkUnnecessaryQuotes","line":136,"loc":{"start":{"line":136,"column":8},"end":{"line":136,"column":46}}},"7":{"name":"checkOmittedQuotes","line":191,"loc":{"start":{"line":191,"column":8},"end":{"line":191,"column":42}}},"8":{"name":"checkConsistency","line":210,"loc":{"start":{"line":210,"column":8},"end":{"line":210,"column":63}}},"9":{"name":"(anonymous_9)","line":277,"loc":{"start":{"line":277,"column":20},"end":{"line":277,"column":27}}},"10":{"name":"(anonymous_10)","line":285,"loc":{"start":{"line":285,"column":28},"end":{"line":285,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":12,"column":43}},"2":{"start":{"line":18,"column":0},"end":{"line":296,"column":2}},"3":{"start":{"line":71,"column":8},"end":{"line":80,"column":49}},"4":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"5":{"start":{"line":89,"column":12},"end":{"line":89,"column":51}},"6":{"start":{"line":100,"column":8},"end":{"line":104,"column":9}},"7":{"start":{"line":101,"column":12},"end":{"line":103,"column":119}},"8":{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},"9":{"start":{"line":112,"column":12},"end":{"line":112,"column":68}},"10":{"start":{"line":120,"column":8},"end":{"line":129,"column":9}},"11":{"start":{"line":121,"column":12},"end":{"line":125,"column":13}},"12":{"start":{"line":124,"column":16},"end":{"line":124,"column":47}},"13":{"start":{"line":128,"column":12},"end":{"line":128,"column":75}},"14":{"start":{"line":136,"column":8},"end":{"line":184,"column":9}},"15":{"start":{"line":137,"column":12},"end":{"line":137,"column":33}},"16":{"start":{"line":138,"column":12},"end":{"line":138,"column":23}},"17":{"start":{"line":140,"column":12},"end":{"line":142,"column":13}},"18":{"start":{"line":141,"column":16},"end":{"line":141,"column":23}},"19":{"start":{"line":144,"column":12},"end":{"line":183,"column":13}},"20":{"start":{"line":145,"column":16},"end":{"line":149,"column":17}},"21":{"start":{"line":146,"column":20},"end":{"line":146,"column":56}},"22":{"start":{"line":148,"column":20},"end":{"line":148,"column":27}},"23":{"start":{"line":151,"column":16},"end":{"line":153,"column":17}},"24":{"start":{"line":152,"column":20},"end":{"line":152,"column":27}},"25":{"start":{"line":155,"column":16},"end":{"line":155,"column":66}},"26":{"start":{"line":157,"column":16},"end":{"line":159,"column":17}},"27":{"start":{"line":158,"column":20},"end":{"line":158,"column":27}},"28":{"start":{"line":161,"column":16},"end":{"line":168,"column":17}},"29":{"start":{"line":162,"column":20},"end":{"line":167,"column":23}},"30":{"start":{"line":166,"column":38},"end":{"line":166,"column":81}},"31":{"start":{"line":169,"column":19},"end":{"line":183,"column":13}},"32":{"start":{"line":170,"column":16},"end":{"line":175,"column":19}},"33":{"start":{"line":174,"column":34},"end":{"line":174,"column":75}},"34":{"start":{"line":176,"column":19},"end":{"line":183,"column":13}},"35":{"start":{"line":177,"column":16},"end":{"line":182,"column":19}},"36":{"start":{"line":181,"column":34},"end":{"line":181,"column":75}},"37":{"start":{"line":191,"column":8},"end":{"line":202,"column":9}},"38":{"start":{"line":192,"column":12},"end":{"line":192,"column":33}},"39":{"start":{"line":194,"column":12},"end":{"line":201,"column":13}},"40":{"start":{"line":195,"column":16},"end":{"line":200,"column":19}},"41":{"start":{"line":199,"column":34},"end":{"line":199,"column":75}},"42":{"start":{"line":210,"column":8},"end":{"line":274,"column":9}},"43":{"start":{"line":211,"column":12},"end":{"line":212,"column":35}},"44":{"start":{"line":213,"column":12},"end":{"line":214,"column":40}},"45":{"start":{"line":216,"column":12},"end":{"line":245,"column":15}},"46":{"start":{"line":217,"column":16},"end":{"line":217,"column":41}},"47":{"start":{"line":218,"column":16},"end":{"line":218,"column":27}},"48":{"start":{"line":220,"column":16},"end":{"line":222,"column":17}},"49":{"start":{"line":221,"column":20},"end":{"line":221,"column":27}},"50":{"start":{"line":224,"column":16},"end":{"line":244,"column":17}},"51":{"start":{"line":226,"column":20},"end":{"line":226,"column":47}},"52":{"start":{"line":228,"column":20},"end":{"line":237,"column":21}},"53":{"start":{"line":229,"column":24},"end":{"line":234,"column":25}},"54":{"start":{"line":230,"column":28},"end":{"line":230,"column":64}},"55":{"start":{"line":232,"column":28},"end":{"line":232,"column":51}},"56":{"start":{"line":233,"column":28},"end":{"line":233,"column":35}},"57":{"start":{"line":236,"column":24},"end":{"line":236,"column":142}},"58":{"start":{"line":238,"column":23},"end":{"line":244,"column":17}},"59":{"start":{"line":239,"column":20},"end":{"line":239,"column":49}},"60":{"start":{"line":240,"column":20},"end":{"line":240,"column":43}},"61":{"start":{"line":241,"column":20},"end":{"line":241,"column":46}},"62":{"start":{"line":243,"column":20},"end":{"line":243,"column":49}},"63":{"start":{"line":247,"column":12},"end":{"line":273,"column":13}},"64":{"start":{"line":248,"column":16},"end":{"line":254,"column":19}},"65":{"start":{"line":249,"column":20},"end":{"line":253,"column":23}},"66":{"start":{"line":252,"column":38},"end":{"line":252,"column":99}},"67":{"start":{"line":255,"column":19},"end":{"line":273,"column":13}},"68":{"start":{"line":256,"column":16},"end":{"line":263,"column":19}},"69":{"start":{"line":257,"column":20},"end":{"line":262,"column":23}},"70":{"start":{"line":261,"column":38},"end":{"line":261,"column":97}},"71":{"start":{"line":264,"column":19},"end":{"line":273,"column":13}},"72":{"start":{"line":265,"column":16},"end":{"line":272,"column":19}},"73":{"start":{"line":266,"column":20},"end":{"line":271,"column":23}},"74":{"start":{"line":270,"column":38},"end":{"line":270,"column":97}},"75":{"start":{"line":276,"column":8},"end":{"line":293,"column":10}},"76":{"start":{"line":278,"column":16},"end":{"line":280,"column":17}},"77":{"start":{"line":279,"column":20},"end":{"line":279,"column":45}},"78":{"start":{"line":281,"column":16},"end":{"line":283,"column":17}},"79":{"start":{"line":282,"column":20},"end":{"line":282,"column":49}},"80":{"start":{"line":286,"column":16},"end":{"line":288,"column":17}},"81":{"start":{"line":287,"column":20},"end":{"line":287,"column":50}},"82":{"start":{"line":289,"column":16},"end":{"line":291,"column":17}},"83":{"start":{"line":290,"column":20},"end":{"line":290,"column":49}}},"branchMap":{"1":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":23},"end":{"line":72,"column":41}},{"start":{"line":72,"column":45},"end":{"line":72,"column":72}}]},"2":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":32},"end":{"line":73,"column":51}},{"start":{"line":73,"column":55},"end":{"line":73,"column":95}}]},"3":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":22},"end":{"line":74,"column":40}},{"start":{"line":74,"column":44},"end":{"line":74,"column":70}}]},"4":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":19},"end":{"line":101,"column":38}},{"start":{"line":101,"column":42},"end":{"line":101,"column":63}},{"start":{"line":101,"column":67},"end":{"line":101,"column":98}},{"start":{"line":102,"column":17},"end":{"line":102,"column":90}},{"start":{"line":103,"column":17},"end":{"line":103,"column":45}},{"start":{"line":103,"column":49},"end":{"line":103,"column":68}},{"start":{"line":103,"column":72},"end":{"line":103,"column":116}}]},"5":{"line":112,"type":"cond-expr","locations":[{"start":{"line":112,"column":47},"end":{"line":112,"column":55}},{"start":{"line":112,"column":58},"end":{"line":112,"column":67}}]},"6":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":12},"end":{"line":121,"column":12}},{"start":{"line":121,"column":12},"end":{"line":121,"column":12}}]},"7":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":16},"end":{"line":121,"column":38}},{"start":{"line":121,"column":42},"end":{"line":121,"column":71}}]},"8":{"line":128,"type":"cond-expr","locations":[{"start":{"line":128,"column":51},"end":{"line":128,"column":59}},{"start":{"line":128,"column":62},"end":{"line":128,"column":71}}]},"9":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":12},"end":{"line":140,"column":12}},{"start":{"line":140,"column":12},"end":{"line":140,"column":12}}]},"10":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":16},"end":{"line":140,"column":27}},{"start":{"line":140,"column":31},"end":{"line":140,"column":44}},{"start":{"line":140,"column":48},"end":{"line":140,"column":62}}]},"11":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":12},"end":{"line":144,"column":12}},{"start":{"line":144,"column":12},"end":{"line":144,"column":12}}]},"12":{"line":144,"type":"binary-expr","locations":[{"start":{"line":144,"column":16},"end":{"line":144,"column":38}},{"start":{"line":144,"column":42},"end":{"line":144,"column":71}}]},"13":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":16},"end":{"line":151,"column":16}},{"start":{"line":151,"column":16},"end":{"line":151,"column":16}}]},"14":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":16},"end":{"line":157,"column":16}},{"start":{"line":157,"column":16},"end":{"line":157,"column":16}}]},"15":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":20},"end":{"line":157,"column":34}},{"start":{"line":157,"column":38},"end":{"line":157,"column":46}}]},"16":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":16},"end":{"line":161,"column":16}},{"start":{"line":161,"column":16},"end":{"line":161,"column":16}}]},"17":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":20},"end":{"line":161,"column":37}},{"start":{"line":161,"column":41},"end":{"line":161,"column":87}}]},"18":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":19},"end":{"line":169,"column":19}},{"start":{"line":169,"column":19},"end":{"line":169,"column":19}}]},"19":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":23},"end":{"line":169,"column":31}},{"start":{"line":169,"column":35},"end":{"line":169,"column":60}},{"start":{"line":169,"column":64},"end":{"line":169,"column":83}}]},"20":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":19},"end":{"line":176,"column":19}},{"start":{"line":176,"column":19},"end":{"line":176,"column":19}}]},"21":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":23},"end":{"line":176,"column":30}},{"start":{"line":176,"column":34},"end":{"line":176,"column":56}},{"start":{"line":176,"column":60},"end":{"line":176,"column":89}}]},"22":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":12},"end":{"line":194,"column":12}},{"start":{"line":194,"column":12},"end":{"line":194,"column":12}}]},"23":{"line":194,"type":"binary-expr","locations":[{"start":{"line":194,"column":16},"end":{"line":194,"column":28}},{"start":{"line":194,"column":32},"end":{"line":194,"column":46}},{"start":{"line":194,"column":50},"end":{"line":194,"column":65}},{"start":{"line":194,"column":69},"end":{"line":194,"column":127}}]},"24":{"line":194,"type":"binary-expr","locations":[{"start":{"line":194,"column":71},"end":{"line":194,"column":93}},{"start":{"line":194,"column":97},"end":{"line":194,"column":126}}]},"25":{"line":198,"type":"binary-expr","locations":[{"start":{"line":198,"column":38},"end":{"line":198,"column":46}},{"start":{"line":198,"column":50},"end":{"line":198,"column":59}}]},"26":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":16},"end":{"line":220,"column":16}},{"start":{"line":220,"column":16},"end":{"line":220,"column":16}}]},"27":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":20},"end":{"line":220,"column":24}},{"start":{"line":220,"column":28},"end":{"line":220,"column":43}},{"start":{"line":220,"column":47},"end":{"line":220,"column":64}},{"start":{"line":220,"column":68},"end":{"line":220,"column":86}}]},"28":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":16},"end":{"line":224,"column":16}},{"start":{"line":224,"column":16},"end":{"line":224,"column":16}}]},"29":{"line":224,"type":"binary-expr","locations":[{"start":{"line":224,"column":20},"end":{"line":224,"column":42}},{"start":{"line":224,"column":46},"end":{"line":224,"column":75}}]},"30":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":20},"end":{"line":228,"column":20}},{"start":{"line":228,"column":20},"end":{"line":228,"column":20}}]},"31":{"line":236,"type":"binary-expr","locations":[{"start":{"line":236,"column":42},"end":{"line":236,"column":57}},{"start":{"line":236,"column":61},"end":{"line":236,"column":99}},{"start":{"line":236,"column":103},"end":{"line":236,"column":111}},{"start":{"line":236,"column":115},"end":{"line":236,"column":141}}]},"32":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":23},"end":{"line":238,"column":23}},{"start":{"line":238,"column":23},"end":{"line":238,"column":23}}]},"33":{"line":238,"type":"binary-expr","locations":[{"start":{"line":238,"column":27},"end":{"line":238,"column":35}},{"start":{"line":238,"column":39},"end":{"line":238,"column":60}},{"start":{"line":238,"column":64},"end":{"line":238,"column":89}},{"start":{"line":238,"column":93},"end":{"line":238,"column":112}}]},"34":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":12},"end":{"line":247,"column":12}},{"start":{"line":247,"column":12},"end":{"line":247,"column":12}}]},"35":{"line":247,"type":"binary-expr","locations":[{"start":{"line":247,"column":16},"end":{"line":247,"column":37}},{"start":{"line":247,"column":41},"end":{"line":247,"column":59}},{"start":{"line":247,"column":63},"end":{"line":247,"column":79}}]},"36":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":19},"end":{"line":255,"column":19}},{"start":{"line":255,"column":19},"end":{"line":255,"column":19}}]},"37":{"line":255,"type":"binary-expr","locations":[{"start":{"line":255,"column":23},"end":{"line":255,"column":43}},{"start":{"line":255,"column":47},"end":{"line":255,"column":61}}]},"38":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":19},"end":{"line":264,"column":19}},{"start":{"line":264,"column":19},"end":{"line":264,"column":19}}]},"39":{"line":264,"type":"binary-expr","locations":[{"start":{"line":264,"column":23},"end":{"line":264,"column":41}},{"start":{"line":264,"column":45},"end":{"line":264,"column":65}}]},"40":{"line":269,"type":"binary-expr","locations":[{"start":{"line":269,"column":37},"end":{"line":269,"column":54}},{"start":{"line":269,"column":58},"end":{"line":269,"column":76}}]},"41":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":16},"end":{"line":278,"column":16}},{"start":{"line":278,"column":16},"end":{"line":278,"column":16}}]},"42":{"line":278,"type":"binary-expr","locations":[{"start":{"line":278,"column":20},"end":{"line":278,"column":37}},{"start":{"line":278,"column":41},"end":{"line":278,"column":46}}]},"43":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":16},"end":{"line":281,"column":16}},{"start":{"line":281,"column":16},"end":{"line":281,"column":16}}]},"44":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":16},"end":{"line":286,"column":16}},{"start":{"line":286,"column":16},"end":{"line":286,"column":16}}]},"45":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":16},"end":{"line":289,"column":16}},{"start":{"line":289,"column":16},"end":{"line":289,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag non-quoted property names in object literals."," * @author Mathias Bynens <http://mathiasbynens.be/>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const espree = require(\"espree\"),","    keywords = require(\"../util/keywords\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require quotes around object literal property names\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: {","            anyOf: [","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\", \"as-needed\", \"consistent\", \"consistent-as-needed\"]","                        }","                    ],","                    minItems: 0,","                    maxItems: 1","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\", \"as-needed\", \"consistent\", \"consistent-as-needed\"]","                        },","                        {","                            type: \"object\",","                            properties: {","                                keywords: {","                                    type: \"boolean\"","                                },","                                unnecessary: {","                                    type: \"boolean\"","                                },","                                numbers: {","                                    type: \"boolean\"","                                }","                            },","                            additionalProperties: false","                        }","                    ],","                    minItems: 0,","                    maxItems: 2","                }","            ]","        },","","        fixable: \"code\"","    },","","    create(context) {","","        const MODE = context.options[0],","            KEYWORDS = context.options[1] && context.options[1].keywords,","            CHECK_UNNECESSARY = !context.options[1] || context.options[1].unnecessary !== false,","            NUMBERS = context.options[1] && context.options[1].numbers,","","            MESSAGE_UNNECESSARY = \"Unnecessarily quoted property '{{property}}' found.\",","            MESSAGE_UNQUOTED = \"Unquoted property '{{property}}' found.\",","            MESSAGE_NUMERIC = \"Unquoted number literal '{{property}}' used as key.\",","            MESSAGE_RESERVED = \"Unquoted reserved word '{{property}}' used as key.\",","            sourceCode = context.getSourceCode();","","","        /**","         * Checks whether a certain string constitutes an ES3 token","         * @param   {string} tokenStr - The string to be checked.","         * @returns {boolean} `true` if it is an ES3 token.","         */","        function isKeyword(tokenStr) {","            return keywords.indexOf(tokenStr) >= 0;","        }","","        /**","         * Checks if an espree-tokenized key has redundant quotes (i.e. whether quotes are unnecessary)","         * @param   {string} rawKey The raw key value from the source","         * @param   {espreeTokens} tokens The espree-tokenized node key","         * @param   {boolean} [skipNumberLiterals=false] Indicates whether number literals should be checked","         * @returns {boolean} Whether or not a key has redundant quotes.","         * @private","         */","        function areQuotesRedundant(rawKey, tokens, skipNumberLiterals) {","            return tokens.length === 1 && tokens[0].start === 0 && tokens[0].end === rawKey.length &&","                ([\"Identifier\", \"Keyword\", \"Null\", \"Boolean\"].indexOf(tokens[0].type) >= 0 ||","                (tokens[0].type === \"Numeric\" && !skipNumberLiterals && String(+tokens[0].value) === tokens[0].value));","        }","","        /**","        * Returns a string representation of a property node with quotes removed","        * @param {ASTNode} key Key AST Node, which may or may not be quoted","        * @returns {string} A replacement string for this property","        */","        function getUnquotedKey(key) {","            return key.type === \"Identifier\" ? key.name : key.value;","        }","","        /**","        * Returns a string representation of a property node with quotes added","        * @param {ASTNode} key Key AST Node, which may or may not be quoted","        * @returns {string} A replacement string for this property","        */","        function getQuotedKey(key) {","            if (key.type === \"Literal\" && typeof key.value === \"string\") {","","                // If the key is already a string literal, don't replace the quotes with double quotes.","                return sourceCode.getText(key);","            }","","            // Otherwise, the key is either an identifier or a number literal.","            return `\"${key.type === \"Identifier\" ? key.name : key.value}\"`;","        }","","        /**","         * Ensures that a property's key is quoted only when necessary","         * @param   {ASTNode} node Property AST node","         * @returns {void}","         */","        function checkUnnecessaryQuotes(node) {","            const key = node.key;","            let tokens;","","            if (node.method || node.computed || node.shorthand) {","                return;","            }","","            if (key.type === \"Literal\" && typeof key.value === \"string\") {","                try {","                    tokens = espree.tokenize(key.value);","                } catch (e) {","                    return;","                }","","                if (tokens.length !== 1) {","                    return;","                }","","                const isKeywordToken = isKeyword(tokens[0].value);","","                if (isKeywordToken && KEYWORDS) {","                    return;","                }","","                if (CHECK_UNNECESSARY && areQuotesRedundant(key.value, tokens, NUMBERS)) {","                    context.report({","                        node,","                        message: MESSAGE_UNNECESSARY,","                        data: { property: key.value },","                        fix: fixer => fixer.replaceText(key, getUnquotedKey(key))","                    });","                }","            } else if (KEYWORDS && key.type === \"Identifier\" && isKeyword(key.name)) {","                context.report({","                    node,","                    message: MESSAGE_RESERVED,","                    data: { property: key.name },","                    fix: fixer => fixer.replaceText(key, getQuotedKey(key))","                });","            } else if (NUMBERS && key.type === \"Literal\" && typeof key.value === \"number\") {","                context.report({","                    node,","                    message: MESSAGE_NUMERIC,","                    data: { property: key.value },","                    fix: fixer => fixer.replaceText(key, getQuotedKey(key))","                });","            }","        }","","        /**","         * Ensures that a property's key is quoted","         * @param   {ASTNode} node Property AST node","         * @returns {void}","         */","        function checkOmittedQuotes(node) {","            const key = node.key;","","            if (!node.method && !node.computed && !node.shorthand && !(key.type === \"Literal\" && typeof key.value === \"string\")) {","                context.report({","                    node,","                    message: MESSAGE_UNQUOTED,","                    data: { property: key.name || key.value },","                    fix: fixer => fixer.replaceText(key, getQuotedKey(key))","                });","            }","        }","","        /**","         * Ensures that an object's keys are consistently quoted, optionally checks for redundancy of quotes","         * @param   {ASTNode} node Property AST node","         * @param   {boolean} checkQuotesRedundancy Whether to check quotes' redundancy","         * @returns {void}","         */","        function checkConsistency(node, checkQuotesRedundancy) {","            const quotedProps = [],","                unquotedProps = [];","            let keywordKeyName = null,","                necessaryQuotes = false;","","            node.properties.forEach(property => {","                const key = property.key;","                let tokens;","","                if (!key || property.method || property.computed || property.shorthand) {","                    return;","                }","","                if (key.type === \"Literal\" && typeof key.value === \"string\") {","","                    quotedProps.push(property);","","                    if (checkQuotesRedundancy) {","                        try {","                            tokens = espree.tokenize(key.value);","                        } catch (e) {","                            necessaryQuotes = true;","                            return;","                        }","","                        necessaryQuotes = necessaryQuotes || !areQuotesRedundant(key.value, tokens) || KEYWORDS && isKeyword(tokens[0].value);","                    }","                } else if (KEYWORDS && checkQuotesRedundancy && key.type === \"Identifier\" && isKeyword(key.name)) {","                    unquotedProps.push(property);","                    necessaryQuotes = true;","                    keywordKeyName = key.name;","                } else {","                    unquotedProps.push(property);","                }","            });","","            if (checkQuotesRedundancy && quotedProps.length && !necessaryQuotes) {","                quotedProps.forEach(property => {","                    context.report({","                        node: property,","                        message: \"Properties shouldn't be quoted as all quotes are redundant.\",","                        fix: fixer => fixer.replaceText(property.key, getUnquotedKey(property.key))","                    });","                });","            } else if (unquotedProps.length && keywordKeyName) {","                unquotedProps.forEach(property => {","                    context.report({","                        node: property,","                        message: \"Properties should be quoted as '{{property}}' is a reserved word.\",","                        data: { property: keywordKeyName },","                        fix: fixer => fixer.replaceText(property.key, getQuotedKey(property.key))","                    });","                });","            } else if (quotedProps.length && unquotedProps.length) {","                unquotedProps.forEach(property => {","                    context.report({","                        node: property,","                        message: \"Inconsistently quoted property '{{key}}' found.\",","                        data: { key: property.key.name || property.key.value },","                        fix: fixer => fixer.replaceText(property.key, getQuotedKey(property.key))","                    });","                });","            }","        }","","        return {","            Property(node) {","                if (MODE === \"always\" || !MODE) {","                    checkOmittedQuotes(node);","                }","                if (MODE === \"as-needed\") {","                    checkUnnecessaryQuotes(node);","                }","            },","            ObjectExpression(node) {","                if (MODE === \"consistent\") {","                    checkConsistency(node, false);","                }","                if (MODE === \"consistent-as-needed\") {","                    checkConsistency(node, true);","                }","            }","        };","","    }","};",""],"l":{"11":1,"18":1,"71":0,"88":1,"89":0,"100":1,"101":0,"111":1,"112":0,"120":1,"121":0,"124":0,"128":0,"136":1,"137":0,"138":0,"140":0,"141":0,"144":0,"145":0,"146":0,"148":0,"151":0,"152":0,"155":0,"157":0,"158":0,"161":0,"162":0,"166":0,"169":0,"170":0,"174":0,"176":0,"177":0,"181":0,"191":1,"192":0,"194":0,"195":0,"199":0,"210":1,"211":0,"213":0,"216":0,"217":0,"218":0,"220":0,"221":0,"224":0,"226":0,"228":0,"229":0,"230":0,"232":0,"233":0,"236":0,"238":0,"239":0,"240":0,"241":0,"243":0,"247":0,"248":0,"249":0,"252":0,"255":0,"256":0,"257":0,"261":0,"264":0,"265":0,"266":0,"270":0,"276":0,"278":0,"279":0,"281":0,"282":0,"286":0,"287":0,"289":0,"290":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/quotes.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/quotes.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":1,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0,0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0,0],"29":[0,0],"30":[0,0],"31":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":50,"loc":{"start":{"line":50,"column":34},"end":{"line":50,"column":48}}},"2":{"name":"(anonymous_2)","line":113,"loc":{"start":{"line":113,"column":10},"end":{"line":113,"column":20}}},"3":{"name":"isJSXLiteral","line":147,"loc":{"start":{"line":147,"column":8},"end":{"line":147,"column":36}}},"4":{"name":"isDirective","line":158,"loc":{"start":{"line":158,"column":8},"end":{"line":158,"column":35}}},"5":{"name":"isPartOfDirectivePrologue","line":173,"loc":{"start":{"line":173,"column":8},"end":{"line":173,"column":49}}},"6":{"name":"isAllowedAsNonBacktick","line":201,"loc":{"start":{"line":201,"column":8},"end":{"line":201,"column":46}}},"7":{"name":"(anonymous_7)","line":229,"loc":{"start":{"line":229,"column":19},"end":{"line":229,"column":26}}},"8":{"name":"(anonymous_8)","line":250,"loc":{"start":{"line":250,"column":31},"end":{"line":250,"column":39}}},"9":{"name":"(anonymous_9)","line":258,"loc":{"start":{"line":258,"column":27},"end":{"line":258,"column":34}}},"10":{"name":"(anonymous_10)","line":279,"loc":{"start":{"line":279,"column":27},"end":{"line":279,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":34,"column":2}},"3":{"start":{"line":37,"column":0},"end":{"line":37,"column":122}},"4":{"start":{"line":48,"column":0},"end":{"line":69,"column":2}},"5":{"start":{"line":51,"column":4},"end":{"line":51,"column":32}},"6":{"start":{"line":52,"column":4},"end":{"line":52,"column":28}},"7":{"start":{"line":54,"column":4},"end":{"line":56,"column":5}},"8":{"start":{"line":55,"column":8},"end":{"line":55,"column":19}},"9":{"start":{"line":57,"column":4},"end":{"line":68,"column":18}},"10":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"11":{"start":{"line":59,"column":12},"end":{"line":59,"column":27}},"12":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"13":{"start":{"line":62,"column":12},"end":{"line":62,"column":32}},"14":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"15":{"start":{"line":65,"column":12},"end":{"line":65,"column":25}},"16":{"start":{"line":67,"column":8},"end":{"line":67,"column":21}},"17":{"start":{"line":71,"column":0},"end":{"line":71,"column":36}},"18":{"start":{"line":77,"column":0},"end":{"line":297,"column":2}},"19":{"start":{"line":115,"column":8},"end":{"line":119,"column":49}},"20":{"start":{"line":120,"column":8},"end":{"line":120,"column":66}},"21":{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},"22":{"start":{"line":124,"column":12},"end":{"line":124,"column":31}},"23":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"24":{"start":{"line":148,"column":12},"end":{"line":148,"column":92}},"25":{"start":{"line":158,"column":8},"end":{"line":164,"column":9}},"26":{"start":{"line":159,"column":12},"end":{"line":163,"column":14}},"27":{"start":{"line":173,"column":8},"end":{"line":193,"column":9}},"28":{"start":{"line":174,"column":12},"end":{"line":174,"column":45}},"29":{"start":{"line":176,"column":12},"end":{"line":178,"column":13}},"30":{"start":{"line":177,"column":16},"end":{"line":177,"column":29}},"31":{"start":{"line":181,"column":12},"end":{"line":190,"column":13}},"32":{"start":{"line":182,"column":16},"end":{"line":182,"column":48}},"33":{"start":{"line":184,"column":16},"end":{"line":186,"column":17}},"34":{"start":{"line":185,"column":20},"end":{"line":185,"column":32}},"35":{"start":{"line":187,"column":16},"end":{"line":189,"column":17}},"36":{"start":{"line":188,"column":20},"end":{"line":188,"column":26}},"37":{"start":{"line":192,"column":12},"end":{"line":192,"column":25}},"38":{"start":{"line":201,"column":8},"end":{"line":225,"column":9}},"39":{"start":{"line":202,"column":12},"end":{"line":202,"column":39}},"40":{"start":{"line":204,"column":12},"end":{"line":224,"column":13}},"41":{"start":{"line":208,"column":20},"end":{"line":208,"column":59}},"42":{"start":{"line":213,"column":20},"end":{"line":213,"column":67}},"43":{"start":{"line":219,"column":20},"end":{"line":219,"column":50}},"44":{"start":{"line":223,"column":20},"end":{"line":223,"column":33}},"45":{"start":{"line":227,"column":8},"end":{"line":294,"column":10}},"46":{"start":{"line":230,"column":16},"end":{"line":231,"column":38}},"47":{"start":{"line":232,"column":16},"end":{"line":232,"column":28}},"48":{"start":{"line":234,"column":16},"end":{"line":255,"column":17}},"49":{"start":{"line":235,"column":20},"end":{"line":237,"column":72}},"50":{"start":{"line":239,"column":20},"end":{"line":241,"column":21}},"51":{"start":{"line":240,"column":24},"end":{"line":240,"column":130}},"52":{"start":{"line":243,"column":20},"end":{"line":254,"column":21}},"53":{"start":{"line":244,"column":24},"end":{"line":253,"column":27}},"54":{"start":{"line":251,"column":32},"end":{"line":251,"column":91}},"55":{"start":{"line":261,"column":16},"end":{"line":267,"column":17}},"56":{"start":{"line":266,"column":20},"end":{"line":266,"column":27}},"57":{"start":{"line":270,"column":16},"end":{"line":270,"column":123}},"58":{"start":{"line":272,"column":16},"end":{"line":292,"column":17}},"59":{"start":{"line":273,"column":20},"end":{"line":291,"column":23}},"60":{"start":{"line":280,"column":28},"end":{"line":288,"column":29}},"61":{"start":{"line":287,"column":32},"end":{"line":287,"column":44}},"62":{"start":{"line":289,"column":28},"end":{"line":289,"column":103}}},"branchMap":{"1":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"2":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"3":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":32}},{"start":{"line":58,"column":36},"end":{"line":58,"column":52}},{"start":{"line":58,"column":56},"end":{"line":58,"column":72}}]},"4":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]},"5":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":30}},{"start":{"line":61,"column":34},"end":{"line":61,"column":50}},{"start":{"line":61,"column":54},"end":{"line":61,"column":68}}]},"6":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"7":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":12},"end":{"line":64,"column":19}},{"start":{"line":64,"column":23},"end":{"line":64,"column":39}}]},"8":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":38},"end":{"line":116,"column":49}},{"start":{"line":116,"column":53},"end":{"line":116,"column":61}}]},"9":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":36},"end":{"line":118,"column":43}},{"start":{"line":118,"column":47},"end":{"line":118,"column":85}}]},"10":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":26},"end":{"line":120,"column":33}},{"start":{"line":120,"column":37},"end":{"line":120,"column":65}}]},"11":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":8},"end":{"line":123,"column":8}},{"start":{"line":123,"column":8},"end":{"line":123,"column":8}}]},"12":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":19},"end":{"line":148,"column":54}},{"start":{"line":148,"column":58},"end":{"line":148,"column":91}}]},"13":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":16},"end":{"line":160,"column":51}},{"start":{"line":161,"column":16},"end":{"line":161,"column":50}},{"start":{"line":162,"column":16},"end":{"line":162,"column":57}}]},"14":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":12},"end":{"line":176,"column":12}},{"start":{"line":176,"column":12},"end":{"line":176,"column":12}}]},"15":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":16},"end":{"line":176,"column":40}},{"start":{"line":176,"column":45},"end":{"line":176,"column":76}},{"start":{"line":176,"column":80},"end":{"line":176,"column":114}}]},"16":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":16},"end":{"line":184,"column":16}},{"start":{"line":184,"column":16},"end":{"line":184,"column":16}}]},"17":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":16},"end":{"line":187,"column":16}},{"start":{"line":187,"column":16},"end":{"line":187,"column":16}}]},"18":{"line":204,"type":"switch","locations":[{"start":{"line":207,"column":16},"end":{"line":208,"column":59}},{"start":{"line":211,"column":16},"end":{"line":211,"column":32}},{"start":{"line":212,"column":16},"end":{"line":213,"column":67}},{"start":{"line":216,"column":16},"end":{"line":216,"column":41}},{"start":{"line":217,"column":16},"end":{"line":217,"column":46}},{"start":{"line":218,"column":16},"end":{"line":219,"column":50}},{"start":{"line":222,"column":16},"end":{"line":223,"column":33}}]},"19":{"line":213,"type":"binary-expr","locations":[{"start":{"line":213,"column":27},"end":{"line":213,"column":46}},{"start":{"line":213,"column":50},"end":{"line":213,"column":66}}]},"20":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":16},"end":{"line":234,"column":16}},{"start":{"line":234,"column":16},"end":{"line":234,"column":16}}]},"21":{"line":234,"type":"binary-expr","locations":[{"start":{"line":234,"column":20},"end":{"line":234,"column":28}},{"start":{"line":234,"column":32},"end":{"line":234,"column":55}}]},"22":{"line":235,"type":"binary-expr","locations":[{"start":{"line":235,"column":31},"end":{"line":235,"column":57}},{"start":{"line":235,"column":61},"end":{"line":235,"column":89}},{"start":{"line":236,"column":24},"end":{"line":236,"column":42}},{"start":{"line":237,"column":24},"end":{"line":237,"column":71}}]},"23":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":20},"end":{"line":239,"column":20}},{"start":{"line":239,"column":20},"end":{"line":239,"column":20}}]},"24":{"line":239,"type":"binary-expr","locations":[{"start":{"line":239,"column":24},"end":{"line":239,"column":32}},{"start":{"line":239,"column":36},"end":{"line":239,"column":47}}]},"25":{"line":240,"type":"binary-expr","locations":[{"start":{"line":240,"column":34},"end":{"line":240,"column":90}},{"start":{"line":240,"column":94},"end":{"line":240,"column":129}}]},"26":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":20},"end":{"line":243,"column":20}},{"start":{"line":243,"column":20},"end":{"line":243,"column":20}}]},"27":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":16},"end":{"line":261,"column":16}},{"start":{"line":261,"column":16},"end":{"line":261,"column":16}}]},"28":{"line":262,"type":"binary-expr","locations":[{"start":{"line":262,"column":20},"end":{"line":262,"column":41}},{"start":{"line":263,"column":20},"end":{"line":263,"column":46}},{"start":{"line":264,"column":20},"end":{"line":264,"column":67}},{"start":{"line":264,"column":71},"end":{"line":264,"column":97}}]},"29":{"line":270,"type":"binary-expr","locations":[{"start":{"line":270,"column":35},"end":{"line":270,"column":59}},{"start":{"line":270,"column":63},"end":{"line":270,"column":122}}]},"30":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":16},"end":{"line":272,"column":16}},{"start":{"line":272,"column":16},"end":{"line":272,"column":16}}]},"31":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":28},"end":{"line":280,"column":28}},{"start":{"line":280,"column":28},"end":{"line":280,"column":28}}]}},"code":["/**"," * @fileoverview A rule to choose between single and double quote marks"," * @author Matt DuVall <http://www.mattduvall.com/>, Brandon Payton"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const QUOTE_SETTINGS = {","    double: {","        quote: \"\\\"\",","        alternateQuote: \"'\",","        description: \"doublequote\"","    },","    single: {","        quote: \"'\",","        alternateQuote: \"\\\"\",","        description: \"singlequote\"","    },","    backtick: {","        quote: \"`\",","        alternateQuote: \"\\\"\",","        description: \"backtick\"","    }","};","","// An unescaped newline is a newline preceded by an even number of backslashes.","const UNESCAPED_LINEBREAK_PATTERN = new RegExp(String.raw`(^|[^\\\\])(\\\\\\\\)*[${Array.from(astUtils.LINEBREAKS).join(\"\")}]`);","","/**"," * Switches quoting of javascript string between ' \" and `"," * escaping and unescaping as necessary."," * Only escaping of the minimal set of characters is changed."," * Note: escaping of newlines when switching from backtick to other quotes is not handled."," * @param {string} str - A string to convert."," * @returns {string} The string with changed quotes."," * @private"," */","QUOTE_SETTINGS.double.convert =","QUOTE_SETTINGS.single.convert =","QUOTE_SETTINGS.backtick.convert = function(str) {","    const newQuote = this.quote;","    const oldQuote = str[0];","","    if (newQuote === oldQuote) {","        return str;","    }","    return newQuote + str.slice(1, -1).replace(/\\\\(\\${|\\r\\n?|\\n|.)|[\"'`]|\\${|(\\r\\n?|\\n)/g, (match, escaped, newline) => {","        if (escaped === oldQuote || oldQuote === \"`\" && escaped === \"${\") {","            return escaped; // unescape","        }","        if (match === newQuote || newQuote === \"`\" && match === \"${\") {","            return `\\\\${match}`; // escape","        }","        if (newline && oldQuote === \"`\") {","            return \"\\\\n\"; // escape newlines","        }","        return match;","    }) + newQuote;","};","","const AVOID_ESCAPE = \"avoid-escape\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce the consistent use of either backticks, double, or single quotes\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"code\",","","        schema: [","            {","                enum: [\"single\", \"double\", \"backtick\"]","            },","            {","                anyOf: [","                    {","                        enum: [\"avoid-escape\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            avoidEscape: {","                                type: \"boolean\"","                            },","                            allowTemplateLiterals: {","                                type: \"boolean\"","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","","        const quoteOption = context.options[0],","            settings = QUOTE_SETTINGS[quoteOption || \"double\"],","            options = context.options[1],","            allowTemplateLiterals = options && options.allowTemplateLiterals === true,","            sourceCode = context.getSourceCode();","        let avoidEscape = options && options.avoidEscape === true;","","        // deprecated","        if (options === AVOID_ESCAPE) {","            avoidEscape = true;","        }","","        /**","         * Determines if a given node is part of JSX syntax.","         *","         * This function returns `true` in the following cases:","         *","         * - `<div className=\"foo\"></div>` ... If the literal is an attribute value, the parent of the literal is `JSXAttribute`.","         * - `<div>foo</div>` ... If the literal is a text content, the parent of the literal is `JSXElement`.","         *","         * In particular, this function returns `false` in the following cases:","         *","         * - `<div className={\"foo\"}></div>`","         * - `<div>{\"foo\"}</div>`","         *","         * In both cases, inside of the braces is handled as normal JavaScript.","         * The braces are `JSXExpressionContainer` nodes.","         *","         * @param {ASTNode} node The Literal node to check.","         * @returns {boolean} True if the node is a part of JSX, false if not.","         * @private","         */","        function isJSXLiteral(node) {","            return node.parent.type === \"JSXAttribute\" || node.parent.type === \"JSXElement\";","        }","","        /**","         * Checks whether or not a given node is a directive.","         * The directive is a `ExpressionStatement` which has only a string literal.","         * @param {ASTNode} node - A node to check.","         * @returns {boolean} Whether or not the node is a directive.","         * @private","         */","        function isDirective(node) {","            return (","                node.type === \"ExpressionStatement\" &&","                node.expression.type === \"Literal\" &&","                typeof node.expression.value === \"string\"","            );","        }","","        /**","         * Checks whether or not a given node is a part of directive prologues.","         * See also: http://www.ecma-international.org/ecma-262/6.0/#sec-directive-prologues-and-the-use-strict-directive","         * @param {ASTNode} node - A node to check.","         * @returns {boolean} Whether or not the node is a part of directive prologues.","         * @private","         */","        function isPartOfDirectivePrologue(node) {","            const block = node.parent.parent;","","            if (block.type !== \"Program\" && (block.type !== \"BlockStatement\" || !astUtils.isFunction(block.parent))) {","                return false;","            }","","            // Check the node is at a prologue.","            for (let i = 0; i < block.body.length; ++i) {","                const statement = block.body[i];","","                if (statement === node.parent) {","                    return true;","                }","                if (!isDirective(statement)) {","                    break;","                }","            }","","            return false;","        }","","        /**","         * Checks whether or not a given node is allowed as non backtick.","         * @param {ASTNode} node - A node to check.","         * @returns {boolean} Whether or not the node is allowed as non backtick.","         * @private","         */","        function isAllowedAsNonBacktick(node) {","            const parent = node.parent;","","            switch (parent.type) {","","                // Directive Prologues.","                case \"ExpressionStatement\":","                    return isPartOfDirectivePrologue(node);","","                // LiteralPropertyName.","                case \"Property\":","                case \"MethodDefinition\":","                    return parent.key === node && !parent.computed;","","                // ModuleSpecifier.","                case \"ImportDeclaration\":","                case \"ExportNamedDeclaration\":","                case \"ExportAllDeclaration\":","                    return parent.source === node;","","                // Others don't allow.","                default:","                    return false;","            }","        }","","        return {","","            Literal(node) {","                const val = node.value,","                    rawVal = node.raw;","                let isValid;","","                if (settings && typeof val === \"string\") {","                    isValid = (quoteOption === \"backtick\" && isAllowedAsNonBacktick(node)) ||","                        isJSXLiteral(node) ||","                        astUtils.isSurroundedBy(rawVal, settings.quote);","","                    if (!isValid && avoidEscape) {","                        isValid = astUtils.isSurroundedBy(rawVal, settings.alternateQuote) && rawVal.indexOf(settings.quote) >= 0;","                    }","","                    if (!isValid) {","                        context.report({","                            node,","                            message: \"Strings must use {{description}}.\",","                            data: {","                                description: settings.description","                            },","                            fix(fixer) {","                                return fixer.replaceText(node, settings.convert(node.raw));","                            }","                        });","                    }","                }","            },","","            TemplateLiteral(node) {","","                // If backticks are expected or it's a tagged template, then this shouldn't throw an errors","                if (","                    allowTemplateLiterals ||","                    quoteOption === \"backtick\" ||","                    node.parent.type === \"TaggedTemplateExpression\" && node === node.parent.quasi","                ) {","                    return;","                }","","                // A warning should be produced if the template literal only has one TemplateElement, and has no unescaped newlines.","                const shouldWarn = node.quasis.length === 1 && !UNESCAPED_LINEBREAK_PATTERN.test(node.quasis[0].value.raw);","","                if (shouldWarn) {","                    context.report({","                        node,","                        message: \"Strings must use {{description}}.\",","                        data: {","                            description: settings.description","                        },","                        fix(fixer) {","                            if (isPartOfDirectivePrologue(node)) {","","                                /*","                                 * TemplateLiterals in a directive prologue aren't actually directives, but if they're","                                 * in the directive prologue, then fixing them might turn them into directives and change","                                 * the behavior of the code.","                                 */","                                return null;","                            }","                            return fixer.replaceText(node, settings.convert(sourceCode.getText(node)));","                        }","                    });","                }","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"37":1,"48":1,"51":0,"52":0,"54":0,"55":0,"57":0,"58":0,"59":0,"61":0,"62":0,"64":0,"65":0,"67":0,"71":1,"77":1,"115":0,"120":0,"123":0,"124":0,"147":1,"148":0,"158":1,"159":0,"173":1,"174":0,"176":0,"177":0,"181":0,"182":0,"184":0,"185":0,"187":0,"188":0,"192":0,"201":1,"202":0,"204":0,"208":0,"213":0,"219":0,"223":0,"227":0,"230":0,"232":0,"234":0,"235":0,"239":0,"240":0,"243":0,"244":0,"251":0,"261":0,"266":0,"270":0,"272":0,"273":0,"280":0,"287":0,"289":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/radix.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/radix.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"b":{"1":[0,0,0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"isShadowed","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":30}}},"2":{"name":"isParseIntMethod","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":32}}},"3":{"name":"isValidRadix","line":58,"loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":29}}},"4":{"name":"isDefaultRadix","line":71,"loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":31}}},"5":{"name":"(anonymous_5)","line":94,"loc":{"start":{"line":94,"column":10},"end":{"line":94,"column":20}}},"6":{"name":"checkArguments","line":104,"loc":{"start":{"line":104,"column":8},"end":{"line":104,"column":38}}},"7":{"name":"(anonymous_7)","line":141,"loc":{"start":{"line":141,"column":26},"end":{"line":141,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":19,"column":33}},"3":{"start":{"line":27,"column":0},"end":{"line":29,"column":1}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":37}},"5":{"start":{"line":38,"column":0},"end":{"line":45,"column":1}},"6":{"start":{"line":39,"column":4},"end":{"line":44,"column":6}},"7":{"start":{"line":58,"column":0},"end":{"line":63,"column":1}},"8":{"start":{"line":59,"column":4},"end":{"line":62,"column":6}},"9":{"start":{"line":71,"column":0},"end":{"line":73,"column":1}},"10":{"start":{"line":72,"column":4},"end":{"line":72,"column":58}},"11":{"start":{"line":79,"column":0},"end":{"line":171,"column":2}},"12":{"start":{"line":95,"column":8},"end":{"line":95,"column":55}},"13":{"start":{"line":104,"column":8},"end":{"line":138,"column":9}},"14":{"start":{"line":105,"column":12},"end":{"line":105,"column":40}},"15":{"start":{"line":107,"column":12},"end":{"line":137,"column":13}},"16":{"start":{"line":109,"column":20},"end":{"line":112,"column":23}},"17":{"start":{"line":113,"column":20},"end":{"line":113,"column":26}},"18":{"start":{"line":116,"column":20},"end":{"line":121,"column":21}},"19":{"start":{"line":117,"column":24},"end":{"line":120,"column":27}},"20":{"start":{"line":122,"column":20},"end":{"line":122,"column":26}},"21":{"start":{"line":125,"column":20},"end":{"line":135,"column":21}},"22":{"start":{"line":126,"column":24},"end":{"line":129,"column":27}},"23":{"start":{"line":130,"column":27},"end":{"line":135,"column":21}},"24":{"start":{"line":131,"column":24},"end":{"line":134,"column":27}},"25":{"start":{"line":136,"column":20},"end":{"line":136,"column":26}},"26":{"start":{"line":140,"column":8},"end":{"line":169,"column":10}},"27":{"start":{"line":142,"column":16},"end":{"line":142,"column":49}},"28":{"start":{"line":143,"column":16},"end":{"line":143,"column":29}},"29":{"start":{"line":146,"column":16},"end":{"line":146,"column":73}},"30":{"start":{"line":147,"column":16},"end":{"line":155,"column":17}},"31":{"start":{"line":148,"column":20},"end":{"line":154,"column":23}},"32":{"start":{"line":149,"column":24},"end":{"line":149,"column":58}},"33":{"start":{"line":151,"column":24},"end":{"line":153,"column":25}},"34":{"start":{"line":152,"column":28},"end":{"line":152,"column":56}},"35":{"start":{"line":158,"column":16},"end":{"line":158,"column":71}},"36":{"start":{"line":159,"column":16},"end":{"line":167,"column":17}},"37":{"start":{"line":160,"column":20},"end":{"line":166,"column":23}},"38":{"start":{"line":161,"column":24},"end":{"line":161,"column":65}},"39":{"start":{"line":163,"column":24},"end":{"line":165,"column":25}},"40":{"start":{"line":164,"column":28},"end":{"line":164,"column":56}}},"branchMap":{"1":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":40}},{"start":{"line":41,"column":8},"end":{"line":41,"column":22}},{"start":{"line":42,"column":8},"end":{"line":42,"column":43}},{"start":{"line":43,"column":8},"end":{"line":43,"column":41}}]},"2":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":9},"end":{"line":60,"column":33}},{"start":{"line":60,"column":37},"end":{"line":60,"column":68}},{"start":{"line":61,"column":9},"end":{"line":61,"column":36}},{"start":{"line":61,"column":40},"end":{"line":61,"column":66}}]},"3":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":11},"end":{"line":72,"column":35}},{"start":{"line":72,"column":39},"end":{"line":72,"column":57}}]},"4":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":21},"end":{"line":95,"column":39}},{"start":{"line":95,"column":43},"end":{"line":95,"column":54}}]},"5":{"line":107,"type":"switch","locations":[{"start":{"line":108,"column":16},"end":{"line":113,"column":26}},{"start":{"line":115,"column":16},"end":{"line":122,"column":26}},{"start":{"line":124,"column":16},"end":{"line":136,"column":26}}]},"6":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":20},"end":{"line":116,"column":20}},{"start":{"line":116,"column":20},"end":{"line":116,"column":20}}]},"7":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":20},"end":{"line":125,"column":20}},{"start":{"line":125,"column":20},"end":{"line":125,"column":20}}]},"8":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":24},"end":{"line":125,"column":47}},{"start":{"line":125,"column":51},"end":{"line":125,"column":74}}]},"9":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":27},"end":{"line":130,"column":27}},{"start":{"line":130,"column":27},"end":{"line":130,"column":27}}]},"10":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":16},"end":{"line":147,"column":16}},{"start":{"line":147,"column":16},"end":{"line":147,"column":16}}]},"11":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":24},"end":{"line":151,"column":24}},{"start":{"line":151,"column":24},"end":{"line":151,"column":24}}]},"12":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":16},"end":{"line":159,"column":16}},{"start":{"line":159,"column":16},"end":{"line":159,"column":16}}]},"13":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":24},"end":{"line":163,"column":24}},{"start":{"line":163,"column":24},"end":{"line":163,"column":24}}]},"14":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":28},"end":{"line":163,"column":50}},{"start":{"line":163,"column":54},"end":{"line":163,"column":77}}]}},"code":["/**"," * @fileoverview Rule to flag use of parseInt without a radix argument"," * @author James Allardice"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const MODE_ALWAYS = \"always\",","    MODE_AS_NEEDED = \"as-needed\";","","/**"," * Checks whether a given variable is shadowed or not."," *"," * @param {escope.Variable} variable - A variable to check."," * @returns {boolean} `true` if the variable is shadowed."," */","function isShadowed(variable) {","    return variable.defs.length >= 1;","}","","/**"," * Checks whether a given node is a MemberExpression of `parseInt` method or not."," *"," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node is a MemberExpression of `parseInt`"," *      method."," */","function isParseIntMethod(node) {","    return (","        node.type === \"MemberExpression\" &&","        !node.computed &&","        node.property.type === \"Identifier\" &&","        node.property.name === \"parseInt\"","    );","}","","/**"," * Checks whether a given node is a valid value of radix or not."," *"," * The following values are invalid."," *"," * - A literal except numbers."," * - undefined."," *"," * @param {ASTNode} radix - A node of radix to check."," * @returns {boolean} `true` if the node is valid."," */","function isValidRadix(radix) {","    return !(","        (radix.type === \"Literal\" && typeof radix.value !== \"number\") ||","        (radix.type === \"Identifier\" && radix.name === \"undefined\")","    );","}","","/**"," * Checks whether a given node is a default value of radix or not."," *"," * @param {ASTNode} radix - A node of radix to check."," * @returns {boolean} `true` if the node is the literal node of `10`."," */","function isDefaultRadix(radix) {","    return radix.type === \"Literal\" && radix.value === 10;","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce the consistent use of the radix argument when using `parseInt()`\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"always\", \"as-needed\"]","            }","        ]","    },","","    create(context) {","        const mode = context.options[0] || MODE_ALWAYS;","","        /**","         * Checks the arguments of a given CallExpression node and reports it if it","         * offends this rule.","         *","         * @param {ASTNode} node - A CallExpression node to check.","         * @returns {void}","         */","        function checkArguments(node) {","            const args = node.arguments;","","            switch (args.length) {","                case 0:","                    context.report({","                        node,","                        message: \"Missing parameters.\"","                    });","                    break;","","                case 1:","                    if (mode === MODE_ALWAYS) {","                        context.report({","                            node,","                            message: \"Missing radix parameter.\"","                        });","                    }","                    break;","","                default:","                    if (mode === MODE_AS_NEEDED && isDefaultRadix(args[1])) {","                        context.report({","                            node,","                            message: \"Redundant radix parameter.\"","                        });","                    } else if (!isValidRadix(args[1])) {","                        context.report({","                            node,","                            message: \"Invalid radix parameter.\"","                        });","                    }","                    break;","            }","        }","","        return {","            \"Program:exit\"() {","                const scope = context.getScope();","                let variable;","","                // Check `parseInt()`","                variable = astUtils.getVariableByName(scope, \"parseInt\");","                if (!isShadowed(variable)) {","                    variable.references.forEach(reference => {","                        const node = reference.identifier;","","                        if (astUtils.isCallee(node)) {","                            checkArguments(node.parent);","                        }","                    });","                }","","                // Check `Number.parseInt()`","                variable = astUtils.getVariableByName(scope, \"Number\");","                if (!isShadowed(variable)) {","                    variable.references.forEach(reference => {","                        const node = reference.identifier.parent;","","                        if (isParseIntMethod(node) && astUtils.isCallee(node)) {","                            checkArguments(node.parent);","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"12":1,"18":1,"27":1,"28":0,"38":1,"39":0,"58":1,"59":0,"71":1,"72":0,"79":1,"95":0,"104":1,"105":0,"107":0,"109":0,"113":0,"116":0,"117":0,"122":0,"125":0,"126":0,"130":0,"131":0,"136":0,"140":0,"142":0,"143":0,"146":0,"147":0,"148":0,"149":0,"151":0,"152":0,"158":0,"159":0,"160":0,"161":0,"163":0,"164":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/require-await.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/require-await.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"capitalizeFirstLetter","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":37}}},"2":{"name":"(anonymous_2)","line":42,"loc":{"start":{"line":42,"column":10},"end":{"line":42,"column":20}}},"3":{"name":"enterFunction","line":51,"loc":{"start":{"line":51,"column":8},"end":{"line":51,"column":33}}},"4":{"name":"exitFunction","line":65,"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":36}}},"5":{"name":"(anonymous_5)","line":90,"loc":{"start":{"line":90,"column":27},"end":{"line":90,"column":30}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":24,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":49}},"4":{"start":{"line":32,"column":0},"end":{"line":95,"column":2}},"5":{"start":{"line":43,"column":8},"end":{"line":43,"column":51}},"6":{"start":{"line":44,"column":8},"end":{"line":44,"column":29}},"7":{"start":{"line":51,"column":8},"end":{"line":56,"column":9}},"8":{"start":{"line":52,"column":12},"end":{"line":55,"column":14}},"9":{"start":{"line":65,"column":8},"end":{"line":80,"column":9}},"10":{"start":{"line":66,"column":12},"end":{"line":77,"column":13}},"11":{"start":{"line":67,"column":16},"end":{"line":76,"column":19}},"12":{"start":{"line":79,"column":12},"end":{"line":79,"column":40}},"13":{"start":{"line":82,"column":8},"end":{"line":93,"column":10}},"14":{"start":{"line":91,"column":16},"end":{"line":91,"column":42}}},"branchMap":{"1":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":12},"end":{"line":66,"column":12}},{"start":{"line":66,"column":12},"end":{"line":66,"column":12}}]},"2":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":16},"end":{"line":66,"column":26}},{"start":{"line":66,"column":30},"end":{"line":66,"column":49}},{"start":{"line":66,"column":53},"end":{"line":66,"column":84}}]}},"code":["/**"," * @fileoverview Rule to disallow async functions which have no `await` expression."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Capitalize the 1st letter of the given text."," *"," * @param {string} text - The text to capitalize."," * @returns {string} The text that the 1st letter was capitalized."," */","function capitalizeFirstLetter(text) {","    return text[0].toUpperCase() + text.slice(1);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"disallow async functions which have no `await` expression\",","            category: \"Best Practices\",","            recommended: false","        },","        schema: []","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        let scopeInfo = null;","","        /**","         * Push the scope info object to the stack.","         *","         * @returns {void}","         */","        function enterFunction() {","            scopeInfo = {","                upper: scopeInfo,","                hasAwait: false","            };","        }","","        /**","         * Pop the top scope info object from the stack.","         * Also, it reports the function if needed.","         *","         * @param {ASTNode} node - The node to report.","         * @returns {void}","         */","        function exitFunction(node) {","            if (node.async && !scopeInfo.hasAwait && !astUtils.isEmptyFunction(node)) {","                context.report({","                    node,","                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),","                    message: \"{{name}} has no 'await' expression.\",","                    data: {","                        name: capitalizeFirstLetter(","                            astUtils.getFunctionNameWithKind(node)","                        )","                    }","                });","            }","","            scopeInfo = scopeInfo.upper;","        }","","        return {","            FunctionDeclaration: enterFunction,","            FunctionExpression: enterFunction,","            ArrowFunctionExpression: enterFunction,","            \"FunctionDeclaration:exit\": exitFunction,","            \"FunctionExpression:exit\": exitFunction,","            \"ArrowFunctionExpression:exit\": exitFunction,","","            AwaitExpression() {","                scopeInfo.hasAwait = true;","            }","        };","    }","};",""],"l":{"12":1,"24":1,"25":0,"32":1,"43":0,"44":0,"51":1,"52":0,"65":1,"66":0,"67":0,"79":0,"82":0,"91":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/require-jsdoc.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/require-jsdoc.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":20}}},"2":{"name":"report","line":57,"loc":{"start":{"line":57,"column":8},"end":{"line":57,"column":30}}},"3":{"name":"checkClassMethodJsDoc","line":66,"loc":{"start":{"line":66,"column":8},"end":{"line":66,"column":45}}},"4":{"name":"checkJsDoc","line":81,"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":34}}},"5":{"name":"(anonymous_5)","line":90,"loc":{"start":{"line":90,"column":31},"end":{"line":90,"column":38}}},"6":{"name":"(anonymous_6)","line":95,"loc":{"start":{"line":95,"column":30},"end":{"line":95,"column":37}}},"7":{"name":"(anonymous_7)","line":100,"loc":{"start":{"line":100,"column":28},"end":{"line":100,"column":35}}},"8":{"name":"(anonymous_8)","line":105,"loc":{"start":{"line":105,"column":35},"end":{"line":105,"column":42}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":112,"column":2}},"2":{"start":{"line":44,"column":8},"end":{"line":44,"column":47}},"3":{"start":{"line":45,"column":8},"end":{"line":49,"column":10}},"4":{"start":{"line":50,"column":8},"end":{"line":50,"column":111}},"5":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"6":{"start":{"line":58,"column":12},"end":{"line":58,"column":72}},"7":{"start":{"line":66,"column":8},"end":{"line":74,"column":9}},"8":{"start":{"line":67,"column":12},"end":{"line":73,"column":13}},"9":{"start":{"line":68,"column":16},"end":{"line":68,"column":66}},"10":{"start":{"line":70,"column":16},"end":{"line":72,"column":17}},"11":{"start":{"line":71,"column":20},"end":{"line":71,"column":33}},"12":{"start":{"line":81,"column":8},"end":{"line":87,"column":9}},"13":{"start":{"line":82,"column":12},"end":{"line":82,"column":62}},"14":{"start":{"line":84,"column":12},"end":{"line":86,"column":13}},"15":{"start":{"line":85,"column":16},"end":{"line":85,"column":29}},"16":{"start":{"line":89,"column":8},"end":{"line":110,"column":10}},"17":{"start":{"line":91,"column":16},"end":{"line":93,"column":17}},"18":{"start":{"line":92,"column":20},"end":{"line":92,"column":37}},"19":{"start":{"line":96,"column":16},"end":{"line":98,"column":17}},"20":{"start":{"line":97,"column":20},"end":{"line":97,"column":48}},"21":{"start":{"line":101,"column":16},"end":{"line":103,"column":17}},"22":{"start":{"line":102,"column":20},"end":{"line":102,"column":37}},"23":{"start":{"line":106,"column":16},"end":{"line":108,"column":17}},"24":{"start":{"line":107,"column":20},"end":{"line":107,"column":37}}},"branchMap":{"1":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":55},"end":{"line":50,"column":73}},{"start":{"line":50,"column":77},"end":{"line":50,"column":103}},{"start":{"line":50,"column":107},"end":{"line":50,"column":109}}]},"2":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":12},"end":{"line":67,"column":12}},{"start":{"line":67,"column":12},"end":{"line":67,"column":12}}]},"3":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":16}},{"start":{"line":70,"column":16},"end":{"line":70,"column":16}}]},"4":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":12}},{"start":{"line":84,"column":12},"end":{"line":84,"column":12}}]},"5":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":16},"end":{"line":91,"column":16}},{"start":{"line":91,"column":16},"end":{"line":91,"column":16}}]},"6":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":16}},{"start":{"line":96,"column":16},"end":{"line":96,"column":16}}]},"7":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":16},"end":{"line":101,"column":16}},{"start":{"line":101,"column":16},"end":{"line":101,"column":16}}]},"8":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":16},"end":{"line":106,"column":16}},{"start":{"line":106,"column":16},"end":{"line":106,"column":16}}]},"9":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":20},"end":{"line":106,"column":51}},{"start":{"line":106,"column":55},"end":{"line":106,"column":96}}]}},"code":["/**"," * @fileoverview Rule to check for jsdoc presence."," * @author Gyandeep Singh"," */","\"use strict\";","","module.exports = {","    meta: {","        docs: {","            description: \"require JSDoc comments\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    require: {","                        type: \"object\",","                        properties: {","                            ClassDeclaration: {","                                type: \"boolean\"","                            },","                            MethodDefinition: {","                                type: \"boolean\"","                            },","                            FunctionDeclaration: {","                                type: \"boolean\"","                            },","                            ArrowFunctionExpression: {","                                type: \"boolean\"","                            }","                        },","                        additionalProperties: false","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const source = context.getSourceCode();","        const DEFAULT_OPTIONS = {","            FunctionDeclaration: true,","            MethodDefinition: false,","            ClassDeclaration: false","        };","        const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require || {});","","        /**","         * Report the error message","         * @param {ASTNode} node node to report","         * @returns {void}","         */","        function report(node) {","            context.report({ node, message: \"Missing JSDoc comment.\" });","        }","","        /**","         * Check if the jsdoc comment is present for class methods","         * @param {ASTNode} node node to examine","         * @returns {void}","         */","        function checkClassMethodJsDoc(node) {","            if (node.parent.type === \"MethodDefinition\") {","                const jsdocComment = source.getJSDocComment(node);","","                if (!jsdocComment) {","                    report(node);","                }","            }","        }","","        /**","         * Check if the jsdoc comment is present or not.","         * @param {ASTNode} node node to examine","         * @returns {void}","         */","        function checkJsDoc(node) {","            const jsdocComment = source.getJSDocComment(node);","","            if (!jsdocComment) {","                report(node);","            }","        }","","        return {","            FunctionDeclaration(node) {","                if (options.FunctionDeclaration) {","                    checkJsDoc(node);","                }","            },","            FunctionExpression(node) {","                if (options.MethodDefinition) {","                    checkClassMethodJsDoc(node);","                }","            },","            ClassDeclaration(node) {","                if (options.ClassDeclaration) {","                    checkJsDoc(node);","                }","            },","            ArrowFunctionExpression(node) {","                if (options.ArrowFunctionExpression && node.parent.type === \"VariableDeclarator\") {","                    checkJsDoc(node);","                }","            }","        };","    }","};",""],"l":{"7":1,"44":0,"45":0,"50":0,"57":1,"58":0,"66":1,"67":0,"68":0,"70":0,"71":0,"81":1,"82":0,"84":0,"85":0,"89":0,"91":0,"92":0,"96":0,"97":0,"101":0,"102":0,"106":0,"107":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/require-yield.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/require-yield.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"beginChecking","line":31,"loc":{"start":{"line":31,"column":8},"end":{"line":31,"column":37}}},"3":{"name":"endChecking","line":43,"loc":{"start":{"line":43,"column":8},"end":{"line":43,"column":35}}},"4":{"name":"(anonymous_4)","line":62,"loc":{"start":{"line":62,"column":27},"end":{"line":62,"column":30}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":71,"column":2}},"2":{"start":{"line":24,"column":8},"end":{"line":24,"column":25}},"3":{"start":{"line":31,"column":8},"end":{"line":35,"column":9}},"4":{"start":{"line":32,"column":12},"end":{"line":34,"column":13}},"5":{"start":{"line":33,"column":16},"end":{"line":33,"column":30}},"6":{"start":{"line":43,"column":8},"end":{"line":53,"column":9}},"7":{"start":{"line":44,"column":12},"end":{"line":46,"column":13}},"8":{"start":{"line":45,"column":16},"end":{"line":45,"column":23}},"9":{"start":{"line":48,"column":12},"end":{"line":48,"column":43}},"10":{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},"11":{"start":{"line":51,"column":16},"end":{"line":51,"column":100}},"12":{"start":{"line":55,"column":8},"end":{"line":69,"column":10}},"13":{"start":{"line":65,"column":16},"end":{"line":67,"column":17}},"14":{"start":{"line":66,"column":20},"end":{"line":66,"column":49}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":12}},{"start":{"line":32,"column":12},"end":{"line":32,"column":12}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":12}},{"start":{"line":44,"column":12},"end":{"line":44,"column":12}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":12}},{"start":{"line":50,"column":12},"end":{"line":50,"column":12}}]},"4":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":16},"end":{"line":50,"column":32}},{"start":{"line":50,"column":36},"end":{"line":50,"column":61}}]},"5":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":16},"end":{"line":65,"column":16}},{"start":{"line":65,"column":16},"end":{"line":65,"column":16},"skip":true}]}},"code":["/**"," * @fileoverview Rule to flag the generator functions that does not have yield."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require generator functions to contain `yield`\",","            category: \"ECMAScript 6\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","        const stack = [];","","        /**","         * If the node is a generator function, start counting `yield` keywords.","         * @param {Node} node - A function node to check.","         * @returns {void}","         */","        function beginChecking(node) {","            if (node.generator) {","                stack.push(0);","            }","        }","","        /**","         * If the node is a generator function, end counting `yield` keywords, then","         * reports result.","         * @param {Node} node - A function node to check.","         * @returns {void}","         */","        function endChecking(node) {","            if (!node.generator) {","                return;","            }","","            const countYield = stack.pop();","","            if (countYield === 0 && node.body.body.length > 0) {","                context.report({ node, message: \"This generator function does not have 'yield'.\" });","            }","        }","","        return {","            FunctionDeclaration: beginChecking,","            \"FunctionDeclaration:exit\": endChecking,","            FunctionExpression: beginChecking,","            \"FunctionExpression:exit\": endChecking,","","            // Increases the count of `yield` keyword.","            YieldExpression() {","","                /* istanbul ignore else */","                if (stack.length > 0) {","                    stack[stack.length - 1] += 1;","                }","            }","        };","    }","};",""],"l":{"12":1,"24":0,"31":1,"32":0,"33":0,"43":1,"44":0,"45":0,"48":0,"50":0,"51":0,"55":0,"65":0,"66":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/rest-spread-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/rest-spread-spacing.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":10},"end":{"line":27,"column":20}}},"2":{"name":"checkWhiteSpace","line":40,"loc":{"start":{"line":40,"column":8},"end":{"line":40,"column":39}}},"3":{"name":"(anonymous_3)","line":74,"loc":{"start":{"line":74,"column":23},"end":{"line":74,"column":31}}},"4":{"name":"(anonymous_4)","line":89,"loc":{"start":{"line":89,"column":23},"end":{"line":89,"column":31}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":107,"column":2}},"2":{"start":{"line":28,"column":8},"end":{"line":29,"column":58}},"3":{"start":{"line":40,"column":8},"end":{"line":94,"column":9}},"4":{"start":{"line":41,"column":12},"end":{"line":43,"column":85}},"5":{"start":{"line":44,"column":12},"end":{"line":44,"column":21}},"6":{"start":{"line":46,"column":12},"end":{"line":61,"column":13}},"7":{"start":{"line":48,"column":20},"end":{"line":48,"column":36}},"8":{"start":{"line":49,"column":20},"end":{"line":49,"column":26}},"9":{"start":{"line":51,"column":20},"end":{"line":51,"column":34}},"10":{"start":{"line":52,"column":20},"end":{"line":52,"column":26}},"11":{"start":{"line":54,"column":20},"end":{"line":54,"column":45}},"12":{"start":{"line":55,"column":20},"end":{"line":55,"column":26}},"13":{"start":{"line":57,"column":20},"end":{"line":57,"column":43}},"14":{"start":{"line":58,"column":20},"end":{"line":58,"column":26}},"15":{"start":{"line":60,"column":20},"end":{"line":60,"column":27}},"16":{"start":{"line":63,"column":12},"end":{"line":93,"column":13}},"17":{"start":{"line":64,"column":16},"end":{"line":77,"column":19}},"18":{"start":{"line":75,"column":24},"end":{"line":75,"column":100}},"19":{"start":{"line":78,"column":19},"end":{"line":93,"column":13}},"20":{"start":{"line":79,"column":16},"end":{"line":92,"column":19}},"21":{"start":{"line":90,"column":24},"end":{"line":90,"column":90}},"22":{"start":{"line":100,"column":8},"end":{"line":105,"column":10}}},"branchMap":{"1":{"line":46,"type":"switch","locations":[{"start":{"line":47,"column":16},"end":{"line":49,"column":26}},{"start":{"line":50,"column":16},"end":{"line":52,"column":26}},{"start":{"line":53,"column":16},"end":{"line":55,"column":26}},{"start":{"line":56,"column":16},"end":{"line":58,"column":26}},{"start":{"line":59,"column":16},"end":{"line":60,"column":27}}]},"2":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":63,"column":12}},{"start":{"line":63,"column":12},"end":{"line":63,"column":12}}]},"3":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":16},"end":{"line":63,"column":27}},{"start":{"line":63,"column":31},"end":{"line":63,"column":45}}]},"4":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":19},"end":{"line":78,"column":19}},{"start":{"line":78,"column":19},"end":{"line":78,"column":19}}]},"5":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":23},"end":{"line":78,"column":35}},{"start":{"line":78,"column":39},"end":{"line":78,"column":52}}]}},"code":["/**"," * @fileoverview Enforce spacing between rest and spread operators and their expressions."," * @author Kai Cataldo"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce spacing between rest and spread operators and their expressions\",","            category: \"ECMAScript 6\",","            recommended: false","        },","        fixable: \"whitespace\",","        schema: [","            {","                enum: [\"always\", \"never\"]","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode(),","            alwaysSpace = context.options[0] === \"always\";","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Checks whitespace between rest/spread operators and their expressions","         * @param {ASTNode} node - The node to check","         * @returns {void}","         */","        function checkWhiteSpace(node) {","            const operator = sourceCode.getFirstToken(node),","                nextToken = sourceCode.getTokenAfter(operator),","                hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);","            let type;","","            switch (node.type) {","                case \"SpreadElement\":","                    type = \"spread\";","                    break;","                case \"RestElement\":","                    type = \"rest\";","                    break;","                case \"ExperimentalSpreadProperty\":","                    type = \"spread property\";","                    break;","                case \"ExperimentalRestProperty\":","                    type = \"rest property\";","                    break;","                default:","                    return;","            }","","            if (alwaysSpace && !hasWhitespace) {","                context.report({","                    node,","                    loc: {","                        line: operator.loc.end.line,","                        column: operator.loc.end.column","                    },","                    message: \"Expected whitespace after {{type}} operator.\",","                    data: {","                        type","                    },","                    fix(fixer) {","                        return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], \" \");","                    }","                });","            } else if (!alwaysSpace && hasWhitespace) {","                context.report({","                    node,","                    loc: {","                        line: operator.loc.end.line,","                        column: operator.loc.end.column","                    },","                    message: \"Unexpected whitespace after {{type}} operator.\",","                    data: {","                        type","                    },","                    fix(fixer) {","                        return fixer.removeRange([operator.range[1], nextToken.range[0]]);","                    }","                });","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            SpreadElement: checkWhiteSpace,","            RestElement: checkWhiteSpace,","            ExperimentalSpreadProperty: checkWhiteSpace,","            ExperimentalRestProperty: checkWhiteSpace","        };","    }","};",""],"l":{"12":1,"28":0,"40":1,"41":0,"44":0,"46":0,"48":0,"49":0,"51":0,"52":0,"54":0,"55":0,"57":0,"58":0,"60":0,"63":0,"64":0,"75":0,"78":0,"79":0,"90":0,"100":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/semi-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/semi-spacing.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":1,"14":0,"15":0,"16":1,"17":0,"18":0,"19":1,"20":0,"21":0,"22":1,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":40,"loc":{"start":{"line":40,"column":10},"end":{"line":40,"column":20}}},"2":{"name":"hasLeadingSpace","line":61,"loc":{"start":{"line":61,"column":8},"end":{"line":61,"column":40}}},"3":{"name":"hasTrailingSpace","line":72,"loc":{"start":{"line":72,"column":8},"end":{"line":72,"column":41}}},"4":{"name":"isLastTokenInCurrentLine","line":83,"loc":{"start":{"line":83,"column":8},"end":{"line":83,"column":49}}},"5":{"name":"isFirstTokenInCurrentLine","line":94,"loc":{"start":{"line":94,"column":8},"end":{"line":94,"column":50}}},"6":{"name":"isBeforeClosingParen","line":105,"loc":{"start":{"line":105,"column":8},"end":{"line":105,"column":45}}},"7":{"name":"checkSemicolonSpacing","line":117,"loc":{"start":{"line":117,"column":8},"end":{"line":117,"column":52}}},"8":{"name":"(anonymous_8)","line":127,"loc":{"start":{"line":127,"column":31},"end":{"line":127,"column":39}}},"9":{"name":"(anonymous_9)","line":140,"loc":{"start":{"line":140,"column":31},"end":{"line":140,"column":39}}},"10":{"name":"(anonymous_10)","line":154,"loc":{"start":{"line":154,"column":35},"end":{"line":154,"column":43}}},"11":{"name":"(anonymous_11)","line":167,"loc":{"start":{"line":167,"column":35},"end":{"line":167,"column":43}}},"12":{"name":"checkNode","line":182,"loc":{"start":{"line":182,"column":8},"end":{"line":182,"column":33}}},"13":{"name":"(anonymous_13)","line":200,"loc":{"start":{"line":200,"column":24},"end":{"line":200,"column":31}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":211,"column":2}},"3":{"start":{"line":42,"column":8},"end":{"line":43,"column":49}},"4":{"start":{"line":44,"column":8},"end":{"line":45,"column":37}},"5":{"start":{"line":47,"column":8},"end":{"line":54,"column":9}},"6":{"start":{"line":48,"column":12},"end":{"line":50,"column":13}},"7":{"start":{"line":49,"column":16},"end":{"line":49,"column":51}},"8":{"start":{"line":51,"column":12},"end":{"line":53,"column":13}},"9":{"start":{"line":52,"column":16},"end":{"line":52,"column":49}},"10":{"start":{"line":61,"column":8},"end":{"line":65,"column":9}},"11":{"start":{"line":62,"column":12},"end":{"line":62,"column":65}},"12":{"start":{"line":64,"column":12},"end":{"line":64,"column":136}},"13":{"start":{"line":72,"column":8},"end":{"line":76,"column":9}},"14":{"start":{"line":73,"column":12},"end":{"line":73,"column":63}},"15":{"start":{"line":75,"column":12},"end":{"line":75,"column":133}},"16":{"start":{"line":83,"column":8},"end":{"line":87,"column":9}},"17":{"start":{"line":84,"column":12},"end":{"line":84,"column":63}},"18":{"start":{"line":86,"column":12},"end":{"line":86,"column":82}},"19":{"start":{"line":94,"column":8},"end":{"line":98,"column":9}},"20":{"start":{"line":95,"column":12},"end":{"line":95,"column":65}},"21":{"start":{"line":97,"column":12},"end":{"line":97,"column":84}},"22":{"start":{"line":105,"column":8},"end":{"line":109,"column":9}},"23":{"start":{"line":106,"column":12},"end":{"line":106,"column":62}},"24":{"start":{"line":108,"column":12},"end":{"line":108,"column":117}},"25":{"start":{"line":117,"column":8},"end":{"line":175,"column":9}},"26":{"start":{"line":118,"column":12},"end":{"line":174,"column":13}},"27":{"start":{"line":119,"column":16},"end":{"line":119,"column":49}},"28":{"start":{"line":121,"column":16},"end":{"line":145,"column":17}},"29":{"start":{"line":122,"column":20},"end":{"line":133,"column":21}},"30":{"start":{"line":123,"column":24},"end":{"line":132,"column":27}},"31":{"start":{"line":128,"column":32},"end":{"line":128,"column":85}},"32":{"start":{"line":130,"column":32},"end":{"line":130,"column":97}},"33":{"start":{"line":135,"column":20},"end":{"line":144,"column":21}},"34":{"start":{"line":136,"column":24},"end":{"line":143,"column":27}},"35":{"start":{"line":141,"column":32},"end":{"line":141,"column":74}},"36":{"start":{"line":147,"column":16},"end":{"line":173,"column":17}},"37":{"start":{"line":148,"column":20},"end":{"line":172,"column":21}},"38":{"start":{"line":149,"column":24},"end":{"line":160,"column":25}},"39":{"start":{"line":150,"column":28},"end":{"line":159,"column":31}},"40":{"start":{"line":155,"column":36},"end":{"line":155,"column":87}},"41":{"start":{"line":157,"column":36},"end":{"line":157,"column":100}},"42":{"start":{"line":162,"column":24},"end":{"line":171,"column":25}},"43":{"start":{"line":163,"column":28},"end":{"line":170,"column":31}},"44":{"start":{"line":168,"column":36},"end":{"line":168,"column":77}},"45":{"start":{"line":182,"column":8},"end":{"line":186,"column":9}},"46":{"start":{"line":183,"column":12},"end":{"line":183,"column":56}},"47":{"start":{"line":185,"column":12},"end":{"line":185,"column":47}},"48":{"start":{"line":188,"column":8},"end":{"line":209,"column":10}},"49":{"start":{"line":201,"column":16},"end":{"line":203,"column":17}},"50":{"start":{"line":202,"column":20},"end":{"line":202,"column":85}},"51":{"start":{"line":205,"column":16},"end":{"line":207,"column":17}},"52":{"start":{"line":206,"column":20},"end":{"line":206,"column":85}}},"branchMap":{"1":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":8}},{"start":{"line":47,"column":8},"end":{"line":47,"column":8}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":12}},{"start":{"line":48,"column":12},"end":{"line":48,"column":12}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":12}},{"start":{"line":51,"column":12},"end":{"line":51,"column":12}}]},"4":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":19},"end":{"line":64,"column":30}},{"start":{"line":64,"column":34},"end":{"line":64,"column":80}},{"start":{"line":64,"column":84},"end":{"line":64,"column":135}}]},"5":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":19},"end":{"line":75,"column":29}},{"start":{"line":75,"column":33},"end":{"line":75,"column":78}},{"start":{"line":75,"column":82},"end":{"line":75,"column":132}}]},"6":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":21},"end":{"line":86,"column":31}},{"start":{"line":86,"column":35},"end":{"line":86,"column":80}}]},"7":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":21},"end":{"line":97,"column":32}},{"start":{"line":97,"column":36},"end":{"line":97,"column":82}}]},"8":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":20},"end":{"line":108,"column":29}},{"start":{"line":108,"column":33},"end":{"line":108,"column":72}},{"start":{"line":108,"column":76},"end":{"line":108,"column":115}}]},"9":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":12},"end":{"line":118,"column":12}},{"start":{"line":118,"column":12},"end":{"line":118,"column":12}}]},"10":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":16},"end":{"line":121,"column":16}},{"start":{"line":121,"column":16},"end":{"line":121,"column":16}}]},"11":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":20},"end":{"line":122,"column":20}},{"start":{"line":122,"column":20},"end":{"line":122,"column":20}}]},"12":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":20},"end":{"line":135,"column":20}},{"start":{"line":135,"column":20},"end":{"line":135,"column":20}}]},"13":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":16},"end":{"line":147,"column":16}},{"start":{"line":147,"column":16},"end":{"line":147,"column":16}}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":20},"end":{"line":147,"column":53}},{"start":{"line":147,"column":57},"end":{"line":147,"column":89}},{"start":{"line":147,"column":93},"end":{"line":147,"column":121}}]},"15":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":20},"end":{"line":148,"column":20}},{"start":{"line":148,"column":20},"end":{"line":148,"column":20}}]},"16":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":24},"end":{"line":149,"column":24}},{"start":{"line":149,"column":24},"end":{"line":149,"column":24}}]},"17":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":24},"end":{"line":162,"column":24}},{"start":{"line":162,"column":24},"end":{"line":162,"column":24}}]},"18":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":16},"end":{"line":201,"column":16}},{"start":{"line":201,"column":16},"end":{"line":201,"column":16}}]},"19":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":16},"end":{"line":205,"column":16}},{"start":{"line":205,"column":16},"end":{"line":205,"column":16}}]}},"code":["/**"," * @fileoverview Validates spacing before and after semicolon"," * @author Mathias Schreck"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing before and after semicolons\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    before: {","                        type: \"boolean\"","                    },","                    after: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const config = context.options[0],","            sourceCode = context.getSourceCode();","        let requireSpaceBefore = false,","            requireSpaceAfter = true;","","        if (typeof config === \"object\") {","            if (config.hasOwnProperty(\"before\")) {","                requireSpaceBefore = config.before;","            }","            if (config.hasOwnProperty(\"after\")) {","                requireSpaceAfter = config.after;","            }","        }","","        /**","         * Checks if a given token has leading whitespace.","         * @param {Object} token The token to check.","         * @returns {boolean} True if the given token has leading space, false if not.","         */","        function hasLeadingSpace(token) {","            const tokenBefore = sourceCode.getTokenBefore(token);","","            return tokenBefore && astUtils.isTokenOnSameLine(tokenBefore, token) && sourceCode.isSpaceBetweenTokens(tokenBefore, token);","        }","","        /**","         * Checks if a given token has trailing whitespace.","         * @param {Object} token The token to check.","         * @returns {boolean} True if the given token has trailing space, false if not.","         */","        function hasTrailingSpace(token) {","            const tokenAfter = sourceCode.getTokenAfter(token);","","            return tokenAfter && astUtils.isTokenOnSameLine(token, tokenAfter) && sourceCode.isSpaceBetweenTokens(token, tokenAfter);","        }","","        /**","         * Checks if the given token is the last token in its line.","         * @param {Token} token The token to check.","         * @returns {boolean} Whether or not the token is the last in its line.","         */","        function isLastTokenInCurrentLine(token) {","            const tokenAfter = sourceCode.getTokenAfter(token);","","            return !(tokenAfter && astUtils.isTokenOnSameLine(token, tokenAfter));","        }","","        /**","         * Checks if the given token is the first token in its line","         * @param {Token} token The token to check.","         * @returns {boolean} Whether or not the token is the first in its line.","         */","        function isFirstTokenInCurrentLine(token) {","            const tokenBefore = sourceCode.getTokenBefore(token);","","            return !(tokenBefore && astUtils.isTokenOnSameLine(token, tokenBefore));","        }","","        /**","         * Checks if the next token of a given token is a closing parenthesis.","         * @param {Token} token The token to check.","         * @returns {boolean} Whether or not the next token of a given token is a closing parenthesis.","         */","        function isBeforeClosingParen(token) {","            const nextToken = sourceCode.getTokenAfter(token);","","            return (nextToken && astUtils.isClosingBraceToken(nextToken) || astUtils.isClosingParenToken(nextToken));","        }","","        /**","         * Reports if the given token has invalid spacing.","         * @param {Token} token The semicolon token to check.","         * @param {ASTNode} node The corresponding node of the token.","         * @returns {void}","         */","        function checkSemicolonSpacing(token, node) {","            if (astUtils.isSemicolonToken(token)) {","                const location = token.loc.start;","","                if (hasLeadingSpace(token)) {","                    if (!requireSpaceBefore) {","                        context.report({","                            node,","                            loc: location,","                            message: \"Unexpected whitespace before semicolon.\",","                            fix(fixer) {","                                const tokenBefore = sourceCode.getTokenBefore(token);","","                                return fixer.removeRange([tokenBefore.range[1], token.range[0]]);","                            }","                        });","                    }","                } else {","                    if (requireSpaceBefore) {","                        context.report({","                            node,","                            loc: location,","                            message: \"Missing whitespace before semicolon.\",","                            fix(fixer) {","                                return fixer.insertTextBefore(token, \" \");","                            }","                        });","                    }","                }","","                if (!isFirstTokenInCurrentLine(token) && !isLastTokenInCurrentLine(token) && !isBeforeClosingParen(token)) {","                    if (hasTrailingSpace(token)) {","                        if (!requireSpaceAfter) {","                            context.report({","                                node,","                                loc: location,","                                message: \"Unexpected whitespace after semicolon.\",","                                fix(fixer) {","                                    const tokenAfter = sourceCode.getTokenAfter(token);","","                                    return fixer.removeRange([token.range[1], tokenAfter.range[0]]);","                                }","                            });","                        }","                    } else {","                        if (requireSpaceAfter) {","                            context.report({","                                node,","                                loc: location,","                                message: \"Missing whitespace after semicolon.\",","                                fix(fixer) {","                                    return fixer.insertTextAfter(token, \" \");","                                }","                            });","                        }","                    }","                }","            }","        }","","        /**","         * Checks the spacing of the semicolon with the assumption that the last token is the semicolon.","         * @param {ASTNode} node The node to check.","         * @returns {void}","         */","        function checkNode(node) {","            const token = sourceCode.getLastToken(node);","","            checkSemicolonSpacing(token, node);","        }","","        return {","            VariableDeclaration: checkNode,","            ExpressionStatement: checkNode,","            BreakStatement: checkNode,","            ContinueStatement: checkNode,","            DebuggerStatement: checkNode,","            ReturnStatement: checkNode,","            ThrowStatement: checkNode,","            ImportDeclaration: checkNode,","            ExportNamedDeclaration: checkNode,","            ExportAllDeclaration: checkNode,","            ExportDefaultDeclaration: checkNode,","            ForStatement(node) {","                if (node.init) {","                    checkSemicolonSpacing(sourceCode.getTokenAfter(node.init), node);","                }","","                if (node.test) {","                    checkSemicolonSpacing(sourceCode.getTokenAfter(node.test), node);","                }","            }","        };","    }","};",""],"l":{"8":1,"14":1,"42":0,"44":0,"47":0,"48":0,"49":0,"51":0,"52":0,"61":1,"62":0,"64":0,"72":1,"73":0,"75":0,"83":1,"84":0,"86":0,"94":1,"95":0,"97":0,"105":1,"106":0,"108":0,"117":1,"118":0,"119":0,"121":0,"122":0,"123":0,"128":0,"130":0,"135":0,"136":0,"141":0,"147":0,"148":0,"149":0,"150":0,"155":0,"157":0,"162":0,"163":0,"168":0,"182":1,"183":0,"185":0,"188":0,"201":0,"202":0,"205":0,"206":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/semi.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/semi.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":61,"loc":{"start":{"line":61,"column":10},"end":{"line":61,"column":20}}},"2":{"name":"report","line":79,"loc":{"start":{"line":79,"column":8},"end":{"line":79,"column":39}}},"3":{"name":"(anonymous_3)","line":88,"loc":{"start":{"line":88,"column":22},"end":{"line":88,"column":38}}},"4":{"name":"(anonymous_4)","line":94,"loc":{"start":{"line":94,"column":22},"end":{"line":94,"column":38}}},"5":{"name":"isUnnecessarySemicolon","line":121,"loc":{"start":{"line":121,"column":8},"end":{"line":121,"column":51}}},"6":{"name":"isOneLinerBlock","line":145,"loc":{"start":{"line":145,"column":8},"end":{"line":145,"column":39}}},"7":{"name":"checkForSemicolon","line":163,"loc":{"start":{"line":163,"column":8},"end":{"line":163,"column":41}}},"8":{"name":"checkForSemicolonForVariableDeclaration","line":188,"loc":{"start":{"line":188,"column":8},"end":{"line":188,"column":63}}},"9":{"name":"(anonymous_9)","line":215,"loc":{"start":{"line":215,"column":34},"end":{"line":215,"column":41}}},"10":{"name":"(anonymous_10)","line":220,"loc":{"start":{"line":220,"column":36},"end":{"line":220,"column":43}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":50}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"3":{"start":{"line":18,"column":0},"end":{"line":228,"column":2}},"4":{"start":{"line":63,"column":8},"end":{"line":63,"column":44}},"5":{"start":{"line":64,"column":8},"end":{"line":64,"column":43}},"6":{"start":{"line":65,"column":8},"end":{"line":67,"column":49}},"7":{"start":{"line":79,"column":8},"end":{"line":112,"column":9}},"8":{"start":{"line":80,"column":12},"end":{"line":80,"column":60}},"9":{"start":{"line":81,"column":12},"end":{"line":83,"column":36}},"10":{"start":{"line":85,"column":12},"end":{"line":103,"column":13}},"11":{"start":{"line":86,"column":16},"end":{"line":86,"column":47}},"12":{"start":{"line":87,"column":16},"end":{"line":87,"column":30}},"13":{"start":{"line":88,"column":16},"end":{"line":90,"column":18}},"14":{"start":{"line":89,"column":20},"end":{"line":89,"column":65}},"15":{"start":{"line":92,"column":16},"end":{"line":92,"column":45}},"16":{"start":{"line":93,"column":16},"end":{"line":93,"column":32}},"17":{"start":{"line":94,"column":16},"end":{"line":102,"column":18}},"18":{"start":{"line":99,"column":20},"end":{"line":101,"column":43}},"19":{"start":{"line":105,"column":12},"end":{"line":110,"column":15}},"20":{"start":{"line":121,"column":8},"end":{"line":138,"column":9}},"21":{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},"22":{"start":{"line":123,"column":16},"end":{"line":123,"column":29}},"23":{"start":{"line":126,"column":12},"end":{"line":126,"column":66}},"24":{"start":{"line":128,"column":12},"end":{"line":130,"column":13}},"25":{"start":{"line":129,"column":16},"end":{"line":129,"column":28}},"26":{"start":{"line":132,"column":12},"end":{"line":132,"column":57}},"27":{"start":{"line":133,"column":12},"end":{"line":133,"column":59}},"28":{"start":{"line":134,"column":12},"end":{"line":134,"column":128}},"29":{"start":{"line":135,"column":12},"end":{"line":135,"column":112}},"30":{"start":{"line":137,"column":12},"end":{"line":137,"column":84}},"31":{"start":{"line":145,"column":8},"end":{"line":156,"column":9}},"32":{"start":{"line":146,"column":12},"end":{"line":146,"column":61}},"33":{"start":{"line":148,"column":12},"end":{"line":150,"column":13}},"34":{"start":{"line":149,"column":16},"end":{"line":149,"column":29}},"35":{"start":{"line":152,"column":12},"end":{"line":152,"column":39}},"36":{"start":{"line":154,"column":12},"end":{"line":155,"column":60}},"37":{"start":{"line":163,"column":8},"end":{"line":181,"column":9}},"38":{"start":{"line":164,"column":12},"end":{"line":164,"column":60}},"39":{"start":{"line":166,"column":12},"end":{"line":180,"column":13}},"40":{"start":{"line":167,"column":16},"end":{"line":169,"column":17}},"41":{"start":{"line":168,"column":20},"end":{"line":168,"column":39}},"42":{"start":{"line":171,"column":16},"end":{"line":179,"column":17}},"43":{"start":{"line":172,"column":20},"end":{"line":174,"column":21}},"44":{"start":{"line":173,"column":24},"end":{"line":173,"column":37}},"45":{"start":{"line":176,"column":20},"end":{"line":178,"column":21}},"46":{"start":{"line":177,"column":24},"end":{"line":177,"column":43}},"47":{"start":{"line":188,"column":8},"end":{"line":198,"column":9}},"48":{"start":{"line":189,"column":12},"end":{"line":191,"column":48}},"49":{"start":{"line":193,"column":12},"end":{"line":197,"column":13}},"50":{"start":{"line":196,"column":16},"end":{"line":196,"column":40}},"51":{"start":{"line":204,"column":8},"end":{"line":225,"column":10}},"52":{"start":{"line":216,"column":16},"end":{"line":218,"column":17}},"53":{"start":{"line":217,"column":20},"end":{"line":217,"column":44}},"54":{"start":{"line":221,"column":16},"end":{"line":223,"column":17}},"55":{"start":{"line":222,"column":20},"end":{"line":222,"column":44}}},"branchMap":{"1":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":28},"end":{"line":66,"column":35}},{"start":{"line":66,"column":39},"end":{"line":66,"column":78}}]},"2":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":12},"end":{"line":85,"column":12}},{"start":{"line":85,"column":12},"end":{"line":85,"column":12}}]},"3":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":12}},{"start":{"line":122,"column":12},"end":{"line":122,"column":12}}]},"4":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":12},"end":{"line":128,"column":12}},{"start":{"line":128,"column":12},"end":{"line":128,"column":12}}]},"5":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":34},"end":{"line":134,"column":71}},{"start":{"line":134,"column":75},"end":{"line":134,"column":99}},{"start":{"line":134,"column":103},"end":{"line":134,"column":127}}]},"6":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":31},"end":{"line":135,"column":70}},{"start":{"line":135,"column":74},"end":{"line":135,"column":110}}]},"7":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":20},"end":{"line":137,"column":51}},{"start":{"line":137,"column":55},"end":{"line":137,"column":69}},{"start":{"line":137,"column":74},"end":{"line":137,"column":83}}]},"8":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":12},"end":{"line":148,"column":12}},{"start":{"line":148,"column":12},"end":{"line":148,"column":12}}]},"9":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":16},"end":{"line":148,"column":26}},{"start":{"line":148,"column":30},"end":{"line":148,"column":53}}]},"10":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":19},"end":{"line":154,"column":25}},{"start":{"line":154,"column":29},"end":{"line":154,"column":61}},{"start":{"line":155,"column":14},"end":{"line":155,"column":59}}]},"11":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":12},"end":{"line":166,"column":12}},{"start":{"line":166,"column":12},"end":{"line":166,"column":12}}]},"12":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":16},"end":{"line":167,"column":16}},{"start":{"line":167,"column":16},"end":{"line":167,"column":16}}]},"13":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":16},"end":{"line":171,"column":16}},{"start":{"line":171,"column":16},"end":{"line":171,"column":16}}]},"14":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":20},"end":{"line":172,"column":20}},{"start":{"line":172,"column":20},"end":{"line":172,"column":20}}]},"15":{"line":172,"type":"binary-expr","locations":[{"start":{"line":172,"column":24},"end":{"line":172,"column":38}},{"start":{"line":172,"column":42},"end":{"line":172,"column":64}}]},"16":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":20},"end":{"line":176,"column":20}},{"start":{"line":176,"column":20},"end":{"line":176,"column":20}}]},"17":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":24},"end":{"line":176,"column":37}},{"start":{"line":176,"column":41},"end":{"line":176,"column":62}}]},"18":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":12},"end":{"line":193,"column":12}},{"start":{"line":193,"column":12},"end":{"line":193,"column":12}}]},"19":{"line":193,"type":"binary-expr","locations":[{"start":{"line":193,"column":17},"end":{"line":193,"column":47}},{"start":{"line":193,"column":51},"end":{"line":193,"column":71}},{"start":{"line":194,"column":17},"end":{"line":194,"column":60}},{"start":{"line":194,"column":64},"end":{"line":194,"column":84}}]},"20":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":16},"end":{"line":216,"column":16}},{"start":{"line":216,"column":16},"end":{"line":216,"column":16}}]},"21":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":16},"end":{"line":221,"column":16}},{"start":{"line":221,"column":16},"end":{"line":221,"column":16}}]}},"code":["/**"," * @fileoverview Rule to flag missing semicolons."," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const FixTracker = require(\"../util/fix-tracker\");","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow semicolons instead of ASI\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"code\",","","        schema: {","            anyOf: [","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"never\"]","                        }","                    ],","                    minItems: 0,","                    maxItems: 1","                },","                {","                    type: \"array\",","                    items: [","                        {","                            enum: [\"always\"]","                        },","                        {","                            type: \"object\",","                            properties: {","                                omitLastInOneLineBlock: { type: \"boolean\" }","                            },","                            additionalProperties: false","                        }","                    ],","                    minItems: 0,","                    maxItems: 2","                }","            ]","        }","    },","","    create(context) {","","        const OPT_OUT_PATTERN = /^[-[(/+`]/; // One of [(/+-`","        const options = context.options[1];","        const never = context.options[0] === \"never\",","            exceptOneLine = options && options.omitLastInOneLineBlock === true,","            sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * Reports a semicolon error with appropriate location and message.","         * @param {ASTNode} node The node with an extra or missing semicolon.","         * @param {boolean} missing True if the semicolon is missing.","         * @returns {void}","         */","        function report(node, missing) {","            const lastToken = sourceCode.getLastToken(node);","            let message,","                fix,","                loc = lastToken.loc;","","            if (!missing) {","                message = \"Missing semicolon.\";","                loc = loc.end;","                fix = function(fixer) {","                    return fixer.insertTextAfter(lastToken, \";\");","                };","            } else {","                message = \"Extra semicolon.\";","                loc = loc.start;","                fix = function(fixer) {","","                    // Expand the replacement range to include the surrounding","                    // tokens to avoid conflicting with no-extra-semi.","                    // https://github.com/eslint/eslint/issues/7928","                    return new FixTracker(fixer, sourceCode)","                        .retainSurroundingTokens(lastToken)","                        .remove(lastToken);","                };","            }","","            context.report({","                node,","                loc,","                message,","                fix","            });","","        }","","        /**","         * Check if a semicolon is unnecessary, only true if:","         *   - next token is on a new line and is not one of the opt-out tokens","         *   - next token is a valid statement divider","         * @param {Token} lastToken last token of current node.","         * @returns {boolean} whether the semicolon is unnecessary.","         */","        function isUnnecessarySemicolon(lastToken) {","            if (!astUtils.isSemicolonToken(lastToken)) {","                return false;","            }","","            const nextToken = sourceCode.getTokenAfter(lastToken);","","            if (!nextToken) {","                return true;","            }","","            const lastTokenLine = lastToken.loc.end.line;","            const nextTokenLine = nextToken.loc.start.line;","            const isOptOutToken = OPT_OUT_PATTERN.test(nextToken.value) && nextToken.value !== \"++\" && nextToken.value !== \"--\";","            const isDivider = (astUtils.isClosingBraceToken(nextToken) || astUtils.isSemicolonToken(nextToken));","","            return (lastTokenLine !== nextTokenLine && !isOptOutToken) || isDivider;","        }","","        /**","         * Checks a node to see if it's in a one-liner block statement.","         * @param {ASTNode} node The node to check.","         * @returns {boolean} whether the node is in a one-liner block statement.","         */","        function isOneLinerBlock(node) {","            const nextToken = sourceCode.getTokenAfter(node);","","            if (!nextToken || nextToken.value !== \"}\") {","                return false;","            }","","            const parent = node.parent;","","            return parent && parent.type === \"BlockStatement\" &&","              parent.loc.start.line === parent.loc.end.line;","        }","","        /**","         * Checks a node to see if it's followed by a semicolon.","         * @param {ASTNode} node The node to check.","         * @returns {void}","         */","        function checkForSemicolon(node) {","            const lastToken = sourceCode.getLastToken(node);","","            if (never) {","                if (isUnnecessarySemicolon(lastToken)) {","                    report(node, true);","                }","            } else {","                if (!astUtils.isSemicolonToken(lastToken)) {","                    if (!exceptOneLine || !isOneLinerBlock(node)) {","                        report(node);","                    }","                } else {","                    if (exceptOneLine && isOneLinerBlock(node)) {","                        report(node, true);","                    }","                }","            }","        }","","        /**","         * Checks to see if there's a semicolon after a variable declaration.","         * @param {ASTNode} node The node to check.","         * @returns {void}","         */","        function checkForSemicolonForVariableDeclaration(node) {","            const ancestors = context.getAncestors(),","                parentIndex = ancestors.length - 1,","                parent = ancestors[parentIndex];","","            if ((parent.type !== \"ForStatement\" || parent.init !== node) &&","                (!/^For(?:In|Of)Statement/.test(parent.type) || parent.left !== node)","            ) {","                checkForSemicolon(node);","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            VariableDeclaration: checkForSemicolonForVariableDeclaration,","            ExpressionStatement: checkForSemicolon,","            ReturnStatement: checkForSemicolon,","            ThrowStatement: checkForSemicolon,","            DoWhileStatement: checkForSemicolon,","            DebuggerStatement: checkForSemicolon,","            BreakStatement: checkForSemicolon,","            ContinueStatement: checkForSemicolon,","            ImportDeclaration: checkForSemicolon,","            ExportAllDeclaration: checkForSemicolon,","            ExportNamedDeclaration(node) {","                if (!node.declaration) {","                    checkForSemicolon(node);","                }","            },","            ExportDefaultDeclaration(node) {","                if (!/(?:Class|Function)Declaration/.test(node.declaration.type)) {","                    checkForSemicolon(node);","                }","            }","        };","","    }","};",""],"l":{"11":1,"12":1,"18":1,"63":0,"64":0,"65":0,"79":1,"80":0,"81":0,"85":0,"86":0,"87":0,"88":0,"89":0,"92":0,"93":0,"94":0,"99":0,"105":0,"121":1,"122":0,"123":0,"126":0,"128":0,"129":0,"132":0,"133":0,"134":0,"135":0,"137":0,"145":1,"146":0,"148":0,"149":0,"152":0,"154":0,"163":1,"164":0,"166":0,"167":0,"168":0,"171":0,"172":0,"173":0,"176":0,"177":0,"188":1,"189":0,"193":0,"196":0,"204":0,"216":0,"217":0,"221":0,"222":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/sort-imports.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/sort-imports.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":47,"loc":{"start":{"line":47,"column":10},"end":{"line":47,"column":20}}},"2":{"name":"usedMemberSyntax","line":67,"loc":{"start":{"line":67,"column":8},"end":{"line":67,"column":40}}},"3":{"name":"getMemberParameterGroupIndex","line":84,"loc":{"start":{"line":84,"column":8},"end":{"line":84,"column":52}}},"4":{"name":"getFirstLocalMemberName","line":93,"loc":{"start":{"line":93,"column":8},"end":{"line":93,"column":47}}},"5":{"name":"(anonymous_5)","line":102,"loc":{"start":{"line":102,"column":29},"end":{"line":102,"column":36}}},"6":{"name":"(anonymous_6)","line":151,"loc":{"start":{"line":151,"column":31},"end":{"line":151,"column":39}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":191,"column":2}},"2":{"start":{"line":49,"column":8},"end":{"line":53,"column":49}},"3":{"start":{"line":54,"column":8},"end":{"line":54,"column":39}},"4":{"start":{"line":67,"column":8},"end":{"line":77,"column":9}},"5":{"start":{"line":68,"column":12},"end":{"line":74,"column":13}},"6":{"start":{"line":69,"column":16},"end":{"line":69,"column":30}},"7":{"start":{"line":70,"column":19},"end":{"line":74,"column":13}},"8":{"start":{"line":71,"column":16},"end":{"line":71,"column":29}},"9":{"start":{"line":72,"column":19},"end":{"line":74,"column":13}},"10":{"start":{"line":73,"column":16},"end":{"line":73,"column":32}},"11":{"start":{"line":75,"column":12},"end":{"line":75,"column":30}},"12":{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},"13":{"start":{"line":85,"column":12},"end":{"line":85,"column":73}},"14":{"start":{"line":93,"column":8},"end":{"line":99,"column":9}},"15":{"start":{"line":94,"column":12},"end":{"line":96,"column":13}},"16":{"start":{"line":95,"column":16},"end":{"line":95,"column":53}},"17":{"start":{"line":97,"column":12},"end":{"line":97,"column":24}},"18":{"start":{"line":101,"column":8},"end":{"line":189,"column":10}},"19":{"start":{"line":103,"column":16},"end":{"line":139,"column":17}},"20":{"start":{"line":104,"column":20},"end":{"line":105,"column":107}},"21":{"start":{"line":106,"column":20},"end":{"line":107,"column":95}},"22":{"start":{"line":109,"column":20},"end":{"line":112,"column":21}},"23":{"start":{"line":110,"column":24},"end":{"line":110,"column":115}},"24":{"start":{"line":111,"column":24},"end":{"line":111,"column":112}},"25":{"start":{"line":117,"column":20},"end":{"line":138,"column":21}},"26":{"start":{"line":118,"column":24},"end":{"line":127,"column":25}},"27":{"start":{"line":119,"column":28},"end":{"line":126,"column":31}},"28":{"start":{"line":129,"column":24},"end":{"line":137,"column":25}},"29":{"start":{"line":133,"column":28},"end":{"line":136,"column":31}},"30":{"start":{"line":141,"column":16},"end":{"line":185,"column":17}},"31":{"start":{"line":142,"column":20},"end":{"line":142,"column":119}},"32":{"start":{"line":142,"column":81},"end":{"line":142,"column":117}},"33":{"start":{"line":143,"column":20},"end":{"line":143,"column":141}},"34":{"start":{"line":143,"column":70},"end":{"line":143,"column":104}},"35":{"start":{"line":143,"column":120},"end":{"line":143,"column":140}},"36":{"start":{"line":144,"column":20},"end":{"line":144,"column":144}},"37":{"start":{"line":144,"column":119},"end":{"line":144,"column":142}},"38":{"start":{"line":146,"column":20},"end":{"line":184,"column":21}},"39":{"start":{"line":147,"column":24},"end":{"line":183,"column":27}},"40":{"start":{"line":152,"column":32},"end":{"line":156,"column":33}},"41":{"start":{"line":152,"column":71},"end":{"line":152,"column":172}},"42":{"start":{"line":155,"column":36},"end":{"line":155,"column":48}},"43":{"start":{"line":158,"column":32},"end":{"line":181,"column":34}},"44":{"start":{"line":167,"column":44},"end":{"line":167,"column":86}},"45":{"start":{"line":168,"column":44},"end":{"line":168,"column":86}},"46":{"start":{"line":170,"column":44},"end":{"line":170,"column":74}},"47":{"start":{"line":175,"column":44},"end":{"line":177,"column":149}},"48":{"start":{"line":179,"column":44},"end":{"line":179,"column":115}},"49":{"start":{"line":187,"column":16},"end":{"line":187,"column":43}}},"branchMap":{"1":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":30},"end":{"line":49,"column":48}},{"start":{"line":49,"column":52},"end":{"line":49,"column":54}}]},"2":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":25},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":58}}]},"3":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":31},"end":{"line":51,"column":61}},{"start":{"line":51,"column":65},"end":{"line":51,"column":70}}]},"4":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":36},"end":{"line":52,"column":71}},{"start":{"line":52,"column":75},"end":{"line":52,"column":112}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":12}},{"start":{"line":68,"column":12},"end":{"line":68,"column":12}}]},"6":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":19},"end":{"line":70,"column":19}},{"start":{"line":70,"column":19},"end":{"line":70,"column":19}}]},"7":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":19},"end":{"line":72,"column":19}},{"start":{"line":72,"column":19},"end":{"line":72,"column":19}}]},"8":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":12}},{"start":{"line":94,"column":12},"end":{"line":94,"column":12}}]},"9":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":16},"end":{"line":103,"column":16}},{"start":{"line":103,"column":16},"end":{"line":103,"column":16}}]},"10":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":20},"end":{"line":109,"column":20}},{"start":{"line":109,"column":20},"end":{"line":109,"column":20}}]},"11":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":50},"end":{"line":110,"column":73}},{"start":{"line":110,"column":77},"end":{"line":110,"column":114}}]},"12":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":49},"end":{"line":111,"column":71}},{"start":{"line":111,"column":75},"end":{"line":111,"column":111}}]},"13":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":20},"end":{"line":117,"column":20}},{"start":{"line":117,"column":20},"end":{"line":117,"column":20}}]},"14":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":24},"end":{"line":118,"column":24}},{"start":{"line":118,"column":24},"end":{"line":118,"column":24}}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":24},"end":{"line":129,"column":24}},{"start":{"line":129,"column":24},"end":{"line":129,"column":24}}]},"16":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":28},"end":{"line":129,"column":51}},{"start":{"line":130,"column":28},"end":{"line":130,"column":50}},{"start":{"line":131,"column":28},"end":{"line":131,"column":76}}]},"17":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":16},"end":{"line":141,"column":16}},{"start":{"line":141,"column":16},"end":{"line":141,"column":16}}]},"18":{"line":143,"type":"cond-expr","locations":[{"start":{"line":143,"column":57},"end":{"line":143,"column":104}},{"start":{"line":143,"column":107},"end":{"line":143,"column":140}}]},"19":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":20},"end":{"line":146,"column":20}},{"start":{"line":146,"column":20},"end":{"line":146,"column":20}}]},"20":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":32},"end":{"line":152,"column":32}},{"start":{"line":152,"column":32},"end":{"line":152,"column":32}}]},"21":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":71},"end":{"line":152,"column":119}},{"start":{"line":152,"column":123},"end":{"line":152,"column":172}}]},"22":{"line":170,"type":"cond-expr","locations":[{"start":{"line":170,"column":67},"end":{"line":170,"column":68}},{"start":{"line":170,"column":71},"end":{"line":170,"column":73}}]},"23":{"line":175,"type":"cond-expr","locations":[{"start":{"line":176,"column":50},"end":{"line":176,"column":52}},{"start":{"line":177,"column":50},"end":{"line":177,"column":148}}]}},"code":["/**"," * @fileoverview Rule to require sorting of import declarations"," * @author Christian Schuller"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce sorted import declarations within modules\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    ignoreCase: {","                        type: \"boolean\"","                    },","                    memberSyntaxSortOrder: {","                        type: \"array\",","                        items: {","                            enum: [\"none\", \"all\", \"multiple\", \"single\"]","                        },","                        uniqueItems: true,","                        minItems: 4,","                        maxItems: 4","                    },","                    ignoreMemberSort: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","","        const configuration = context.options[0] || {},","            ignoreCase = configuration.ignoreCase || false,","            ignoreMemberSort = configuration.ignoreMemberSort || false,","            memberSyntaxSortOrder = configuration.memberSyntaxSortOrder || [\"none\", \"all\", \"multiple\", \"single\"],","            sourceCode = context.getSourceCode();","        let previousDeclaration = null;","","        /**","         * Gets the used member syntax style.","         *","         * import \"my-module.js\" --> none","         * import * as myModule from \"my-module.js\" --> all","         * import {myMember} from \"my-module.js\" --> single","         * import {foo, bar} from  \"my-module.js\" --> multiple","         *","         * @param {ASTNode} node - the ImportDeclaration node.","         * @returns {string} used member parameter style, [\"all\", \"multiple\", \"single\"]","         */","        function usedMemberSyntax(node) {","            if (node.specifiers.length === 0) {","                return \"none\";","            } else if (node.specifiers[0].type === \"ImportNamespaceSpecifier\") {","                return \"all\";","            } else if (node.specifiers.length === 1) {","                return \"single\";","            }","            return \"multiple\";","","        }","","        /**","         * Gets the group by member parameter index for given declaration.","         * @param {ASTNode} node - the ImportDeclaration node.","         * @returns {number} the declaration group by member index.","         */","        function getMemberParameterGroupIndex(node) {","            return memberSyntaxSortOrder.indexOf(usedMemberSyntax(node));","        }","","        /**","         * Gets the local name of the first imported module.","         * @param {ASTNode} node - the ImportDeclaration node.","         * @returns {?string} the local name of the first imported module.","         */","        function getFirstLocalMemberName(node) {","            if (node.specifiers[0]) {","                return node.specifiers[0].local.name;","            }","            return null;","","        }","","        return {","            ImportDeclaration(node) {","                if (previousDeclaration) {","                    const currentMemberSyntaxGroupIndex = getMemberParameterGroupIndex(node),","                        previousMemberSyntaxGroupIndex = getMemberParameterGroupIndex(previousDeclaration);","                    let currentLocalMemberName = getFirstLocalMemberName(node),","                        previousLocalMemberName = getFirstLocalMemberName(previousDeclaration);","","                    if (ignoreCase) {","                        previousLocalMemberName = previousLocalMemberName && previousLocalMemberName.toLowerCase();","                        currentLocalMemberName = currentLocalMemberName && currentLocalMemberName.toLowerCase();","                    }","","                    // When the current declaration uses a different member syntax,","                    // then check if the ordering is correct.","                    // Otherwise, make a default string compare (like rule sort-vars to be consistent) of the first used local member name.","                    if (currentMemberSyntaxGroupIndex !== previousMemberSyntaxGroupIndex) {","                        if (currentMemberSyntaxGroupIndex < previousMemberSyntaxGroupIndex) {","                            context.report({","                                node,","                                message: \"Expected '{{syntaxA}}' syntax before '{{syntaxB}}' syntax.\",","                                data: {","                                    syntaxA: memberSyntaxSortOrder[currentMemberSyntaxGroupIndex],","                                    syntaxB: memberSyntaxSortOrder[previousMemberSyntaxGroupIndex]","                                }","                            });","                        }","                    } else {","                        if (previousLocalMemberName &&","                            currentLocalMemberName &&","                            currentLocalMemberName < previousLocalMemberName","                        ) {","                            context.report({","                                node,","                                message: \"Imports should be sorted alphabetically.\"","                            });","                        }","                    }","                }","","                if (!ignoreMemberSort) {","                    const importSpecifiers = node.specifiers.filter(specifier => specifier.type === \"ImportSpecifier\");","                    const getSortableName = ignoreCase ? specifier => specifier.local.name.toLowerCase() : specifier => specifier.local.name;","                    const firstUnsortedIndex = importSpecifiers.map(getSortableName).findIndex((name, index, array) => array[index - 1] > name);","","                    if (firstUnsortedIndex !== -1) {","                        context.report({","                            node: importSpecifiers[firstUnsortedIndex],","                            message: \"Member '{{memberName}}' of the import declaration should be sorted alphabetically.\",","                            data: { memberName: importSpecifiers[firstUnsortedIndex].local.name },","                            fix(fixer) {","                                if (importSpecifiers.some(specifier => sourceCode.getComments(specifier).leading.length || sourceCode.getComments(specifier).trailing.length)) {","","                                    // If there are comments in the ImportSpecifier list, don't rearrange the specifiers.","                                    return null;","                                }","","                                return fixer.replaceTextRange(","                                    [importSpecifiers[0].range[0], importSpecifiers[importSpecifiers.length - 1].range[1]],","                                    importSpecifiers","","                                        // Clone the importSpecifiers array to avoid mutating it","                                        .slice()","","                                        // Sort the array into the desired order","                                        .sort((specifierA, specifierB) => {","                                            const aName = getSortableName(specifierA);","                                            const bName = getSortableName(specifierB);","","                                            return aName > bName ? 1 : -1;","                                        })","","                                        // Build a string out of the sorted list of import specifiers and the text between the originals","                                        .reduce((sourceText, specifier, index) => {","                                            const textAfterSpecifier = index === importSpecifiers.length - 1","                                                ? \"\"","                                                : sourceCode.getText().slice(importSpecifiers[index].range[1], importSpecifiers[index + 1].range[0]);","","                                            return sourceText + sourceCode.getText(specifier) + textAfterSpecifier;","                                        }, \"\")","                                );","                            }","                        });","                    }","                }","","                previousDeclaration = node;","            }","        };","    }","};",""],"l":{"12":1,"49":0,"54":0,"67":1,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"75":0,"84":1,"85":0,"93":1,"94":0,"95":0,"97":0,"101":0,"103":0,"104":0,"106":0,"109":0,"110":0,"111":0,"117":0,"118":0,"119":0,"129":0,"133":0,"141":0,"142":0,"143":0,"144":0,"146":0,"147":0,"152":0,"155":0,"158":0,"167":0,"168":0,"170":0,"175":0,"179":0,"187":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/sort-keys.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/sort-keys.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"getPropertyName","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":31}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":7},"end":{"line":44,"column":14}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":8},"end":{"line":47,"column":15}}},"4":{"name":"(anonymous_4)","line":50,"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":15}}},"5":{"name":"(anonymous_5)","line":53,"loc":{"start":{"line":53,"column":9},"end":{"line":53,"column":16}}},"6":{"name":"(anonymous_6)","line":56,"loc":{"start":{"line":56,"column":8},"end":{"line":56,"column":15}}},"7":{"name":"(anonymous_7)","line":59,"loc":{"start":{"line":59,"column":9},"end":{"line":59,"column":16}}},"8":{"name":"(anonymous_8)","line":62,"loc":{"start":{"line":62,"column":9},"end":{"line":62,"column":16}}},"9":{"name":"(anonymous_9)","line":65,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":17}}},"10":{"name":"(anonymous_10)","line":100,"loc":{"start":{"line":100,"column":10},"end":{"line":100,"column":20}}},"11":{"name":"(anonymous_11)","line":115,"loc":{"start":{"line":115,"column":28},"end":{"line":115,"column":31}}},"12":{"name":"(anonymous_12)","line":122,"loc":{"start":{"line":122,"column":35},"end":{"line":122,"column":38}}},"13":{"name":"(anonymous_13)","line":126,"loc":{"start":{"line":126,"column":20},"end":{"line":126,"column":27}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":48}},"2":{"start":{"line":31,"column":0},"end":{"line":33,"column":1}},"3":{"start":{"line":32,"column":4},"end":{"line":32,"column":73}},"4":{"start":{"line":43,"column":0},"end":{"line":68,"column":2}},"5":{"start":{"line":45,"column":8},"end":{"line":45,"column":22}},"6":{"start":{"line":48,"column":8},"end":{"line":48,"column":50}},"7":{"start":{"line":51,"column":8},"end":{"line":51,"column":41}},"8":{"start":{"line":54,"column":8},"end":{"line":54,"column":69}},"9":{"start":{"line":57,"column":8},"end":{"line":57,"column":39}},"10":{"start":{"line":60,"column":8},"end":{"line":60,"column":40}},"11":{"start":{"line":63,"column":8},"end":{"line":63,"column":40}},"12":{"start":{"line":66,"column":8},"end":{"line":66,"column":41}},"13":{"start":{"line":74,"column":0},"end":{"line":157,"column":2}},"14":{"start":{"line":103,"column":8},"end":{"line":103,"column":50}},"15":{"start":{"line":104,"column":8},"end":{"line":104,"column":43}},"16":{"start":{"line":105,"column":8},"end":{"line":105,"column":73}},"17":{"start":{"line":106,"column":8},"end":{"line":106,"column":59}},"18":{"start":{"line":107,"column":8},"end":{"line":109,"column":10}},"19":{"start":{"line":112,"column":8},"end":{"line":112,"column":25}},"20":{"start":{"line":114,"column":8},"end":{"line":155,"column":10}},"21":{"start":{"line":116,"column":16},"end":{"line":119,"column":18}},"22":{"start":{"line":123,"column":16},"end":{"line":123,"column":36}},"23":{"start":{"line":127,"column":16},"end":{"line":129,"column":17}},"24":{"start":{"line":128,"column":20},"end":{"line":128,"column":27}},"25":{"start":{"line":131,"column":16},"end":{"line":131,"column":48}},"26":{"start":{"line":132,"column":16},"end":{"line":132,"column":55}},"27":{"start":{"line":134,"column":16},"end":{"line":134,"column":54}},"28":{"start":{"line":136,"column":16},"end":{"line":138,"column":17}},"29":{"start":{"line":137,"column":20},"end":{"line":137,"column":27}},"30":{"start":{"line":140,"column":16},"end":{"line":153,"column":17}},"31":{"start":{"line":141,"column":20},"end":{"line":152,"column":23}}},"branchMap":{"1":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":11},"end":{"line":32,"column":47}},{"start":{"line":32,"column":51},"end":{"line":32,"column":64}},{"start":{"line":32,"column":68},"end":{"line":32,"column":72}}]},"2":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":22},"end":{"line":103,"column":40}},{"start":{"line":103,"column":44},"end":{"line":103,"column":49}}]},"3":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":29},"end":{"line":105,"column":36}},{"start":{"line":105,"column":40},"end":{"line":105,"column":61}}]},"4":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":31},"end":{"line":106,"column":38}},{"start":{"line":106,"column":42},"end":{"line":106,"column":57}}]},"5":{"line":108,"type":"cond-expr","locations":[{"start":{"line":108,"column":35},"end":{"line":108,"column":38}},{"start":{"line":108,"column":41},"end":{"line":108,"column":43}}]},"6":{"line":108,"type":"cond-expr","locations":[{"start":{"line":108,"column":57},"end":{"line":108,"column":60}},{"start":{"line":108,"column":63},"end":{"line":108,"column":65}}]},"7":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":16},"end":{"line":127,"column":16}},{"start":{"line":127,"column":16},"end":{"line":127,"column":16}}]},"8":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":33},"end":{"line":134,"column":41}},{"start":{"line":134,"column":45},"end":{"line":134,"column":53}}]},"9":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":16},"end":{"line":136,"column":16}},{"start":{"line":136,"column":16},"end":{"line":136,"column":16}}]},"10":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":20},"end":{"line":136,"column":29}},{"start":{"line":136,"column":33},"end":{"line":136,"column":42}}]},"11":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":16},"end":{"line":140,"column":16}},{"start":{"line":140,"column":16},"end":{"line":140,"column":16}}]},"12":{"line":149,"type":"cond-expr","locations":[{"start":{"line":149,"column":55},"end":{"line":149,"column":69}},{"start":{"line":149,"column":72},"end":{"line":149,"column":74}}]},"13":{"line":150,"type":"cond-expr","locations":[{"start":{"line":150,"column":45},"end":{"line":150,"column":55}},{"start":{"line":150,"column":58},"end":{"line":150,"column":60}}]}},"code":["/**"," * @fileoverview Rule to require object keys to be sorted"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\"),","    naturalCompare = require(\"natural-compare\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets the property name of the given `Property` node."," *"," * - If the property's key is an `Identifier` node, this returns the key's name"," *   whether it's a computed property or not."," * - If the property has a static name, this returns the static name."," * - Otherwise, this returns null."," *"," * @param {ASTNode} node - The `Property` node to get."," * @returns {string|null} The property name or null."," * @private"," */","function getPropertyName(node) {","    return astUtils.getStaticPropertyName(node) || node.key.name || null;","}","","/**"," * Functions which check that the given 2 names are in specific order."," *"," * Postfix `I` is meant insensitive."," * Postfix `N` is meant natual."," *"," * @private"," */","const isValidOrders = {","    asc(a, b) {","        return a <= b;","    },","    ascI(a, b) {","        return a.toLowerCase() <= b.toLowerCase();","    },","    ascN(a, b) {","        return naturalCompare(a, b) <= 0;","    },","    ascIN(a, b) {","        return naturalCompare(a.toLowerCase(), b.toLowerCase()) <= 0;","    },","    desc(a, b) {","        return isValidOrders.asc(b, a);","    },","    descI(a, b) {","        return isValidOrders.ascI(b, a);","    },","    descN(a, b) {","        return isValidOrders.ascN(b, a);","    },","    descIN(a, b) {","        return isValidOrders.ascIN(b, a);","    }","};","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require object keys to be sorted\",","            category: \"Stylistic Issues\",","            recommended: false","        },","        schema: [","            {","                enum: [\"asc\", \"desc\"]","            },","            {","                type: \"object\",","                properties: {","                    caseSensitive: {","                        type: \"boolean\"","                    },","                    natural: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        // Parse options.","        const order = context.options[0] || \"asc\";","        const options = context.options[1];","        const insensitive = (options && options.caseSensitive) === false;","        const natual = Boolean(options && options.natural);","        const isValidOrder = isValidOrders[","            order + (insensitive ? \"I\" : \"\") + (natual ? \"N\" : \"\")","        ];","","        // The stack to save the previous property's name for each object literals.","        let stack = null;","","        return {","            ObjectExpression() {","                stack = {","                    upper: stack,","                    prevName: null","                };","            },","","            \"ObjectExpression:exit\"() {","                stack = stack.upper;","            },","","            Property(node) {","                if (node.parent.type === \"ObjectPattern\") {","                    return;","                }","","                const prevName = stack.prevName;","                const thisName = getPropertyName(node);","","                stack.prevName = thisName || prevName;","","                if (!prevName || !thisName) {","                    return;","                }","","                if (!isValidOrder(prevName, thisName)) {","                    context.report({","                        node,","                        loc: node.key.loc,","                        message: \"Expected object keys to be in {{natual}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.\",","                        data: {","                            thisName,","                            prevName,","                            order,","                            insensitive: insensitive ? \"insensitive \" : \"\",","                            natual: natual ? \"natural \" : \"\"","                        }","                    });","                }","            }","        };","    }","};",""],"l":{"12":1,"31":1,"32":0,"43":1,"45":0,"48":0,"51":0,"54":0,"57":0,"60":0,"63":0,"66":0,"74":1,"103":0,"104":0,"105":0,"106":0,"107":0,"112":0,"114":0,"116":0,"123":0,"127":0,"128":0,"131":0,"132":0,"134":0,"136":0,"137":0,"140":0,"141":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/sort-vars.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/sort-vars.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":33,"loc":{"start":{"line":33,"column":10},"end":{"line":33,"column":20}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":31},"end":{"line":39,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":61,"column":2}},"2":{"start":{"line":35,"column":8},"end":{"line":36,"column":59}},"3":{"start":{"line":38,"column":8},"end":{"line":59,"column":10}},"4":{"start":{"line":40,"column":16},"end":{"line":40,"column":103}},"5":{"start":{"line":40,"column":72},"end":{"line":40,"column":101}},"6":{"start":{"line":42,"column":16},"end":{"line":57,"column":38}},"7":{"start":{"line":43,"column":20},"end":{"line":44,"column":58}},"8":{"start":{"line":46,"column":20},"end":{"line":49,"column":21}},"9":{"start":{"line":47,"column":24},"end":{"line":47,"column":74}},"10":{"start":{"line":48,"column":24},"end":{"line":48,"column":78}},"11":{"start":{"line":51,"column":20},"end":{"line":54,"column":21}},"12":{"start":{"line":52,"column":24},"end":{"line":52,"column":144}},"13":{"start":{"line":53,"column":24},"end":{"line":53,"column":36}},"14":{"start":{"line":55,"column":20},"end":{"line":55,"column":32}}},"branchMap":{"1":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":30},"end":{"line":35,"column":48}},{"start":{"line":35,"column":52},"end":{"line":35,"column":54}}]},"2":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":25},"end":{"line":36,"column":49}},{"start":{"line":36,"column":53},"end":{"line":36,"column":58}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":20},"end":{"line":46,"column":20}},{"start":{"line":46,"column":20},"end":{"line":46,"column":20}}]},"4":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":20},"end":{"line":51,"column":20}},{"start":{"line":51,"column":20},"end":{"line":51,"column":20}}]}},"code":["/**"," * @fileoverview Rule to require sorting of variables within a single Variable Declaration block"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require variables within the same declaration block to be sorted\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    ignoreCase: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const configuration = context.options[0] || {},","            ignoreCase = configuration.ignoreCase || false;","","        return {","            VariableDeclaration(node) {","                const idDeclarations = node.declarations.filter(decl => decl.id.type === \"Identifier\");","","                idDeclarations.slice(1).reduce((memo, decl) => {","                    let lastVariableName = memo.id.name,","                        currenVariableName = decl.id.name;","","                    if (ignoreCase) {","                        lastVariableName = lastVariableName.toLowerCase();","                        currenVariableName = currenVariableName.toLowerCase();","                    }","","                    if (currenVariableName < lastVariableName) {","                        context.report({ node: decl, message: \"Variables within the same declaration block should be sorted alphabetically.\" });","                        return memo;","                    }","                    return decl;","","                }, idDeclarations[0]);","            }","        };","    }","};",""],"l":{"12":1,"35":0,"38":0,"40":0,"42":0,"43":0,"46":0,"47":0,"48":0,"51":0,"52":0,"53":0,"55":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-before-blocks.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-before-blocks.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":50,"loc":{"start":{"line":50,"column":10},"end":{"line":50,"column":20}}},"2":{"name":"isConflicted","line":74,"loc":{"start":{"line":74,"column":8},"end":{"line":74,"column":37}}},"3":{"name":"checkPrecedingSpace","line":83,"loc":{"start":{"line":83,"column":8},"end":{"line":83,"column":43}}},"4":{"name":"(anonymous_4)","line":104,"loc":{"start":{"line":104,"column":31},"end":{"line":104,"column":39}}},"5":{"name":"(anonymous_5)","line":114,"loc":{"start":{"line":114,"column":31},"end":{"line":114,"column":39}}},"6":{"name":"checkSpaceBeforeCaseBlock","line":128,"loc":{"start":{"line":128,"column":8},"end":{"line":128,"column":49}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"2":{"start":{"line":14,"column":0},"end":{"line":148,"column":2}},"3":{"start":{"line":51,"column":8},"end":{"line":52,"column":49}},"4":{"start":{"line":53,"column":8},"end":{"line":55,"column":32}},"5":{"start":{"line":57,"column":8},"end":{"line":65,"column":9}},"6":{"start":{"line":58,"column":12},"end":{"line":58,"column":58}},"7":{"start":{"line":59,"column":12},"end":{"line":59,"column":56}},"8":{"start":{"line":60,"column":12},"end":{"line":60,"column":54}},"9":{"start":{"line":61,"column":15},"end":{"line":65,"column":9}},"10":{"start":{"line":62,"column":12},"end":{"line":62,"column":35}},"11":{"start":{"line":63,"column":12},"end":{"line":63,"column":34}},"12":{"start":{"line":64,"column":12},"end":{"line":64,"column":33}},"13":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"14":{"start":{"line":75,"column":12},"end":{"line":75,"column":101}},"15":{"start":{"line":83,"column":8},"end":{"line":121,"column":9}},"16":{"start":{"line":84,"column":12},"end":{"line":84,"column":67}},"17":{"start":{"line":85,"column":12},"end":{"line":85,"column":29}},"18":{"start":{"line":87,"column":12},"end":{"line":120,"column":13}},"19":{"start":{"line":88,"column":16},"end":{"line":88,"column":87}},"20":{"start":{"line":89,"column":16},"end":{"line":89,"column":60}},"21":{"start":{"line":91,"column":16},"end":{"line":97,"column":17}},"22":{"start":{"line":92,"column":20},"end":{"line":92,"column":50}},"23":{"start":{"line":93,"column":23},"end":{"line":97,"column":17}},"24":{"start":{"line":94,"column":20},"end":{"line":94,"column":48}},"25":{"start":{"line":96,"column":20},"end":{"line":96,"column":49}},"26":{"start":{"line":99,"column":16},"end":{"line":119,"column":17}},"27":{"start":{"line":100,"column":20},"end":{"line":108,"column":21}},"28":{"start":{"line":101,"column":24},"end":{"line":107,"column":27}},"29":{"start":{"line":105,"column":32},"end":{"line":105,"column":73}},"30":{"start":{"line":110,"column":20},"end":{"line":118,"column":21}},"31":{"start":{"line":111,"column":24},"end":{"line":117,"column":27}},"32":{"start":{"line":115,"column":32},"end":{"line":115,"column":99}},"33":{"start":{"line":128,"column":8},"end":{"line":139,"column":9}},"34":{"start":{"line":129,"column":12},"end":{"line":129,"column":37}},"35":{"start":{"line":130,"column":12},"end":{"line":130,"column":29}},"36":{"start":{"line":132,"column":12},"end":{"line":136,"column":13}},"37":{"start":{"line":133,"column":16},"end":{"line":133,"column":67}},"38":{"start":{"line":135,"column":16},"end":{"line":135,"column":64}},"39":{"start":{"line":138,"column":12},"end":{"line":138,"column":46}},"40":{"start":{"line":141,"column":8},"end":{"line":145,"column":10}}},"branchMap":{"1":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"2":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":15},"end":{"line":61,"column":15}},{"start":{"line":61,"column":15},"end":{"line":61,"column":15}}]},"3":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":20},"end":{"line":75,"column":47}},{"start":{"line":75,"column":51},"end":{"line":75,"column":71}},{"start":{"line":75,"column":76},"end":{"line":75,"column":100}}]},"4":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":12},"end":{"line":87,"column":12}},{"start":{"line":87,"column":12},"end":{"line":87,"column":12}}]},"5":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":16},"end":{"line":87,"column":30}},{"start":{"line":87,"column":34},"end":{"line":87,"column":63}},{"start":{"line":87,"column":67},"end":{"line":87,"column":115}}]},"6":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":16},"end":{"line":91,"column":16}},{"start":{"line":91,"column":16},"end":{"line":91,"column":16}}]},"7":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":20},"end":{"line":91,"column":56}},{"start":{"line":91,"column":60},"end":{"line":91,"column":97}}]},"8":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":23},"end":{"line":93,"column":23}},{"start":{"line":93,"column":23},"end":{"line":93,"column":23}}]},"9":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":16}},{"start":{"line":99,"column":16},"end":{"line":99,"column":16}}]},"10":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":20},"end":{"line":100,"column":20}},{"start":{"line":100,"column":20},"end":{"line":100,"column":20}}]},"11":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":20},"end":{"line":110,"column":20}},{"start":{"line":110,"column":20},"end":{"line":110,"column":20}}]},"12":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":132,"column":12}},{"start":{"line":132,"column":12},"end":{"line":132,"column":12}}]}},"code":["/**"," * @fileoverview A rule to ensure whitespace before blocks."," * @author Mathias Schreck <https://github.com/lo1tuma>"," */","","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing before blocks\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"always\", \"never\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            keywords: {","                                enum: [\"always\", \"never\"]","                            },","                            functions: {","                                enum: [\"always\", \"never\"]","                            },","                            classes: {","                                enum: [\"always\", \"never\"]","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","        const config = context.options[0],","            sourceCode = context.getSourceCode();","        let checkFunctions = true,","            checkKeywords = true,","            checkClasses = true;","","        if (typeof config === \"object\") {","            checkFunctions = config.functions !== \"never\";","            checkKeywords = config.keywords !== \"never\";","            checkClasses = config.classes !== \"never\";","        } else if (config === \"never\") {","            checkFunctions = false;","            checkKeywords = false;","            checkClasses = false;","        }","","        /**","         * Checks whether or not a given token is an arrow operator (=>) or a keyword","         * in order to avoid to conflict with `arrow-spacing` and `keyword-spacing`.","         *","         * @param {Token} token - A token to check.","         * @returns {boolean} `true` if the token is an arrow operator.","         */","        function isConflicted(token) {","            return (token.type === \"Punctuator\" && token.value === \"=>\") || token.type === \"Keyword\";","        }","","        /**","         * Checks the given BlockStatement node has a preceding space if it doesn’t start on a new line.","         * @param {ASTNode|Token} node The AST node of a BlockStatement.","         * @returns {void} undefined.","         */","        function checkPrecedingSpace(node) {","            const precedingToken = sourceCode.getTokenBefore(node);","            let requireSpace;","","            if (precedingToken && !isConflicted(precedingToken) && astUtils.isTokenOnSameLine(precedingToken, node)) {","                const hasSpace = sourceCode.isSpaceBetweenTokens(precedingToken, node);","                const parent = context.getAncestors().pop();","","                if (parent.type === \"FunctionExpression\" || parent.type === \"FunctionDeclaration\") {","                    requireSpace = checkFunctions;","                } else if (node.type === \"ClassBody\") {","                    requireSpace = checkClasses;","                } else {","                    requireSpace = checkKeywords;","                }","","                if (requireSpace) {","                    if (!hasSpace) {","                        context.report({","                            node,","                            message: \"Missing space before opening brace.\",","                            fix(fixer) {","                                return fixer.insertTextBefore(node, \" \");","                            }","                        });","                    }","                } else {","                    if (hasSpace) {","                        context.report({","                            node,","                            message: \"Unexpected space before opening brace.\",","                            fix(fixer) {","                                return fixer.removeRange([precedingToken.range[1], node.range[0]]);","                            }","                        });","                    }","                }","            }","        }","","        /**","         * Checks if the CaseBlock of an given SwitchStatement node has a preceding space.","         * @param {ASTNode} node The node of a SwitchStatement.","         * @returns {void} undefined.","         */","        function checkSpaceBeforeCaseBlock(node) {","            const cases = node.cases;","            let openingBrace;","","            if (cases.length > 0) {","                openingBrace = sourceCode.getTokenBefore(cases[0]);","            } else {","                openingBrace = sourceCode.getLastToken(node, 1);","            }","","            checkPrecedingSpace(openingBrace);","        }","","        return {","            BlockStatement: checkPrecedingSpace,","            ClassBody: checkPrecedingSpace,","            SwitchStatement: checkSpaceBeforeCaseBlock","        };","","    }","};",""],"l":{"8":1,"14":1,"51":0,"53":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"74":1,"75":0,"83":1,"84":0,"85":0,"87":0,"88":0,"89":0,"91":0,"92":0,"93":0,"94":0,"96":0,"99":0,"100":0,"101":0,"105":0,"110":0,"111":0,"115":0,"128":1,"129":0,"130":0,"132":0,"133":0,"135":0,"138":0,"141":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-before-function-paren.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-before-function-paren.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":53,"loc":{"start":{"line":53,"column":10},"end":{"line":53,"column":20}}},"2":{"name":"isNamedFunction","line":63,"loc":{"start":{"line":63,"column":8},"end":{"line":63,"column":39}}},"3":{"name":"getConfigForFunction","line":85,"loc":{"start":{"line":85,"column":8},"end":{"line":85,"column":44}}},"4":{"name":"checkFunction","line":110,"loc":{"start":{"line":110,"column":8},"end":{"line":110,"column":37}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":144,"column":2}},"3":{"start":{"line":54,"column":8},"end":{"line":54,"column":51}},"4":{"start":{"line":55,"column":8},"end":{"line":55,"column":98}},"5":{"start":{"line":56,"column":8},"end":{"line":56,"column":96}},"6":{"start":{"line":63,"column":8},"end":{"line":78,"column":9}},"7":{"start":{"line":64,"column":12},"end":{"line":66,"column":13}},"8":{"start":{"line":65,"column":16},"end":{"line":65,"column":28}},"9":{"start":{"line":68,"column":12},"end":{"line":68,"column":39}},"10":{"start":{"line":70,"column":12},"end":{"line":77,"column":18}},"11":{"start":{"line":85,"column":8},"end":{"line":103,"column":9}},"12":{"start":{"line":86,"column":12},"end":{"line":100,"column":13}},"13":{"start":{"line":89,"column":16},"end":{"line":93,"column":17}},"14":{"start":{"line":92,"column":20},"end":{"line":92,"column":65}},"15":{"start":{"line":94,"column":19},"end":{"line":100,"column":13}},"16":{"start":{"line":95,"column":16},"end":{"line":95,"column":58}},"17":{"start":{"line":98,"column":19},"end":{"line":100,"column":13}},"18":{"start":{"line":99,"column":16},"end":{"line":99,"column":62}},"19":{"start":{"line":102,"column":12},"end":{"line":102,"column":28}},"20":{"start":{"line":110,"column":8},"end":{"line":136,"column":9}},"21":{"start":{"line":111,"column":12},"end":{"line":111,"column":62}},"22":{"start":{"line":113,"column":12},"end":{"line":115,"column":13}},"23":{"start":{"line":114,"column":16},"end":{"line":114,"column":23}},"24":{"start":{"line":117,"column":12},"end":{"line":117,"column":92}},"25":{"start":{"line":118,"column":12},"end":{"line":118,"column":68}},"26":{"start":{"line":119,"column":12},"end":{"line":119,"column":86}},"27":{"start":{"line":121,"column":12},"end":{"line":135,"column":13}},"28":{"start":{"line":122,"column":16},"end":{"line":127,"column":19}},"29":{"start":{"line":126,"column":34},"end":{"line":126,"column":94}},"30":{"start":{"line":128,"column":19},"end":{"line":135,"column":13}},"31":{"start":{"line":129,"column":16},"end":{"line":134,"column":19}},"32":{"start":{"line":133,"column":34},"end":{"line":133,"column":71}},"33":{"start":{"line":138,"column":8},"end":{"line":142,"column":10}}},"branchMap":{"1":{"line":55,"type":"cond-expr","locations":[{"start":{"line":55,"column":68},"end":{"line":55,"column":86}},{"start":{"line":55,"column":89},"end":{"line":55,"column":97}}]},"2":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":72},"end":{"line":56,"column":90}},{"start":{"line":56,"column":93},"end":{"line":56,"column":95}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":64,"column":12}},{"start":{"line":64,"column":12},"end":{"line":64,"column":12}}]},"4":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":19},"end":{"line":70,"column":53}},{"start":{"line":71,"column":17},"end":{"line":71,"column":43}},{"start":{"line":73,"column":24},"end":{"line":73,"column":45}},{"start":{"line":74,"column":24},"end":{"line":74,"column":45}},{"start":{"line":75,"column":24},"end":{"line":75,"column":37}}]},"5":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":12},"end":{"line":86,"column":12}},{"start":{"line":86,"column":12},"end":{"line":86,"column":12}}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":16},"end":{"line":89,"column":16}},{"start":{"line":89,"column":16},"end":{"line":89,"column":16}}]},"7":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":30}},{"start":{"line":89,"column":34},"end":{"line":89,"column":107}}]},"8":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":27},"end":{"line":92,"column":52}},{"start":{"line":92,"column":56},"end":{"line":92,"column":64}}]},"9":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":19},"end":{"line":94,"column":19}},{"start":{"line":94,"column":19},"end":{"line":94,"column":19}}]},"10":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":23},"end":{"line":95,"column":43}},{"start":{"line":95,"column":47},"end":{"line":95,"column":57}}]},"11":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":19},"end":{"line":98,"column":19}},{"start":{"line":98,"column":19},"end":{"line":98,"column":19}}]},"12":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":23},"end":{"line":99,"column":47}},{"start":{"line":99,"column":51},"end":{"line":99,"column":61}}]},"13":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":12},"end":{"line":113,"column":12}},{"start":{"line":113,"column":12},"end":{"line":113,"column":12}}]},"14":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":12},"end":{"line":121,"column":12}},{"start":{"line":121,"column":12},"end":{"line":121,"column":12}}]},"15":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":16},"end":{"line":121,"column":26}},{"start":{"line":121,"column":30},"end":{"line":121,"column":56}}]},"16":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":19},"end":{"line":128,"column":19}},{"start":{"line":128,"column":19},"end":{"line":128,"column":19}}]},"17":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":23},"end":{"line":128,"column":34}},{"start":{"line":128,"column":38},"end":{"line":128,"column":65}}]}},"code":["/**"," * @fileoverview Rule to validate spacing before function paren."," * @author Mathias Schreck <https://github.com/lo1tuma>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing before `function` definition opening parenthesis\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"always\", \"never\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            anonymous: {","                                enum: [\"always\", \"never\", \"ignore\"]","                            },","                            named: {","                                enum: [\"always\", \"never\", \"ignore\"]","                            },","                            asyncArrow: {","                                enum: [\"always\", \"never\", \"ignore\"]","                            }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        const baseConfig = typeof context.options[0] === \"string\" ? context.options[0] : \"always\";","        const overrideConfig = typeof context.options[0] === \"object\" ? context.options[0] : {};","","        /**","         * Determines whether a function has a name.","         * @param {ASTNode} node The function node.","         * @returns {boolean} Whether the function has a name.","         */","        function isNamedFunction(node) {","            if (node.id) {","                return true;","            }","","            const parent = node.parent;","","            return parent.type === \"MethodDefinition\" ||","                (parent.type === \"Property\" &&","                    (","                        parent.kind === \"get\" ||","                        parent.kind === \"set\" ||","                        parent.method","                    )","                );","        }","","        /**","         * Gets the config for a given function","         * @param {ASTNode} node The function node","         * @returns {string} \"always\", \"never\", or \"ignore\"","         */","        function getConfigForFunction(node) {","            if (node.type === \"ArrowFunctionExpression\") {","","                // Always ignore non-async functions and arrow functions without parens, e.g. async foo => bar","                if (node.async && astUtils.isOpeningParenToken(sourceCode.getFirstToken(node, { skip: 1 }))) {","","                    // For backwards compatibility, the base config does not apply to async arrow functions.","                    return overrideConfig.asyncArrow || \"ignore\";","                }","            } else if (isNamedFunction(node)) {","                return overrideConfig.named || baseConfig;","","            // `generator-star-spacing` should warn anonymous generators. E.g. `function* () {}`","            } else if (!node.generator) {","                return overrideConfig.anonymous || baseConfig;","            }","","            return \"ignore\";","        }","","        /**","         * Checks the parens of a function node","         * @param {ASTNode} node A function node","         * @returns {void}","         */","        function checkFunction(node) {","            const functionConfig = getConfigForFunction(node);","","            if (functionConfig === \"ignore\") {","                return;","            }","","            const rightToken = sourceCode.getFirstToken(node, astUtils.isOpeningParenToken);","            const leftToken = sourceCode.getTokenBefore(rightToken);","            const hasSpacing = sourceCode.isSpaceBetweenTokens(leftToken, rightToken);","","            if (hasSpacing && functionConfig === \"never\") {","                context.report({","                    node,","                    loc: leftToken.loc.end,","                    message: \"Unexpected space before function parentheses.\",","                    fix: fixer => fixer.removeRange([leftToken.range[1], rightToken.range[0]])","                });","            } else if (!hasSpacing && functionConfig === \"always\") {","                context.report({","                    node,","                    loc: leftToken.loc.end,","                    message: \"Missing space before function parentheses.\",","                    fix: fixer => fixer.insertTextAfter(leftToken, \" \")","                });","            }","        }","","        return {","            ArrowFunctionExpression: checkFunction,","            FunctionDeclaration: checkFunction,","            FunctionExpression: checkFunction","        };","    }","};",""],"l":{"11":1,"17":1,"54":0,"55":0,"56":0,"63":1,"64":0,"65":0,"68":0,"70":0,"85":1,"86":0,"89":0,"92":0,"94":0,"95":0,"98":0,"99":0,"102":0,"110":1,"111":0,"113":0,"114":0,"117":0,"118":0,"119":0,"121":0,"122":0,"126":0,"128":0,"129":0,"133":0,"138":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-in-parens.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-in-parens.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":20}}},"2":{"name":"getExceptions","line":66,"loc":{"start":{"line":66,"column":8},"end":{"line":66,"column":33}}},"3":{"name":"isOpenerException","line":106,"loc":{"start":{"line":106,"column":8},"end":{"line":106,"column":42}}},"4":{"name":"isCloserException","line":115,"loc":{"start":{"line":115,"column":8},"end":{"line":115,"column":42}}},"5":{"name":"shouldOpenerHaveSpace","line":125,"loc":{"start":{"line":125,"column":8},"end":{"line":125,"column":52}}},"6":{"name":"shouldCloserHaveSpace","line":146,"loc":{"start":{"line":146,"column":8},"end":{"line":146,"column":52}}},"7":{"name":"shouldOpenerRejectSpace","line":168,"loc":{"start":{"line":168,"column":8},"end":{"line":168,"column":54}}},"8":{"name":"shouldCloserRejectSpace","line":194,"loc":{"start":{"line":194,"column":8},"end":{"line":194,"column":54}}},"9":{"name":"checkParenSpaces","line":219,"loc":{"start":{"line":219,"column":21},"end":{"line":219,"column":53}}},"10":{"name":"(anonymous_10)","line":236,"loc":{"start":{"line":236,"column":31},"end":{"line":236,"column":39}}},"11":{"name":"(anonymous_11)","line":245,"loc":{"start":{"line":245,"column":31},"end":{"line":245,"column":39}}},"12":{"name":"(anonymous_12)","line":256,"loc":{"start":{"line":256,"column":31},"end":{"line":256,"column":39}}},"13":{"name":"(anonymous_13)","line":265,"loc":{"start":{"line":265,"column":31},"end":{"line":265,"column":39}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"2":{"start":{"line":13,"column":0},"end":{"line":275,"column":2}},"3":{"start":{"line":45,"column":8},"end":{"line":50,"column":25}},"4":{"start":{"line":51,"column":8},"end":{"line":51,"column":23}},"5":{"start":{"line":53,"column":8},"end":{"line":58,"column":9}},"6":{"start":{"line":54,"column":12},"end":{"line":54,"column":81}},"7":{"start":{"line":55,"column":12},"end":{"line":55,"column":83}},"8":{"start":{"line":56,"column":12},"end":{"line":56,"column":81}},"9":{"start":{"line":57,"column":12},"end":{"line":57,"column":75}},"10":{"start":{"line":66,"column":8},"end":{"line":94,"column":9}},"11":{"start":{"line":67,"column":12},"end":{"line":68,"column":29}},"12":{"start":{"line":70,"column":12},"end":{"line":73,"column":13}},"13":{"start":{"line":71,"column":16},"end":{"line":71,"column":34}},"14":{"start":{"line":72,"column":16},"end":{"line":72,"column":34}},"15":{"start":{"line":75,"column":12},"end":{"line":78,"column":13}},"16":{"start":{"line":76,"column":16},"end":{"line":76,"column":34}},"17":{"start":{"line":77,"column":16},"end":{"line":77,"column":34}},"18":{"start":{"line":80,"column":12},"end":{"line":83,"column":13}},"19":{"start":{"line":81,"column":16},"end":{"line":81,"column":34}},"20":{"start":{"line":82,"column":16},"end":{"line":82,"column":34}},"21":{"start":{"line":85,"column":12},"end":{"line":88,"column":13}},"22":{"start":{"line":86,"column":16},"end":{"line":86,"column":34}},"23":{"start":{"line":87,"column":16},"end":{"line":87,"column":34}},"24":{"start":{"line":90,"column":12},"end":{"line":93,"column":14}},"25":{"start":{"line":99,"column":8},"end":{"line":99,"column":51}},"26":{"start":{"line":106,"column":8},"end":{"line":108,"column":9}},"27":{"start":{"line":107,"column":12},"end":{"line":107,"column":95}},"28":{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},"29":{"start":{"line":116,"column":12},"end":{"line":116,"column":95}},"30":{"start":{"line":125,"column":8},"end":{"line":138,"column":9}},"31":{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},"32":{"start":{"line":127,"column":16},"end":{"line":127,"column":29}},"33":{"start":{"line":130,"column":12},"end":{"line":135,"column":13}},"34":{"start":{"line":131,"column":16},"end":{"line":133,"column":17}},"35":{"start":{"line":132,"column":20},"end":{"line":132,"column":33}},"36":{"start":{"line":134,"column":16},"end":{"line":134,"column":49}},"37":{"start":{"line":136,"column":12},"end":{"line":136,"column":44}},"38":{"start":{"line":146,"column":8},"end":{"line":160,"column":9}},"39":{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},"40":{"start":{"line":148,"column":16},"end":{"line":148,"column":29}},"41":{"start":{"line":151,"column":12},"end":{"line":153,"column":13}},"42":{"start":{"line":152,"column":16},"end":{"line":152,"column":29}},"43":{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},"44":{"start":{"line":156,"column":16},"end":{"line":156,"column":48}},"45":{"start":{"line":158,"column":12},"end":{"line":158,"column":43}},"46":{"start":{"line":168,"column":8},"end":{"line":186,"column":9}},"47":{"start":{"line":169,"column":12},"end":{"line":171,"column":13}},"48":{"start":{"line":170,"column":16},"end":{"line":170,"column":29}},"49":{"start":{"line":173,"column":12},"end":{"line":175,"column":13}},"50":{"start":{"line":174,"column":16},"end":{"line":174,"column":29}},"51":{"start":{"line":177,"column":12},"end":{"line":179,"column":13}},"52":{"start":{"line":178,"column":16},"end":{"line":178,"column":29}},"53":{"start":{"line":181,"column":12},"end":{"line":183,"column":13}},"54":{"start":{"line":182,"column":16},"end":{"line":182,"column":48}},"55":{"start":{"line":184,"column":12},"end":{"line":184,"column":45}},"56":{"start":{"line":194,"column":8},"end":{"line":212,"column":9}},"57":{"start":{"line":195,"column":12},"end":{"line":197,"column":13}},"58":{"start":{"line":196,"column":16},"end":{"line":196,"column":29}},"59":{"start":{"line":199,"column":12},"end":{"line":201,"column":13}},"60":{"start":{"line":200,"column":16},"end":{"line":200,"column":29}},"61":{"start":{"line":203,"column":12},"end":{"line":205,"column":13}},"62":{"start":{"line":204,"column":16},"end":{"line":204,"column":29}},"63":{"start":{"line":207,"column":12},"end":{"line":209,"column":13}},"64":{"start":{"line":208,"column":16},"end":{"line":208,"column":47}},"65":{"start":{"line":210,"column":12},"end":{"line":210,"column":44}},"66":{"start":{"line":218,"column":8},"end":{"line":272,"column":10}},"67":{"start":{"line":220,"column":16},"end":{"line":220,"column":45}},"68":{"start":{"line":221,"column":16},"end":{"line":221,"column":60}},"69":{"start":{"line":223,"column":16},"end":{"line":270,"column":19}},"70":{"start":{"line":224,"column":20},"end":{"line":224,"column":52}},"71":{"start":{"line":225,"column":20},"end":{"line":225,"column":52}},"72":{"start":{"line":227,"column":20},"end":{"line":229,"column":21}},"73":{"start":{"line":228,"column":24},"end":{"line":228,"column":31}},"74":{"start":{"line":231,"column":20},"end":{"line":269,"column":21}},"75":{"start":{"line":232,"column":24},"end":{"line":239,"column":27}},"76":{"start":{"line":237,"column":32},"end":{"line":237,"column":73}},"77":{"start":{"line":240,"column":27},"end":{"line":269,"column":21}},"78":{"start":{"line":241,"column":24},"end":{"line":248,"column":27}},"79":{"start":{"line":246,"column":32},"end":{"line":246,"column":95}},"80":{"start":{"line":249,"column":27},"end":{"line":269,"column":21}},"81":{"start":{"line":252,"column":24},"end":{"line":259,"column":27}},"82":{"start":{"line":257,"column":32},"end":{"line":257,"column":74}},"83":{"start":{"line":260,"column":27},"end":{"line":269,"column":21}},"84":{"start":{"line":261,"column":24},"end":{"line":268,"column":27}},"85":{"start":{"line":266,"column":32},"end":{"line":266,"column":95}}},"branchMap":{"1":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":70},"end":{"line":49,"column":99}},{"start":{"line":49,"column":102},"end":{"line":49,"column":104}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"3":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12}},{"start":{"line":70,"column":12},"end":{"line":70,"column":12}}]},"4":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":12},"end":{"line":75,"column":12}},{"start":{"line":75,"column":12},"end":{"line":75,"column":12}}]},"5":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":12},"end":{"line":80,"column":12}},{"start":{"line":80,"column":12},"end":{"line":80,"column":12}}]},"6":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":12},"end":{"line":85,"column":12}},{"start":{"line":85,"column":12},"end":{"line":85,"column":12}}]},"7":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":19},"end":{"line":107,"column":46}},{"start":{"line":107,"column":50},"end":{"line":107,"column":94}}]},"8":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":19},"end":{"line":116,"column":46}},{"start":{"line":116,"column":50},"end":{"line":116,"column":94}}]},"9":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":12}},{"start":{"line":126,"column":12},"end":{"line":126,"column":12}}]},"10":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":130,"column":12}},{"start":{"line":130,"column":12},"end":{"line":130,"column":12}}]},"11":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":16},"end":{"line":131,"column":16}},{"start":{"line":131,"column":16},"end":{"line":131,"column":16}}]},"12":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":12},"end":{"line":147,"column":12}},{"start":{"line":147,"column":12},"end":{"line":147,"column":12}}]},"13":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":12},"end":{"line":151,"column":12}},{"start":{"line":151,"column":12},"end":{"line":151,"column":12}}]},"14":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":12},"end":{"line":155,"column":12}},{"start":{"line":155,"column":12},"end":{"line":155,"column":12}}]},"15":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":169,"column":12}},{"start":{"line":169,"column":12},"end":{"line":169,"column":12}}]},"16":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":12},"end":{"line":173,"column":12}},{"start":{"line":173,"column":12},"end":{"line":173,"column":12}}]},"17":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":12},"end":{"line":177,"column":12}},{"start":{"line":177,"column":12},"end":{"line":177,"column":12}}]},"18":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":12},"end":{"line":181,"column":12}},{"start":{"line":181,"column":12},"end":{"line":181,"column":12}}]},"19":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":12},"end":{"line":195,"column":12}},{"start":{"line":195,"column":12},"end":{"line":195,"column":12}}]},"20":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":12},"end":{"line":199,"column":12}},{"start":{"line":199,"column":12},"end":{"line":199,"column":12}}]},"21":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":12},"end":{"line":203,"column":12}},{"start":{"line":203,"column":12},"end":{"line":203,"column":12}}]},"22":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":12},"end":{"line":207,"column":12}},{"start":{"line":207,"column":12},"end":{"line":207,"column":12}}]},"23":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":20},"end":{"line":227,"column":20}},{"start":{"line":227,"column":20},"end":{"line":227,"column":20}}]},"24":{"line":227,"type":"binary-expr","locations":[{"start":{"line":227,"column":24},"end":{"line":227,"column":60}},{"start":{"line":227,"column":64},"end":{"line":227,"column":100}}]},"25":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":20},"end":{"line":231,"column":20}},{"start":{"line":231,"column":20},"end":{"line":231,"column":20}}]},"26":{"line":231,"type":"binary-expr","locations":[{"start":{"line":231,"column":24},"end":{"line":231,"column":43}},{"start":{"line":231,"column":47},"end":{"line":231,"column":86}}]},"27":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":27},"end":{"line":240,"column":27}},{"start":{"line":240,"column":27},"end":{"line":240,"column":27}}]},"28":{"line":240,"type":"binary-expr","locations":[{"start":{"line":240,"column":31},"end":{"line":240,"column":50}},{"start":{"line":240,"column":54},"end":{"line":240,"column":95}}]},"29":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":27},"end":{"line":249,"column":27}},{"start":{"line":249,"column":27},"end":{"line":249,"column":27}}]},"30":{"line":249,"type":"binary-expr","locations":[{"start":{"line":249,"column":31},"end":{"line":249,"column":50}},{"start":{"line":249,"column":54},"end":{"line":249,"column":93}}]},"31":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":27},"end":{"line":260,"column":27}},{"start":{"line":260,"column":27},"end":{"line":260,"column":27}}]},"32":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":31},"end":{"line":260,"column":50}},{"start":{"line":260,"column":54},"end":{"line":260,"column":95}}]}},"code":["/**"," * @fileoverview Disallows or enforces spaces inside of parentheses."," * @author Jonathan Rajavuori"," */","\"use strict\";","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing inside parentheses\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                enum: [\"always\", \"never\"]","            },","            {","                type: \"object\",","                properties: {","                    exceptions: {","                        type: \"array\",","                        items: {","                            enum: [\"{}\", \"[]\", \"()\", \"empty\"]","                        },","                        uniqueItems: true","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const MISSING_SPACE_MESSAGE = \"There must be a space inside this paren.\",","            REJECTED_SPACE_MESSAGE = \"There should be no spaces inside this paren.\",","            ALWAYS = context.options[0] === \"always\",","","            exceptionsArrayOptions = (context.options.length === 2) ? context.options[1].exceptions : [],","            options = {};","        let exceptions;","","        if (exceptionsArrayOptions.length) {","            options.braceException = exceptionsArrayOptions.indexOf(\"{}\") !== -1;","            options.bracketException = exceptionsArrayOptions.indexOf(\"[]\") !== -1;","            options.parenException = exceptionsArrayOptions.indexOf(\"()\") !== -1;","            options.empty = exceptionsArrayOptions.indexOf(\"empty\") !== -1;","        }","","        /**","         * Produces an object with the opener and closer exception values","         * @param {Object} opts The exception options","         * @returns {Object} `openers` and `closers` exception values","         * @private","         */","        function getExceptions() {","            const openers = [],","                closers = [];","","            if (options.braceException) {","                openers.push(\"{\");","                closers.push(\"}\");","            }","","            if (options.bracketException) {","                openers.push(\"[\");","                closers.push(\"]\");","            }","","            if (options.parenException) {","                openers.push(\"(\");","                closers.push(\")\");","            }","","            if (options.empty) {","                openers.push(\")\");","                closers.push(\"(\");","            }","","            return {","                openers,","                closers","            };","        }","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","        const sourceCode = context.getSourceCode();","","        /**","         * Determines if a token is one of the exceptions for the opener paren","         * @param {Object} token The token to check","         * @returns {boolean} True if the token is one of the exceptions for the opener paren","         */","        function isOpenerException(token) {","            return token.type === \"Punctuator\" && exceptions.openers.indexOf(token.value) >= 0;","        }","","        /**","         * Determines if a token is one of the exceptions for the closer paren","         * @param {Object} token The token to check","         * @returns {boolean} True if the token is one of the exceptions for the closer paren","         */","        function isCloserException(token) {","            return token.type === \"Punctuator\" && exceptions.closers.indexOf(token.value) >= 0;","        }","","        /**","         * Determines if an opener paren should have a missing space after it","         * @param {Object} left The paren token","         * @param {Object} right The token after it","         * @returns {boolean} True if the paren should have a space","         */","        function shouldOpenerHaveSpace(left, right) {","            if (sourceCode.isSpaceBetweenTokens(left, right)) {","                return false;","            }","","            if (ALWAYS) {","                if (astUtils.isClosingParenToken(right)) {","                    return false;","                }","                return !isOpenerException(right);","            }","            return isOpenerException(right);","","        }","","        /**","         * Determines if an closer paren should have a missing space after it","         * @param {Object} left The token before the paren","         * @param {Object} right The paren token","         * @returns {boolean} True if the paren should have a space","         */","        function shouldCloserHaveSpace(left, right) {","            if (astUtils.isOpeningParenToken(left)) {","                return false;","            }","","            if (sourceCode.isSpaceBetweenTokens(left, right)) {","                return false;","            }","","            if (ALWAYS) {","                return !isCloserException(left);","            }","            return isCloserException(left);","","        }","","        /**","         * Determines if an opener paren should not have an existing space after it","         * @param {Object} left The paren token","         * @param {Object} right The token after it","         * @returns {boolean} True if the paren should reject the space","         */","        function shouldOpenerRejectSpace(left, right) {","            if (right.type === \"Line\") {","                return false;","            }","","            if (!astUtils.isTokenOnSameLine(left, right)) {","                return false;","            }","","            if (!sourceCode.isSpaceBetweenTokens(left, right)) {","                return false;","            }","","            if (ALWAYS) {","                return isOpenerException(right);","            }","            return !isOpenerException(right);","","        }","","        /**","         * Determines if an closer paren should not have an existing space after it","         * @param {Object} left The token before the paren","         * @param {Object} right The paren token","         * @returns {boolean} True if the paren should reject the space","         */","        function shouldCloserRejectSpace(left, right) {","            if (astUtils.isOpeningParenToken(left)) {","                return false;","            }","","            if (!astUtils.isTokenOnSameLine(left, right)) {","                return false;","            }","","            if (!sourceCode.isSpaceBetweenTokens(left, right)) {","                return false;","            }","","            if (ALWAYS) {","                return isCloserException(left);","            }","            return !isCloserException(left);","","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            Program: function checkParenSpaces(node) {","                exceptions = getExceptions();","                const tokens = sourceCode.tokensAndComments;","","                tokens.forEach((token, i) => {","                    const prevToken = tokens[i - 1];","                    const nextToken = tokens[i + 1];","","                    if (!astUtils.isOpeningParenToken(token) && !astUtils.isClosingParenToken(token)) {","                        return;","                    }","","                    if (token.value === \"(\" && shouldOpenerHaveSpace(token, nextToken)) {","                        context.report({","                            node,","                            loc: token.loc.start,","                            message: MISSING_SPACE_MESSAGE,","                            fix(fixer) {","                                return fixer.insertTextAfter(token, \" \");","                            }","                        });","                    } else if (token.value === \"(\" && shouldOpenerRejectSpace(token, nextToken)) {","                        context.report({","                            node,","                            loc: token.loc.start,","                            message: REJECTED_SPACE_MESSAGE,","                            fix(fixer) {","                                return fixer.removeRange([token.range[1], nextToken.range[0]]);","                            }","                        });","                    } else if (token.value === \")\" && shouldCloserHaveSpace(prevToken, token)) {","","                        // context.report(node, token.loc.start, MISSING_SPACE_MESSAGE);","                        context.report({","                            node,","                            loc: token.loc.start,","                            message: MISSING_SPACE_MESSAGE,","                            fix(fixer) {","                                return fixer.insertTextBefore(token, \" \");","                            }","                        });","                    } else if (token.value === \")\" && shouldCloserRejectSpace(prevToken, token)) {","                        context.report({","                            node,","                            loc: token.loc.start,","                            message: REJECTED_SPACE_MESSAGE,","                            fix(fixer) {","                                return fixer.removeRange([prevToken.range[1], token.range[0]]);","                            }","                        });","                    }","                });","            }","        };","","    }","};",""],"l":{"7":1,"13":1,"45":0,"51":0,"53":0,"54":0,"55":0,"56":0,"57":0,"66":1,"67":0,"70":0,"71":0,"72":0,"75":0,"76":0,"77":0,"80":0,"81":0,"82":0,"85":0,"86":0,"87":0,"90":0,"99":0,"106":1,"107":0,"115":1,"116":0,"125":1,"126":0,"127":0,"130":0,"131":0,"132":0,"134":0,"136":0,"146":1,"147":0,"148":0,"151":0,"152":0,"155":0,"156":0,"158":0,"168":1,"169":0,"170":0,"173":0,"174":0,"177":0,"178":0,"181":0,"182":0,"184":0,"194":1,"195":0,"196":0,"199":0,"200":0,"203":0,"204":0,"207":0,"208":0,"210":0,"218":0,"220":0,"221":0,"223":0,"224":0,"225":0,"227":0,"228":0,"231":0,"232":0,"237":0,"240":0,"241":0,"246":0,"249":0,"252":0,"257":0,"260":0,"261":0,"266":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-infix-ops.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-infix-ops.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":34,"loc":{"start":{"line":34,"column":10},"end":{"line":34,"column":20}}},"2":{"name":"getFirstNonSpacedToken","line":53,"loc":{"start":{"line":53,"column":8},"end":{"line":53,"column":53}}},"3":{"name":"report","line":77,"loc":{"start":{"line":77,"column":8},"end":{"line":77,"column":48}}},"4":{"name":"(anonymous_4)","line":82,"loc":{"start":{"line":82,"column":19},"end":{"line":82,"column":27}}},"5":{"name":"checkBinary","line":108,"loc":{"start":{"line":108,"column":8},"end":{"line":108,"column":35}}},"6":{"name":"checkConditional","line":128,"loc":{"start":{"line":128,"column":8},"end":{"line":128,"column":40}}},"7":{"name":"checkVar","line":145,"loc":{"start":{"line":145,"column":8},"end":{"line":145,"column":32}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":165,"column":2}},"2":{"start":{"line":35,"column":8},"end":{"line":35,"column":93}},"3":{"start":{"line":37,"column":8},"end":{"line":42,"column":10}},"4":{"start":{"line":44,"column":8},"end":{"line":44,"column":51}},"5":{"start":{"line":53,"column":8},"end":{"line":68,"column":9}},"6":{"start":{"line":54,"column":12},"end":{"line":54,"column":71}},"7":{"start":{"line":56,"column":12},"end":{"line":66,"column":13}},"8":{"start":{"line":57,"column":16},"end":{"line":57,"column":37}},"9":{"start":{"line":59,"column":16},"end":{"line":65,"column":17}},"10":{"start":{"line":64,"column":20},"end":{"line":64,"column":30}},"11":{"start":{"line":67,"column":12},"end":{"line":67,"column":24}},"12":{"start":{"line":77,"column":8},"end":{"line":100,"column":9}},"13":{"start":{"line":78,"column":12},"end":{"line":99,"column":15}},"14":{"start":{"line":83,"column":20},"end":{"line":83,"column":82}},"15":{"start":{"line":84,"column":20},"end":{"line":84,"column":78}},"16":{"start":{"line":85,"column":20},"end":{"line":85,"column":39}},"17":{"start":{"line":87,"column":20},"end":{"line":89,"column":21}},"18":{"start":{"line":88,"column":24},"end":{"line":88,"column":40}},"19":{"start":{"line":91,"column":20},"end":{"line":91,"column":52}},"20":{"start":{"line":93,"column":20},"end":{"line":95,"column":21}},"21":{"start":{"line":94,"column":24},"end":{"line":94,"column":41}},"22":{"start":{"line":97,"column":20},"end":{"line":97,"column":70}},"23":{"start":{"line":108,"column":8},"end":{"line":120,"column":9}},"24":{"start":{"line":109,"column":12},"end":{"line":111,"column":13}},"25":{"start":{"line":110,"column":16},"end":{"line":110,"column":23}},"26":{"start":{"line":113,"column":12},"end":{"line":113,"column":80}},"27":{"start":{"line":115,"column":12},"end":{"line":119,"column":13}},"28":{"start":{"line":116,"column":16},"end":{"line":118,"column":17}},"29":{"start":{"line":117,"column":20},"end":{"line":117,"column":48}},"30":{"start":{"line":128,"column":8},"end":{"line":137,"column":9}},"31":{"start":{"line":129,"column":12},"end":{"line":129,"column":96}},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":99}},"33":{"start":{"line":132,"column":12},"end":{"line":136,"column":13}},"34":{"start":{"line":133,"column":16},"end":{"line":133,"column":55}},"35":{"start":{"line":134,"column":19},"end":{"line":136,"column":13}},"36":{"start":{"line":135,"column":16},"end":{"line":135,"column":53}},"37":{"start":{"line":145,"column":8},"end":{"line":153,"column":9}},"38":{"start":{"line":146,"column":12},"end":{"line":152,"column":13}},"39":{"start":{"line":147,"column":16},"end":{"line":147,"column":81}},"40":{"start":{"line":149,"column":16},"end":{"line":151,"column":17}},"41":{"start":{"line":150,"column":20},"end":{"line":150,"column":48}},"42":{"start":{"line":155,"column":8},"end":{"line":162,"column":10}}},"branchMap":{"1":{"line":35,"type":"cond-expr","locations":[{"start":{"line":35,"column":47},"end":{"line":35,"column":84}},{"start":{"line":35,"column":87},"end":{"line":35,"column":92}}]},"2":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":16}},{"start":{"line":59,"column":16},"end":{"line":59,"column":16}}]},"3":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":21},"end":{"line":60,"column":45}},{"start":{"line":60,"column":49},"end":{"line":60,"column":70}},{"start":{"line":61,"column":20},"end":{"line":61,"column":52}},{"start":{"line":62,"column":21},"end":{"line":62,"column":58}},{"start":{"line":62,"column":62},"end":{"line":62,"column":99}}]},"4":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":20},"end":{"line":87,"column":20}},{"start":{"line":87,"column":20},"end":{"line":87,"column":20}}]},"5":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":20},"end":{"line":93,"column":20}},{"start":{"line":93,"column":20},"end":{"line":93,"column":20}}]},"6":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":12},"end":{"line":109,"column":12}},{"start":{"line":109,"column":12},"end":{"line":109,"column":12}}]},"7":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":12}},{"start":{"line":115,"column":12},"end":{"line":115,"column":12}}]},"8":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":16},"end":{"line":116,"column":16}},{"start":{"line":116,"column":16},"end":{"line":116,"column":16}}]},"9":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":22},"end":{"line":116,"column":31}},{"start":{"line":116,"column":35},"end":{"line":116,"column":79}}]},"10":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":132,"column":12}},{"start":{"line":132,"column":12},"end":{"line":132,"column":12}}]},"11":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":19},"end":{"line":134,"column":19}},{"start":{"line":134,"column":19},"end":{"line":134,"column":19}}]},"12":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":12},"end":{"line":146,"column":12}},{"start":{"line":146,"column":12},"end":{"line":146,"column":12}}]},"13":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":16},"end":{"line":149,"column":16}},{"start":{"line":149,"column":16},"end":{"line":149,"column":16}}]}},"code":["/**"," * @fileoverview Require spaces around infix operators"," * @author Michael Ficarra"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require spacing around infix operators\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    int32Hint: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const int32Hint = context.options[0] ? context.options[0].int32Hint === true : false;","","        const OPERATORS = [","            \"*\", \"/\", \"%\", \"+\", \"-\", \"<<\", \">>\", \">>>\", \"<\", \"<=\", \">\", \">=\", \"in\",","            \"instanceof\", \"==\", \"!=\", \"===\", \"!==\", \"&\", \"^\", \"|\", \"&&\", \"||\", \"=\",","            \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"&=\", \"^=\", \"|=\",","            \"?\", \":\", \",\", \"**\"","        ];","","        const sourceCode = context.getSourceCode();","","        /**","         * Returns the first token which violates the rule","         * @param {ASTNode} left - The left node of the main node","         * @param {ASTNode} right - The right node of the main node","         * @returns {Object} The violator token or null","         * @private","         */","        function getFirstNonSpacedToken(left, right) {","            const tokens = sourceCode.getTokensBetween(left, right, 1);","","            for (let i = 1, l = tokens.length - 1; i < l; ++i) {","                const op = tokens[i];","","                if (","                    (op.type === \"Punctuator\" || op.type === \"Keyword\") &&","                    OPERATORS.indexOf(op.value) >= 0 &&","                    (tokens[i - 1].range[1] >= op.range[0] || op.range[1] >= tokens[i + 1].range[0])","                ) {","                    return op;","                }","            }","            return null;","        }","","        /**","         * Reports an AST node as a rule violation","         * @param {ASTNode} mainNode - The node to report","         * @param {Object} culpritToken - The token which has a problem","         * @returns {void}","         * @private","         */","        function report(mainNode, culpritToken) {","            context.report({","                node: mainNode,","                loc: culpritToken.loc.start,","                message: \"Infix operators must be spaced.\",","                fix(fixer) {","                    const previousToken = sourceCode.getTokenBefore(culpritToken);","                    const afterToken = sourceCode.getTokenAfter(culpritToken);","                    let fixString = \"\";","","                    if (culpritToken.range[0] - previousToken.range[1] === 0) {","                        fixString = \" \";","                    }","","                    fixString += culpritToken.value;","","                    if (afterToken.range[0] - culpritToken.range[1] === 0) {","                        fixString += \" \";","                    }","","                    return fixer.replaceText(culpritToken, fixString);","                }","            });","        }","","        /**","         * Check if the node is binary then report","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkBinary(node) {","            if (node.left.typeAnnotation) {","                return;","            }","","            const nonSpacedNode = getFirstNonSpacedToken(node.left, node.right);","","            if (nonSpacedNode) {","                if (!(int32Hint && sourceCode.getText(node).substr(-2) === \"|0\")) {","                    report(node, nonSpacedNode);","                }","            }","        }","","        /**","         * Check if the node is conditional","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkConditional(node) {","            const nonSpacedConsequesntNode = getFirstNonSpacedToken(node.test, node.consequent);","            const nonSpacedAlternateNode = getFirstNonSpacedToken(node.consequent, node.alternate);","","            if (nonSpacedConsequesntNode) {","                report(node, nonSpacedConsequesntNode);","            } else if (nonSpacedAlternateNode) {","                report(node, nonSpacedAlternateNode);","            }","        }","","        /**","         * Check if the node is a variable","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkVar(node) {","            if (node.init) {","                const nonSpacedNode = getFirstNonSpacedToken(node.id, node.init);","","                if (nonSpacedNode) {","                    report(node, nonSpacedNode);","                }","            }","        }","","        return {","            AssignmentExpression: checkBinary,","            AssignmentPattern: checkBinary,","            BinaryExpression: checkBinary,","            LogicalExpression: checkBinary,","            ConditionalExpression: checkConditional,","            VariableDeclarator: checkVar","        };","","    }","};",""],"l":{"11":1,"35":0,"37":0,"44":0,"53":1,"54":0,"56":0,"57":0,"59":0,"64":0,"67":0,"77":1,"78":0,"83":0,"84":0,"85":0,"87":0,"88":0,"91":0,"93":0,"94":0,"97":0,"108":1,"109":0,"110":0,"113":0,"115":0,"116":0,"117":0,"128":1,"129":0,"130":0,"132":0,"133":0,"134":0,"135":0,"145":1,"146":0,"147":0,"149":0,"150":0,"155":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-unary-ops.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/space-unary-ops.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0},"b":{"1":[0,0,0,0],"2":[0,0,0,0,0,0],"3":[0,0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":20}}},"2":{"name":"isFirstBangInBangBangExpression","line":57,"loc":{"start":{"line":57,"column":8},"end":{"line":57,"column":55}}},"3":{"name":"isArgumentObjectExpression","line":67,"loc":{"start":{"line":67,"column":8},"end":{"line":67,"column":50}}},"4":{"name":"canRemoveSpacesBetween","line":79,"loc":{"start":{"line":79,"column":8},"end":{"line":79,"column":65}}},"5":{"name":"overrideExistsForOperator","line":92,"loc":{"start":{"line":92,"column":8},"end":{"line":92,"column":59}}},"6":{"name":"overrideEnforcesSpaces","line":102,"loc":{"start":{"line":102,"column":8},"end":{"line":102,"column":56}}},"7":{"name":"verifyWordHasSpaces","line":114,"loc":{"start":{"line":114,"column":8},"end":{"line":114,"column":74}}},"8":{"name":"(anonymous_8)","line":122,"loc":{"start":{"line":122,"column":23},"end":{"line":122,"column":31}}},"9":{"name":"verifyWordDoesntHaveSpaces","line":137,"loc":{"start":{"line":137,"column":8},"end":{"line":137,"column":81}}},"10":{"name":"(anonymous_10)","line":146,"loc":{"start":{"line":146,"column":27},"end":{"line":146,"column":35}}},"11":{"name":"checkUnaryWordOperatorForSpaces","line":162,"loc":{"start":{"line":162,"column":8},"end":{"line":162,"column":86}}},"12":{"name":"checkForSpacesAfterYield","line":183,"loc":{"start":{"line":183,"column":8},"end":{"line":183,"column":48}}},"13":{"name":"checkForSpacesAfterAwait","line":199,"loc":{"start":{"line":199,"column":8},"end":{"line":199,"column":48}}},"14":{"name":"verifyNonWordsHaveSpaces","line":212,"loc":{"start":{"line":212,"column":8},"end":{"line":212,"column":73}}},"15":{"name":"(anonymous_15)","line":224,"loc":{"start":{"line":224,"column":27},"end":{"line":224,"column":35}}},"16":{"name":"(anonymous_16)","line":237,"loc":{"start":{"line":237,"column":27},"end":{"line":237,"column":35}}},"17":{"name":"verifyNonWordsDontHaveSpaces","line":252,"loc":{"start":{"line":252,"column":8},"end":{"line":252,"column":77}}},"18":{"name":"(anonymous_18)","line":261,"loc":{"start":{"line":261,"column":27},"end":{"line":261,"column":35}}},"19":{"name":"(anonymous_19)","line":277,"loc":{"start":{"line":277,"column":27},"end":{"line":277,"column":35}}},"20":{"name":"checkForSpaces","line":290,"loc":{"start":{"line":290,"column":8},"end":{"line":290,"column":38}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":328,"column":2}},"2":{"start":{"line":44,"column":8},"end":{"line":44,"column":132}},"3":{"start":{"line":46,"column":8},"end":{"line":46,"column":51}},"4":{"start":{"line":57,"column":8},"end":{"line":60,"column":9}},"5":{"start":{"line":58,"column":12},"end":{"line":59,"column":108}},"6":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"7":{"start":{"line":68,"column":12},"end":{"line":68,"column":100}},"8":{"start":{"line":79,"column":8},"end":{"line":84,"column":9}},"9":{"start":{"line":80,"column":12},"end":{"line":83,"column":14}},"10":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"11":{"start":{"line":93,"column":12},"end":{"line":93,"column":83}},"12":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"13":{"start":{"line":103,"column":12},"end":{"line":103,"column":47}},"14":{"start":{"line":114,"column":8},"end":{"line":127,"column":9}},"15":{"start":{"line":115,"column":12},"end":{"line":126,"column":13}},"16":{"start":{"line":116,"column":16},"end":{"line":125,"column":19}},"17":{"start":{"line":123,"column":24},"end":{"line":123,"column":70}},"18":{"start":{"line":137,"column":8},"end":{"line":152,"column":9}},"19":{"start":{"line":138,"column":12},"end":{"line":151,"column":13}},"20":{"start":{"line":139,"column":16},"end":{"line":150,"column":17}},"21":{"start":{"line":140,"column":20},"end":{"line":149,"column":23}},"22":{"start":{"line":147,"column":28},"end":{"line":147,"column":98}},"23":{"start":{"line":162,"column":8},"end":{"line":176,"column":9}},"24":{"start":{"line":163,"column":12},"end":{"line":163,"column":44}},"25":{"start":{"line":165,"column":12},"end":{"line":175,"column":13}},"26":{"start":{"line":166,"column":16},"end":{"line":170,"column":17}},"27":{"start":{"line":167,"column":20},"end":{"line":167,"column":77}},"28":{"start":{"line":169,"column":20},"end":{"line":169,"column":84}},"29":{"start":{"line":171,"column":19},"end":{"line":175,"column":13}},"30":{"start":{"line":172,"column":16},"end":{"line":172,"column":73}},"31":{"start":{"line":174,"column":16},"end":{"line":174,"column":80}},"32":{"start":{"line":183,"column":8},"end":{"line":192,"column":9}},"33":{"start":{"line":184,"column":12},"end":{"line":185,"column":31}},"34":{"start":{"line":187,"column":12},"end":{"line":189,"column":13}},"35":{"start":{"line":188,"column":16},"end":{"line":188,"column":23}},"36":{"start":{"line":191,"column":12},"end":{"line":191,"column":78}},"37":{"start":{"line":199,"column":8},"end":{"line":203,"column":9}},"38":{"start":{"line":200,"column":12},"end":{"line":200,"column":62}},"39":{"start":{"line":202,"column":12},"end":{"line":202,"column":81}},"40":{"start":{"line":212,"column":8},"end":{"line":243,"column":9}},"41":{"start":{"line":213,"column":12},"end":{"line":242,"column":13}},"42":{"start":{"line":214,"column":16},"end":{"line":216,"column":17}},"43":{"start":{"line":215,"column":20},"end":{"line":215,"column":27}},"44":{"start":{"line":217,"column":16},"end":{"line":228,"column":17}},"45":{"start":{"line":218,"column":20},"end":{"line":227,"column":23}},"46":{"start":{"line":225,"column":28},"end":{"line":225,"column":74}},"47":{"start":{"line":230,"column":16},"end":{"line":241,"column":17}},"48":{"start":{"line":231,"column":20},"end":{"line":240,"column":23}},"49":{"start":{"line":238,"column":28},"end":{"line":238,"column":76}},"50":{"start":{"line":252,"column":8},"end":{"line":283,"column":9}},"51":{"start":{"line":253,"column":12},"end":{"line":282,"column":13}},"52":{"start":{"line":254,"column":16},"end":{"line":268,"column":17}},"53":{"start":{"line":255,"column":20},"end":{"line":267,"column":23}},"54":{"start":{"line":262,"column":28},"end":{"line":264,"column":29}},"55":{"start":{"line":263,"column":32},"end":{"line":263,"column":102}},"56":{"start":{"line":265,"column":28},"end":{"line":265,"column":40}},"57":{"start":{"line":270,"column":16},"end":{"line":281,"column":17}},"58":{"start":{"line":271,"column":20},"end":{"line":280,"column":23}},"59":{"start":{"line":278,"column":28},"end":{"line":278,"column":98}},"60":{"start":{"line":290,"column":8},"end":{"line":313,"column":9}},"61":{"start":{"line":291,"column":12},"end":{"line":293,"column":40}},"62":{"start":{"line":295,"column":12},"end":{"line":298,"column":13}},"63":{"start":{"line":296,"column":16},"end":{"line":296,"column":79}},"64":{"start":{"line":297,"column":16},"end":{"line":297,"column":23}},"65":{"start":{"line":300,"column":12},"end":{"line":300,"column":77}},"66":{"start":{"line":302,"column":12},"end":{"line":312,"column":13}},"67":{"start":{"line":303,"column":16},"end":{"line":307,"column":17}},"68":{"start":{"line":304,"column":20},"end":{"line":304,"column":76}},"69":{"start":{"line":306,"column":20},"end":{"line":306,"column":80}},"70":{"start":{"line":308,"column":19},"end":{"line":312,"column":13}},"71":{"start":{"line":309,"column":16},"end":{"line":309,"column":72}},"72":{"start":{"line":311,"column":16},"end":{"line":311,"column":76}},"73":{"start":{"line":319,"column":8},"end":{"line":325,"column":10}}},"branchMap":{"1":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":24},"end":{"line":44,"column":39}},{"start":{"line":44,"column":43},"end":{"line":44,"column":73}},{"start":{"line":44,"column":77},"end":{"line":44,"column":95}},{"start":{"line":44,"column":99},"end":{"line":44,"column":131}}]},"2":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":19},"end":{"line":58,"column":23}},{"start":{"line":58,"column":27},"end":{"line":58,"column":58}},{"start":{"line":58,"column":62},"end":{"line":58,"column":92}},{"start":{"line":59,"column":16},"end":{"line":59,"column":29}},{"start":{"line":59,"column":33},"end":{"line":59,"column":73}},{"start":{"line":59,"column":77},"end":{"line":59,"column":107}}]},"3":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":19},"end":{"line":68,"column":32}},{"start":{"line":68,"column":36},"end":{"line":68,"column":54}},{"start":{"line":68,"column":58},"end":{"line":68,"column":99}}]},"4":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":17},"end":{"line":81,"column":41}},{"start":{"line":81,"column":45},"end":{"line":81,"column":73}},{"start":{"line":82,"column":17},"end":{"line":82,"column":41}},{"start":{"line":82,"column":45},"end":{"line":82,"column":73}}]},"5":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":19},"end":{"line":93,"column":36}},{"start":{"line":93,"column":40},"end":{"line":93,"column":82}}]},"6":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":12}},{"start":{"line":115,"column":12},"end":{"line":115,"column":12}}]},"7":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":12},"end":{"line":138,"column":12}},{"start":{"line":138,"column":12},"end":{"line":138,"column":12}}]},"8":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":16},"end":{"line":139,"column":16}},{"start":{"line":139,"column":16},"end":{"line":139,"column":16}}]},"9":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":19},"end":{"line":163,"column":23}},{"start":{"line":163,"column":27},"end":{"line":163,"column":43}}]},"10":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":165,"column":12}},{"start":{"line":165,"column":12},"end":{"line":165,"column":12}}]},"11":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":16},"end":{"line":166,"column":16}},{"start":{"line":166,"column":16},"end":{"line":166,"column":16}}]},"12":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":19},"end":{"line":171,"column":19}},{"start":{"line":171,"column":19},"end":{"line":171,"column":19}}]},"13":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":12},"end":{"line":187,"column":12}},{"start":{"line":187,"column":12},"end":{"line":187,"column":12}}]},"14":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":16},"end":{"line":187,"column":30}},{"start":{"line":187,"column":34},"end":{"line":187,"column":47}}]},"15":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":12},"end":{"line":213,"column":12}},{"start":{"line":213,"column":12},"end":{"line":213,"column":12}}]},"16":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":16},"end":{"line":214,"column":16}},{"start":{"line":214,"column":16},"end":{"line":214,"column":16}}]},"17":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":16},"end":{"line":217,"column":16}},{"start":{"line":217,"column":16},"end":{"line":217,"column":16}}]},"18":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":16},"end":{"line":230,"column":16}},{"start":{"line":230,"column":16},"end":{"line":230,"column":16}}]},"19":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":12},"end":{"line":253,"column":12}},{"start":{"line":253,"column":12},"end":{"line":253,"column":12}}]},"20":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":16},"end":{"line":254,"column":16}},{"start":{"line":254,"column":16},"end":{"line":254,"column":16}}]},"21":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":28},"end":{"line":262,"column":28}},{"start":{"line":262,"column":28},"end":{"line":262,"column":28}}]},"22":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":16},"end":{"line":270,"column":16}},{"start":{"line":270,"column":16},"end":{"line":270,"column":16}}]},"23":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":12}},{"start":{"line":295,"column":12},"end":{"line":295,"column":12}}]},"24":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":17},"end":{"line":295,"column":46}},{"start":{"line":295,"column":50},"end":{"line":295,"column":61}},{"start":{"line":295,"column":66},"end":{"line":295,"column":95}}]},"25":{"line":300,"type":"cond-expr","locations":[{"start":{"line":300,"column":43},"end":{"line":300,"column":58}},{"start":{"line":300,"column":61},"end":{"line":300,"column":76}}]},"26":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":12},"end":{"line":302,"column":12}},{"start":{"line":302,"column":12},"end":{"line":302,"column":12}}]},"27":{"line":303,"type":"if","locations":[{"start":{"line":303,"column":16},"end":{"line":303,"column":16}},{"start":{"line":303,"column":16},"end":{"line":303,"column":16}}]},"28":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":19},"end":{"line":308,"column":19}},{"start":{"line":308,"column":19},"end":{"line":308,"column":19}}]}},"code":["/**"," * @fileoverview This rule shoud require or disallow spaces before or after unary operations."," * @author Marcin Kumorek"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing before or after unary operators\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                type: \"object\",","                properties: {","                    words: {","                        type: \"boolean\"","                    },","                    nonwords: {","                        type: \"boolean\"","                    },","                    overrides: {","                        type: \"object\",","                        additionalProperties: {","                            type: \"boolean\"","                        }","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","        const options = context.options && Array.isArray(context.options) && context.options[0] || { words: true, nonwords: false };","","        const sourceCode = context.getSourceCode();","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","        * Check if the node is the first \"!\" in a \"!!\" convert to Boolean expression","        * @param {ASTnode} node AST node","        * @returns {boolean} Whether or not the node is first \"!\" in \"!!\"","        */","        function isFirstBangInBangBangExpression(node) {","            return node && node.type === \"UnaryExpression\" && node.argument.operator === \"!\" &&","                node.argument && node.argument.type === \"UnaryExpression\" && node.argument.operator === \"!\";","        }","","        /**","        * Check if the node's child argument is an \"ObjectExpression\"","        * @param {ASTnode} node AST node","        * @returns {boolean} Whether or not the argument's type is \"ObjectExpression\"","        */","        function isArgumentObjectExpression(node) {","            return node.argument && node.argument.type && node.argument.type === \"ObjectExpression\";","        }","","        /**","         * Check if it is safe to remove the spaces between the two tokens in","         * the context of a non-word prefix unary operator. For example, `+ +1`","         * cannot safely be changed to `++1`.","         * @param {Token} firstToken The operator for a non-word prefix unary operator","         * @param {Token} secondToken The first token of its operand","         * @returns {boolean} Whether or not the spacing between the tokens can be removed","         */","        function canRemoveSpacesBetween(firstToken, secondToken) {","            return !(","                (firstToken.value === \"+\" && secondToken.value[0] === \"+\") ||","                (firstToken.value === \"-\" && secondToken.value[0] === \"-\")","            );","        }","","        /**","        * Checks if an override exists for a given operator.","        * @param {ASTnode} node AST node","        * @param {string} operator Operator","        * @returns {boolean} Whether or not an override has been provided for the operator","        */","        function overrideExistsForOperator(node, operator) {","            return options.overrides && options.overrides.hasOwnProperty(operator);","        }","","        /**","        * Gets the value that the override was set to for this operator","        * @param {ASTnode} node AST node","        * @param {string} operator Operator","        * @returns {boolean} Whether or not an override enforces a space with this operator","        */","        function overrideEnforcesSpaces(node, operator) {","            return options.overrides[operator];","        }","","        /**","        * Verify Unary Word Operator has spaces after the word operator","        * @param {ASTnode} node AST node","        * @param {Object} firstToken first token from the AST node","        * @param {Object} secondToken second token from the AST node","        * @param {string} word The word to be used for reporting","        * @returns {void}","        */","        function verifyWordHasSpaces(node, firstToken, secondToken, word) {","            if (secondToken.range[0] === firstToken.range[1]) {","                context.report({","                    node,","                    message: \"Unary word operator '{{word}}' must be followed by whitespace.\",","                    data: {","                        word","                    },","                    fix(fixer) {","                        return fixer.insertTextAfter(firstToken, \" \");","                    }","                });","            }","        }","","        /**","        * Verify Unary Word Operator doesn't have spaces after the word operator","        * @param {ASTnode} node AST node","        * @param {Object} firstToken first token from the AST node","        * @param {Object} secondToken second token from the AST node","        * @param {string} word The word to be used for reporting","        * @returns {void}","        */","        function verifyWordDoesntHaveSpaces(node, firstToken, secondToken, word) {","            if (isArgumentObjectExpression(node)) {","                if (secondToken.range[0] > firstToken.range[1]) {","                    context.report({","                        node,","                        message: \"Unexpected space after unary word operator '{{word}}'.\",","                        data: {","                            word","                        },","                        fix(fixer) {","                            return fixer.removeRange([firstToken.range[1], secondToken.range[0]]);","                        }","                    });","                }","            }","        }","","        /**","        * Check Unary Word Operators for spaces after the word operator","        * @param {ASTnode} node AST node","        * @param {Object} firstToken first token from the AST node","        * @param {Object} secondToken second token from the AST node","        * @param {string} word The word to be used for reporting","        * @returns {void}","        */","        function checkUnaryWordOperatorForSpaces(node, firstToken, secondToken, word) {","            word = word || firstToken.value;","","            if (overrideExistsForOperator(node, word)) {","                if (overrideEnforcesSpaces(node, word)) {","                    verifyWordHasSpaces(node, firstToken, secondToken, word);","                } else {","                    verifyWordDoesntHaveSpaces(node, firstToken, secondToken, word);","                }","            } else if (options.words) {","                verifyWordHasSpaces(node, firstToken, secondToken, word);","            } else {","                verifyWordDoesntHaveSpaces(node, firstToken, secondToken, word);","            }","        }","","        /**","        * Verifies YieldExpressions satisfy spacing requirements","        * @param {ASTnode} node AST node","        * @returns {void}","        */","        function checkForSpacesAfterYield(node) {","            const tokens = sourceCode.getFirstTokens(node, 3),","                word = \"yield\";","","            if (!node.argument || node.delegate) {","                return;","            }","","            checkUnaryWordOperatorForSpaces(node, tokens[0], tokens[1], word);","        }","","        /**","        * Verifies AwaitExpressions satisfy spacing requirements","        * @param {ASTNode} node AwaitExpression AST node","        * @returns {void}","        */","        function checkForSpacesAfterAwait(node) {","            const tokens = sourceCode.getFirstTokens(node, 3);","","            checkUnaryWordOperatorForSpaces(node, tokens[0], tokens[1], \"await\");","        }","","        /**","        * Verifies UnaryExpression, UpdateExpression and NewExpression have spaces before or after the operator","        * @param {ASTnode} node AST node","        * @param {Object} firstToken First token in the expression","        * @param {Object} secondToken Second token in the expression","        * @returns {void}","        */","        function verifyNonWordsHaveSpaces(node, firstToken, secondToken) {","            if (node.prefix) {","                if (isFirstBangInBangBangExpression(node)) {","                    return;","                }","                if (firstToken.range[1] === secondToken.range[0]) {","                    context.report({","                        node,","                        message: \"Unary operator '{{operator}}' must be followed by whitespace.\",","                        data: {","                            operator: firstToken.value","                        },","                        fix(fixer) {","                            return fixer.insertTextAfter(firstToken, \" \");","                        }","                    });","                }","            } else {","                if (firstToken.range[1] === secondToken.range[0]) {","                    context.report({","                        node,","                        message: \"Space is required before unary expressions '{{token}}'.\",","                        data: {","                            token: secondToken.value","                        },","                        fix(fixer) {","                            return fixer.insertTextBefore(secondToken, \" \");","                        }","                    });","                }","            }","        }","","        /**","        * Verifies UnaryExpression, UpdateExpression and NewExpression don't have spaces before or after the operator","        * @param {ASTnode} node AST node","        * @param {Object} firstToken First token in the expression","        * @param {Object} secondToken Second token in the expression","        * @returns {void}","        */","        function verifyNonWordsDontHaveSpaces(node, firstToken, secondToken) {","            if (node.prefix) {","                if (secondToken.range[0] > firstToken.range[1]) {","                    context.report({","                        node,","                        message: \"Unexpected space after unary operator '{{operator}}'.\",","                        data: {","                            operator: firstToken.value","                        },","                        fix(fixer) {","                            if (canRemoveSpacesBetween(firstToken, secondToken)) {","                                return fixer.removeRange([firstToken.range[1], secondToken.range[0]]);","                            }","                            return null;","                        }","                    });","                }","            } else {","                if (secondToken.range[0] > firstToken.range[1]) {","                    context.report({","                        node,","                        message: \"Unexpected space before unary operator '{{operator}}'.\",","                        data: {","                            operator: secondToken.value","                        },","                        fix(fixer) {","                            return fixer.removeRange([firstToken.range[1], secondToken.range[0]]);","                        }","                    });","                }","            }","        }","","        /**","        * Verifies UnaryExpression, UpdateExpression and NewExpression satisfy spacing requirements","        * @param {ASTnode} node AST node","        * @returns {void}","        */","        function checkForSpaces(node) {","            const tokens = sourceCode.getFirstTokens(node, 2),","                firstToken = tokens[0],","                secondToken = tokens[1];","","            if ((node.type === \"NewExpression\" || node.prefix) && firstToken.type === \"Keyword\") {","                checkUnaryWordOperatorForSpaces(node, firstToken, secondToken);","                return;","            }","","            const operator = node.prefix ? tokens[0].value : tokens[1].value;","","            if (overrideExistsForOperator(node, operator)) {","                if (overrideEnforcesSpaces(node, operator)) {","                    verifyNonWordsHaveSpaces(node, firstToken, secondToken);","                } else {","                    verifyNonWordsDontHaveSpaces(node, firstToken, secondToken);","                }","            } else if (options.nonwords) {","                verifyNonWordsHaveSpaces(node, firstToken, secondToken);","            } else {","                verifyNonWordsDontHaveSpaces(node, firstToken, secondToken);","            }","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            UnaryExpression: checkForSpaces,","            UpdateExpression: checkForSpaces,","            NewExpression: checkForSpaces,","            YieldExpression: checkForSpacesAfterYield,","            AwaitExpression: checkForSpacesAfterAwait","        };","","    }","};",""],"l":{"11":1,"44":0,"46":0,"57":1,"58":0,"67":1,"68":0,"79":1,"80":0,"92":1,"93":0,"102":1,"103":0,"114":1,"115":0,"116":0,"123":0,"137":1,"138":0,"139":0,"140":0,"147":0,"162":1,"163":0,"165":0,"166":0,"167":0,"169":0,"171":0,"172":0,"174":0,"183":1,"184":0,"187":0,"188":0,"191":0,"199":1,"200":0,"202":0,"212":1,"213":0,"214":0,"215":0,"217":0,"218":0,"225":0,"230":0,"231":0,"238":0,"252":1,"253":0,"254":0,"255":0,"262":0,"263":0,"265":0,"270":0,"271":0,"278":0,"290":1,"291":0,"295":0,"296":0,"297":0,"300":0,"302":0,"303":0,"304":0,"306":0,"308":0,"309":0,"311":0,"319":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/spaced-comment.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/spaced-comment.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"escape","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":19}}},"2":{"name":"escapeAndRepeat","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":28}}},"3":{"name":"parseMarkersOption","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":37}}},"4":{"name":"createExceptionsPattern","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":45}}},"5":{"name":"createAlwaysStylePattern","line":109,"loc":{"start":{"line":109,"column":0},"end":{"line":109,"column":55}}},"6":{"name":"createNeverStylePattern","line":146,"loc":{"start":{"line":146,"column":0},"end":{"line":146,"column":42}}},"7":{"name":"(anonymous_7)","line":230,"loc":{"start":{"line":230,"column":10},"end":{"line":230,"column":20}}},"8":{"name":"reportBegin","line":267,"loc":{"start":{"line":267,"column":8},"end":{"line":267,"column":60}}},"9":{"name":"(anonymous_9)","line":273,"loc":{"start":{"line":273,"column":19},"end":{"line":273,"column":27}}},"10":{"name":"reportEnd","line":299,"loc":{"start":{"line":299,"column":8},"end":{"line":299,"column":49}}},"11":{"name":"(anonymous_11)","line":302,"loc":{"start":{"line":302,"column":19},"end":{"line":302,"column":27}}},"12":{"name":"checkCommentForSpace","line":321,"loc":{"start":{"line":321,"column":8},"end":{"line":321,"column":44}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":33}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"3":{"start":{"line":19,"column":0},"end":{"line":24,"column":1}},"4":{"start":{"line":20,"column":4},"end":{"line":20,"column":37}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":31}},"6":{"start":{"line":23,"column":4},"end":{"line":23,"column":38}},"7":{"start":{"line":32,"column":0},"end":{"line":34,"column":1}},"8":{"start":{"line":33,"column":4},"end":{"line":33,"column":27}},"9":{"start":{"line":42,"column":0},"end":{"line":51,"column":1}},"10":{"start":{"line":43,"column":4},"end":{"line":43,"column":46}},"11":{"start":{"line":46,"column":4},"end":{"line":48,"column":5}},"12":{"start":{"line":47,"column":8},"end":{"line":47,"column":26}},"13":{"start":{"line":50,"column":4},"end":{"line":50,"column":19}},"14":{"start":{"line":62,"column":0},"end":{"line":96,"column":1}},"15":{"start":{"line":63,"column":4},"end":{"line":63,"column":21}},"16":{"start":{"line":72,"column":4},"end":{"line":93,"column":5}},"17":{"start":{"line":75,"column":8},"end":{"line":75,"column":25}},"18":{"start":{"line":79,"column":8},"end":{"line":79,"column":29}},"19":{"start":{"line":81,"column":8},"end":{"line":91,"column":9}},"20":{"start":{"line":84,"column":12},"end":{"line":84,"column":54}},"21":{"start":{"line":88,"column":12},"end":{"line":88,"column":29}},"22":{"start":{"line":89,"column":12},"end":{"line":89,"column":65}},"23":{"start":{"line":90,"column":12},"end":{"line":90,"column":27}},"24":{"start":{"line":92,"column":8},"end":{"line":92,"column":74}},"25":{"start":{"line":95,"column":4},"end":{"line":95,"column":19}},"26":{"start":{"line":109,"column":0},"end":{"line":134,"column":1}},"27":{"start":{"line":110,"column":4},"end":{"line":110,"column":22}},"28":{"start":{"line":118,"column":4},"end":{"line":128,"column":5}},"29":{"start":{"line":121,"column":8},"end":{"line":121,"column":38}},"30":{"start":{"line":125,"column":8},"end":{"line":125,"column":25}},"31":{"start":{"line":126,"column":8},"end":{"line":126,"column":49}},"32":{"start":{"line":127,"column":8},"end":{"line":127,"column":23}},"33":{"start":{"line":130,"column":4},"end":{"line":130,"column":19}},"34":{"start":{"line":131,"column":4},"end":{"line":131,"column":51}},"35":{"start":{"line":133,"column":4},"end":{"line":133,"column":31}},"36":{"start":{"line":146,"column":0},"end":{"line":150,"column":1}},"37":{"start":{"line":147,"column":4},"end":{"line":147,"column":65}},"38":{"start":{"line":149,"column":4},"end":{"line":149,"column":31}},"39":{"start":{"line":156,"column":0},"end":{"line":372,"column":2}},"40":{"start":{"line":233,"column":8},"end":{"line":233,"column":60}},"41":{"start":{"line":240,"column":8},"end":{"line":240,"column":48}},"42":{"start":{"line":241,"column":8},"end":{"line":241,"column":63}},"43":{"start":{"line":243,"column":8},"end":{"line":257,"column":15}},"44":{"start":{"line":244,"column":12},"end":{"line":244,"column":103}},"45":{"start":{"line":245,"column":12},"end":{"line":245,"column":98}},"46":{"start":{"line":246,"column":12},"end":{"line":246,"column":46}},"47":{"start":{"line":249,"column":12},"end":{"line":254,"column":14}},"48":{"start":{"line":256,"column":12},"end":{"line":256,"column":24}},"49":{"start":{"line":267,"column":8},"end":{"line":290,"column":9}},"50":{"start":{"line":268,"column":12},"end":{"line":269,"column":67}},"51":{"start":{"line":271,"column":12},"end":{"line":289,"column":15}},"52":{"start":{"line":274,"column":20},"end":{"line":274,"column":48}},"53":{"start":{"line":275,"column":20},"end":{"line":275,"column":40}},"54":{"start":{"line":277,"column":20},"end":{"line":282,"column":21}},"55":{"start":{"line":278,"column":24},"end":{"line":280,"column":25}},"56":{"start":{"line":279,"column":28},"end":{"line":279,"column":51}},"57":{"start":{"line":281,"column":24},"end":{"line":281,"column":77}},"58":{"start":{"line":283,"column":20},"end":{"line":283,"column":43}},"59":{"start":{"line":284,"column":20},"end":{"line":284,"column":112}},"60":{"start":{"line":299,"column":8},"end":{"line":314,"column":9}},"61":{"start":{"line":300,"column":12},"end":{"line":313,"column":15}},"62":{"start":{"line":303,"column":20},"end":{"line":305,"column":21}},"63":{"start":{"line":304,"column":24},"end":{"line":304,"column":91}},"64":{"start":{"line":306,"column":20},"end":{"line":307,"column":54}},"65":{"start":{"line":309,"column":20},"end":{"line":309,"column":68}},"66":{"start":{"line":321,"column":8},"end":{"line":363,"column":9}},"67":{"start":{"line":322,"column":12},"end":{"line":324,"column":67}},"68":{"start":{"line":327,"column":12},"end":{"line":329,"column":13}},"69":{"start":{"line":328,"column":16},"end":{"line":328,"column":23}},"70":{"start":{"line":331,"column":12},"end":{"line":331,"column":64}},"71":{"start":{"line":332,"column":12},"end":{"line":332,"column":60}},"72":{"start":{"line":335,"column":12},"end":{"line":362,"column":13}},"73":{"start":{"line":336,"column":16},"end":{"line":345,"column":17}},"74":{"start":{"line":337,"column":20},"end":{"line":337,"column":68}},"75":{"start":{"line":338,"column":20},"end":{"line":338,"column":100}},"76":{"start":{"line":340,"column":20},"end":{"line":344,"column":21}},"77":{"start":{"line":341,"column":24},"end":{"line":341,"column":135}},"78":{"start":{"line":343,"column":24},"end":{"line":343,"column":118}},"79":{"start":{"line":347,"column":16},"end":{"line":349,"column":17}},"80":{"start":{"line":348,"column":20},"end":{"line":348,"column":85}},"81":{"start":{"line":351,"column":16},"end":{"line":357,"column":17}},"82":{"start":{"line":352,"column":20},"end":{"line":356,"column":21}},"83":{"start":{"line":353,"column":24},"end":{"line":353,"column":132}},"84":{"start":{"line":355,"column":24},"end":{"line":355,"column":135}},"85":{"start":{"line":359,"column":16},"end":{"line":361,"column":17}},"86":{"start":{"line":360,"column":20},"end":{"line":360,"column":97}},"87":{"start":{"line":365,"column":8},"end":{"line":370,"column":10}}},"branchMap":{"1":{"line":23,"type":"cond-expr","locations":[{"start":{"line":23,"column":23},"end":{"line":23,"column":24}},{"start":{"line":23,"column":27},"end":{"line":23,"column":37}}]},"2":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":24},"end":{"line":43,"column":40}},{"start":{"line":43,"column":43},"end":{"line":43,"column":45}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"4":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":72,"column":4}},{"start":{"line":72,"column":4},"end":{"line":72,"column":4}}]},"5":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":8}},{"start":{"line":81,"column":8},"end":{"line":81,"column":8}}]},"6":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":4},"end":{"line":118,"column":4}},{"start":{"line":118,"column":4},"end":{"line":118,"column":4}}]},"7":{"line":240,"type":"binary-expr","locations":[{"start":{"line":240,"column":23},"end":{"line":240,"column":41}},{"start":{"line":240,"column":45},"end":{"line":240,"column":47}}]},"8":{"line":241,"type":"binary-expr","locations":[{"start":{"line":241,"column":25},"end":{"line":241,"column":37}},{"start":{"line":241,"column":41},"end":{"line":241,"column":62}}]},"9":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":47},"end":{"line":244,"column":59}},{"start":{"line":244,"column":63},"end":{"line":244,"column":83}},{"start":{"line":244,"column":87},"end":{"line":244,"column":101}}]},"10":{"line":245,"type":"binary-expr","locations":[{"start":{"line":245,"column":31},"end":{"line":245,"column":43}},{"start":{"line":245,"column":47},"end":{"line":245,"column":70}},{"start":{"line":245,"column":74},"end":{"line":245,"column":91}},{"start":{"line":245,"column":95},"end":{"line":245,"column":97}}]},"11":{"line":250,"type":"cond-expr","locations":[{"start":{"line":250,"column":43},"end":{"line":250,"column":88}},{"start":{"line":250,"column":91},"end":{"line":250,"column":123}}]},"12":{"line":251,"type":"cond-expr","locations":[{"start":{"line":251,"column":53},"end":{"line":251,"column":106}},{"start":{"line":251,"column":109},"end":{"line":251,"column":136}}]},"13":{"line":251,"type":"binary-expr","locations":[{"start":{"line":251,"column":26},"end":{"line":251,"column":34}},{"start":{"line":251,"column":38},"end":{"line":251,"column":50}}]},"14":{"line":269,"type":"cond-expr","locations":[{"start":{"line":269,"column":55},"end":{"line":269,"column":59}},{"start":{"line":269,"column":62},"end":{"line":269,"column":66}}]},"15":{"line":277,"type":"if","locations":[{"start":{"line":277,"column":20},"end":{"line":277,"column":20}},{"start":{"line":277,"column":20},"end":{"line":277,"column":20}}]},"16":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":24},"end":{"line":278,"column":24}},{"start":{"line":278,"column":24},"end":{"line":278,"column":24}}]},"17":{"line":284,"type":"cond-expr","locations":[{"start":{"line":284,"column":96},"end":{"line":284,"column":104}},{"start":{"line":284,"column":107},"end":{"line":284,"column":109}}]},"18":{"line":303,"type":"if","locations":[{"start":{"line":303,"column":20},"end":{"line":303,"column":20}},{"start":{"line":303,"column":20},"end":{"line":303,"column":20}}]},"19":{"line":324,"type":"cond-expr","locations":[{"start":{"line":324,"column":55},"end":{"line":324,"column":59}},{"start":{"line":324,"column":62},"end":{"line":324,"column":66}}]},"20":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":12},"end":{"line":327,"column":12}},{"start":{"line":327,"column":12},"end":{"line":327,"column":12}}]},"21":{"line":335,"type":"if","locations":[{"start":{"line":335,"column":12},"end":{"line":335,"column":12}},{"start":{"line":335,"column":12},"end":{"line":335,"column":12}}]},"22":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":16},"end":{"line":336,"column":16}},{"start":{"line":336,"column":16},"end":{"line":336,"column":16}}]},"23":{"line":338,"type":"cond-expr","locations":[{"start":{"line":338,"column":47},"end":{"line":338,"column":79}},{"start":{"line":338,"column":82},"end":{"line":338,"column":99}}]},"24":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":20},"end":{"line":340,"column":20}},{"start":{"line":340,"column":20},"end":{"line":340,"column":20}}]},"25":{"line":347,"type":"if","locations":[{"start":{"line":347,"column":16},"end":{"line":347,"column":16}},{"start":{"line":347,"column":16},"end":{"line":347,"column":16}}]},"26":{"line":347,"type":"binary-expr","locations":[{"start":{"line":347,"column":20},"end":{"line":347,"column":28}},{"start":{"line":347,"column":32},"end":{"line":347,"column":48}},{"start":{"line":347,"column":52},"end":{"line":347,"column":61}}]},"27":{"line":351,"type":"if","locations":[{"start":{"line":351,"column":16},"end":{"line":351,"column":16}},{"start":{"line":351,"column":16},"end":{"line":351,"column":16}}]},"28":{"line":352,"type":"if","locations":[{"start":{"line":352,"column":20},"end":{"line":352,"column":20}},{"start":{"line":352,"column":20},"end":{"line":352,"column":20}}]},"29":{"line":359,"type":"if","locations":[{"start":{"line":359,"column":16},"end":{"line":359,"column":16}},{"start":{"line":359,"column":16},"end":{"line":359,"column":16}}]},"30":{"line":359,"type":"binary-expr","locations":[{"start":{"line":359,"column":20},"end":{"line":359,"column":28}},{"start":{"line":359,"column":32},"end":{"line":359,"column":48}},{"start":{"line":359,"column":52},"end":{"line":359,"column":60}}]}},"code":["/**"," * @fileoverview Source code for spaced-comments rule"," * @author Gyandeep Singh"," */","\"use strict\";","","const lodash = require(\"lodash\");","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Escapes the control characters of a given string."," * @param {string} s - A string to escape."," * @returns {string} An escaped string."," */","function escape(s) {","    const isOneChar = s.length === 1;","","    s = lodash.escapeRegExp(s);","    return isOneChar ? s : `(?:${s})`;","}","","/**"," * Escapes the control characters of a given string."," * And adds a repeat flag."," * @param {string} s - A string to escape."," * @returns {string} An escaped string."," */","function escapeAndRepeat(s) {","    return `${escape(s)}+`;","}","","/**"," * Parses `markers` option."," * If markers don't include `\"*\"`, this adds `\"*\"` to allow JSDoc comments."," * @param {string[]} [markers] - A marker list."," * @returns {string[]} A marker list."," */","function parseMarkersOption(markers) {","    markers = markers ? markers.slice(0) : [];","","    // `*` is a marker for JSDoc comments.","    if (markers.indexOf(\"*\") === -1) {","        markers.push(\"*\");","    }","","    return markers;","}","","/**"," * Creates string pattern for exceptions."," * Generated pattern:"," *"," * 1. A space or an exception pattern sequence."," *"," * @param {string[]} exceptions - An exception pattern list."," * @returns {string} A regular expression string for exceptions."," */","function createExceptionsPattern(exceptions) {","    let pattern = \"\";","","    /*","     * A space or an exception pattern sequence.","     * []                 ==> \"\\s\"","     * [\"-\"]              ==> \"(?:\\s|\\-+$)\"","     * [\"-\", \"=\"]         ==> \"(?:\\s|(?:\\-+|=+)$)\"","     * [\"-\", \"=\", \"--==\"] ==> \"(?:\\s|(?:\\-+|=+|(?:\\-\\-==)+)$)\" ==> https://jex.im/regulex/#!embed=false&flags=&re=(%3F%3A%5Cs%7C(%3F%3A%5C-%2B%7C%3D%2B%7C(%3F%3A%5C-%5C-%3D%3D)%2B)%24)","     */","    if (exceptions.length === 0) {","","        // a space.","        pattern += \"\\\\s\";","    } else {","","        // a space or...","        pattern += \"(?:\\\\s|\";","","        if (exceptions.length === 1) {","","            // a sequence of the exception pattern.","            pattern += escapeAndRepeat(exceptions[0]);","        } else {","","            // a sequence of one of the exception patterns.","            pattern += \"(?:\";","            pattern += exceptions.map(escapeAndRepeat).join(\"|\");","            pattern += \")\";","        }","        pattern += `(?:$|[${Array.from(astUtils.LINEBREAKS).join(\"\")}]))`;","    }","","    return pattern;","}","","/**"," * Creates RegExp object for `always` mode."," * Generated pattern for beginning of comment:"," *"," * 1. First, a marker or nothing."," * 2. Next, a space or an exception pattern sequence."," *"," * @param {string[]} markers - A marker list."," * @param {string[]} exceptions - An exception pattern list."," * @returns {RegExp} A RegExp object for the beginning of a comment in `always` mode."," */","function createAlwaysStylePattern(markers, exceptions) {","    let pattern = \"^\";","","    /*","     * A marker or nothing.","     * [\"*\"]            ==> \"\\*?\"","     * [\"*\", \"!\"]       ==> \"(?:\\*|!)?\"","     * [\"*\", \"/\", \"!<\"] ==> \"(?:\\*|\\/|(?:!<))?\" ==> https://jex.im/regulex/#!embed=false&flags=&re=(%3F%3A%5C*%7C%5C%2F%7C(%3F%3A!%3C))%3F","     */","    if (markers.length === 1) {","","        // the marker.","        pattern += escape(markers[0]);","    } else {","","        // one of markers.","        pattern += \"(?:\";","        pattern += markers.map(escape).join(\"|\");","        pattern += \")\";","    }","","    pattern += \"?\"; // or nothing.","    pattern += createExceptionsPattern(exceptions);","","    return new RegExp(pattern);","}","","/**"," * Creates RegExp object for `never` mode."," * Generated pattern for beginning of comment:"," *"," * 1. First, a marker or nothing (captured)."," * 2. Next, a space or a tab."," *"," * @param {string[]} markers - A marker list."," * @returns {RegExp} A RegExp object for `never` mode."," */","function createNeverStylePattern(markers) {","    const pattern = `^(${markers.map(escape).join(\"|\")})?[ \\t]+`;","","    return new RegExp(pattern);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce consistent spacing after the `//` or `/*` in a comment\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                enum: [\"always\", \"never\"]","            },","            {","                type: \"object\",","                properties: {","                    exceptions: {","                        type: \"array\",","                        items: {","                            type: \"string\"","                        }","                    },","                    markers: {","                        type: \"array\",","                        items: {","                            type: \"string\"","                        }","                    },","                    line: {","                        type: \"object\",","                        properties: {","                            exceptions: {","                                type: \"array\",","                                items: {","                                    type: \"string\"","                                }","                            },","                            markers: {","                                type: \"array\",","                                items: {","                                    type: \"string\"","                                }","                            }","                        },","                        additionalProperties: false","                    },","                    block: {","                        type: \"object\",","                        properties: {","                            exceptions: {","                                type: \"array\",","                                items: {","                                    type: \"string\"","                                }","                            },","                            markers: {","                                type: \"array\",","                                items: {","                                    type: \"string\"","                                }","                            },","                            balanced: {","                                type: \"boolean\"","                            }","                        },","                        additionalProperties: false","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        // Unless the first option is never, require a space","        const requireSpace = context.options[0] !== \"never\";","","        /*","         * Parse the second options.","         * If markers don't include `\"*\"`, it's added automatically for JSDoc","         * comments.","         */","        const config = context.options[1] || {};","        const balanced = config.block && config.block.balanced;","","        const styleRules = [\"block\", \"line\"].reduce((rule, type) => {","            const markers = parseMarkersOption(config[type] && config[type].markers || config.markers);","            const exceptions = config[type] && config[type].exceptions || config.exceptions || [];","            const endNeverPattern = \"[ \\t]+$\";","","            // Create RegExp object for valid patterns.","            rule[type] = {","                beginRegex: requireSpace ? createAlwaysStylePattern(markers, exceptions) : createNeverStylePattern(markers),","                endRegex: balanced && requireSpace ? new RegExp(`${createExceptionsPattern(exceptions)}$`) : new RegExp(endNeverPattern),","                hasExceptions: exceptions.length > 0,","                markers: new RegExp(`^(${markers.map(escape).join(\"|\")})`)","            };","","            return rule;","        }, {});","","        /**","         * Reports a beginning spacing error with an appropriate message.","         * @param {ASTNode} node - A comment node to check.","         * @param {string} message - An error message to report.","         * @param {Array} match - An array of match results for markers.","         * @param {string} refChar - Character used for reference in the error message.","         * @returns {void}","         */","        function reportBegin(node, message, match, refChar) {","            const type = node.type.toLowerCase(),","                commentIdentifier = type === \"block\" ? \"/*\" : \"//\";","","            context.report({","                node,","                fix(fixer) {","                    const start = node.range[0];","                    let end = start + 2;","","                    if (requireSpace) {","                        if (match) {","                            end += match[0].length;","                        }","                        return fixer.insertTextAfterRange([start, end], \" \");","                    }","                    end += match[0].length;","                    return fixer.replaceTextRange([start, end], commentIdentifier + (match[1] ? match[1] : \"\"));","","                },","                message,","                data: { refChar }","            });","        }","","        /**","         * Reports an ending spacing error with an appropriate message.","         * @param {ASTNode} node - A comment node to check.","         * @param {string} message - An error message to report.","         * @param {string} match - An array of the matched whitespace characters.","         * @returns {void}","         */","        function reportEnd(node, message, match) {","            context.report({","                node,","                fix(fixer) {","                    if (requireSpace) {","                        return fixer.insertTextAfterRange([node.start, node.end - 2], \" \");","                    }","                    const end = node.end - 2,","                        start = end - match[0].length;","","                    return fixer.replaceTextRange([start, end], \"\");","","                },","                message","            });","        }","","        /**","         * Reports a given comment if it's invalid.","         * @param {ASTNode} node - a comment node to check.","         * @returns {void}","         */","        function checkCommentForSpace(node) {","            const type = node.type.toLowerCase(),","                rule = styleRules[type],","                commentIdentifier = type === \"block\" ? \"/*\" : \"//\";","","            // Ignores empty comments.","            if (node.value.length === 0) {","                return;","            }","","            const beginMatch = rule.beginRegex.exec(node.value);","            const endMatch = rule.endRegex.exec(node.value);","","            // Checks.","            if (requireSpace) {","                if (!beginMatch) {","                    const hasMarker = rule.markers.exec(node.value);","                    const marker = hasMarker ? commentIdentifier + hasMarker[0] : commentIdentifier;","","                    if (rule.hasExceptions) {","                        reportBegin(node, \"Expected exception block, space or tab after '{{refChar}}' in comment.\", hasMarker, marker);","                    } else {","                        reportBegin(node, \"Expected space or tab after '{{refChar}}' in comment.\", hasMarker, marker);","                    }","                }","","                if (balanced && type === \"block\" && !endMatch) {","                    reportEnd(node, \"Expected space or tab before '*/' in comment.\");","                }","            } else {","                if (beginMatch) {","                    if (!beginMatch[1]) {","                        reportBegin(node, \"Unexpected space or tab after '{{refChar}}' in comment.\", beginMatch, commentIdentifier);","                    } else {","                        reportBegin(node, \"Unexpected space or tab after marker ({{refChar}}) in comment.\", beginMatch, beginMatch[1]);","                    }","                }","","                if (balanced && type === \"block\" && endMatch) {","                    reportEnd(node, \"Unexpected space or tab before '*/' in comment.\", endMatch);","                }","            }","        }","","        return {","","            LineComment: checkCommentForSpace,","            BlockComment: checkCommentForSpace","","        };","    }","};",""],"l":{"7":1,"8":1,"19":1,"20":0,"22":0,"23":0,"32":1,"33":0,"42":1,"43":0,"46":0,"47":0,"50":0,"62":1,"63":0,"72":0,"75":0,"79":0,"81":0,"84":0,"88":0,"89":0,"90":0,"92":0,"95":0,"109":1,"110":0,"118":0,"121":0,"125":0,"126":0,"127":0,"130":0,"131":0,"133":0,"146":1,"147":0,"149":0,"156":1,"233":0,"240":0,"241":0,"243":0,"244":0,"245":0,"246":0,"249":0,"256":0,"267":1,"268":0,"271":0,"274":0,"275":0,"277":0,"278":0,"279":0,"281":0,"283":0,"284":0,"299":1,"300":0,"303":0,"304":0,"306":0,"309":0,"321":1,"322":0,"327":0,"328":0,"331":0,"332":0,"335":0,"336":0,"337":0,"338":0,"340":0,"341":0,"343":0,"347":0,"348":0,"351":0,"352":0,"353":0,"355":0,"359":0,"360":0,"365":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/strict.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/strict.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":1,"25":0,"26":0,"27":1,"28":0,"29":0,"30":1,"31":0,"32":1,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"getUseStrictDirectives","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":44}}},"2":{"name":"isSimpleParameter","line":63,"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":33}}},"3":{"name":"isSimpleParameterList","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":39}}},"4":{"name":"(anonymous_4)","line":98,"loc":{"start":{"line":98,"column":10},"end":{"line":98,"column":20}}},"5":{"name":"shouldFix","line":116,"loc":{"start":{"line":116,"column":8},"end":{"line":116,"column":38}}},"6":{"name":"getFixFunction","line":125,"loc":{"start":{"line":125,"column":8},"end":{"line":125,"column":38}}},"7":{"name":"reportSlice","line":138,"loc":{"start":{"line":138,"column":8},"end":{"line":138,"column":62}}},"8":{"name":"reportAll","line":151,"loc":{"start":{"line":151,"column":8},"end":{"line":151,"column":48}}},"9":{"name":"reportAllExceptFirst","line":162,"loc":{"start":{"line":162,"column":8},"end":{"line":162,"column":59}}},"10":{"name":"enterFunctionInFunctionMode","line":173,"loc":{"start":{"line":173,"column":8},"end":{"line":173,"column":72}}},"11":{"name":"exitFunctionInFunctionMode","line":208,"loc":{"start":{"line":208,"column":8},"end":{"line":208,"column":46}}},"12":{"name":"enterFunction","line":219,"loc":{"start":{"line":219,"column":8},"end":{"line":219,"column":37}}},"13":{"name":"(anonymous_13)","line":237,"loc":{"start":{"line":237,"column":19},"end":{"line":237,"column":26}}},"14":{"name":"(anonymous_14)","line":262,"loc":{"start":{"line":262,"column":25},"end":{"line":262,"column":28}}},"15":{"name":"(anonymous_15)","line":265,"loc":{"start":{"line":265,"column":32},"end":{"line":265,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":29,"column":2}},"3":{"start":{"line":37,"column":0},"end":{"line":55,"column":1}},"4":{"start":{"line":38,"column":4},"end":{"line":38,"column":26}},"5":{"start":{"line":40,"column":4},"end":{"line":52,"column":5}},"6":{"start":{"line":41,"column":8},"end":{"line":41,"column":40}},"7":{"start":{"line":43,"column":8},"end":{"line":51,"column":9}},"8":{"start":{"line":48,"column":12},"end":{"line":48,"column":38}},"9":{"start":{"line":50,"column":12},"end":{"line":50,"column":18}},"10":{"start":{"line":54,"column":4},"end":{"line":54,"column":22}},"11":{"start":{"line":63,"column":0},"end":{"line":65,"column":1}},"12":{"start":{"line":64,"column":4},"end":{"line":64,"column":38}},"13":{"start":{"line":73,"column":0},"end":{"line":75,"column":1}},"14":{"start":{"line":74,"column":4},"end":{"line":74,"column":43}},"15":{"start":{"line":81,"column":0},"end":{"line":277,"column":2}},"16":{"start":{"line":100,"column":8},"end":{"line":102,"column":29}},"17":{"start":{"line":103,"column":8},"end":{"line":103,"column":48}},"18":{"start":{"line":105,"column":8},"end":{"line":109,"column":9}},"19":{"start":{"line":106,"column":12},"end":{"line":106,"column":29}},"20":{"start":{"line":107,"column":15},"end":{"line":109,"column":9}},"21":{"start":{"line":108,"column":12},"end":{"line":108,"column":69}},"22":{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},"23":{"start":{"line":117,"column":12},"end":{"line":117,"column":168}},"24":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"25":{"start":{"line":126,"column":12},"end":{"line":126,"column":47}},"26":{"start":{"line":126,"column":28},"end":{"line":126,"column":46}},"27":{"start":{"line":138,"column":8},"end":{"line":142,"column":9}},"28":{"start":{"line":139,"column":12},"end":{"line":141,"column":15}},"29":{"start":{"line":140,"column":16},"end":{"line":140,"column":90}},"30":{"start":{"line":151,"column":8},"end":{"line":153,"column":9}},"31":{"start":{"line":152,"column":12},"end":{"line":152,"column":62}},"32":{"start":{"line":162,"column":8},"end":{"line":164,"column":9}},"33":{"start":{"line":163,"column":12},"end":{"line":163,"column":62}},"34":{"start":{"line":173,"column":8},"end":{"line":202,"column":9}},"35":{"start":{"line":174,"column":12},"end":{"line":177,"column":58}},"36":{"start":{"line":179,"column":12},"end":{"line":199,"column":13}},"37":{"start":{"line":180,"column":16},"end":{"line":186,"column":17}},"38":{"start":{"line":181,"column":20},"end":{"line":181,"column":111}},"39":{"start":{"line":182,"column":23},"end":{"line":186,"column":17}},"40":{"start":{"line":183,"column":20},"end":{"line":183,"column":145}},"41":{"start":{"line":184,"column":23},"end":{"line":186,"column":17}},"42":{"start":{"line":185,"column":20},"end":{"line":185,"column":154}},"43":{"start":{"line":188,"column":16},"end":{"line":188,"column":83}},"44":{"start":{"line":189,"column":19},"end":{"line":199,"column":13}},"45":{"start":{"line":190,"column":16},"end":{"line":198,"column":17}},"46":{"start":{"line":191,"column":20},"end":{"line":191,"column":73}},"47":{"start":{"line":193,"column":20},"end":{"line":197,"column":23}},"48":{"start":{"line":201,"column":12},"end":{"line":201,"column":52}},"49":{"start":{"line":208,"column":8},"end":{"line":210,"column":9}},"50":{"start":{"line":209,"column":12},"end":{"line":209,"column":25}},"51":{"start":{"line":219,"column":8},"end":{"line":234,"column":9}},"52":{"start":{"line":220,"column":12},"end":{"line":222,"column":66}},"53":{"start":{"line":224,"column":12},"end":{"line":233,"column":13}},"54":{"start":{"line":225,"column":16},"end":{"line":225,"column":71}},"55":{"start":{"line":226,"column":19},"end":{"line":233,"column":13}},"56":{"start":{"line":227,"column":16},"end":{"line":232,"column":17}},"57":{"start":{"line":228,"column":20},"end":{"line":228,"column":84}},"58":{"start":{"line":230,"column":20},"end":{"line":230,"column":111}},"59":{"start":{"line":231,"column":20},"end":{"line":231,"column":87}},"60":{"start":{"line":236,"column":8},"end":{"line":256,"column":10}},"61":{"start":{"line":238,"column":16},"end":{"line":238,"column":78}},"62":{"start":{"line":240,"column":16},"end":{"line":242,"column":17}},"63":{"start":{"line":241,"column":20},"end":{"line":241,"column":36}},"64":{"start":{"line":244,"column":16},"end":{"line":251,"column":17}},"65":{"start":{"line":245,"column":20},"end":{"line":247,"column":21}},"66":{"start":{"line":246,"column":24},"end":{"line":246,"column":75}},"67":{"start":{"line":248,"column":20},"end":{"line":248,"column":87}},"68":{"start":{"line":250,"column":20},"end":{"line":250,"column":84}},"69":{"start":{"line":258,"column":8},"end":{"line":273,"column":9}},"70":{"start":{"line":259,"column":12},"end":{"line":272,"column":15}},"71":{"start":{"line":263,"column":20},"end":{"line":263,"column":43}},"72":{"start":{"line":266,"column":20},"end":{"line":266,"column":38}},"73":{"start":{"line":275,"column":8},"end":{"line":275,"column":20}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":8}},{"start":{"line":43,"column":8},"end":{"line":43,"column":8}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":52}},{"start":{"line":45,"column":12},"end":{"line":45,"column":51}},{"start":{"line":46,"column":12},"end":{"line":46,"column":55}}]},"3":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":29},"end":{"line":100,"column":63}},{"start":{"line":100,"column":67},"end":{"line":100,"column":69}}]},"4":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":19},"end":{"line":103,"column":37}},{"start":{"line":103,"column":41},"end":{"line":103,"column":47}}]},"5":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":8}},{"start":{"line":105,"column":8},"end":{"line":105,"column":8}}]},"6":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":15},"end":{"line":107,"column":15}},{"start":{"line":107,"column":15},"end":{"line":107,"column":15}}]},"7":{"line":108,"type":"cond-expr","locations":[{"start":{"line":108,"column":47},"end":{"line":108,"column":55}},{"start":{"line":108,"column":58},"end":{"line":108,"column":68}}]},"8":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":19},"end":{"line":117,"column":43}},{"start":{"line":117,"column":47},"end":{"line":117,"column":74}},{"start":{"line":117,"column":78},"end":{"line":117,"column":100}},{"start":{"line":117,"column":104},"end":{"line":117,"column":127}},{"start":{"line":117,"column":131},"end":{"line":117,"column":167}}]},"9":{"line":140,"type":"cond-expr","locations":[{"start":{"line":140,"column":59},"end":{"line":140,"column":79}},{"start":{"line":140,"column":82},"end":{"line":140,"column":86}}]},"10":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":33},"end":{"line":175,"column":52}},{"start":{"line":175,"column":56},"end":{"line":175,"column":80}}]},"11":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":33},"end":{"line":176,"column":50}},{"start":{"line":176,"column":54},"end":{"line":176,"column":79}}]},"12":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":12},"end":{"line":179,"column":12}},{"start":{"line":179,"column":12},"end":{"line":179,"column":12}}]},"13":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":16},"end":{"line":180,"column":16}},{"start":{"line":180,"column":16},"end":{"line":180,"column":16}}]},"14":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":23},"end":{"line":182,"column":23}},{"start":{"line":182,"column":23},"end":{"line":182,"column":23}}]},"15":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":23},"end":{"line":184,"column":23}},{"start":{"line":184,"column":23},"end":{"line":184,"column":23}}]},"16":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":19},"end":{"line":189,"column":19}},{"start":{"line":189,"column":19},"end":{"line":189,"column":19}}]},"17":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":16},"end":{"line":190,"column":16}},{"start":{"line":190,"column":16},"end":{"line":190,"column":16}}]},"18":{"line":201,"type":"binary-expr","locations":[{"start":{"line":201,"column":24},"end":{"line":201,"column":38}},{"start":{"line":201,"column":42},"end":{"line":201,"column":50}}]},"19":{"line":221,"type":"cond-expr","locations":[{"start":{"line":222,"column":22},"end":{"line":222,"column":60}},{"start":{"line":222,"column":63},"end":{"line":222,"column":65}}]},"20":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":12},"end":{"line":224,"column":12}},{"start":{"line":224,"column":12},"end":{"line":224,"column":12}}]},"21":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":19},"end":{"line":226,"column":19}},{"start":{"line":226,"column":19},"end":{"line":226,"column":19}}]},"22":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":16},"end":{"line":227,"column":16}},{"start":{"line":227,"column":16},"end":{"line":227,"column":16}}]},"23":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":16},"end":{"line":240,"column":16}},{"start":{"line":240,"column":16},"end":{"line":240,"column":16}}]},"24":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":16},"end":{"line":244,"column":16}},{"start":{"line":244,"column":16},"end":{"line":244,"column":16}}]},"25":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":20},"end":{"line":245,"column":20}},{"start":{"line":245,"column":20},"end":{"line":245,"column":20}}]},"26":{"line":245,"type":"binary-expr","locations":[{"start":{"line":245,"column":24},"end":{"line":245,"column":44}},{"start":{"line":245,"column":48},"end":{"line":245,"column":80}}]},"27":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8}},{"start":{"line":258,"column":8},"end":{"line":258,"column":8}}]}},"code":["/**"," * @fileoverview Rule to control usage of strict mode directives."," * @author Brandon Mills"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const messages = {","    function: \"Use the function form of 'use strict'.\",","    global: \"Use the global form of 'use strict'.\",","    multiple: \"Multiple 'use strict' directives.\",","    never: \"Strict mode is not permitted.\",","    unnecessary: \"Unnecessary 'use strict' directive.\",","    module: \"'use strict' is unnecessary inside of modules.\",","    implied: \"'use strict' is unnecessary when implied strict mode is enabled.\",","    unnecessaryInClasses: \"'use strict' is unnecessary inside of classes.\",","    nonSimpleParameterList: \"'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.\",","    wrap: \"Wrap {{name}} in a function with 'use strict' directive.\"","};","","/**"," * Gets all of the Use Strict Directives in the Directive Prologue of a group of"," * statements."," * @param {ASTNode[]} statements Statements in the program or function body."," * @returns {ASTNode[]} All of the Use Strict Directives."," */","function getUseStrictDirectives(statements) {","    const directives = [];","","    for (let i = 0; i < statements.length; i++) {","        const statement = statements[i];","","        if (","            statement.type === \"ExpressionStatement\" &&","            statement.expression.type === \"Literal\" &&","            statement.expression.value === \"use strict\"","        ) {","            directives[i] = statement;","        } else {","            break;","        }","    }","","    return directives;","}","","/**"," * Checks whether a given parameter is a simple parameter."," *"," * @param {ASTNode} node - A pattern node to check."," * @returns {boolean} `true` if the node is an Identifier node."," */","function isSimpleParameter(node) {","    return node.type === \"Identifier\";","}","","/**"," * Checks whether a given parameter list is a simple parameter list."," *"," * @param {ASTNode[]} params - A parameter list to check."," * @returns {boolean} `true` if the every parameter is an Identifier node."," */","function isSimpleParameterList(params) {","    return params.every(isSimpleParameter);","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow strict mode directives\",","            category: \"Strict Mode\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"never\", \"global\", \"function\", \"safe\"]","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","","        const ecmaFeatures = context.parserOptions.ecmaFeatures || {},","            scopes = [],","            classScopes = [];","        let mode = context.options[0] || \"safe\";","","        if (ecmaFeatures.impliedStrict) {","            mode = \"implied\";","        } else if (mode === \"safe\") {","            mode = ecmaFeatures.globalReturn ? \"global\" : \"function\";","        }","","        /**","        * Determines whether a reported error should be fixed, depending on the error type.","        * @param {string} errorType The type of error","        * @returns {boolean} `true` if the reported error should be fixed","        */","        function shouldFix(errorType) {","            return errorType === \"multiple\" || errorType === \"unnecessary\" || errorType === \"module\" || errorType === \"implied\" || errorType === \"unnecessaryInClasses\";","        }","","        /**","        * Gets a fixer function to remove a given 'use strict' directive.","        * @param {ASTNode} node The directive that should be removed","        * @returns {Function} A fixer function","        */","        function getFixFunction(node) {","            return fixer => fixer.remove(node);","        }","","        /**","         * Report a slice of an array of nodes with a given message.","         * @param {ASTNode[]} nodes Nodes.","         * @param {string} start Index to start from.","         * @param {string} end Index to end before.","         * @param {string} message Message to display.","         * @param {boolean} fix `true` if the directive should be fixed (i.e. removed)","         * @returns {void}","         */","        function reportSlice(nodes, start, end, message, fix) {","            nodes.slice(start, end).forEach(node => {","                context.report({ node, message, fix: fix ? getFixFunction(node) : null });","            });","        }","","        /**","         * Report all nodes in an array with a given message.","         * @param {ASTNode[]} nodes Nodes.","         * @param {string} message Message to display.","         * @param {boolean} fix `true` if the directive should be fixed (i.e. removed)","         * @returns {void}","         */","        function reportAll(nodes, message, fix) {","            reportSlice(nodes, 0, nodes.length, message, fix);","        }","","        /**","         * Report all nodes in an array, except the first, with a given message.","         * @param {ASTNode[]} nodes Nodes.","         * @param {string} message Message to display.","         * @param {boolean} fix `true` if the directive should be fixed (i.e. removed)","         * @returns {void}","         */","        function reportAllExceptFirst(nodes, message, fix) {","            reportSlice(nodes, 1, nodes.length, message, fix);","        }","","        /**","         * Entering a function in 'function' mode pushes a new nested scope onto the","         * stack. The new scope is true if the nested function is strict mode code.","         * @param {ASTNode} node The function declaration or expression.","         * @param {ASTNode[]} useStrictDirectives The Use Strict Directives of the node.","         * @returns {void}","         */","        function enterFunctionInFunctionMode(node, useStrictDirectives) {","            const isInClass = classScopes.length > 0,","                isParentGlobal = scopes.length === 0 && classScopes.length === 0,","                isParentStrict = scopes.length > 0 && scopes[scopes.length - 1],","                isStrict = useStrictDirectives.length > 0;","","            if (isStrict) {","                if (!isSimpleParameterList(node.params)) {","                    context.report({ node: useStrictDirectives[0], message: messages.nonSimpleParameterList });","                } else if (isParentStrict) {","                    context.report({ node: useStrictDirectives[0], message: messages.unnecessary, fix: getFixFunction(useStrictDirectives[0]) });","                } else if (isInClass) {","                    context.report({ node: useStrictDirectives[0], message: messages.unnecessaryInClasses, fix: getFixFunction(useStrictDirectives[0]) });","                }","","                reportAllExceptFirst(useStrictDirectives, messages.multiple, true);","            } else if (isParentGlobal) {","                if (isSimpleParameterList(node.params)) {","                    context.report({ node, message: messages.function });","                } else {","                    context.report({","                        node,","                        message: messages.wrap,","                        data: { name: astUtils.getFunctionNameWithKind(node) }","                    });","                }","            }","","            scopes.push(isParentStrict || isStrict);","        }","","        /**","         * Exiting a function in 'function' mode pops its scope off the stack.","         * @returns {void}","         */","        function exitFunctionInFunctionMode() {","            scopes.pop();","        }","","        /**","         * Enter a function and either:","         * - Push a new nested scope onto the stack (in 'function' mode).","         * - Report all the Use Strict Directives (in the other modes).","         * @param {ASTNode} node The function declaration or expression.","         * @returns {void}","         */","        function enterFunction(node) {","            const isBlock = node.body.type === \"BlockStatement\",","                useStrictDirectives = isBlock","                    ? getUseStrictDirectives(node.body.body) : [];","","            if (mode === \"function\") {","                enterFunctionInFunctionMode(node, useStrictDirectives);","            } else if (useStrictDirectives.length > 0) {","                if (isSimpleParameterList(node.params)) {","                    reportAll(useStrictDirectives, messages[mode], shouldFix(mode));","                } else {","                    context.report({ node: useStrictDirectives[0], message: messages.nonSimpleParameterList });","                    reportAllExceptFirst(useStrictDirectives, messages.multiple, true);","                }","            }","        }","","        const rule = {","            Program(node) {","                const useStrictDirectives = getUseStrictDirectives(node.body);","","                if (node.sourceType === \"module\") {","                    mode = \"module\";","                }","","                if (mode === \"global\") {","                    if (node.body.length > 0 && useStrictDirectives.length === 0) {","                        context.report({ node, message: messages.global });","                    }","                    reportAllExceptFirst(useStrictDirectives, messages.multiple, true);","                } else {","                    reportAll(useStrictDirectives, messages[mode], shouldFix(mode));","                }","            },","            FunctionDeclaration: enterFunction,","            FunctionExpression: enterFunction,","            ArrowFunctionExpression: enterFunction","        };","","        if (mode === \"function\") {","            Object.assign(rule, {","","                // Inside of class bodies are always strict mode.","                ClassBody() {","                    classScopes.push(true);","                },","                \"ClassBody:exit\"() {","                    classScopes.pop();","                },","","                \"FunctionDeclaration:exit\": exitFunctionInFunctionMode,","                \"FunctionExpression:exit\": exitFunctionInFunctionMode,","                \"ArrowFunctionExpression:exit\": exitFunctionInFunctionMode","            });","        }","","        return rule;","    }","};",""],"l":{"12":1,"18":1,"37":1,"38":0,"40":0,"41":0,"43":0,"48":0,"50":0,"54":0,"63":1,"64":0,"73":1,"74":0,"81":1,"100":0,"103":0,"105":0,"106":0,"107":0,"108":0,"116":1,"117":0,"125":1,"126":0,"138":1,"139":0,"140":0,"151":1,"152":0,"162":1,"163":0,"173":1,"174":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"188":0,"189":0,"190":0,"191":0,"193":0,"201":0,"208":1,"209":0,"219":1,"220":0,"224":0,"225":0,"226":0,"227":0,"228":0,"230":0,"231":0,"236":0,"238":0,"240":0,"241":0,"244":0,"245":0,"246":0,"248":0,"250":0,"258":0,"259":0,"263":0,"266":0,"275":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/symbol-description.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/symbol-description.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":10},"end":{"line":30,"column":20}}},"2":{"name":"checkArgument","line":39,"loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":37}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":26},"end":{"line":49,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":19,"column":0},"end":{"line":66,"column":2}},"3":{"start":{"line":39,"column":8},"end":{"line":46,"column":9}},"4":{"start":{"line":40,"column":12},"end":{"line":45,"column":13}},"5":{"start":{"line":41,"column":16},"end":{"line":44,"column":19}},"6":{"start":{"line":48,"column":8},"end":{"line":63,"column":10}},"7":{"start":{"line":50,"column":16},"end":{"line":50,"column":49}},"8":{"start":{"line":51,"column":16},"end":{"line":51,"column":77}},"9":{"start":{"line":53,"column":16},"end":{"line":61,"column":17}},"10":{"start":{"line":54,"column":20},"end":{"line":60,"column":23}},"11":{"start":{"line":55,"column":24},"end":{"line":55,"column":58}},"12":{"start":{"line":57,"column":24},"end":{"line":59,"column":25}},"13":{"start":{"line":58,"column":28},"end":{"line":58,"column":55}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":12}},{"start":{"line":40,"column":12},"end":{"line":40,"column":12}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":16}},{"start":{"line":53,"column":16},"end":{"line":53,"column":16}}]},"3":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":20},"end":{"line":53,"column":28}},{"start":{"line":53,"column":32},"end":{"line":53,"column":58}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":24},"end":{"line":57,"column":24}},{"start":{"line":57,"column":24},"end":{"line":57,"column":24}}]}},"code":["/**"," * @fileoverview Rule to enforce description with the `Symbol` object"," * @author Jarek Rencz"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","","module.exports = {","    meta: {","        docs: {","            description: \"require symbol descriptions\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","","        /**","         * Reports if node does not conform the rule in case rule is set to","         * report missing description","         *","         * @param {ASTNode} node - A CallExpression node to check.","         * @returns {void}","         */","        function checkArgument(node) {","            if (node.arguments.length === 0) {","                context.report({","                    node,","                    message: \"Expected Symbol to have a description.\"","                });","            }","        }","","        return {","            \"Program:exit\"() {","                const scope = context.getScope();","                const variable = astUtils.getVariableByName(scope, \"Symbol\");","","                if (variable && variable.defs.length === 0) {","                    variable.references.forEach(reference => {","                        const node = reference.identifier;","","                        if (astUtils.isCallee(node)) {","                            checkArgument(node.parent);","                        }","                    });","                }","            }","        };","","    }","};",""],"l":{"12":1,"19":1,"39":1,"40":0,"41":0,"48":0,"50":0,"51":0,"53":0,"54":0,"55":0,"57":0,"58":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/template-curly-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/template-curly-spacing.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":40,"loc":{"start":{"line":40,"column":10},"end":{"line":40,"column":20}}},"2":{"name":"checkSpacingBefore","line":50,"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":43}}},"3":{"name":"(anonymous_3)","line":64,"loc":{"start":{"line":64,"column":23},"end":{"line":64,"column":31}}},"4":{"name":"checkSpacingAfter","line":82,"loc":{"start":{"line":82,"column":8},"end":{"line":82,"column":42}}},"5":{"name":"(anonymous_5)","line":99,"loc":{"start":{"line":99,"column":23},"end":{"line":99,"column":31}}},"6":{"name":"(anonymous_6)","line":113,"loc":{"start":{"line":113,"column":27},"end":{"line":113,"column":34}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":27}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":26}},"4":{"start":{"line":25,"column":0},"end":{"line":121,"column":2}},"5":{"start":{"line":41,"column":8},"end":{"line":41,"column":51}},"6":{"start":{"line":42,"column":8},"end":{"line":42,"column":55}},"7":{"start":{"line":43,"column":8},"end":{"line":43,"column":58}},"8":{"start":{"line":50,"column":8},"end":{"line":75,"column":9}},"9":{"start":{"line":51,"column":12},"end":{"line":51,"column":63}},"10":{"start":{"line":53,"column":12},"end":{"line":74,"column":13}},"11":{"start":{"line":58,"column":16},"end":{"line":73,"column":19}},"12":{"start":{"line":65,"column":24},"end":{"line":67,"column":25}},"13":{"start":{"line":66,"column":28},"end":{"line":66,"column":70}},"14":{"start":{"line":68,"column":24},"end":{"line":71,"column":27}},"15":{"start":{"line":82,"column":8},"end":{"line":110,"column":9}},"16":{"start":{"line":83,"column":12},"end":{"line":83,"column":62}},"17":{"start":{"line":85,"column":12},"end":{"line":109,"column":13}},"18":{"start":{"line":90,"column":16},"end":{"line":108,"column":19}},"19":{"start":{"line":100,"column":24},"end":{"line":102,"column":25}},"20":{"start":{"line":101,"column":28},"end":{"line":101,"column":69}},"21":{"start":{"line":103,"column":24},"end":{"line":106,"column":27}},"22":{"start":{"line":112,"column":8},"end":{"line":119,"column":10}},"23":{"start":{"line":114,"column":16},"end":{"line":114,"column":61}},"24":{"start":{"line":116,"column":16},"end":{"line":116,"column":42}},"25":{"start":{"line":117,"column":16},"end":{"line":117,"column":41}}},"branchMap":{"1":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":32},"end":{"line":43,"column":42}},{"start":{"line":43,"column":45},"end":{"line":43,"column":57}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":12}},{"start":{"line":53,"column":12},"end":{"line":53,"column":12}}]},"3":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":25}},{"start":{"line":54,"column":16},"end":{"line":54,"column":45}},{"start":{"line":55,"column":16},"end":{"line":55,"column":60}},{"start":{"line":56,"column":16},"end":{"line":56,"column":76}}]},"4":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":24},"end":{"line":65,"column":24}},{"start":{"line":65,"column":24},"end":{"line":65,"column":24}}]},"5":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":12},"end":{"line":85,"column":12}},{"start":{"line":85,"column":12},"end":{"line":85,"column":12}}]},"6":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":16},"end":{"line":85,"column":25}},{"start":{"line":86,"column":16},"end":{"line":86,"column":44}},{"start":{"line":87,"column":16},"end":{"line":87,"column":60}},{"start":{"line":88,"column":16},"end":{"line":88,"column":76}}]},"7":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":24},"end":{"line":100,"column":24}},{"start":{"line":100,"column":24},"end":{"line":100,"column":24}}]}},"code":["/**"," * @fileoverview Rule to enforce spacing around embedded expressions of template strings"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const OPEN_PAREN = /\\$\\{$/;","const CLOSE_PAREN = /^\\}/;","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow spacing around embedded expressions of template strings\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            { enum: [\"always\", \"never\"] }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","        const always = context.options[0] === \"always\";","        const prefix = always ? \"Expected\" : \"Unexpected\";","","        /**","         * Checks spacing before `}` of a given token.","         * @param {Token} token - A token to check. This is a Template token.","         * @returns {void}","         */","        function checkSpacingBefore(token) {","            const prevToken = sourceCode.getTokenBefore(token);","","            if (prevToken &&","                CLOSE_PAREN.test(token.value) &&","                astUtils.isTokenOnSameLine(prevToken, token) &&","                sourceCode.isSpaceBetweenTokens(prevToken, token) !== always","            ) {","                context.report({","                    loc: token.loc.start,","                    message: \"{{prefix}} space(s) before '}'.\",","                    data: {","                        prefix","                    },","                    fix(fixer) {","                        if (always) {","                            return fixer.insertTextBefore(token, \" \");","                        }","                        return fixer.removeRange([","                            prevToken.range[1],","                            token.range[0]","                        ]);","                    }","                });","            }","        }","","        /**","         * Checks spacing after `${` of a given token.","         * @param {Token} token - A token to check. This is a Template token.","         * @returns {void}","         */","        function checkSpacingAfter(token) {","            const nextToken = sourceCode.getTokenAfter(token);","","            if (nextToken &&","                OPEN_PAREN.test(token.value) &&","                astUtils.isTokenOnSameLine(token, nextToken) &&","                sourceCode.isSpaceBetweenTokens(token, nextToken) !== always","            ) {","                context.report({","                    loc: {","                        line: token.loc.end.line,","                        column: token.loc.end.column - 2","                    },","                    message: \"{{prefix}} space(s) after '${'.\",","                    data: {","                        prefix","                    },","                    fix(fixer) {","                        if (always) {","                            return fixer.insertTextAfter(token, \" \");","                        }","                        return fixer.removeRange([","                            token.range[1],","                            nextToken.range[0]","                        ]);","                    }","                });","            }","        }","","        return {","            TemplateElement(node) {","                const token = sourceCode.getFirstToken(node);","","                checkSpacingBefore(token);","                checkSpacingAfter(token);","            }","        };","    }","};",""],"l":{"12":1,"18":1,"19":1,"25":1,"41":0,"42":0,"43":0,"50":1,"51":0,"53":0,"58":0,"65":0,"66":0,"68":0,"82":1,"83":0,"85":0,"90":0,"100":0,"101":0,"103":0,"112":0,"114":0,"116":0,"117":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/template-tag-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/template-tag-spacing.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":10},"end":{"line":27,"column":20}}},"2":{"name":"checkSpacing","line":37,"loc":{"start":{"line":37,"column":8},"end":{"line":37,"column":36}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":23},"end":{"line":47,"column":31}}},"4":{"name":"(anonymous_4)","line":66,"loc":{"start":{"line":66,"column":23},"end":{"line":66,"column":31}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":77,"column":2}},"2":{"start":{"line":28,"column":8},"end":{"line":28,"column":54}},"3":{"start":{"line":29,"column":8},"end":{"line":29,"column":51}},"4":{"start":{"line":37,"column":8},"end":{"line":71,"column":9}},"5":{"start":{"line":38,"column":12},"end":{"line":38,"column":67}},"6":{"start":{"line":39,"column":12},"end":{"line":39,"column":70}},"7":{"start":{"line":40,"column":12},"end":{"line":40,"column":90}},"8":{"start":{"line":42,"column":12},"end":{"line":70,"column":13}},"9":{"start":{"line":43,"column":16},"end":{"line":60,"column":19}},"10":{"start":{"line":48,"column":24},"end":{"line":48,"column":84}},"11":{"start":{"line":51,"column":24},"end":{"line":53,"column":25}},"12":{"start":{"line":51,"column":53},"end":{"line":51,"column":76}},"13":{"start":{"line":52,"column":28},"end":{"line":52,"column":40}},"14":{"start":{"line":55,"column":24},"end":{"line":58,"column":26}},"15":{"start":{"line":57,"column":63},"end":{"line":57,"column":97}},"16":{"start":{"line":61,"column":19},"end":{"line":70,"column":13}},"17":{"start":{"line":62,"column":16},"end":{"line":69,"column":19}},"18":{"start":{"line":67,"column":24},"end":{"line":67,"column":68}},"19":{"start":{"line":73,"column":8},"end":{"line":75,"column":10}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":12}},{"start":{"line":42,"column":12},"end":{"line":42,"column":12}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":16},"end":{"line":42,"column":21}},{"start":{"line":42,"column":25},"end":{"line":42,"column":38}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":24},"end":{"line":51,"column":24}},{"start":{"line":51,"column":24},"end":{"line":51,"column":24}}]},"4":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":19},"end":{"line":61,"column":19}},{"start":{"line":61,"column":19},"end":{"line":61,"column":19}}]},"5":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":23},"end":{"line":61,"column":29}},{"start":{"line":61,"column":33},"end":{"line":61,"column":47}}]}},"code":["/**"," * @fileoverview Rule to check spacing between template tags and their literals"," * @author Jonathan Wilsson"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow spacing between template tags and their literals\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            { enum: [\"always\", \"never\"] }","        ]","    },","","    create(context) {","        const never = context.options[0] !== \"always\";","        const sourceCode = context.getSourceCode();","","        /**","         * Check if a space is present between a template tag and its literal","         * @param {ASTNode} node node to evaluate","         * @returns {void}","         * @private","         */","        function checkSpacing(node) {","            const tagToken = sourceCode.getTokenBefore(node.quasi);","            const literalToken = sourceCode.getFirstToken(node.quasi);","            const hasWhitespace = sourceCode.isSpaceBetweenTokens(tagToken, literalToken);","","            if (never && hasWhitespace) {","                context.report({","                    node,","                    loc: tagToken.loc.start,","                    message: \"Unexpected space between template tag and template literal.\",","                    fix(fixer) {","                        const comments = sourceCode.getComments(node.quasi).leading;","","                        // Don't fix anything if there's a single line comment after the template tag","                        if (comments.some(comment => comment.type === \"Line\")) {","                            return null;","                        }","","                        return fixer.replaceTextRange(","                            [tagToken.range[1], literalToken.range[0]],","                            comments.reduce((text, comment) => text + sourceCode.getText(comment), \"\")","                        );","                    }","                });","            } else if (!never && !hasWhitespace) {","                context.report({","                    node,","                    loc: tagToken.loc.start,","                    message: \"Missing space between template tag and template literal.\",","                    fix(fixer) {","                        return fixer.insertTextAfter(tagToken, \" \");","                    }","                });","            }","        }","","        return {","            TaggedTemplateExpression: checkSpacing","        };","    }","};",""],"l":{"12":1,"28":0,"29":0,"37":1,"38":0,"39":0,"40":0,"42":0,"43":0,"48":0,"51":0,"52":0,"55":0,"57":0,"61":0,"62":0,"67":0,"73":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/unicode-bom.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/unicode-bom.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":28,"loc":{"start":{"line":28,"column":10},"end":{"line":28,"column":20}}},"2":{"name":"checkUnicodeBOM","line":36,"loc":{"start":{"line":36,"column":21},"end":{"line":36,"column":52}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":27},"end":{"line":47,"column":35}}},"4":{"name":"(anonymous_4)","line":56,"loc":{"start":{"line":56,"column":27},"end":{"line":56,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":66,"column":2}},"2":{"start":{"line":34,"column":8},"end":{"line":63,"column":10}},"3":{"start":{"line":38,"column":16},"end":{"line":40,"column":63}},"4":{"start":{"line":42,"column":16},"end":{"line":60,"column":17}},"5":{"start":{"line":43,"column":20},"end":{"line":50,"column":23}},"6":{"start":{"line":48,"column":28},"end":{"line":48,"column":81}},"7":{"start":{"line":51,"column":23},"end":{"line":60,"column":17}},"8":{"start":{"line":52,"column":20},"end":{"line":59,"column":23}},"9":{"start":{"line":57,"column":28},"end":{"line":57,"column":62}}},"branchMap":{"1":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":33},"end":{"line":40,"column":51}},{"start":{"line":40,"column":55},"end":{"line":40,"column":62}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":16},"end":{"line":42,"column":16}},{"start":{"line":42,"column":16},"end":{"line":42,"column":16}}]},"3":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":20},"end":{"line":42,"column":38}},{"start":{"line":42,"column":43},"end":{"line":42,"column":66}}]},"4":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":23},"end":{"line":51,"column":23}},{"start":{"line":51,"column":23},"end":{"line":51,"column":23}}]},"5":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":27},"end":{"line":51,"column":44}},{"start":{"line":51,"column":49},"end":{"line":51,"column":71}}]}},"code":["/**"," * @fileoverview Require or disallow Unicode BOM"," * @author Andrew Johnston <https://github.com/ehjay>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow Unicode byte order mark (BOM)\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                enum: [\"always\", \"never\"]","            }","        ]","    },","","    create(context) {","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            Program: function checkUnicodeBOM(node) {","","                const sourceCode = context.getSourceCode(),","                    location = { column: 0, line: 1 },","                    requireBOM = context.options[0] || \"never\";","","                if (!sourceCode.hasBOM && (requireBOM === \"always\")) {","                    context.report({","                        node,","                        loc: location,","                        message: \"Expected Unicode BOM (Byte Order Mark).\",","                        fix(fixer) {","                            return fixer.insertTextBeforeRange([0, 1], \"\\uFEFF\");","                        }","                    });","                } else if (sourceCode.hasBOM && (requireBOM === \"never\")) {","                    context.report({","                        node,","                        loc: location,","                        message: \"Unexpected Unicode BOM (Byte Order Mark).\",","                        fix(fixer) {","                            return fixer.removeRange([-1, 0]);","                        }","                    });","                }","            }","","        };","","    }","};",""],"l":{"11":1,"34":0,"38":0,"42":0,"43":0,"48":0,"51":0,"52":0,"57":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/use-isnan.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/use-isnan.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":28},"end":{"line":26,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":34,"column":2}},"2":{"start":{"line":25,"column":8},"end":{"line":31,"column":10}},"3":{"start":{"line":27,"column":16},"end":{"line":29,"column":17}},"4":{"start":{"line":28,"column":20},"end":{"line":28,"column":101}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":16},"end":{"line":27,"column":16}},{"start":{"line":27,"column":16},"end":{"line":27,"column":16}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":20},"end":{"line":27,"column":60}},{"start":{"line":27,"column":65},"end":{"line":27,"column":89}},{"start":{"line":27,"column":93},"end":{"line":27,"column":118}}]}},"code":["/**"," * @fileoverview Rule to flag comparisons to the value NaN"," * @author James Allardice"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require calls to `isNaN()` when checking for `NaN`\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: []","    },","","    create(context) {","","        return {","            BinaryExpression(node) {","                if (/^(?:[<>]|[!=]=)=?$/.test(node.operator) && (node.left.name === \"NaN\" || node.right.name === \"NaN\")) {","                    context.report({ node, message: \"Use the isNaN function to compare with NaN.\" });","                }","            }","        };","","    }","};",""],"l":{"12":1,"25":0,"27":0,"28":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/valid-jsdoc.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/valid-jsdoc.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0,0,0,0,0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0,0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0,0,0,0,0,0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":62,"loc":{"start":{"line":62,"column":10},"end":{"line":62,"column":20}}},"2":{"name":"isTypeClass","line":89,"loc":{"start":{"line":89,"column":8},"end":{"line":89,"column":35}}},"3":{"name":"startFunction","line":99,"loc":{"start":{"line":99,"column":8},"end":{"line":99,"column":37}}},"4":{"name":"addReturn","line":112,"loc":{"start":{"line":112,"column":8},"end":{"line":112,"column":33}}},"5":{"name":"isValidReturnType","line":126,"loc":{"start":{"line":126,"column":8},"end":{"line":126,"column":40}}},"6":{"name":"canTypeBeValidated","line":136,"loc":{"start":{"line":136,"column":8},"end":{"line":136,"column":42}}},"7":{"name":"getCurrentExpectedTypes","line":150,"loc":{"start":{"line":150,"column":8},"end":{"line":150,"column":47}}},"8":{"name":"validateType","line":174,"loc":{"start":{"line":174,"column":8},"end":{"line":174,"column":47}}},"9":{"name":"checkJSDoc","line":226,"loc":{"start":{"line":226,"column":8},"end":{"line":226,"column":34}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":37}},"2":{"start":{"line":17,"column":0},"end":{"line":409,"column":2}},"3":{"start":{"line":64,"column":8},"end":{"line":74,"column":67}},"4":{"start":{"line":81,"column":8},"end":{"line":81,"column":23}},"5":{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},"6":{"start":{"line":90,"column":12},"end":{"line":90,"column":87}},"7":{"start":{"line":99,"column":8},"end":{"line":104,"column":9}},"8":{"start":{"line":100,"column":12},"end":{"line":103,"column":15}},"9":{"start":{"line":112,"column":8},"end":{"line":118,"column":9}},"10":{"start":{"line":113,"column":12},"end":{"line":113,"column":54}},"11":{"start":{"line":115,"column":12},"end":{"line":117,"column":13}},"12":{"start":{"line":116,"column":16},"end":{"line":116,"column":51}},"13":{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},"14":{"start":{"line":127,"column":12},"end":{"line":127,"column":105}},"15":{"start":{"line":136,"column":8},"end":{"line":142,"column":9}},"16":{"start":{"line":137,"column":12},"end":{"line":141,"column":41}},"17":{"start":{"line":150,"column":8},"end":{"line":165,"column":9}},"18":{"start":{"line":151,"column":12},"end":{"line":151,"column":28}},"19":{"start":{"line":153,"column":12},"end":{"line":157,"column":13}},"20":{"start":{"line":154,"column":16},"end":{"line":154,"column":40}},"21":{"start":{"line":155,"column":19},"end":{"line":157,"column":13}},"22":{"start":{"line":156,"column":16},"end":{"line":156,"column":51}},"23":{"start":{"line":159,"column":12},"end":{"line":159,"column":72}},"24":{"start":{"line":161,"column":12},"end":{"line":164,"column":14}},"25":{"start":{"line":174,"column":8},"end":{"line":218,"column":9}},"26":{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},"27":{"start":{"line":176,"column":16},"end":{"line":176,"column":23}},"28":{"start":{"line":179,"column":12},"end":{"line":179,"column":36}},"29":{"start":{"line":180,"column":12},"end":{"line":180,"column":30}},"30":{"start":{"line":182,"column":12},"end":{"line":201,"column":13}},"31":{"start":{"line":184,"column":20},"end":{"line":184,"column":125}},"32":{"start":{"line":185,"column":20},"end":{"line":185,"column":69}},"33":{"start":{"line":186,"column":20},"end":{"line":186,"column":26}},"34":{"start":{"line":188,"column":20},"end":{"line":188,"column":43}},"35":{"start":{"line":189,"column":20},"end":{"line":189,"column":26}},"36":{"start":{"line":192,"column":20},"end":{"line":192,"column":45}},"37":{"start":{"line":193,"column":20},"end":{"line":193,"column":26}},"38":{"start":{"line":195,"column":20},"end":{"line":197,"column":21}},"39":{"start":{"line":196,"column":24},"end":{"line":196,"column":79}},"40":{"start":{"line":198,"column":20},"end":{"line":198,"column":26}},"41":{"start":{"line":200,"column":20},"end":{"line":200,"column":69}},"42":{"start":{"line":203,"column":12},"end":{"line":203,"column":65}},"43":{"start":{"line":205,"column":12},"end":{"line":217,"column":15}},"44":{"start":{"line":206,"column":16},"end":{"line":216,"column":17}},"45":{"start":{"line":208,"column":20},"end":{"line":215,"column":23}},"46":{"start":{"line":226,"column":8},"end":{"line":388,"column":9}},"47":{"start":{"line":227,"column":12},"end":{"line":229,"column":45}},"48":{"start":{"line":230,"column":12},"end":{"line":235,"column":22}},"49":{"start":{"line":238,"column":12},"end":{"line":386,"column":13}},"50":{"start":{"line":240,"column":16},"end":{"line":255,"column":17}},"51":{"start":{"line":241,"column":20},"end":{"line":245,"column":23}},"52":{"start":{"line":248,"column":20},"end":{"line":252,"column":21}},"53":{"start":{"line":249,"column":24},"end":{"line":249,"column":98}},"54":{"start":{"line":251,"column":24},"end":{"line":251,"column":92}},"55":{"start":{"line":254,"column":20},"end":{"line":254,"column":27}},"56":{"start":{"line":257,"column":16},"end":{"line":334,"column":19}},"57":{"start":{"line":259,"column":20},"end":{"line":323,"column":21}},"58":{"start":{"line":264,"column":28},"end":{"line":266,"column":29}},"59":{"start":{"line":265,"column":32},"end":{"line":265,"column":151}},"60":{"start":{"line":268,"column":28},"end":{"line":270,"column":29}},"61":{"start":{"line":269,"column":32},"end":{"line":269,"column":158}},"62":{"start":{"line":272,"column":28},"end":{"line":276,"column":29}},"63":{"start":{"line":273,"column":32},"end":{"line":273,"column":144}},"64":{"start":{"line":274,"column":35},"end":{"line":276,"column":29}},"65":{"start":{"line":275,"column":32},"end":{"line":275,"column":53}},"66":{"start":{"line":277,"column":28},"end":{"line":277,"column":34}},"67":{"start":{"line":281,"column":28},"end":{"line":281,"column":46}},"68":{"start":{"line":283,"column":28},"end":{"line":299,"column":29}},"69":{"start":{"line":284,"column":32},"end":{"line":290,"column":35}},"70":{"start":{"line":292,"column":32},"end":{"line":294,"column":33}},"71":{"start":{"line":293,"column":36},"end":{"line":293,"column":111}},"72":{"start":{"line":296,"column":32},"end":{"line":298,"column":33}},"73":{"start":{"line":297,"column":36},"end":{"line":297,"column":118}},"74":{"start":{"line":301,"column":28},"end":{"line":301,"column":34}},"75":{"start":{"line":305,"column":28},"end":{"line":305,"column":50}},"76":{"start":{"line":306,"column":28},"end":{"line":306,"column":34}},"77":{"start":{"line":310,"column":28},"end":{"line":310,"column":46}},"78":{"start":{"line":311,"column":28},"end":{"line":311,"column":34}},"79":{"start":{"line":315,"column":28},"end":{"line":315,"column":46}},"80":{"start":{"line":316,"column":28},"end":{"line":316,"column":34}},"81":{"start":{"line":319,"column":28},"end":{"line":319,"column":47}},"82":{"start":{"line":320,"column":28},"end":{"line":320,"column":34}},"83":{"start":{"line":326,"column":20},"end":{"line":328,"column":21}},"84":{"start":{"line":327,"column":24},"end":{"line":327,"column":130}},"85":{"start":{"line":331,"column":20},"end":{"line":333,"column":21}},"86":{"start":{"line":332,"column":24},"end":{"line":332,"column":58}},"87":{"start":{"line":337,"column":16},"end":{"line":349,"column":17}},"88":{"start":{"line":340,"column":20},"end":{"line":348,"column":21}},"89":{"start":{"line":341,"column":24},"end":{"line":347,"column":27}},"90":{"start":{"line":352,"column":16},"end":{"line":352,"column":56}},"91":{"start":{"line":354,"column":16},"end":{"line":376,"column":17}},"92":{"start":{"line":355,"column":20},"end":{"line":375,"column":23}},"93":{"start":{"line":356,"column":24},"end":{"line":358,"column":25}},"94":{"start":{"line":357,"column":28},"end":{"line":357,"column":47}},"95":{"start":{"line":360,"column":24},"end":{"line":360,"column":48}},"96":{"start":{"line":363,"column":24},"end":{"line":374,"column":25}},"97":{"start":{"line":364,"column":28},"end":{"line":373,"column":29}},"98":{"start":{"line":365,"column":32},"end":{"line":368,"column":37}},"99":{"start":{"line":369,"column":35},"end":{"line":373,"column":29}},"100":{"start":{"line":370,"column":32},"end":{"line":372,"column":37}},"101":{"start":{"line":378,"column":16},"end":{"line":384,"column":17}},"102":{"start":{"line":379,"column":20},"end":{"line":379,"column":71}},"103":{"start":{"line":381,"column":20},"end":{"line":383,"column":21}},"104":{"start":{"line":382,"column":24},"end":{"line":382,"column":126}},"105":{"start":{"line":394,"column":8},"end":{"line":406,"column":10}}},"branchMap":{"1":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":24},"end":{"line":64,"column":42}},{"start":{"line":64,"column":46},"end":{"line":64,"column":48}}]},"2":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":21},"end":{"line":65,"column":35}},{"start":{"line":65,"column":39},"end":{"line":65,"column":41}}]},"3":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":25},"end":{"line":73,"column":43}},{"start":{"line":73,"column":47},"end":{"line":73,"column":49}}]},"4":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":19},"end":{"line":90,"column":50}},{"start":{"line":90,"column":54},"end":{"line":90,"column":86}}]},"5":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":32},"end":{"line":101,"column":71}},{"start":{"line":101,"column":75},"end":{"line":101,"column":110}},{"start":{"line":102,"column":20},"end":{"line":102,"column":37}}]},"6":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":12}},{"start":{"line":115,"column":12},"end":{"line":115,"column":12}}]},"7":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":16},"end":{"line":115,"column":29}},{"start":{"line":115,"column":33},"end":{"line":115,"column":55}}]},"8":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":19},"end":{"line":127,"column":36}},{"start":{"line":127,"column":40},"end":{"line":127,"column":64}},{"start":{"line":127,"column":68},"end":{"line":127,"column":104}}]},"9":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":19},"end":{"line":137,"column":46}},{"start":{"line":138,"column":19},"end":{"line":138,"column":41}},{"start":{"line":139,"column":19},"end":{"line":139,"column":45}},{"start":{"line":140,"column":19},"end":{"line":140,"column":42}},{"start":{"line":141,"column":19},"end":{"line":141,"column":40}}]},"10":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":12},"end":{"line":153,"column":12}},{"start":{"line":153,"column":12},"end":{"line":153,"column":12}}]},"11":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":19},"end":{"line":155,"column":19}},{"start":{"line":155,"column":19},"end":{"line":155,"column":19}}]},"12":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":33},"end":{"line":159,"column":44}},{"start":{"line":159,"column":48},"end":{"line":159,"column":71}}]},"13":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":12},"end":{"line":175,"column":12}},{"start":{"line":175,"column":12},"end":{"line":175,"column":12}}]},"14":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":16},"end":{"line":175,"column":21}},{"start":{"line":175,"column":25},"end":{"line":175,"column":55}}]},"15":{"line":182,"type":"switch","locations":[{"start":{"line":183,"column":16},"end":{"line":186,"column":26}},{"start":{"line":187,"column":16},"end":{"line":189,"column":26}},{"start":{"line":190,"column":16},"end":{"line":190,"column":33}},{"start":{"line":191,"column":16},"end":{"line":193,"column":26}},{"start":{"line":194,"column":16},"end":{"line":198,"column":26}},{"start":{"line":199,"column":16},"end":{"line":200,"column":69}}]},"16":{"line":184,"type":"cond-expr","locations":[{"start":{"line":184,"column":75},"end":{"line":184,"column":104}},{"start":{"line":184,"column":107},"end":{"line":184,"column":124}}]},"17":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":20},"end":{"line":195,"column":20}},{"start":{"line":195,"column":20},"end":{"line":195,"column":20}}]},"18":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":16},"end":{"line":206,"column":16}},{"start":{"line":206,"column":16},"end":{"line":206,"column":16}}]},"19":{"line":206,"type":"binary-expr","locations":[{"start":{"line":206,"column":20},"end":{"line":206,"column":44}},{"start":{"line":207,"column":20},"end":{"line":207,"column":72}}]},"20":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":12},"end":{"line":238,"column":12}},{"start":{"line":238,"column":12},"end":{"line":238,"column":12}}]},"21":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":20},"end":{"line":248,"column":20}},{"start":{"line":248,"column":20},"end":{"line":248,"column":20}}]},"22":{"line":259,"type":"switch","locations":[{"start":{"line":261,"column":24},"end":{"line":261,"column":37}},{"start":{"line":262,"column":24},"end":{"line":262,"column":35}},{"start":{"line":263,"column":24},"end":{"line":277,"column":34}},{"start":{"line":279,"column":24},"end":{"line":279,"column":38}},{"start":{"line":280,"column":24},"end":{"line":301,"column":34}},{"start":{"line":303,"column":24},"end":{"line":303,"column":43}},{"start":{"line":304,"column":24},"end":{"line":306,"column":34}},{"start":{"line":308,"column":24},"end":{"line":308,"column":40}},{"start":{"line":309,"column":24},"end":{"line":311,"column":34}},{"start":{"line":313,"column":24},"end":{"line":313,"column":40}},{"start":{"line":314,"column":24},"end":{"line":316,"column":34}},{"start":{"line":318,"column":24},"end":{"line":320,"column":34}}]},"23":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":28},"end":{"line":264,"column":28}},{"start":{"line":264,"column":28},"end":{"line":264,"column":28}}]},"24":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":28},"end":{"line":268,"column":28}},{"start":{"line":268,"column":28},"end":{"line":268,"column":28}}]},"25":{"line":268,"type":"binary-expr","locations":[{"start":{"line":268,"column":32},"end":{"line":268,"column":48}},{"start":{"line":268,"column":52},"end":{"line":268,"column":75}}]},"26":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":28},"end":{"line":272,"column":28}},{"start":{"line":272,"column":28},"end":{"line":272,"column":28}}]},"27":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":35},"end":{"line":274,"column":35}},{"start":{"line":274,"column":35},"end":{"line":274,"column":35}}]},"28":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":28},"end":{"line":283,"column":28}},{"start":{"line":283,"column":28},"end":{"line":283,"column":28}}]},"29":{"line":283,"type":"binary-expr","locations":[{"start":{"line":283,"column":32},"end":{"line":283,"column":46}},{"start":{"line":283,"column":50},"end":{"line":283,"column":77}},{"start":{"line":283,"column":82},"end":{"line":283,"column":99}},{"start":{"line":283,"column":103},"end":{"line":283,"column":126}},{"start":{"line":283,"column":131},"end":{"line":283,"column":142}}]},"30":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":32},"end":{"line":292,"column":32}},{"start":{"line":292,"column":32},"end":{"line":292,"column":32}}]},"31":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":36},"end":{"line":292,"column":53}},{"start":{"line":292,"column":57},"end":{"line":292,"column":66}}]},"32":{"line":296,"type":"if","locations":[{"start":{"line":296,"column":32},"end":{"line":296,"column":32}},{"start":{"line":296,"column":32},"end":{"line":296,"column":32}}]},"33":{"line":296,"type":"binary-expr","locations":[{"start":{"line":296,"column":36},"end":{"line":296,"column":59}},{"start":{"line":296,"column":63},"end":{"line":296,"column":79}},{"start":{"line":296,"column":83},"end":{"line":296,"column":107}}]},"34":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":20},"end":{"line":326,"column":20}},{"start":{"line":326,"column":20},"end":{"line":326,"column":20}}]},"35":{"line":326,"type":"binary-expr","locations":[{"start":{"line":326,"column":24},"end":{"line":326,"column":56}},{"start":{"line":326,"column":60},"end":{"line":326,"column":91}}]},"36":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":20},"end":{"line":331,"column":20}},{"start":{"line":331,"column":20},"end":{"line":331,"column":20}}]},"37":{"line":331,"type":"binary-expr","locations":[{"start":{"line":331,"column":24},"end":{"line":331,"column":39}},{"start":{"line":331,"column":43},"end":{"line":331,"column":51}}]},"38":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":16},"end":{"line":337,"column":16}},{"start":{"line":337,"column":16},"end":{"line":337,"column":16}}]},"39":{"line":337,"type":"binary-expr","locations":[{"start":{"line":337,"column":20},"end":{"line":337,"column":31}},{"start":{"line":337,"column":35},"end":{"line":337,"column":46}},{"start":{"line":337,"column":50},"end":{"line":337,"column":65}},{"start":{"line":337,"column":69},"end":{"line":337,"column":81}},{"start":{"line":338,"column":20},"end":{"line":338,"column":46}},{"start":{"line":338,"column":50},"end":{"line":338,"column":84}},{"start":{"line":339,"column":20},"end":{"line":339,"column":46}},{"start":{"line":339,"column":50},"end":{"line":339,"column":68}}]},"40":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":20},"end":{"line":340,"column":20}},{"start":{"line":340,"column":20},"end":{"line":340,"column":20}}]},"41":{"line":340,"type":"binary-expr","locations":[{"start":{"line":340,"column":24},"end":{"line":340,"column":37}},{"start":{"line":340,"column":41},"end":{"line":340,"column":67}}]},"42":{"line":345,"type":"binary-expr","locations":[{"start":{"line":345,"column":41},"end":{"line":345,"column":55}},{"start":{"line":345,"column":59},"end":{"line":345,"column":68}}]},"43":{"line":354,"type":"if","locations":[{"start":{"line":354,"column":16},"end":{"line":354,"column":16}},{"start":{"line":354,"column":16},"end":{"line":354,"column":16}}]},"44":{"line":356,"type":"if","locations":[{"start":{"line":356,"column":24},"end":{"line":356,"column":24}},{"start":{"line":356,"column":24},"end":{"line":356,"column":24}}]},"45":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":24},"end":{"line":363,"column":24}},{"start":{"line":363,"column":24},"end":{"line":363,"column":24}}]},"46":{"line":364,"type":"if","locations":[{"start":{"line":364,"column":28},"end":{"line":364,"column":28}},{"start":{"line":364,"column":28},"end":{"line":364,"column":28}}]},"47":{"line":364,"type":"binary-expr","locations":[{"start":{"line":364,"column":32},"end":{"line":364,"column":46}},{"start":{"line":364,"column":51},"end":{"line":364,"column":74}}]},"48":{"line":369,"type":"if","locations":[{"start":{"line":369,"column":35},"end":{"line":369,"column":35}},{"start":{"line":369,"column":35},"end":{"line":369,"column":35}}]},"49":{"line":369,"type":"binary-expr","locations":[{"start":{"line":369,"column":39},"end":{"line":369,"column":52}},{"start":{"line":369,"column":56},"end":{"line":369,"column":67}}]},"50":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":16},"end":{"line":378,"column":16}},{"start":{"line":378,"column":16},"end":{"line":378,"column":16}}]},"51":{"line":381,"type":"if","locations":[{"start":{"line":381,"column":20},"end":{"line":381,"column":20}},{"start":{"line":381,"column":20},"end":{"line":381,"column":20}}]}},"code":["/**"," * @fileoverview Validates JSDoc comments are syntactically correct"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const doctrine = require(\"doctrine\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce valid JSDoc comments\",","            category: \"Possible Errors\",","            recommended: false","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    prefer: {","                        type: \"object\",","                        additionalProperties: {","                            type: \"string\"","                        }","                    },","                    preferType: {","                        type: \"object\",","                        additionalProperties: {","                            type: \"string\"","                        }","                    },","                    requireReturn: {","                        type: \"boolean\"","                    },","                    requireParamDescription: {","                        type: \"boolean\"","                    },","                    requireReturnDescription: {","                        type: \"boolean\"","                    },","                    matchDescription: {","                        type: \"string\"","                    },","                    requireReturnType: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const options = context.options[0] || {},","            prefer = options.prefer || {},","            sourceCode = context.getSourceCode(),","","            // these both default to true, so you have to explicitly make them false","            requireReturn = options.requireReturn !== false,","            requireParamDescription = options.requireParamDescription !== false,","            requireReturnDescription = options.requireReturnDescription !== false,","            requireReturnType = options.requireReturnType !== false,","            preferType = options.preferType || {},","            checkPreferType = Object.keys(preferType).length !== 0;","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        // Using a stack to store if a function returns or not (handling nested functions)","        const fns = [];","","        /**","         * Check if node type is a Class","         * @param {ASTNode} node node to check.","         * @returns {boolean} True is its a class","         * @private","         */","        function isTypeClass(node) {","            return node.type === \"ClassExpression\" || node.type === \"ClassDeclaration\";","        }","","        /**","         * When parsing a new function, store it in our function stack.","         * @param {ASTNode} node A function node to check.","         * @returns {void}","         * @private","         */","        function startFunction(node) {","            fns.push({","                returnPresent: (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\") ||","                    isTypeClass(node)","            });","        }","","        /**","         * Indicate that return has been found in the current function.","         * @param {ASTNode} node The return node.","         * @returns {void}","         * @private","         */","        function addReturn(node) {","            const functionState = fns[fns.length - 1];","","            if (functionState && node.argument !== null) {","                functionState.returnPresent = true;","            }","        }","","        /**","         * Check if return tag type is void or undefined","         * @param {Object} tag JSDoc tag","         * @returns {boolean} True if its of type void or undefined","         * @private","         */","        function isValidReturnType(tag) {","            return tag.type === null || tag.type.name === \"void\" || tag.type.type === \"UndefinedLiteral\";","        }","","        /**","         * Check if type should be validated based on some exceptions","         * @param {Object} type JSDoc tag","         * @returns {boolean} True if it can be validated","         * @private","         */","        function canTypeBeValidated(type) {","            return type !== \"UndefinedLiteral\" && // {undefined} as there is no name property available.","                   type !== \"NullLiteral\" && // {null}","                   type !== \"NullableLiteral\" && // {?}","                   type !== \"FunctionType\" && // {function(a)}","                   type !== \"AllLiteral\"; // {*}","        }","","        /**","         * Extract the current and expected type based on the input type object","         * @param {Object} type JSDoc tag","         * @returns {Object} current and expected type object","         * @private","         */","        function getCurrentExpectedTypes(type) {","            let currentType;","","            if (type.name) {","                currentType = type.name;","            } else if (type.expression) {","                currentType = type.expression.name;","            }","","            const expectedType = currentType && preferType[currentType];","","            return {","                currentType,","                expectedType","            };","        }","","        /**","         * Validate type for a given JSDoc node","         * @param {Object} jsdocNode JSDoc node","         * @param {Object} type JSDoc tag","         * @returns {void}","         * @private","         */","        function validateType(jsdocNode, type) {","            if (!type || !canTypeBeValidated(type.type)) {","                return;","            }","","            const typesToCheck = [];","            let elements = [];","","            switch (type.type) {","                case \"TypeApplication\":  // {Array.<String>}","                    elements = type.applications[0].type === \"UnionType\" ? type.applications[0].elements : type.applications;","                    typesToCheck.push(getCurrentExpectedTypes(type));","                    break;","                case \"RecordType\":  // {{20:String}}","                    elements = type.fields;","                    break;","                case \"UnionType\":  // {String|number|Test}","                case \"ArrayType\":  // {[String, number, Test]}","                    elements = type.elements;","                    break;","                case \"FieldType\":  // Array.<{count: number, votes: number}>","                    if (type.value) {","                        typesToCheck.push(getCurrentExpectedTypes(type.value));","                    }","                    break;","                default:","                    typesToCheck.push(getCurrentExpectedTypes(type));","            }","","            elements.forEach(validateType.bind(null, jsdocNode));","","            typesToCheck.forEach(typeToCheck => {","                if (typeToCheck.expectedType &&","                    typeToCheck.expectedType !== typeToCheck.currentType) {","                    context.report({","                        node: jsdocNode,","                        message: \"Use '{{expectedType}}' instead of '{{currentType}}'.\",","                        data: {","                            currentType: typeToCheck.currentType,","                            expectedType: typeToCheck.expectedType","                        }","                    });","                }","            });","        }","","        /**","         * Validate the JSDoc node and output warnings if anything is wrong.","         * @param {ASTNode} node The AST node to check.","         * @returns {void}","         * @private","         */","        function checkJSDoc(node) {","            const jsdocNode = sourceCode.getJSDocComment(node),","                functionData = fns.pop(),","                params = Object.create(null);","            let hasReturns = false,","                hasConstructor = false,","                isInterface = false,","                isOverride = false,","                isAbstract = false,","                jsdoc;","","            // make sure only to validate JSDoc comments","            if (jsdocNode) {","","                try {","                    jsdoc = doctrine.parse(jsdocNode.value, {","                        strict: true,","                        unwrap: true,","                        sloppy: true","                    });","                } catch (ex) {","","                    if (/braces/i.test(ex.message)) {","                        context.report({ node: jsdocNode, message: \"JSDoc type missing brace.\" });","                    } else {","                        context.report({ node: jsdocNode, message: \"JSDoc syntax error.\" });","                    }","","                    return;","                }","","                jsdoc.tags.forEach(tag => {","","                    switch (tag.title.toLowerCase()) {","","                        case \"param\":","                        case \"arg\":","                        case \"argument\":","                            if (!tag.type) {","                                context.report({ node: jsdocNode, message: \"Missing JSDoc parameter type for '{{name}}'.\", data: { name: tag.name } });","                            }","","                            if (!tag.description && requireParamDescription) {","                                context.report({ node: jsdocNode, message: \"Missing JSDoc parameter description for '{{name}}'.\", data: { name: tag.name } });","                            }","","                            if (params[tag.name]) {","                                context.report({ node: jsdocNode, message: \"Duplicate JSDoc parameter '{{name}}'.\", data: { name: tag.name } });","                            } else if (tag.name.indexOf(\".\") === -1) {","                                params[tag.name] = 1;","                            }","                            break;","","                        case \"return\":","                        case \"returns\":","                            hasReturns = true;","","                            if (!requireReturn && !functionData.returnPresent && (tag.type === null || !isValidReturnType(tag)) && !isAbstract) {","                                context.report({","                                    node: jsdocNode,","                                    message: \"Unexpected @{{title}} tag; function has no return statement.\",","                                    data: {","                                        title: tag.title","                                    }","                                });","                            } else {","                                if (requireReturnType && !tag.type) {","                                    context.report({ node: jsdocNode, message: \"Missing JSDoc return type.\" });","                                }","","                                if (!isValidReturnType(tag) && !tag.description && requireReturnDescription) {","                                    context.report({ node: jsdocNode, message: \"Missing JSDoc return description.\" });","                                }","                            }","","                            break;","","                        case \"constructor\":","                        case \"class\":","                            hasConstructor = true;","                            break;","","                        case \"override\":","                        case \"inheritdoc\":","                            isOverride = true;","                            break;","","                        case \"abstract\":","                        case \"virtual\":","                            isAbstract = true;","                            break;","","                        case \"interface\":","                            isInterface = true;","                            break;","","                        // no default","                    }","","                    // check tag preferences","                    if (prefer.hasOwnProperty(tag.title) && tag.title !== prefer[tag.title]) {","                        context.report({ node: jsdocNode, message: \"Use @{{name}} instead.\", data: { name: prefer[tag.title] } });","                    }","","                    // validate the types","                    if (checkPreferType && tag.type) {","                        validateType(jsdocNode, tag.type);","                    }","                });","","                // check for functions missing @returns","                if (!isOverride && !hasReturns && !hasConstructor && !isInterface &&","                    node.parent.kind !== \"get\" && node.parent.kind !== \"constructor\" &&","                    node.parent.kind !== \"set\" && !isTypeClass(node)) {","                    if (requireReturn || functionData.returnPresent) {","                        context.report({","                            node: jsdocNode,","                            message: \"Missing JSDoc @{{returns}} for function.\",","                            data: {","                                returns: prefer.returns || \"returns\"","                            }","                        });","                    }","                }","","                // check the parameters","                const jsdocParams = Object.keys(params);","","                if (node.params) {","                    node.params.forEach((param, i) => {","                        if (param.type === \"AssignmentPattern\") {","                            param = param.left;","                        }","","                        const name = param.name;","","                        // TODO(nzakas): Figure out logical things to do with destructured, default, rest params","                        if (param.type === \"Identifier\") {","                            if (jsdocParams[i] && (name !== jsdocParams[i])) {","                                context.report({ node: jsdocNode, message: \"Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.\", data: {","                                    name,","                                    jsdocName: jsdocParams[i]","                                } });","                            } else if (!params[name] && !isOverride) {","                                context.report({ node: jsdocNode, message: \"Missing JSDoc for parameter '{{name}}'.\", data: {","                                    name","                                } });","                            }","                        }","                    });","                }","","                if (options.matchDescription) {","                    const regex = new RegExp(options.matchDescription);","","                    if (!regex.test(jsdoc.description)) {","                        context.report({ node: jsdocNode, message: \"JSDoc description does not satisfy the regex pattern.\" });","                    }","                }","","            }","","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            ArrowFunctionExpression: startFunction,","            FunctionExpression: startFunction,","            FunctionDeclaration: startFunction,","            ClassExpression: startFunction,","            ClassDeclaration: startFunction,","            \"ArrowFunctionExpression:exit\": checkJSDoc,","            \"FunctionExpression:exit\": checkJSDoc,","            \"FunctionDeclaration:exit\": checkJSDoc,","            \"ClassExpression:exit\": checkJSDoc,","            \"ClassDeclaration:exit\": checkJSDoc,","            ReturnStatement: addReturn","        };","","    }","};",""],"l":{"11":1,"17":1,"64":0,"81":0,"89":1,"90":0,"99":1,"100":0,"112":1,"113":0,"115":0,"116":0,"126":1,"127":0,"136":1,"137":0,"150":1,"151":0,"153":0,"154":0,"155":0,"156":0,"159":0,"161":0,"174":1,"175":0,"176":0,"179":0,"180":0,"182":0,"184":0,"185":0,"186":0,"188":0,"189":0,"192":0,"193":0,"195":0,"196":0,"198":0,"200":0,"203":0,"205":0,"206":0,"208":0,"226":1,"227":0,"230":0,"238":0,"240":0,"241":0,"248":0,"249":0,"251":0,"254":0,"257":0,"259":0,"264":0,"265":0,"268":0,"269":0,"272":0,"273":0,"274":0,"275":0,"277":0,"281":0,"283":0,"284":0,"292":0,"293":0,"296":0,"297":0,"301":0,"305":0,"306":0,"310":0,"311":0,"315":0,"316":0,"319":0,"320":0,"326":0,"327":0,"331":0,"332":0,"337":0,"340":0,"341":0,"352":0,"354":0,"355":0,"356":0,"357":0,"360":0,"363":0,"364":0,"365":0,"369":0,"370":0,"378":0,"379":0,"381":0,"382":0,"394":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/valid-typeof.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/valid-typeof.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":32,"loc":{"start":{"line":32,"column":10},"end":{"line":32,"column":20}}},"2":{"name":"isTypeofExpression","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":42}}},"3":{"name":"(anonymous_3)","line":54,"loc":{"start":{"line":54,"column":27},"end":{"line":54,"column":34}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":77,"column":2}},"2":{"start":{"line":34,"column":8},"end":{"line":35,"column":51}},"3":{"start":{"line":37,"column":8},"end":{"line":37,"column":101}},"4":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"5":{"start":{"line":45,"column":12},"end":{"line":45,"column":81}},"6":{"start":{"line":52,"column":8},"end":{"line":74,"column":10}},"7":{"start":{"line":55,"column":16},"end":{"line":71,"column":17}},"8":{"start":{"line":56,"column":20},"end":{"line":56,"column":64}},"9":{"start":{"line":58,"column":20},"end":{"line":70,"column":21}},"10":{"start":{"line":59,"column":24},"end":{"line":59,"column":90}},"11":{"start":{"line":61,"column":24},"end":{"line":69,"column":25}},"12":{"start":{"line":62,"column":28},"end":{"line":62,"column":118}},"13":{"start":{"line":64,"column":28},"end":{"line":66,"column":29}},"14":{"start":{"line":65,"column":32},"end":{"line":65,"column":111}},"15":{"start":{"line":67,"column":31},"end":{"line":69,"column":25}},"16":{"start":{"line":68,"column":28},"end":{"line":68,"column":123}}},"branchMap":{"1":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":38},"end":{"line":37,"column":56}},{"start":{"line":37,"column":60},"end":{"line":37,"column":100}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":19},"end":{"line":45,"column":50}},{"start":{"line":45,"column":54},"end":{"line":45,"column":80}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":16}},{"start":{"line":55,"column":16},"end":{"line":55,"column":16}}]},"4":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":20},"end":{"line":58,"column":20}},{"start":{"line":58,"column":20},"end":{"line":58,"column":20}}]},"5":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":24},"end":{"line":58,"column":58}},{"start":{"line":58,"column":62},"end":{"line":58,"column":103}}]},"6":{"line":59,"type":"cond-expr","locations":[{"start":{"line":59,"column":63},"end":{"line":59,"column":75}},{"start":{"line":59,"column":78},"end":{"line":59,"column":89}}]},"7":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":24},"end":{"line":61,"column":24}},{"start":{"line":61,"column":24},"end":{"line":61,"column":24}}]},"8":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":28},"end":{"line":61,"column":54}},{"start":{"line":61,"column":58},"end":{"line":61,"column":92}},{"start":{"line":61,"column":96},"end":{"line":61,"column":123}}]},"9":{"line":62,"type":"cond-expr","locations":[{"start":{"line":62,"column":71},"end":{"line":62,"column":84}},{"start":{"line":62,"column":87},"end":{"line":62,"column":117}}]},"10":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":28},"end":{"line":64,"column":28}},{"start":{"line":64,"column":28},"end":{"line":64,"column":28}}]},"11":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":31},"end":{"line":67,"column":31}},{"start":{"line":67,"column":31},"end":{"line":67,"column":31}}]},"12":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":35},"end":{"line":67,"column":56}},{"start":{"line":67,"column":60},"end":{"line":67,"column":88}}]}},"code":["/**"," * @fileoverview Ensures that the results of typeof are compared against a valid string"," * @author Ian Christian Myers"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce comparing `typeof` expressions against valid strings\",","            category: \"Possible Errors\",","            recommended: true","        },","","        schema: [","            {","                type: \"object\",","                properties: {","                    requireStringLiterals: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ]","    },","","    create(context) {","","        const VALID_TYPES = [\"symbol\", \"undefined\", \"object\", \"boolean\", \"number\", \"string\", \"function\"],","            OPERATORS = [\"==\", \"===\", \"!=\", \"!==\"];","","        const requireStringLiterals = context.options[0] && context.options[0].requireStringLiterals;","","        /**","        * Determines whether a node is a typeof expression.","        * @param {ASTNode} node The node","        * @returns {boolean} `true` if the node is a typeof expression","        */","        function isTypeofExpression(node) {","            return node.type === \"UnaryExpression\" && node.operator === \"typeof\";","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","","            UnaryExpression(node) {","                if (isTypeofExpression(node)) {","                    const parent = context.getAncestors().pop();","","                    if (parent.type === \"BinaryExpression\" && OPERATORS.indexOf(parent.operator) !== -1) {","                        const sibling = parent.left === node ? parent.right : parent.left;","","                        if (sibling.type === \"Literal\" || sibling.type === \"TemplateLiteral\" && !sibling.expressions.length) {","                            const value = sibling.type === \"Literal\" ? sibling.value : sibling.quasis[0].value.cooked;","","                            if (VALID_TYPES.indexOf(value) === -1) {","                                context.report({ node: sibling, message: \"Invalid typeof comparison value.\" });","                            }","                        } else if (requireStringLiterals && !isTypeofExpression(sibling)) {","                            context.report({ node: sibling, message: \"Typeof comparisons should be to string literals.\" });","                        }","                    }","                }","            }","","        };","","    }","};",""],"l":{"11":1,"34":0,"37":0,"44":1,"45":0,"52":0,"55":0,"56":0,"58":0,"59":0,"61":0,"62":0,"64":0,"65":0,"67":0,"68":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/vars-on-top.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/vars-on-top.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},"b":{"1":[0,0,0],"2":[0,0,0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":20}}},"2":{"name":"looksLikeDirective","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":42}}},"3":{"name":"looksLikeImport","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":39}}},"4":{"name":"isVariableDeclaration","line":55,"loc":{"start":{"line":55,"column":8},"end":{"line":55,"column":45}}},"5":{"name":"isVarOnTop","line":72,"loc":{"start":{"line":72,"column":8},"end":{"line":72,"column":46}}},"6":{"name":"globalVarCheck","line":101,"loc":{"start":{"line":101,"column":8},"end":{"line":101,"column":46}}},"7":{"name":"blockScopeVarCheck","line":114,"loc":{"start":{"line":114,"column":8},"end":{"line":114,"column":63}}},"8":{"name":"(anonymous_8)","line":127,"loc":{"start":{"line":127,"column":31},"end":{"line":127,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":149,"column":2}},"2":{"start":{"line":24,"column":8},"end":{"line":24,"column":96}},"3":{"start":{"line":34,"column":8},"end":{"line":37,"column":9}},"4":{"start":{"line":35,"column":12},"end":{"line":36,"column":96}},"5":{"start":{"line":44,"column":8},"end":{"line":47,"column":9}},"6":{"start":{"line":45,"column":12},"end":{"line":46,"column":99}},"7":{"start":{"line":55,"column":8},"end":{"line":64,"column":9}},"8":{"start":{"line":56,"column":12},"end":{"line":63,"column":14}},"9":{"start":{"line":72,"column":8},"end":{"line":93,"column":9}},"10":{"start":{"line":73,"column":12},"end":{"line":73,"column":40}},"11":{"start":{"line":74,"column":12},"end":{"line":74,"column":22}},"12":{"start":{"line":77,"column":12},"end":{"line":81,"column":13}},"13":{"start":{"line":78,"column":16},"end":{"line":80,"column":17}},"14":{"start":{"line":79,"column":20},"end":{"line":79,"column":26}},"15":{"start":{"line":83,"column":12},"end":{"line":90,"column":13}},"16":{"start":{"line":84,"column":16},"end":{"line":86,"column":17}},"17":{"start":{"line":85,"column":20},"end":{"line":85,"column":33}},"18":{"start":{"line":87,"column":16},"end":{"line":89,"column":17}},"19":{"start":{"line":88,"column":20},"end":{"line":88,"column":32}},"20":{"start":{"line":92,"column":12},"end":{"line":92,"column":25}},"21":{"start":{"line":101,"column":8},"end":{"line":105,"column":9}},"22":{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},"23":{"start":{"line":103,"column":16},"end":{"line":103,"column":64}},"24":{"start":{"line":114,"column":8},"end":{"line":120,"column":9}},"25":{"start":{"line":115,"column":12},"end":{"line":119,"column":13}},"26":{"start":{"line":118,"column":16},"end":{"line":118,"column":64}},"27":{"start":{"line":126,"column":8},"end":{"line":146,"column":10}},"28":{"start":{"line":128,"column":16},"end":{"line":128,"column":57}},"29":{"start":{"line":129,"column":16},"end":{"line":129,"column":45}},"30":{"start":{"line":130,"column":16},"end":{"line":130,"column":50}},"31":{"start":{"line":132,"column":16},"end":{"line":144,"column":17}},"32":{"start":{"line":133,"column":20},"end":{"line":137,"column":21}},"33":{"start":{"line":134,"column":24},"end":{"line":134,"column":38}},"34":{"start":{"line":135,"column":24},"end":{"line":135,"column":45}},"35":{"start":{"line":136,"column":24},"end":{"line":136,"column":54}},"36":{"start":{"line":139,"column":20},"end":{"line":143,"column":21}},"37":{"start":{"line":140,"column":24},"end":{"line":140,"column":53}},"38":{"start":{"line":142,"column":24},"end":{"line":142,"column":70}}},"branchMap":{"1":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":19},"end":{"line":35,"column":54}},{"start":{"line":36,"column":16},"end":{"line":36,"column":50}},{"start":{"line":36,"column":54},"end":{"line":36,"column":95}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":19},"end":{"line":45,"column":52}},{"start":{"line":45,"column":56},"end":{"line":45,"column":87}},{"start":{"line":46,"column":16},"end":{"line":46,"column":54}},{"start":{"line":46,"column":58},"end":{"line":46,"column":98}}]},"3":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":51}},{"start":{"line":59,"column":20},"end":{"line":59,"column":58}},{"start":{"line":60,"column":20},"end":{"line":60,"column":36}},{"start":{"line":61,"column":20},"end":{"line":61,"column":67}}]},"4":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":16},"end":{"line":78,"column":16}},{"start":{"line":78,"column":16},"end":{"line":78,"column":16}}]},"5":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":20},"end":{"line":78,"column":54}},{"start":{"line":78,"column":58},"end":{"line":78,"column":89}}]},"6":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":16},"end":{"line":84,"column":16}},{"start":{"line":84,"column":16},"end":{"line":84,"column":16}}]},"7":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":16},"end":{"line":87,"column":16}},{"start":{"line":87,"column":16},"end":{"line":87,"column":16}}]},"8":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":102,"column":12}},{"start":{"line":102,"column":12},"end":{"line":102,"column":12}}]},"9":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":12}},{"start":{"line":115,"column":12},"end":{"line":115,"column":12}}]},"10":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":18},"end":{"line":115,"column":51}},{"start":{"line":116,"column":20},"end":{"line":116,"column":52}},{"start":{"line":117,"column":20},"end":{"line":117,"column":49}}]},"11":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":16},"end":{"line":132,"column":16}},{"start":{"line":132,"column":16},"end":{"line":132,"column":16}}]},"12":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":20},"end":{"line":133,"column":20}},{"start":{"line":133,"column":20},"end":{"line":133,"column":20}}]},"13":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":20},"end":{"line":139,"column":20}},{"start":{"line":139,"column":20},"end":{"line":139,"column":20}}]}},"code":["/**"," * @fileoverview Rule to enforce var declarations are only at the top of a function."," * @author Danny Fritz"," * @author Gyandeep Singh"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require `var` declarations be placed at the top of their containing scope\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        const errorMessage = \"All 'var' declarations must be at the top of the function scope.\";","","        //--------------------------------------------------------------------------","        // Helpers","        //--------------------------------------------------------------------------","","        /**","         * @param {ASTNode} node - any node","         * @returns {boolean} whether the given node structurally represents a directive","         */","        function looksLikeDirective(node) {","            return node.type === \"ExpressionStatement\" &&","                node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";","        }","","        /**","         * Check to see if its a ES6 import declaration","         * @param {ASTNode} node - any node","         * @returns {boolean} whether the given node represents a import declaration","         */","        function looksLikeImport(node) {","            return node.type === \"ImportDeclaration\" || node.type === \"ImportSpecifier\" ||","                node.type === \"ImportDefaultSpecifier\" || node.type === \"ImportNamespaceSpecifier\";","        }","","        /**","         * Checks whether a given node is a variable declaration or not.","         *","         * @param {ASTNode} node - any node","         * @returns {boolean} `true` if the node is a variable declaration.","         */","        function isVariableDeclaration(node) {","            return (","                node.type === \"VariableDeclaration\" ||","                (","                    node.type === \"ExportNamedDeclaration\" &&","                    node.declaration &&","                    node.declaration.type === \"VariableDeclaration\"","                )","            );","        }","","        /**","         * Checks whether this variable is on top of the block body","         * @param {ASTNode} node - The node to check","         * @param {ASTNode[]} statements - collection of ASTNodes for the parent node block","         * @returns {boolean} True if var is on top otherwise false","         */","        function isVarOnTop(node, statements) {","            const l = statements.length;","            let i = 0;","","            // skip over directives","            for (; i < l; ++i) {","                if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {","                    break;","                }","            }","","            for (; i < l; ++i) {","                if (!isVariableDeclaration(statements[i])) {","                    return false;","                }","                if (statements[i] === node) {","                    return true;","                }","            }","","            return false;","        }","","        /**","         * Checks whether variable is on top at the global level","         * @param {ASTNode} node - The node to check","         * @param {ASTNode} parent - Parent of the node","         * @returns {void}","         */","        function globalVarCheck(node, parent) {","            if (!isVarOnTop(node, parent.body)) {","                context.report({ node, message: errorMessage });","            }","        }","","        /**","         * Checks whether variable is on top at functional block scope level","         * @param {ASTNode} node - The node to check","         * @param {ASTNode} parent - Parent of the node","         * @param {ASTNode} grandParent - Parent of the node's parent","         * @returns {void}","         */","        function blockScopeVarCheck(node, parent, grandParent) {","            if (!(/Function/.test(grandParent.type) &&","                    parent.type === \"BlockStatement\" &&","                    isVarOnTop(node, parent.body))) {","                context.report({ node, message: errorMessage });","            }","        }","","        //--------------------------------------------------------------------------","        // Public API","        //--------------------------------------------------------------------------","","        return {","            VariableDeclaration(node) {","                const ancestors = context.getAncestors();","                let parent = ancestors.pop();","                let grandParent = ancestors.pop();","","                if (node.kind === \"var\") { // check variable is `var` type and not `let` or `const`","                    if (parent.type === \"ExportNamedDeclaration\") {","                        node = parent;","                        parent = grandParent;","                        grandParent = ancestors.pop();","                    }","","                    if (parent.type === \"Program\") { // That means its a global variable","                        globalVarCheck(node, parent);","                    } else {","                        blockScopeVarCheck(node, parent, grandParent);","                    }","                }","            }","        };","","    }","};",""],"l":{"12":1,"24":0,"34":1,"35":0,"44":1,"45":0,"55":1,"56":0,"72":1,"73":0,"74":0,"77":0,"78":0,"79":0,"83":0,"84":0,"85":0,"87":0,"88":0,"92":0,"101":1,"102":0,"103":0,"114":1,"115":0,"118":0,"126":0,"128":0,"129":0,"130":0,"132":0,"133":0,"134":0,"135":0,"136":0,"139":0,"140":0,"142":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/wrap-iife.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/wrap-iife.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":44,"loc":{"start":{"line":44,"column":10},"end":{"line":44,"column":20}}},"2":{"name":"wrapped","line":57,"loc":{"start":{"line":57,"column":8},"end":{"line":57,"column":31}}},"3":{"name":"getFunctionNodeFromIIFE","line":66,"loc":{"start":{"line":66,"column":8},"end":{"line":66,"column":47}}},"4":{"name":"(anonymous_4)","line":86,"loc":{"start":{"line":86,"column":26},"end":{"line":86,"column":33}}},"5":{"name":"(anonymous_5)","line":100,"loc":{"start":{"line":100,"column":27},"end":{"line":100,"column":35}}},"6":{"name":"(anonymous_6)","line":110,"loc":{"start":{"line":110,"column":27},"end":{"line":110,"column":35}}},"7":{"name":"(anonymous_7)","line":130,"loc":{"start":{"line":130,"column":27},"end":{"line":130,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":18,"column":0},"end":{"line":151,"column":2}},"3":{"start":{"line":46,"column":8},"end":{"line":46,"column":54}},"4":{"start":{"line":47,"column":8},"end":{"line":47,"column":125}},"5":{"start":{"line":49,"column":8},"end":{"line":49,"column":51}},"6":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"7":{"start":{"line":58,"column":12},"end":{"line":58,"column":62}},"8":{"start":{"line":66,"column":8},"end":{"line":82,"column":9}},"9":{"start":{"line":67,"column":12},"end":{"line":67,"column":39}},"10":{"start":{"line":69,"column":12},"end":{"line":71,"column":13}},"11":{"start":{"line":70,"column":16},"end":{"line":70,"column":30}},"12":{"start":{"line":73,"column":12},"end":{"line":79,"column":13}},"13":{"start":{"line":78,"column":16},"end":{"line":78,"column":37}},"14":{"start":{"line":81,"column":12},"end":{"line":81,"column":24}},"15":{"start":{"line":85,"column":8},"end":{"line":148,"column":10}},"16":{"start":{"line":87,"column":16},"end":{"line":87,"column":64}},"17":{"start":{"line":89,"column":16},"end":{"line":91,"column":17}},"18":{"start":{"line":90,"column":20},"end":{"line":90,"column":27}},"19":{"start":{"line":93,"column":16},"end":{"line":94,"column":67}},"20":{"start":{"line":96,"column":16},"end":{"line":146,"column":17}},"21":{"start":{"line":97,"column":20},"end":{"line":105,"column":23}},"22":{"start":{"line":101,"column":28},"end":{"line":101,"column":89}},"23":{"start":{"line":103,"column":28},"end":{"line":103,"column":112}},"24":{"start":{"line":106,"column":23},"end":{"line":146,"column":17}},"25":{"start":{"line":107,"column":20},"end":{"line":125,"column":23}},"26":{"start":{"line":118,"column":28},"end":{"line":118,"column":78}},"27":{"start":{"line":120,"column":28},"end":{"line":123,"column":30}},"28":{"start":{"line":126,"column":23},"end":{"line":146,"column":17}},"29":{"start":{"line":127,"column":20},"end":{"line":145,"column":23}},"30":{"start":{"line":138,"column":28},"end":{"line":138,"column":83}},"31":{"start":{"line":140,"column":28},"end":{"line":143,"column":30}}},"branchMap":{"1":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":22},"end":{"line":46,"column":40}},{"start":{"line":46,"column":44},"end":{"line":46,"column":53}}]},"2":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":49},"end":{"line":47,"column":67}},{"start":{"line":47,"column":71},"end":{"line":47,"column":114}},{"start":{"line":47,"column":119},"end":{"line":47,"column":124}}]},"3":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":12},"end":{"line":69,"column":12}},{"start":{"line":69,"column":12},"end":{"line":69,"column":12}}]},"4":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":12},"end":{"line":73,"column":12}},{"start":{"line":73,"column":12},"end":{"line":73,"column":12}}]},"5":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":16},"end":{"line":73,"column":47}},{"start":{"line":74,"column":16},"end":{"line":74,"column":50}},{"start":{"line":75,"column":16},"end":{"line":75,"column":59}},{"start":{"line":76,"column":17},"end":{"line":76,"column":66}},{"start":{"line":76,"column":70},"end":{"line":76,"column":120}}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":16},"end":{"line":89,"column":16}},{"start":{"line":89,"column":16},"end":{"line":89,"column":16}}]},"7":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":16}},{"start":{"line":96,"column":16},"end":{"line":96,"column":16}}]},"8":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":20},"end":{"line":96,"column":42}},{"start":{"line":96,"column":46},"end":{"line":96,"column":72}}]},"9":{"line":101,"type":"cond-expr","locations":[{"start":{"line":101,"column":72},"end":{"line":101,"column":81}},{"start":{"line":101,"column":84},"end":{"line":101,"column":88}}]},"10":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":23},"end":{"line":106,"column":23}},{"start":{"line":106,"column":23},"end":{"line":106,"column":23}}]},"11":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":27},"end":{"line":106,"column":45}},{"start":{"line":106,"column":49},"end":{"line":106,"column":75}}]},"12":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":23},"end":{"line":126,"column":23}},{"start":{"line":126,"column":23},"end":{"line":126,"column":23}}]},"13":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":27},"end":{"line":126,"column":46}},{"start":{"line":126,"column":50},"end":{"line":126,"column":72}}]}},"code":["/**"," * @fileoverview Rule to flag when IIFE is not wrapped in parens"," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require parentheses around immediate `function` invocations\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"outside\", \"inside\", \"any\"]","            },","            {","                type: \"object\",","                properties: {","                    functionPrototypeMethods: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","","        const style = context.options[0] || \"outside\";","        const includeFunctionPrototypeMethods = (context.options[1] && context.options[1].functionPrototypeMethods) || false;","","        const sourceCode = context.getSourceCode();","","        /**","         * Check if the node is wrapped in ()","         * @param {ASTNode} node node to evaluate","         * @returns {boolean} True if it is wrapped","         * @private","         */","        function wrapped(node) {","            return astUtils.isParenthesised(sourceCode, node);","        }","","        /**","        * Get the function node from an IIFE","        * @param {ASTNode} node node to evaluate","        * @returns {ASTNode} node that is the function expression of the given IIFE, or null if none exist","        */","        function getFunctionNodeFromIIFE(node) {","            const callee = node.callee;","","            if (callee.type === \"FunctionExpression\") {","                return callee;","            }","","            if (includeFunctionPrototypeMethods &&","                callee.type === \"MemberExpression\" &&","                callee.object.type === \"FunctionExpression\" &&","                (astUtils.getStaticPropertyName(callee) === \"call\" || astUtils.getStaticPropertyName(callee) === \"apply\")","            ) {","                return callee.object;","            }","","            return null;","        }","","","        return {","            CallExpression(node) {","                const innerNode = getFunctionNodeFromIIFE(node);","","                if (!innerNode) {","                    return;","                }","","                const callExpressionWrapped = wrapped(node),","                    functionExpressionWrapped = wrapped(innerNode);","","                if (!callExpressionWrapped && !functionExpressionWrapped) {","                    context.report({","                        node,","                        message: \"Wrap an immediate function invocation in parentheses.\",","                        fix(fixer) {","                            const nodeToSurround = style === \"inside\" ? innerNode : node;","","                            return fixer.replaceText(nodeToSurround, `(${sourceCode.getText(nodeToSurround)})`);","                        }","                    });","                } else if (style === \"inside\" && !functionExpressionWrapped) {","                    context.report({","                        node,","                        message: \"Wrap only the function expression in parens.\",","                        fix(fixer) {","","                            /*","                             * The outer call expression will always be wrapped at this point.","                             * Replace the range between the end of the function expression and the end of the call expression.","                             * for example, in `(function(foo) {}(bar))`, the range `(bar))` should get replaced with `)(bar)`.","                             * Replace the parens from the outer expression, and parenthesize the function expression.","                             */","                            const parenAfter = sourceCode.getTokenAfter(node);","","                            return fixer.replaceTextRange(","                                [innerNode.range[1], parenAfter.range[1]],","                                `)${sourceCode.getText().slice(innerNode.range[1], parenAfter.range[0])}`","                            );","                        }","                    });","                } else if (style === \"outside\" && !callExpressionWrapped) {","                    context.report({","                        node,","                        message: \"Move the invocation into the parens that contain the function.\",","                        fix(fixer) {","","                            /*","                             * The inner function expression will always be wrapped at this point.","                             * It's only necessary to replace the range between the end of the function expression","                             * and the call expression. For example, in `(function(foo) {})(bar)`, the range `)(bar)`","                             * should get replaced with `(bar))`.","                             */","                            const parenAfter = sourceCode.getTokenAfter(innerNode);","","                            return fixer.replaceTextRange(","                                [parenAfter.range[0], node.range[1]],","                                `${sourceCode.getText().slice(parenAfter.range[1], node.range[1])})`","                            );","                        }","                    });","                }","            }","        };","","    }","};",""],"l":{"12":1,"18":1,"46":0,"47":0,"49":0,"57":1,"58":0,"66":1,"67":0,"69":0,"70":0,"73":0,"78":0,"81":0,"85":0,"87":0,"89":0,"90":0,"93":0,"96":0,"97":0,"101":0,"103":0,"106":0,"107":0,"118":0,"120":0,"126":0,"127":0,"138":0,"140":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/wrap-regex.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/wrap-regex.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":10},"end":{"line":25,"column":20}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":19},"end":{"line":30,"column":26}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":52,"column":2}},"2":{"start":{"line":26,"column":8},"end":{"line":26,"column":51}},"3":{"start":{"line":28,"column":8},"end":{"line":49,"column":10}},"4":{"start":{"line":31,"column":16},"end":{"line":32,"column":42}},"5":{"start":{"line":34,"column":16},"end":{"line":47,"column":17}},"6":{"start":{"line":35,"column":20},"end":{"line":35,"column":67}},"7":{"start":{"line":36,"column":20},"end":{"line":36,"column":61}},"8":{"start":{"line":37,"column":20},"end":{"line":37,"column":72}},"9":{"start":{"line":39,"column":20},"end":{"line":46,"column":21}},"10":{"start":{"line":41,"column":24},"end":{"line":45,"column":27}},"11":{"start":{"line":44,"column":42},"end":{"line":44,"column":98}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":16},"end":{"line":34,"column":16}},{"start":{"line":34,"column":16},"end":{"line":34,"column":16}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":20},"end":{"line":39,"column":20}},{"start":{"line":39,"column":20},"end":{"line":39,"column":20}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":24},"end":{"line":39,"column":63}},{"start":{"line":39,"column":67},"end":{"line":39,"column":94}},{"start":{"line":40,"column":25},"end":{"line":40,"column":32}},{"start":{"line":40,"column":36},"end":{"line":40,"column":56}}]}},"code":["/**"," * @fileoverview Rule to flag when regex literals are not wrapped in parens"," * @author Matt DuVall <http://www.mattduvall.com>"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require parenthesis around regex literals\",","            category: \"Stylistic Issues\",","            recommended: false","        },","","        schema: [],","","        fixable: \"code\"","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        return {","","            Literal(node) {","                const token = sourceCode.getFirstToken(node),","                    nodeType = token.type;","","                if (nodeType === \"RegularExpression\") {","                    const source = sourceCode.getTokenBefore(node);","                    const ancestors = context.getAncestors();","                    const grandparent = ancestors[ancestors.length - 1];","","                    if (grandparent.type === \"MemberExpression\" && grandparent.object === node &&","                        (!source || source.value !== \"(\")) {","                        context.report({","                            node,","                            message: \"Wrap the regexp literal in parens to disambiguate the slash.\",","                            fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)","                        });","                    }","                }","            }","        };","","    }","};",""],"l":{"12":1,"26":0,"28":0,"31":0,"34":0,"35":0,"36":0,"37":0,"39":0,"41":0,"44":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/yield-star-spacing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/yield-star-spacing.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":41,"loc":{"start":{"line":41,"column":10},"end":{"line":41,"column":20}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":39}}},"3":{"name":"checkSpacing","line":65,"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":59}}},"4":{"name":"(anonymous_4)","line":80,"loc":{"start":{"line":80,"column":23},"end":{"line":80,"column":31}}},"5":{"name":"checkExpression","line":98,"loc":{"start":{"line":98,"column":8},"end":{"line":98,"column":39}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":117,"column":2}},"2":{"start":{"line":42,"column":8},"end":{"line":42,"column":51}},"3":{"start":{"line":44,"column":8},"end":{"line":54,"column":31}},"4":{"start":{"line":45,"column":12},"end":{"line":52,"column":13}},"5":{"start":{"line":46,"column":16},"end":{"line":51,"column":37}},"6":{"start":{"line":53,"column":12},"end":{"line":53,"column":26}},"7":{"start":{"line":65,"column":8},"end":{"line":91,"column":9}},"8":{"start":{"line":66,"column":12},"end":{"line":90,"column":13}},"9":{"start":{"line":67,"column":16},"end":{"line":67,"column":54}},"10":{"start":{"line":68,"column":16},"end":{"line":68,"column":49}},"11":{"start":{"line":69,"column":16},"end":{"line":69,"column":60}},"12":{"start":{"line":70,"column":16},"end":{"line":70,"column":70}},"13":{"start":{"line":71,"column":16},"end":{"line":71,"column":61}},"14":{"start":{"line":73,"column":16},"end":{"line":89,"column":19}},"15":{"start":{"line":81,"column":24},"end":{"line":86,"column":25}},"16":{"start":{"line":82,"column":28},"end":{"line":84,"column":29}},"17":{"start":{"line":83,"column":32},"end":{"line":83,"column":72}},"18":{"start":{"line":85,"column":28},"end":{"line":85,"column":69}},"19":{"start":{"line":87,"column":24},"end":{"line":87,"column":92}},"20":{"start":{"line":98,"column":8},"end":{"line":110,"column":9}},"21":{"start":{"line":99,"column":12},"end":{"line":101,"column":13}},"22":{"start":{"line":100,"column":16},"end":{"line":100,"column":23}},"23":{"start":{"line":103,"column":12},"end":{"line":103,"column":62}},"24":{"start":{"line":104,"column":12},"end":{"line":104,"column":41}},"25":{"start":{"line":105,"column":12},"end":{"line":105,"column":40}},"26":{"start":{"line":106,"column":12},"end":{"line":106,"column":40}},"27":{"start":{"line":108,"column":12},"end":{"line":108,"column":58}},"28":{"start":{"line":109,"column":12},"end":{"line":109,"column":56}},"29":{"start":{"line":112,"column":8},"end":{"line":114,"column":10}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":12}},{"start":{"line":45,"column":12},"end":{"line":45,"column":12}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":16},"end":{"line":45,"column":23}},{"start":{"line":45,"column":27},"end":{"line":45,"column":53}}]},"3":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":18},"end":{"line":51,"column":24}},{"start":{"line":51,"column":28},"end":{"line":51,"column":35}}]},"4":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":12},"end":{"line":66,"column":12}},{"start":{"line":66,"column":12},"end":{"line":66,"column":12}}]},"5":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":37},"end":{"line":69,"column":46}},{"start":{"line":69,"column":49},"end":{"line":69,"column":59}}]},"6":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":45},"end":{"line":70,"column":54}},{"start":{"line":70,"column":57},"end":{"line":70,"column":69}}]},"7":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":24},"end":{"line":81,"column":24}},{"start":{"line":81,"column":24},"end":{"line":81,"column":24}}]},"8":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":28},"end":{"line":82,"column":28}},{"start":{"line":82,"column":28},"end":{"line":82,"column":28}}]},"9":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":12}},{"start":{"line":99,"column":12},"end":{"line":99,"column":12}}]}},"code":["/**"," * @fileoverview Rule to check the spacing around the * in yield* expressions."," * @author Bryan Smith"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow spacing around the `*` in `yield*` expressions\",","            category: \"ECMAScript 6\",","            recommended: false","        },","","        fixable: \"whitespace\",","","        schema: [","            {","                oneOf: [","                    {","                        enum: [\"before\", \"after\", \"both\", \"neither\"]","                    },","                    {","                        type: \"object\",","                        properties: {","                            before: { type: \"boolean\" },","                            after: { type: \"boolean\" }","                        },","                        additionalProperties: false","                    }","                ]","            }","        ]","    },","","    create(context) {","        const sourceCode = context.getSourceCode();","","        const mode = (function(option) {","            if (!option || typeof option === \"string\") {","                return {","                    before: { before: true, after: false },","                    after: { before: false, after: true },","                    both: { before: true, after: true },","                    neither: { before: false, after: false }","                }[option || \"after\"];","            }","            return option;","        }(context.options[0]));","","        /**","         * Checks the spacing between two tokens before or after the star token.","         * @param {string} side Either \"before\" or \"after\".","         * @param {Token} leftToken `function` keyword token if side is \"before\", or","         *     star token if side is \"after\".","         * @param {Token} rightToken Star token if side is \"before\", or identifier","         *     token if side is \"after\".","         * @returns {void}","         */","        function checkSpacing(side, leftToken, rightToken) {","            if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken) !== mode[side]) {","                const after = leftToken.value === \"*\";","                const spaceRequired = mode[side];","                const node = after ? leftToken : rightToken;","                const type = spaceRequired ? \"Missing\" : \"Unexpected\";","                const message = \"{{type}} space {{side}} *.\";","","                context.report({","                    node,","                    message,","                    data: {","                        type,","                        side","                    },","                    fix(fixer) {","                        if (spaceRequired) {","                            if (after) {","                                return fixer.insertTextAfter(node, \" \");","                            }","                            return fixer.insertTextBefore(node, \" \");","                        }","                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);","                    }","                });","            }","        }","","        /**","         * Enforces the spacing around the star if node is a yield* expression.","         * @param {ASTNode} node A yield expression node.","         * @returns {void}","         */","        function checkExpression(node) {","            if (!node.delegate) {","                return;","            }","","            const tokens = sourceCode.getFirstTokens(node, 3);","            const yieldToken = tokens[0];","            const starToken = tokens[1];","            const nextToken = tokens[2];","","            checkSpacing(\"before\", yieldToken, starToken);","            checkSpacing(\"after\", starToken, nextToken);","        }","","        return {","            YieldExpression: checkExpression","        };","","    }","};",""],"l":{"12":1,"42":0,"44":0,"45":0,"46":0,"53":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"73":0,"81":0,"82":0,"83":0,"85":0,"87":0,"98":1,"99":0,"100":0,"103":0,"104":0,"105":0,"106":0,"108":0,"109":0,"112":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/yoda.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/rules/yoda.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":1,"38":0,"39":0,"40":1,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0},"b":{"1":[0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0],"13":[0,0,0,0,0],"14":[0,0,0,0,0,0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"isComparisonOperator","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":40}}},"2":{"name":"isEqualityOperator","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":38}}},"3":{"name":"isRangeTestOperator","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":39}}},"4":{"name":"looksLikeLiteral","line":52,"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":32}}},"5":{"name":"getNormalizedLiteral","line":72,"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":50}}},"6":{"name":"same","line":106,"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":20}}},"7":{"name":"(anonymous_7)","line":180,"loc":{"start":{"line":180,"column":10},"end":{"line":180,"column":20}}},"8":{"name":"isRangeTest","line":199,"loc":{"start":{"line":199,"column":8},"end":{"line":199,"column":35}}},"9":{"name":"isBetweenTest","line":207,"loc":{"start":{"line":207,"column":12},"end":{"line":207,"column":37}}},"10":{"name":"isOutsideTest","line":221,"loc":{"start":{"line":221,"column":12},"end":{"line":221,"column":37}}},"11":{"name":"isParenWrapped","line":237,"loc":{"start":{"line":237,"column":12},"end":{"line":237,"column":38}}},"12":{"name":"getFlippedString","line":266,"loc":{"start":{"line":266,"column":8},"end":{"line":266,"column":40}}},"13":{"name":"(anonymous_13)","line":281,"loc":{"start":{"line":281,"column":28},"end":{"line":281,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":22,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":23,"column":4},"end":{"line":23,"column":58}},"4":{"start":{"line":31,"column":0},"end":{"line":33,"column":1}},"5":{"start":{"line":32,"column":4},"end":{"line":32,"column":41}},"6":{"start":{"line":41,"column":0},"end":{"line":43,"column":1}},"7":{"start":{"line":42,"column":4},"end":{"line":42,"column":46}},"8":{"start":{"line":52,"column":0},"end":{"line":58,"column":1}},"9":{"start":{"line":53,"column":4},"end":{"line":57,"column":49}},"10":{"start":{"line":72,"column":0},"end":{"line":94,"column":1}},"11":{"start":{"line":73,"column":4},"end":{"line":75,"column":5}},"12":{"start":{"line":74,"column":8},"end":{"line":74,"column":20}},"13":{"start":{"line":77,"column":4},"end":{"line":83,"column":5}},"14":{"start":{"line":78,"column":8},"end":{"line":82,"column":10}},"15":{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},"16":{"start":{"line":86,"column":8},"end":{"line":90,"column":10}},"17":{"start":{"line":93,"column":4},"end":{"line":93,"column":16}},"18":{"start":{"line":106,"column":0},"end":{"line":145,"column":1}},"19":{"start":{"line":107,"column":4},"end":{"line":109,"column":5}},"20":{"start":{"line":108,"column":8},"end":{"line":108,"column":21}},"21":{"start":{"line":111,"column":4},"end":{"line":144,"column":5}},"22":{"start":{"line":113,"column":12},"end":{"line":113,"column":37}},"23":{"start":{"line":116,"column":12},"end":{"line":116,"column":39}},"24":{"start":{"line":119,"column":12},"end":{"line":119,"column":60}},"25":{"start":{"line":122,"column":12},"end":{"line":127,"column":13}},"26":{"start":{"line":123,"column":16},"end":{"line":126,"column":18}},"27":{"start":{"line":132,"column":12},"end":{"line":136,"column":14}},"28":{"start":{"line":140,"column":12},"end":{"line":140,"column":24}},"29":{"start":{"line":143,"column":12},"end":{"line":143,"column":25}},"30":{"start":{"line":151,"column":0},"end":{"line":308,"column":2}},"31":{"start":{"line":183,"column":8},"end":{"line":183,"column":57}},"32":{"start":{"line":184,"column":8},"end":{"line":184,"column":83}},"33":{"start":{"line":185,"column":8},"end":{"line":185,"column":85}},"34":{"start":{"line":187,"column":8},"end":{"line":187,"column":51}},"35":{"start":{"line":199,"column":8},"end":{"line":248,"column":9}},"36":{"start":{"line":200,"column":12},"end":{"line":201,"column":35}},"37":{"start":{"line":207,"column":12},"end":{"line":215,"column":13}},"38":{"start":{"line":208,"column":16},"end":{"line":208,"column":46}},"39":{"start":{"line":210,"column":16},"end":{"line":214,"column":50}},"40":{"start":{"line":221,"column":12},"end":{"line":229,"column":13}},"41":{"start":{"line":222,"column":16},"end":{"line":222,"column":46}},"42":{"start":{"line":224,"column":16},"end":{"line":228,"column":50}},"43":{"start":{"line":237,"column":12},"end":{"line":239,"column":13}},"44":{"start":{"line":238,"column":16},"end":{"line":238,"column":66}},"45":{"start":{"line":241,"column":12},"end":{"line":247,"column":34}},"46":{"start":{"line":250,"column":8},"end":{"line":259,"column":10}},"47":{"start":{"line":266,"column":8},"end":{"line":274,"column":9}},"48":{"start":{"line":267,"column":12},"end":{"line":267,"column":129}},"49":{"start":{"line":267,"column":98},"end":{"line":267,"column":127}},"50":{"start":{"line":268,"column":12},"end":{"line":268,"column":141}},"51":{"start":{"line":269,"column":12},"end":{"line":269,"column":139}},"52":{"start":{"line":270,"column":12},"end":{"line":270,"column":122}},"53":{"start":{"line":271,"column":12},"end":{"line":271,"column":122}},"54":{"start":{"line":273,"column":12},"end":{"line":273,"column":122}},"55":{"start":{"line":280,"column":8},"end":{"line":305,"column":10}},"56":{"start":{"line":282,"column":16},"end":{"line":282,"column":72}},"57":{"start":{"line":283,"column":16},"end":{"line":283,"column":75}},"58":{"start":{"line":286,"column":16},"end":{"line":302,"column":17}},"59":{"start":{"line":293,"column":20},"end":{"line":301,"column":23}},"60":{"start":{"line":300,"column":38},"end":{"line":300,"column":85}}},"branchMap":{"1":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":43}},{"start":{"line":54,"column":8},"end":{"line":54,"column":29}},{"start":{"line":55,"column":8},"end":{"line":55,"column":19}},{"start":{"line":56,"column":8},"end":{"line":56,"column":40}},{"start":{"line":57,"column":8},"end":{"line":57,"column":47}}]},"2":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"3":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]},"4":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":85,"column":4}},{"start":{"line":85,"column":4},"end":{"line":85,"column":4}}]},"5":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]},"6":{"line":111,"type":"switch","locations":[{"start":{"line":112,"column":8},"end":{"line":113,"column":37}},{"start":{"line":115,"column":8},"end":{"line":116,"column":39}},{"start":{"line":118,"column":8},"end":{"line":137,"column":9}},{"start":{"line":139,"column":8},"end":{"line":140,"column":24}},{"start":{"line":142,"column":8},"end":{"line":143,"column":25}}]},"7":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":12}},{"start":{"line":122,"column":12},"end":{"line":122,"column":12}}]},"8":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":20},"end":{"line":124,"column":44}},{"start":{"line":125,"column":20},"end":{"line":125,"column":63}}]},"9":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":16},"end":{"line":133,"column":41}},{"start":{"line":134,"column":16},"end":{"line":134,"column":40}},{"start":{"line":135,"column":16},"end":{"line":135,"column":44}}]},"10":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":29},"end":{"line":184,"column":47}},{"start":{"line":184,"column":51},"end":{"line":184,"column":81}}]},"11":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":30},"end":{"line":185,"column":48}},{"start":{"line":185,"column":52},"end":{"line":185,"column":83}}]},"12":{"line":210,"type":"binary-expr","locations":[{"start":{"line":210,"column":24},"end":{"line":210,"column":46}},{"start":{"line":211,"column":21},"end":{"line":211,"column":66}},{"start":{"line":212,"column":21},"end":{"line":212,"column":95}},{"start":{"line":213,"column":20},"end":{"line":213,"column":59}},{"start":{"line":214,"column":20},"end":{"line":214,"column":48}}]},"13":{"line":224,"type":"binary-expr","locations":[{"start":{"line":224,"column":24},"end":{"line":224,"column":46}},{"start":{"line":225,"column":21},"end":{"line":225,"column":93}},{"start":{"line":226,"column":21},"end":{"line":226,"column":68}},{"start":{"line":227,"column":20},"end":{"line":227,"column":59}},{"start":{"line":228,"column":20},"end":{"line":228,"column":48}}]},"14":{"line":241,"type":"binary-expr","locations":[{"start":{"line":241,"column":20},"end":{"line":241,"column":53}},{"start":{"line":242,"column":16},"end":{"line":242,"column":48}},{"start":{"line":243,"column":16},"end":{"line":243,"column":49}},{"start":{"line":244,"column":16},"end":{"line":244,"column":50}},{"start":{"line":245,"column":16},"end":{"line":245,"column":51}},{"start":{"line":246,"column":17},"end":{"line":246,"column":32}},{"start":{"line":246,"column":36},"end":{"line":246,"column":51}},{"start":{"line":247,"column":16},"end":{"line":247,"column":32}}]},"15":{"line":282,"type":"cond-expr","locations":[{"start":{"line":282,"column":49},"end":{"line":282,"column":58}},{"start":{"line":282,"column":61},"end":{"line":282,"column":71}}]},"16":{"line":283,"type":"cond-expr","locations":[{"start":{"line":283,"column":52},"end":{"line":283,"column":62}},{"start":{"line":283,"column":65},"end":{"line":283,"column":74}}]},"17":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":16},"end":{"line":286,"column":16}},{"start":{"line":286,"column":16},"end":{"line":286,"column":16}}]},"18":{"line":287,"type":"binary-expr","locations":[{"start":{"line":287,"column":21},"end":{"line":287,"column":58}},{"start":{"line":287,"column":62},"end":{"line":287,"column":98}},{"start":{"line":288,"column":20},"end":{"line":288,"column":94}},{"start":{"line":289,"column":20},"end":{"line":289,"column":73}},{"start":{"line":290,"column":20},"end":{"line":290,"column":55}},{"start":{"line":291,"column":20},"end":{"line":291,"column":79}}]},"19":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":22},"end":{"line":288,"column":56}},{"start":{"line":288,"column":60},"end":{"line":288,"column":93}}]},"20":{"line":289,"type":"binary-expr","locations":[{"start":{"line":289,"column":22},"end":{"line":289,"column":56}},{"start":{"line":289,"column":60},"end":{"line":289,"column":72}}]},"21":{"line":291,"type":"binary-expr","locations":[{"start":{"line":291,"column":22},"end":{"line":291,"column":33}},{"start":{"line":291,"column":37},"end":{"line":291,"column":78}}]},"22":{"line":298,"type":"cond-expr","locations":[{"start":{"line":298,"column":51},"end":{"line":298,"column":57}},{"start":{"line":298,"column":60},"end":{"line":298,"column":67}}]}},"code":["/**"," * @fileoverview Rule to require or disallow yoda comparisons"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//--------------------------------------------------------------------------","// Requirements","//--------------------------------------------------------------------------","","const astUtils = require(\"../ast-utils\");","","//--------------------------------------------------------------------------","// Helpers","//--------------------------------------------------------------------------","","/**"," * Determines whether an operator is a comparison operator."," * @param {string} operator The operator to check."," * @returns {boolean} Whether or not it is a comparison operator."," */","function isComparisonOperator(operator) {","    return (/^(==|===|!=|!==|<|>|<=|>=)$/).test(operator);","}","","/**"," * Determines whether an operator is an equality operator."," * @param {string} operator The operator to check."," * @returns {boolean} Whether or not it is an equality operator."," */","function isEqualityOperator(operator) {","    return (/^(==|===)$/).test(operator);","}","","/**"," * Determines whether an operator is one used in a range test."," * Allowed operators are `<` and `<=`."," * @param {string} operator The operator to check."," * @returns {boolean} Whether the operator is used in range tests."," */","function isRangeTestOperator(operator) {","    return [\"<\", \"<=\"].indexOf(operator) >= 0;","}","","/**"," * Determines whether a non-Literal node is a negative number that should be"," * treated as if it were a single Literal node."," * @param {ASTNode} node Node to test."," * @returns {boolean} True if the node is a negative number that looks like a"," *                    real literal and should be treated as such."," */","function looksLikeLiteral(node) {","    return (node.type === \"UnaryExpression\" &&","        node.operator === \"-\" &&","        node.prefix &&","        node.argument.type === \"Literal\" &&","        typeof node.argument.value === \"number\");","}","","/**"," * Attempts to derive a Literal node from nodes that are treated like literals."," * @param {ASTNode} node Node to normalize."," * @param {number} [defaultValue] The default value to be returned if the node"," *                                is not a Literal."," * @returns {ASTNode} One of the following options."," *  1. The original node if the node is already a Literal"," *  2. A normalized Literal node with the negative number as the value if the"," *     node represents a negative number literal."," *  3. The Literal node which has the `defaultValue` argument if it exists."," *  4. Otherwise `null`."," */","function getNormalizedLiteral(node, defaultValue) {","    if (node.type === \"Literal\") {","        return node;","    }","","    if (looksLikeLiteral(node)) {","        return {","            type: \"Literal\",","            value: -node.argument.value,","            raw: `-${node.argument.value}`","        };","    }","","    if (defaultValue) {","        return {","            type: \"Literal\",","            value: defaultValue,","            raw: String(defaultValue)","        };","    }","","    return null;","}","","/**"," * Checks whether two expressions reference the same value. For example:"," *     a = a"," *     a.b = a.b"," *     a[0] = a[0]"," *     a['b'] = a['b']"," * @param   {ASTNode} a Left side of the comparison."," * @param   {ASTNode} b Right side of the comparison."," * @returns {boolean}   True if both sides match and reference the same value."," */","function same(a, b) {","    if (a.type !== b.type) {","        return false;","    }","","    switch (a.type) {","        case \"Identifier\":","            return a.name === b.name;","","        case \"Literal\":","            return a.value === b.value;","","        case \"MemberExpression\": {","            const nameA = astUtils.getStaticPropertyName(a);","","            // x.y = x[\"y\"]","            if (nameA) {","                return (","                    same(a.object, b.object) &&","                    nameA === astUtils.getStaticPropertyName(b)","                );","            }","","            // x[0] = x[0]","            // x[y] = x[y]","            // x.y = x.y","            return (","                a.computed === b.computed &&","                same(a.object, b.object) &&","                same(a.property, b.property)","            );","        }","","        case \"ThisExpression\":","            return true;","","        default:","            return false;","    }","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"require or disallow \\\"Yoda\\\" conditions\",","            category: \"Best Practices\",","            recommended: false","        },","","        schema: [","            {","                enum: [\"always\", \"never\"]","            },","            {","                type: \"object\",","                properties: {","                    exceptRange: {","                        type: \"boolean\"","                    },","                    onlyEquality: {","                        type: \"boolean\"","                    }","                },","                additionalProperties: false","            }","        ],","","        fixable: \"code\"","    },","","    create(context) {","","        // Default to \"never\" (!always) if no option","        const always = (context.options[0] === \"always\");","        const exceptRange = (context.options[1] && context.options[1].exceptRange);","        const onlyEquality = (context.options[1] && context.options[1].onlyEquality);","","        const sourceCode = context.getSourceCode();","","        /**","         * Determines whether node represents a range test.","         * A range test is a \"between\" test like `(0 <= x && x < 1)` or an \"outside\"","         * test like `(x < 0 || 1 <= x)`. It must be wrapped in parentheses, and","         * both operators must be `<` or `<=`. Finally, the literal on the left side","         * must be less than or equal to the literal on the right side so that the","         * test makes any sense.","         * @param {ASTNode} node LogicalExpression node to test.","         * @returns {boolean} Whether node is a range test.","         */","        function isRangeTest(node) {","            const left = node.left,","                right = node.right;","","            /**","             * Determines whether node is of the form `0 <= x && x < 1`.","             * @returns {boolean} Whether node is a \"between\" range test.","             */","            function isBetweenTest() {","                let leftLiteral, rightLiteral;","","                return (node.operator === \"&&\" &&","                    (leftLiteral = getNormalizedLiteral(left.left)) &&","                    (rightLiteral = getNormalizedLiteral(right.right, Number.POSITIVE_INFINITY)) &&","                    leftLiteral.value <= rightLiteral.value &&","                    same(left.right, right.left));","            }","","            /**","             * Determines whether node is of the form `x < 0 || 1 <= x`.","             * @returns {boolean} Whether node is an \"outside\" range test.","             */","            function isOutsideTest() {","                let leftLiteral, rightLiteral;","","                return (node.operator === \"||\" &&","                    (leftLiteral = getNormalizedLiteral(left.right, Number.NEGATIVE_INFINITY)) &&","                    (rightLiteral = getNormalizedLiteral(right.left)) &&","                    leftLiteral.value <= rightLiteral.value &&","                    same(left.left, right.right));","            }","","            /**","             * Determines whether node is wrapped in parentheses.","             * @returns {boolean} Whether node is preceded immediately by an open","             *                    paren token and followed immediately by a close","             *                    paren token.","             */","            function isParenWrapped() {","                return astUtils.isParenthesised(sourceCode, node);","            }","","            return (node.type === \"LogicalExpression\" &&","                left.type === \"BinaryExpression\" &&","                right.type === \"BinaryExpression\" &&","                isRangeTestOperator(left.operator) &&","                isRangeTestOperator(right.operator) &&","                (isBetweenTest() || isOutsideTest()) &&","                isParenWrapped());","        }","","        const OPERATOR_FLIP_MAP = {","            \"===\": \"===\",","            \"!==\": \"!==\",","            \"==\": \"==\",","            \"!=\": \"!=\",","            \"<\": \">\",","            \">\": \"<\",","            \"<=\": \">=\",","            \">=\": \"<=\"","        };","","        /**","        * Returns a string representation of a BinaryExpression node with its sides/operator flipped around.","        * @param {ASTNode} node The BinaryExpression node","        * @returns {string} A string representation of the node with the sides and operator flipped","        */","        function getFlippedString(node) {","            const operatorToken = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);","            const textBeforeOperator = sourceCode.getText().slice(sourceCode.getTokenBefore(operatorToken).range[1], operatorToken.range[0]);","            const textAfterOperator = sourceCode.getText().slice(operatorToken.range[1], sourceCode.getTokenAfter(operatorToken).range[0]);","            const leftText = sourceCode.getText().slice(node.range[0], sourceCode.getTokenBefore(operatorToken).range[1]);","            const rightText = sourceCode.getText().slice(sourceCode.getTokenAfter(operatorToken).range[0], node.range[1]);","","            return rightText + textBeforeOperator + OPERATOR_FLIP_MAP[operatorToken.value] + textAfterOperator + leftText;","        }","","        //--------------------------------------------------------------------------","        // Public","        //--------------------------------------------------------------------------","","        return {","            BinaryExpression(node) {","                const expectedLiteral = always ? node.left : node.right;","                const expectedNonLiteral = always ? node.right : node.left;","","                // If `expectedLiteral` is not a literal, and `expectedNonLiteral` is a literal, raise an error.","                if (","                    (expectedNonLiteral.type === \"Literal\" || looksLikeLiteral(expectedNonLiteral)) &&","                    !(expectedLiteral.type === \"Literal\" || looksLikeLiteral(expectedLiteral)) &&","                    !(!isEqualityOperator(node.operator) && onlyEquality) &&","                    isComparisonOperator(node.operator) &&","                    !(exceptRange && isRangeTest(context.getAncestors().pop()))","                ) {","                    context.report({","                        node,","                        message: \"Expected literal to be on the {{expectedSide}} side of {{operator}}.\",","                        data: {","                            operator: node.operator,","                            expectedSide: always ? \"left\" : \"right\"","                        },","                        fix: fixer => fixer.replaceText(node, getFlippedString(node))","                    });","                }","","            }","        };","","    }","};",""],"l":{"11":1,"22":1,"23":0,"31":1,"32":0,"41":1,"42":0,"52":1,"53":0,"72":1,"73":0,"74":0,"77":0,"78":0,"85":0,"86":0,"93":0,"106":1,"107":0,"108":0,"111":0,"113":0,"116":0,"119":0,"122":0,"123":0,"132":0,"140":0,"143":0,"151":1,"183":0,"184":0,"185":0,"187":0,"199":1,"200":0,"207":1,"208":0,"210":0,"221":1,"222":0,"224":0,"237":1,"238":0,"241":0,"250":0,"266":1,"267":0,"268":0,"269":0,"270":0,"271":0,"273":0,"280":0,"282":0,"283":0,"286":0,"293":0,"300":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/autoconfig.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/autoconfig.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"makeRegistryItems","line":51,"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":40}}},"2":{"name":"(anonymous_2)","line":75,"loc":{"start":{"line":75,"column":15},"end":{"line":75,"column":29}}},"3":{"name":"(anonymous_3)","line":87,"loc":{"start":{"line":87,"column":25},"end":{"line":87,"column":28}}},"4":{"name":"(anonymous_4)","line":107,"loc":{"start":{"line":107,"column":17},"end":{"line":107,"column":20}}},"5":{"name":"(anonymous_5)","line":121,"loc":{"start":{"line":121,"column":33},"end":{"line":121,"column":48}}},"6":{"name":"(anonymous_6)","line":168,"loc":{"start":{"line":168,"column":23},"end":{"line":168,"column":26}}},"7":{"name":"(anonymous_7)","line":191,"loc":{"start":{"line":191,"column":21},"end":{"line":191,"column":24}}},"8":{"name":"(anonymous_8)","line":210,"loc":{"start":{"line":210,"column":27},"end":{"line":210,"column":30}}},"9":{"name":"(anonymous_9)","line":231,"loc":{"start":{"line":231,"column":16},"end":{"line":231,"column":19}}},"10":{"name":"(anonymous_10)","line":250,"loc":{"start":{"line":250,"column":23},"end":{"line":250,"column":37}}},"11":{"name":"(anonymous_11)","line":270,"loc":{"start":{"line":270,"column":18},"end":{"line":270,"column":44}}},"12":{"name":"extendFromRecommended","line":334,"loc":{"start":{"line":334,"column":0},"end":{"line":334,"column":39}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":16,"column":57}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":52}},"3":{"start":{"line":24,"column":0},"end":{"line":25,"column":51}},"4":{"start":{"line":51,"column":0},"end":{"line":60,"column":1}},"5":{"start":{"line":52,"column":4},"end":{"line":59,"column":11}},"6":{"start":{"line":53,"column":8},"end":{"line":57,"column":12}},"7":{"start":{"line":53,"column":65},"end":{"line":57,"column":9}},"8":{"start":{"line":58,"column":8},"end":{"line":58,"column":27}},"9":{"start":{"line":76,"column":8},"end":{"line":76,"column":73}},"10":{"start":{"line":88,"column":8},"end":{"line":88,"column":63}},"11":{"start":{"line":90,"column":8},"end":{"line":90,"column":52}},"12":{"start":{"line":108,"column":8},"end":{"line":108,"column":20}},"13":{"start":{"line":109,"column":8},"end":{"line":110,"column":26}},"14":{"start":{"line":121,"column":8},"end":{"line":150,"column":21}},"15":{"start":{"line":129,"column":12},"end":{"line":129,"column":86}},"16":{"start":{"line":131,"column":12},"end":{"line":149,"column":13}},"17":{"start":{"line":137,"column":16},"end":{"line":139,"column":17}},"18":{"start":{"line":138,"column":20},"end":{"line":138,"column":27}},"19":{"start":{"line":141,"column":16},"end":{"line":141,"column":52}},"20":{"start":{"line":142,"column":16},"end":{"line":142,"column":67}},"21":{"start":{"line":148,"column":16},"end":{"line":148,"column":53}},"22":{"start":{"line":152,"column":8},"end":{"line":155,"column":9}},"23":{"start":{"line":153,"column":12},"end":{"line":153,"column":46}},"24":{"start":{"line":154,"column":12},"end":{"line":154,"column":21}},"25":{"start":{"line":157,"column":8},"end":{"line":157,"column":24}},"26":{"start":{"line":169,"column":8},"end":{"line":170,"column":41}},"27":{"start":{"line":172,"column":8},"end":{"line":172,"column":58}},"28":{"start":{"line":173,"column":8},"end":{"line":181,"column":11}},"29":{"start":{"line":174,"column":12},"end":{"line":174,"column":117}},"30":{"start":{"line":174,"column":85},"end":{"line":174,"column":114}},"31":{"start":{"line":176,"column":12},"end":{"line":180,"column":13}},"32":{"start":{"line":177,"column":16},"end":{"line":177,"column":59}},"33":{"start":{"line":179,"column":16},"end":{"line":179,"column":49}},"34":{"start":{"line":183,"column":8},"end":{"line":183,"column":27}},"35":{"start":{"line":192,"column":8},"end":{"line":193,"column":41}},"36":{"start":{"line":195,"column":8},"end":{"line":195,"column":58}},"37":{"start":{"line":196,"column":8},"end":{"line":198,"column":11}},"38":{"start":{"line":197,"column":12},"end":{"line":197,"column":139}},"39":{"start":{"line":197,"column":90},"end":{"line":197,"column":136}},"40":{"start":{"line":200,"column":8},"end":{"line":200,"column":27}},"41":{"start":{"line":211,"column":8},"end":{"line":212,"column":45}},"42":{"start":{"line":214,"column":8},"end":{"line":220,"column":11}},"43":{"start":{"line":215,"column":12},"end":{"line":215,"column":108}},"44":{"start":{"line":215,"column":78},"end":{"line":215,"column":105}},"45":{"start":{"line":217,"column":12},"end":{"line":219,"column":13}},"46":{"start":{"line":218,"column":16},"end":{"line":218,"column":63}},"47":{"start":{"line":222,"column":8},"end":{"line":222,"column":31}},"48":{"start":{"line":232,"column":8},"end":{"line":233,"column":35}},"49":{"start":{"line":235,"column":8},"end":{"line":239,"column":11}},"50":{"start":{"line":236,"column":12},"end":{"line":238,"column":13}},"51":{"start":{"line":237,"column":16},"end":{"line":237,"column":68}},"52":{"start":{"line":241,"column":8},"end":{"line":241,"column":22}},"53":{"start":{"line":251,"column":8},"end":{"line":252,"column":41}},"54":{"start":{"line":254,"column":8},"end":{"line":254,"column":58}},"55":{"start":{"line":255,"column":8},"end":{"line":257,"column":11}},"56":{"start":{"line":256,"column":12},"end":{"line":256,"column":126}},"57":{"start":{"line":256,"column":83},"end":{"line":256,"column":123}},"58":{"start":{"line":259,"column":8},"end":{"line":259,"column":27}},"59":{"start":{"line":271,"column":8},"end":{"line":272,"column":27}},"60":{"start":{"line":274,"column":8},"end":{"line":274,"column":40}},"61":{"start":{"line":275,"column":8},"end":{"line":275,"column":61}},"62":{"start":{"line":277,"column":8},"end":{"line":277,"column":56}},"63":{"start":{"line":279,"column":8},"end":{"line":279,"column":60}},"64":{"start":{"line":281,"column":8},"end":{"line":281,"column":61}},"65":{"start":{"line":283,"column":8},"end":{"line":283,"column":51}},"66":{"start":{"line":284,"column":8},"end":{"line":284,"column":69}},"67":{"start":{"line":286,"column":8},"end":{"line":319,"column":11}},"68":{"start":{"line":287,"column":12},"end":{"line":287,"column":47}},"69":{"start":{"line":289,"column":12},"end":{"line":289,"column":27}},"70":{"start":{"line":291,"column":12},"end":{"line":315,"column":15}},"71":{"start":{"line":292,"column":16},"end":{"line":292,"column":81}},"72":{"start":{"line":293,"column":16},"end":{"line":293,"column":85}},"73":{"start":{"line":295,"column":16},"end":{"line":308,"column":19}},"74":{"start":{"line":302,"column":20},"end":{"line":307,"column":21}},"75":{"start":{"line":306,"column":24},"end":{"line":306,"column":88}},"76":{"start":{"line":310,"column":16},"end":{"line":310,"column":32}},"77":{"start":{"line":312,"column":16},"end":{"line":314,"column":17}},"78":{"start":{"line":313,"column":20},"end":{"line":313,"column":42}},"79":{"start":{"line":318,"column":12},"end":{"line":318,"column":41}},"80":{"start":{"line":321,"column":8},"end":{"line":321,"column":30}},"81":{"start":{"line":334,"column":0},"end":{"line":348,"column":1}},"82":{"start":{"line":335,"column":4},"end":{"line":335,"column":48}},"83":{"start":{"line":337,"column":4},"end":{"line":337,"column":44}},"84":{"start":{"line":339,"column":4},"end":{"line":339,"column":119}},"85":{"start":{"line":339,"column":67},"end":{"line":339,"column":117}},"86":{"start":{"line":341,"column":4},"end":{"line":345,"column":7}},"87":{"start":{"line":342,"column":8},"end":{"line":344,"column":9}},"88":{"start":{"line":343,"column":12},"end":{"line":343,"column":43}},"89":{"start":{"line":346,"column":4},"end":{"line":346,"column":48}},"90":{"start":{"line":347,"column":4},"end":{"line":347,"column":21}},"91":{"start":{"line":355,"column":0},"end":{"line":358,"column":2}}},"branchMap":{"1":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":25},"end":{"line":55,"column":38}},{"start":{"line":55,"column":42},"end":{"line":55,"column":43}}]},"2":{"line":76,"type":"cond-expr","locations":[{"start":{"line":76,"column":37},"end":{"line":76,"column":67}},{"start":{"line":76,"column":70},"end":{"line":76,"column":72}}]},"3":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":12},"end":{"line":131,"column":12}},{"start":{"line":131,"column":12},"end":{"line":131,"column":12}}]},"4":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":16},"end":{"line":131,"column":37}},{"start":{"line":131,"column":42},"end":{"line":131,"column":54}},{"start":{"line":131,"column":58},"end":{"line":131,"column":96}}]},"5":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":16},"end":{"line":137,"column":16}},{"start":{"line":137,"column":16},"end":{"line":137,"column":16}}]},"6":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":20},"end":{"line":137,"column":33}},{"start":{"line":137,"column":37},"end":{"line":137,"column":88}}]},"7":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":32},"end":{"line":141,"column":45}},{"start":{"line":141,"column":49},"end":{"line":141,"column":51}}]},"8":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":12},"end":{"line":176,"column":12}},{"start":{"line":176,"column":12},"end":{"line":176,"column":12}}]},"9":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":12},"end":{"line":217,"column":12}},{"start":{"line":217,"column":12},"end":{"line":217,"column":12}}]},"10":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":16},"end":{"line":217,"column":30}},{"start":{"line":217,"column":34},"end":{"line":217,"column":85}}]},"11":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":12},"end":{"line":236,"column":12}},{"start":{"line":236,"column":12},"end":{"line":236,"column":12}}]},"12":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":20},"end":{"line":302,"column":20}},{"start":{"line":302,"column":20},"end":{"line":302,"column":20}}]},"13":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":24},"end":{"line":303,"column":59}},{"start":{"line":304,"column":24},"end":{"line":304,"column":71}}]},"14":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":16},"end":{"line":312,"column":16}},{"start":{"line":312,"column":16},"end":{"line":312,"column":16}}]},"15":{"line":342,"type":"if","locations":[{"start":{"line":342,"column":8},"end":{"line":342,"column":8}},{"start":{"line":342,"column":8},"end":{"line":342,"column":8}}]}},"code":["/**"," * @fileoverview Used for creating a suggested configuration based on project code."," * @author Ian VanSchooten"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\"),","    eslint = require(\"../eslint\"),","    configRule = require(\"./config-rule\"),","    ConfigOps = require(\"./config-ops\"),","    recConfig = require(\"../../conf/eslint-recommended\");","","const debug = require(\"debug\")(\"eslint:autoconfig\");","","//------------------------------------------------------------------------------","// Data","//------------------------------------------------------------------------------","","const MAX_CONFIG_COMBINATIONS = 17, // 16 combinations + 1 for severity only","    RECOMMENDED_CONFIG_NAME = \"eslint:recommended\";","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * Information about a rule configuration, in the context of a Registry."," *"," * @typedef {Object}     registryItem"," * @param   {ruleConfig} config        A valid configuration for the rule"," * @param   {number}     specificity   The number of elements in the ruleConfig array"," * @param   {number}     errorCount    The number of errors encountered when linting with the config"," */",""," /**","  * This callback is used to measure execution status in a progress bar","  * @callback progressCallback","  * @param {number} The total number of times the callback will be called.","  */","","/**"," * Create registryItems for rules"," * @param   {rulesConfig} rulesConfig Hash of rule names and arrays of ruleConfig items"," * @returns {Object}                  registryItems for each rule in provided rulesConfig"," */","function makeRegistryItems(rulesConfig) {","    return Object.keys(rulesConfig).reduce((accumulator, ruleId) => {","        accumulator[ruleId] = rulesConfig[ruleId].map(config => ({","            config,","            specificity: config.length || 1,","            errorCount: void 0","        }));","        return accumulator;","    }, {});","}","","/**","* Creates an object in which to store rule configs and error counts","*","* Unless a rulesConfig is provided at construction, the registry will not contain","* any rules, only methods.  This will be useful for building up registries manually.","*","* Registry class","*/","class Registry {","","    /**","     * @param {rulesConfig} [rulesConfig] Hash of rule names and arrays of possible configurations","     */","    constructor(rulesConfig) {","        this.rules = (rulesConfig) ? makeRegistryItems(rulesConfig) : {};","    }","","    /**","     * Populate the registry with core rule configs.","     *","     * It will set the registry's `rule` property to an object having rule names","     * as keys and an array of registryItems as values.","     *","     * @returns {void}","     */","    populateFromCoreRules() {","        const rulesConfig = configRule.createCoreRuleConfigs();","","        this.rules = makeRegistryItems(rulesConfig);","    }","","    /**","     * Creates sets of rule configurations which can be used for linting","     * and initializes registry errors to zero for those configurations (side effect).","     *","     * This combines as many rules together as possible, such that the first sets","     * in the array will have the highest number of rules configured, and later sets","     * will have fewer and fewer, as not all rules have the same number of possible","     * configurations.","     *","     * The length of the returned array will be <= MAX_CONFIG_COMBINATIONS.","     *","     * @param   {Object}   registry The autoconfig registry","     * @returns {Object[]}          \"rules\" configurations to use for linting","     */","    buildRuleSets() {","        let idx = 0;","        const ruleIds = Object.keys(this.rules),","            ruleSets = [];","","        /**","         * Add a rule configuration from the registry to the ruleSets","         *","         * This is broken out into its own function so that it doesn't need to be","         * created inside of the while loop.","         *","         * @param   {string} rule The ruleId to add.","         * @returns {void}","         */","        const addRuleToRuleSet = function(rule) {","","            /*","             * This check ensures that there is a rule configuration and that","             * it has fewer than the max combinations allowed.","             * If it has too many configs, we will only use the most basic of","             * the possible configurations.","             */","            const hasFewCombos = (this.rules[rule].length <= MAX_CONFIG_COMBINATIONS);","","            if (this.rules[rule][idx] && (hasFewCombos || this.rules[rule][idx].specificity <= 2)) {","","                /*","                 * If the rule has too many possible combinations, only take","                 * simple ones, avoiding objects.","                 */","                if (!hasFewCombos && typeof this.rules[rule][idx].config[1] === \"object\") {","                    return;","                }","","                ruleSets[idx] = ruleSets[idx] || {};","                ruleSets[idx][rule] = this.rules[rule][idx].config;","","                /*","                 * Initialize errorCount to zero, since this is a config which","                 * will be linted.","                 */","                this.rules[rule][idx].errorCount = 0;","            }","        }.bind(this);","","        while (ruleSets.length === idx) {","            ruleIds.forEach(addRuleToRuleSet);","            idx += 1;","        }","","        return ruleSets;","    }","","    /**","     * Remove all items from the registry with a non-zero number of errors","     *","     * Note: this also removes rule configurations which were not linted","     * (meaning, they have an undefined errorCount).","     *","     * @returns {void}","     */","    stripFailingConfigs() {","        const ruleIds = Object.keys(this.rules),","            newRegistry = new Registry();","","        newRegistry.rules = Object.assign({}, this.rules);","        ruleIds.forEach(ruleId => {","            const errorFreeItems = newRegistry.rules[ruleId].filter(registryItem => (registryItem.errorCount === 0));","","            if (errorFreeItems.length > 0) {","                newRegistry.rules[ruleId] = errorFreeItems;","            } else {","                delete newRegistry.rules[ruleId];","            }","        });","","        return newRegistry;","    }","","    /**","     * Removes rule configurations which were not included in a ruleSet","     *","     * @returns {void}","     */","    stripExtraConfigs() {","        const ruleIds = Object.keys(this.rules),","            newRegistry = new Registry();","","        newRegistry.rules = Object.assign({}, this.rules);","        ruleIds.forEach(ruleId => {","            newRegistry.rules[ruleId] = newRegistry.rules[ruleId].filter(registryItem => (typeof registryItem.errorCount !== \"undefined\"));","        });","","        return newRegistry;","    }","","    /**","     * Creates a registry of rules which had no error-free configs.","     * The new registry is intended to be analyzed to determine whether its rules","     * should be disabled or set to warning.","     *","     * @returns {Registry}  A registry of failing rules.","     */","    getFailingRulesRegistry() {","        const ruleIds = Object.keys(this.rules),","            failingRegistry = new Registry();","","        ruleIds.forEach(ruleId => {","            const failingConfigs = this.rules[ruleId].filter(registryItem => (registryItem.errorCount > 0));","","            if (failingConfigs && failingConfigs.length === this.rules[ruleId].length) {","                failingRegistry.rules[ruleId] = failingConfigs;","            }","        });","","        return failingRegistry;","    }","","    /**","     * Create an eslint config for any rules which only have one configuration","     * in the registry.","     *","     * @returns {Object} An eslint config with rules section populated","     */","    createConfig() {","        const ruleIds = Object.keys(this.rules),","            config = { rules: {} };","","        ruleIds.forEach(ruleId => {","            if (this.rules[ruleId].length === 1) {","                config.rules[ruleId] = this.rules[ruleId][0].config;","            }","        });","","        return config;","    }","","    /**","     * Return a cloned registry containing only configs with a desired specificity","     *","     * @param   {number} specificity Only keep configs with this specificity","     * @returns {Registry}           A registry of rules","     */","    filterBySpecificity(specificity) {","        const ruleIds = Object.keys(this.rules),","            newRegistry = new Registry();","","        newRegistry.rules = Object.assign({}, this.rules);","        ruleIds.forEach(ruleId => {","            newRegistry.rules[ruleId] = this.rules[ruleId].filter(registryItem => (registryItem.specificity === specificity));","        });","","        return newRegistry;","    }","","    /**","     * Lint SourceCodes against all configurations in the registry, and record results","     *","     * @param   {Object[]} sourceCodes  SourceCode objects for each filename","     * @param   {Object}   config       ESLint config object","     * @param   {progressCallback} [cb] Optional callback for reporting execution status","     * @returns {Registry}              New registry with errorCount populated","     */","    lintSourceCode(sourceCodes, config, cb) {","        let ruleSetIdx,","            lintedRegistry;","","        lintedRegistry = new Registry();","        lintedRegistry.rules = Object.assign({}, this.rules);","","        const ruleSets = lintedRegistry.buildRuleSets();","","        lintedRegistry = lintedRegistry.stripExtraConfigs();","","        debug(\"Linting with all possible rule combinations\");","","        const filenames = Object.keys(sourceCodes);","        const totalFilesLinting = filenames.length * ruleSets.length;","","        filenames.forEach(filename => {","            debug(`Linting file: ${filename}`);","","            ruleSetIdx = 0;","","            ruleSets.forEach(ruleSet => {","                const lintConfig = Object.assign({}, config, { rules: ruleSet });","                const lintResults = eslint.verify(sourceCodes[filename], lintConfig);","","                lintResults.forEach(result => {","","                    // It is possible that the error is from a configuration comment","                    // in a linted file, in which case there may not be a config","                    // set in this ruleSetIdx.","                    // (https://github.com/eslint/eslint/issues/5992)","                    // (https://github.com/eslint/eslint/issues/7860)","                    if (","                        lintedRegistry.rules[result.ruleId] &&","                        lintedRegistry.rules[result.ruleId][ruleSetIdx]","                    ) {","                        lintedRegistry.rules[result.ruleId][ruleSetIdx].errorCount += 1;","                    }","                });","","                ruleSetIdx += 1;","","                if (cb) {","                    cb(totalFilesLinting);  // eslint-disable-line callback-return","                }","            });","","            // Deallocate for GC","            sourceCodes[filename] = null;","        });","","        return lintedRegistry;","    }","}","","/**"," * Extract rule configuration into eslint:recommended where possible."," *"," * This will return a new config with `\"extends\": \"eslint:recommended\"` and"," * only the rules which have configurations different from the recommended config."," *"," * @param   {Object} config config object"," * @returns {Object}        config object using `\"extends\": \"eslint:recommended\"`"," */","function extendFromRecommended(config) {","    const newConfig = Object.assign({}, config);","","    ConfigOps.normalizeToStrings(newConfig);","","    const recRules = Object.keys(recConfig.rules).filter(ruleId => ConfigOps.isErrorSeverity(recConfig.rules[ruleId]));","","    recRules.forEach(ruleId => {","        if (lodash.isEqual(recConfig.rules[ruleId], newConfig.rules[ruleId])) {","            delete newConfig.rules[ruleId];","        }","    });","    newConfig.extends = RECOMMENDED_CONFIG_NAME;","    return newConfig;","}","","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    Registry,","    extendFromRecommended","};",""],"l":{"12":1,"18":1,"24":1,"51":1,"52":0,"53":0,"58":0,"76":0,"88":0,"90":0,"108":0,"109":0,"121":0,"129":0,"131":0,"137":0,"138":0,"141":0,"142":0,"148":0,"152":0,"153":0,"154":0,"157":0,"169":0,"172":0,"173":0,"174":0,"176":0,"177":0,"179":0,"183":0,"192":0,"195":0,"196":0,"197":0,"200":0,"211":0,"214":0,"215":0,"217":0,"218":0,"222":0,"232":0,"235":0,"236":0,"237":0,"241":0,"251":0,"254":0,"255":0,"256":0,"259":0,"271":0,"274":0,"275":0,"277":0,"279":0,"281":0,"283":0,"284":0,"286":0,"287":0,"289":0,"291":0,"292":0,"293":0,"295":0,"302":0,"306":0,"310":0,"312":0,"313":0,"318":0,"321":0,"334":1,"335":0,"337":0,"339":0,"341":0,"342":0,"343":0,"346":0,"347":0,"355":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-rule.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-rule.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"explodeArray","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":26}}},"2":{"name":"combineArrays","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":35}}},"3":{"name":"groupByProperty","line":80,"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":34}}},"4":{"name":"combinePropertyObjects","line":144,"loc":{"start":{"line":144,"column":0},"end":{"line":144,"column":50}}},"5":{"name":"(anonymous_5)","line":186,"loc":{"start":{"line":186,"column":15},"end":{"line":186,"column":25}}},"6":{"name":"(anonymous_6)","line":202,"loc":{"start":{"line":202,"column":20},"end":{"line":202,"column":31}}},"7":{"name":"(anonymous_7)","line":219,"loc":{"start":{"line":219,"column":12},"end":{"line":219,"column":20}}},"8":{"name":"(anonymous_8)","line":228,"loc":{"start":{"line":228,"column":13},"end":{"line":228,"column":19}}},"9":{"name":"(anonymous_9)","line":231,"loc":{"start":{"line":231,"column":15},"end":{"line":231,"column":34}}},"10":{"name":"(anonymous_10)","line":240,"loc":{"start":{"line":240,"column":19},"end":{"line":240,"column":22}}},"11":{"name":"generateConfigsFromSchema","line":273,"loc":{"start":{"line":273,"column":0},"end":{"line":273,"column":43}}},"12":{"name":"createCoreRuleConfigs","line":301,"loc":{"start":{"line":301,"column":0},"end":{"line":301,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":41}},"2":{"start":{"line":25,"column":0},"end":{"line":30,"column":1}},"3":{"start":{"line":26,"column":4},"end":{"line":29,"column":11}},"4":{"start":{"line":27,"column":8},"end":{"line":27,"column":30}},"5":{"start":{"line":28,"column":8},"end":{"line":28,"column":27}},"6":{"start":{"line":43,"column":0},"end":{"line":58,"column":1}},"7":{"start":{"line":44,"column":4},"end":{"line":44,"column":19}},"8":{"start":{"line":46,"column":4},"end":{"line":48,"column":5}},"9":{"start":{"line":47,"column":8},"end":{"line":47,"column":34}},"10":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},"11":{"start":{"line":50,"column":8},"end":{"line":50,"column":34}},"12":{"start":{"line":52,"column":4},"end":{"line":56,"column":7}},"13":{"start":{"line":53,"column":8},"end":{"line":55,"column":11}},"14":{"start":{"line":54,"column":12},"end":{"line":54,"column":40}},"15":{"start":{"line":57,"column":4},"end":{"line":57,"column":15}},"16":{"start":{"line":80,"column":0},"end":{"line":89,"column":1}},"17":{"start":{"line":81,"column":4},"end":{"line":86,"column":11}},"18":{"start":{"line":82,"column":8},"end":{"line":82,"column":41}},"19":{"start":{"line":84,"column":8},"end":{"line":84,"column":86}},"20":{"start":{"line":85,"column":8},"end":{"line":85,"column":27}},"21":{"start":{"line":88,"column":4},"end":{"line":88,"column":65}},"22":{"start":{"line":88,"column":47},"end":{"line":88,"column":63}},"23":{"start":{"line":144,"column":0},"end":{"line":169,"column":1}},"24":{"start":{"line":145,"column":4},"end":{"line":145,"column":19}},"25":{"start":{"line":147,"column":4},"end":{"line":149,"column":5}},"26":{"start":{"line":148,"column":8},"end":{"line":148,"column":23}},"27":{"start":{"line":150,"column":4},"end":{"line":152,"column":5}},"28":{"start":{"line":151,"column":8},"end":{"line":151,"column":23}},"29":{"start":{"line":153,"column":4},"end":{"line":167,"column":7}},"30":{"start":{"line":154,"column":8},"end":{"line":166,"column":11}},"31":{"start":{"line":155,"column":12},"end":{"line":155,"column":35}},"32":{"start":{"line":156,"column":12},"end":{"line":156,"column":48}},"33":{"start":{"line":157,"column":12},"end":{"line":157,"column":48}},"34":{"start":{"line":159,"column":12},"end":{"line":161,"column":15}},"35":{"start":{"line":160,"column":16},"end":{"line":160,"column":49}},"36":{"start":{"line":162,"column":12},"end":{"line":164,"column":15}},"37":{"start":{"line":163,"column":16},"end":{"line":163,"column":49}},"38":{"start":{"line":165,"column":12},"end":{"line":165,"column":34}},"39":{"start":{"line":168,"column":4},"end":{"line":168,"column":15}},"40":{"start":{"line":192,"column":8},"end":{"line":192,"column":41}},"41":{"start":{"line":203,"column":8},"end":{"line":203,"column":33}},"42":{"start":{"line":205,"column":8},"end":{"line":208,"column":11}},"43":{"start":{"line":206,"column":12},"end":{"line":206,"column":37}},"44":{"start":{"line":207,"column":12},"end":{"line":207,"column":26}},"45":{"start":{"line":211,"column":8},"end":{"line":211,"column":43}},"46":{"start":{"line":220,"column":8},"end":{"line":220,"column":91}},"47":{"start":{"line":229,"column":8},"end":{"line":243,"column":10}},"48":{"start":{"line":232,"column":16},"end":{"line":237,"column":17}},"49":{"start":{"line":233,"column":20},"end":{"line":233,"column":41}},"50":{"start":{"line":235,"column":20},"end":{"line":235,"column":54}},"51":{"start":{"line":236,"column":20},"end":{"line":236,"column":55}},"52":{"start":{"line":241,"column":16},"end":{"line":241,"column":154}},"53":{"start":{"line":241,"column":105},"end":{"line":241,"column":148}},"54":{"start":{"line":249,"column":8},"end":{"line":256,"column":11}},"55":{"start":{"line":250,"column":12},"end":{"line":252,"column":13}},"56":{"start":{"line":251,"column":16},"end":{"line":251,"column":69}},"57":{"start":{"line":253,"column":12},"end":{"line":255,"column":13}},"58":{"start":{"line":254,"column":16},"end":{"line":254,"column":57}},"59":{"start":{"line":257,"column":8},"end":{"line":257,"column":34}},"60":{"start":{"line":259,"column":8},"end":{"line":262,"column":9}},"61":{"start":{"line":260,"column":12},"end":{"line":260,"column":119}},"62":{"start":{"line":261,"column":12},"end":{"line":261,"column":24}},"63":{"start":{"line":264,"column":8},"end":{"line":264,"column":21}},"64":{"start":{"line":273,"column":0},"end":{"line":295,"column":1}},"65":{"start":{"line":274,"column":4},"end":{"line":274,"column":42}},"66":{"start":{"line":276,"column":4},"end":{"line":292,"column":5}},"67":{"start":{"line":277,"column":8},"end":{"line":291,"column":9}},"68":{"start":{"line":278,"column":12},"end":{"line":290,"column":13}},"69":{"start":{"line":279,"column":16},"end":{"line":279,"column":45}},"70":{"start":{"line":280,"column":19},"end":{"line":290,"column":13}},"71":{"start":{"line":281,"column":16},"end":{"line":283,"column":17}},"72":{"start":{"line":282,"column":20},"end":{"line":282,"column":26}},"73":{"start":{"line":289,"column":16},"end":{"line":289,"column":22}},"74":{"start":{"line":293,"column":4},"end":{"line":293,"column":33}},"75":{"start":{"line":294,"column":4},"end":{"line":294,"column":33}},"76":{"start":{"line":301,"column":0},"end":{"line":311,"column":1}},"77":{"start":{"line":302,"column":4},"end":{"line":302,"column":33}},"78":{"start":{"line":304,"column":4},"end":{"line":310,"column":11}},"79":{"start":{"line":305,"column":8},"end":{"line":305,"column":35}},"80":{"start":{"line":306,"column":8},"end":{"line":306,"column":85}},"81":{"start":{"line":308,"column":8},"end":{"line":308,"column":60}},"82":{"start":{"line":309,"column":8},"end":{"line":309,"column":27}},"83":{"start":{"line":318,"column":0},"end":{"line":321,"column":2}}},"branchMap":{"1":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"2":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"3":{"line":84,"type":"cond-expr","locations":[{"start":{"line":84,"column":48},"end":{"line":84,"column":77}},{"start":{"line":84,"column":80},"end":{"line":84,"column":85}}]},"4":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":4},"end":{"line":147,"column":4}},{"start":{"line":147,"column":4},"end":{"line":147,"column":4}}]},"5":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":4},"end":{"line":150,"column":4}},{"start":{"line":150,"column":4},"end":{"line":150,"column":4}}]},"6":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":27},"end":{"line":192,"column":34}},{"start":{"line":192,"column":38},"end":{"line":192,"column":40}}]},"7":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":19},"end":{"line":203,"column":27}},{"start":{"line":203,"column":31},"end":{"line":203,"column":32}}]},"8":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":12},"end":{"line":250,"column":12}},{"start":{"line":250,"column":12},"end":{"line":250,"column":12}}]},"9":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":12},"end":{"line":253,"column":12}},{"start":{"line":253,"column":12},"end":{"line":253,"column":12}}]},"10":{"line":253,"type":"binary-expr","locations":[{"start":{"line":253,"column":16},"end":{"line":253,"column":41}},{"start":{"line":253,"column":45},"end":{"line":253,"column":84}}]},"11":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":8},"end":{"line":259,"column":8}},{"start":{"line":259,"column":8},"end":{"line":259,"column":8}}]},"12":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":4},"end":{"line":276,"column":4}},{"start":{"line":276,"column":4},"end":{"line":276,"column":4}}]},"13":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":12},"end":{"line":278,"column":12}},{"start":{"line":278,"column":12},"end":{"line":278,"column":12}}]},"14":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":19},"end":{"line":280,"column":19}},{"start":{"line":280,"column":19},"end":{"line":280,"column":19}}]},"15":{"line":280,"type":"binary-expr","locations":[{"start":{"line":280,"column":23},"end":{"line":280,"column":31}},{"start":{"line":280,"column":35},"end":{"line":280,"column":56}}]},"16":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":16},"end":{"line":281,"column":16}},{"start":{"line":281,"column":16},"end":{"line":281,"column":16}}]},"17":{"line":306,"type":"cond-expr","locations":[{"start":{"line":306,"column":54},"end":{"line":306,"column":65}},{"start":{"line":306,"column":68},"end":{"line":306,"column":84}}]}},"code":["/**"," * @fileoverview Create configurations for a rule"," * @author Ian VanSchooten"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const rules = require(\"../rules\"),","    loadRules = require(\"../load-rules\");","","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Wrap all of the elements of an array into arrays."," * @param   {*[]}     xs Any array."," * @returns {Array[]}    An array of arrays."," */","function explodeArray(xs) {","    return xs.reduce((accumulator, x) => {","        accumulator.push([x]);","        return accumulator;","    }, []);","}","","/**"," * Mix two arrays such that each element of the second array is concatenated"," * onto each element of the first array."," *"," * For example:"," * combineArrays([a, [b, c]], [x, y]); // -> [[a, x], [a, y], [b, c, x], [b, c, y]]"," *"," * @param   {array} arr1 The first array to combine."," * @param   {array} arr2 The second array to combine."," * @returns {array}      A mixture of the elements of the first and second arrays."," */","function combineArrays(arr1, arr2) {","    const res = [];","","    if (arr1.length === 0) {","        return explodeArray(arr2);","    }","    if (arr2.length === 0) {","        return explodeArray(arr1);","    }","    arr1.forEach(x1 => {","        arr2.forEach(x2 => {","            res.push([].concat(x1, x2));","        });","    });","    return res;","}","","/**"," * Group together valid rule configurations based on object properties"," *"," * e.g.:"," * groupByProperty(["," *     {before: true},"," *     {before: false},"," *     {after: true},"," *     {after: false}"," * ]);"," *"," * will return:"," * ["," *     [{before: true}, {before: false}],"," *     [{after: true}, {after: false}]"," * ]"," *"," * @param   {Object[]} objects Array of objects, each with one property/value pair"," * @returns {Array[]}          Array of arrays of objects grouped by property"," */","function groupByProperty(objects) {","    const groupedObj = objects.reduce((accumulator, obj) => {","        const prop = Object.keys(obj)[0];","","        accumulator[prop] = accumulator[prop] ? accumulator[prop].concat(obj) : [obj];","        return accumulator;","    }, {});","","    return Object.keys(groupedObj).map(prop => groupedObj[prop]);","}","","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * Configuration settings for a rule."," *"," * A configuration can be a single number (severity), or an array where the first"," * element in the array is the severity, and is the only required element."," * Configs may also have one or more additional elements to specify rule"," * configuration or options."," *"," * @typedef {array|number} ruleConfig"," * @param {number}  0  The rule's severity (0, 1, 2)."," */","","/**"," * Object whose keys are rule names and values are arrays of valid ruleConfig items"," * which should be linted against the target source code to determine error counts."," * (a ruleConfigSet.ruleConfigs)."," *"," * e.g. rulesConfig = {"," *     \"comma-dangle\": [2, [2, \"always\"], [2, \"always-multiline\"], [2, \"never\"]],"," *     \"no-console\": [2]"," * }"," * @typedef rulesConfig"," */","","","/**"," * Create valid rule configurations by combining two arrays,"," * with each array containing multiple objects each with a"," * single property/value pair and matching properties."," *"," * e.g.:"," * combinePropertyObjects("," *     [{before: true}, {before: false}],"," *     [{after: true}, {after: false}]"," * );"," *"," * will return:"," * ["," *     {before: true, after: true},"," *     {before: true, after: false},"," *     {before: false, after: true},"," *     {before: false, after: false}"," * ]"," *"," * @param   {Object[]} objArr1 Single key/value objects, all with the same key"," * @param   {Object[]} objArr2 Single key/value objects, all with another key"," * @returns {Object[]}         Combined objects for each combination of input properties and values"," */","function combinePropertyObjects(objArr1, objArr2) {","    const res = [];","","    if (objArr1.length === 0) {","        return objArr2;","    }","    if (objArr2.length === 0) {","        return objArr1;","    }","    objArr1.forEach(obj1 => {","        objArr2.forEach(obj2 => {","            const combinedObj = {};","            const obj1Props = Object.keys(obj1);","            const obj2Props = Object.keys(obj2);","","            obj1Props.forEach(prop1 => {","                combinedObj[prop1] = obj1[prop1];","            });","            obj2Props.forEach(prop2 => {","                combinedObj[prop2] = obj2[prop2];","            });","            res.push(combinedObj);","        });","    });","    return res;","}",""," /**","  * Creates a new instance of a rule configuration set","  *","  * A rule configuration set is an array of configurations that are valid for a","  * given rule.  For example, the configuration set for the \"semi\" rule could be:","  *","  * ruleConfigSet.ruleConfigs // -> [[2], [2, \"always\"], [2, \"never\"]]","  *","  * Rule configuration set class","  */","class RuleConfigSet {","","    /**","     * @param {ruleConfig[]} configs Valid rule configurations","     */","    constructor(configs) {","","        /**","        * Stored valid rule configurations for this instance","        * @type {array}","        */","        this.ruleConfigs = configs || [];","    }","","    /**","    * Add a severity level to the front of all configs in the instance.","    * This should only be called after all configs have been added to the instance.","    *","    * @param {number} [severity=2] The level of severity for the rule (0, 1, 2)","    * @returns {void}","    */","    addErrorSeverity(severity) {","        severity = severity || 2;","","        this.ruleConfigs = this.ruleConfigs.map(config => {","            config.unshift(severity);","            return config;","        });","","        // Add a single config at the beginning consisting of only the severity","        this.ruleConfigs.unshift(severity);","    }","","    /**","    * Add rule configs from an array of strings (schema enums)","    * @param  {string[]} enums Array of valid rule options (e.g. [\"always\", \"never\"])","    * @returns {void}","    */","    addEnums(enums) {","        this.ruleConfigs = this.ruleConfigs.concat(combineArrays(this.ruleConfigs, enums));","    }","","    /**","    * Add rule configurations from a schema object","    * @param  {Object} obj Schema item with type === \"object\"","    * @returns {boolean} true if at least one schema for the object could be generated, false otherwise","    */","    addObject(obj) {","        const objectConfigSet = {","            objectConfigs: [],","            add(property, values) {","                for (let idx = 0; idx < values.length; idx++) {","                    const optionObj = {};","","                    optionObj[property] = values[idx];","                    this.objectConfigs.push(optionObj);","                }","            },","","            combine() {","                this.objectConfigs = groupByProperty(this.objectConfigs).reduce((accumulator, objArr) => combinePropertyObjects(accumulator, objArr), []);","            }","        };","","        /*","         * The object schema could have multiple independent properties.","         * If any contain enums or booleans, they can be added and then combined","         */","        Object.keys(obj.properties).forEach(prop => {","            if (obj.properties[prop].enum) {","                objectConfigSet.add(prop, obj.properties[prop].enum);","            }","            if (obj.properties[prop].type && obj.properties[prop].type === \"boolean\") {","                objectConfigSet.add(prop, [true, false]);","            }","        });","        objectConfigSet.combine();","","        if (objectConfigSet.objectConfigs.length > 0) {","            this.ruleConfigs = this.ruleConfigs.concat(combineArrays(this.ruleConfigs, objectConfigSet.objectConfigs));","            return true;","        }","","        return false;","    }","}","","/**","* Generate valid rule configurations based on a schema object","* @param   {Object} schema  A rule's schema object","* @returns {array[]}        Valid rule configurations","*/","function generateConfigsFromSchema(schema) {","    const configSet = new RuleConfigSet();","","    if (Array.isArray(schema)) {","        for (const opt of schema) {","            if (opt.enum) {","                configSet.addEnums(opt.enum);","            } else if (opt.type && opt.type === \"object\") {","                if (!configSet.addObject(opt)) {","                    break;","                }","","            // TODO (IanVS): support oneOf","            } else {","","                // If we don't know how to fill in this option, don't fill in any of the following options.","                break;","            }","        }","    }","    configSet.addErrorSeverity();","    return configSet.ruleConfigs;","}","","/**","* Generate possible rule configurations for all of the core rules","* @returns {rulesConfig} Hash of rule names and arrays of possible configurations","*/","function createCoreRuleConfigs() {","    const ruleList = loadRules();","","    return Object.keys(ruleList).reduce((accumulator, id) => {","        const rule = rules.get(id);","        const schema = (typeof rule === \"function\") ? rule.schema : rule.meta.schema;","","        accumulator[id] = generateConfigsFromSchema(schema);","        return accumulator;","    }, {});","}","","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    generateConfigsFromSchema,","    createCoreRuleConfigs","};",""],"l":{"12":1,"25":1,"26":0,"27":0,"28":0,"43":1,"44":0,"46":0,"47":0,"49":0,"50":0,"52":0,"53":0,"54":0,"57":0,"80":1,"81":0,"82":0,"84":0,"85":0,"88":0,"144":1,"145":0,"147":0,"148":0,"150":0,"151":0,"153":0,"154":0,"155":0,"156":0,"157":0,"159":0,"160":0,"162":0,"163":0,"165":0,"168":0,"192":0,"203":0,"205":0,"206":0,"207":0,"211":0,"220":0,"229":0,"232":0,"233":0,"235":0,"236":0,"241":0,"249":0,"250":0,"251":0,"253":0,"254":0,"257":0,"259":0,"260":0,"261":0,"264":0,"273":1,"274":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"289":0,"293":0,"294":0,"301":1,"302":0,"304":0,"305":0,"306":0,"308":0,"309":0,"318":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-initializer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/config/config-initializer.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":1,"106":0,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":1,"156":0,"157":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"writeFile","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":35}},"skip":true},"2":{"name":"installModules","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":32}}},"3":{"name":"configureRules","line":113,"loc":{"start":{"line":113,"column":0},"end":{"line":113,"column":41}}},"4":{"name":"processAnswers","line":215,"loc":{"start":{"line":215,"column":0},"end":{"line":215,"column":33}}},"5":{"name":"getConfigForStyleGuide","line":265,"loc":{"start":{"line":265,"column":0},"end":{"line":265,"column":39}}},"6":{"name":"promptUser","line":288,"loc":{"start":{"line":288,"column":0},"end":{"line":288,"column":30}},"skip":true},"7":{"name":"(anonymous_7)","line":308,"loc":{"start":{"line":308,"column":16},"end":{"line":308,"column":26}},"skip":true},"8":{"name":"(anonymous_8)","line":318,"loc":{"start":{"line":318,"column":16},"end":{"line":318,"column":26}},"skip":true},"9":{"name":"(anonymous_9)","line":326,"loc":{"start":{"line":326,"column":16},"end":{"line":326,"column":26}},"skip":true},"10":{"name":"(anonymous_10)","line":329,"loc":{"start":{"line":329,"column":20},"end":{"line":329,"column":28}},"skip":true},"11":{"name":"(anonymous_11)","line":342,"loc":{"start":{"line":342,"column":16},"end":{"line":342,"column":26}},"skip":true},"12":{"name":"(anonymous_12)","line":380,"loc":{"start":{"line":380,"column":20},"end":{"line":380,"column":30}},"skip":true},"13":{"name":"(anonymous_13)","line":396,"loc":{"start":{"line":396,"column":20},"end":{"line":396,"column":30}},"skip":true},"14":{"name":"(anonymous_14)","line":411,"loc":{"start":{"line":411,"column":20},"end":{"line":411,"column":30}},"skip":true},"15":{"name":"(anonymous_15)","line":490,"loc":{"start":{"line":490,"column":46},"end":{"line":490,"column":57}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":21,"column":32}},"2":{"start":{"line":23,"column":0},"end":{"line":23,"column":60}},"3":{"start":{"line":36,"column":0},"end":{"line":57,"column":1},"skip":true},"4":{"start":{"line":39,"column":4},"end":{"line":39,"column":24},"skip":true},"5":{"start":{"line":41,"column":4},"end":{"line":45,"column":5},"skip":true},"6":{"start":{"line":42,"column":8},"end":{"line":42,"column":25},"skip":true},"7":{"start":{"line":43,"column":11},"end":{"line":45,"column":5},"skip":true},"8":{"start":{"line":44,"column":8},"end":{"line":44,"column":26},"skip":true},"9":{"start":{"line":47,"column":4},"end":{"line":47,"column":51},"skip":true},"10":{"start":{"line":49,"column":4},"end":{"line":49,"column":34},"skip":true},"11":{"start":{"line":51,"column":4},"end":{"line":51,"column":54},"skip":true},"12":{"start":{"line":52,"column":4},"end":{"line":52,"column":82},"skip":true},"13":{"start":{"line":54,"column":4},"end":{"line":56,"column":5},"skip":true},"14":{"start":{"line":55,"column":8},"end":{"line":55,"column":126},"skip":true},"15":{"start":{"line":64,"column":0},"end":{"line":101,"column":1}},"16":{"start":{"line":65,"column":4},"end":{"line":65,"column":21}},"17":{"start":{"line":68,"column":4},"end":{"line":70,"column":5}},"18":{"start":{"line":69,"column":8},"end":{"line":69,"column":86}},"19":{"start":{"line":69,"column":60},"end":{"line":69,"column":83}},"20":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"21":{"start":{"line":72,"column":8},"end":{"line":72,"column":56}},"22":{"start":{"line":76,"column":4},"end":{"line":78,"column":5}},"23":{"start":{"line":77,"column":8},"end":{"line":77,"column":15}},"24":{"start":{"line":81,"column":4},"end":{"line":81,"column":30}},"25":{"start":{"line":83,"column":4},"end":{"line":83,"column":56}},"26":{"start":{"line":86,"column":4},"end":{"line":95,"column":7}},"27":{"start":{"line":87,"column":8},"end":{"line":87,"column":61}},"28":{"start":{"line":89,"column":8},"end":{"line":92,"column":9}},"29":{"start":{"line":90,"column":12},"end":{"line":90,"column":61}},"30":{"start":{"line":91,"column":12},"end":{"line":91,"column":42}},"31":{"start":{"line":94,"column":8},"end":{"line":94,"column":28}},"32":{"start":{"line":97,"column":4},"end":{"line":100,"column":5}},"33":{"start":{"line":98,"column":8},"end":{"line":98,"column":62}},"34":{"start":{"line":99,"column":8},"end":{"line":99,"column":53}},"35":{"start":{"line":113,"column":0},"end":{"line":208,"column":1}},"36":{"start":{"line":114,"column":4},"end":{"line":117,"column":29}},"37":{"start":{"line":118,"column":4},"end":{"line":119,"column":17}},"38":{"start":{"line":122,"column":4},"end":{"line":125,"column":7}},"39":{"start":{"line":127,"column":4},"end":{"line":127,"column":16}},"40":{"start":{"line":130,"column":4},"end":{"line":130,"column":53}},"41":{"start":{"line":132,"column":4},"end":{"line":139,"column":5}},"42":{"start":{"line":133,"column":8},"end":{"line":135,"column":11}},"43":{"start":{"line":134,"column":12},"end":{"line":134,"column":54}},"44":{"start":{"line":137,"column":8},"end":{"line":137,"column":23}},"45":{"start":{"line":138,"column":8},"end":{"line":138,"column":16}},"46":{"start":{"line":140,"column":4},"end":{"line":140,"column":52}},"47":{"start":{"line":142,"column":4},"end":{"line":145,"column":5}},"48":{"start":{"line":143,"column":8},"end":{"line":143,"column":23}},"49":{"start":{"line":144,"column":8},"end":{"line":144,"column":93}},"50":{"start":{"line":148,"column":4},"end":{"line":148,"column":41}},"51":{"start":{"line":149,"column":4},"end":{"line":149,"column":37}},"52":{"start":{"line":152,"column":4},"end":{"line":154,"column":7}},"53":{"start":{"line":153,"column":8},"end":{"line":153,"column":62}},"54":{"start":{"line":155,"column":4},"end":{"line":155,"column":74}},"55":{"start":{"line":158,"column":4},"end":{"line":158,"column":119}},"56":{"start":{"line":158,"column":67},"end":{"line":158,"column":117}},"57":{"start":{"line":161,"column":4},"end":{"line":161,"column":63}},"58":{"start":{"line":163,"column":4},"end":{"line":167,"column":7}},"59":{"start":{"line":166,"column":8},"end":{"line":166,"column":76}},"60":{"start":{"line":170,"column":4},"end":{"line":170,"column":46}},"61":{"start":{"line":174,"column":4},"end":{"line":174,"column":56}},"62":{"start":{"line":180,"column":4},"end":{"line":180,"column":80}},"63":{"start":{"line":183,"column":4},"end":{"line":183,"column":82}},"64":{"start":{"line":186,"column":4},"end":{"line":186,"column":80}},"65":{"start":{"line":189,"column":4},"end":{"line":189,"column":122}},"66":{"start":{"line":192,"column":4},"end":{"line":192,"column":26}},"67":{"start":{"line":195,"column":4},"end":{"line":195,"column":54}},"68":{"start":{"line":196,"column":4},"end":{"line":196,"column":43}},"69":{"start":{"line":197,"column":4},"end":{"line":197,"column":95}},"70":{"start":{"line":197,"column":56},"end":{"line":197,"column":85}},"71":{"start":{"line":198,"column":4},"end":{"line":202,"column":16}},"72":{"start":{"line":204,"column":4},"end":{"line":204,"column":28}},"73":{"start":{"line":206,"column":4},"end":{"line":206,"column":44}},"74":{"start":{"line":207,"column":4},"end":{"line":207,"column":21}},"75":{"start":{"line":215,"column":0},"end":{"line":258,"column":1}},"76":{"start":{"line":216,"column":4},"end":{"line":216,"column":40}},"77":{"start":{"line":218,"column":4},"end":{"line":224,"column":5}},"78":{"start":{"line":219,"column":8},"end":{"line":219,"column":30}},"79":{"start":{"line":220,"column":8},"end":{"line":223,"column":9}},"80":{"start":{"line":221,"column":12},"end":{"line":221,"column":62}},"81":{"start":{"line":222,"column":12},"end":{"line":222,"column":55}},"82":{"start":{"line":225,"column":4},"end":{"line":227,"column":5}},"83":{"start":{"line":226,"column":8},"end":{"line":226,"column":35}},"84":{"start":{"line":228,"column":4},"end":{"line":230,"column":7}},"85":{"start":{"line":229,"column":8},"end":{"line":229,"column":31}},"86":{"start":{"line":231,"column":4},"end":{"line":239,"column":5}},"87":{"start":{"line":232,"column":8},"end":{"line":232,"column":58}},"88":{"start":{"line":233,"column":8},"end":{"line":233,"column":84}},"89":{"start":{"line":234,"column":8},"end":{"line":234,"column":53}},"90":{"start":{"line":235,"column":8},"end":{"line":238,"column":9}},"91":{"start":{"line":236,"column":12},"end":{"line":236,"column":39}},"92":{"start":{"line":237,"column":12},"end":{"line":237,"column":82}},"93":{"start":{"line":241,"column":4},"end":{"line":247,"column":5}},"94":{"start":{"line":242,"column":8},"end":{"line":242,"column":46}},"95":{"start":{"line":243,"column":8},"end":{"line":243,"column":56}},"96":{"start":{"line":244,"column":8},"end":{"line":244,"column":56}},"97":{"start":{"line":245,"column":8},"end":{"line":245,"column":71}},"98":{"start":{"line":246,"column":8},"end":{"line":246,"column":73}},"99":{"start":{"line":249,"column":4},"end":{"line":249,"column":27}},"100":{"start":{"line":251,"column":4},"end":{"line":254,"column":5}},"101":{"start":{"line":252,"column":8},"end":{"line":252,"column":49}},"102":{"start":{"line":253,"column":8},"end":{"line":253,"column":58}},"103":{"start":{"line":256,"column":4},"end":{"line":256,"column":41}},"104":{"start":{"line":257,"column":4},"end":{"line":257,"column":18}},"105":{"start":{"line":265,"column":0},"end":{"line":280,"column":1}},"106":{"start":{"line":266,"column":4},"end":{"line":271,"column":6}},"107":{"start":{"line":273,"column":4},"end":{"line":275,"column":5}},"108":{"start":{"line":274,"column":8},"end":{"line":274,"column":64}},"109":{"start":{"line":277,"column":4},"end":{"line":277,"column":34}},"110":{"start":{"line":279,"column":4},"end":{"line":279,"column":25}},"111":{"start":{"line":288,"column":0},"end":{"line":481,"column":1},"skip":true},"112":{"start":{"line":289,"column":4},"end":{"line":289,"column":15},"skip":true},"113":{"start":{"line":291,"column":4},"end":{"line":480,"column":7},"skip":true},"114":{"start":{"line":309,"column":16},"end":{"line":309,"column":71},"skip":true},"115":{"start":{"line":310,"column":16},"end":{"line":310,"column":79},"skip":true},"116":{"start":{"line":319,"column":16},"end":{"line":319,"column":55},"skip":true},"117":{"start":{"line":327,"column":16},"end":{"line":327,"column":51},"skip":true},"118":{"start":{"line":330,"column":16},"end":{"line":332,"column":17},"skip":true},"119":{"start":{"line":331,"column":20},"end":{"line":331,"column":79},"skip":true},"120":{"start":{"line":333,"column":16},"end":{"line":333,"column":28},"skip":true},"121":{"start":{"line":343,"column":16},"end":{"line":343,"column":112},"skip":true},"122":{"start":{"line":349,"column":8},"end":{"line":365,"column":9},"skip":true},"123":{"start":{"line":350,"column":12},"end":{"line":353,"column":13},"skip":true},"124":{"start":{"line":351,"column":16},"end":{"line":351,"column":157},"skip":true},"125":{"start":{"line":352,"column":16},"end":{"line":352,"column":23},"skip":true},"126":{"start":{"line":354,"column":12},"end":{"line":356,"column":13},"skip":true},"127":{"start":{"line":355,"column":16},"end":{"line":355,"column":56},"skip":true},"128":{"start":{"line":357,"column":12},"end":{"line":363,"column":13},"skip":true},"129":{"start":{"line":358,"column":16},"end":{"line":358,"column":73},"skip":true},"130":{"start":{"line":359,"column":16},"end":{"line":359,"column":55},"skip":true},"131":{"start":{"line":361,"column":16},"end":{"line":361,"column":30},"skip":true},"132":{"start":{"line":362,"column":16},"end":{"line":362,"column":23},"skip":true},"133":{"start":{"line":364,"column":12},"end":{"line":364,"column":19},"skip":true},"134":{"start":{"line":368,"column":8},"end":{"line":479,"column":11},"skip":true},"135":{"start":{"line":381,"column":20},"end":{"line":381,"column":48},"skip":true},"136":{"start":{"line":397,"column":20},"end":{"line":397,"column":70},"skip":true},"137":{"start":{"line":397,"column":51},"end":{"line":397,"column":68},"skip":true},"138":{"start":{"line":412,"column":20},"end":{"line":412,"column":39},"skip":true},"139":{"start":{"line":418,"column":12},"end":{"line":430,"column":13},"skip":true},"140":{"start":{"line":419,"column":16},"end":{"line":428,"column":17},"skip":true},"141":{"start":{"line":420,"column":20},"end":{"line":420,"column":91},"skip":true},"142":{"start":{"line":422,"column":20},"end":{"line":422,"column":61},"skip":true},"143":{"start":{"line":423,"column":20},"end":{"line":423,"column":43},"skip":true},"144":{"start":{"line":424,"column":20},"end":{"line":424,"column":59},"skip":true},"145":{"start":{"line":426,"column":20},"end":{"line":426,"column":34},"skip":true},"146":{"start":{"line":427,"column":20},"end":{"line":427,"column":27},"skip":true},"147":{"start":{"line":429,"column":16},"end":{"line":429,"column":23},"skip":true},"148":{"start":{"line":433,"column":12},"end":{"line":478,"column":15},"skip":true},"149":{"start":{"line":469,"column":16},"end":{"line":477,"column":17},"skip":true},"150":{"start":{"line":470,"column":20},"end":{"line":470,"column":97},"skip":true},"151":{"start":{"line":472,"column":20},"end":{"line":472,"column":58},"skip":true},"152":{"start":{"line":473,"column":20},"end":{"line":473,"column":43},"skip":true},"153":{"start":{"line":474,"column":20},"end":{"line":474,"column":54},"skip":true},"154":{"start":{"line":476,"column":20},"end":{"line":476,"column":34},"skip":true},"155":{"start":{"line":487,"column":0},"end":{"line":493,"column":2}},"156":{"start":{"line":491,"column":8},"end":{"line":491,"column":29},"skip":true},"157":{"start":{"line":495,"column":0},"end":{"line":495,"column":22}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4},"skip":true},{"start":{"line":41,"column":4},"end":{"line":41,"column":4},"skip":true}]},"2":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":11},"end":{"line":43,"column":11},"skip":true},{"start":{"line":43,"column":11},"end":{"line":43,"column":11},"skip":true}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4},"skip":true},{"start":{"line":54,"column":4},"end":{"line":54,"column":4},"skip":true}]},"4":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"6":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":8},"end":{"line":71,"column":22}},{"start":{"line":71,"column":26},"end":{"line":71,"column":66}}]},"7":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":4},"end":{"line":76,"column":4}},{"start":{"line":76,"column":4},"end":{"line":76,"column":4}}]},"8":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":8}},{"start":{"line":89,"column":8},"end":{"line":89,"column":8}}]},"9":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":12},"end":{"line":89,"column":31}},{"start":{"line":89,"column":35},"end":{"line":89,"column":47}}]},"10":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"11":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":4},"end":{"line":142,"column":4}},{"start":{"line":142,"column":4},"end":{"line":142,"column":4}}]},"12":{"line":166,"type":"cond-expr","locations":[{"start":{"line":166,"column":70},"end":{"line":166,"column":71}},{"start":{"line":166,"column":74},"end":{"line":166,"column":75}}]},"13":{"line":201,"type":"cond-expr","locations":[{"start":{"line":201,"column":33},"end":{"line":201,"column":36}},{"start":{"line":201,"column":39},"end":{"line":201,"column":43}}]},"14":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":4},"end":{"line":218,"column":4}},{"start":{"line":218,"column":4},"end":{"line":218,"column":4}}]},"15":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":8},"end":{"line":220,"column":8}},{"start":{"line":220,"column":8},"end":{"line":220,"column":8}}]},"16":{"line":221,"type":"binary-expr","locations":[{"start":{"line":221,"column":35},"end":{"line":221,"column":55}},{"start":{"line":221,"column":59},"end":{"line":221,"column":61}}]},"17":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":4},"end":{"line":225,"column":4}},{"start":{"line":225,"column":4},"end":{"line":225,"column":4}}]},"18":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":4},"end":{"line":231,"column":4}},{"start":{"line":231,"column":4},"end":{"line":231,"column":4}}]},"19":{"line":232,"type":"binary-expr","locations":[{"start":{"line":232,"column":31},"end":{"line":232,"column":51}},{"start":{"line":232,"column":55},"end":{"line":232,"column":57}}]},"20":{"line":233,"type":"binary-expr","locations":[{"start":{"line":233,"column":44},"end":{"line":233,"column":77}},{"start":{"line":233,"column":81},"end":{"line":233,"column":83}}]},"21":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":8},"end":{"line":235,"column":8}},{"start":{"line":235,"column":8},"end":{"line":235,"column":8}}]},"22":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":4},"end":{"line":241,"column":4}},{"start":{"line":241,"column":4},"end":{"line":241,"column":4}}]},"23":{"line":246,"type":"cond-expr","locations":[{"start":{"line":246,"column":53},"end":{"line":246,"column":61}},{"start":{"line":246,"column":64},"end":{"line":246,"column":71}}]},"24":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":4},"end":{"line":251,"column":4}},{"start":{"line":251,"column":4},"end":{"line":251,"column":4}}]},"25":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":4},"end":{"line":273,"column":4}},{"start":{"line":273,"column":4},"end":{"line":273,"column":4}}]},"26":{"line":310,"type":"binary-expr","locations":[{"start":{"line":310,"column":23},"end":{"line":310,"column":49},"skip":true},{"start":{"line":310,"column":53},"end":{"line":310,"column":78},"skip":true}]},"27":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":16},"end":{"line":330,"column":16},"skip":true},{"start":{"line":330,"column":16},"end":{"line":330,"column":16},"skip":true}]},"28":{"line":330,"type":"binary-expr","locations":[{"start":{"line":330,"column":20},"end":{"line":330,"column":45},"skip":true},{"start":{"line":330,"column":49},"end":{"line":330,"column":69},"skip":true}]},"29":{"line":343,"type":"binary-expr","locations":[{"start":{"line":343,"column":25},"end":{"line":343,"column":51},"skip":true},{"start":{"line":343,"column":55},"end":{"line":343,"column":80},"skip":true},{"start":{"line":343,"column":85},"end":{"line":343,"column":110},"skip":true}]},"30":{"line":349,"type":"if","locations":[{"start":{"line":349,"column":8},"end":{"line":349,"column":8},"skip":true},{"start":{"line":349,"column":8},"end":{"line":349,"column":8},"skip":true}]},"31":{"line":350,"type":"if","locations":[{"start":{"line":350,"column":12},"end":{"line":350,"column":12},"skip":true},{"start":{"line":350,"column":12},"end":{"line":350,"column":12},"skip":true}]},"32":{"line":354,"type":"if","locations":[{"start":{"line":354,"column":12},"end":{"line":354,"column":12},"skip":true},{"start":{"line":354,"column":12},"end":{"line":354,"column":12},"skip":true}]},"33":{"line":354,"type":"binary-expr","locations":[{"start":{"line":354,"column":16},"end":{"line":354,"column":52},"skip":true},{"start":{"line":354,"column":56},"end":{"line":354,"column":81},"skip":true}]},"34":{"line":418,"type":"if","locations":[{"start":{"line":418,"column":12},"end":{"line":418,"column":12},"skip":true},{"start":{"line":418,"column":12},"end":{"line":418,"column":12},"skip":true}]}},"code":["/**"," * @fileoverview Config initialization wizard."," * @author Ilya Volodin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const util = require(\"util\"),","    inquirer = require(\"inquirer\"),","    ProgressBar = require(\"progress\"),","    autoconfig = require(\"./autoconfig.js\"),","    ConfigFile = require(\"./config-file\"),","    ConfigOps = require(\"./config-ops\"),","    getSourceCodeOfFiles = require(\"../util/source-code-util\").getSourceCodeOfFiles,","    npmUtil = require(\"../util/npm-util\"),","    recConfig = require(\"../../conf/eslint-recommended\"),","    log = require(\"../logging\");","","const debug = require(\"debug\")(\"eslint:config-initializer\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/* istanbul ignore next: hard to test fs function */","/**"," * Create .eslintrc file in the current working directory"," * @param {Object} config object that contains user's answers"," * @param {string} format The file format to write to."," * @returns {void}"," */","function writeFile(config, format) {","","    // default is .js","    let extname = \".js\";","","    if (format === \"YAML\") {","        extname = \".yml\";","    } else if (format === \"JSON\") {","        extname = \".json\";","    }","","    const installedESLint = config.installedESLint;","","    delete config.installedESLint;","","    ConfigFile.write(config, `./.eslintrc${extname}`);","    log.info(`Successfully created .eslintrc${extname} file in ${process.cwd()}`);","","    if (installedESLint) {","        log.info(\"ESLint was installed locally. We recommend using this local copy instead of your globally-installed copy.\");","    }","}","","/**"," * Synchronously install necessary plugins, configs, parsers, etc. based on the config"," * @param   {Object} config  config object"," * @returns {void}"," */","function installModules(config) {","    let modules = [];","","    // Create a list of modules which should be installed based on config","    if (config.plugins) {","        modules = modules.concat(config.plugins.map(name => `eslint-plugin-${name}`));","    }","    if (config.extends && config.extends.indexOf(\"eslint:\") === -1) {","        modules.push(`eslint-config-${config.extends}`);","    }","","    // Determine which modules are already installed","    if (modules.length === 0) {","        return;","    }","","    // Add eslint to list in case user does not have it installed locally","    modules.unshift(\"eslint\");","","    const installStatus = npmUtil.checkDevDeps(modules);","","    // Install packages which aren't already installed","    const modulesToInstall = Object.keys(installStatus).filter(module => {","        const notInstalled = installStatus[module] === false;","","        if (module === \"eslint\" && notInstalled) {","            log.info(\"Local ESLint installation not found.\");","            config.installedESLint = true;","        }","","        return notInstalled;","    });","","    if (modulesToInstall.length > 0) {","        log.info(`Installing ${modulesToInstall.join(\", \")}`);","        npmUtil.installSyncSaveDev(modulesToInstall);","    }","}","","/**"," * Set the `rules` of a config by examining a user's source code"," *"," * Note: This clones the config object and returns a new config to avoid mutating"," * the original config parameter."," *"," * @param   {Object} answers  answers received from inquirer"," * @param   {Object} config   config object"," * @returns {Object}          config object with configured rules"," */","function configureRules(answers, config) {","    const BAR_TOTAL = 20,","        BAR_SOURCE_CODE_TOTAL = 4,","        newConfig = Object.assign({}, config),","        disabledConfigs = {};","    let sourceCodes,","        registry;","","    // Set up a progress bar, as this process can take a long time","    const bar = new ProgressBar(\"Determining Config: :percent [:bar] :elapseds elapsed, eta :etas \", {","        width: 30,","        total: BAR_TOTAL","    });","","    bar.tick(0); // Shows the progress bar","","    // Get the SourceCode of all chosen files","    const patterns = answers.patterns.split(/[\\s]+/);","","    try {","        sourceCodes = getSourceCodeOfFiles(patterns, { baseConfig: newConfig, useEslintrc: false }, total => {","            bar.tick((BAR_SOURCE_CODE_TOTAL / total));","        });","    } catch (e) {","        log.info(\"\\n\");","        throw e;","    }","    const fileQty = Object.keys(sourceCodes).length;","","    if (fileQty === 0) {","        log.info(\"\\n\");","        throw new Error(\"Automatic Configuration failed.  No files were able to be parsed.\");","    }","","    // Create a registry of rule configs","    registry = new autoconfig.Registry();","    registry.populateFromCoreRules();","","    // Lint all files with each rule config in the registry","    registry = registry.lintSourceCode(sourceCodes, newConfig, total => {","        bar.tick((BAR_TOTAL - BAR_SOURCE_CODE_TOTAL) / total); // Subtract out ticks used at beginning","    });","    debug(`\\nRegistry: ${util.inspect(registry.rules, { depth: null })}`);","","    // Create a list of recommended rules, because we don't want to disable them","    const recRules = Object.keys(recConfig.rules).filter(ruleId => ConfigOps.isErrorSeverity(recConfig.rules[ruleId]));","","    // Find and disable rules which had no error-free configuration","    const failingRegistry = registry.getFailingRulesRegistry();","","    Object.keys(failingRegistry.rules).forEach(ruleId => {","","        // If the rule is recommended, set it to error, otherwise disable it","        disabledConfigs[ruleId] = (recRules.indexOf(ruleId) !== -1) ? 2 : 0;","    });","","    // Now that we know which rules to disable, strip out configs with errors","    registry = registry.stripFailingConfigs();","","    // If there is only one config that results in no errors for a rule, we should use it.","    // createConfig will only add rules that have one configuration in the registry.","    const singleConfigs = registry.createConfig().rules;","","    // The \"sweet spot\" for number of options in a config seems to be two (severity plus one option).","    // Very often, a third option (usually an object) is available to address","    // edge cases, exceptions, or unique situations. We will prefer to use a config with","    // specificity of two.","    const specTwoConfigs = registry.filterBySpecificity(2).createConfig().rules;","","    // Maybe a specific combination using all three options works","    const specThreeConfigs = registry.filterBySpecificity(3).createConfig().rules;","","    // If all else fails, try to use the default (severity only)","    const defaultConfigs = registry.filterBySpecificity(1).createConfig().rules;","","    // Combine configs in reverse priority order (later take precedence)","    newConfig.rules = Object.assign({}, disabledConfigs, defaultConfigs, specThreeConfigs, specTwoConfigs, singleConfigs);","","    // Make sure progress bar has finished (floating point rounding)","    bar.update(BAR_TOTAL);","","    // Log out some stats to let the user know what happened","    const finalRuleIds = Object.keys(newConfig.rules);","    const totalRules = finalRuleIds.length;","    const enabledRules = finalRuleIds.filter(ruleId => (newConfig.rules[ruleId] !== 0)).length;","    const resultMessage = [","        `\\nEnabled ${enabledRules} out of ${totalRules}`,","        `rules based on ${fileQty}`,","        `file${(fileQty === 1) ? \".\" : \"s.\"}`","    ].join(\" \");","","    log.info(resultMessage);","","    ConfigOps.normalizeToStrings(newConfig);","    return newConfig;","}","","/**"," * process user's answers and create config object"," * @param {Object} answers answers received from inquirer"," * @returns {Object} config object"," */","function processAnswers(answers) {","    let config = { rules: {}, env: {} };","","    if (answers.es6) {","        config.env.es6 = true;","        if (answers.modules) {","            config.parserOptions = config.parserOptions || {};","            config.parserOptions.sourceType = \"module\";","        }","    }","    if (answers.commonjs) {","        config.env.commonjs = true;","    }","    answers.env.forEach(env => {","        config.env[env] = true;","    });","    if (answers.jsx) {","        config.parserOptions = config.parserOptions || {};","        config.parserOptions.ecmaFeatures = config.parserOptions.ecmaFeatures || {};","        config.parserOptions.ecmaFeatures.jsx = true;","        if (answers.react) {","            config.plugins = [\"react\"];","            config.parserOptions.ecmaFeatures.experimentalObjectRestSpread = true;","        }","    }","","    if (answers.source === \"prompt\") {","        config.extends = \"eslint:recommended\";","        config.rules.indent = [\"error\", answers.indent];","        config.rules.quotes = [\"error\", answers.quotes];","        config.rules[\"linebreak-style\"] = [\"error\", answers.linebreak];","        config.rules.semi = [\"error\", answers.semi ? \"always\" : \"never\"];","    }","","    installModules(config);","","    if (answers.source === \"auto\") {","        config = configureRules(answers, config);","        config = autoconfig.extendFromRecommended(config);","    }","","    ConfigOps.normalizeToStrings(config);","    return config;","}","","/**"," * process user's style guide of choice and return an appropriate config object."," * @param {string} guide name of the chosen style guide"," * @returns {Object} config object"," */","function getConfigForStyleGuide(guide) {","    const guides = {","        google: { extends: \"google\" },","        airbnb: { extends: \"airbnb\", plugins: [\"react\", \"jsx-a11y\", \"import\"] },","        \"airbnb-base\": { extends: \"airbnb-base\", plugins: [\"import\"] },","        standard: { extends: \"standard\", plugins: [\"standard\", \"promise\"] }","    };","","    if (!guides[guide]) {","        throw new Error(\"You referenced an unsupported guide.\");","    }","","    installModules(guides[guide]);","","    return guides[guide];","}","","/* istanbul ignore next: no need to test inquirer*/","/**"," * Ask use a few questions on command prompt"," * @param {Function} callback callback function when file has been written"," * @returns {void}"," */","function promptUser(callback) {","    let config;","","    inquirer.prompt([","        {","            type: \"list\",","            name: \"source\",","            message: \"How would you like to configure ESLint?\",","            default: \"prompt\",","            choices: [","                { name: \"Answer questions about your style\", value: \"prompt\" },","                { name: \"Use a popular style guide\", value: \"guide\" },","                { name: \"Inspect your JavaScript file(s)\", value: \"auto\" }","            ]","        },","        {","            type: \"list\",","            name: \"styleguide\",","            message: \"Which style guide do you want to follow?\",","            choices: [{ name: \"Google\", value: \"google\" }, { name: \"Airbnb\", value: \"airbnb\" }, { name: \"Standard\", value: \"standard\" }],","            when(answers) {","                answers.packageJsonExists = npmUtil.checkPackageJson();","                return answers.source === \"guide\" && answers.packageJsonExists;","            }","        },","        {","            type: \"confirm\",","            name: \"airbnbReact\",","            message: \"Do you use React?\",","            default: false,","            when(answers) {","                return answers.styleguide === \"airbnb\";","            }","        },","        {","            type: \"input\",","            name: \"patterns\",","            message: \"Which file(s), path(s), or glob(s) should be examined?\",","            when(answers) {","                return (answers.source === \"auto\");","            },","            validate(input) {","                if (input.trim().length === 0 && input.trim() !== \",\") {","                    return \"You must tell us what code to examine. Try again.\";","                }","                return true;","            }","        },","        {","            type: \"list\",","            name: \"format\",","            message: \"What format do you want your config file to be in?\",","            default: \"JavaScript\",","            choices: [\"JavaScript\", \"YAML\", \"JSON\"],","            when(answers) {","                return ((answers.source === \"guide\" && answers.packageJsonExists) || answers.source === \"auto\");","            }","        }","    ], earlyAnswers => {","","        // early exit if you are using a style guide","        if (earlyAnswers.source === \"guide\") {","            if (!earlyAnswers.packageJsonExists) {","                log.info(\"A package.json is necessary to install plugins such as style guides. Run `npm init` to create a package.json file and try again.\");","                return;","            }","            if (earlyAnswers.styleguide === \"airbnb\" && !earlyAnswers.airbnbReact) {","                earlyAnswers.styleguide = \"airbnb-base\";","            }","            try {","                config = getConfigForStyleGuide(earlyAnswers.styleguide);","                writeFile(config, earlyAnswers.format);","            } catch (err) {","                callback(err);","                return;","            }","            return;","        }","","        // continue with the questions otherwise...","        inquirer.prompt([","            {","                type: \"confirm\",","                name: \"es6\",","                message: \"Are you using ECMAScript 6 features?\",","                default: false","            },","            {","                type: \"confirm\",","                name: \"modules\",","                message: \"Are you using ES6 modules?\",","                default: false,","                when(answers) {","                    return answers.es6 === true;","                }","            },","            {","                type: \"checkbox\",","                name: \"env\",","                message: \"Where will your code run?\",","                default: [\"browser\"],","                choices: [{ name: \"Browser\", value: \"browser\" }, { name: \"Node\", value: \"node\" }]","            },","            {","                type: \"confirm\",","                name: \"commonjs\",","                message: \"Do you use CommonJS?\",","                default: false,","                when(answers) {","                    return answers.env.some(env => env === \"browser\");","                }","            },","            {","                type: \"confirm\",","                name: \"jsx\",","                message: \"Do you use JSX?\",","                default: false","            },","            {","                type: \"confirm\",","                name: \"react\",","                message: \"Do you use React?\",","                default: false,","                when(answers) {","                    return answers.jsx;","                }","            }","        ], secondAnswers => {","","            // early exit if you are using automatic style generation","            if (earlyAnswers.source === \"auto\") {","                try {","                    const combinedAnswers = Object.assign({}, earlyAnswers, secondAnswers);","","                    config = processAnswers(combinedAnswers);","                    installModules(config);","                    writeFile(config, earlyAnswers.format);","                } catch (err) {","                    callback(err);","                    return;","                }","                return;","            }","","            // continue with the style questions otherwise...","            inquirer.prompt([","                {","                    type: \"list\",","                    name: \"indent\",","                    message: \"What style of indentation do you use?\",","                    default: \"tab\",","                    choices: [{ name: \"Tabs\", value: \"tab\" }, { name: \"Spaces\", value: 4 }]","                },","                {","                    type: \"list\",","                    name: \"quotes\",","                    message: \"What quotes do you use for strings?\",","                    default: \"double\",","                    choices: [{ name: \"Double\", value: \"double\" }, { name: \"Single\", value: \"single\" }]","                },","                {","                    type: \"list\",","                    name: \"linebreak\",","                    message: \"What line endings do you use?\",","                    default: \"unix\",","                    choices: [{ name: \"Unix\", value: \"unix\" }, { name: \"Windows\", value: \"windows\" }]","                },","                {","                    type: \"confirm\",","                    name: \"semi\",","                    message: \"Do you require semicolons?\",","                    default: true","                },","                {","                    type: \"list\",","                    name: \"format\",","                    message: \"What format do you want your config file to be in?\",","                    default: \"JavaScript\",","                    choices: [\"JavaScript\", \"YAML\", \"JSON\"]","                }","            ], answers => {","                try {","                    const totalAnswers = Object.assign({}, earlyAnswers, secondAnswers, answers);","","                    config = processAnswers(totalAnswers);","                    installModules(config);","                    writeFile(config, answers.format);","                } catch (err) {","                    callback(err); // eslint-disable-line callback-return","                }","            });","        });","    });","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","const init = {","    getConfigForStyleGuide,","    processAnswers,","    /* istanbul ignore next */initializeConfig(callback) {","        promptUser(callback);","    }","};","","module.exports = init;",""],"l":{"12":1,"23":1,"36":1,"39":1,"41":1,"42":1,"43":1,"44":1,"47":1,"49":1,"51":1,"52":1,"54":1,"55":1,"64":1,"65":0,"68":0,"69":0,"71":0,"72":0,"76":0,"77":0,"81":0,"83":0,"86":0,"87":0,"89":0,"90":0,"91":0,"94":0,"97":0,"98":0,"99":0,"113":1,"114":0,"118":0,"122":0,"127":0,"130":0,"132":0,"133":0,"134":0,"137":0,"138":0,"140":0,"142":0,"143":0,"144":0,"148":0,"149":0,"152":0,"153":0,"155":0,"158":0,"161":0,"163":0,"166":0,"170":0,"174":0,"180":0,"183":0,"186":0,"189":0,"192":0,"195":0,"196":0,"197":0,"198":0,"204":0,"206":0,"207":0,"215":1,"216":0,"218":0,"219":0,"220":0,"221":0,"222":0,"225":0,"226":0,"228":0,"229":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"249":0,"251":0,"252":0,"253":0,"256":0,"257":0,"265":1,"266":0,"273":0,"274":0,"277":0,"279":0,"288":1,"289":1,"291":1,"309":1,"310":1,"319":1,"327":1,"330":1,"331":1,"333":1,"343":1,"349":1,"350":1,"351":1,"352":1,"354":1,"355":1,"357":1,"358":1,"359":1,"361":1,"362":1,"364":1,"368":1,"381":1,"397":1,"412":1,"418":1,"419":1,"420":1,"422":1,"423":1,"424":1,"426":1,"427":1,"429":1,"433":1,"469":1,"470":1,"472":1,"473":1,"474":1,"476":1,"487":1,"491":1,"495":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/source-code-util.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/source-code-util.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"getSourceCodeOfFile","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":48}}},"2":{"name":"getSourceCodeOfFiles","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":53}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":15,"column":59}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":58}},"3":{"start":{"line":30,"column":0},"end":{"line":44,"column":1}},"4":{"start":{"line":31,"column":4},"end":{"line":31,"column":45}},"5":{"start":{"line":32,"column":4},"end":{"line":32,"column":59}},"6":{"start":{"line":33,"column":4},"end":{"line":33,"column":36}},"7":{"start":{"line":34,"column":4},"end":{"line":34,"column":51}},"8":{"start":{"line":36,"column":4},"end":{"line":40,"column":5}},"9":{"start":{"line":37,"column":8},"end":{"line":37,"column":51}},"10":{"start":{"line":39,"column":8},"end":{"line":39,"column":82}},"11":{"start":{"line":41,"column":4},"end":{"line":41,"column":46}},"12":{"start":{"line":43,"column":4},"end":{"line":43,"column":22}},"13":{"start":{"line":66,"column":0},"end":{"line":106,"column":1}},"14":{"start":{"line":67,"column":4},"end":{"line":67,"column":27}},"15":{"start":{"line":68,"column":4},"end":{"line":68,"column":13}},"16":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"17":{"start":{"line":71,"column":8},"end":{"line":71,"column":30}},"18":{"start":{"line":74,"column":4},"end":{"line":74,"column":89}},"19":{"start":{"line":76,"column":4},"end":{"line":83,"column":5}},"20":{"start":{"line":77,"column":8},"end":{"line":77,"column":30}},"21":{"start":{"line":78,"column":11},"end":{"line":83,"column":5}},"22":{"start":{"line":79,"column":8},"end":{"line":79,"column":21}},"23":{"start":{"line":80,"column":8},"end":{"line":80,"column":30}},"24":{"start":{"line":81,"column":11},"end":{"line":83,"column":5}},"25":{"start":{"line":82,"column":8},"end":{"line":82,"column":58}},"26":{"start":{"line":84,"column":4},"end":{"line":84,"column":40}},"27":{"start":{"line":85,"column":4},"end":{"line":85,"column":64}},"28":{"start":{"line":87,"column":4},"end":{"line":89,"column":74}},"29":{"start":{"line":88,"column":28},"end":{"line":88,"column":45}},"30":{"start":{"line":89,"column":37},"end":{"line":89,"column":68}},"31":{"start":{"line":91,"column":4},"end":{"line":93,"column":5}},"32":{"start":{"line":92,"column":8},"end":{"line":92,"column":73}},"33":{"start":{"line":94,"column":4},"end":{"line":104,"column":7}},"34":{"start":{"line":95,"column":8},"end":{"line":95,"column":63}},"35":{"start":{"line":97,"column":8},"end":{"line":100,"column":9}},"36":{"start":{"line":98,"column":12},"end":{"line":98,"column":49}},"37":{"start":{"line":99,"column":12},"end":{"line":99,"column":47}},"38":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"39":{"start":{"line":102,"column":12},"end":{"line":102,"column":33}},"40":{"start":{"line":105,"column":4},"end":{"line":105,"column":23}},"41":{"start":{"line":108,"column":0},"end":{"line":110,"column":2}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":4}},{"start":{"line":36,"column":4},"end":{"line":36,"column":4}}]},"2":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":15}},{"start":{"line":36,"column":19},"end":{"line":36,"column":37}},{"start":{"line":36,"column":41},"end":{"line":36,"column":71}},{"start":{"line":36,"column":75},"end":{"line":36,"column":111}}]},"3":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]},"4":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":4},"end":{"line":76,"column":4}},{"start":{"line":76,"column":4},"end":{"line":76,"column":4}}]},"5":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":11},"end":{"line":78,"column":11}},{"start":{"line":78,"column":11},"end":{"line":78,"column":11}}]},"6":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":11},"end":{"line":81,"column":11}},{"start":{"line":81,"column":11},"end":{"line":81,"column":11}}]},"7":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"8":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":97,"column":8}},{"start":{"line":97,"column":8},"end":{"line":97,"column":8}}]},"9":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":101,"column":8}},{"start":{"line":101,"column":8},"end":{"line":101,"column":8}}]}},"code":["/**"," * @fileoverview Tools for obtaining SourceCode objects."," * @author Ian VanSchooten"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const CLIEngine = require(\"../cli-engine\"),","    eslint = require(\"../eslint\"),","    globUtil = require(\"./glob-util\"),","    baseDefaultOptions = require(\"../../conf/cli-options\");","","const debug = require(\"debug\")(\"eslint:source-code-util\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Get the SourceCode object for a single file"," * @param   {string}     filename The fully resolved filename to get SourceCode from."," * @param   {Object}     options  A CLIEngine options object."," * @returns {Array}               Array of the SourceCode object representing the file"," *                                and fatal error message."," */","function getSourceCodeOfFile(filename, options) {","    debug(\"getting sourceCode of\", filename);","    const opts = Object.assign({}, options, { rules: {} });","    const cli = new CLIEngine(opts);","    const results = cli.executeOnFiles([filename]);","","    if (results && results.results[0] && results.results[0].messages[0] && results.results[0].messages[0].fatal) {","        const msg = results.results[0].messages[0];","","        throw new Error(`(${filename}:${msg.line}:${msg.column}) ${msg.message}`);","    }","    const sourceCode = eslint.getSourceCode();","","    return sourceCode;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","","/**"," * This callback is used to measure execution status in a progress bar"," * @callback progressCallback"," * @param {number} The total number of times the callback will be called."," */","","/**"," * Gets the SourceCode of a single file, or set of files."," * @param   {string[]|string}  patterns   A filename, directory name, or glob,"," *                                        or an array of them"," * @param   {Object}           [options]  A CLIEngine options object. If not provided,"," *                                        the default cli options will be used."," * @param   {progressCallback} [cb]       Callback for reporting execution status"," * @returns {Object}                      The SourceCode of all processed files."," */","function getSourceCodeOfFiles(patterns, options, cb) {","    const sourceCodes = {};","    let opts;","","    if (typeof patterns === \"string\") {","        patterns = [patterns];","    }","","    const defaultOptions = Object.assign({}, baseDefaultOptions, { cwd: process.cwd() });","","    if (typeof options === \"undefined\") {","        opts = defaultOptions;","    } else if (typeof options === \"function\") {","        cb = options;","        opts = defaultOptions;","    } else if (typeof options === \"object\") {","        opts = Object.assign({}, defaultOptions, options);","    }","    debug(\"constructed options:\", opts);","    patterns = globUtil.resolveFileGlobPatterns(patterns, opts);","","    const filenames = globUtil.listFilesToProcess(patterns, opts)","        .filter(fileInfo => !fileInfo.ignored)","        .reduce((files, fileInfo) => files.concat(fileInfo.filename), []);","","    if (filenames.length === 0) {","        debug(`Did not find any files matching pattern(s): ${patterns}`);","    }","    filenames.forEach(filename => {","        const sourceCode = getSourceCodeOfFile(filename, opts);","","        if (sourceCode) {","            debug(\"got sourceCode of\", filename);","            sourceCodes[filename] = sourceCode;","        }","        if (cb) {","            cb(filenames.length); // eslint-disable-line callback-return","        }","    });","    return sourceCodes;","}","","module.exports = {","    getSourceCodeOfFiles","};",""],"l":{"12":1,"17":1,"30":1,"31":0,"32":0,"33":0,"34":0,"36":0,"37":0,"39":0,"41":0,"43":0,"66":1,"67":0,"68":0,"70":0,"71":0,"74":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"84":0,"85":0,"87":0,"88":0,"89":0,"91":0,"92":0,"94":0,"95":0,"97":0,"98":0,"99":0,"101":0,"102":0,"105":0,"108":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/npm-util.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/npm-util.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":1,"35":0,"36":1,"37":0,"38":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"findPackageJson","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":35}}},"2":{"name":"installSyncSaveDev","line":52,"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":38}}},"3":{"name":"check","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":30}}},"4":{"name":"checkDeps","line":109,"loc":{"start":{"line":109,"column":0},"end":{"line":109,"column":38}}},"5":{"name":"checkDevDeps","line":123,"loc":{"start":{"line":123,"column":0},"end":{"line":123,"column":32}}},"6":{"name":"checkPackageJson","line":133,"loc":{"start":{"line":133,"column":0},"end":{"line":133,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":15,"column":32}},"2":{"start":{"line":28,"column":0},"end":{"line":41,"column":1}},"3":{"start":{"line":29,"column":4},"end":{"line":29,"column":54}},"4":{"start":{"line":31,"column":4},"end":{"line":39,"column":46}},"5":{"start":{"line":32,"column":8},"end":{"line":32,"column":55}},"6":{"start":{"line":34,"column":8},"end":{"line":37,"column":9}},"7":{"start":{"line":35,"column":12},"end":{"line":35,"column":39}},"8":{"start":{"line":36,"column":12},"end":{"line":36,"column":21}},"9":{"start":{"line":38,"column":8},"end":{"line":38,"column":23}},"10":{"start":{"line":40,"column":4},"end":{"line":40,"column":16}},"11":{"start":{"line":52,"column":0},"end":{"line":57,"column":1}},"12":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"13":{"start":{"line":54,"column":8},"end":{"line":54,"column":38}},"14":{"start":{"line":56,"column":4},"end":{"line":56,"column":69}},"15":{"start":{"line":70,"column":0},"end":{"line":96,"column":1}},"16":{"start":{"line":71,"column":4},"end":{"line":71,"column":18}},"17":{"start":{"line":72,"column":4},"end":{"line":72,"column":78}},"18":{"start":{"line":73,"column":4},"end":{"line":73,"column":17}},"19":{"start":{"line":75,"column":4},"end":{"line":77,"column":5}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":93}},"21":{"start":{"line":79,"column":4},"end":{"line":84,"column":5}},"22":{"start":{"line":80,"column":8},"end":{"line":80,"column":64}},"23":{"start":{"line":82,"column":8},"end":{"line":82,"column":102}},"24":{"start":{"line":83,"column":8},"end":{"line":83,"column":27}},"25":{"start":{"line":86,"column":4},"end":{"line":88,"column":5}},"26":{"start":{"line":87,"column":8},"end":{"line":87,"column":66}},"27":{"start":{"line":89,"column":4},"end":{"line":91,"column":5}},"28":{"start":{"line":90,"column":8},"end":{"line":90,"column":63}},"29":{"start":{"line":92,"column":4},"end":{"line":95,"column":11}},"30":{"start":{"line":93,"column":8},"end":{"line":93,"column":47}},"31":{"start":{"line":94,"column":8},"end":{"line":94,"column":22}},"32":{"start":{"line":109,"column":0},"end":{"line":111,"column":1}},"33":{"start":{"line":110,"column":4},"end":{"line":110,"column":70}},"34":{"start":{"line":123,"column":0},"end":{"line":125,"column":1}},"35":{"start":{"line":124,"column":4},"end":{"line":124,"column":54}},"36":{"start":{"line":133,"column":0},"end":{"line":135,"column":1}},"37":{"start":{"line":134,"column":4},"end":{"line":134,"column":39}},"38":{"start":{"line":141,"column":0},"end":{"line":146,"column":2}}},"branchMap":{"1":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":27},"end":{"line":29,"column":35}},{"start":{"line":29,"column":39},"end":{"line":29,"column":52}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":8}},{"start":{"line":34,"column":8},"end":{"line":34,"column":8}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"4":{"line":72,"type":"cond-expr","locations":[{"start":{"line":72,"column":28},"end":{"line":72,"column":57}},{"start":{"line":72,"column":60},"end":{"line":72,"column":77}}]},"5":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"6":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]},"7":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":27}},{"start":{"line":86,"column":31},"end":{"line":86,"column":75}}]},"8":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"9":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":24}},{"start":{"line":89,"column":28},"end":{"line":89,"column":69}}]}},"code":["/**"," * @fileoverview Utility for executing npm commands."," * @author Ian VanSchooten"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    shell = require(\"shelljs\"),","    log = require(\"../logging\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Find the closest package.json file, starting at process.cwd (by default),"," * and working up to root."," *"," * @param   {string} [startDir=process.cwd()] Starting directory"," * @returns {string}                          Absolute path to closest package.json file"," */","function findPackageJson(startDir) {","    let dir = path.resolve(startDir || process.cwd());","","    do {","        const pkgfile = path.join(dir, \"package.json\");","","        if (!shell.test(\"-f\", pkgfile)) {","            dir = path.join(dir, \"..\");","            continue;","        }","        return pkgfile;","    } while (dir !== path.resolve(dir, \"..\"));","    return null;","}","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * Install node modules synchronously and save to devDependencies in package.json"," * @param   {string|string[]} packages Node module or modules to install"," * @returns {void}"," */","function installSyncSaveDev(packages) {","    if (Array.isArray(packages)) {","        packages = packages.join(\" \");","    }","    shell.exec(`npm i --save-dev ${packages}`, { stdio: \"inherit\" });","}","","/**"," * Check whether node modules are include in a project's package.json."," *"," * @param   {string[]} packages           Array of node module names"," * @param   {Object}  opt                 Options Object"," * @param   {boolean} opt.dependencies    Set to true to check for direct dependencies"," * @param   {boolean} opt.devDependencies Set to true to check for development dependencies"," * @param   {boolean} opt.startdir        Directory to begin searching from"," * @returns {Object}                      An object whose keys are the module names"," *                                        and values are booleans indicating installation."," */","function check(packages, opt) {","    let deps = [];","    const pkgJson = (opt) ? findPackageJson(opt.startDir) : findPackageJson();","    let fileJson;","","    if (!pkgJson) {","        throw new Error(\"Could not find a package.json file. Run 'npm init' to create one.\");","    }","","    try {","        fileJson = JSON.parse(fs.readFileSync(pkgJson, \"utf8\"));","    } catch (e) {","        log.info(\"Could not read package.json file. Please check that the file contains valid JSON.\");","        throw new Error(e);","    }","","    if (opt.devDependencies && typeof fileJson.devDependencies === \"object\") {","        deps = deps.concat(Object.keys(fileJson.devDependencies));","    }","    if (opt.dependencies && typeof fileJson.dependencies === \"object\") {","        deps = deps.concat(Object.keys(fileJson.dependencies));","    }","    return packages.reduce((status, pkg) => {","        status[pkg] = deps.indexOf(pkg) !== -1;","        return status;","    }, {});","}","","/**"," * Check whether node modules are included in the dependencies of a project's"," * package.json."," *"," * Convienience wrapper around check()."," *"," * @param   {string[]} packages  Array of node modules to check."," * @param   {string}   rootDir   The directory contianing a package.json"," * @returns {Object}             An object whose keys are the module names"," *                               and values are booleans indicating installation."," */","function checkDeps(packages, rootDir) {","    return check(packages, { dependencies: true, startDir: rootDir });","}","","/**"," * Check whether node modules are included in the devDependencies of a project's"," * package.json."," *"," * Convienience wrapper around check()."," *"," * @param   {string[]} packages  Array of node modules to check."," * @returns {Object}             An object whose keys are the module names"," *                               and values are booleans indicating installation."," */","function checkDevDeps(packages) {","    return check(packages, { devDependencies: true });","}","","/**"," * Check whether package.json is found in current path."," *"," * @param   {string=} startDir Starting directory"," * @returns {boolean} Whether a package.json is found in current path."," */","function checkPackageJson(startDir) {","    return !!findPackageJson(startDir);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    installSyncSaveDev,","    checkDeps,","    checkDevDeps,","    checkPackageJson","};",""],"l":{"12":1,"28":1,"29":0,"31":0,"32":0,"34":0,"35":0,"36":0,"38":0,"40":0,"52":1,"53":0,"54":0,"56":0,"70":1,"71":0,"72":0,"73":0,"75":0,"76":0,"79":0,"80":0,"82":0,"83":0,"86":0,"87":0,"89":0,"90":0,"92":0,"93":0,"94":0,"109":1,"110":0,"123":1,"124":0,"133":1,"134":0,"141":1}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/checkstyle.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/checkstyle.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"getMessageType","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":17},"end":{"line":31,"column":35}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"2":{"start":{"line":19,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":23}},"5":{"start":{"line":23,"column":4},"end":{"line":23,"column":21}},"6":{"start":{"line":31,"column":0},"end":{"line":60,"column":2}},"7":{"start":{"line":33,"column":4},"end":{"line":33,"column":20}},"8":{"start":{"line":35,"column":4},"end":{"line":35,"column":59}},"9":{"start":{"line":36,"column":4},"end":{"line":36,"column":45}},"10":{"start":{"line":38,"column":4},"end":{"line":55,"column":7}},"11":{"start":{"line":39,"column":8},"end":{"line":39,"column":41}},"12":{"start":{"line":41,"column":8},"end":{"line":41,"column":64}},"13":{"start":{"line":43,"column":8},"end":{"line":51,"column":11}},"14":{"start":{"line":44,"column":12},"end":{"line":50,"column":24}},"15":{"start":{"line":53,"column":8},"end":{"line":53,"column":28}},"16":{"start":{"line":57,"column":4},"end":{"line":57,"column":30}},"17":{"start":{"line":59,"column":4},"end":{"line":59,"column":18}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"2":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":8},"end":{"line":20,"column":21}},{"start":{"line":20,"column":25},"end":{"line":20,"column":47}}]},"3":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":74},"end":{"line":48,"column":96}},{"start":{"line":48,"column":99},"end":{"line":48,"column":101}}]},"4":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":44},"end":{"line":49,"column":87}},{"start":{"line":49,"column":90},"end":{"line":49,"column":92}}]}},"code":["/**"," * @fileoverview CheckStyle XML reporter"," * @author Ian Christian Myers"," */","\"use strict\";","","const xmlEscape = require(\"../util/xml-escape\");","","//------------------------------------------------------------------------------","// Helper Functions","//------------------------------------------------------------------------------","","/**"," * Returns the severity of warning or error"," * @param {Object} message message object to examine"," * @returns {string} severity level"," * @private"," */","function getMessageType(message) {","    if (message.fatal || message.severity === 2) {","        return \"error\";","    }","    return \"warning\";","","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","","    let output = \"\";","","    output += \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\";","    output += \"<checkstyle version=\\\"4.3\\\">\";","","    results.forEach(result => {","        const messages = result.messages;","","        output += `<file name=\"${xmlEscape(result.filePath)}\">`;","","        messages.forEach(message => {","            output += [","                `<error line=\"${xmlEscape(message.line)}\"`,","                `column=\"${xmlEscape(message.column)}\"`,","                `severity=\"${xmlEscape(getMessageType(message))}\"`,","                `message=\"${xmlEscape(message.message)}${message.ruleId ? ` (${message.ruleId})` : \"\"}\"`,","                `source=\"${message.ruleId ? xmlEscape(`eslint.rules.${message.ruleId}`) : \"\"}\" />`","            ].join(\" \");","        });","","        output += \"</file>\";","","    });","","    output += \"</checkstyle>\";","","    return output;","};",""],"l":{"7":1,"19":1,"20":0,"21":0,"23":0,"31":1,"33":0,"35":0,"36":0,"38":0,"39":0,"41":0,"43":0,"44":0,"53":0,"57":0,"59":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/xml-escape.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/util/xml-escape.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0,0,0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":17},"end":{"line":17,"column":29}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":34,"column":2}},"2":{"start":{"line":18,"column":4},"end":{"line":33,"column":7}},"3":{"start":{"line":19,"column":8},"end":{"line":32,"column":9}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":30}},"5":{"start":{"line":23,"column":16},"end":{"line":23,"column":30}},"6":{"start":{"line":25,"column":16},"end":{"line":25,"column":31}},"7":{"start":{"line":27,"column":16},"end":{"line":27,"column":32}},"8":{"start":{"line":29,"column":16},"end":{"line":29,"column":32}},"9":{"start":{"line":31,"column":16},"end":{"line":31,"column":47}}},"branchMap":{"1":{"line":19,"type":"switch","locations":[{"start":{"line":20,"column":12},"end":{"line":21,"column":30}},{"start":{"line":22,"column":12},"end":{"line":23,"column":30}},{"start":{"line":24,"column":12},"end":{"line":25,"column":31}},{"start":{"line":26,"column":12},"end":{"line":27,"column":32}},{"start":{"line":28,"column":12},"end":{"line":29,"column":32}},{"start":{"line":30,"column":12},"end":{"line":31,"column":47}}]}},"code":["/**"," * @fileoverview XML character escaper"," * @author George Chung"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Returns the escaped value for a character"," * @param {string} s string to examine"," * @returns {string} severity level"," * @private"," */","module.exports = function(s) {","    return (`${s}`).replace(/[<>&\"'\\x00-\\x1F\\x7F\\u0080-\\uFFFF]/g, c => { // eslint-disable-line no-control-regex","        switch (c) {","            case \"<\":","                return \"&lt;\";","            case \">\":","                return \"&gt;\";","            case \"&\":","                return \"&amp;\";","            case \"\\\"\":","                return \"&quot;\";","            case \"'\":","                return \"&apos;\";","            default:","                return `&#${c.charCodeAt(0)};`;","        }","    });","};",""],"l":{"17":1,"18":0,"19":0,"21":0,"23":0,"25":0,"27":0,"29":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/codeframe.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/codeframe.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"pluralize","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":32}}},"2":{"name":"formatFilePath","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":48}}},"3":{"name":"formatMessage","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":46}}},"4":{"name":"formatSummary","line":79,"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":41}}},"5":{"name":"(anonymous_5)","line":98,"loc":{"start":{"line":98,"column":17},"end":{"line":98,"column":35}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":31}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":46}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":29}},"4":{"start":{"line":21,"column":0},"end":{"line":23,"column":1}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":45}},"6":{"start":{"line":32,"column":0},"end":{"line":40,"column":1}},"7":{"start":{"line":33,"column":4},"end":{"line":33,"column":57}},"8":{"start":{"line":35,"column":4},"end":{"line":37,"column":5}},"9":{"start":{"line":36,"column":8},"end":{"line":36,"column":40}},"10":{"start":{"line":39,"column":4},"end":{"line":39,"column":32}},"11":{"start":{"line":48,"column":0},"end":{"line":71,"column":1}},"12":{"start":{"line":49,"column":4},"end":{"line":49,"column":106}},"13":{"start":{"line":50,"column":4},"end":{"line":50,"column":68}},"14":{"start":{"line":51,"column":4},"end":{"line":51,"column":73}},"15":{"start":{"line":52,"column":4},"end":{"line":52,"column":89}},"16":{"start":{"line":53,"column":4},"end":{"line":53,"column":87}},"17":{"start":{"line":55,"column":4},"end":{"line":60,"column":31}},"18":{"start":{"line":62,"column":4},"end":{"line":62,"column":31}},"19":{"start":{"line":64,"column":4},"end":{"line":68,"column":5}},"20":{"start":{"line":65,"column":8},"end":{"line":67,"column":10}},"21":{"start":{"line":70,"column":4},"end":{"line":70,"column":29}},"22":{"start":{"line":79,"column":0},"end":{"line":92,"column":1}},"23":{"start":{"line":80,"column":4},"end":{"line":80,"column":55}},"24":{"start":{"line":81,"column":4},"end":{"line":81,"column":23}},"25":{"start":{"line":83,"column":4},"end":{"line":85,"column":5}},"26":{"start":{"line":84,"column":8},"end":{"line":84,"column":64}},"27":{"start":{"line":87,"column":4},"end":{"line":89,"column":5}},"28":{"start":{"line":88,"column":8},"end":{"line":88,"column":70}},"29":{"start":{"line":91,"column":4},"end":{"line":91,"column":71}},"30":{"start":{"line":98,"column":0},"end":{"line":116,"column":2}},"31":{"start":{"line":99,"column":4},"end":{"line":99,"column":19}},"32":{"start":{"line":100,"column":4},"end":{"line":100,"column":21}},"33":{"start":{"line":101,"column":4},"end":{"line":101,"column":85}},"34":{"start":{"line":101,"column":57},"end":{"line":101,"column":83}},"35":{"start":{"line":103,"column":4},"end":{"line":110,"column":22}},"36":{"start":{"line":104,"column":8},"end":{"line":104,"column":97}},"37":{"start":{"line":104,"column":56},"end":{"line":104,"column":95}},"38":{"start":{"line":106,"column":8},"end":{"line":106,"column":36}},"39":{"start":{"line":107,"column":8},"end":{"line":107,"column":40}},"40":{"start":{"line":109,"column":8},"end":{"line":109,"column":46}},"41":{"start":{"line":112,"column":4},"end":{"line":112,"column":19}},"42":{"start":{"line":113,"column":4},"end":{"line":113,"column":46}},"43":{"start":{"line":115,"column":4},"end":{"line":115,"column":49}}},"branchMap":{"1":{"line":22,"type":"cond-expr","locations":[{"start":{"line":22,"column":26},"end":{"line":22,"column":30}},{"start":{"line":22,"column":33},"end":{"line":22,"column":43}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"3":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":12}},{"start":{"line":35,"column":16},"end":{"line":35,"column":22}}]},"4":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":61},"end":{"line":49,"column":79}},{"start":{"line":49,"column":82},"end":{"line":49,"column":105}}]},"5":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":18},"end":{"line":49,"column":31}},{"start":{"line":49,"column":35},"end":{"line":49,"column":57}}]},"6":{"line":51,"type":"cond-expr","locations":[{"start":{"line":51,"column":35},"end":{"line":51,"column":37}},{"start":{"line":51,"column":40},"end":{"line":51,"column":72}}]},"7":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":45},"end":{"line":53,"column":64}},{"start":{"line":53,"column":67},"end":{"line":53,"column":86}}]},"8":{"line":58,"type":"cond-expr","locations":[{"start":{"line":58,"column":17},"end":{"line":58,"column":28}},{"start":{"line":58,"column":31},"end":{"line":58,"column":33}}]},"9":{"line":59,"type":"cond-expr","locations":[{"start":{"line":59,"column":21},"end":{"line":59,"column":38}},{"start":{"line":59,"column":41},"end":{"line":59,"column":57}}]},"10":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"11":{"line":80,"type":"cond-expr","locations":[{"start":{"line":80,"column":38},"end":{"line":80,"column":43}},{"start":{"line":80,"column":46},"end":{"line":80,"column":54}}]},"12":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]},"13":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":87,"column":4}},{"start":{"line":87,"column":4},"end":{"line":87,"column":4}}]},"14":{"line":115,"type":"cond-expr","locations":[{"start":{"line":115,"column":37},"end":{"line":115,"column":43}},{"start":{"line":115,"column":46},"end":{"line":115,"column":48}}]}},"code":["/**"," * @fileoverview Codeframe reporter"," * @author Vitor Balocco"," */","\"use strict\";","","const chalk = require(\"chalk\");","const codeFrame = require(\"babel-code-frame\");","const path = require(\"path\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Given a word and a count, append an s if count is not one."," * @param   {string} word  A word in its singular form."," * @param   {number} count A number controlling whether word should be pluralized."," * @returns {string}       The original word with an s on the end if count is not one."," */","function pluralize(word, count) {","    return (count === 1 ? word : `${word}s`);","}","","/**"," * Gets a formatted relative file path from an absolute path and a line/column in the file."," * @param   {string} filePath The absolute file path to format."," * @param   {number} line     The line from the file to use for formatting."," * @param   {number} column   The column from the file to use for formatting."," * @returns {string}          The formatted file path."," */","function formatFilePath(filePath, line, column) {","    let relPath = path.relative(process.cwd(), filePath);","","    if (line && column) {","        relPath += `:${line}:${column}`;","    }","","    return chalk.green(relPath);","}","","/**"," * Gets the formatted output for a given message."," * @param   {Object} message      The object that represents this message."," * @param   {Object} parentResult The result object that this message belongs to."," * @returns {string}              The formatted output."," */","function formatMessage(message, parentResult) {","    const type = (message.fatal || message.severity === 2) ? chalk.red(\"error\") : chalk.yellow(\"warning\");","    const msg = `${chalk.bold(message.message.replace(/\\.$/, \"\"))}`;","    const ruleId = message.fatal ? \"\" : chalk.dim(`(${message.ruleId})`);","    const filePath = formatFilePath(parentResult.filePath, message.line, message.column);","    const sourceCode = parentResult.output ? parentResult.output : parentResult.source;","","    const firstLine = [","        `${type}:`,","        `${msg}`,","        ruleId ? `${ruleId}` : \"\",","        sourceCode ? `at ${filePath}:` : `at ${filePath}`","    ].filter(String).join(\" \");","","    const result = [firstLine];","","    if (sourceCode) {","        result.push(","            codeFrame(sourceCode, message.line, message.column, { highlightCode: false })","        );","    }","","    return result.join(\"\\n\");","}","","/**"," * Gets the formatted output summary for a given number of errors and warnings."," * @param   {number} errors   The number of errors."," * @param   {number} warnings The number of warnings."," * @returns {string}          The formatted output summary."," */","function formatSummary(errors, warnings) {","    const summaryColor = errors > 0 ? \"red\" : \"yellow\";","    const summary = [];","","    if (errors > 0) {","        summary.push(`${errors} ${pluralize(\"error\", errors)}`);","    }","","    if (warnings > 0) {","        summary.push(`${warnings} ${pluralize(\"warning\", warnings)}`);","    }","","    return chalk[summaryColor].bold(`${summary.join(\" and \")} found.`);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","    let errors = 0;","    let warnings = 0;","    const resultsWithMessages = results.filter(result => result.messages.length > 0);","","    let output = resultsWithMessages.reduce((resultsOutput, result) => {","        const messages = result.messages.map(message => `${formatMessage(message, result)}\\n\\n`);","","        errors += result.errorCount;","        warnings += result.warningCount;","","        return resultsOutput.concat(messages);","    }, []).join(\"\\n\");","","    output += \"\\n\";","    output += formatSummary(errors, warnings);","","    return (errors + warnings) > 0 ? output : \"\";","};",""],"l":{"7":1,"8":1,"9":1,"21":1,"22":0,"32":1,"33":0,"35":0,"36":0,"39":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"55":0,"62":0,"64":0,"65":0,"70":0,"79":1,"80":0,"81":0,"83":0,"84":0,"87":0,"88":0,"91":0,"98":1,"99":0,"100":0,"101":0,"103":0,"104":0,"106":0,"107":0,"109":0,"112":0,"113":0,"115":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/compact.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/compact.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"getMessageType","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":33}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":17},"end":{"line":30,"column":35}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":23,"column":1}},"2":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":23}},"4":{"start":{"line":21,"column":4},"end":{"line":21,"column":21}},"5":{"start":{"line":30,"column":0},"end":{"line":60,"column":2}},"6":{"start":{"line":32,"column":4},"end":{"line":33,"column":18}},"7":{"start":{"line":35,"column":4},"end":{"line":53,"column":7}},"8":{"start":{"line":37,"column":8},"end":{"line":37,"column":41}},"9":{"start":{"line":39,"column":8},"end":{"line":39,"column":33}},"10":{"start":{"line":41,"column":8},"end":{"line":51,"column":11}},"11":{"start":{"line":43,"column":12},"end":{"line":43,"column":45}},"12":{"start":{"line":44,"column":12},"end":{"line":44,"column":50}},"13":{"start":{"line":45,"column":12},"end":{"line":45,"column":53}},"14":{"start":{"line":46,"column":12},"end":{"line":46,"column":53}},"15":{"start":{"line":47,"column":12},"end":{"line":47,"column":46}},"16":{"start":{"line":48,"column":12},"end":{"line":48,"column":67}},"17":{"start":{"line":49,"column":12},"end":{"line":49,"column":27}},"18":{"start":{"line":55,"column":4},"end":{"line":57,"column":5}},"19":{"start":{"line":56,"column":8},"end":{"line":56,"column":64}},"20":{"start":{"line":59,"column":4},"end":{"line":59,"column":18}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":21}},{"start":{"line":18,"column":25},"end":{"line":18,"column":47}}]},"3":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":30},"end":{"line":44,"column":42}},{"start":{"line":44,"column":46},"end":{"line":44,"column":47}}]},"4":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":31},"end":{"line":45,"column":45}},{"start":{"line":45,"column":49},"end":{"line":45,"column":50}}]},"5":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":39},"end":{"line":48,"column":61}},{"start":{"line":48,"column":64},"end":{"line":48,"column":66}}]},"6":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"7":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":53},"end":{"line":56,"column":56}},{"start":{"line":56,"column":59},"end":{"line":56,"column":61}}]}},"code":["/**"," * @fileoverview Compact reporter"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Helper Functions","//------------------------------------------------------------------------------","","/**"," * Returns the severity of warning or error"," * @param {Object} message message object to examine"," * @returns {string} severity level"," * @private"," */","function getMessageType(message) {","    if (message.fatal || message.severity === 2) {","        return \"Error\";","    }","    return \"Warning\";","","}","","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","","    let output = \"\",","        total = 0;","","    results.forEach(result => {","","        const messages = result.messages;","","        total += messages.length;","","        messages.forEach(message => {","","            output += `${result.filePath}: `;","            output += `line ${message.line || 0}`;","            output += `, col ${message.column || 0}`;","            output += `, ${getMessageType(message)}`;","            output += ` - ${message.message}`;","            output += message.ruleId ? ` (${message.ruleId})` : \"\";","            output += \"\\n\";","","        });","","    });","","    if (total > 0) {","        output += `\\n${total} problem${total !== 1 ? \"s\" : \"\"}`;","    }","","    return output;","};",""],"l":{"17":1,"18":0,"19":0,"21":0,"30":1,"32":0,"35":0,"37":0,"39":0,"41":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"55":0,"56":0,"59":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/html.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/html.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"pluralize","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":32}}},"2":{"name":"renderSummary","line":35,"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":51}}},"3":{"name":"renderColor","line":51,"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":49}}},"4":{"name":"renderMessages","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":47}}},"5":{"name":"renderResults","line":93,"loc":{"start":{"line":93,"column":0},"end":{"line":93,"column":32}}},"6":{"name":"(anonymous_6)","line":107,"loc":{"start":{"line":107,"column":17},"end":{"line":107,"column":35}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":33}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":25}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":29}},"4":{"start":{"line":15,"column":0},"end":{"line":15,"column":112}},"5":{"start":{"line":16,"column":0},"end":{"line":16,"column":118}},"6":{"start":{"line":17,"column":0},"end":{"line":17,"column":116}},"7":{"start":{"line":25,"column":0},"end":{"line":27,"column":1}},"8":{"start":{"line":26,"column":4},"end":{"line":26,"column":45}},"9":{"start":{"line":35,"column":0},"end":{"line":43,"column":1}},"10":{"start":{"line":36,"column":4},"end":{"line":36,"column":54}},"11":{"start":{"line":37,"column":4},"end":{"line":37,"column":81}},"12":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"13":{"start":{"line":40,"column":8},"end":{"line":40,"column":136}},"14":{"start":{"line":42,"column":4},"end":{"line":42,"column":24}},"15":{"start":{"line":51,"column":0},"end":{"line":58,"column":1}},"16":{"start":{"line":52,"column":4},"end":{"line":56,"column":5}},"17":{"start":{"line":53,"column":8},"end":{"line":53,"column":17}},"18":{"start":{"line":54,"column":11},"end":{"line":56,"column":5}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":17}},"20":{"start":{"line":57,"column":4},"end":{"line":57,"column":13}},"21":{"start":{"line":66,"column":0},"end":{"line":87,"column":1}},"22":{"start":{"line":73,"column":4},"end":{"line":86,"column":18}},"23":{"start":{"line":74,"column":8},"end":{"line":74,"column":45}},"24":{"start":{"line":75,"column":8},"end":{"line":75,"column":49}},"25":{"start":{"line":77,"column":8},"end":{"line":85,"column":11}},"26":{"start":{"line":93,"column":0},"end":{"line":101,"column":1}},"27":{"start":{"line":94,"column":4},"end":{"line":100,"column":60}},"28":{"start":{"line":94,"column":50},"end":{"line":100,"column":47}},"29":{"start":{"line":107,"column":0},"end":{"line":126,"column":2}},"30":{"start":{"line":108,"column":4},"end":{"line":109,"column":22}},"31":{"start":{"line":111,"column":4},"end":{"line":111,"column":20}},"32":{"start":{"line":112,"column":4},"end":{"line":112,"column":22}},"33":{"start":{"line":115,"column":4},"end":{"line":118,"column":7}},"34":{"start":{"line":116,"column":8},"end":{"line":116,"column":41}},"35":{"start":{"line":117,"column":8},"end":{"line":117,"column":45}},"36":{"start":{"line":120,"column":4},"end":{"line":125,"column":7}}},"branchMap":{"1":{"line":26,"type":"cond-expr","locations":[{"start":{"line":26,"column":26},"end":{"line":26,"column":30}},{"start":{"line":26,"column":33},"end":{"line":26,"column":43}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"3":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]},"4":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":11},"end":{"line":54,"column":11}},{"start":{"line":54,"column":11},"end":{"line":54,"column":11}}]},"5":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":27},"end":{"line":74,"column":39}},{"start":{"line":74,"column":43},"end":{"line":74,"column":44}}]},"6":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":29},"end":{"line":75,"column":43}},{"start":{"line":75,"column":47},"end":{"line":75,"column":48}}]},"7":{"line":82,"type":"cond-expr","locations":[{"start":{"line":82,"column":51},"end":{"line":82,"column":60}},{"start":{"line":82,"column":63},"end":{"line":82,"column":70}}]}},"code":["/**"," * @fileoverview HTML reporter"," * @author Julian Laval"," */","\"use strict\";","","const lodash = require(\"lodash\");","const fs = require(\"fs\");","const path = require(\"path\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const pageTemplate = lodash.template(fs.readFileSync(path.join(__dirname, \"html-template-page.html\"), \"utf-8\"));","const messageTemplate = lodash.template(fs.readFileSync(path.join(__dirname, \"html-template-message.html\"), \"utf-8\"));","const resultTemplate = lodash.template(fs.readFileSync(path.join(__dirname, \"html-template-result.html\"), \"utf-8\"));","","/**"," * Given a word and a count, append an s if count is not one."," * @param {string} word A word in its singular form."," * @param {int} count A number controlling whether word should be pluralized."," * @returns {string} The original word with an s on the end if count is not one."," */","function pluralize(word, count) {","    return (count === 1 ? word : `${word}s`);","}","","/**"," * Renders text along the template of x problems (x errors, x warnings)"," * @param {string} totalErrors Total errors"," * @param {string} totalWarnings Total warnings"," * @returns {string} The formatted string, pluralized where necessary"," */","function renderSummary(totalErrors, totalWarnings) {","    const totalProblems = totalErrors + totalWarnings;","    let renderedText = `${totalProblems} ${pluralize(\"problem\", totalProblems)}`;","","    if (totalProblems !== 0) {","        renderedText += ` (${totalErrors} ${pluralize(\"error\", totalErrors)}, ${totalWarnings} ${pluralize(\"warning\", totalWarnings)})`;","    }","    return renderedText;","}","","/**"," * Get the color based on whether there are errors/warnings..."," * @param {string} totalErrors Total errors"," * @param {string} totalWarnings Total warnings"," * @returns {int} The color code (0 = green, 1 = yellow, 2 = red)"," */","function renderColor(totalErrors, totalWarnings) {","    if (totalErrors !== 0) {","        return 2;","    } else if (totalWarnings !== 0) {","        return 1;","    }","    return 0;","}","","/**"," * Get HTML (table rows) describing the messages."," * @param {Array} messages Messages."," * @param {int} parentIndex Index of the parent HTML row."," * @returns {string} HTML (table rows) describing the messages."," */","function renderMessages(messages, parentIndex) {","","    /**","     * Get HTML (table row) describing a message.","     * @param {Object} message Message.","     * @returns {string} HTML (table row) describing a message.","     */","    return lodash.map(messages, message => {","        const lineNumber = message.line || 0;","        const columnNumber = message.column || 0;","","        return messageTemplate({","            parentIndex,","            lineNumber,","            columnNumber,","            severityNumber: message.severity,","            severityName: message.severity === 1 ? \"Warning\" : \"Error\",","            message: message.message,","            ruleId: message.ruleId","        });","    }).join(\"\\n\");","}","","/**"," * @param {Array} results Test results."," * @returns {string} HTML string describing the results."," */","function renderResults(results) {","    return lodash.map(results, (result, index) => resultTemplate({","        index,","        color: renderColor(result.errorCount, result.warningCount),","        filePath: result.filePath,","        summary: renderSummary(result.errorCount, result.warningCount)","","    }) + renderMessages(result.messages, index)).join(\"\\n\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","    let totalErrors,","        totalWarnings;","","    totalErrors = 0;","    totalWarnings = 0;","","    // Iterate over results to get totals","    results.forEach(result => {","        totalErrors += result.errorCount;","        totalWarnings += result.warningCount;","    });","","    return pageTemplate({","        date: new Date(),","        reportColor: renderColor(totalErrors, totalWarnings),","        reportSummary: renderSummary(totalErrors, totalWarnings),","        results: renderResults(results)","    });","};",""],"l":{"7":1,"8":1,"9":1,"15":1,"16":1,"17":1,"25":1,"26":0,"35":1,"36":0,"37":0,"39":0,"40":0,"42":0,"51":1,"52":0,"53":0,"54":0,"55":0,"57":0,"66":1,"73":0,"74":0,"75":0,"77":0,"93":1,"94":0,"107":1,"108":0,"111":0,"112":0,"115":0,"116":0,"117":0,"120":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/jslint-xml.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/jslint-xml.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":17},"end":{"line":13,"column":35}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"2":{"start":{"line":13,"column":0},"end":{"line":41,"column":2}},"3":{"start":{"line":15,"column":4},"end":{"line":15,"column":20}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":59}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":25}},"6":{"start":{"line":20,"column":4},"end":{"line":36,"column":7}},"7":{"start":{"line":21,"column":8},"end":{"line":21,"column":41}},"8":{"start":{"line":23,"column":8},"end":{"line":23,"column":53}},"9":{"start":{"line":25,"column":8},"end":{"line":32,"column":11}},"10":{"start":{"line":26,"column":12},"end":{"line":31,"column":24}},"11":{"start":{"line":34,"column":8},"end":{"line":34,"column":28}},"12":{"start":{"line":38,"column":4},"end":{"line":38,"column":26}},"13":{"start":{"line":40,"column":4},"end":{"line":40,"column":18}}},"branchMap":{"1":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":39},"end":{"line":29,"column":53}},{"start":{"line":29,"column":57},"end":{"line":29,"column":59}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":37},"end":{"line":30,"column":52}},{"start":{"line":30,"column":56},"end":{"line":30,"column":58}}]},"3":{"line":30,"type":"cond-expr","locations":[{"start":{"line":30,"column":79},"end":{"line":30,"column":101}},{"start":{"line":30,"column":104},"end":{"line":30,"column":106}}]}},"code":["/**"," * @fileoverview JSLint XML reporter"," * @author Ian Christian Myers"," */","\"use strict\";","","const xmlEscape = require(\"../util/xml-escape\");","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","","    let output = \"\";","","    output += \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\";","    output += \"<jslint>\";","","    results.forEach(result => {","        const messages = result.messages;","","        output += `<file name=\"${result.filePath}\">`;","","        messages.forEach(message => {","            output += [","                `<issue line=\"${message.line}\"`,","                `char=\"${message.column}\"`,","                `evidence=\"${xmlEscape(message.source || \"\")}\"`,","                `reason=\"${xmlEscape(message.message || \"\")}${message.ruleId ? ` (${message.ruleId})` : \"\"}\" />`","            ].join(\" \");","        });","","        output += \"</file>\";","","    });","","    output += \"</jslint>\";","","    return output;","};",""],"l":{"7":1,"13":1,"15":0,"17":0,"18":0,"20":0,"21":0,"23":0,"25":0,"26":0,"34":0,"38":0,"40":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/json.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/json.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":11,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"2":{"start":{"line":12,"column":4},"end":{"line":12,"column":35}}},"branchMap":{},"code":["/**"," * @fileoverview JSON reporter"," * @author Burak Yigit Kaya aka BYK"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","    return JSON.stringify(results);","};",""],"l":{"11":1,"12":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/junit.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/junit.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"getMessageType","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":17},"end":{"line":31,"column":35}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"2":{"start":{"line":19,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":23}},"5":{"start":{"line":23,"column":4},"end":{"line":23,"column":21}},"6":{"start":{"line":31,"column":0},"end":{"line":70,"column":2}},"7":{"start":{"line":33,"column":4},"end":{"line":33,"column":20}},"8":{"start":{"line":35,"column":4},"end":{"line":35,"column":61}},"9":{"start":{"line":36,"column":4},"end":{"line":36,"column":31}},"10":{"start":{"line":38,"column":4},"end":{"line":65,"column":7}},"11":{"start":{"line":40,"column":8},"end":{"line":40,"column":41}},"12":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"13":{"start":{"line":43,"column":12},"end":{"line":43,"column":149}},"14":{"start":{"line":46,"column":8},"end":{"line":59,"column":11}},"15":{"start":{"line":47,"column":12},"end":{"line":47,"column":61}},"16":{"start":{"line":49,"column":12},"end":{"line":49,"column":93}},"17":{"start":{"line":50,"column":12},"end":{"line":50,"column":80}},"18":{"start":{"line":51,"column":12},"end":{"line":51,"column":34}},"19":{"start":{"line":52,"column":12},"end":{"line":52,"column":56}},"20":{"start":{"line":53,"column":12},"end":{"line":53,"column":75}},"21":{"start":{"line":54,"column":12},"end":{"line":54,"column":63}},"22":{"start":{"line":55,"column":12},"end":{"line":55,"column":69}},"23":{"start":{"line":56,"column":12},"end":{"line":56,"column":28}},"24":{"start":{"line":57,"column":12},"end":{"line":57,"column":35}},"25":{"start":{"line":58,"column":12},"end":{"line":58,"column":38}},"26":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"27":{"start":{"line":62,"column":12},"end":{"line":62,"column":39}},"28":{"start":{"line":67,"column":4},"end":{"line":67,"column":32}},"29":{"start":{"line":69,"column":4},"end":{"line":69,"column":18}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"2":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":8},"end":{"line":20,"column":21}},{"start":{"line":20,"column":25},"end":{"line":20,"column":47}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"4":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":41},"end":{"line":47,"column":48}},{"start":{"line":47,"column":51},"end":{"line":47,"column":60}}]},"5":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":61},"end":{"line":49,"column":75}},{"start":{"line":49,"column":79},"end":{"line":49,"column":88}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":53},"end":{"line":50,"column":68}},{"start":{"line":50,"column":72},"end":{"line":50,"column":74}}]},"7":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":30},"end":{"line":52,"column":42}},{"start":{"line":52,"column":46},"end":{"line":52,"column":47}}]},"8":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":25},"end":{"line":53,"column":39}},{"start":{"line":53,"column":43},"end":{"line":53,"column":44}}]},"9":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":38},"end":{"line":54,"column":53}},{"start":{"line":54,"column":57},"end":{"line":54,"column":59}}]},"10":{"line":55,"type":"cond-expr","locations":[{"start":{"line":55,"column":40},"end":{"line":55,"column":62}},{"start":{"line":55,"column":65},"end":{"line":55,"column":67}}]},"11":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]}},"code":["/**"," * @fileoverview jUnit Reporter"," * @author Jamund Ferguson"," */","\"use strict\";","","const xmlEscape = require(\"../util/xml-escape\");","","//------------------------------------------------------------------------------","// Helper Functions","//------------------------------------------------------------------------------","","/**"," * Returns the severity of warning or error"," * @param {Object} message message object to examine"," * @returns {string} severity level"," * @private"," */","function getMessageType(message) {","    if (message.fatal || message.severity === 2) {","        return \"Error\";","    }","    return \"Warning\";","","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","","    let output = \"\";","","    output += \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\";","    output += \"<testsuites>\\n\";","","    results.forEach(result => {","","        const messages = result.messages;","","        if (messages.length) {","            output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"${messages.length}\" errors=\"${messages.length}\" name=\"${result.filePath}\">\\n`;","        }","","        messages.forEach(message => {","            const type = message.fatal ? \"error\" : \"failure\";","","            output += `<testcase time=\"0\" name=\"org.eslint.${message.ruleId || \"unknown\"}\">`;","            output += `<${type} message=\"${xmlEscape(message.message || \"\")}\">`;","            output += \"<![CDATA[\";","            output += `line ${message.line || 0}, col `;","            output += `${message.column || 0}, ${getMessageType(message)}`;","            output += ` - ${xmlEscape(message.message || \"\")}`;","            output += (message.ruleId ? ` (${message.ruleId})` : \"\");","            output += \"]]>\";","            output += `</${type}>`;","            output += \"</testcase>\\n\";","        });","","        if (messages.length) {","            output += \"</testsuite>\\n\";","        }","","    });","","    output += \"</testsuites>\\n\";","","    return output;","};",""],"l":{"7":1,"19":1,"20":0,"21":0,"23":0,"31":1,"33":0,"35":0,"36":0,"38":0,"40":0,"42":0,"43":0,"46":0,"47":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"61":0,"62":0,"67":0,"69":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/stylish.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/stylish.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"pluralize","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":32}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":17},"end":{"line":28,"column":35}}},"3":{"name":"(anonymous_3)","line":69,"loc":{"start":{"line":69,"column":28},"end":{"line":69,"column":34}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":8,"column":34}},"2":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":21,"column":4},"end":{"line":21,"column":45}},"4":{"start":{"line":28,"column":0},"end":{"line":87,"column":2}},"5":{"start":{"line":30,"column":4},"end":{"line":33,"column":32}},"6":{"start":{"line":35,"column":4},"end":{"line":74,"column":7}},"7":{"start":{"line":36,"column":8},"end":{"line":36,"column":41}},"8":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"9":{"start":{"line":39,"column":12},"end":{"line":39,"column":19}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":36}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":40}},"12":{"start":{"line":45,"column":8},"end":{"line":45,"column":58}},"13":{"start":{"line":47,"column":8},"end":{"line":73,"column":119}},"14":{"start":{"line":49,"column":16},"end":{"line":49,"column":32}},"15":{"start":{"line":51,"column":16},"end":{"line":56,"column":17}},"16":{"start":{"line":52,"column":20},"end":{"line":52,"column":53}},"17":{"start":{"line":53,"column":20},"end":{"line":53,"column":41}},"18":{"start":{"line":55,"column":20},"end":{"line":55,"column":58}},"19":{"start":{"line":58,"column":16},"end":{"line":65,"column":18}},"20":{"start":{"line":70,"column":20},"end":{"line":70,"column":56}},"21":{"start":{"line":73,"column":32},"end":{"line":73,"column":100}},"22":{"start":{"line":73,"column":75},"end":{"line":73,"column":99}},"23":{"start":{"line":76,"column":4},"end":{"line":76,"column":36}},"24":{"start":{"line":78,"column":4},"end":{"line":84,"column":5}},"25":{"start":{"line":79,"column":8},"end":{"line":83,"column":20}},"26":{"start":{"line":86,"column":4},"end":{"line":86,"column":35}}},"branchMap":{"1":{"line":21,"type":"cond-expr","locations":[{"start":{"line":21,"column":26},"end":{"line":21,"column":30}},{"start":{"line":21,"column":33},"end":{"line":21,"column":43}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":16},"end":{"line":51,"column":16}},{"start":{"line":51,"column":16},"end":{"line":51,"column":16}}]},"4":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":20},"end":{"line":51,"column":33}},{"start":{"line":51,"column":37},"end":{"line":51,"column":59}}]},"5":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":20},"end":{"line":60,"column":32}},{"start":{"line":60,"column":36},"end":{"line":60,"column":37}}]},"6":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":20},"end":{"line":61,"column":34}},{"start":{"line":61,"column":38},"end":{"line":61,"column":39}}]},"7":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":30},"end":{"line":64,"column":44}},{"start":{"line":64,"column":48},"end":{"line":64,"column":50}}]},"8":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"9":{"line":86,"type":"cond-expr","locations":[{"start":{"line":86,"column":23},"end":{"line":86,"column":29}},{"start":{"line":86,"column":32},"end":{"line":86,"column":34}}]}},"code":["/**"," * @fileoverview Stylish reporter"," * @author Sindre Sorhus"," */","\"use strict\";","","const chalk = require(\"chalk\"),","    table = require(\"text-table\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Given a word and a count, append an s if count is not one."," * @param {string} word A word in its singular form."," * @param {int} count A number controlling whether word should be pluralized."," * @returns {string} The original word with an s on the end if count is not one."," */","function pluralize(word, count) {","    return (count === 1 ? word : `${word}s`);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","","    let output = \"\\n\",","        errors = 0,","        warnings = 0,","        summaryColor = \"yellow\";","","    results.forEach(result => {","        const messages = result.messages;","","        if (messages.length === 0) {","            return;","        }","","        errors += result.errorCount;","        warnings += result.warningCount;","","        output += `${chalk.underline(result.filePath)}\\n`;","","        output += `${table(","            messages.map(message => {","                let messageType;","","                if (message.fatal || message.severity === 2) {","                    messageType = chalk.red(\"error\");","                    summaryColor = \"red\";","                } else {","                    messageType = chalk.yellow(\"warning\");","                }","","                return [","                    \"\",","                    message.line || 0,","                    message.column || 0,","                    messageType,","                    message.message.replace(/\\.$/, \"\"),","                    chalk.dim(message.ruleId || \"\")","                ];","            }),","            {","                align: [\"\", \"r\", \"l\"],","                stringLength(str) {","                    return chalk.stripColor(str).length;","                }","            }","        ).split(\"\\n\").map(el => el.replace(/(\\d+)\\s+(\\d+)/, (m, p1, p2) => chalk.dim(`${p1}:${p2}`))).join(\"\\n\")}\\n\\n`;","    });","","    const total = errors + warnings;","","    if (total > 0) {","        output += chalk[summaryColor].bold([","            \"\\u2716 \", total, pluralize(\" problem\", total),","            \" (\", errors, pluralize(\" error\", errors), \", \",","            warnings, pluralize(\" warning\", warnings), \")\\n\"","        ].join(\"\"));","    }","","    return total > 0 ? output : \"\";","};",""],"l":{"7":1,"20":1,"21":0,"28":1,"30":0,"35":0,"36":0,"38":0,"39":0,"42":0,"43":0,"45":0,"47":0,"49":0,"51":0,"52":0,"53":0,"55":0,"58":0,"70":0,"73":0,"76":0,"78":0,"79":0,"86":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/table.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/table.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"drawTable","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":29}}},"2":{"name":"(anonymous_2)","line":81,"loc":{"start":{"line":81,"column":26},"end":{"line":81,"column":34}}},"3":{"name":"drawReport","line":92,"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":29}}},"4":{"name":"(anonymous_4)","line":112,"loc":{"start":{"line":112,"column":17},"end":{"line":112,"column":34}}},"5":{"name":"(anonymous_5)","line":144,"loc":{"start":{"line":144,"column":26},"end":{"line":144,"column":29}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":13,"column":37}},"2":{"start":{"line":24,"column":0},"end":{"line":85,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":20}},"4":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"5":{"start":{"line":28,"column":8},"end":{"line":28,"column":18}},"6":{"start":{"line":31,"column":4},"end":{"line":37,"column":7}},"7":{"start":{"line":39,"column":4},"end":{"line":55,"column":7}},"8":{"start":{"line":40,"column":8},"end":{"line":40,"column":24}},"9":{"start":{"line":42,"column":8},"end":{"line":46,"column":9}},"10":{"start":{"line":43,"column":12},"end":{"line":43,"column":45}},"11":{"start":{"line":45,"column":12},"end":{"line":45,"column":50}},"12":{"start":{"line":48,"column":8},"end":{"line":54,"column":11}},"13":{"start":{"line":57,"column":4},"end":{"line":84,"column":7}},"14":{"start":{"line":82,"column":12},"end":{"line":82,"column":31}},"15":{"start":{"line":92,"column":0},"end":{"line":106,"column":1}},"16":{"start":{"line":93,"column":4},"end":{"line":93,"column":14}},"17":{"start":{"line":95,"column":4},"end":{"line":101,"column":7}},"18":{"start":{"line":96,"column":8},"end":{"line":98,"column":9}},"19":{"start":{"line":97,"column":12},"end":{"line":97,"column":22}},"20":{"start":{"line":100,"column":8},"end":{"line":100,"column":71}},"21":{"start":{"line":103,"column":4},"end":{"line":103,"column":52}},"22":{"start":{"line":103,"column":36},"end":{"line":103,"column":50}},"23":{"start":{"line":105,"column":4},"end":{"line":105,"column":26}},"24":{"start":{"line":112,"column":0},"end":{"line":150,"column":2}},"25":{"start":{"line":113,"column":4},"end":{"line":115,"column":21}},"26":{"start":{"line":117,"column":4},"end":{"line":117,"column":16}},"27":{"start":{"line":118,"column":4},"end":{"line":118,"column":19}},"28":{"start":{"line":119,"column":4},"end":{"line":119,"column":21}},"29":{"start":{"line":121,"column":4},"end":{"line":124,"column":7}},"30":{"start":{"line":122,"column":8},"end":{"line":122,"column":44}},"31":{"start":{"line":123,"column":8},"end":{"line":123,"column":48}},"32":{"start":{"line":126,"column":4},"end":{"line":128,"column":5}},"33":{"start":{"line":127,"column":8},"end":{"line":127,"column":36}},"34":{"start":{"line":130,"column":4},"end":{"line":147,"column":9}},"35":{"start":{"line":145,"column":12},"end":{"line":145,"column":24}},"36":{"start":{"line":149,"column":4},"end":{"line":149,"column":18}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"3":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":25}},{"start":{"line":42,"column":29},"end":{"line":42,"column":51}}]},"4":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":24}},{"start":{"line":49,"column":28},"end":{"line":49,"column":29}}]},"5":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":26}},{"start":{"line":50,"column":30},"end":{"line":50,"column":31}}]},"6":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":26}},{"start":{"line":53,"column":30},"end":{"line":53,"column":32}}]},"7":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":8}},{"start":{"line":96,"column":8},"end":{"line":96,"column":8}}]},"8":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"9":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":8},"end":{"line":126,"column":18}},{"start":{"line":126,"column":22},"end":{"line":126,"column":34}}]}},"code":["/**"," * @fileoverview \"table reporter."," * @author Gajus Kuizinas <gajus@gajus.com>"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const chalk = require(\"chalk\"),","    table = require(\"table\").default,","    pluralize = require(\"pluralize\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Draws text table."," * @param {Array<Object>} messages Error messages relating to a specific file."," * @returns {string} A text table."," */","function drawTable(messages) {","    const rows = [];","","    if (messages.length === 0) {","        return \"\";","    }","","    rows.push([","        chalk.bold(\"Line\"),","        chalk.bold(\"Column\"),","        chalk.bold(\"Type\"),","        chalk.bold(\"Message\"),","        chalk.bold(\"Rule ID\")","    ]);","","    messages.forEach(message => {","        let messageType;","","        if (message.fatal || message.severity === 2) {","            messageType = chalk.red(\"error\");","        } else {","            messageType = chalk.yellow(\"warning\");","        }","","        rows.push([","            message.line || 0,","            message.column || 0,","            messageType,","            message.message,","            message.ruleId || \"\"","        ]);","    });","","    return table(rows, {","        columns: {","            0: {","                width: 8,","                wrapWord: true","            },","            1: {","                width: 8,","                wrapWord: true","            },","            2: {","                width: 8,","                wrapWord: true","            },","            3: {","                paddingRight: 5,","                width: 50,","                wrapWord: true","            },","            4: {","                width: 20,","                wrapWord: true","            }","        },","        drawHorizontalLine(index) {","            return index === 1;","        }","    });","}","","/**"," * Draws a report (multiple tables)."," * @param {Array} results Report results for every file."," * @returns {string} A column of text tables."," */","function drawReport(results) {","    let files;","","    files = results.map(result => {","        if (!result.messages.length) {","            return \"\";","        }","","        return `\\n${result.filePath}\\n\\n${drawTable(result.messages)}`;","    });","","    files = files.filter(content => content.trim());","","    return files.join(\"\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(report) {","    let result,","        errorCount,","        warningCount;","","    result = \"\";","    errorCount = 0;","    warningCount = 0;","","    report.forEach(fileReport => {","        errorCount += fileReport.errorCount;","        warningCount += fileReport.warningCount;","    });","","    if (errorCount || warningCount) {","        result = drawReport(report);","    }","","    result += `\\n${table([","        [","            chalk.red(pluralize(\"Error\", errorCount, true))","        ],","        [","            chalk.yellow(pluralize(\"Warning\", warningCount, true))","        ]","    ], {","        columns: {","            0: {","                width: 110,","                wrapWord: true","            }","        },","        drawHorizontalLine() {","            return true;","        }","    })}`;","","    return result;","};",""],"l":{"11":1,"24":1,"25":0,"27":0,"28":0,"31":0,"39":0,"40":0,"42":0,"43":0,"45":0,"48":0,"57":0,"82":0,"92":1,"93":0,"95":0,"96":0,"97":0,"100":0,"103":0,"105":0,"112":1,"113":0,"117":0,"118":0,"119":0,"121":0,"122":0,"123":0,"126":0,"127":0,"130":0,"145":0,"149":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/tap.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/tap.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"getMessageType","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":33}}},"2":{"name":"outputDiagnostics","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":39}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":17},"end":{"line":44,"column":35}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":32}},"2":{"start":{"line":18,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":23}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":21}},"6":{"start":{"line":31,"column":0},"end":{"line":38,"column":1}},"7":{"start":{"line":32,"column":4},"end":{"line":32,"column":24}},"8":{"start":{"line":33,"column":4},"end":{"line":33,"column":34}},"9":{"start":{"line":35,"column":4},"end":{"line":35,"column":81}},"10":{"start":{"line":36,"column":4},"end":{"line":36,"column":22}},"11":{"start":{"line":37,"column":4},"end":{"line":37,"column":18}},"12":{"start":{"line":44,"column":0},"end":{"line":90,"column":2}},"13":{"start":{"line":45,"column":4},"end":{"line":45,"column":58}},"14":{"start":{"line":47,"column":4},"end":{"line":87,"column":7}},"15":{"start":{"line":48,"column":8},"end":{"line":48,"column":41}},"16":{"start":{"line":49,"column":8},"end":{"line":49,"column":30}},"17":{"start":{"line":50,"column":8},"end":{"line":50,"column":29}},"18":{"start":{"line":52,"column":8},"end":{"line":78,"column":9}},"19":{"start":{"line":53,"column":12},"end":{"line":53,"column":34}},"20":{"start":{"line":55,"column":12},"end":{"line":77,"column":15}},"21":{"start":{"line":56,"column":16},"end":{"line":64,"column":18}},"22":{"start":{"line":69,"column":16},"end":{"line":76,"column":17}},"23":{"start":{"line":70,"column":20},"end":{"line":72,"column":21}},"24":{"start":{"line":71,"column":24},"end":{"line":71,"column":50}},"25":{"start":{"line":73,"column":20},"end":{"line":73,"column":58}},"26":{"start":{"line":75,"column":20},"end":{"line":75,"column":45}},"27":{"start":{"line":80,"column":8},"end":{"line":80,"column":67}},"28":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"29":{"start":{"line":84,"column":12},"end":{"line":84,"column":53}},"30":{"start":{"line":89,"column":4},"end":{"line":89,"column":18}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":21}},{"start":{"line":19,"column":25},"end":{"line":19,"column":47}}]},"3":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"4":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":30},"end":{"line":60,"column":42}},{"start":{"line":60,"column":46},"end":{"line":60,"column":47}}]},"5":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":32},"end":{"line":61,"column":46}},{"start":{"line":61,"column":50},"end":{"line":61,"column":51}}]},"6":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":32},"end":{"line":62,"column":46}},{"start":{"line":62,"column":50},"end":{"line":62,"column":52}}]},"7":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":16},"end":{"line":69,"column":16}},{"start":{"line":69,"column":16},"end":{"line":69,"column":16}}]},"8":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":20},"end":{"line":70,"column":20}},{"start":{"line":70,"column":20},"end":{"line":70,"column":20}}]},"9":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":8}},{"start":{"line":83,"column":8},"end":{"line":83,"column":8}}]}},"code":["/**"," * @fileoverview TAP reporter"," * @author Jonathan Kingston"," */","\"use strict\";","","const yaml = require(\"js-yaml\");","","//------------------------------------------------------------------------------","// Helper Functions","//------------------------------------------------------------------------------","","/**"," * Returns a canonical error level string based upon the error message passed in."," * @param {Object} message Individual error message provided by eslint"," * @returns {string} Error level string"," */","function getMessageType(message) {","    if (message.fatal || message.severity === 2) {","        return \"error\";","    }","    return \"warning\";","","}","","/**"," * Takes in a JavaScript object and outputs a TAP diagnostics string"," * @param {Object} diagnostic JavaScript object to be embedded as YAML into output."," * @returns {string} diagnostics string with YAML embedded - TAP version 13 compliant"," */","function outputDiagnostics(diagnostic) {","    const prefix = \"  \";","    let output = `${prefix}---\\n`;","","    output += prefix + yaml.safeDump(diagnostic).split(\"\\n\").join(`\\n${prefix}`);","    output += \"...\\n\";","    return output;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","    let output = `TAP version 13\\n1..${results.length}\\n`;","","    results.forEach((result, id) => {","        const messages = result.messages;","        let testResult = \"ok\";","        let diagnostics = {};","","        if (messages.length > 0) {","            testResult = \"not ok\";","","            messages.forEach(message => {","                const diagnostic = {","                    message: message.message,","                    severity: getMessageType(message),","                    data: {","                        line: message.line || 0,","                        column: message.column || 0,","                        ruleId: message.ruleId || \"\"","                    }","                };","","                // If we have multiple messages place them under a messages key","                // The first error will be logged as message key","                // This is to adhere to TAP 13 loosely defined specification of having a message key","                if (\"message\" in diagnostics) {","                    if (typeof diagnostics.messages === \"undefined\") {","                        diagnostics.messages = [];","                    }","                    diagnostics.messages.push(diagnostic);","                } else {","                    diagnostics = diagnostic;","                }","            });","        }","","        output += `${testResult} ${id + 1} - ${result.filePath}\\n`;","","        // If we have an error include diagnostics","        if (messages.length > 0) {","            output += outputDiagnostics(diagnostics);","        }","","    });","","    return output;","};",""],"l":{"7":1,"18":1,"19":0,"20":0,"22":0,"31":1,"32":0,"33":0,"35":0,"36":0,"37":0,"44":1,"45":0,"47":0,"48":0,"49":0,"50":0,"52":0,"53":0,"55":0,"56":0,"69":0,"70":0,"71":0,"73":0,"75":0,"80":0,"83":0,"84":0,"89":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/unix.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/unix.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"getMessageType","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":33}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":17},"end":{"line":29,"column":35}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":22,"column":1}},"2":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"3":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"4":{"start":{"line":20,"column":4},"end":{"line":20,"column":21}},"5":{"start":{"line":29,"column":0},"end":{"line":58,"column":2}},"6":{"start":{"line":31,"column":4},"end":{"line":32,"column":18}},"7":{"start":{"line":34,"column":4},"end":{"line":51,"column":7}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":41}},"9":{"start":{"line":38,"column":8},"end":{"line":38,"column":33}},"10":{"start":{"line":40,"column":8},"end":{"line":49,"column":11}},"11":{"start":{"line":42,"column":12},"end":{"line":42,"column":44}},"12":{"start":{"line":43,"column":12},"end":{"line":43,"column":46}},"13":{"start":{"line":44,"column":12},"end":{"line":44,"column":48}},"14":{"start":{"line":45,"column":12},"end":{"line":45,"column":45}},"15":{"start":{"line":46,"column":12},"end":{"line":46,"column":98}},"16":{"start":{"line":47,"column":12},"end":{"line":47,"column":27}},"17":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"18":{"start":{"line":54,"column":8},"end":{"line":54,"column":64}},"19":{"start":{"line":57,"column":4},"end":{"line":57,"column":18}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":8},"end":{"line":17,"column":21}},{"start":{"line":17,"column":25},"end":{"line":17,"column":47}}]},"3":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":25},"end":{"line":43,"column":37}},{"start":{"line":43,"column":41},"end":{"line":43,"column":42}}]},"4":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":25},"end":{"line":44,"column":39}},{"start":{"line":44,"column":43},"end":{"line":44,"column":44}}]},"5":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":69},"end":{"line":46,"column":89}},{"start":{"line":46,"column":92},"end":{"line":46,"column":94}}]},"6":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"7":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":53},"end":{"line":54,"column":56}},{"start":{"line":54,"column":59},"end":{"line":54,"column":61}}]}},"code":["/**"," * @fileoverview unix-style formatter."," * @author oshi-shinobu"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Helper Functions","//------------------------------------------------------------------------------","","/**"," * Returns a canonical error level string based upon the error message passed in."," * @param {Object} message Individual error message provided by eslint"," * @returns {string} Error level string"," */","function getMessageType(message) {","    if (message.fatal || message.severity === 2) {","        return \"Error\";","    }","    return \"Warning\";","","}","","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","","    let output = \"\",","        total = 0;","","    results.forEach(result => {","","        const messages = result.messages;","","        total += messages.length;","","        messages.forEach(message => {","","            output += `${result.filePath}:`;","            output += `${message.line || 0}:`;","            output += `${message.column || 0}:`;","            output += ` ${message.message} `;","            output += `[${getMessageType(message)}${message.ruleId ? `/${message.ruleId}` : \"\"}]`;","            output += \"\\n\";","","        });","","    });","","    if (total > 0) {","        output += `\\n${total} problem${total !== 1 ? \"s\" : \"\"}`;","    }","","    return output;","};",""],"l":{"16":1,"17":0,"18":0,"20":0,"29":1,"31":0,"34":0,"36":0,"38":0,"40":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"53":0,"54":0,"57":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/visualstudio.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/formatters/visualstudio.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"getMessageType","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":33}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":17},"end":{"line":31,"column":35}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":24,"column":1}},"2":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"3":{"start":{"line":20,"column":8},"end":{"line":20,"column":23}},"4":{"start":{"line":22,"column":4},"end":{"line":22,"column":21}},"5":{"start":{"line":31,"column":0},"end":{"line":63,"column":2}},"6":{"start":{"line":33,"column":4},"end":{"line":34,"column":18}},"7":{"start":{"line":36,"column":4},"end":{"line":54,"column":7}},"8":{"start":{"line":38,"column":8},"end":{"line":38,"column":41}},"9":{"start":{"line":40,"column":8},"end":{"line":40,"column":33}},"10":{"start":{"line":42,"column":8},"end":{"line":52,"column":11}},"11":{"start":{"line":44,"column":12},"end":{"line":44,"column":38}},"12":{"start":{"line":45,"column":12},"end":{"line":45,"column":46}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":65}},"14":{"start":{"line":47,"column":12},"end":{"line":47,"column":54}},"15":{"start":{"line":48,"column":12},"end":{"line":48,"column":65}},"16":{"start":{"line":49,"column":12},"end":{"line":49,"column":46}},"17":{"start":{"line":50,"column":12},"end":{"line":50,"column":27}},"18":{"start":{"line":56,"column":4},"end":{"line":60,"column":5}},"19":{"start":{"line":57,"column":8},"end":{"line":57,"column":32}},"20":{"start":{"line":59,"column":8},"end":{"line":59,"column":64}},"21":{"start":{"line":62,"column":4},"end":{"line":62,"column":18}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":21}},{"start":{"line":19,"column":25},"end":{"line":19,"column":47}}]},"3":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":26},"end":{"line":45,"column":38}},{"start":{"line":45,"column":42},"end":{"line":45,"column":43}}]},"4":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":39},"end":{"line":46,"column":59}},{"start":{"line":46,"column":62},"end":{"line":46,"column":64}}]},"5":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":39},"end":{"line":48,"column":59}},{"start":{"line":48,"column":62},"end":{"line":48,"column":64}}]},"6":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"7":{"line":59,"type":"cond-expr","locations":[{"start":{"line":59,"column":53},"end":{"line":59,"column":56}},{"start":{"line":59,"column":59},"end":{"line":59,"column":61}}]}},"code":["/**"," * @fileoverview Visual Studio compatible formatter"," * @author Ronald Pijnacker"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helper Functions","//------------------------------------------------------------------------------","","/**"," * Returns the severity of warning or error"," * @param {Object} message message object to examine"," * @returns {string} severity level"," * @private"," */","function getMessageType(message) {","    if (message.fatal || message.severity === 2) {","        return \"error\";","    }","    return \"warning\";","","}","","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = function(results) {","","    let output = \"\",","        total = 0;","","    results.forEach(result => {","","        const messages = result.messages;","","        total += messages.length;","","        messages.forEach(message => {","","            output += result.filePath;","            output += `(${message.line || 0}`;","            output += message.column ? `,${message.column}` : \"\";","            output += `): ${getMessageType(message)}`;","            output += message.ruleId ? ` ${message.ruleId}` : \"\";","            output += ` : ${message.message}`;","            output += \"\\n\";","","        });","","    });","","    if (total === 0) {","        output += \"no problems\";","    } else {","        output += `\\n${total} problem${total !== 1 ? \"s\" : \"\"}`;","    }","","    return output;","};",""],"l":{"18":1,"19":0,"20":0,"22":0,"31":1,"33":0,"36":0,"38":0,"40":0,"42":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"56":0,"57":0,"59":0,"62":0}},"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/internal-rules/internal-no-invalid-meta.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/node_modules/eslint/lib/internal-rules/internal-no-invalid-meta.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":1,"15":0,"16":0,"17":1,"18":0,"19":0,"20":1,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"getPropertyFromObject","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":47}}},"2":{"name":"getMetaPropertyFromExportsNode","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":53}}},"3":{"name":"hasMetaDocs","line":47,"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":39}}},"4":{"name":"hasMetaDocsDescription","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":50}}},"5":{"name":"hasMetaDocsCategory","line":69,"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":47}}},"6":{"name":"hasMetaDocsRecommended","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":50}}},"7":{"name":"hasMetaSchema","line":93,"loc":{"start":{"line":93,"column":0},"end":{"line":93,"column":41}}},"8":{"name":"checkMetaValidity","line":105,"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":49}}},"9":{"name":"isCorrectExportsFormat","line":144,"loc":{"start":{"line":144,"column":0},"end":{"line":144,"column":38}}},"10":{"name":"(anonymous_10)","line":163,"loc":{"start":{"line":163,"column":10},"end":{"line":163,"column":20}}},"11":{"name":"(anonymous_11)","line":167,"loc":{"start":{"line":167,"column":32},"end":{"line":167,"column":39}}},"12":{"name":"(anonymous_12)","line":178,"loc":{"start":{"line":178,"column":26},"end":{"line":178,"column":29}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":20,"column":4},"end":{"line":20,"column":39}},"3":{"start":{"line":22,"column":4},"end":{"line":26,"column":5}},"4":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"5":{"start":{"line":24,"column":12},"end":{"line":24,"column":33}},"6":{"start":{"line":28,"column":4},"end":{"line":28,"column":16}},"7":{"start":{"line":37,"column":0},"end":{"line":39,"column":1}},"8":{"start":{"line":38,"column":4},"end":{"line":38,"column":54}},"9":{"start":{"line":47,"column":0},"end":{"line":49,"column":1}},"10":{"start":{"line":48,"column":4},"end":{"line":48,"column":74}},"11":{"start":{"line":57,"column":0},"end":{"line":61,"column":1}},"12":{"start":{"line":58,"column":4},"end":{"line":58,"column":75}},"13":{"start":{"line":60,"column":4},"end":{"line":60,"column":76}},"14":{"start":{"line":69,"column":0},"end":{"line":73,"column":1}},"15":{"start":{"line":70,"column":4},"end":{"line":70,"column":75}},"16":{"start":{"line":72,"column":4},"end":{"line":72,"column":73}},"17":{"start":{"line":81,"column":0},"end":{"line":85,"column":1}},"18":{"start":{"line":82,"column":4},"end":{"line":82,"column":75}},"19":{"start":{"line":84,"column":4},"end":{"line":84,"column":76}},"20":{"start":{"line":93,"column":0},"end":{"line":95,"column":1}},"21":{"start":{"line":94,"column":4},"end":{"line":94,"column":67}},"22":{"start":{"line":105,"column":0},"end":{"line":136,"column":1}},"23":{"start":{"line":106,"column":4},"end":{"line":106,"column":69}},"24":{"start":{"line":108,"column":4},"end":{"line":111,"column":5}},"25":{"start":{"line":109,"column":8},"end":{"line":109,"column":72}},"26":{"start":{"line":110,"column":8},"end":{"line":110,"column":15}},"27":{"start":{"line":113,"column":4},"end":{"line":116,"column":5}},"28":{"start":{"line":114,"column":8},"end":{"line":114,"column":78}},"29":{"start":{"line":115,"column":8},"end":{"line":115,"column":15}},"30":{"start":{"line":118,"column":4},"end":{"line":121,"column":5}},"31":{"start":{"line":119,"column":8},"end":{"line":119,"column":90}},"32":{"start":{"line":120,"column":8},"end":{"line":120,"column":15}},"33":{"start":{"line":123,"column":4},"end":{"line":126,"column":5}},"34":{"start":{"line":124,"column":8},"end":{"line":124,"column":87}},"35":{"start":{"line":125,"column":8},"end":{"line":125,"column":15}},"36":{"start":{"line":128,"column":4},"end":{"line":131,"column":5}},"37":{"start":{"line":129,"column":8},"end":{"line":129,"column":90}},"38":{"start":{"line":130,"column":8},"end":{"line":130,"column":15}},"39":{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},"40":{"start":{"line":134,"column":8},"end":{"line":134,"column":80}},"41":{"start":{"line":144,"column":0},"end":{"line":146,"column":1}},"42":{"start":{"line":145,"column":4},"end":{"line":145,"column":44}},"43":{"start":{"line":152,"column":0},"end":{"line":188,"column":2}},"44":{"start":{"line":164,"column":8},"end":{"line":164,"column":24}},"45":{"start":{"line":166,"column":8},"end":{"line":186,"column":10}},"46":{"start":{"line":168,"column":16},"end":{"line":175,"column":17}},"47":{"start":{"line":174,"column":20},"end":{"line":174,"column":45}},"48":{"start":{"line":179,"column":16},"end":{"line":182,"column":17}},"49":{"start":{"line":180,"column":20},"end":{"line":180,"column":150}},"50":{"start":{"line":181,"column":20},"end":{"line":181,"column":27}},"51":{"start":{"line":184,"column":16},"end":{"line":184,"column":56}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]},"2":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":11},"end":{"line":60,"column":19}},{"start":{"line":60,"column":23},"end":{"line":60,"column":75}}]},"3":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":11},"end":{"line":72,"column":19}},{"start":{"line":72,"column":23},"end":{"line":72,"column":72}}]},"4":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":11},"end":{"line":84,"column":19}},{"start":{"line":84,"column":23},"end":{"line":84,"column":75}}]},"5":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"6":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":4},"end":{"line":113,"column":4}},{"start":{"line":113,"column":4},"end":{"line":113,"column":4}}]},"7":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":4},"end":{"line":118,"column":4}},{"start":{"line":118,"column":4},"end":{"line":118,"column":4}}]},"8":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":4},"end":{"line":123,"column":4}},{"start":{"line":123,"column":4},"end":{"line":123,"column":4}}]},"9":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"10":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":133,"column":4}},{"start":{"line":133,"column":4},"end":{"line":133,"column":4}}]},"11":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":16},"end":{"line":168,"column":16}},{"start":{"line":168,"column":16},"end":{"line":168,"column":16}}]},"12":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":20},"end":{"line":168,"column":29}},{"start":{"line":169,"column":20},"end":{"line":169,"column":30}},{"start":{"line":170,"column":20},"end":{"line":170,"column":57}},{"start":{"line":171,"column":20},"end":{"line":171,"column":54}},{"start":{"line":172,"column":20},"end":{"line":172,"column":57}}]},"13":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":16},"end":{"line":179,"column":16}},{"start":{"line":179,"column":16},"end":{"line":179,"column":16}}]}},"code":["/**"," * @fileoverview Internal rule to prevent missing or invalid meta property in core rules."," * @author Vitor Balocco"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets the property of the Object node passed in that has the name specified."," *"," * @param {string} property Name of the property to return."," * @param {ASTNode} node The ObjectExpression node."," * @returns {ASTNode} The Property node or null if not found."," */","function getPropertyFromObject(property, node) {","    const properties = node.properties;","","    for (let i = 0; i < properties.length; i++) {","        if (properties[i].key.name === property) {","            return properties[i];","        }","    }","","    return null;","}","","/**"," * Extracts the `meta` property from the ObjectExpression that all rules export."," *"," * @param {ASTNode} exportsNode ObjectExpression node that the rule exports."," * @returns {ASTNode} The `meta` Property node or null if not found."," */","function getMetaPropertyFromExportsNode(exportsNode) {","    return getPropertyFromObject(\"meta\", exportsNode);","}","","/**"," * Whether this `meta` ObjectExpression has a `docs` property defined or not."," *"," * @param {ASTNode} metaPropertyNode The `meta` ObjectExpression for this rule."," * @returns {boolean} `true` if a `docs` property exists."," */","function hasMetaDocs(metaPropertyNode) {","    return Boolean(getPropertyFromObject(\"docs\", metaPropertyNode.value));","}","","/**"," * Whether this `meta` ObjectExpression has a `docs.description` property defined or not."," *"," * @param {ASTNode} metaPropertyNode The `meta` ObjectExpression for this rule."," * @returns {boolean} `true` if a `docs.description` property exists."," */","function hasMetaDocsDescription(metaPropertyNode) {","    const metaDocs = getPropertyFromObject(\"docs\", metaPropertyNode.value);","","    return metaDocs && getPropertyFromObject(\"description\", metaDocs.value);","}","","/**"," * Whether this `meta` ObjectExpression has a `docs.category` property defined or not."," *"," * @param {ASTNode} metaPropertyNode The `meta` ObjectExpression for this rule."," * @returns {boolean} `true` if a `docs.category` property exists."," */","function hasMetaDocsCategory(metaPropertyNode) {","    const metaDocs = getPropertyFromObject(\"docs\", metaPropertyNode.value);","","    return metaDocs && getPropertyFromObject(\"category\", metaDocs.value);","}","","/**"," * Whether this `meta` ObjectExpression has a `docs.recommended` property defined or not."," *"," * @param {ASTNode} metaPropertyNode The `meta` ObjectExpression for this rule."," * @returns {boolean} `true` if a `docs.recommended` property exists."," */","function hasMetaDocsRecommended(metaPropertyNode) {","    const metaDocs = getPropertyFromObject(\"docs\", metaPropertyNode.value);","","    return metaDocs && getPropertyFromObject(\"recommended\", metaDocs.value);","}","","/**"," * Whether this `meta` ObjectExpression has a `schema` property defined or not."," *"," * @param {ASTNode} metaPropertyNode The `meta` ObjectExpression for this rule."," * @returns {boolean} `true` if a `schema` property exists."," */","function hasMetaSchema(metaPropertyNode) {","    return getPropertyFromObject(\"schema\", metaPropertyNode.value);","}","","/**"," * Checks the validity of the meta definition of this rule and reports any errors found."," *"," * @param {RuleContext} context The ESLint rule context."," * @param {ASTNode} exportsNode ObjectExpression node that the rule exports."," * @param {boolean} ruleIsFixable whether the rule is fixable or not."," * @returns {void}"," */","function checkMetaValidity(context, exportsNode) {","    const metaProperty = getMetaPropertyFromExportsNode(exportsNode);","","    if (!metaProperty) {","        context.report(exportsNode, \"Rule is missing a meta property.\");","        return;","    }","","    if (!hasMetaDocs(metaProperty)) {","        context.report(metaProperty, \"Rule is missing a meta.docs property.\");","        return;","    }","","    if (!hasMetaDocsDescription(metaProperty)) {","        context.report(metaProperty, \"Rule is missing a meta.docs.description property.\");","        return;","    }","","    if (!hasMetaDocsCategory(metaProperty)) {","        context.report(metaProperty, \"Rule is missing a meta.docs.category property.\");","        return;","    }","","    if (!hasMetaDocsRecommended(metaProperty)) {","        context.report(metaProperty, \"Rule is missing a meta.docs.recommended property.\");","        return;","    }","","    if (!hasMetaSchema(metaProperty)) {","        context.report(metaProperty, \"Rule is missing a meta.schema property.\");","    }","}","","/**"," * Whether this node is the correct format for a rule definition or not."," *"," * @param {ASTNode} node node that the rule exports."," * @returns {boolean} `true` if the exported node is the correct format for a rule definition"," */","function isCorrectExportsFormat(node) {","    return node.type === \"ObjectExpression\";","}","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","module.exports = {","    meta: {","        docs: {","            description: \"enforce correct use of `meta` property in core rules\",","            category: \"Internal\",","            recommended: false","        },","","        schema: []","    },","","    create(context) {","        let exportsNode;","","        return {","            AssignmentExpression(node) {","                if (node.left &&","                    node.right &&","                    node.left.type === \"MemberExpression\" &&","                    node.left.object.name === \"module\" &&","                    node.left.property.name === \"exports\") {","","                    exportsNode = node.right;","                }","            },","","            \"Program:exit\"() {","                if (!isCorrectExportsFormat(exportsNode)) {","                    context.report({ node: exportsNode, message: \"Rule does not export an Object. Make sure the rule follows the new rule format.\" });","                    return;","                }","","                checkMetaValidity(context, exportsNode);","            }","        };","    }","};",""],"l":{"19":1,"20":0,"22":0,"23":0,"24":0,"28":0,"37":1,"38":0,"47":1,"48":0,"57":1,"58":0,"60":0,"69":1,"70":0,"72":0,"81":1,"82":0,"84":0,"93":1,"94":0,"105":1,"106":0,"108":0,"109":0,"110":0,"113":0,"114":0,"115":0,"118":0,"119":0,"120":0,"123":0,"124":0,"125":0,"128":0,"129":0,"130":0,"133":0,"134":0,"144":1,"145":0,"152":1,"164":0,"166":0,"168":0,"174":0,"179":0,"180":0,"181":0,"184":0}}}