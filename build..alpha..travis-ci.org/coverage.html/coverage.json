{"/home/travis/build/npmtest/node-npmtest-eslint/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":2,"38":2,"39":1,"40":2,"41":2,"42":1,"43":2,"44":2,"45":1,"46":2,"47":2,"48":1,"49":1,"50":1,"51":1,"52":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1,1],"10":[1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":2,"9":2,"10":2,"11":2,"12":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":83},"end":{"line":105,"column":10}},"skip":true},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":77},"end":{"line":116,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":129,"loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":40}},"skip":true},"9":{"name":"(anonymous_9)","line":137,"loc":{"start":{"line":137,"column":77},"end":{"line":140,"column":10}},"skip":true},"10":{"name":"(anonymous_10)","line":148,"loc":{"start":{"line":148,"column":83},"end":{"line":151,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":159,"loc":{"start":{"line":159,"column":79},"end":{"line":162,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":170,"loc":{"start":{"line":170,"column":75},"end":{"line":173,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":185,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":184,"column":5}},"24":{"start":{"line":92,"column":8},"end":{"line":94,"column":63}},"25":{"start":{"line":95,"column":8},"end":{"line":95,"column":14}},"26":{"start":{"line":102,"column":8},"end":{"line":111,"column":10},"skip":true},"27":{"start":{"line":109,"column":12},"end":{"line":109,"column":55},"skip":true},"28":{"start":{"line":110,"column":12},"end":{"line":110,"column":48},"skip":true},"29":{"start":{"line":113,"column":8},"end":{"line":126,"column":10},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":76},"skip":true},"31":{"start":{"line":121,"column":12},"end":{"line":121,"column":73},"skip":true},"32":{"start":{"line":122,"column":12},"end":{"line":122,"column":74},"skip":true},"33":{"start":{"line":123,"column":12},"end":{"line":123,"column":79},"skip":true},"34":{"start":{"line":124,"column":12},"end":{"line":124,"column":25},"skip":true},"35":{"start":{"line":125,"column":12},"end":{"line":125,"column":45},"skip":true},"36":{"start":{"line":128,"column":8},"end":{"line":135,"column":14},"skip":true},"37":{"start":{"line":133,"column":16},"end":{"line":133,"column":29},"skip":true},"38":{"start":{"line":134,"column":16},"end":{"line":134,"column":55},"skip":true},"39":{"start":{"line":137,"column":8},"end":{"line":146,"column":10},"skip":true},"40":{"start":{"line":144,"column":12},"end":{"line":144,"column":25},"skip":true},"41":{"start":{"line":145,"column":12},"end":{"line":145,"column":45},"skip":true},"42":{"start":{"line":148,"column":8},"end":{"line":157,"column":10},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":25},"skip":true},"44":{"start":{"line":156,"column":12},"end":{"line":156,"column":48},"skip":true},"45":{"start":{"line":159,"column":8},"end":{"line":168,"column":10},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":25},"skip":true},"47":{"start":{"line":167,"column":12},"end":{"line":167,"column":46},"skip":true},"48":{"start":{"line":170,"column":8},"end":{"line":179,"column":10},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":94},"skip":true},"50":{"start":{"line":178,"column":12},"end":{"line":178,"column":48},"skip":true},"51":{"start":{"line":182,"column":8},"end":{"line":182,"column":35},"skip":true},"52":{"start":{"line":183,"column":8},"end":{"line":183,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":95,"column":14}},{"start":{"line":101,"column":4},"end":{"line":183,"column":14},"skip":true}]},"9":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":18},"end":{"line":92,"column":32}},{"start":{"line":93,"column":12},"end":{"line":93,"column":53}},{"start":{"line":94,"column":12},"end":{"line":94,"column":61}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":45},"end":{"line":102,"column":79},"skip":true},{"start":{"line":102,"column":83},"end":{"line":111,"column":9},"skip":true}]},"11":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":42},"end":{"line":113,"column":73},"skip":true},{"start":{"line":113,"column":77},"end":{"line":126,"column":9},"skip":true}]},"12":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":48},"end":{"line":128,"column":85},"skip":true},{"start":{"line":129,"column":12},"end":{"line":135,"column":13},"skip":true}]},"13":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":42},"end":{"line":137,"column":73},"skip":true},{"start":{"line":137,"column":77},"end":{"line":146,"column":9},"skip":true}]},"14":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":45},"end":{"line":148,"column":79},"skip":true},{"start":{"line":148,"column":83},"end":{"line":157,"column":9},"skip":true}]},"15":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":43},"end":{"line":159,"column":75},"skip":true},{"start":{"line":159,"column":79},"end":{"line":168,"column":9},"skip":true}]},"16":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":41},"end":{"line":170,"column":71},"skip":true},{"start":{"line":170,"column":75},"end":{"line":179,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_eslint */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"92":1,"95":1,"102":1,"109":1,"110":1,"113":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"128":1,"133":2,"134":2,"137":1,"144":2,"145":2,"148":1,"155":2,"156":2,"159":1,"166":2,"167":2,"170":1,"177":1,"178":1,"182":1,"183":1}},"/home/travis/build/npmtest/node-npmtest-eslint/lib.npmtest_eslint.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/lib.npmtest_eslint.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":51}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":57}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_eslint */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_eslint = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_eslint = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-eslint/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":0,"42":2,"43":2,"44":2,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,2],"16":[2,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":314,"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":325,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":324,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":294,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":302,"column":8},"end":{"line":302,"column":82},"skip":true},"70":{"start":{"line":305,"column":8},"end":{"line":307,"column":9},"skip":true},"71":{"start":{"line":306,"column":12},"end":{"line":306,"column":82},"skip":true},"72":{"start":{"line":309,"column":8},"end":{"line":311,"column":9},"skip":true},"73":{"start":{"line":310,"column":12},"end":{"line":310,"column":18},"skip":true},"74":{"start":{"line":312,"column":8},"end":{"line":312,"column":54},"skip":true},"75":{"start":{"line":313,"column":8},"end":{"line":313,"column":69},"skip":true},"76":{"start":{"line":314,"column":8},"end":{"line":322,"column":36},"skip":true},"77":{"start":{"line":315,"column":12},"end":{"line":315,"column":61},"skip":true},"78":{"start":{"line":316,"column":12},"end":{"line":319,"column":13},"skip":true},"79":{"start":{"line":317,"column":16},"end":{"line":317,"column":75},"skip":true},"80":{"start":{"line":318,"column":16},"end":{"line":318,"column":23},"skip":true},"81":{"start":{"line":320,"column":12},"end":{"line":320,"column":38},"skip":true},"82":{"start":{"line":321,"column":12},"end":{"line":321,"column":27},"skip":true},"83":{"start":{"line":323,"column":8},"end":{"line":323,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":50}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":323,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":64},"skip":true},{"start":{"line":296,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":43},"end":{"line":302,"column":75},"skip":true},{"start":{"line":302,"column":79},"end":{"line":302,"column":81},"skip":true}]},"25":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true},{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true}]},"26":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true},{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true}]},"27":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":27},"end":{"line":312,"column":43},"skip":true},{"start":{"line":312,"column":47},"end":{"line":312,"column":53},"skip":true}]},"28":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true},{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-eslint && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_eslint */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_eslint","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_eslint.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        local.assetsDict['/assets.npmtest_eslint.rollup.js'] =","            local.assetsDict['/assets.npmtest_eslint.rollup.js'] ||","            local.fs.readFileSync(","                // buildCustomOrg-hack","                local.npmtest_eslint.__dirname +","                    '/lib.npmtest_eslint.js',","                'utf8'","            ).replace((/^#!/), '//');","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":2,"127":2,"128":2,"129":2,"130":1,"133":2,"134":2,"139":2,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"294":1,"302":1,"305":1,"306":1,"309":1,"310":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"320":1,"321":1,"323":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/api.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/api.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":13,"column":2}}},"branchMap":{},"code":["/**"," * @fileoverview Expose out ESLint and CLI to require."," * @author Ian Christian Myers"," */","","\"use strict\";","","module.exports = {","    linter: require(\"./eslint\"),","    CLIEngine: require(\"./cli-engine\"),","    RuleTester: require(\"./testers/rule-tester\"),","    SourceCode: require(\"./util/source-code\")","};",""],"l":{"8":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/eslint.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/eslint.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":1,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1,"135":0,"136":0,"137":0,"138":0,"139":0,"140":1,"141":0,"142":0,"143":0,"144":0,"145":0,"146":1,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":1,"173":1,"174":0,"175":0,"176":0,"177":0,"178":0,"179":1,"180":0,"181":0,"182":0,"183":0,"184":1,"185":1,"186":0,"187":0,"188":0,"189":0,"190":0,"191":1,"192":0,"193":0,"194":0,"195":1,"196":1,"197":1,"198":1,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":1,"215":0,"216":0,"217":0,"218":0,"219":0,"220":1,"221":0,"222":0,"223":0,"224":1,"225":1,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":1,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":1,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":1,"342":0,"343":1,"344":1,"345":17,"346":17,"347":0,"348":0,"349":0,"350":1,"351":0,"352":1,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":1,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":1,"381":0,"382":0,"383":0,"384":1,"385":0,"386":1,"387":0,"388":0,"389":1,"390":0,"391":1,"392":0,"393":1,"394":1,"395":0,"396":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0,0,0,0,0,0,0],"28":[0,0],"29":[0,0,0],"30":[0,0],"31":[0,0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0,0],"78":[0,0],"79":[0,0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"fnMap":{"1":{"name":"parseBooleanConfig","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":45}}},"2":{"name":"parseJsonConfig","line":91,"loc":{"start":{"line":91,"column":0},"end":{"line":91,"column":53}}},"3":{"name":"parseListConfig","line":138,"loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":33}}},"4":{"name":"addDeclaredGlobals","line":163,"loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":58}}},"5":{"name":"disableReporting","line":253,"loc":{"start":{"line":253,"column":0},"end":{"line":253,"column":66}}},"6":{"name":"enableReporting","line":280,"loc":{"start":{"line":280,"column":0},"end":{"line":280,"column":64}}},"7":{"name":"modifyConfigsFromComments","line":321,"loc":{"start":{"line":321,"column":0},"end":{"line":321,"column":85}}},"8":{"name":"isDisabledByReportingConfig","line":408,"loc":{"start":{"line":408,"column":0},"end":{"line":408,"column":72}}},"9":{"name":"normalizeEcmaVersion","line":430,"loc":{"start":{"line":430,"column":0},"end":{"line":430,"column":53}}},"10":{"name":"prepareConfig","line":451,"loc":{"start":{"line":451,"column":0},"end":{"line":451,"column":31}}},"11":{"name":"createStubRule","line":514,"loc":{"start":{"line":514,"column":0},"end":{"line":514,"column":33}}},"12":{"name":"createRuleModule","line":521,"loc":{"start":{"line":521,"column":4},"end":{"line":521,"column":39}}},"13":{"name":"(anonymous_13)","line":523,"loc":{"start":{"line":523,"column":19},"end":{"line":523,"column":26}}},"14":{"name":"getRuleReplacementMessage","line":541,"loc":{"start":{"line":541,"column":0},"end":{"line":541,"column":43}}},"15":{"name":"findEslintEnv","line":558,"loc":{"start":{"line":558,"column":0},"end":{"line":558,"column":29}}},"16":{"name":"stripUnicodeBOM","line":576,"loc":{"start":{"line":576,"column":0},"end":{"line":576,"column":31}}},"17":{"name":"(anonymous_17)","line":597,"loc":{"start":{"line":597,"column":18},"end":{"line":597,"column":29}}},"18":{"name":"parse","line":620,"loc":{"start":{"line":620,"column":4},"end":{"line":620,"column":43}}},"19":{"name":"getRuleSeverity","line":693,"loc":{"start":{"line":693,"column":4},"end":{"line":693,"column":41}}},"20":{"name":"getRuleOptions","line":708,"loc":{"start":{"line":708,"column":4},"end":{"line":708,"column":40}}},"21":{"name":"(anonymous_21)","line":723,"loc":{"start":{"line":723,"column":16},"end":{"line":723,"column":27}}},"22":{"name":"(anonymous_22)","line":758,"loc":{"start":{"line":758,"column":17},"end":{"line":758,"column":82}}},"23":{"name":"(anonymous_23)","line":927,"loc":{"start":{"line":927,"column":21},"end":{"line":927,"column":36}}},"24":{"name":"(anonymous_24)","line":931,"loc":{"start":{"line":931,"column":21},"end":{"line":931,"column":28}}},"25":{"name":"(anonymous_25)","line":966,"loc":{"start":{"line":966,"column":17},"end":{"line":966,"column":86}}},"26":{"name":"(anonymous_26)","line":1035,"loc":{"start":{"line":1035,"column":24},"end":{"line":1035,"column":35}}},"27":{"name":"(anonymous_27)","line":1065,"loc":{"start":{"line":1065,"column":26},"end":{"line":1065,"column":50}}},"28":{"name":"(anonymous_28)","line":1077,"loc":{"start":{"line":1077,"column":23},"end":{"line":1077,"column":34}}},"29":{"name":"(anonymous_29)","line":1085,"loc":{"start":{"line":1085,"column":19},"end":{"line":1085,"column":30}}},"30":{"name":"(anonymous_30)","line":1131,"loc":{"start":{"line":1131,"column":29},"end":{"line":1131,"column":44}}},"31":{"name":"(anonymous_31)","line":1162,"loc":{"start":{"line":1162,"column":22},"end":{"line":1162,"column":33}}},"32":{"name":"(anonymous_32)","line":1176,"loc":{"start":{"line":1176,"column":40},"end":{"line":1176,"column":69}}},"33":{"name":"(anonymous_33)","line":1185,"loc":{"start":{"line":1185,"column":22},"end":{"line":1185,"column":46}}},"34":{"name":"(anonymous_34)","line":1195,"loc":{"start":{"line":1195,"column":19},"end":{"line":1195,"column":30}}},"35":{"name":"(anonymous_35)","line":1203,"loc":{"start":{"line":1203,"column":19},"end":{"line":1203,"column":30}}},"36":{"name":"(anonymous_36)","line":1228,"loc":{"start":{"line":1228,"column":31},"end":{"line":1228,"column":46}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":31,"column":37}},"2":{"start":{"line":57,"column":0},"end":{"line":82,"column":1}},"3":{"start":{"line":58,"column":4},"end":{"line":58,"column":21}},"4":{"start":{"line":61,"column":4},"end":{"line":61,"column":51}},"5":{"start":{"line":63,"column":4},"end":{"line":80,"column":7}},"6":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"7":{"start":{"line":65,"column":12},"end":{"line":65,"column":19}},"8":{"start":{"line":67,"column":8},"end":{"line":67,"column":38}},"9":{"start":{"line":68,"column":8},"end":{"line":68,"column":18}},"10":{"start":{"line":70,"column":8},"end":{"line":73,"column":9}},"11":{"start":{"line":71,"column":12},"end":{"line":71,"column":57}},"12":{"start":{"line":72,"column":12},"end":{"line":72,"column":42}},"13":{"start":{"line":75,"column":8},"end":{"line":78,"column":10}},"14":{"start":{"line":81,"column":4},"end":{"line":81,"column":17}},"15":{"start":{"line":91,"column":0},"end":{"line":131,"column":1}},"16":{"start":{"line":92,"column":4},"end":{"line":92,"column":19}},"17":{"start":{"line":95,"column":4},"end":{"line":108,"column":5}},"18":{"start":{"line":96,"column":8},"end":{"line":96,"column":51}},"19":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"20":{"start":{"line":103,"column":12},"end":{"line":103,"column":25}},"21":{"start":{"line":112,"column":4},"end":{"line":112,"column":15}},"22":{"start":{"line":113,"column":4},"end":{"line":113,"column":98}},"23":{"start":{"line":114,"column":4},"end":{"line":128,"column":5}},"24":{"start":{"line":115,"column":8},"end":{"line":115,"column":42}},"25":{"start":{"line":118,"column":8},"end":{"line":126,"column":11}},"26":{"start":{"line":130,"column":4},"end":{"line":130,"column":17}},"27":{"start":{"line":138,"column":0},"end":{"line":152,"column":1}},"28":{"start":{"line":139,"column":4},"end":{"line":139,"column":21}},"29":{"start":{"line":142,"column":4},"end":{"line":142,"column":45}},"30":{"start":{"line":144,"column":4},"end":{"line":150,"column":7}},"31":{"start":{"line":145,"column":8},"end":{"line":145,"column":27}},"32":{"start":{"line":146,"column":8},"end":{"line":148,"column":9}},"33":{"start":{"line":147,"column":12},"end":{"line":147,"column":19}},"34":{"start":{"line":149,"column":8},"end":{"line":149,"column":27}},"35":{"start":{"line":151,"column":4},"end":{"line":151,"column":17}},"36":{"start":{"line":163,"column":0},"end":{"line":243,"column":1}},"37":{"start":{"line":164,"column":4},"end":{"line":167,"column":46}},"38":{"start":{"line":169,"column":4},"end":{"line":169,"column":44}},"39":{"start":{"line":171,"column":4},"end":{"line":180,"column":7}},"40":{"start":{"line":172,"column":8},"end":{"line":179,"column":9}},"41":{"start":{"line":173,"column":12},"end":{"line":174,"column":56}},"42":{"start":{"line":176,"column":12},"end":{"line":178,"column":13}},"43":{"start":{"line":177,"column":16},"end":{"line":177,"column":67}},"44":{"start":{"line":182,"column":4},"end":{"line":182,"column":52}},"45":{"start":{"line":183,"column":4},"end":{"line":183,"column":51}},"46":{"start":{"line":184,"column":4},"end":{"line":184,"column":54}},"47":{"start":{"line":186,"column":4},"end":{"line":196,"column":7}},"48":{"start":{"line":187,"column":8},"end":{"line":187,"column":49}},"49":{"start":{"line":189,"column":8},"end":{"line":194,"column":9}},"50":{"start":{"line":190,"column":12},"end":{"line":190,"column":62}},"51":{"start":{"line":191,"column":12},"end":{"line":191,"column":50}},"52":{"start":{"line":192,"column":12},"end":{"line":192,"column":49}},"53":{"start":{"line":193,"column":12},"end":{"line":193,"column":48}},"54":{"start":{"line":195,"column":8},"end":{"line":195,"column":51}},"55":{"start":{"line":198,"column":4},"end":{"line":209,"column":7}},"56":{"start":{"line":199,"column":8},"end":{"line":199,"column":49}},"57":{"start":{"line":201,"column":8},"end":{"line":207,"column":9}},"58":{"start":{"line":202,"column":12},"end":{"line":202,"column":62}},"59":{"start":{"line":203,"column":12},"end":{"line":203,"column":49}},"60":{"start":{"line":204,"column":12},"end":{"line":204,"column":81}},"61":{"start":{"line":205,"column":12},"end":{"line":205,"column":49}},"62":{"start":{"line":206,"column":12},"end":{"line":206,"column":48}},"63":{"start":{"line":208,"column":8},"end":{"line":208,"column":57}},"64":{"start":{"line":212,"column":4},"end":{"line":218,"column":7}},"65":{"start":{"line":213,"column":8},"end":{"line":213,"column":51}},"66":{"start":{"line":215,"column":8},"end":{"line":217,"column":9}},"67":{"start":{"line":216,"column":12},"end":{"line":216,"column":39}},"68":{"start":{"line":225,"column":4},"end":{"line":242,"column":7}},"69":{"start":{"line":226,"column":8},"end":{"line":226,"column":47}},"70":{"start":{"line":227,"column":8},"end":{"line":227,"column":51}},"71":{"start":{"line":229,"column":8},"end":{"line":239,"column":9}},"72":{"start":{"line":235,"column":12},"end":{"line":235,"column":42}},"73":{"start":{"line":236,"column":12},"end":{"line":236,"column":48}},"74":{"start":{"line":238,"column":12},"end":{"line":238,"column":25}},"75":{"start":{"line":241,"column":8},"end":{"line":241,"column":20}},"76":{"start":{"line":253,"column":0},"end":{"line":270,"column":1}},"77":{"start":{"line":255,"column":4},"end":{"line":269,"column":5}},"78":{"start":{"line":256,"column":8},"end":{"line":262,"column":11}},"79":{"start":{"line":257,"column":12},"end":{"line":261,"column":15}},"80":{"start":{"line":264,"column":8},"end":{"line":268,"column":11}},"81":{"start":{"line":280,"column":0},"end":{"line":308,"column":1}},"82":{"start":{"line":281,"column":4},"end":{"line":281,"column":10}},"83":{"start":{"line":283,"column":4},"end":{"line":307,"column":5}},"84":{"start":{"line":284,"column":8},"end":{"line":291,"column":11}},"85":{"start":{"line":285,"column":12},"end":{"line":290,"column":13}},"86":{"start":{"line":286,"column":16},"end":{"line":289,"column":17}},"87":{"start":{"line":287,"column":20},"end":{"line":287,"column":51}},"88":{"start":{"line":288,"column":20},"end":{"line":288,"column":26}},"89":{"start":{"line":295,"column":8},"end":{"line":295,"column":22}},"90":{"start":{"line":297,"column":8},"end":{"line":306,"column":9}},"91":{"start":{"line":298,"column":12},"end":{"line":300,"column":13}},"92":{"start":{"line":299,"column":16},"end":{"line":299,"column":22}},"93":{"start":{"line":302,"column":12},"end":{"line":305,"column":13}},"94":{"start":{"line":303,"column":16},"end":{"line":303,"column":47}},"95":{"start":{"line":304,"column":16},"end":{"line":304,"column":53}},"96":{"start":{"line":321,"column":0},"end":{"line":399,"column":1}},"97":{"start":{"line":323,"column":4},"end":{"line":328,"column":6}},"98":{"start":{"line":329,"column":4},"end":{"line":329,"column":28}},"99":{"start":{"line":331,"column":4},"end":{"line":386,"column":7}},"100":{"start":{"line":333,"column":8},"end":{"line":333,"column":41}},"101":{"start":{"line":334,"column":8},"end":{"line":334,"column":81}},"102":{"start":{"line":336,"column":8},"end":{"line":385,"column":9}},"103":{"start":{"line":337,"column":12},"end":{"line":337,"column":67}},"104":{"start":{"line":339,"column":12},"end":{"line":384,"column":13}},"105":{"start":{"line":340,"column":16},"end":{"line":375,"column":17}},"106":{"start":{"line":342,"column":24},"end":{"line":342,"column":98}},"107":{"start":{"line":343,"column":24},"end":{"line":343,"column":30}},"108":{"start":{"line":347,"column":24},"end":{"line":347,"column":100}},"109":{"start":{"line":348,"column":24},"end":{"line":348,"column":30}},"110":{"start":{"line":351,"column":24},"end":{"line":351,"column":81}},"111":{"start":{"line":352,"column":24},"end":{"line":352,"column":30}},"112":{"start":{"line":355,"column":24},"end":{"line":355,"column":114}},"113":{"start":{"line":356,"column":24},"end":{"line":356,"column":30}},"114":{"start":{"line":359,"column":24},"end":{"line":359,"column":113}},"115":{"start":{"line":360,"column":24},"end":{"line":360,"column":30}},"116":{"start":{"line":363,"column":24},"end":{"line":363,"column":84}},"117":{"start":{"line":365,"column":24},"end":{"line":370,"column":27}},"118":{"start":{"line":366,"column":28},"end":{"line":366,"column":58}},"119":{"start":{"line":368,"column":28},"end":{"line":368,"column":121}},"120":{"start":{"line":369,"column":28},"end":{"line":369,"column":59}},"121":{"start":{"line":371,"column":24},"end":{"line":371,"column":30}},"122":{"start":{"line":377,"column":16},"end":{"line":383,"column":17}},"123":{"start":{"line":378,"column":20},"end":{"line":378,"column":136}},"124":{"start":{"line":379,"column":20},"end":{"line":379,"column":107}},"125":{"start":{"line":380,"column":23},"end":{"line":383,"column":17}},"126":{"start":{"line":381,"column":20},"end":{"line":381,"column":110}},"127":{"start":{"line":382,"column":20},"end":{"line":382,"column":128}},"128":{"start":{"line":389,"column":4},"end":{"line":395,"column":7}},"129":{"start":{"line":390,"column":8},"end":{"line":390,"column":43}},"130":{"start":{"line":392,"column":8},"end":{"line":394,"column":9}},"131":{"start":{"line":393,"column":12},"end":{"line":393,"column":64}},"132":{"start":{"line":396,"column":4},"end":{"line":396,"column":53}},"133":{"start":{"line":398,"column":4},"end":{"line":398,"column":50}},"134":{"start":{"line":408,"column":0},"end":{"line":422,"column":1}},"135":{"start":{"line":410,"column":4},"end":{"line":419,"column":5}},"136":{"start":{"line":412,"column":8},"end":{"line":412,"column":42}},"137":{"start":{"line":414,"column":8},"end":{"line":418,"column":9}},"138":{"start":{"line":417,"column":12},"end":{"line":417,"column":24}},"139":{"start":{"line":421,"column":4},"end":{"line":421,"column":17}},"140":{"start":{"line":430,"column":0},"end":{"line":444,"column":1}},"141":{"start":{"line":433,"column":4},"end":{"line":435,"column":5}},"142":{"start":{"line":434,"column":8},"end":{"line":434,"column":24}},"143":{"start":{"line":439,"column":4},"end":{"line":441,"column":5}},"144":{"start":{"line":440,"column":8},"end":{"line":440,"column":28}},"145":{"start":{"line":443,"column":4},"end":{"line":443,"column":23}},"146":{"start":{"line":451,"column":0},"end":{"line":507,"column":1}},"147":{"start":{"line":453,"column":4},"end":{"line":453,"column":59}},"148":{"start":{"line":454,"column":4},"end":{"line":454,"column":25}},"149":{"start":{"line":456,"column":4},"end":{"line":456,"column":27}},"150":{"start":{"line":457,"column":4},"end":{"line":457,"column":27}},"151":{"start":{"line":459,"column":4},"end":{"line":472,"column":5}},"152":{"start":{"line":460,"column":8},"end":{"line":471,"column":11}},"153":{"start":{"line":461,"column":12},"end":{"line":461,"column":41}},"154":{"start":{"line":463,"column":12},"end":{"line":465,"column":13}},"155":{"start":{"line":464,"column":16},"end":{"line":464,"column":67}},"156":{"start":{"line":466,"column":12},"end":{"line":470,"column":13}},"157":{"start":{"line":467,"column":16},"end":{"line":467,"column":46}},"158":{"start":{"line":469,"column":16},"end":{"line":469,"column":38}},"159":{"start":{"line":475,"column":4},"end":{"line":483,"column":5}},"160":{"start":{"line":476,"column":8},"end":{"line":482,"column":11}},"161":{"start":{"line":477,"column":12},"end":{"line":477,"column":50}},"162":{"start":{"line":479,"column":12},"end":{"line":481,"column":13}},"163":{"start":{"line":480,"column":16},"end":{"line":480,"column":82}},"164":{"start":{"line":485,"column":4},"end":{"line":492,"column":6}},"165":{"start":{"line":493,"column":4},"end":{"line":493,"column":74}},"166":{"start":{"line":495,"column":4},"end":{"line":502,"column":5}},"167":{"start":{"line":496,"column":8},"end":{"line":498,"column":9}},"168":{"start":{"line":497,"column":12},"end":{"line":497,"column":59}},"169":{"start":{"line":501,"column":8},"end":{"line":501,"column":71}},"170":{"start":{"line":504,"column":4},"end":{"line":504,"column":120}},"171":{"start":{"line":506,"column":4},"end":{"line":506,"column":26}},"172":{"start":{"line":514,"column":0},"end":{"line":534,"column":1}},"173":{"start":{"line":521,"column":4},"end":{"line":527,"column":5}},"174":{"start":{"line":522,"column":8},"end":{"line":526,"column":10}},"175":{"start":{"line":524,"column":16},"end":{"line":524,"column":46}},"176":{"start":{"line":529,"column":4},"end":{"line":531,"column":5}},"177":{"start":{"line":530,"column":8},"end":{"line":530,"column":32}},"178":{"start":{"line":532,"column":4},"end":{"line":532,"column":54}},"179":{"start":{"line":541,"column":0},"end":{"line":549,"column":1}},"180":{"start":{"line":542,"column":4},"end":{"line":546,"column":5}},"181":{"start":{"line":543,"column":8},"end":{"line":543,"column":52}},"182":{"start":{"line":545,"column":8},"end":{"line":545,"column":86}},"183":{"start":{"line":548,"column":4},"end":{"line":548,"column":16}},"184":{"start":{"line":551,"column":0},"end":{"line":551,"column":57}},"185":{"start":{"line":558,"column":0},"end":{"line":568,"column":1}},"186":{"start":{"line":559,"column":4},"end":{"line":559,"column":20}},"187":{"start":{"line":561,"column":4},"end":{"line":561,"column":35}},"188":{"start":{"line":563,"column":4},"end":{"line":565,"column":5}},"189":{"start":{"line":564,"column":8},"end":{"line":564,"column":68}},"190":{"start":{"line":567,"column":4},"end":{"line":567,"column":16}},"191":{"start":{"line":576,"column":0},"end":{"line":587,"column":1}},"192":{"start":{"line":583,"column":4},"end":{"line":585,"column":5}},"193":{"start":{"line":584,"column":8},"end":{"line":584,"column":29}},"194":{"start":{"line":586,"column":4},"end":{"line":586,"column":16}},"195":{"start":{"line":597,"column":0},"end":{"line":1234,"column":5}},"196":{"start":{"line":599,"column":4},"end":{"line":599,"column":50}},"197":{"start":{"line":600,"column":4},"end":{"line":607,"column":26}},"198":{"start":{"line":620,"column":4},"end":{"line":685,"column":5}},"199":{"start":{"line":622,"column":8},"end":{"line":631,"column":14}},"200":{"start":{"line":633,"column":8},"end":{"line":647,"column":9}},"201":{"start":{"line":634,"column":12},"end":{"line":634,"column":44}},"202":{"start":{"line":636,"column":12},"end":{"line":644,"column":15}},"203":{"start":{"line":646,"column":12},"end":{"line":646,"column":24}},"204":{"start":{"line":650,"column":8},"end":{"line":652,"column":9}},"205":{"start":{"line":651,"column":12},"end":{"line":651,"column":83}},"206":{"start":{"line":660,"column":8},"end":{"line":684,"column":9}},"207":{"start":{"line":661,"column":12},"end":{"line":663,"column":13}},"208":{"start":{"line":662,"column":16},"end":{"line":662,"column":66}},"209":{"start":{"line":664,"column":12},"end":{"line":664,"column":53}},"210":{"start":{"line":669,"column":12},"end":{"line":669,"column":73}},"211":{"start":{"line":670,"column":12},"end":{"line":670,"column":99}},"212":{"start":{"line":672,"column":12},"end":{"line":681,"column":15}},"213":{"start":{"line":683,"column":12},"end":{"line":683,"column":24}},"214":{"start":{"line":693,"column":4},"end":{"line":701,"column":5}},"215":{"start":{"line":694,"column":8},"end":{"line":698,"column":9}},"216":{"start":{"line":695,"column":12},"end":{"line":695,"column":30}},"217":{"start":{"line":696,"column":15},"end":{"line":698,"column":9}},"218":{"start":{"line":697,"column":12},"end":{"line":697,"column":33}},"219":{"start":{"line":699,"column":8},"end":{"line":699,"column":17}},"220":{"start":{"line":708,"column":4},"end":{"line":714,"column":5}},"221":{"start":{"line":709,"column":8},"end":{"line":711,"column":9}},"222":{"start":{"line":710,"column":12},"end":{"line":710,"column":39}},"223":{"start":{"line":712,"column":8},"end":{"line":712,"column":18}},"224":{"start":{"line":717,"column":4},"end":{"line":717,"column":27}},"225":{"start":{"line":723,"column":4},"end":{"line":732,"column":6}},"226":{"start":{"line":724,"column":8},"end":{"line":724,"column":34}},"227":{"start":{"line":725,"column":8},"end":{"line":725,"column":22}},"228":{"start":{"line":726,"column":8},"end":{"line":726,"column":29}},"229":{"start":{"line":727,"column":8},"end":{"line":727,"column":29}},"230":{"start":{"line":728,"column":8},"end":{"line":728,"column":28}},"231":{"start":{"line":729,"column":8},"end":{"line":729,"column":25}},"232":{"start":{"line":730,"column":8},"end":{"line":730,"column":29}},"233":{"start":{"line":731,"column":8},"end":{"line":731,"column":26}},"234":{"start":{"line":758,"column":4},"end":{"line":949,"column":6}},"235":{"start":{"line":759,"column":8},"end":{"line":759,"column":86}},"236":{"start":{"line":760,"column":8},"end":{"line":763,"column":30}},"237":{"start":{"line":766,"column":8},"end":{"line":772,"column":9}},"238":{"start":{"line":767,"column":12},"end":{"line":767,"column":57}},"239":{"start":{"line":768,"column":12},"end":{"line":768,"column":68}},"240":{"start":{"line":769,"column":12},"end":{"line":769,"column":52}},"241":{"start":{"line":771,"column":12},"end":{"line":771,"column":48}},"242":{"start":{"line":774,"column":8},"end":{"line":776,"column":9}},"243":{"start":{"line":775,"column":12},"end":{"line":775,"column":25}},"244":{"start":{"line":779,"column":8},"end":{"line":779,"column":71}},"245":{"start":{"line":781,"column":8},"end":{"line":781,"column":43}},"246":{"start":{"line":783,"column":8},"end":{"line":789,"column":9}},"247":{"start":{"line":784,"column":12},"end":{"line":788,"column":13}},"248":{"start":{"line":785,"column":16},"end":{"line":785,"column":70}},"249":{"start":{"line":787,"column":16},"end":{"line":787,"column":39}},"250":{"start":{"line":792,"column":8},"end":{"line":792,"column":39}},"251":{"start":{"line":795,"column":8},"end":{"line":827,"column":9}},"252":{"start":{"line":798,"column":12},"end":{"line":801,"column":13}},"253":{"start":{"line":799,"column":16},"end":{"line":799,"column":66}},"254":{"start":{"line":800,"column":16},"end":{"line":800,"column":32}},"255":{"start":{"line":803,"column":12},"end":{"line":810,"column":14}},"256":{"start":{"line":805,"column":20},"end":{"line":805,"column":39}},"257":{"start":{"line":806,"column":20},"end":{"line":806,"column":43}},"258":{"start":{"line":813,"column":12},"end":{"line":818,"column":13}},"259":{"start":{"line":814,"column":16},"end":{"line":814,"column":38}},"260":{"start":{"line":816,"column":16},"end":{"line":816,"column":34}},"261":{"start":{"line":817,"column":16},"end":{"line":817,"column":35}},"262":{"start":{"line":820,"column":12},"end":{"line":822,"column":13}},"263":{"start":{"line":821,"column":16},"end":{"line":821,"column":55}},"264":{"start":{"line":825,"column":12},"end":{"line":825,"column":42}},"265":{"start":{"line":826,"column":12},"end":{"line":826,"column":33}},"266":{"start":{"line":830,"column":8},"end":{"line":935,"column":9}},"267":{"start":{"line":833,"column":12},"end":{"line":835,"column":13}},"268":{"start":{"line":834,"column":16},"end":{"line":834,"column":108}},"269":{"start":{"line":838,"column":12},"end":{"line":838,"column":40}},"270":{"start":{"line":841,"column":12},"end":{"line":882,"column":15}},"271":{"start":{"line":841,"column":52},"end":{"line":841,"column":90}},"272":{"start":{"line":842,"column":16},"end":{"line":842,"column":32}},"273":{"start":{"line":844,"column":16},"end":{"line":844,"column":45}},"274":{"start":{"line":846,"column":16},"end":{"line":855,"column":17}},"275":{"start":{"line":847,"column":20},"end":{"line":847,"column":74}},"276":{"start":{"line":849,"column":20},"end":{"line":853,"column":21}},"277":{"start":{"line":850,"column":24},"end":{"line":850,"column":69}},"278":{"start":{"line":852,"column":24},"end":{"line":852,"column":99}},"279":{"start":{"line":854,"column":20},"end":{"line":854,"column":51}},"280":{"start":{"line":857,"column":16},"end":{"line":857,"column":68}},"281":{"start":{"line":858,"column":16},"end":{"line":858,"column":66}},"282":{"start":{"line":860,"column":16},"end":{"line":881,"column":17}},"283":{"start":{"line":861,"column":20},"end":{"line":866,"column":22}},"284":{"start":{"line":868,"column":20},"end":{"line":869,"column":51}},"285":{"start":{"line":872,"column":20},"end":{"line":877,"column":23}},"286":{"start":{"line":873,"column":24},"end":{"line":876,"column":26}},"287":{"start":{"line":879,"column":20},"end":{"line":879,"column":84}},"288":{"start":{"line":880,"column":20},"end":{"line":880,"column":29}},"289":{"start":{"line":885,"column":12},"end":{"line":885,"column":35}},"290":{"start":{"line":886,"column":12},"end":{"line":886,"column":40}},"291":{"start":{"line":888,"column":12},"end":{"line":888,"column":80}},"292":{"start":{"line":889,"column":12},"end":{"line":889,"column":77}},"293":{"start":{"line":892,"column":12},"end":{"line":899,"column":15}},"294":{"start":{"line":901,"column":12},"end":{"line":901,"column":48}},"295":{"start":{"line":904,"column":12},"end":{"line":904,"column":69}},"296":{"start":{"line":907,"column":12},"end":{"line":913,"column":13}},"297":{"start":{"line":908,"column":16},"end":{"line":908,"column":42}},"298":{"start":{"line":910,"column":16},"end":{"line":912,"column":17}},"299":{"start":{"line":911,"column":20},"end":{"line":911,"column":61}},"300":{"start":{"line":915,"column":12},"end":{"line":915,"column":61}},"301":{"start":{"line":917,"column":12},"end":{"line":917,"column":66}},"302":{"start":{"line":918,"column":12},"end":{"line":918,"column":83}},"303":{"start":{"line":926,"column":12},"end":{"line":934,"column":15}},"304":{"start":{"line":928,"column":20},"end":{"line":928,"column":41}},"305":{"start":{"line":929,"column":20},"end":{"line":929,"column":51}},"306":{"start":{"line":932,"column":20},"end":{"line":932,"column":51}},"307":{"start":{"line":938,"column":8},"end":{"line":946,"column":11}},"308":{"start":{"line":939,"column":12},"end":{"line":939,"column":45}},"309":{"start":{"line":941,"column":12},"end":{"line":943,"column":13}},"310":{"start":{"line":942,"column":16},"end":{"line":942,"column":43}},"311":{"start":{"line":944,"column":12},"end":{"line":944,"column":28}},"312":{"start":{"line":948,"column":8},"end":{"line":948,"column":24}},"313":{"start":{"line":966,"column":4},"end":{"line":1029,"column":6}},"314":{"start":{"line":967,"column":8},"end":{"line":969,"column":9}},"315":{"start":{"line":968,"column":12},"end":{"line":968,"column":80}},"316":{"start":{"line":971,"column":8},"end":{"line":979,"column":9}},"317":{"start":{"line":972,"column":12},"end":{"line":972,"column":102}},"318":{"start":{"line":974,"column":12},"end":{"line":974,"column":23}},"319":{"start":{"line":975,"column":12},"end":{"line":975,"column":23}},"320":{"start":{"line":976,"column":12},"end":{"line":976,"column":27}},"321":{"start":{"line":977,"column":12},"end":{"line":977,"column":31}},"322":{"start":{"line":978,"column":12},"end":{"line":978,"column":38}},"323":{"start":{"line":982,"column":8},"end":{"line":982,"column":41}},"324":{"start":{"line":984,"column":8},"end":{"line":984,"column":46}},"325":{"start":{"line":986,"column":8},"end":{"line":988,"column":9}},"326":{"start":{"line":987,"column":12},"end":{"line":987,"column":19}},"327":{"start":{"line":990,"column":8},"end":{"line":999,"column":9}},"328":{"start":{"line":991,"column":12},"end":{"line":998,"column":15}},"329":{"start":{"line":992,"column":16},"end":{"line":994,"column":17}},"330":{"start":{"line":993,"column":20},"end":{"line":993,"column":38}},"331":{"start":{"line":997,"column":16},"end":{"line":997,"column":33}},"332":{"start":{"line":1001,"column":8},"end":{"line":1009,"column":10}},"333":{"start":{"line":1012,"column":8},"end":{"line":1015,"column":9}},"334":{"start":{"line":1013,"column":12},"end":{"line":1013,"column":47}},"335":{"start":{"line":1014,"column":12},"end":{"line":1014,"column":55}},"336":{"start":{"line":1018,"column":8},"end":{"line":1026,"column":9}},"337":{"start":{"line":1021,"column":12},"end":{"line":1023,"column":13}},"338":{"start":{"line":1022,"column":16},"end":{"line":1022,"column":90}},"339":{"start":{"line":1025,"column":12},"end":{"line":1025,"column":30}},"340":{"start":{"line":1028,"column":8},"end":{"line":1028,"column":31}},"341":{"start":{"line":1035,"column":4},"end":{"line":1037,"column":6}},"342":{"start":{"line":1036,"column":8},"end":{"line":1036,"column":26}},"343":{"start":{"line":1040,"column":4},"end":{"line":1058,"column":6}},"344":{"start":{"line":1061,"column":4},"end":{"line":1071,"column":7}},"345":{"start":{"line":1062,"column":8},"end":{"line":1062,"column":57}},"346":{"start":{"line":1065,"column":8},"end":{"line":1070,"column":10}},"347":{"start":{"line":1066,"column":12},"end":{"line":1068,"column":13}},"348":{"start":{"line":1067,"column":16},"end":{"line":1067,"column":63}},"349":{"start":{"line":1069,"column":12},"end":{"line":1069,"column":24}},"350":{"start":{"line":1077,"column":4},"end":{"line":1079,"column":6}},"351":{"start":{"line":1078,"column":8},"end":{"line":1078,"column":35}},"352":{"start":{"line":1085,"column":4},"end":{"line":1123,"column":6}},"353":{"start":{"line":1086,"column":8},"end":{"line":1086,"column":44}},"354":{"start":{"line":1089,"column":8},"end":{"line":1120,"column":9}},"355":{"start":{"line":1092,"column":12},"end":{"line":1092,"column":48}},"356":{"start":{"line":1094,"column":12},"end":{"line":1102,"column":13}},"357":{"start":{"line":1095,"column":16},"end":{"line":1097,"column":17}},"358":{"start":{"line":1096,"column":20},"end":{"line":1096,"column":42}},"359":{"start":{"line":1099,"column":16},"end":{"line":1101,"column":17}},"360":{"start":{"line":1100,"column":20},"end":{"line":1100,"column":42}},"361":{"start":{"line":1105,"column":12},"end":{"line":1118,"column":13}},"362":{"start":{"line":1108,"column":16},"end":{"line":1108,"column":69}},"363":{"start":{"line":1110,"column":16},"end":{"line":1116,"column":17}},"364":{"start":{"line":1111,"column":20},"end":{"line":1113,"column":21}},"365":{"start":{"line":1112,"column":24},"end":{"line":1112,"column":52}},"366":{"start":{"line":1114,"column":20},"end":{"line":1114,"column":33}},"367":{"start":{"line":1122,"column":8},"end":{"line":1122,"column":32}},"368":{"start":{"line":1131,"column":4},"end":{"line":1155,"column":6}},"369":{"start":{"line":1132,"column":8},"end":{"line":1133,"column":98}},"370":{"start":{"line":1134,"column":8},"end":{"line":1136,"column":16}},"371":{"start":{"line":1139,"column":8},"end":{"line":1141,"column":9}},"372":{"start":{"line":1140,"column":12},"end":{"line":1140,"column":41}},"373":{"start":{"line":1143,"column":8},"end":{"line":1152,"column":40}},"374":{"start":{"line":1144,"column":12},"end":{"line":1144,"column":46}},"375":{"start":{"line":1146,"column":12},"end":{"line":1151,"column":13}},"376":{"start":{"line":1147,"column":16},"end":{"line":1150,"column":17}},"377":{"start":{"line":1148,"column":20},"end":{"line":1148,"column":51}},"378":{"start":{"line":1149,"column":20},"end":{"line":1149,"column":32}},"379":{"start":{"line":1154,"column":8},"end":{"line":1154,"column":21}},"380":{"start":{"line":1162,"column":4},"end":{"line":1168,"column":6}},"381":{"start":{"line":1163,"column":8},"end":{"line":1165,"column":9}},"382":{"start":{"line":1164,"column":12},"end":{"line":1164,"column":35}},"383":{"start":{"line":1166,"column":8},"end":{"line":1166,"column":25}},"384":{"start":{"line":1176,"column":4},"end":{"line":1178,"column":6}},"385":{"start":{"line":1177,"column":8},"end":{"line":1177,"column":41}},"386":{"start":{"line":1185,"column":4},"end":{"line":1189,"column":6}},"387":{"start":{"line":1186,"column":8},"end":{"line":1188,"column":11}},"388":{"start":{"line":1187,"column":12},"end":{"line":1187,"column":54}},"389":{"start":{"line":1195,"column":4},"end":{"line":1197,"column":6}},"390":{"start":{"line":1196,"column":8},"end":{"line":1196,"column":53}},"391":{"start":{"line":1203,"column":4},"end":{"line":1205,"column":6}},"392":{"start":{"line":1204,"column":8},"end":{"line":1204,"column":41}},"393":{"start":{"line":1207,"column":4},"end":{"line":1207,"column":30}},"394":{"start":{"line":1228,"column":4},"end":{"line":1230,"column":6}},"395":{"start":{"line":1229,"column":8},"end":{"line":1229,"column":79}},"396":{"start":{"line":1232,"column":4},"end":{"line":1232,"column":15}}},"branchMap":{"1":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"2":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"3":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":44}},{"start":{"line":96,"column":48},"end":{"line":96,"column":50}}]},"4":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":102,"column":8}},{"start":{"line":102,"column":8},"end":{"line":102,"column":8}}]},"5":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":8}},{"start":{"line":146,"column":8},"end":{"line":146,"column":8}}]},"6":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":8},"end":{"line":172,"column":8}},{"start":{"line":172,"column":8},"end":{"line":172,"column":8}}]},"7":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":37},"end":{"line":174,"column":40}},{"start":{"line":174,"column":44},"end":{"line":174,"column":55}}]},"8":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":12},"end":{"line":176,"column":12}},{"start":{"line":176,"column":12},"end":{"line":176,"column":12}}]},"9":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":8},"end":{"line":189,"column":8}},{"start":{"line":189,"column":8},"end":{"line":189,"column":8}}]},"10":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":8},"end":{"line":201,"column":8}},{"start":{"line":201,"column":8},"end":{"line":201,"column":8}}]},"11":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":8},"end":{"line":215,"column":8}},{"start":{"line":215,"column":8},"end":{"line":215,"column":8}}]},"12":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":8},"end":{"line":229,"column":8}},{"start":{"line":229,"column":8},"end":{"line":229,"column":8}}]},"13":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":4},"end":{"line":255,"column":4}},{"start":{"line":255,"column":4},"end":{"line":255,"column":4}}]},"14":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":4},"end":{"line":283,"column":4}},{"start":{"line":283,"column":4},"end":{"line":283,"column":4}}]},"15":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":16},"end":{"line":286,"column":16}},{"start":{"line":286,"column":16},"end":{"line":286,"column":16}}]},"16":{"line":286,"type":"binary-expr","locations":[{"start":{"line":286,"column":20},"end":{"line":286,"column":43}},{"start":{"line":286,"column":47},"end":{"line":286,"column":79}}]},"17":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":12},"end":{"line":298,"column":12}},{"start":{"line":298,"column":12},"end":{"line":298,"column":12}}]},"18":{"line":298,"type":"binary-expr","locations":[{"start":{"line":298,"column":16},"end":{"line":298,"column":25}},{"start":{"line":298,"column":29},"end":{"line":298,"column":67}}]},"19":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":12},"end":{"line":302,"column":12}},{"start":{"line":302,"column":12},"end":{"line":302,"column":12}}]},"20":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":8},"end":{"line":336,"column":8}},{"start":{"line":336,"column":8},"end":{"line":336,"column":8}}]},"21":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":12},"end":{"line":339,"column":12}},{"start":{"line":339,"column":12},"end":{"line":339,"column":12}}]},"22":{"line":340,"type":"switch","locations":[{"start":{"line":341,"column":20},"end":{"line":343,"column":30}},{"start":{"line":345,"column":20},"end":{"line":345,"column":35}},{"start":{"line":346,"column":20},"end":{"line":348,"column":30}},{"start":{"line":350,"column":20},"end":{"line":352,"column":30}},{"start":{"line":354,"column":20},"end":{"line":356,"column":30}},{"start":{"line":358,"column":20},"end":{"line":360,"column":30}},{"start":{"line":362,"column":20},"end":{"line":372,"column":21}}]},"23":{"line":377,"type":"if","locations":[{"start":{"line":377,"column":16},"end":{"line":377,"column":16}},{"start":{"line":377,"column":16},"end":{"line":377,"column":16}}]},"24":{"line":380,"type":"if","locations":[{"start":{"line":380,"column":23},"end":{"line":380,"column":23}},{"start":{"line":380,"column":23},"end":{"line":380,"column":23}}]},"25":{"line":392,"type":"if","locations":[{"start":{"line":392,"column":8},"end":{"line":392,"column":8}},{"start":{"line":392,"column":8},"end":{"line":392,"column":8}}]},"26":{"line":414,"type":"if","locations":[{"start":{"line":414,"column":8},"end":{"line":414,"column":8}},{"start":{"line":414,"column":8},"end":{"line":414,"column":8}}]},"27":{"line":414,"type":"binary-expr","locations":[{"start":{"line":414,"column":13},"end":{"line":414,"column":25}},{"start":{"line":414,"column":29},"end":{"line":414,"column":51}},{"start":{"line":415,"column":13},"end":{"line":415,"column":46}},{"start":{"line":415,"column":51},"end":{"line":415,"column":86}},{"start":{"line":415,"column":90},"end":{"line":415,"column":128}},{"start":{"line":416,"column":13},"end":{"line":416,"column":24}},{"start":{"line":416,"column":29},"end":{"line":416,"column":60}},{"start":{"line":416,"column":65},"end":{"line":416,"column":98}},{"start":{"line":416,"column":102},"end":{"line":416,"column":138}}]},"28":{"line":433,"type":"if","locations":[{"start":{"line":433,"column":4},"end":{"line":433,"column":4}},{"start":{"line":433,"column":4},"end":{"line":433,"column":4}}]},"29":{"line":433,"type":"binary-expr","locations":[{"start":{"line":433,"column":8},"end":{"line":433,"column":16}},{"start":{"line":433,"column":21},"end":{"line":433,"column":33}},{"start":{"line":433,"column":37},"end":{"line":433,"column":52}}]},"30":{"line":439,"type":"if","locations":[{"start":{"line":439,"column":4},"end":{"line":439,"column":4}},{"start":{"line":439,"column":4},"end":{"line":439,"column":4}}]},"31":{"line":453,"type":"binary-expr","locations":[{"start":{"line":453,"column":21},"end":{"line":453,"column":35}},{"start":{"line":453,"column":39},"end":{"line":453,"column":52}},{"start":{"line":453,"column":56},"end":{"line":453,"column":58}}]},"32":{"line":459,"type":"if","locations":[{"start":{"line":459,"column":4},"end":{"line":459,"column":4}},{"start":{"line":459,"column":4},"end":{"line":459,"column":4}}]},"33":{"line":463,"type":"if","locations":[{"start":{"line":463,"column":12},"end":{"line":463,"column":12}},{"start":{"line":463,"column":12},"end":{"line":463,"column":12}}]},"34":{"line":466,"type":"if","locations":[{"start":{"line":466,"column":12},"end":{"line":466,"column":12}},{"start":{"line":466,"column":12},"end":{"line":466,"column":12}}]},"35":{"line":475,"type":"if","locations":[{"start":{"line":475,"column":4},"end":{"line":475,"column":4}},{"start":{"line":475,"column":4},"end":{"line":475,"column":4}}]},"36":{"line":479,"type":"if","locations":[{"start":{"line":479,"column":12},"end":{"line":479,"column":12}},{"start":{"line":479,"column":12},"end":{"line":479,"column":12}}]},"37":{"line":479,"type":"binary-expr","locations":[{"start":{"line":479,"column":16},"end":{"line":479,"column":35}},{"start":{"line":479,"column":39},"end":{"line":479,"column":42}},{"start":{"line":479,"column":46},"end":{"line":479,"column":63}}]},"38":{"line":487,"type":"binary-expr","locations":[{"start":{"line":487,"column":16},"end":{"line":487,"column":29}},{"start":{"line":487,"column":33},"end":{"line":487,"column":47}}]},"39":{"line":489,"type":"binary-expr","locations":[{"start":{"line":489,"column":33},"end":{"line":489,"column":43}},{"start":{"line":489,"column":47},"end":{"line":489,"column":49}}]},"40":{"line":490,"type":"binary-expr","locations":[{"start":{"line":490,"column":38},"end":{"line":490,"column":53}},{"start":{"line":490,"column":57},"end":{"line":490,"column":59}}]},"41":{"line":491,"type":"binary-expr","locations":[{"start":{"line":491,"column":54},"end":{"line":491,"column":74}},{"start":{"line":491,"column":78},"end":{"line":491,"column":80}}]},"42":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":4},"end":{"line":495,"column":4}},{"start":{"line":495,"column":4},"end":{"line":495,"column":4}}]},"43":{"line":496,"type":"if","locations":[{"start":{"line":496,"column":8},"end":{"line":496,"column":8}},{"start":{"line":496,"column":8},"end":{"line":496,"column":8}}]},"44":{"line":529,"type":"if","locations":[{"start":{"line":529,"column":4},"end":{"line":529,"column":4}},{"start":{"line":529,"column":4},"end":{"line":529,"column":4}}]},"45":{"line":542,"type":"if","locations":[{"start":{"line":542,"column":4},"end":{"line":542,"column":4}},{"start":{"line":542,"column":4},"end":{"line":542,"column":4}}]},"46":{"line":564,"type":"binary-expr","locations":[{"start":{"line":564,"column":29},"end":{"line":564,"column":33}},{"start":{"line":564,"column":37},"end":{"line":564,"column":39}}]},"47":{"line":583,"type":"if","locations":[{"start":{"line":583,"column":4},"end":{"line":583,"column":4}},{"start":{"line":583,"column":4},"end":{"line":583,"column":4}}]},"48":{"line":650,"type":"if","locations":[{"start":{"line":650,"column":8},"end":{"line":650,"column":8}},{"start":{"line":650,"column":8},"end":{"line":650,"column":8}}]},"49":{"line":661,"type":"if","locations":[{"start":{"line":661,"column":12},"end":{"line":661,"column":12}},{"start":{"line":661,"column":12},"end":{"line":661,"column":12}}]},"50":{"line":670,"type":"cond-expr","locations":[{"start":{"line":670,"column":45},"end":{"line":670,"column":91}},{"start":{"line":670,"column":94},"end":{"line":670,"column":98}}]},"51":{"line":694,"type":"if","locations":[{"start":{"line":694,"column":8},"end":{"line":694,"column":8}},{"start":{"line":694,"column":8},"end":{"line":694,"column":8}}]},"52":{"line":696,"type":"if","locations":[{"start":{"line":696,"column":15},"end":{"line":696,"column":15}},{"start":{"line":696,"column":15},"end":{"line":696,"column":15}}]},"53":{"line":709,"type":"if","locations":[{"start":{"line":709,"column":8},"end":{"line":709,"column":8}},{"start":{"line":709,"column":8},"end":{"line":709,"column":8}}]},"54":{"line":759,"type":"cond-expr","locations":[{"start":{"line":759,"column":62},"end":{"line":759,"column":78}},{"start":{"line":759,"column":81},"end":{"line":759,"column":85}}]},"55":{"line":766,"type":"if","locations":[{"start":{"line":766,"column":8},"end":{"line":766,"column":8}},{"start":{"line":766,"column":8},"end":{"line":766,"column":8}}]},"56":{"line":774,"type":"if","locations":[{"start":{"line":774,"column":8},"end":{"line":774,"column":8}},{"start":{"line":774,"column":8},"end":{"line":774,"column":8}}]},"57":{"line":779,"type":"binary-expr","locations":[{"start":{"line":779,"column":40},"end":{"line":779,"column":44}},{"start":{"line":779,"column":48},"end":{"line":779,"column":69}}]},"58":{"line":783,"type":"if","locations":[{"start":{"line":783,"column":8},"end":{"line":783,"column":8}},{"start":{"line":783,"column":8},"end":{"line":783,"column":8}}]},"59":{"line":784,"type":"if","locations":[{"start":{"line":784,"column":12},"end":{"line":784,"column":12}},{"start":{"line":784,"column":12},"end":{"line":784,"column":12}}]},"60":{"line":795,"type":"if","locations":[{"start":{"line":795,"column":8},"end":{"line":795,"column":8}},{"start":{"line":795,"column":8},"end":{"line":795,"column":8}}]},"61":{"line":798,"type":"if","locations":[{"start":{"line":798,"column":12},"end":{"line":798,"column":12}},{"start":{"line":798,"column":12},"end":{"line":798,"column":12}}]},"62":{"line":813,"type":"if","locations":[{"start":{"line":813,"column":12},"end":{"line":813,"column":12}},{"start":{"line":813,"column":12},"end":{"line":813,"column":12}}]},"63":{"line":813,"type":"binary-expr","locations":[{"start":{"line":813,"column":16},"end":{"line":813,"column":27}},{"start":{"line":813,"column":31},"end":{"line":813,"column":46}}]},"64":{"line":820,"type":"if","locations":[{"start":{"line":820,"column":12},"end":{"line":820,"column":12}},{"start":{"line":820,"column":12},"end":{"line":820,"column":12}}]},"65":{"line":830,"type":"if","locations":[{"start":{"line":830,"column":8},"end":{"line":830,"column":8}},{"start":{"line":830,"column":8},"end":{"line":830,"column":8}}]},"66":{"line":833,"type":"if","locations":[{"start":{"line":833,"column":12},"end":{"line":833,"column":12}},{"start":{"line":833,"column":12},"end":{"line":833,"column":12}}]},"67":{"line":846,"type":"if","locations":[{"start":{"line":846,"column":16},"end":{"line":846,"column":16}},{"start":{"line":846,"column":16},"end":{"line":846,"column":16}}]},"68":{"line":849,"type":"if","locations":[{"start":{"line":849,"column":20},"end":{"line":849,"column":20}},{"start":{"line":849,"column":20},"end":{"line":849,"column":20}}]},"69":{"line":865,"type":"cond-expr","locations":[{"start":{"line":865,"column":63},"end":{"line":865,"column":83}},{"start":{"line":865,"column":86},"end":{"line":865,"column":88}}]},"70":{"line":865,"type":"binary-expr","locations":[{"start":{"line":865,"column":25},"end":{"line":865,"column":36}},{"start":{"line":865,"column":40},"end":{"line":865,"column":60}}]},"71":{"line":868,"type":"cond-expr","locations":[{"start":{"line":868,"column":54},"end":{"line":868,"column":85}},{"start":{"line":869,"column":26},"end":{"line":869,"column":50}}]},"72":{"line":873,"type":"cond-expr","locations":[{"start":{"line":874,"column":30},"end":{"line":874,"column":62}},{"start":{"line":875,"column":30},"end":{"line":875,"column":44}}]},"73":{"line":888,"type":"binary-expr","locations":[{"start":{"line":888,"column":33},"end":{"line":888,"column":73}},{"start":{"line":888,"column":77},"end":{"line":888,"column":79}}]},"74":{"line":889,"type":"binary-expr","locations":[{"start":{"line":889,"column":32},"end":{"line":889,"column":71}},{"start":{"line":889,"column":75},"end":{"line":889,"column":76}}]},"75":{"line":897,"type":"binary-expr","locations":[{"start":{"line":897,"column":28},"end":{"line":897,"column":66}},{"start":{"line":897,"column":70},"end":{"line":897,"column":78}}]},"76":{"line":907,"type":"if","locations":[{"start":{"line":907,"column":12},"end":{"line":907,"column":12}},{"start":{"line":907,"column":12},"end":{"line":907,"column":12}}]},"77":{"line":907,"type":"binary-expr","locations":[{"start":{"line":907,"column":16},"end":{"line":907,"column":23}},{"start":{"line":907,"column":27},"end":{"line":907,"column":46}},{"start":{"line":907,"column":50},"end":{"line":907,"column":83}}]},"78":{"line":910,"type":"if","locations":[{"start":{"line":910,"column":16},"end":{"line":910,"column":16}},{"start":{"line":910,"column":16},"end":{"line":910,"column":16}}]},"79":{"line":910,"type":"binary-expr","locations":[{"start":{"line":910,"column":20},"end":{"line":910,"column":35}},{"start":{"line":910,"column":39},"end":{"line":910,"column":66}},{"start":{"line":910,"column":70},"end":{"line":910,"column":118}}]},"80":{"line":941,"type":"if","locations":[{"start":{"line":941,"column":12},"end":{"line":941,"column":12}},{"start":{"line":941,"column":12},"end":{"line":941,"column":12}}]},"81":{"line":967,"type":"if","locations":[{"start":{"line":967,"column":8},"end":{"line":967,"column":8}},{"start":{"line":967,"column":8},"end":{"line":967,"column":8}}]},"82":{"line":971,"type":"if","locations":[{"start":{"line":971,"column":8},"end":{"line":971,"column":8}},{"start":{"line":971,"column":8},"end":{"line":971,"column":8}}]},"83":{"line":984,"type":"binary-expr","locations":[{"start":{"line":984,"column":19},"end":{"line":984,"column":33}},{"start":{"line":984,"column":37},"end":{"line":984,"column":45}}]},"84":{"line":986,"type":"if","locations":[{"start":{"line":986,"column":8},"end":{"line":986,"column":8}},{"start":{"line":986,"column":8},"end":{"line":986,"column":8}}]},"85":{"line":990,"type":"if","locations":[{"start":{"line":990,"column":8},"end":{"line":990,"column":8}},{"start":{"line":990,"column":8},"end":{"line":990,"column":8}}]},"86":{"line":992,"type":"if","locations":[{"start":{"line":992,"column":16},"end":{"line":992,"column":16}},{"start":{"line":992,"column":16},"end":{"line":992,"column":16}}]},"87":{"line":1007,"type":"binary-expr","locations":[{"start":{"line":1007,"column":22},"end":{"line":1007,"column":26}},{"start":{"line":1007,"column":30},"end":{"line":1007,"column":39}}]},"88":{"line":1008,"type":"binary-expr","locations":[{"start":{"line":1008,"column":20},"end":{"line":1008,"column":55}},{"start":{"line":1008,"column":59},"end":{"line":1008,"column":61}}]},"89":{"line":1012,"type":"if","locations":[{"start":{"line":1012,"column":8},"end":{"line":1012,"column":8}},{"start":{"line":1012,"column":8},"end":{"line":1012,"column":8}}]},"90":{"line":1018,"type":"if","locations":[{"start":{"line":1018,"column":8},"end":{"line":1018,"column":8}},{"start":{"line":1018,"column":8},"end":{"line":1018,"column":8}}]},"91":{"line":1018,"type":"binary-expr","locations":[{"start":{"line":1018,"column":12},"end":{"line":1018,"column":15}},{"start":{"line":1018,"column":19},"end":{"line":1018,"column":43}},{"start":{"line":1018,"column":48},"end":{"line":1018,"column":76}}]},"92":{"line":1021,"type":"if","locations":[{"start":{"line":1021,"column":12},"end":{"line":1021,"column":12}},{"start":{"line":1021,"column":12},"end":{"line":1021,"column":12}}]},"93":{"line":1021,"type":"binary-expr","locations":[{"start":{"line":1021,"column":16},"end":{"line":1021,"column":20}},{"start":{"line":1021,"column":24},"end":{"line":1021,"column":37}}]},"94":{"line":1066,"type":"if","locations":[{"start":{"line":1066,"column":12},"end":{"line":1066,"column":12}},{"start":{"line":1066,"column":12},"end":{"line":1066,"column":12}}]},"95":{"line":1089,"type":"if","locations":[{"start":{"line":1089,"column":8},"end":{"line":1089,"column":8}},{"start":{"line":1089,"column":8},"end":{"line":1089,"column":8}}]},"96":{"line":1094,"type":"if","locations":[{"start":{"line":1094,"column":12},"end":{"line":1094,"column":12}},{"start":{"line":1094,"column":12},"end":{"line":1094,"column":12}}]},"97":{"line":1095,"type":"if","locations":[{"start":{"line":1095,"column":16},"end":{"line":1095,"column":16}},{"start":{"line":1095,"column":16},"end":{"line":1095,"column":16}}]},"98":{"line":1099,"type":"if","locations":[{"start":{"line":1099,"column":16},"end":{"line":1099,"column":16}},{"start":{"line":1099,"column":16},"end":{"line":1099,"column":16}}]},"99":{"line":1110,"type":"if","locations":[{"start":{"line":1110,"column":16},"end":{"line":1110,"column":16}},{"start":{"line":1110,"column":16},"end":{"line":1110,"column":16}}]},"100":{"line":1111,"type":"if","locations":[{"start":{"line":1111,"column":20},"end":{"line":1111,"column":20}},{"start":{"line":1111,"column":20},"end":{"line":1111,"column":20}}]},"101":{"line":1132,"type":"binary-expr","locations":[{"start":{"line":1132,"column":32},"end":{"line":1132,"column":72}},{"start":{"line":1132,"column":76},"end":{"line":1132,"column":129}}]},"102":{"line":1133,"type":"binary-expr","locations":[{"start":{"line":1133,"column":27},"end":{"line":1133,"column":42}},{"start":{"line":1133,"column":46},"end":{"line":1133,"column":97}}]},"103":{"line":1139,"type":"if","locations":[{"start":{"line":1139,"column":8},"end":{"line":1139,"column":8}},{"start":{"line":1139,"column":8},"end":{"line":1139,"column":8}}]},"104":{"line":1139,"type":"binary-expr","locations":[{"start":{"line":1139,"column":12},"end":{"line":1139,"column":35}},{"start":{"line":1139,"column":39},"end":{"line":1139,"column":51}}]},"105":{"line":1147,"type":"if","locations":[{"start":{"line":1147,"column":16},"end":{"line":1147,"column":16}},{"start":{"line":1147,"column":16},"end":{"line":1147,"column":16}}]},"106":{"line":1163,"type":"if","locations":[{"start":{"line":1163,"column":8},"end":{"line":1163,"column":8}},{"start":{"line":1163,"column":8},"end":{"line":1163,"column":8}}]},"107":{"line":1229,"type":"binary-expr","locations":[{"start":{"line":1229,"column":16},"end":{"line":1229,"column":28}},{"start":{"line":1229,"column":32},"end":{"line":1229,"column":71}},{"start":{"line":1229,"column":76},"end":{"line":1229,"column":78}}]}},"code":["/**"," * @fileoverview Main ESLint object."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const assert = require(\"assert\"),","    EventEmitter = require(\"events\").EventEmitter,","    escope = require(\"escope\"),","    levn = require(\"levn\"),","    blankScriptAST = require(\"../conf/blank-script.json\"),","    DEFAULT_PARSER = require(\"../conf/eslint-recommended\").parser,","    replacements = require(\"../conf/replacements.json\"),","    CodePathAnalyzer = require(\"./code-path-analysis/code-path-analyzer\"),","    ConfigOps = require(\"./config/config-ops\"),","    validator = require(\"./config/config-validator\"),","    Environments = require(\"./config/environments\"),","    CommentEventGenerator = require(\"./util/comment-event-generator\"),","    NodeEventGenerator = require(\"./util/node-event-generator\"),","    SourceCode = require(\"./util/source-code\"),","    Traverser = require(\"./util/traverser\"),","    RuleContext = require(\"./rule-context\"),","    rules = require(\"./rules\"),","    timing = require(\"./timing\"),","","    pkg = require(\"../package.json\");","","","//------------------------------------------------------------------------------","// Typedefs","//------------------------------------------------------------------------------","","/**"," * The result of a parsing operation from parseForESLint()"," * @typedef {Object} CustomParseResult"," * @property {ASTNode} ast The ESTree AST Program node."," * @property {Object} services An object containing additional services related"," *      to the parser."," */","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Parses a list of \"name:boolean_value\" or/and \"name\" options divided by comma or"," * whitespace."," * @param {string} string The string to parse."," * @param {Comment} comment The comment node which has the string."," * @returns {Object} Result map object of names and boolean values"," */","function parseBooleanConfig(string, comment) {","    const items = {};","","    // Collapse whitespace around `:` and `,` to make parsing easier","    string = string.replace(/\\s*([:,])\\s*/g, \"$1\");","","    string.split(/\\s|,+/).forEach(name => {","        if (!name) {","            return;","        }","        const pos = name.indexOf(\":\");","        let value;","","        if (pos !== -1) {","            value = name.substring(pos + 1, name.length);","            name = name.substring(0, pos);","        }","","        items[name] = {","            value: (value === \"true\"),","            comment","        };","","    });","    return items;","}","","/**"," * Parses a JSON-like config."," * @param {string} string The string to parse."," * @param {Object} location Start line and column of comments for potential error message."," * @param {Object[]} messages The messages queue for potential error message."," * @returns {Object} Result map object"," */","function parseJsonConfig(string, location, messages) {","    let items = {};","","    // Parses a JSON-like comment by the same way as parsing CLI option.","    try {","        items = levn.parse(\"Object\", string) || {};","","        // Some tests say that it should ignore invalid comments such as `/*eslint no-alert:abc*/`.","        // Also, commaless notations have invalid severity:","        //     \"no-alert: 2 no-console: 2\" --> {\"no-alert\": \"2 no-console: 2\"}","        // Should ignore that case as well.","        if (ConfigOps.isEverySeverityValid(items)) {","            return items;","        }","    } catch (ex) {","","        // ignore to parse the string by a fallback.","    }","","    // Optionator cannot parse commaless notations.","    // But we are supporting that. So this is a fallback for that.","    items = {};","    string = string.replace(/([a-zA-Z0-9\\-/]+):/g, \"\\\"$1\\\":\").replace(/(]|[0-9])\\s+(?=\")/, \"$1,\");","    try {","        items = JSON.parse(`{${string}}`);","    } catch (ex) {","","        messages.push({","            ruleId: null,","            fatal: true,","            severity: 2,","            source: null,","            message: `Failed to parse JSON from '${string}': ${ex.message}`,","            line: location.start.line,","            column: location.start.column + 1","        });","","    }","","    return items;","}","","/**"," * Parses a config of values separated by comma."," * @param {string} string The string to parse."," * @returns {Object} Result map of values and true values"," */","function parseListConfig(string) {","    const items = {};","","    // Collapse whitespace around ,","    string = string.replace(/\\s*,\\s*/g, \",\");","","    string.split(/,+/).forEach(name => {","        name = name.trim();","        if (!name) {","            return;","        }","        items[name] = true;","    });","    return items;","}","","/**"," * Ensures that variables representing built-in properties of the Global Object,"," * and any globals declared by special block comments, are present in the global"," * scope."," * @param {ASTNode} program The top node of the AST."," * @param {Scope} globalScope The global scope."," * @param {Object} config The existing configuration data."," * @returns {void}"," */","function addDeclaredGlobals(program, globalScope, config) {","    const declaredGlobals = {},","        exportedGlobals = {},","        explicitGlobals = {},","        builtin = Environments.get(\"builtin\");","","    Object.assign(declaredGlobals, builtin);","","    Object.keys(config.env).forEach(name => {","        if (config.env[name]) {","            const env = Environments.get(name),","                environmentGlobals = env && env.globals;","","            if (environmentGlobals) {","                Object.assign(declaredGlobals, environmentGlobals);","            }","        }","    });","","    Object.assign(exportedGlobals, config.exported);","    Object.assign(declaredGlobals, config.globals);","    Object.assign(explicitGlobals, config.astGlobals);","","    Object.keys(declaredGlobals).forEach(name => {","        let variable = globalScope.set.get(name);","","        if (!variable) {","            variable = new escope.Variable(name, globalScope);","            variable.eslintExplicitGlobal = false;","            globalScope.variables.push(variable);","            globalScope.set.set(name, variable);","        }","        variable.writeable = declaredGlobals[name];","    });","","    Object.keys(explicitGlobals).forEach(name => {","        let variable = globalScope.set.get(name);","","        if (!variable) {","            variable = new escope.Variable(name, globalScope);","            variable.eslintExplicitGlobal = true;","            variable.eslintExplicitGlobalComment = explicitGlobals[name].comment;","            globalScope.variables.push(variable);","            globalScope.set.set(name, variable);","        }","        variable.writeable = explicitGlobals[name].value;","    });","","    // mark all exported variables as such","    Object.keys(exportedGlobals).forEach(name => {","        const variable = globalScope.set.get(name);","","        if (variable) {","            variable.eslintUsed = true;","        }","    });","","    /*","     * \"through\" contains all references which definitions cannot be found.","     * Since we augment the global scope using configuration, we need to update","     * references and remove the ones that were added by configuration.","     */","    globalScope.through = globalScope.through.filter(reference => {","        const name = reference.identifier.name;","        const variable = globalScope.set.get(name);","","        if (variable) {","","            /*","             * Links the variable and the reference.","             * And this reference is removed from `Scope#through`.","             */","            reference.resolved = variable;","            variable.references.push(reference);","","            return false;","        }","","        return true;","    });","}","","/**"," * Add data to reporting configuration to disable reporting for list of rules"," * starting from start location"," * @param  {Object[]} reportingConfig Current reporting configuration"," * @param  {Object} start Position to start"," * @param  {string[]} rulesToDisable List of rules"," * @returns {void}"," */","function disableReporting(reportingConfig, start, rulesToDisable) {","","    if (rulesToDisable.length) {","        rulesToDisable.forEach(rule => {","            reportingConfig.push({","                start,","                end: null,","                rule","            });","        });","    } else {","        reportingConfig.push({","            start,","            end: null,","            rule: null","        });","    }","}","","/**"," * Add data to reporting configuration to enable reporting for list of rules"," * starting from start location"," * @param  {Object[]} reportingConfig Current reporting configuration"," * @param  {Object} start Position to start"," * @param  {string[]} rulesToEnable List of rules"," * @returns {void}"," */","function enableReporting(reportingConfig, start, rulesToEnable) {","    let i;","","    if (rulesToEnable.length) {","        rulesToEnable.forEach(rule => {","            for (i = reportingConfig.length - 1; i >= 0; i--) {","                if (!reportingConfig[i].end && reportingConfig[i].rule === rule) {","                    reportingConfig[i].end = start;","                    break;","                }","            }","        });","    } else {","","        // find all previous disabled locations if they was started as list of rules","        let prevStart;","","        for (i = reportingConfig.length - 1; i >= 0; i--) {","            if (prevStart && prevStart !== reportingConfig[i].start) {","                break;","            }","","            if (!reportingConfig[i].end) {","                reportingConfig[i].end = start;","                prevStart = reportingConfig[i].start;","            }","        }","    }","}","","/**"," * Parses comments in file to extract file-specific config of rules, globals"," * and environments and merges them with global config; also code blocks"," * where reporting is disabled or enabled and merges them with reporting config."," * @param {string} filename The file being checked."," * @param {ASTNode} ast The top node of the AST."," * @param {Object} config The existing configuration data."," * @param {Object[]} reportingConfig The existing reporting configuration data."," * @param {Object[]} messages The messages queue."," * @returns {Object} Modified config object"," */","function modifyConfigsFromComments(filename, ast, config, reportingConfig, messages) {","","    let commentConfig = {","        exported: {},","        astGlobals: {},","        rules: {},","        env: {}","    };","    const commentRules = {};","","    ast.comments.forEach(comment => {","","        let value = comment.value.trim();","        const match = /^(eslint(-\\w+){0,3}|exported|globals?)(\\s|$)/.exec(value);","","        if (match) {","            value = value.substring(match.index + match[1].length);","","            if (comment.type === \"Block\") {","                switch (match[1]) {","                    case \"exported\":","                        Object.assign(commentConfig.exported, parseBooleanConfig(value, comment));","                        break;","","                    case \"globals\":","                    case \"global\":","                        Object.assign(commentConfig.astGlobals, parseBooleanConfig(value, comment));","                        break;","","                    case \"eslint-env\":","                        Object.assign(commentConfig.env, parseListConfig(value));","                        break;","","                    case \"eslint-disable\":","                        disableReporting(reportingConfig, comment.loc.start, Object.keys(parseListConfig(value)));","                        break;","","                    case \"eslint-enable\":","                        enableReporting(reportingConfig, comment.loc.start, Object.keys(parseListConfig(value)));","                        break;","","                    case \"eslint\": {","                        const items = parseJsonConfig(value, comment.loc, messages);","","                        Object.keys(items).forEach(name => {","                            const ruleValue = items[name];","","                            validator.validateRuleOptions(name, ruleValue, `${filename} line ${comment.loc.start.line}`);","                            commentRules[name] = ruleValue;","                        });","                        break;","                    }","","                    // no default","                }","            } else {        // comment.type === \"Line\"","                if (match[1] === \"eslint-disable-line\") {","                    disableReporting(reportingConfig, { line: comment.loc.start.line, column: 0 }, Object.keys(parseListConfig(value)));","                    enableReporting(reportingConfig, comment.loc.end, Object.keys(parseListConfig(value)));","                } else if (match[1] === \"eslint-disable-next-line\") {","                    disableReporting(reportingConfig, comment.loc.start, Object.keys(parseListConfig(value)));","                    enableReporting(reportingConfig, { line: comment.loc.start.line + 2 }, Object.keys(parseListConfig(value)));","                }","            }","        }","    });","","    // apply environment configs","    Object.keys(commentConfig.env).forEach(name => {","        const env = Environments.get(name);","","        if (env) {","            commentConfig = ConfigOps.merge(commentConfig, env);","        }","    });","    Object.assign(commentConfig.rules, commentRules);","","    return ConfigOps.merge(config, commentConfig);","}","","/**"," * Check if message of rule with ruleId should be ignored in location"," * @param  {Object[]} reportingConfig  Collection of ignore records"," * @param  {string} ruleId   Id of rule"," * @param  {Object} location Location of message"," * @returns {boolean}          True if message should be ignored, false otherwise"," */","function isDisabledByReportingConfig(reportingConfig, ruleId, location) {","","    for (let i = 0, c = reportingConfig.length; i < c; i++) {","","        const ignore = reportingConfig[i];","","        if ((!ignore.rule || ignore.rule === ruleId) &&","            (location.line > ignore.start.line || (location.line === ignore.start.line && location.column >= ignore.start.column)) &&","            (!ignore.end || (location.line < ignore.end.line || (location.line === ignore.end.line && location.column <= ignore.end.column)))) {","            return true;","        }","    }","","    return false;","}","","/**"," * Normalize ECMAScript version from the initial config"," * @param  {number} ecmaVersion ECMAScript version from the initial config"," * @param  {boolean} isModule Whether the source type is module or not"," * @returns {number} normalized ECMAScript version"," */","function normalizeEcmaVersion(ecmaVersion, isModule) {","","    // Need at least ES6 for modules","    if (isModule && (!ecmaVersion || ecmaVersion < 6)) {","        ecmaVersion = 6;","    }","","    // Calculate ECMAScript edition number from official year version starting with","    // ES2015, which corresponds with ES6 (or a difference of 2009).","    if (ecmaVersion >= 2015) {","        ecmaVersion -= 2009;","    }","","    return ecmaVersion;","}","","/**"," * Process initial config to make it safe to extend by file comment config"," * @param  {Object} config Initial config"," * @returns {Object}        Processed config"," */","function prepareConfig(config) {","","    config.globals = config.globals || config.global || {};","    delete config.global;","","    const copiedRules = {};","    let parserOptions = {};","","    if (typeof config.rules === \"object\") {","        Object.keys(config.rules).forEach(k => {","            const rule = config.rules[k];","","            if (rule === null) {","                throw new Error(`Invalid config for rule '${k}'.`);","            }","            if (Array.isArray(rule)) {","                copiedRules[k] = rule.slice();","            } else {","                copiedRules[k] = rule;","            }","        });","    }","","    // merge in environment parserOptions","    if (typeof config.env === \"object\") {","        Object.keys(config.env).forEach(envName => {","            const env = Environments.get(envName);","","            if (config.env[envName] && env && env.parserOptions) {","                parserOptions = ConfigOps.merge(parserOptions, env.parserOptions);","            }","        });","    }","","    const preparedConfig = {","        rules: copiedRules,","        parser: config.parser || DEFAULT_PARSER,","        globals: ConfigOps.merge({}, config.globals),","        env: ConfigOps.merge({}, config.env || {}),","        settings: ConfigOps.merge({}, config.settings || {}),","        parserOptions: ConfigOps.merge(parserOptions, config.parserOptions || {})","    };","    const isModule = preparedConfig.parserOptions.sourceType === \"module\";","","    if (isModule) {","        if (!preparedConfig.parserOptions.ecmaFeatures) {","            preparedConfig.parserOptions.ecmaFeatures = {};","        }","","        // can't have global return inside of modules","        preparedConfig.parserOptions.ecmaFeatures.globalReturn = false;","    }","","    preparedConfig.parserOptions.ecmaVersion = normalizeEcmaVersion(preparedConfig.parserOptions.ecmaVersion, isModule);","","    return preparedConfig;","}","","/**"," * Provide a stub rule with a given message"," * @param  {string} message The message to be displayed for the rule"," * @returns {Function}      Stub rule function"," */","function createStubRule(message) {","","    /**","     * Creates a fake rule object","     * @param {Object} context context object for each rule","     * @returns {Object} collection of node to listen on","     */","    function createRuleModule(context) {","        return {","            Program(node) {","                context.report(node, message);","            }","        };","    }","","    if (message) {","        return createRuleModule;","    }","    throw new Error(\"No message passed to stub rule\");","","}","","/**"," * Provide a rule replacement message"," * @param  {string} ruleId Name of the rule"," * @returns {string}       Message detailing rule replacement"," */","function getRuleReplacementMessage(ruleId) {","    if (ruleId in replacements.rules) {","        const newRules = replacements.rules[ruleId];","","        return `Rule '${ruleId}' was removed and replaced by: ${newRules.join(\", \")}`;","    }","","    return null;","}","","const eslintEnvPattern = /\\/\\*\\s*eslint-env\\s(.+?)\\*\\//g;","","/**"," * Checks whether or not there is a comment which has \"eslint-env *\" in a given text."," * @param {string} text - A source code text to check."," * @returns {Object|null} A result of parseListConfig() with \"eslint-env *\" comment."," */","function findEslintEnv(text) {","    let match, retv;","","    eslintEnvPattern.lastIndex = 0;","","    while ((match = eslintEnvPattern.exec(text))) {","        retv = Object.assign(retv || {}, parseListConfig(match[1]));","    }","","    return retv;","}","","/**"," * Strips Unicode BOM from a given text."," *"," * @param {string} text - A text to strip."," * @returns {string} The stripped text."," */","function stripUnicodeBOM(text) {","","    /*","     * Check Unicode BOM.","     * In JavaScript, string data is stored as UTF-16, so BOM is 0xFEFF.","     * http://www.ecma-international.org/ecma-262/6.0/#sec-unicode-format-control-characters","     */","    if (text.charCodeAt(0) === 0xFEFF) {","        return text.slice(1);","    }","    return text;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Object that is responsible for verifying JavaScript text"," * @name eslint"," */","module.exports = (function() {","","    const api = Object.create(new EventEmitter());","    let messages = [],","        currentConfig = null,","        currentScopes = null,","        scopeManager = null,","        currentFilename = null,","        traverser = null,","        reportingConfig = [],","        sourceCode = null;","","    /**","     * Parses text into an AST. Moved out here because the try-catch prevents","     * optimization of functions, so it's best to keep the try-catch as isolated","     * as possible","     * @param {string} text The text to parse.","     * @param {Object} config The ESLint configuration object.","     * @param {string} filePath The path to the file being parsed.","     * @returns {ASTNode|CustomParseResult} The AST or parse result if successful,","     *      or null if not.","     * @private","     */","    function parse(text, config, filePath) {","","        let parser,","            parserOptions = {","                loc: true,","                range: true,","                raw: true,","                tokens: true,","                comment: true,","                attachComment: true,","                filePath","            };","","        try {","            parser = require(config.parser);","        } catch (ex) {","            messages.push({","                ruleId: null,","                fatal: true,","                severity: 2,","                source: null,","                message: ex.message,","                line: 0,","                column: 0","            });","","            return null;","        }","","        // merge in any additional parser options","        if (config.parserOptions) {","            parserOptions = Object.assign({}, config.parserOptions, parserOptions);","        }","","        /*","         * Check for parsing errors first. If there's a parsing error, nothing","         * else can happen. However, a parsing error does not throw an error","         * from this method - it's just considered a fatal error message, a","         * problem that ESLint identified just like any other.","         */","        try {","            if (typeof parser.parseForESLint === \"function\") {","                return parser.parseForESLint(text, parserOptions);","            }","            return parser.parse(text, parserOptions);","","        } catch (ex) {","","            // If the message includes a leading line number, strip it:","            const message = ex.message.replace(/^line \\d+:/i, \"\").trim();","            const source = (ex.lineNumber) ? SourceCode.splitLines(text)[ex.lineNumber - 1] : null;","","            messages.push({","                ruleId: null,","                fatal: true,","                severity: 2,","                source,","                message: `Parsing error: ${message}`,","","                line: ex.lineNumber,","                column: ex.column","            });","","            return null;","        }","    }","","    /**","     * Get the severity level of a rule (0 - none, 1 - warning, 2 - error)","     * Returns 0 if the rule config is not valid (an Array or a number)","     * @param {Array|number} ruleConfig rule configuration","     * @returns {number} 0, 1, or 2, indicating rule severity","     */","    function getRuleSeverity(ruleConfig) {","        if (typeof ruleConfig === \"number\") {","            return ruleConfig;","        } else if (Array.isArray(ruleConfig)) {","            return ruleConfig[0];","        }","        return 0;","","    }","","    /**","     * Get the options for a rule (not including severity), if any","     * @param {Array|number} ruleConfig rule configuration","     * @returns {Array} of rule options, empty Array if none","     */","    function getRuleOptions(ruleConfig) {","        if (Array.isArray(ruleConfig)) {","            return ruleConfig.slice(1);","        }","        return [];","","    }","","    // set unlimited listeners (see https://github.com/eslint/eslint/issues/524)","    api.setMaxListeners(0);","","    /**","     * Resets the internal state of the object.","     * @returns {void}","     */","    api.reset = function() {","        this.removeAllListeners();","        messages = [];","        currentConfig = null;","        currentScopes = null;","        scopeManager = null;","        traverser = null;","        reportingConfig = [];","        sourceCode = null;","    };","","    /**","     * Configuration object for the `verify` API. A JS representation of the eslintrc files.","     * @typedef {Object} ESLintConfig","     * @property {Object} rules The rule configuration to verify against.","     * @property {string} [parser] Parser to use when generatig the AST.","     * @property {Object} [parserOptions] Options for the parsed used.","     * @property {Object} [settings] Global settings passed to each rule.","     * @property {Object} [env] The environment to verify in.","     * @property {Object} [globals] Available globalsto the code.","     */","","    /**","     * Verifies the text against the rules specified by the second argument.","     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.","     * @param {ESLintConfig} config An ESLintConfig instance to configure everything.","     * @param {(string|Object)} [filenameOrOptions] The optional filename of the file being checked.","     *      If this is not set, the filename will default to '<input>' in the rule context. If","     *      an object, then it has \"filename\", \"saveState\", and \"allowInlineConfig\" properties.","     * @param {boolean} [saveState] Indicates if the state from the last run should be saved.","     *      Mostly useful for testing purposes.","     * @param {boolean} [filenameOrOptions.allowInlineConfig] Allow/disallow inline comments' ability to change config once it is set. Defaults to true if not supplied.","     *      Useful if you want to validate JS without comments overriding rules.","     * @returns {Object[]} The results as an array of messages or null if no messages.","     */","    api.verify = function(textOrSourceCode, config, filenameOrOptions, saveState) {","        const text = (typeof textOrSourceCode === \"string\") ? textOrSourceCode : null;","        let ast,","            parseResult,","            shebang,","            allowInlineConfig;","","        // evaluate arguments","        if (typeof filenameOrOptions === \"object\") {","            currentFilename = filenameOrOptions.filename;","            allowInlineConfig = filenameOrOptions.allowInlineConfig;","            saveState = filenameOrOptions.saveState;","        } else {","            currentFilename = filenameOrOptions;","        }","","        if (!saveState) {","            this.reset();","        }","","        // search and apply \"eslint-env *\".","        const envInFile = findEslintEnv(text || textOrSourceCode.text);","","        config = Object.assign({}, config);","","        if (envInFile) {","            if (config.env) {","                config.env = Object.assign({}, config.env, envInFile);","            } else {","                config.env = envInFile;","            }","        }","","        // process initial config to make it safe to extend","        config = prepareConfig(config);","","        // only do this for text","        if (text !== null) {","","            // there's no input, just exit here","            if (text.trim().length === 0) {","                sourceCode = new SourceCode(text, blankScriptAST);","                return messages;","            }","","            parseResult = parse(","                stripUnicodeBOM(text).replace(/^#!([^\\r\\n]+)/, (match, captured) => {","                    shebang = captured;","                    return `//${captured}`;","                }),","                config,","                currentFilename","            );","","            // if this result is from a parseForESLint() method, normalize","            if (parseResult && parseResult.ast) {","                ast = parseResult.ast;","            } else {","                ast = parseResult;","                parseResult = null;","            }","","            if (ast) {","                sourceCode = new SourceCode(text, ast);","            }","","        } else {","            sourceCode = textOrSourceCode;","            ast = sourceCode.ast;","        }","","        // if espree failed to parse the file, there's no sense in setting up rules","        if (ast) {","","            // parse global comments and modify config","            if (allowInlineConfig !== false) {","                config = modifyConfigsFromComments(currentFilename, ast, config, reportingConfig, messages);","            }","","            // ensure that severities are normalized in the config","            ConfigOps.normalize(config);","","            // enable appropriate rules","            Object.keys(config.rules).filter(key => getRuleSeverity(config.rules[key]) > 0).forEach(key => {","                let ruleCreator;","","                ruleCreator = rules.get(key);","","                if (!ruleCreator) {","                    const replacementMsg = getRuleReplacementMessage(key);","","                    if (replacementMsg) {","                        ruleCreator = createStubRule(replacementMsg);","                    } else {","                        ruleCreator = createStubRule(`Definition for rule '${key}' was not found`);","                    }","                    rules.define(key, ruleCreator);","                }","","                const severity = getRuleSeverity(config.rules[key]);","                const options = getRuleOptions(config.rules[key]);","","                try {","                    const ruleContext = new RuleContext(","                        key, api, severity, options,","                        config.settings, config.parserOptions, config.parser,","                        ruleCreator.meta,","                        (parseResult && parseResult.services ? parseResult.services : {})","                    );","","                    const rule = ruleCreator.create ? ruleCreator.create(ruleContext)","                        : ruleCreator(ruleContext);","","                    // add all the selectors from the rule as listeners","                    Object.keys(rule).forEach(selector => {","                        api.on(selector, timing.enabled","                            ? timing.time(key, rule[selector])","                            : rule[selector]","                        );","                    });","                } catch (ex) {","                    ex.message = `Error while loading rule '${key}': ${ex.message}`;","                    throw ex;","                }","            });","","            // save config so rules can access as necessary","            currentConfig = config;","            traverser = new Traverser();","","            const ecmaFeatures = currentConfig.parserOptions.ecmaFeatures || {};","            const ecmaVersion = currentConfig.parserOptions.ecmaVersion || 5;","","            // gather scope data that may be needed by the rules","            scopeManager = escope.analyze(ast, {","                ignoreEval: true,","                nodejsScope: ecmaFeatures.globalReturn,","                impliedStrict: ecmaFeatures.impliedStrict,","                ecmaVersion,","                sourceType: currentConfig.parserOptions.sourceType || \"script\",","                fallback: Traverser.getKeys","            });","","            currentScopes = scopeManager.scopes;","","            // augment global scope with declared global variables","            addDeclaredGlobals(ast, currentScopes[0], currentConfig);","","            // remove shebang comments","            if (shebang && ast.comments.length && ast.comments[0].value === shebang) {","                ast.comments.splice(0, 1);","","                if (ast.body.length && ast.body[0].leadingComments && ast.body[0].leadingComments[0].value === shebang) {","                    ast.body[0].leadingComments.splice(0, 1);","                }","            }","","            let eventGenerator = new NodeEventGenerator(api);","","            eventGenerator = new CodePathAnalyzer(eventGenerator);","            eventGenerator = new CommentEventGenerator(eventGenerator, sourceCode);","","            /*","             * Each node has a type property. Whenever a particular type of","             * node is found, an event is fired. This allows any listeners to","             * automatically be informed that this type of node has been found","             * and react accordingly.","             */","            traverser.traverse(ast, {","                enter(node, parent) {","                    node.parent = parent;","                    eventGenerator.enterNode(node);","                },","                leave(node) {","                    eventGenerator.leaveNode(node);","                }","            });","        }","","        // sort by line and column","        messages.sort((a, b) => {","            const lineDiff = a.line - b.line;","","            if (lineDiff === 0) {","                return a.column - b.column;","            }","            return lineDiff;","","        });","","        return messages;","    };","","    /**","     * Reports a message from one of the rules.","     * @param {string} ruleId The ID of the rule causing the message.","     * @param {number} severity The severity level of the rule as configured.","     * @param {ASTNode} node The AST node that the message relates to.","     * @param {Object=} location An object containing the error line and column","     *      numbers. If location is not provided the node's start location will","     *      be used.","     * @param {string} message The actual message.","     * @param {Object} opts Optional template data which produces a formatted message","     *     with symbols being replaced by this object's values.","     * @param {Object} fix A fix command description.","     * @param {Object} meta Metadata of the rule","     * @returns {void}","     */","    api.report = function(ruleId, severity, node, location, message, opts, fix, meta) {","        if (node) {","            assert.strictEqual(typeof node, \"object\", \"Node must be an object\");","        }","","        if (typeof location === \"string\") {","            assert.ok(node, \"Node must be provided when reporting error if location is not provided\");","","            meta = fix;","            fix = opts;","            opts = message;","            message = location;","            location = node.loc.start;","        }","","        // Store end location.","        const endLocation = location.end;","","        location = location.start || location;","","        if (isDisabledByReportingConfig(reportingConfig, ruleId, location)) {","            return;","        }","","        if (opts) {","            message = message.replace(/\\{\\{\\s*([^{}]+?)\\s*\\}\\}/g, (fullMatch, term) => {","                if (term in opts) {","                    return opts[term];","                }","","                // Preserve old behavior: If parameter name not provided, don't replace it.","                return fullMatch;","            });","        }","","        const problem = {","            ruleId,","            severity,","            message,","            line: location.line,","            column: location.column + 1,   // switch to 1-base instead of 0-base","            nodeType: node && node.type,","            source: sourceCode.lines[location.line - 1] || \"\"","        };","","        // Define endLine and endColumn if exists.","        if (endLocation) {","            problem.endLine = endLocation.line;","            problem.endColumn = endLocation.column + 1;   // switch to 1-base instead of 0-base","        }","","        // ensure there's range and text properties, otherwise it's not a valid fix","        if (fix && Array.isArray(fix.range) && (typeof fix.text === \"string\")) {","","            // If rule uses fix, has metadata, but has no metadata.fixable, we should throw","            if (meta && !meta.fixable) {","                throw new Error(\"Fixable rules should export a `meta.fixable` property.\");","            }","","            problem.fix = fix;","        }","","        messages.push(problem);","    };","","    /**","     * Gets the SourceCode object representing the parsed source.","     * @returns {SourceCode} The SourceCode object.","     */","    api.getSourceCode = function() {","        return sourceCode;","    };","","    // methods that exist on SourceCode object","    const externalMethods = {","        getSource: \"getText\",","        getSourceLines: \"getLines\",","        getAllComments: \"getAllComments\",","        getNodeByRangeIndex: \"getNodeByRangeIndex\",","        getComments: \"getComments\",","        getJSDocComment: \"getJSDocComment\",","        getFirstToken: \"getFirstToken\",","        getFirstTokens: \"getFirstTokens\",","        getLastToken: \"getLastToken\",","        getLastTokens: \"getLastTokens\",","        getTokenAfter: \"getTokenAfter\",","        getTokenBefore: \"getTokenBefore\",","        getTokenByRangeStart: \"getTokenByRangeStart\",","        getTokens: \"getTokens\",","        getTokensAfter: \"getTokensAfter\",","        getTokensBefore: \"getTokensBefore\",","        getTokensBetween: \"getTokensBetween\"","    };","","    // copy over methods","    Object.keys(externalMethods).forEach(methodName => {","        const exMethodName = externalMethods[methodName];","","        // All functions expected to have less arguments than 5.","        api[methodName] = function(a, b, c, d, e) {","            if (sourceCode) {","                return sourceCode[exMethodName](a, b, c, d, e);","            }","            return null;","        };","    });","","    /**","     * Gets nodes that are ancestors of current node.","     * @returns {ASTNode[]} Array of objects representing ancestors.","     */","    api.getAncestors = function() {","        return traverser.parents();","    };","","    /**","     * Gets the scope for the current node.","     * @returns {Object} An object representing the current node's scope.","     */","    api.getScope = function() {","        const parents = traverser.parents();","","        // Don't do this for Program nodes - they have no parents","        if (parents.length) {","","            // if current node introduces a scope, add it to the list","            const current = traverser.current();","","            if (currentConfig.parserOptions.ecmaVersion >= 6) {","                if ([\"BlockStatement\", \"SwitchStatement\", \"CatchClause\", \"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"].indexOf(current.type) >= 0) {","                    parents.push(current);","                }","            } else {","                if ([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"].indexOf(current.type) >= 0) {","                    parents.push(current);","                }","            }","","            // Ascend the current node's parents","            for (let i = parents.length - 1; i >= 0; --i) {","","                // Get the innermost scope","                const scope = scopeManager.acquire(parents[i], true);","","                if (scope) {","                    if (scope.type === \"function-expression-name\") {","                        return scope.childScopes[0];","                    }","                    return scope;","","                }","","            }","","        }","","        return currentScopes[0];","    };","","    /**","     * Record that a particular variable has been used in code","     * @param {string} name The name of the variable to mark as used","     * @returns {boolean} True if the variable was found and marked as used,","     *      false if not.","     */","    api.markVariableAsUsed = function(name) {","        const hasGlobalReturn = currentConfig.parserOptions.ecmaFeatures && currentConfig.parserOptions.ecmaFeatures.globalReturn,","            specialScope = hasGlobalReturn || currentConfig.parserOptions.sourceType === \"module\";","        let scope = this.getScope(),","            i,","            len;","","        // Special Node.js scope means we need to start one level deeper","        if (scope.type === \"global\" && specialScope) {","            scope = scope.childScopes[0];","        }","","        do {","            const variables = scope.variables;","","            for (i = 0, len = variables.length; i < len; i++) {","                if (variables[i].name === name) {","                    variables[i].eslintUsed = true;","                    return true;","                }","            }","        } while ((scope = scope.upper));","","        return false;","    };","","    /**","     * Gets the filename for the currently parsed source.","     * @returns {string} The filename associated with the source being parsed.","     *     Defaults to \"<input>\" if no filename info is present.","     */","    api.getFilename = function() {","        if (typeof currentFilename === \"string\") {","            return currentFilename;","        }","        return \"<input>\";","","    };","","    /**","     * Defines a new linting rule.","     * @param {string} ruleId A unique rule identifier","     * @param {Function} ruleModule Function from context to object mapping AST node types to event handlers","     * @returns {void}","     */","    const defineRule = api.defineRule = function(ruleId, ruleModule) {","        rules.define(ruleId, ruleModule);","    };","","    /**","     * Defines many new linting rules.","     * @param {Object} rulesToDefine map from unique rule identifier to rule","     * @returns {void}","     */","    api.defineRules = function(rulesToDefine) {","        Object.getOwnPropertyNames(rulesToDefine).forEach(ruleId => {","            defineRule(ruleId, rulesToDefine[ruleId]);","        });","    };","","    /**","     * Gets the default eslint configuration.","     * @returns {Object} Object mapping rule IDs to their default configurations","     */","    api.defaults = function() {","        return require(\"../conf/eslint-recommended\");","    };","","    /**","     * Gets an object with all loaded rules.","     * @returns {Map} All loaded rules","     */","    api.getRules = function() {","        return rules.getAllLoadedRules();","    };","","    api.version = pkg.version;","","    /**","     * Gets variables that are declared by a specified node.","     *","     * The variables are its `defs[].node` or `defs[].parent` is same as the specified node.","     * Specifically, below:","     *","     * - `VariableDeclaration` - variables of its all declarators.","     * - `VariableDeclarator` - variables.","     * - `FunctionDeclaration`/`FunctionExpression` - its function name and parameters.","     * - `ArrowFunctionExpression` - its parameters.","     * - `ClassDeclaration`/`ClassExpression` - its class name.","     * - `CatchClause` - variables of its exception.","     * - `ImportDeclaration` - variables of  its all specifiers.","     * - `ImportSpecifier`/`ImportDefaultSpecifier`/`ImportNamespaceSpecifier` - a variable.","     * - others - always an empty array.","     *","     * @param {ASTNode} node A node to get.","     * @returns {escope.Variable[]} Variables that are declared by the node.","     */","    api.getDeclaredVariables = function(node) {","        return (scopeManager && scopeManager.getDeclaredVariables(node)) || [];","    };","","    return api;","","}());",""],"l":{"12":1,"57":1,"58":0,"61":0,"63":0,"64":0,"65":0,"67":0,"68":0,"70":0,"71":0,"72":0,"75":0,"81":0,"91":1,"92":0,"95":0,"96":0,"102":0,"103":0,"112":0,"113":0,"114":0,"115":0,"118":0,"130":0,"138":1,"139":0,"142":0,"144":0,"145":0,"146":0,"147":0,"149":0,"151":0,"163":1,"164":0,"169":0,"171":0,"172":0,"173":0,"176":0,"177":0,"182":0,"183":0,"184":0,"186":0,"187":0,"189":0,"190":0,"191":0,"192":0,"193":0,"195":0,"198":0,"199":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"208":0,"212":0,"213":0,"215":0,"216":0,"225":0,"226":0,"227":0,"229":0,"235":0,"236":0,"238":0,"241":0,"253":1,"255":0,"256":0,"257":0,"264":0,"280":1,"281":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"295":0,"297":0,"298":0,"299":0,"302":0,"303":0,"304":0,"321":1,"323":0,"329":0,"331":0,"333":0,"334":0,"336":0,"337":0,"339":0,"340":0,"342":0,"343":0,"347":0,"348":0,"351":0,"352":0,"355":0,"356":0,"359":0,"360":0,"363":0,"365":0,"366":0,"368":0,"369":0,"371":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"389":0,"390":0,"392":0,"393":0,"396":0,"398":0,"408":1,"410":0,"412":0,"414":0,"417":0,"421":0,"430":1,"433":0,"434":0,"439":0,"440":0,"443":0,"451":1,"453":0,"454":0,"456":0,"457":0,"459":0,"460":0,"461":0,"463":0,"464":0,"466":0,"467":0,"469":0,"475":0,"476":0,"477":0,"479":0,"480":0,"485":0,"493":0,"495":0,"496":0,"497":0,"501":0,"504":0,"506":0,"514":1,"521":1,"522":0,"524":0,"529":0,"530":0,"532":0,"541":1,"542":0,"543":0,"545":0,"548":0,"551":1,"558":1,"559":0,"561":0,"563":0,"564":0,"567":0,"576":1,"583":0,"584":0,"586":0,"597":1,"599":1,"600":1,"620":1,"622":0,"633":0,"634":0,"636":0,"646":0,"650":0,"651":0,"660":0,"661":0,"662":0,"664":0,"669":0,"670":0,"672":0,"683":0,"693":1,"694":0,"695":0,"696":0,"697":0,"699":0,"708":1,"709":0,"710":0,"712":0,"717":1,"723":1,"724":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"731":0,"758":1,"759":0,"760":0,"766":0,"767":0,"768":0,"769":0,"771":0,"774":0,"775":0,"779":0,"781":0,"783":0,"784":0,"785":0,"787":0,"792":0,"795":0,"798":0,"799":0,"800":0,"803":0,"805":0,"806":0,"813":0,"814":0,"816":0,"817":0,"820":0,"821":0,"825":0,"826":0,"830":0,"833":0,"834":0,"838":0,"841":0,"842":0,"844":0,"846":0,"847":0,"849":0,"850":0,"852":0,"854":0,"857":0,"858":0,"860":0,"861":0,"868":0,"872":0,"873":0,"879":0,"880":0,"885":0,"886":0,"888":0,"889":0,"892":0,"901":0,"904":0,"907":0,"908":0,"910":0,"911":0,"915":0,"917":0,"918":0,"926":0,"928":0,"929":0,"932":0,"938":0,"939":0,"941":0,"942":0,"944":0,"948":0,"966":1,"967":0,"968":0,"971":0,"972":0,"974":0,"975":0,"976":0,"977":0,"978":0,"982":0,"984":0,"986":0,"987":0,"990":0,"991":0,"992":0,"993":0,"997":0,"1001":0,"1012":0,"1013":0,"1014":0,"1018":0,"1021":0,"1022":0,"1025":0,"1028":0,"1035":1,"1036":0,"1040":1,"1061":1,"1062":17,"1065":17,"1066":0,"1067":0,"1069":0,"1077":1,"1078":0,"1085":1,"1086":0,"1089":0,"1092":0,"1094":0,"1095":0,"1096":0,"1099":0,"1100":0,"1105":0,"1108":0,"1110":0,"1111":0,"1112":0,"1114":0,"1122":0,"1131":1,"1132":0,"1134":0,"1139":0,"1140":0,"1143":0,"1144":0,"1146":0,"1147":0,"1148":0,"1149":0,"1154":0,"1162":1,"1163":0,"1164":0,"1166":0,"1176":1,"1177":0,"1185":1,"1186":0,"1187":0,"1195":1,"1196":0,"1203":1,"1204":0,"1207":1,"1228":1,"1229":0,"1232":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/conf/eslint-recommended.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/conf/eslint-recommended.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":264,"column":2}}},"branchMap":{},"code":["/**"," * @fileoverview Configuration applied when a user configuration extends from"," * eslint:recommended."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","/* eslint sort-keys: [\"error\", \"asc\"], quote-props: [\"error\", \"consistent\"] */","/* eslint-disable sort-keys */","","module.exports = {","    parser: \"espree\",","    ecmaFeatures: {},","","    rules: {","","        /* eslint-enable sort-keys */","        \"accessor-pairs\": \"off\",","        \"array-bracket-spacing\": \"off\",","        \"array-callback-return\": \"off\",","        \"arrow-body-style\": \"off\",","        \"arrow-parens\": \"off\",","        \"arrow-spacing\": \"off\",","        \"block-scoped-var\": \"off\",","        \"block-spacing\": \"off\",","        \"brace-style\": \"off\",","        \"callback-return\": \"off\",","        \"camelcase\": \"off\",","        \"capitalized-comments\": \"off\",","        \"class-methods-use-this\": \"off\",","        \"comma-dangle\": \"off\",","        \"comma-spacing\": \"off\",","        \"comma-style\": \"off\",","        \"complexity\": \"off\",","        \"computed-property-spacing\": \"off\",","        \"consistent-return\": \"off\",","        \"consistent-this\": \"off\",","        \"constructor-super\": \"error\",","        \"curly\": \"off\",","        \"default-case\": \"off\",","        \"dot-location\": \"off\",","        \"dot-notation\": \"off\",","        \"eol-last\": \"off\",","        \"eqeqeq\": \"off\",","        \"func-call-spacing\": \"off\",","        \"func-name-matching\": \"off\",","        \"func-names\": \"off\",","        \"func-style\": \"off\",","        \"generator-star-spacing\": \"off\",","        \"global-require\": \"off\",","        \"guard-for-in\": \"off\",","        \"handle-callback-err\": \"off\",","        \"id-blacklist\": \"off\",","        \"id-length\": \"off\",","        \"id-match\": \"off\",","        \"indent\": \"off\",","        \"init-declarations\": \"off\",","        \"jsx-quotes\": \"off\",","        \"key-spacing\": \"off\",","        \"keyword-spacing\": \"off\",","        \"line-comment-position\": \"off\",","        \"linebreak-style\": \"off\",","        \"lines-around-comment\": \"off\",","        \"lines-around-directive\": \"off\",","        \"max-depth\": \"off\",","        \"max-len\": \"off\",","        \"max-lines\": \"off\",","        \"max-nested-callbacks\": \"off\",","        \"max-params\": \"off\",","        \"max-statements\": \"off\",","        \"max-statements-per-line\": \"off\",","        \"multiline-ternary\": \"off\",","        \"new-cap\": \"off\",","        \"new-parens\": \"off\",","        \"newline-after-var\": \"off\",","        \"newline-before-return\": \"off\",","        \"newline-per-chained-call\": \"off\",","        \"no-alert\": \"off\",","        \"no-array-constructor\": \"off\",","        \"no-await-in-loop\": \"off\",","        \"no-bitwise\": \"off\",","        \"no-caller\": \"off\",","        \"no-case-declarations\": \"error\",","        \"no-catch-shadow\": \"off\",","        \"no-class-assign\": \"error\",","        \"no-compare-neg-zero\": \"off\",","        \"no-cond-assign\": \"error\",","        \"no-confusing-arrow\": \"off\",","        \"no-console\": \"error\",","        \"no-const-assign\": \"error\",","        \"no-constant-condition\": \"error\",","        \"no-continue\": \"off\",","        \"no-control-regex\": \"error\",","        \"no-debugger\": \"error\",","        \"no-delete-var\": \"error\",","        \"no-div-regex\": \"off\",","        \"no-dupe-args\": \"error\",","        \"no-dupe-class-members\": \"error\",","        \"no-dupe-keys\": \"error\",","        \"no-duplicate-case\": \"error\",","        \"no-duplicate-imports\": \"off\",","        \"no-else-return\": \"off\",","        \"no-empty\": \"error\",","        \"no-empty-character-class\": \"error\",","        \"no-empty-function\": \"off\",","        \"no-empty-pattern\": \"error\",","        \"no-eq-null\": \"off\",","        \"no-eval\": \"off\",","        \"no-ex-assign\": \"error\",","        \"no-extend-native\": \"off\",","        \"no-extra-bind\": \"off\",","        \"no-extra-boolean-cast\": \"error\",","        \"no-extra-label\": \"off\",","        \"no-extra-parens\": \"off\",","        \"no-extra-semi\": \"error\",","        \"no-fallthrough\": \"error\",","        \"no-floating-decimal\": \"off\",","        \"no-func-assign\": \"error\",","        \"no-global-assign\": \"error\",","        \"no-implicit-coercion\": \"off\",","        \"no-implicit-globals\": \"off\",","        \"no-implied-eval\": \"off\",","        \"no-inline-comments\": \"off\",","        \"no-inner-declarations\": \"error\",","        \"no-invalid-regexp\": \"error\",","        \"no-invalid-this\": \"off\",","        \"no-irregular-whitespace\": \"error\",","        \"no-iterator\": \"off\",","        \"no-label-var\": \"off\",","        \"no-labels\": \"off\",","        \"no-lone-blocks\": \"off\",","        \"no-lonely-if\": \"off\",","        \"no-loop-func\": \"off\",","        \"no-magic-numbers\": \"off\",","        \"no-mixed-operators\": \"off\",","        \"no-mixed-requires\": \"off\",","        \"no-mixed-spaces-and-tabs\": \"error\",","        \"no-multi-assign\": \"off\",","        \"no-multi-spaces\": \"off\",","        \"no-multi-str\": \"off\",","        \"no-multiple-empty-lines\": \"off\",","        \"no-native-reassign\": \"off\",","        \"no-negated-condition\": \"off\",","        \"no-negated-in-lhs\": \"off\",","        \"no-nested-ternary\": \"off\",","        \"no-new\": \"off\",","        \"no-new-func\": \"off\",","        \"no-new-object\": \"off\",","        \"no-new-require\": \"off\",","        \"no-new-symbol\": \"error\",","        \"no-new-wrappers\": \"off\",","        \"no-obj-calls\": \"error\",","        \"no-octal\": \"error\",","        \"no-octal-escape\": \"off\",","        \"no-param-reassign\": \"off\",","        \"no-path-concat\": \"off\",","        \"no-plusplus\": \"off\",","        \"no-process-env\": \"off\",","        \"no-process-exit\": \"off\",","        \"no-proto\": \"off\",","        \"no-prototype-builtins\": \"off\",","        \"no-redeclare\": \"error\",","        \"no-regex-spaces\": \"error\",","        \"no-restricted-globals\": \"off\",","        \"no-restricted-imports\": \"off\",","        \"no-restricted-modules\": \"off\",","        \"no-restricted-properties\": \"off\",","        \"no-restricted-syntax\": \"off\",","        \"no-return-assign\": \"off\",","        \"no-return-await\": \"off\",","        \"no-script-url\": \"off\",","        \"no-self-assign\": \"error\",","        \"no-self-compare\": \"off\",","        \"no-sequences\": \"off\",","        \"no-shadow\": \"off\",","        \"no-shadow-restricted-names\": \"off\",","        \"no-spaced-func\": \"off\",","        \"no-sparse-arrays\": \"error\",","        \"no-sync\": \"off\",","        \"no-tabs\": \"off\",","        \"no-template-curly-in-string\": \"off\",","        \"no-ternary\": \"off\",","        \"no-this-before-super\": \"error\",","        \"no-throw-literal\": \"off\",","        \"no-trailing-spaces\": \"off\",","        \"no-undef\": \"error\",","        \"no-undef-init\": \"off\",","        \"no-undefined\": \"off\",","        \"no-underscore-dangle\": \"off\",","        \"no-unexpected-multiline\": \"error\",","        \"no-unmodified-loop-condition\": \"off\",","        \"no-unneeded-ternary\": \"off\",","        \"no-unreachable\": \"error\",","        \"no-unsafe-finally\": \"error\",","        \"no-unsafe-negation\": \"error\",","        \"no-unused-expressions\": \"off\",","        \"no-unused-labels\": \"error\",","        \"no-unused-vars\": \"error\",","        \"no-use-before-define\": \"off\",","        \"no-useless-call\": \"off\",","        \"no-useless-computed-key\": \"off\",","        \"no-useless-concat\": \"off\",","        \"no-useless-constructor\": \"off\",","        \"no-useless-escape\": \"off\",","        \"no-useless-rename\": \"off\",","        \"no-useless-return\": \"off\",","        \"no-var\": \"off\",","        \"no-void\": \"off\",","        \"no-warning-comments\": \"off\",","        \"no-whitespace-before-property\": \"off\",","        \"no-with\": \"off\",","        \"nonblock-statement-body-position\": \"off\",","        \"object-curly-newline\": \"off\",","        \"object-curly-spacing\": [\"off\", \"never\"],","        \"object-property-newline\": \"off\",","        \"object-shorthand\": \"off\",","        \"one-var\": \"off\",","        \"one-var-declaration-per-line\": \"off\",","        \"operator-assignment\": \"off\",","        \"operator-linebreak\": \"off\",","        \"padded-blocks\": \"off\",","        \"prefer-arrow-callback\": \"off\",","        \"prefer-const\": \"off\",","        \"prefer-destructuring\": \"off\",","        \"prefer-numeric-literals\": \"off\",","        \"prefer-promise-reject-errors\": \"off\",","        \"prefer-reflect\": \"off\",","        \"prefer-rest-params\": \"off\",","        \"prefer-spread\": \"off\",","        \"prefer-template\": \"off\",","        \"quote-props\": \"off\",","        \"quotes\": \"off\",","        \"radix\": \"off\",","        \"require-await\": \"off\",","        \"require-jsdoc\": \"off\",","        \"require-yield\": \"error\",","        \"rest-spread-spacing\": \"off\",","        \"semi\": \"off\",","        \"semi-spacing\": \"off\",","        \"sort-imports\": \"off\",","        \"sort-keys\": \"off\",","        \"sort-vars\": \"off\",","        \"space-before-blocks\": \"off\",","        \"space-before-function-paren\": \"off\",","        \"space-in-parens\": \"off\",","        \"space-infix-ops\": \"off\",","        \"space-unary-ops\": \"off\",","        \"spaced-comment\": \"off\",","        \"strict\": \"off\",","        \"symbol-description\": \"off\",","        \"template-curly-spacing\": \"off\",","        \"template-tag-spacing\": \"off\",","        \"unicode-bom\": \"off\",","        \"use-isnan\": \"error\",","        \"valid-jsdoc\": \"off\",","        \"valid-typeof\": \"error\",","        \"vars-on-top\": \"off\",","        \"wrap-iife\": \"off\",","        \"wrap-regex\": \"off\",","        \"yield-star-spacing\": \"off\",","        \"yoda\": \"off\"","    }","};",""],"l":{"12":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/code-path-analyzer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/code-path-analyzer.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":1,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":1,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":1,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":1},"b":{"1":[0,0,0,0,0,0,0],"2":[0,0],"3":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0,0,0,0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0,0,0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"isCaseNode","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":26}}},"2":{"name":"isForkingByTrueOrFalse","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":38}}},"3":{"name":"getBooleanValueIfSimpleConstant","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":47}}},"4":{"name":"isIdentifierReference","line":85,"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":37}}},"5":{"name":"forwardCurrentToHead","line":137,"loc":{"start":{"line":137,"column":0},"end":{"line":137,"column":46}}},"6":{"name":"leaveFromCurrentSegment","line":193,"loc":{"start":{"line":193,"column":0},"end":{"line":193,"column":49}}},"7":{"name":"preprocess","line":223,"loc":{"start":{"line":223,"column":0},"end":{"line":223,"column":36}}},"8":{"name":"processCodePathToEnter","line":330,"loc":{"start":{"line":330,"column":0},"end":{"line":330,"column":48}}},"9":{"name":"processCodePathToExit","line":421,"loc":{"start":{"line":421,"column":0},"end":{"line":421,"column":47}}},"10":{"name":"postprocess","line":529,"loc":{"start":{"line":529,"column":0},"end":{"line":529,"column":37}}},"11":{"name":"(anonymous_11)","line":573,"loc":{"start":{"line":573,"column":15},"end":{"line":573,"column":32}}},"12":{"name":"(anonymous_12)","line":589,"loc":{"start":{"line":589,"column":13},"end":{"line":589,"column":20}}},"13":{"name":"(anonymous_13)","line":614,"loc":{"start":{"line":614,"column":13},"end":{"line":614,"column":20}}},"14":{"name":"(anonymous_14)","line":638,"loc":{"start":{"line":638,"column":12},"end":{"line":638,"column":37}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":17,"column":39}},"2":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"3":{"start":{"line":30,"column":4},"end":{"line":30,"column":30}},"4":{"start":{"line":40,"column":0},"end":{"line":57,"column":1}},"5":{"start":{"line":41,"column":4},"end":{"line":41,"column":31}},"6":{"start":{"line":43,"column":4},"end":{"line":56,"column":5}},"7":{"start":{"line":49,"column":12},"end":{"line":49,"column":40}},"8":{"start":{"line":52,"column":12},"end":{"line":52,"column":24}},"9":{"start":{"line":55,"column":12},"end":{"line":55,"column":25}},"10":{"start":{"line":70,"column":0},"end":{"line":75,"column":1}},"11":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"12":{"start":{"line":72,"column":8},"end":{"line":72,"column":35}},"13":{"start":{"line":74,"column":4},"end":{"line":74,"column":18}},"14":{"start":{"line":85,"column":0},"end":{"line":122,"column":1}},"15":{"start":{"line":86,"column":4},"end":{"line":86,"column":31}},"16":{"start":{"line":88,"column":4},"end":{"line":121,"column":5}},"17":{"start":{"line":98,"column":12},"end":{"line":98,"column":25}},"18":{"start":{"line":106,"column":12},"end":{"line":106,"column":38}},"19":{"start":{"line":110,"column":12},"end":{"line":114,"column":14}},"20":{"start":{"line":117,"column":12},"end":{"line":117,"column":39}},"21":{"start":{"line":120,"column":12},"end":{"line":120,"column":24}},"22":{"start":{"line":137,"column":0},"end":{"line":183,"column":1}},"23":{"start":{"line":138,"column":4},"end":{"line":138,"column":39}},"24":{"start":{"line":139,"column":4},"end":{"line":139,"column":46}},"25":{"start":{"line":140,"column":4},"end":{"line":140,"column":50}},"26":{"start":{"line":141,"column":4},"end":{"line":141,"column":44}},"27":{"start":{"line":142,"column":4},"end":{"line":142,"column":70}},"28":{"start":{"line":143,"column":4},"end":{"line":143,"column":39}},"29":{"start":{"line":146,"column":4},"end":{"line":160,"column":5}},"30":{"start":{"line":147,"column":8},"end":{"line":147,"column":44}},"31":{"start":{"line":148,"column":8},"end":{"line":148,"column":38}},"32":{"start":{"line":150,"column":8},"end":{"line":159,"column":9}},"33":{"start":{"line":151,"column":12},"end":{"line":151,"column":68}},"34":{"start":{"line":153,"column":12},"end":{"line":158,"column":13}},"35":{"start":{"line":154,"column":16},"end":{"line":157,"column":26}},"36":{"start":{"line":163,"column":4},"end":{"line":163,"column":41}},"37":{"start":{"line":166,"column":4},"end":{"line":181,"column":5}},"38":{"start":{"line":167,"column":8},"end":{"line":167,"column":44}},"39":{"start":{"line":168,"column":8},"end":{"line":168,"column":38}},"40":{"start":{"line":170,"column":8},"end":{"line":180,"column":9}},"41":{"start":{"line":171,"column":12},"end":{"line":171,"column":67}},"42":{"start":{"line":173,"column":12},"end":{"line":173,"column":50}},"43":{"start":{"line":174,"column":12},"end":{"line":179,"column":13}},"44":{"start":{"line":175,"column":16},"end":{"line":178,"column":26}},"45":{"start":{"line":193,"column":0},"end":{"line":210,"column":1}},"46":{"start":{"line":194,"column":4},"end":{"line":194,"column":55}},"47":{"start":{"line":195,"column":4},"end":{"line":195,"column":50}},"48":{"start":{"line":197,"column":4},"end":{"line":207,"column":5}},"49":{"start":{"line":198,"column":8},"end":{"line":198,"column":50}},"50":{"start":{"line":200,"column":8},"end":{"line":200,"column":64}},"51":{"start":{"line":201,"column":8},"end":{"line":206,"column":9}},"52":{"start":{"line":202,"column":12},"end":{"line":205,"column":22}},"53":{"start":{"line":209,"column":4},"end":{"line":209,"column":31}},"54":{"start":{"line":223,"column":0},"end":{"line":321,"column":1}},"55":{"start":{"line":224,"column":4},"end":{"line":224,"column":39}},"56":{"start":{"line":225,"column":4},"end":{"line":225,"column":46}},"57":{"start":{"line":226,"column":4},"end":{"line":226,"column":31}},"58":{"start":{"line":228,"column":4},"end":{"line":320,"column":5}},"59":{"start":{"line":230,"column":12},"end":{"line":232,"column":13}},"60":{"start":{"line":231,"column":16},"end":{"line":231,"column":41}},"61":{"start":{"line":233,"column":12},"end":{"line":233,"column":18}},"62":{"start":{"line":243,"column":12},"end":{"line":247,"column":13}},"63":{"start":{"line":244,"column":16},"end":{"line":244,"column":41}},"64":{"start":{"line":245,"column":19},"end":{"line":247,"column":13}},"65":{"start":{"line":246,"column":16},"end":{"line":246,"column":40}},"66":{"start":{"line":248,"column":12},"end":{"line":248,"column":18}},"67":{"start":{"line":251,"column":12},"end":{"line":253,"column":13}},"68":{"start":{"line":252,"column":16},"end":{"line":252,"column":62}},"69":{"start":{"line":254,"column":12},"end":{"line":254,"column":18}},"70":{"start":{"line":257,"column":12},"end":{"line":261,"column":13}},"71":{"start":{"line":258,"column":16},"end":{"line":258,"column":39}},"72":{"start":{"line":259,"column":19},"end":{"line":261,"column":13}},"73":{"start":{"line":260,"column":16},"end":{"line":260,"column":41}},"74":{"start":{"line":262,"column":12},"end":{"line":262,"column":18}},"75":{"start":{"line":265,"column":12},"end":{"line":270,"column":13}},"76":{"start":{"line":266,"column":16},"end":{"line":266,"column":75}},"77":{"start":{"line":268,"column":16},"end":{"line":268,"column":45}},"78":{"start":{"line":269,"column":16},"end":{"line":269,"column":38}},"79":{"start":{"line":271,"column":12},"end":{"line":271,"column":18}},"80":{"start":{"line":274,"column":12},"end":{"line":279,"column":13}},"81":{"start":{"line":275,"column":16},"end":{"line":275,"column":40}},"82":{"start":{"line":277,"column":16},"end":{"line":277,"column":45}},"83":{"start":{"line":278,"column":16},"end":{"line":278,"column":77}},"84":{"start":{"line":280,"column":12},"end":{"line":280,"column":18}},"85":{"start":{"line":283,"column":12},"end":{"line":289,"column":13}},"86":{"start":{"line":284,"column":16},"end":{"line":284,"column":73}},"87":{"start":{"line":285,"column":19},"end":{"line":289,"column":13}},"88":{"start":{"line":286,"column":16},"end":{"line":286,"column":38}},"89":{"start":{"line":287,"column":19},"end":{"line":289,"column":13}},"90":{"start":{"line":288,"column":16},"end":{"line":288,"column":36}},"91":{"start":{"line":290,"column":12},"end":{"line":290,"column":18}},"92":{"start":{"line":294,"column":12},"end":{"line":301,"column":13}},"93":{"start":{"line":295,"column":16},"end":{"line":295,"column":40}},"94":{"start":{"line":296,"column":19},"end":{"line":301,"column":13}},"95":{"start":{"line":297,"column":16},"end":{"line":297,"column":41}},"96":{"start":{"line":299,"column":16},"end":{"line":299,"column":45}},"97":{"start":{"line":300,"column":16},"end":{"line":300,"column":40}},"98":{"start":{"line":302,"column":12},"end":{"line":302,"column":18}},"99":{"start":{"line":311,"column":12},"end":{"line":315,"column":13}},"100":{"start":{"line":312,"column":16},"end":{"line":312,"column":40}},"101":{"start":{"line":313,"column":16},"end":{"line":313,"column":39}},"102":{"start":{"line":314,"column":16},"end":{"line":314,"column":33}},"103":{"start":{"line":316,"column":12},"end":{"line":316,"column":18}},"104":{"start":{"line":319,"column":12},"end":{"line":319,"column":18}},"105":{"start":{"line":330,"column":0},"end":{"line":412,"column":1}},"106":{"start":{"line":331,"column":4},"end":{"line":331,"column":37}},"107":{"start":{"line":332,"column":4},"end":{"line":332,"column":56}},"108":{"start":{"line":333,"column":4},"end":{"line":333,"column":31}},"109":{"start":{"line":335,"column":4},"end":{"line":407,"column":5}},"110":{"start":{"line":340,"column":12},"end":{"line":345,"column":13}},"111":{"start":{"line":343,"column":16},"end":{"line":343,"column":53}},"112":{"start":{"line":344,"column":16},"end":{"line":344,"column":52}},"113":{"start":{"line":348,"column":12},"end":{"line":352,"column":14}},"114":{"start":{"line":353,"column":12},"end":{"line":353,"column":48}},"115":{"start":{"line":356,"column":12},"end":{"line":356,"column":57}},"116":{"start":{"line":357,"column":12},"end":{"line":357,"column":69}},"117":{"start":{"line":358,"column":12},"end":{"line":358,"column":18}},"118":{"start":{"line":361,"column":12},"end":{"line":361,"column":81}},"119":{"start":{"line":362,"column":12},"end":{"line":362,"column":18}},"120":{"start":{"line":366,"column":12},"end":{"line":366,"column":51}},"121":{"start":{"line":367,"column":12},"end":{"line":367,"column":18}},"122":{"start":{"line":370,"column":12},"end":{"line":372,"column":41}},"123":{"start":{"line":373,"column":12},"end":{"line":373,"column":18}},"124":{"start":{"line":376,"column":12},"end":{"line":376,"column":58}},"125":{"start":{"line":377,"column":12},"end":{"line":377,"column":18}},"126":{"start":{"line":386,"column":12},"end":{"line":388,"column":13}},"127":{"start":{"line":387,"column":16},"end":{"line":387,"column":33}},"128":{"start":{"line":389,"column":12},"end":{"line":389,"column":18}},"129":{"start":{"line":396,"column":12},"end":{"line":396,"column":70}},"130":{"start":{"line":397,"column":12},"end":{"line":397,"column":18}},"131":{"start":{"line":400,"column":12},"end":{"line":402,"column":13}},"132":{"start":{"line":401,"column":16},"end":{"line":401,"column":63}},"133":{"start":{"line":403,"column":12},"end":{"line":403,"column":18}},"134":{"start":{"line":406,"column":12},"end":{"line":406,"column":18}},"135":{"start":{"line":410,"column":4},"end":{"line":410,"column":41}},"136":{"start":{"line":411,"column":4},"end":{"line":411,"column":40}},"137":{"start":{"line":421,"column":0},"end":{"line":520,"column":1}},"138":{"start":{"line":422,"column":4},"end":{"line":422,"column":39}},"139":{"start":{"line":423,"column":4},"end":{"line":423,"column":46}},"140":{"start":{"line":424,"column":4},"end":{"line":424,"column":28}},"141":{"start":{"line":426,"column":4},"end":{"line":513,"column":5}},"142":{"start":{"line":430,"column":12},"end":{"line":430,"column":37}},"143":{"start":{"line":431,"column":12},"end":{"line":431,"column":18}},"144":{"start":{"line":434,"column":12},"end":{"line":434,"column":37}},"145":{"start":{"line":435,"column":12},"end":{"line":435,"column":18}},"146":{"start":{"line":444,"column":12},"end":{"line":446,"column":13}},"147":{"start":{"line":445,"column":16},"end":{"line":445,"column":59}},"148":{"start":{"line":447,"column":12},"end":{"line":449,"column":13}},"149":{"start":{"line":448,"column":16},"end":{"line":448,"column":35}},"150":{"start":{"line":450,"column":12},"end":{"line":450,"column":18}},"151":{"start":{"line":453,"column":12},"end":{"line":453,"column":34}},"152":{"start":{"line":454,"column":12},"end":{"line":454,"column":18}},"153":{"start":{"line":457,"column":12},"end":{"line":457,"column":49}},"154":{"start":{"line":458,"column":12},"end":{"line":458,"column":59}},"155":{"start":{"line":459,"column":12},"end":{"line":459,"column":31}},"156":{"start":{"line":460,"column":12},"end":{"line":460,"column":18}},"157":{"start":{"line":463,"column":12},"end":{"line":463,"column":49}},"158":{"start":{"line":464,"column":12},"end":{"line":464,"column":62}},"159":{"start":{"line":465,"column":12},"end":{"line":465,"column":31}},"160":{"start":{"line":466,"column":12},"end":{"line":466,"column":18}},"161":{"start":{"line":469,"column":12},"end":{"line":469,"column":49}},"162":{"start":{"line":470,"column":12},"end":{"line":470,"column":31}},"163":{"start":{"line":471,"column":12},"end":{"line":471,"column":31}},"164":{"start":{"line":472,"column":12},"end":{"line":472,"column":18}},"165":{"start":{"line":475,"column":12},"end":{"line":475,"column":49}},"166":{"start":{"line":476,"column":12},"end":{"line":476,"column":30}},"167":{"start":{"line":477,"column":12},"end":{"line":477,"column":31}},"168":{"start":{"line":478,"column":12},"end":{"line":478,"column":18}},"169":{"start":{"line":481,"column":12},"end":{"line":484,"column":13}},"170":{"start":{"line":482,"column":16},"end":{"line":482,"column":57}},"171":{"start":{"line":483,"column":16},"end":{"line":483,"column":35}},"172":{"start":{"line":485,"column":12},"end":{"line":485,"column":18}},"173":{"start":{"line":490,"column":12},"end":{"line":490,"column":53}},"174":{"start":{"line":491,"column":12},"end":{"line":491,"column":18}},"175":{"start":{"line":498,"column":12},"end":{"line":498,"column":35}},"176":{"start":{"line":499,"column":12},"end":{"line":499,"column":18}},"177":{"start":{"line":502,"column":12},"end":{"line":502,"column":35}},"178":{"start":{"line":503,"column":12},"end":{"line":503,"column":18}},"179":{"start":{"line":506,"column":12},"end":{"line":508,"column":13}},"180":{"start":{"line":507,"column":16},"end":{"line":507,"column":40}},"181":{"start":{"line":509,"column":12},"end":{"line":509,"column":18}},"182":{"start":{"line":512,"column":12},"end":{"line":512,"column":18}},"183":{"start":{"line":516,"column":4},"end":{"line":518,"column":5}},"184":{"start":{"line":517,"column":8},"end":{"line":517,"column":45}},"185":{"start":{"line":519,"column":4},"end":{"line":519,"column":39}},"186":{"start":{"line":529,"column":0},"end":{"line":558,"column":1}},"187":{"start":{"line":530,"column":4},"end":{"line":557,"column":5}},"188":{"start":{"line":535,"column":12},"end":{"line":535,"column":45}},"189":{"start":{"line":538,"column":12},"end":{"line":538,"column":52}},"190":{"start":{"line":541,"column":12},"end":{"line":541,"column":52}},"191":{"start":{"line":544,"column":12},"end":{"line":544,"column":55}},"192":{"start":{"line":545,"column":12},"end":{"line":545,"column":67}},"193":{"start":{"line":546,"column":12},"end":{"line":546,"column":36}},"194":{"start":{"line":548,"column":12},"end":{"line":548,"column":67}},"195":{"start":{"line":549,"column":12},"end":{"line":551,"column":13}},"196":{"start":{"line":550,"column":16},"end":{"line":550,"column":73}},"197":{"start":{"line":552,"column":12},"end":{"line":552,"column":18}},"198":{"start":{"line":556,"column":12},"end":{"line":556,"column":18}},"199":{"start":{"line":574,"column":8},"end":{"line":574,"column":39}},"200":{"start":{"line":575,"column":8},"end":{"line":575,"column":46}},"201":{"start":{"line":576,"column":8},"end":{"line":576,"column":29}},"202":{"start":{"line":577,"column":8},"end":{"line":577,"column":48}},"203":{"start":{"line":578,"column":8},"end":{"line":578,"column":32}},"204":{"start":{"line":579,"column":8},"end":{"line":579,"column":49}},"205":{"start":{"line":590,"column":8},"end":{"line":590,"column":32}},"206":{"start":{"line":593,"column":8},"end":{"line":595,"column":9}},"207":{"start":{"line":594,"column":12},"end":{"line":594,"column":35}},"208":{"start":{"line":599,"column":8},"end":{"line":599,"column":43}},"209":{"start":{"line":602,"column":8},"end":{"line":602,"column":38}},"210":{"start":{"line":604,"column":8},"end":{"line":604,"column":32}},"211":{"start":{"line":615,"column":8},"end":{"line":615,"column":32}},"212":{"start":{"line":619,"column":8},"end":{"line":619,"column":42}},"213":{"start":{"line":622,"column":8},"end":{"line":622,"column":38}},"214":{"start":{"line":625,"column":8},"end":{"line":625,"column":32}},"215":{"start":{"line":627,"column":8},"end":{"line":627,"column":32}},"216":{"start":{"line":639,"column":8},"end":{"line":647,"column":9}},"217":{"start":{"line":640,"column":12},"end":{"line":640,"column":85}},"218":{"start":{"line":641,"column":12},"end":{"line":646,"column":14}},"219":{"start":{"line":651,"column":0},"end":{"line":651,"column":34}}},"branchMap":{"1":{"line":43,"type":"switch","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":37}},{"start":{"line":45,"column":8},"end":{"line":45,"column":27}},{"start":{"line":46,"column":8},"end":{"line":46,"column":30}},{"start":{"line":47,"column":8},"end":{"line":47,"column":32}},{"start":{"line":48,"column":8},"end":{"line":49,"column":40}},{"start":{"line":51,"column":8},"end":{"line":52,"column":24}},{"start":{"line":54,"column":8},"end":{"line":55,"column":25}}]},"2":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"3":{"line":88,"type":"switch","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":32}},{"start":{"line":90,"column":8},"end":{"line":90,"column":30}},{"start":{"line":91,"column":8},"end":{"line":91,"column":33}},{"start":{"line":92,"column":8},"end":{"line":92,"column":28}},{"start":{"line":93,"column":8},"end":{"line":93,"column":27}},{"start":{"line":94,"column":8},"end":{"line":94,"column":31}},{"start":{"line":95,"column":8},"end":{"line":95,"column":38}},{"start":{"line":96,"column":8},"end":{"line":96,"column":40}},{"start":{"line":97,"column":8},"end":{"line":98,"column":25}},{"start":{"line":100,"column":8},"end":{"line":100,"column":35}},{"start":{"line":101,"column":8},"end":{"line":101,"column":34}},{"start":{"line":102,"column":8},"end":{"line":102,"column":39}},{"start":{"line":103,"column":8},"end":{"line":103,"column":32}},{"start":{"line":104,"column":8},"end":{"line":104,"column":31}},{"start":{"line":105,"column":8},"end":{"line":106,"column":38}},{"start":{"line":108,"column":8},"end":{"line":108,"column":24}},{"start":{"line":109,"column":8},"end":{"line":114,"column":14}},{"start":{"line":116,"column":8},"end":{"line":117,"column":39}},{"start":{"line":119,"column":8},"end":{"line":120,"column":24}}]},"4":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":16},"end":{"line":111,"column":35}},{"start":{"line":112,"column":16},"end":{"line":112,"column":31}},{"start":{"line":113,"column":16},"end":{"line":113,"column":32}}]},"5":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":8},"end":{"line":150,"column":8}},{"start":{"line":150,"column":8},"end":{"line":150,"column":8}}]},"6":{"line":150,"type":"binary-expr","locations":[{"start":{"line":150,"column":12},"end":{"line":150,"column":42}},{"start":{"line":150,"column":46},"end":{"line":150,"column":60}}]},"7":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":12},"end":{"line":153,"column":12}},{"start":{"line":153,"column":12},"end":{"line":153,"column":12}}]},"8":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":8},"end":{"line":170,"column":8}},{"start":{"line":170,"column":8},"end":{"line":170,"column":8}}]},"9":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":12},"end":{"line":170,"column":42}},{"start":{"line":170,"column":46},"end":{"line":170,"column":57}}]},"10":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":12},"end":{"line":174,"column":12}},{"start":{"line":174,"column":12},"end":{"line":174,"column":12}}]},"11":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":8},"end":{"line":201,"column":8}},{"start":{"line":201,"column":8},"end":{"line":201,"column":8}}]},"12":{"line":228,"type":"switch","locations":[{"start":{"line":229,"column":8},"end":{"line":233,"column":18}},{"start":{"line":235,"column":8},"end":{"line":235,"column":37}},{"start":{"line":236,"column":8},"end":{"line":248,"column":18}},{"start":{"line":250,"column":8},"end":{"line":254,"column":18}},{"start":{"line":256,"column":8},"end":{"line":262,"column":18}},{"start":{"line":264,"column":8},"end":{"line":271,"column":18}},{"start":{"line":273,"column":8},"end":{"line":280,"column":18}},{"start":{"line":282,"column":8},"end":{"line":290,"column":18}},{"start":{"line":292,"column":8},"end":{"line":292,"column":30}},{"start":{"line":293,"column":8},"end":{"line":302,"column":18}},{"start":{"line":304,"column":8},"end":{"line":316,"column":18}},{"start":{"line":318,"column":8},"end":{"line":319,"column":18}}]},"13":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":12},"end":{"line":230,"column":12}},{"start":{"line":230,"column":12},"end":{"line":230,"column":12}}]},"14":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":12},"end":{"line":243,"column":12}},{"start":{"line":243,"column":12},"end":{"line":243,"column":12}}]},"15":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":19},"end":{"line":245,"column":19}},{"start":{"line":245,"column":19},"end":{"line":245,"column":19}}]},"16":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":12},"end":{"line":251,"column":12}},{"start":{"line":251,"column":12},"end":{"line":251,"column":12}}]},"17":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":12},"end":{"line":257,"column":12}},{"start":{"line":257,"column":12},"end":{"line":257,"column":12}}]},"18":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":19},"end":{"line":259,"column":19}},{"start":{"line":259,"column":19},"end":{"line":259,"column":19}}]},"19":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":12},"end":{"line":265,"column":12}},{"start":{"line":265,"column":12},"end":{"line":265,"column":12}}]},"20":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":12},"end":{"line":274,"column":12}},{"start":{"line":274,"column":12},"end":{"line":274,"column":12}}]},"21":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":12},"end":{"line":283,"column":12}},{"start":{"line":283,"column":12},"end":{"line":283,"column":12}}]},"22":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":19},"end":{"line":285,"column":19}},{"start":{"line":285,"column":19},"end":{"line":285,"column":19}}]},"23":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":19},"end":{"line":287,"column":19}},{"start":{"line":287,"column":19},"end":{"line":287,"column":19}}]},"24":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":12},"end":{"line":294,"column":12}},{"start":{"line":294,"column":12},"end":{"line":294,"column":12}}]},"25":{"line":296,"type":"if","locations":[{"start":{"line":296,"column":19},"end":{"line":296,"column":19}},{"start":{"line":296,"column":19},"end":{"line":296,"column":19}}]},"26":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":12},"end":{"line":311,"column":12}},{"start":{"line":311,"column":12},"end":{"line":311,"column":12}}]},"27":{"line":332,"type":"binary-expr","locations":[{"start":{"line":332,"column":16},"end":{"line":332,"column":24}},{"start":{"line":332,"column":28},"end":{"line":332,"column":55}}]},"28":{"line":335,"type":"switch","locations":[{"start":{"line":336,"column":8},"end":{"line":336,"column":23}},{"start":{"line":337,"column":8},"end":{"line":337,"column":35}},{"start":{"line":338,"column":8},"end":{"line":338,"column":34}},{"start":{"line":339,"column":8},"end":{"line":358,"column":18}},{"start":{"line":360,"column":8},"end":{"line":362,"column":18}},{"start":{"line":364,"column":8},"end":{"line":364,"column":37}},{"start":{"line":365,"column":8},"end":{"line":367,"column":18}},{"start":{"line":369,"column":8},"end":{"line":373,"column":18}},{"start":{"line":375,"column":8},"end":{"line":377,"column":18}},{"start":{"line":379,"column":8},"end":{"line":389,"column":18}},{"start":{"line":391,"column":8},"end":{"line":391,"column":30}},{"start":{"line":392,"column":8},"end":{"line":392,"column":32}},{"start":{"line":393,"column":8},"end":{"line":393,"column":28}},{"start":{"line":394,"column":8},"end":{"line":394,"column":30}},{"start":{"line":395,"column":8},"end":{"line":397,"column":18}},{"start":{"line":399,"column":8},"end":{"line":403,"column":18}},{"start":{"line":405,"column":8},"end":{"line":406,"column":18}}]},"29":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":12},"end":{"line":340,"column":12}},{"start":{"line":340,"column":12},"end":{"line":340,"column":12}}]},"30":{"line":386,"type":"if","locations":[{"start":{"line":386,"column":12},"end":{"line":386,"column":12}},{"start":{"line":386,"column":12},"end":{"line":386,"column":12}}]},"31":{"line":386,"type":"binary-expr","locations":[{"start":{"line":386,"column":16},"end":{"line":386,"column":44}},{"start":{"line":386,"column":48},"end":{"line":386,"column":72}}]},"32":{"line":400,"type":"if","locations":[{"start":{"line":400,"column":12},"end":{"line":400,"column":12}},{"start":{"line":400,"column":12},"end":{"line":400,"column":12}}]},"33":{"line":426,"type":"switch","locations":[{"start":{"line":427,"column":8},"end":{"line":427,"column":27}},{"start":{"line":428,"column":8},"end":{"line":428,"column":37}},{"start":{"line":429,"column":8},"end":{"line":431,"column":18}},{"start":{"line":433,"column":8},"end":{"line":435,"column":18}},{"start":{"line":437,"column":8},"end":{"line":450,"column":18}},{"start":{"line":452,"column":8},"end":{"line":454,"column":18}},{"start":{"line":456,"column":8},"end":{"line":460,"column":18}},{"start":{"line":462,"column":8},"end":{"line":466,"column":18}},{"start":{"line":468,"column":8},"end":{"line":472,"column":18}},{"start":{"line":474,"column":8},"end":{"line":478,"column":18}},{"start":{"line":480,"column":8},"end":{"line":485,"column":18}},{"start":{"line":487,"column":8},"end":{"line":487,"column":30}},{"start":{"line":488,"column":8},"end":{"line":488,"column":32}},{"start":{"line":489,"column":8},"end":{"line":491,"column":18}},{"start":{"line":493,"column":8},"end":{"line":493,"column":30}},{"start":{"line":494,"column":8},"end":{"line":494,"column":32}},{"start":{"line":495,"column":8},"end":{"line":495,"column":28}},{"start":{"line":496,"column":8},"end":{"line":496,"column":30}},{"start":{"line":497,"column":8},"end":{"line":499,"column":18}},{"start":{"line":501,"column":8},"end":{"line":503,"column":18}},{"start":{"line":505,"column":8},"end":{"line":509,"column":18}},{"start":{"line":511,"column":8},"end":{"line":512,"column":18}}]},"34":{"line":444,"type":"if","locations":[{"start":{"line":444,"column":12},"end":{"line":444,"column":12}},{"start":{"line":444,"column":12},"end":{"line":444,"column":12}}]},"35":{"line":447,"type":"if","locations":[{"start":{"line":447,"column":12},"end":{"line":447,"column":12}},{"start":{"line":447,"column":12},"end":{"line":447,"column":12}}]},"36":{"line":458,"type":"binary-expr","locations":[{"start":{"line":458,"column":28},"end":{"line":458,"column":38}},{"start":{"line":458,"column":42},"end":{"line":458,"column":57}}]},"37":{"line":464,"type":"binary-expr","locations":[{"start":{"line":464,"column":31},"end":{"line":464,"column":41}},{"start":{"line":464,"column":45},"end":{"line":464,"column":60}}]},"38":{"line":481,"type":"if","locations":[{"start":{"line":481,"column":12},"end":{"line":481,"column":12}},{"start":{"line":481,"column":12},"end":{"line":481,"column":12}}]},"39":{"line":506,"type":"if","locations":[{"start":{"line":506,"column":12},"end":{"line":506,"column":12}},{"start":{"line":506,"column":12},"end":{"line":506,"column":12}}]},"40":{"line":516,"type":"if","locations":[{"start":{"line":516,"column":4},"end":{"line":516,"column":4}},{"start":{"line":516,"column":4},"end":{"line":516,"column":4}}]},"41":{"line":530,"type":"switch","locations":[{"start":{"line":531,"column":8},"end":{"line":531,"column":23}},{"start":{"line":532,"column":8},"end":{"line":532,"column":35}},{"start":{"line":533,"column":8},"end":{"line":533,"column":34}},{"start":{"line":534,"column":8},"end":{"line":553,"column":9}},{"start":{"line":555,"column":8},"end":{"line":556,"column":18}}]},"42":{"line":549,"type":"if","locations":[{"start":{"line":549,"column":12},"end":{"line":549,"column":12}},{"start":{"line":549,"column":12},"end":{"line":549,"column":12}}]},"43":{"line":593,"type":"if","locations":[{"start":{"line":593,"column":8},"end":{"line":593,"column":8}},{"start":{"line":593,"column":8},"end":{"line":593,"column":8}}]},"44":{"line":639,"type":"if","locations":[{"start":{"line":639,"column":8},"end":{"line":639,"column":8}},{"start":{"line":639,"column":8},"end":{"line":639,"column":8}}]},"45":{"line":639,"type":"binary-expr","locations":[{"start":{"line":639,"column":12},"end":{"line":639,"column":33}},{"start":{"line":639,"column":37},"end":{"line":639,"column":56}}]}},"code":["/**"," * @fileoverview A class of the code path analyzer."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const assert = require(\"assert\"),","    CodePath = require(\"./code-path\"),","    CodePathSegment = require(\"./code-path-segment\"),","    IdGenerator = require(\"./id-generator\"),","    debug = require(\"./debug-helpers\"),","    astUtils = require(\"../ast-utils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks whether or not a given node is a `case` node (not `default` node)."," *"," * @param {ASTNode} node - A `SwitchCase` node to check."," * @returns {boolean} `true` if the node is a `case` node (not `default` node)."," */","function isCaseNode(node) {","    return Boolean(node.test);","}","","/**"," * Checks whether or not a given logical expression node goes different path"," * between the `true` case and the `false` case."," *"," * @param {ASTNode} node - A node to check."," * @returns {boolean} `true` if the node is a test of a choice statement."," */","function isForkingByTrueOrFalse(node) {","    const parent = node.parent;","","    switch (parent.type) {","        case \"ConditionalExpression\":","        case \"IfStatement\":","        case \"WhileStatement\":","        case \"DoWhileStatement\":","        case \"ForStatement\":","            return parent.test === node;","","        case \"LogicalExpression\":","            return true;","","        default:","            return false;","    }","}","","/**"," * Gets the boolean value of a given literal node."," *"," * This is used to detect infinity loops (e.g. `while (true) {}`)."," * Statements preceded by an infinity loop are unreachable if the loop didn't"," * have any `break` statement."," *"," * @param {ASTNode} node - A node to get."," * @returns {boolean|undefined} a boolean value if the node is a Literal node,"," *   otherwise `undefined`."," */","function getBooleanValueIfSimpleConstant(node) {","    if (node.type === \"Literal\") {","        return Boolean(node.value);","    }","    return void 0;","}","","/**"," * Checks that a given identifier node is a reference or not."," *"," * This is used to detect the first throwable node in a `try` block."," *"," * @param {ASTNode} node - An Identifier node to check."," * @returns {boolean} `true` if the node is a reference."," */","function isIdentifierReference(node) {","    const parent = node.parent;","","    switch (parent.type) {","        case \"LabeledStatement\":","        case \"BreakStatement\":","        case \"ContinueStatement\":","        case \"ArrayPattern\":","        case \"RestElement\":","        case \"ImportSpecifier\":","        case \"ImportDefaultSpecifier\":","        case \"ImportNamespaceSpecifier\":","        case \"CatchClause\":","            return false;","","        case \"FunctionDeclaration\":","        case \"FunctionExpression\":","        case \"ArrowFunctionExpression\":","        case \"ClassDeclaration\":","        case \"ClassExpression\":","        case \"VariableDeclarator\":","            return parent.id !== node;","","        case \"Property\":","        case \"MethodDefinition\":","            return (","                parent.key !== node ||","                parent.computed ||","                parent.shorthand","            );","","        case \"AssignmentPattern\":","            return parent.key !== node;","","        default:","            return true;","    }","}","","/**"," * Updates the current segment with the head segment."," * This is similar to local branches and tracking branches of git."," *"," * To separate the current and the head is in order to not make useless segments."," *"," * In this process, both \"onCodePathSegmentStart\" and \"onCodePathSegmentEnd\""," * events are fired."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function forwardCurrentToHead(analyzer, node) {","    const codePath = analyzer.codePath;","    const state = CodePath.getState(codePath);","    const currentSegments = state.currentSegments;","    const headSegments = state.headSegments;","    const end = Math.max(currentSegments.length, headSegments.length);","    let i, currentSegment, headSegment;","","    // Fires leaving events.","    for (i = 0; i < end; ++i) {","        currentSegment = currentSegments[i];","        headSegment = headSegments[i];","","        if (currentSegment !== headSegment && currentSegment) {","            debug.dump(`onCodePathSegmentEnd ${currentSegment.id}`);","","            if (currentSegment.reachable) {","                analyzer.emitter.emit(","                    \"onCodePathSegmentEnd\",","                    currentSegment,","                    node);","            }","        }","    }","","    // Update state.","    state.currentSegments = headSegments;","","    // Fires entering events.","    for (i = 0; i < end; ++i) {","        currentSegment = currentSegments[i];","        headSegment = headSegments[i];","","        if (currentSegment !== headSegment && headSegment) {","            debug.dump(`onCodePathSegmentStart ${headSegment.id}`);","","            CodePathSegment.markUsed(headSegment);","            if (headSegment.reachable) {","                analyzer.emitter.emit(","                    \"onCodePathSegmentStart\",","                    headSegment,","                    node);","            }","        }","    }","","}","","/**"," * Updates the current segment with empty."," * This is called at the last of functions or the program."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function leaveFromCurrentSegment(analyzer, node) {","    const state = CodePath.getState(analyzer.codePath);","    const currentSegments = state.currentSegments;","","    for (let i = 0; i < currentSegments.length; ++i) {","        const currentSegment = currentSegments[i];","","        debug.dump(`onCodePathSegmentEnd ${currentSegment.id}`);","        if (currentSegment.reachable) {","            analyzer.emitter.emit(","                \"onCodePathSegmentEnd\",","                currentSegment,","                node);","        }","    }","","    state.currentSegments = [];","}","","/**"," * Updates the code path due to the position of a given node in the parent node"," * thereof."," *"," * For example, if the node is `parent.consequent`, this creates a fork from the"," * current path."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function preprocess(analyzer, node) {","    const codePath = analyzer.codePath;","    const state = CodePath.getState(codePath);","    const parent = node.parent;","","    switch (parent.type) {","        case \"LogicalExpression\":","            if (parent.right === node) {","                state.makeLogicalRight();","            }","            break;","","        case \"ConditionalExpression\":","        case \"IfStatement\":","","            /*","             * Fork if this node is at `consequent`/`alternate`.","             * `popForkContext()` exists at `IfStatement:exit` and","             * `ConditionalExpression:exit`.","             */","            if (parent.consequent === node) {","                state.makeIfConsequent();","            } else if (parent.alternate === node) {","                state.makeIfAlternate();","            }","            break;","","        case \"SwitchCase\":","            if (parent.consequent[0] === node) {","                state.makeSwitchCaseBody(false, !parent.test);","            }","            break;","","        case \"TryStatement\":","            if (parent.handler === node) {","                state.makeCatchBlock();","            } else if (parent.finalizer === node) {","                state.makeFinallyBlock();","            }","            break;","","        case \"WhileStatement\":","            if (parent.test === node) {","                state.makeWhileTest(getBooleanValueIfSimpleConstant(node));","            } else {","                assert(parent.body === node);","                state.makeWhileBody();","            }","            break;","","        case \"DoWhileStatement\":","            if (parent.body === node) {","                state.makeDoWhileBody();","            } else {","                assert(parent.test === node);","                state.makeDoWhileTest(getBooleanValueIfSimpleConstant(node));","            }","            break;","","        case \"ForStatement\":","            if (parent.test === node) {","                state.makeForTest(getBooleanValueIfSimpleConstant(node));","            } else if (parent.update === node) {","                state.makeForUpdate();","            } else if (parent.body === node) {","                state.makeForBody();","            }","            break;","","        case \"ForInStatement\":","        case \"ForOfStatement\":","            if (parent.left === node) {","                state.makeForInOfLeft();","            } else if (parent.right === node) {","                state.makeForInOfRight();","            } else {","                assert(parent.body === node);","                state.makeForInOfBody();","            }","            break;","","        case \"AssignmentPattern\":","","            /*","             * Fork if this node is at `right`.","             * `left` is executed always, so it uses the current path.","             * `popForkContext()` exists at `AssignmentPattern:exit`.","             */","            if (parent.right === node) {","                state.pushForkContext();","                state.forkBypassPath();","                state.forkPath();","            }","            break;","","        default:","            break;","    }","}","","/**"," * Updates the code path due to the type of a given node in entering."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function processCodePathToEnter(analyzer, node) {","    let codePath = analyzer.codePath;","    let state = codePath && CodePath.getState(codePath);","    const parent = node.parent;","","    switch (node.type) {","        case \"Program\":","        case \"FunctionDeclaration\":","        case \"FunctionExpression\":","        case \"ArrowFunctionExpression\":","            if (codePath) {","","                // Emits onCodePathSegmentStart events if updated.","                forwardCurrentToHead(analyzer, node);","                debug.dumpState(node, state, false);","            }","","            // Create the code path of this scope.","            codePath = analyzer.codePath = new CodePath(","                analyzer.idGenerator.next(),","                codePath,","                analyzer.onLooped","            );","            state = CodePath.getState(codePath);","","            // Emits onCodePathStart events.","            debug.dump(`onCodePathStart ${codePath.id}`);","            analyzer.emitter.emit(\"onCodePathStart\", codePath, node);","            break;","","        case \"LogicalExpression\":","            state.pushChoiceContext(node.operator, isForkingByTrueOrFalse(node));","            break;","","        case \"ConditionalExpression\":","        case \"IfStatement\":","            state.pushChoiceContext(\"test\", false);","            break;","","        case \"SwitchStatement\":","            state.pushSwitchContext(","                node.cases.some(isCaseNode),","                astUtils.getLabel(node));","            break;","","        case \"TryStatement\":","            state.pushTryContext(Boolean(node.finalizer));","            break;","","        case \"SwitchCase\":","","            /*","             * Fork if this node is after the 2st node in `cases`.","             * It's similar to `else` blocks.","             * The next `test` node is processed in this path.","             */","            if (parent.discriminant !== node && parent.cases[0] !== node) {","                state.forkPath();","            }","            break;","","        case \"WhileStatement\":","        case \"DoWhileStatement\":","        case \"ForStatement\":","        case \"ForInStatement\":","        case \"ForOfStatement\":","            state.pushLoopContext(node.type, astUtils.getLabel(node));","            break;","","        case \"LabeledStatement\":","            if (!astUtils.isBreakableStatement(node.body)) {","                state.pushBreakContext(false, node.label.name);","            }","            break;","","        default:","            break;","    }","","    // Emits onCodePathSegmentStart events if updated.","    forwardCurrentToHead(analyzer, node);","    debug.dumpState(node, state, false);","}","","/**"," * Updates the code path due to the type of a given node in leaving."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function processCodePathToExit(analyzer, node) {","    const codePath = analyzer.codePath;","    const state = CodePath.getState(codePath);","    let dontForward = false;","","    switch (node.type) {","        case \"IfStatement\":","        case \"ConditionalExpression\":","        case \"LogicalExpression\":","            state.popChoiceContext();","            break;","","        case \"SwitchStatement\":","            state.popSwitchContext();","            break;","","        case \"SwitchCase\":","","            /*","             * This is the same as the process at the 1st `consequent` node in","             * `preprocess` function.","             * Must do if this `consequent` is empty.","             */","            if (node.consequent.length === 0) {","                state.makeSwitchCaseBody(true, !node.test);","            }","            if (state.forkContext.reachable) {","                dontForward = true;","            }","            break;","","        case \"TryStatement\":","            state.popTryContext();","            break;","","        case \"BreakStatement\":","            forwardCurrentToHead(analyzer, node);","            state.makeBreak(node.label && node.label.name);","            dontForward = true;","            break;","","        case \"ContinueStatement\":","            forwardCurrentToHead(analyzer, node);","            state.makeContinue(node.label && node.label.name);","            dontForward = true;","            break;","","        case \"ReturnStatement\":","            forwardCurrentToHead(analyzer, node);","            state.makeReturn();","            dontForward = true;","            break;","","        case \"ThrowStatement\":","            forwardCurrentToHead(analyzer, node);","            state.makeThrow();","            dontForward = true;","            break;","","        case \"Identifier\":","            if (isIdentifierReference(node)) {","                state.makeFirstThrowablePathInTryBlock();","                dontForward = true;","            }","            break;","","        case \"CallExpression\":","        case \"MemberExpression\":","        case \"NewExpression\":","            state.makeFirstThrowablePathInTryBlock();","            break;","","        case \"WhileStatement\":","        case \"DoWhileStatement\":","        case \"ForStatement\":","        case \"ForInStatement\":","        case \"ForOfStatement\":","            state.popLoopContext();","            break;","","        case \"AssignmentPattern\":","            state.popForkContext();","            break;","","        case \"LabeledStatement\":","            if (!astUtils.isBreakableStatement(node.body)) {","                state.popBreakContext();","            }","            break;","","        default:","            break;","    }","","    // Emits onCodePathSegmentStart events if updated.","    if (!dontForward) {","        forwardCurrentToHead(analyzer, node);","    }","    debug.dumpState(node, state, true);","}","","/**"," * Updates the code path to finalize the current code path."," *"," * @param {CodePathAnalyzer} analyzer - The instance."," * @param {ASTNode} node - The current AST node."," * @returns {void}"," */","function postprocess(analyzer, node) {","    switch (node.type) {","        case \"Program\":","        case \"FunctionDeclaration\":","        case \"FunctionExpression\":","        case \"ArrowFunctionExpression\": {","            let codePath = analyzer.codePath;","","            // Mark the current path as the final node.","            CodePath.getState(codePath).makeFinal();","","            // Emits onCodePathSegmentEnd event of the current segments.","            leaveFromCurrentSegment(analyzer, node);","","            // Emits onCodePathEnd event of this code path.","            debug.dump(`onCodePathEnd ${codePath.id}`);","            analyzer.emitter.emit(\"onCodePathEnd\", codePath, node);","            debug.dumpDot(codePath);","","            codePath = analyzer.codePath = analyzer.codePath.upper;","            if (codePath) {","                debug.dumpState(node, CodePath.getState(codePath), true);","            }","            break;","        }","","        default:","            break;","    }","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * The class to analyze code paths."," * This class implements the EventGenerator interface."," */","class CodePathAnalyzer {","","    /**","     * @param {EventGenerator} eventGenerator - An event generator to wrap.","     */","    constructor(eventGenerator) {","        this.original = eventGenerator;","        this.emitter = eventGenerator.emitter;","        this.codePath = null;","        this.idGenerator = new IdGenerator(\"s\");","        this.currentNode = null;","        this.onLooped = this.onLooped.bind(this);","    }","","    /**","     * Does the process to enter a given AST node.","     * This updates state of analysis and calls `enterNode` of the wrapped.","     *","     * @param {ASTNode} node - A node which is entering.","     * @returns {void}","     */","    enterNode(node) {","        this.currentNode = node;","","        // Updates the code path due to node's position in its parent node.","        if (node.parent) {","            preprocess(this, node);","        }","","        // Updates the code path.","        // And emits onCodePathStart/onCodePathSegmentStart events.","        processCodePathToEnter(this, node);","","        // Emits node events.","        this.original.enterNode(node);","","        this.currentNode = null;","    }","","    /**","     * Does the process to leave a given AST node.","     * This updates state of analysis and calls `leaveNode` of the wrapped.","     *","     * @param {ASTNode} node - A node which is leaving.","     * @returns {void}","     */","    leaveNode(node) {","        this.currentNode = node;","","        // Updates the code path.","        // And emits onCodePathStart/onCodePathSegmentStart events.","        processCodePathToExit(this, node);","","        // Emits node events.","        this.original.leaveNode(node);","","        // Emits the last onCodePathStart/onCodePathSegmentStart events.","        postprocess(this, node);","","        this.currentNode = null;","    }","","    /**","     * This is called on a code path looped.","     * Then this raises a looped event.","     *","     * @param {CodePathSegment} fromSegment - A segment of prev.","     * @param {CodePathSegment} toSegment - A segment of next.","     * @returns {void}","     */","    onLooped(fromSegment, toSegment) {","        if (fromSegment.reachable && toSegment.reachable) {","            debug.dump(`onCodePathSegmentLoop ${fromSegment.id} -> ${toSegment.id}`);","            this.emitter.emit(","                \"onCodePathSegmentLoop\",","                fromSegment,","                toSegment,","                this.currentNode","            );","        }","    }","}","","module.exports = CodePathAnalyzer;",""],"l":{"12":1,"29":1,"30":0,"40":1,"41":0,"43":0,"49":0,"52":0,"55":0,"70":1,"71":0,"72":0,"74":0,"85":1,"86":0,"88":0,"98":0,"106":0,"110":0,"117":0,"120":0,"137":1,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"146":0,"147":0,"148":0,"150":0,"151":0,"153":0,"154":0,"163":0,"166":0,"167":0,"168":0,"170":0,"171":0,"173":0,"174":0,"175":0,"193":1,"194":0,"195":0,"197":0,"198":0,"200":0,"201":0,"202":0,"209":0,"223":1,"224":0,"225":0,"226":0,"228":0,"230":0,"231":0,"233":0,"243":0,"244":0,"245":0,"246":0,"248":0,"251":0,"252":0,"254":0,"257":0,"258":0,"259":0,"260":0,"262":0,"265":0,"266":0,"268":0,"269":0,"271":0,"274":0,"275":0,"277":0,"278":0,"280":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"290":0,"294":0,"295":0,"296":0,"297":0,"299":0,"300":0,"302":0,"311":0,"312":0,"313":0,"314":0,"316":0,"319":0,"330":1,"331":0,"332":0,"333":0,"335":0,"340":0,"343":0,"344":0,"348":0,"353":0,"356":0,"357":0,"358":0,"361":0,"362":0,"366":0,"367":0,"370":0,"373":0,"376":0,"377":0,"386":0,"387":0,"389":0,"396":0,"397":0,"400":0,"401":0,"403":0,"406":0,"410":0,"411":0,"421":1,"422":0,"423":0,"424":0,"426":0,"430":0,"431":0,"434":0,"435":0,"444":0,"445":0,"447":0,"448":0,"450":0,"453":0,"454":0,"457":0,"458":0,"459":0,"460":0,"463":0,"464":0,"465":0,"466":0,"469":0,"470":0,"471":0,"472":0,"475":0,"476":0,"477":0,"478":0,"481":0,"482":0,"483":0,"485":0,"490":0,"491":0,"498":0,"499":0,"502":0,"503":0,"506":0,"507":0,"509":0,"512":0,"516":0,"517":0,"519":0,"529":1,"530":0,"535":0,"538":0,"541":0,"544":0,"545":0,"546":0,"548":0,"549":0,"550":0,"552":0,"556":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"590":0,"593":0,"594":0,"599":0,"602":0,"604":0,"615":0,"619":0,"622":0,"625":0,"627":0,"639":0,"640":0,"641":0,"651":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/code-path.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/code-path.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":15},"end":{"line":29,"column":37}}},"2":{"name":"(anonymous_2)","line":68,"loc":{"start":{"line":68,"column":19},"end":{"line":68,"column":30}}},"3":{"name":"(anonymous_3)","line":76,"loc":{"start":{"line":76,"column":22},"end":{"line":76,"column":25}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":21},"end":{"line":85,"column":24}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":24},"end":{"line":95,"column":27}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":22},"end":{"line":103,"column":25}}},"7":{"name":"(anonymous_7)","line":111,"loc":{"start":{"line":111,"column":23},"end":{"line":111,"column":26}}},"8":{"name":"(anonymous_8)","line":135,"loc":{"start":{"line":135,"column":20},"end":{"line":135,"column":40}}},"9":{"name":"(anonymous_9)","line":154,"loc":{"start":{"line":154,"column":16},"end":{"line":154,"column":19}}},"10":{"name":"(anonymous_10)","line":161,"loc":{"start":{"line":161,"column":17},"end":{"line":161,"column":20}}},"11":{"name":"isVisited","line":171,"loc":{"start":{"line":171,"column":8},"end":{"line":171,"column":40}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":46}},"3":{"start":{"line":36,"column":8},"end":{"line":36,"column":21}},"4":{"start":{"line":42,"column":8},"end":{"line":42,"column":27}},"5":{"start":{"line":48,"column":8},"end":{"line":48,"column":33}},"6":{"start":{"line":51,"column":8},"end":{"line":54,"column":79}},"7":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"8":{"start":{"line":58,"column":12},"end":{"line":58,"column":44}},"9":{"start":{"line":69,"column":8},"end":{"line":69,"column":33}},"10":{"start":{"line":77,"column":8},"end":{"line":77,"column":44}},"11":{"start":{"line":86,"column":8},"end":{"line":86,"column":43}},"12":{"start":{"line":96,"column":8},"end":{"line":96,"column":49}},"13":{"start":{"line":104,"column":8},"end":{"line":104,"column":47}},"14":{"start":{"line":112,"column":8},"end":{"line":112,"column":45}},"15":{"start":{"line":136,"column":8},"end":{"line":139,"column":9}},"16":{"start":{"line":137,"column":12},"end":{"line":137,"column":31}},"17":{"start":{"line":138,"column":12},"end":{"line":138,"column":27}},"18":{"start":{"line":141,"column":8},"end":{"line":141,"column":32}},"19":{"start":{"line":142,"column":8},"end":{"line":142,"column":75}},"20":{"start":{"line":143,"column":8},"end":{"line":143,"column":41}},"21":{"start":{"line":145,"column":8},"end":{"line":145,"column":24}},"22":{"start":{"line":146,"column":8},"end":{"line":146,"column":22}},"23":{"start":{"line":147,"column":8},"end":{"line":147,"column":20}},"24":{"start":{"line":148,"column":8},"end":{"line":148,"column":27}},"25":{"start":{"line":149,"column":8},"end":{"line":149,"column":44}},"26":{"start":{"line":150,"column":8},"end":{"line":150,"column":42}},"27":{"start":{"line":151,"column":8},"end":{"line":151,"column":34}},"28":{"start":{"line":152,"column":8},"end":{"line":152,"column":27}},"29":{"start":{"line":153,"column":8},"end":{"line":164,"column":10}},"30":{"start":{"line":155,"column":16},"end":{"line":159,"column":17}},"31":{"start":{"line":156,"column":20},"end":{"line":156,"column":34}},"32":{"start":{"line":158,"column":20},"end":{"line":158,"column":64}},"33":{"start":{"line":162,"column":16},"end":{"line":162,"column":30}},"34":{"start":{"line":171,"column":8},"end":{"line":176,"column":9}},"35":{"start":{"line":172,"column":12},"end":{"line":175,"column":14}},"36":{"start":{"line":178,"column":8},"end":{"line":229,"column":9}},"37":{"start":{"line":179,"column":12},"end":{"line":179,"column":43}},"38":{"start":{"line":180,"column":12},"end":{"line":180,"column":30}},"39":{"start":{"line":181,"column":12},"end":{"line":181,"column":28}},"40":{"start":{"line":183,"column":12},"end":{"line":216,"column":13}},"41":{"start":{"line":186,"column":16},"end":{"line":189,"column":17}},"42":{"start":{"line":187,"column":20},"end":{"line":187,"column":32}},"43":{"start":{"line":188,"column":20},"end":{"line":188,"column":29}},"44":{"start":{"line":192,"column":16},"end":{"line":198,"column":17}},"45":{"start":{"line":196,"column":20},"end":{"line":196,"column":32}},"46":{"start":{"line":197,"column":20},"end":{"line":197,"column":29}},"47":{"start":{"line":201,"column":16},"end":{"line":203,"column":17}},"48":{"start":{"line":202,"column":20},"end":{"line":202,"column":42}},"49":{"start":{"line":204,"column":16},"end":{"line":204,"column":43}},"50":{"start":{"line":207,"column":16},"end":{"line":215,"column":17}},"51":{"start":{"line":208,"column":20},"end":{"line":208,"column":61}},"52":{"start":{"line":209,"column":20},"end":{"line":211,"column":21}},"53":{"start":{"line":210,"column":24},"end":{"line":210,"column":42}},"54":{"start":{"line":212,"column":20},"end":{"line":214,"column":21}},"55":{"start":{"line":213,"column":24},"end":{"line":213,"column":30}},"56":{"start":{"line":219,"column":12},"end":{"line":219,"column":50}},"57":{"start":{"line":220,"column":12},"end":{"line":228,"column":13}},"58":{"start":{"line":221,"column":16},"end":{"line":221,"column":29}},"59":{"start":{"line":222,"column":16},"end":{"line":222,"column":61}},"60":{"start":{"line":223,"column":19},"end":{"line":228,"column":13}},"61":{"start":{"line":224,"column":16},"end":{"line":224,"column":54}},"62":{"start":{"line":225,"column":16},"end":{"line":225,"column":28}},"63":{"start":{"line":227,"column":16},"end":{"line":227,"column":28}},"64":{"start":{"line":233,"column":0},"end":{"line":233,"column":26}}},"branchMap":{"1":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"2":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":136,"column":8}},{"start":{"line":136,"column":8},"end":{"line":136,"column":8}}]},"3":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":18},"end":{"line":141,"column":25}},{"start":{"line":141,"column":29},"end":{"line":141,"column":31}}]},"4":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":29},"end":{"line":142,"column":42}},{"start":{"line":142,"column":46},"end":{"line":142,"column":74}}]},"5":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":16},"end":{"line":155,"column":16}},{"start":{"line":155,"column":16},"end":{"line":155,"column":16}}]},"6":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":16},"end":{"line":173,"column":39}},{"start":{"line":174,"column":16},"end":{"line":174,"column":56}}]},"7":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":12},"end":{"line":183,"column":12}},{"start":{"line":183,"column":12},"end":{"line":183,"column":12}}]},"8":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":16},"end":{"line":186,"column":16}},{"start":{"line":186,"column":16},"end":{"line":186,"column":16}}]},"9":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":16},"end":{"line":192,"column":16}},{"start":{"line":192,"column":16},"end":{"line":192,"column":16}}]},"10":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":20},"end":{"line":192,"column":44}},{"start":{"line":193,"column":20},"end":{"line":193,"column":51}},{"start":{"line":194,"column":20},"end":{"line":194,"column":58}}]},"11":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":16},"end":{"line":201,"column":16}},{"start":{"line":201,"column":16},"end":{"line":201,"column":16}}]},"12":{"line":201,"type":"binary-expr","locations":[{"start":{"line":201,"column":20},"end":{"line":201,"column":34}},{"start":{"line":201,"column":38},"end":{"line":201,"column":89}}]},"13":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":16},"end":{"line":207,"column":16}},{"start":{"line":207,"column":16},"end":{"line":207,"column":16}}]},"14":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":20},"end":{"line":209,"column":20}},{"start":{"line":209,"column":20},"end":{"line":209,"column":20}}]},"15":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":20},"end":{"line":212,"column":20}},{"start":{"line":212,"column":20},"end":{"line":212,"column":20}}]},"16":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":12},"end":{"line":220,"column":12}},{"start":{"line":220,"column":12},"end":{"line":220,"column":12}}]},"17":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":19},"end":{"line":223,"column":19}},{"start":{"line":223,"column":19},"end":{"line":223,"column":19}}]}},"code":["/**"," * @fileoverview A class of the code path."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const CodePathState = require(\"./code-path-state\");","const IdGenerator = require(\"./id-generator\");","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A code path."," */","class CodePath {","","    /**","     * @param {string} id - An identifier.","     * @param {CodePath|null} upper - The code path of the upper function scope.","     * @param {Function} onLooped - A callback function to notify looping.","     */","    constructor(id, upper, onLooped) {","","        /**","         * The identifier of this code path.","         * Rules use it to store additional information of each rule.","         * @type {string}","         */","        this.id = id;","","        /**","         * The code path of the upper function scope.","         * @type {CodePath|null}","         */","        this.upper = upper;","","        /**","         * The code paths of nested function scopes.","         * @type {CodePath[]}","         */","        this.childCodePaths = [];","","        // Initializes internal state.","        Object.defineProperty(","            this,","            \"internal\",","            { value: new CodePathState(new IdGenerator(`${id}_`), onLooped) });","","        // Adds this into `childCodePaths` of `upper`.","        if (upper) {","            upper.childCodePaths.push(this);","        }","    }","","    /**","     * Gets the state of a given code path.","     *","     * @param {CodePath} codePath - A code path to get.","     * @returns {CodePathState} The state of the code path.","     */","    static getState(codePath) {","        return codePath.internal;","    }","","    /**","     * The initial code path segment.","     * @type {CodePathSegment}","     */","    get initialSegment() {","        return this.internal.initialSegment;","    }","","    /**","     * Final code path segments.","     * This array is a mix of `returnedSegments` and `thrownSegments`.","     * @type {CodePathSegment[]}","     */","    get finalSegments() {","        return this.internal.finalSegments;","    }","","    /**","     * Final code path segments which is with `return` statements.","     * This array contains the last path segment if it's reachable.","     * Since the reachable last path returns `undefined`.","     * @type {CodePathSegment[]}","     */","    get returnedSegments() {","        return this.internal.returnedForkContext;","    }","","    /**","     * Final code path segments which is with `throw` statements.","     * @type {CodePathSegment[]}","     */","    get thrownSegments() {","        return this.internal.thrownForkContext;","    }","","    /**","     * Current code path segments.","     * @type {CodePathSegment[]}","     */","    get currentSegments() {","        return this.internal.currentSegments;","    }","","    /**","     * Traverses all segments in this code path.","     *","     *     codePath.traverseSegments(function(segment, controller) {","     *         // do something.","     *     });","     *","     * This method enumerates segments in order from the head.","     *","     * The `controller` object has two methods.","     *","     * - `controller.skip()` - Skip the following segments in this branch.","     * - `controller.break()` - Skip all following segments.","     *","     * @param {Object} [options] - Omittable.","     * @param {CodePathSegment} [options.first] - The first segment to traverse.","     * @param {CodePathSegment} [options.last] - The last segment to traverse.","     * @param {Function} callback - A callback function.","     * @returns {void}","     */","    traverseSegments(options, callback) {","        if (typeof options === \"function\") {","            callback = options;","            options = null;","        }","","        options = options || {};","        const startSegment = options.first || this.internal.initialSegment;","        const lastSegment = options.last;","","        let item = null;","        let index = 0;","        let end = 0;","        let segment = null;","        const visited = Object.create(null);","        const stack = [[startSegment, 0]];","        let skippedSegment = null;","        let broken = false;","        const controller = {","            skip() {","                if (stack.length <= 1) {","                    broken = true;","                } else {","                    skippedSegment = stack[stack.length - 2][0];","                }","            },","            break() {","                broken = true;","            }","        };","","        /**","         * Checks a given previous segment has been visited.","         * @param {CodePathSegment} prevSegment - A previous segment to check.","         * @returns {boolean} `true` if the segment has been visited.","         */","        function isVisited(prevSegment) {","            return (","                visited[prevSegment.id] ||","                segment.isLoopedPrevSegment(prevSegment)","            );","        }","","        while (stack.length > 0) {","            item = stack[stack.length - 1];","            segment = item[0];","            index = item[1];","","            if (index === 0) {","","                // Skip if this segment has been visited already.","                if (visited[segment.id]) {","                    stack.pop();","                    continue;","                }","","                // Skip if all previous segments have not been visited.","                if (segment !== startSegment &&","                    segment.prevSegments.length > 0 &&","                    !segment.prevSegments.every(isVisited)","                ) {","                    stack.pop();","                    continue;","                }","","                // Reset the flag of skipping if all branches have been skipped.","                if (skippedSegment && segment.prevSegments.indexOf(skippedSegment) !== -1) {","                    skippedSegment = null;","                }","                visited[segment.id] = true;","","                // Call the callback when the first time.","                if (!skippedSegment) {","                    callback.call(this, segment, controller); // eslint-disable-line callback-return","                    if (segment === lastSegment) {","                        controller.skip();","                    }","                    if (broken) {","                        break;","                    }","                }","            }","","            // Update the stack.","            end = segment.nextSegments.length - 1;","            if (index < end) {","                item[1] += 1;","                stack.push([segment.nextSegments[index], 0]);","            } else if (index === end) {","                item[0] = segment.nextSegments[index];","                item[1] = 0;","            } else {","                stack.pop();","            }","        }","    }","}","","module.exports = CodePath;",""],"l":{"12":1,"13":1,"36":0,"42":0,"48":0,"51":0,"57":0,"58":0,"69":0,"77":0,"86":0,"96":0,"104":0,"112":0,"136":0,"137":0,"138":0,"141":0,"142":0,"143":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"155":0,"156":0,"158":0,"162":0,"171":1,"172":0,"178":0,"179":0,"180":0,"181":0,"183":0,"186":0,"187":0,"188":0,"192":0,"196":0,"197":0,"201":0,"202":0,"204":0,"207":0,"208":0,"209":0,"210":0,"212":0,"213":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"227":0,"233":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/code-path-state.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/code-path-state.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0,0],"47":[0,0,0,0,0,0],"48":[0,0,0,0,0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},"fnMap":{"1":{"name":"addToReturnedOrThrown","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":60}}},"2":{"name":"getContinueContext","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":42}}},"3":{"name":"getBreakContext","line":75,"loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":39}}},"4":{"name":"getReturnContext","line":95,"loc":{"start":{"line":95,"column":0},"end":{"line":95,"column":33}}},"5":{"name":"getThrowContext","line":114,"loc":{"start":{"line":114,"column":0},"end":{"line":114,"column":32}}},"6":{"name":"remove","line":136,"loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":23}}},"7":{"name":"removeConnection","line":151,"loc":{"start":{"line":151,"column":0},"end":{"line":151,"column":54}}},"8":{"name":"makeLooped","line":171,"loc":{"start":{"line":171,"column":0},"end":{"line":171,"column":53}}},"9":{"name":"finalizeTestSegmentsOfFor","line":206,"loc":{"start":{"line":206,"column":0},"end":{"line":206,"column":65}}},"10":{"name":"(anonymous_10)","line":232,"loc":{"start":{"line":232,"column":15},"end":{"line":232,"column":39}}},"11":{"name":"(anonymous_11)","line":258,"loc":{"start":{"line":258,"column":20},"end":{"line":258,"column":23}}},"12":{"name":"(anonymous_12)","line":267,"loc":{"start":{"line":267,"column":25},"end":{"line":267,"column":28}}},"13":{"name":"(anonymous_13)","line":280,"loc":{"start":{"line":280,"column":19},"end":{"line":280,"column":37}}},"14":{"name":"(anonymous_14)","line":293,"loc":{"start":{"line":293,"column":18},"end":{"line":293,"column":21}}},"15":{"name":"(anonymous_15)","line":306,"loc":{"start":{"line":306,"column":12},"end":{"line":306,"column":15}}},"16":{"name":"(anonymous_16)","line":316,"loc":{"start":{"line":316,"column":18},"end":{"line":316,"column":21}}},"17":{"name":"(anonymous_17)","line":355,"loc":{"start":{"line":355,"column":21},"end":{"line":355,"column":47}}},"18":{"name":"(anonymous_18)","line":371,"loc":{"start":{"line":371,"column":20},"end":{"line":371,"column":23}}},"19":{"name":"(anonymous_19)","line":459,"loc":{"start":{"line":459,"column":20},"end":{"line":459,"column":23}}},"20":{"name":"(anonymous_20)","line":503,"loc":{"start":{"line":503,"column":20},"end":{"line":503,"column":23}}},"21":{"name":"(anonymous_21)","line":530,"loc":{"start":{"line":530,"column":19},"end":{"line":530,"column":22}}},"22":{"name":"(anonymous_22)","line":560,"loc":{"start":{"line":560,"column":21},"end":{"line":560,"column":38}}},"23":{"name":"(anonymous_23)","line":584,"loc":{"start":{"line":584,"column":20},"end":{"line":584,"column":23}}},"24":{"name":"(anonymous_24)","line":660,"loc":{"start":{"line":660,"column":22},"end":{"line":660,"column":43}}},"25":{"name":"(anonymous_25)","line":711,"loc":{"start":{"line":711,"column":18},"end":{"line":711,"column":33}}},"26":{"name":"(anonymous_26)","line":732,"loc":{"start":{"line":732,"column":17},"end":{"line":732,"column":20}}},"27":{"name":"(anonymous_27)","line":786,"loc":{"start":{"line":786,"column":18},"end":{"line":786,"column":21}}},"28":{"name":"(anonymous_28)","line":815,"loc":{"start":{"line":815,"column":20},"end":{"line":815,"column":23}}},"29":{"name":"(anonymous_29)","line":873,"loc":{"start":{"line":873,"column":36},"end":{"line":873,"column":39}}},"30":{"name":"(anonymous_30)","line":906,"loc":{"start":{"line":906,"column":19},"end":{"line":906,"column":33}}},"31":{"name":"(anonymous_31)","line":978,"loc":{"start":{"line":978,"column":18},"end":{"line":978,"column":21}}},"32":{"name":"(anonymous_32)","line":1049,"loc":{"start":{"line":1049,"column":17},"end":{"line":1049,"column":24}}},"33":{"name":"(anonymous_33)","line":1065,"loc":{"start":{"line":1065,"column":17},"end":{"line":1065,"column":20}}},"34":{"name":"(anonymous_34)","line":1087,"loc":{"start":{"line":1087,"column":19},"end":{"line":1087,"column":22}}},"35":{"name":"(anonymous_35)","line":1103,"loc":{"start":{"line":1103,"column":19},"end":{"line":1103,"column":26}}},"36":{"name":"(anonymous_36)","line":1124,"loc":{"start":{"line":1124,"column":15},"end":{"line":1124,"column":22}}},"37":{"name":"(anonymous_37)","line":1142,"loc":{"start":{"line":1142,"column":17},"end":{"line":1142,"column":20}}},"38":{"name":"(anonymous_38)","line":1169,"loc":{"start":{"line":1169,"column":15},"end":{"line":1169,"column":18}}},"39":{"name":"(anonymous_39)","line":1221,"loc":{"start":{"line":1221,"column":19},"end":{"line":1221,"column":22}}},"40":{"name":"(anonymous_40)","line":1238,"loc":{"start":{"line":1238,"column":20},"end":{"line":1238,"column":23}}},"41":{"name":"(anonymous_41)","line":1257,"loc":{"start":{"line":1257,"column":19},"end":{"line":1257,"column":22}}},"42":{"name":"(anonymous_42)","line":1285,"loc":{"start":{"line":1285,"column":20},"end":{"line":1285,"column":39}}},"43":{"name":"(anonymous_43)","line":1300,"loc":{"start":{"line":1300,"column":19},"end":{"line":1300,"column":22}}},"44":{"name":"(anonymous_44)","line":1328,"loc":{"start":{"line":1328,"column":13},"end":{"line":1328,"column":21}}},"45":{"name":"(anonymous_45)","line":1354,"loc":{"start":{"line":1354,"column":16},"end":{"line":1354,"column":24}}},"46":{"name":"(anonymous_46)","line":1389,"loc":{"start":{"line":1389,"column":14},"end":{"line":1389,"column":17}}},"47":{"name":"(anonymous_47)","line":1406,"loc":{"start":{"line":1406,"column":13},"end":{"line":1406,"column":16}}},"48":{"name":"(anonymous_48)","line":1419,"loc":{"start":{"line":1419,"column":13},"end":{"line":1419,"column":16}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":44}},"2":{"start":{"line":32,"column":0},"end":{"line":41,"column":1}},"3":{"start":{"line":33,"column":4},"end":{"line":40,"column":5}},"4":{"start":{"line":34,"column":8},"end":{"line":34,"column":36}},"5":{"start":{"line":36,"column":8},"end":{"line":36,"column":27}},"6":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"7":{"start":{"line":38,"column":12},"end":{"line":38,"column":30}},"8":{"start":{"line":50,"column":0},"end":{"line":66,"column":1}},"9":{"start":{"line":51,"column":4},"end":{"line":53,"column":5}},"10":{"start":{"line":52,"column":8},"end":{"line":52,"column":33}},"11":{"start":{"line":55,"column":4},"end":{"line":55,"column":36}},"12":{"start":{"line":57,"column":4},"end":{"line":62,"column":5}},"13":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"14":{"start":{"line":59,"column":12},"end":{"line":59,"column":27}},"15":{"start":{"line":61,"column":8},"end":{"line":61,"column":32}},"16":{"start":{"line":65,"column":4},"end":{"line":65,"column":16},"skip":true},"17":{"start":{"line":75,"column":0},"end":{"line":87,"column":1}},"18":{"start":{"line":76,"column":4},"end":{"line":76,"column":37}},"19":{"start":{"line":78,"column":4},"end":{"line":83,"column":5}},"20":{"start":{"line":79,"column":8},"end":{"line":81,"column":9}},"21":{"start":{"line":80,"column":12},"end":{"line":80,"column":27}},"22":{"start":{"line":82,"column":8},"end":{"line":82,"column":32}},"23":{"start":{"line":86,"column":4},"end":{"line":86,"column":16},"skip":true},"24":{"start":{"line":95,"column":0},"end":{"line":106,"column":1}},"25":{"start":{"line":96,"column":4},"end":{"line":96,"column":35}},"26":{"start":{"line":98,"column":4},"end":{"line":103,"column":5}},"27":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"28":{"start":{"line":100,"column":12},"end":{"line":100,"column":27}},"29":{"start":{"line":102,"column":8},"end":{"line":102,"column":32}},"30":{"start":{"line":105,"column":4},"end":{"line":105,"column":17}},"31":{"start":{"line":114,"column":0},"end":{"line":127,"column":1}},"32":{"start":{"line":115,"column":4},"end":{"line":115,"column":35}},"33":{"start":{"line":117,"column":4},"end":{"line":124,"column":5}},"34":{"start":{"line":118,"column":8},"end":{"line":122,"column":9}},"35":{"start":{"line":121,"column":12},"end":{"line":121,"column":27}},"36":{"start":{"line":123,"column":8},"end":{"line":123,"column":32}},"37":{"start":{"line":126,"column":4},"end":{"line":126,"column":17}},"38":{"start":{"line":136,"column":0},"end":{"line":138,"column":1}},"39":{"start":{"line":137,"column":4},"end":{"line":137,"column":32}},"40":{"start":{"line":151,"column":0},"end":{"line":161,"column":1}},"41":{"start":{"line":152,"column":4},"end":{"line":160,"column":5}},"42":{"start":{"line":153,"column":8},"end":{"line":153,"column":44}},"43":{"start":{"line":154,"column":8},"end":{"line":154,"column":44}},"44":{"start":{"line":156,"column":8},"end":{"line":156,"column":54}},"45":{"start":{"line":157,"column":8},"end":{"line":157,"column":57}},"46":{"start":{"line":158,"column":8},"end":{"line":158,"column":54}},"47":{"start":{"line":159,"column":8},"end":{"line":159,"column":57}},"48":{"start":{"line":171,"column":0},"end":{"line":193,"column":1}},"49":{"start":{"line":172,"column":4},"end":{"line":172,"column":65}},"50":{"start":{"line":174,"column":4},"end":{"line":192,"column":5}},"51":{"start":{"line":175,"column":8},"end":{"line":175,"column":44}},"52":{"start":{"line":176,"column":8},"end":{"line":176,"column":40}},"53":{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},"54":{"start":{"line":179,"column":12},"end":{"line":179,"column":53}},"55":{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},"56":{"start":{"line":182,"column":12},"end":{"line":182,"column":53}},"57":{"start":{"line":184,"column":8},"end":{"line":184,"column":52}},"58":{"start":{"line":185,"column":8},"end":{"line":185,"column":52}},"59":{"start":{"line":187,"column":8},"end":{"line":189,"column":9}},"60":{"start":{"line":188,"column":12},"end":{"line":188,"column":76}},"61":{"start":{"line":191,"column":8},"end":{"line":191,"column":51}},"62":{"start":{"line":206,"column":0},"end":{"line":216,"column":1}},"63":{"start":{"line":207,"column":4},"end":{"line":210,"column":5}},"64":{"start":{"line":208,"column":8},"end":{"line":208,"column":48}},"65":{"start":{"line":209,"column":8},"end":{"line":209,"column":49}},"66":{"start":{"line":212,"column":4},"end":{"line":214,"column":5}},"67":{"start":{"line":213,"column":8},"end":{"line":213,"column":73}},"68":{"start":{"line":215,"column":4},"end":{"line":215,"column":78}},"69":{"start":{"line":233,"column":8},"end":{"line":233,"column":39}},"70":{"start":{"line":234,"column":8},"end":{"line":234,"column":37}},"71":{"start":{"line":235,"column":8},"end":{"line":235,"column":60}},"72":{"start":{"line":236,"column":8},"end":{"line":236,"column":34}},"73":{"start":{"line":237,"column":8},"end":{"line":237,"column":34}},"74":{"start":{"line":238,"column":8},"end":{"line":238,"column":31}},"75":{"start":{"line":239,"column":8},"end":{"line":239,"column":32}},"76":{"start":{"line":240,"column":8},"end":{"line":240,"column":33}},"77":{"start":{"line":242,"column":8},"end":{"line":242,"column":34}},"78":{"start":{"line":243,"column":8},"end":{"line":243,"column":57}},"79":{"start":{"line":246,"column":8},"end":{"line":246,"column":46}},"80":{"start":{"line":247,"column":8},"end":{"line":247,"column":55}},"81":{"start":{"line":248,"column":8},"end":{"line":248,"column":51}},"82":{"start":{"line":250,"column":8},"end":{"line":250,"column":81}},"83":{"start":{"line":251,"column":8},"end":{"line":251,"column":79}},"84":{"start":{"line":259,"column":8},"end":{"line":259,"column":37}},"85":{"start":{"line":268,"column":8},"end":{"line":268,"column":41}},"86":{"start":{"line":270,"column":8},"end":{"line":270,"column":40}},"87":{"start":{"line":281,"column":8},"end":{"line":284,"column":10}},"88":{"start":{"line":286,"column":8},"end":{"line":286,"column":32}},"89":{"start":{"line":294,"column":8},"end":{"line":294,"column":45}},"90":{"start":{"line":296,"column":8},"end":{"line":296,"column":45}},"91":{"start":{"line":297,"column":8},"end":{"line":297,"column":66}},"92":{"start":{"line":299,"column":8},"end":{"line":299,"column":27}},"93":{"start":{"line":307,"column":8},"end":{"line":307,"column":70}},"94":{"start":{"line":317,"column":8},"end":{"line":317,"column":58}},"95":{"start":{"line":356,"column":8},"end":{"line":363,"column":10}},"96":{"start":{"line":372,"column":8},"end":{"line":372,"column":43}},"97":{"start":{"line":374,"column":8},"end":{"line":374,"column":43}},"98":{"start":{"line":376,"column":8},"end":{"line":376,"column":45}},"99":{"start":{"line":377,"column":8},"end":{"line":377,"column":46}},"100":{"start":{"line":379,"column":8},"end":{"line":442,"column":9}},"101":{"start":{"line":388,"column":16},"end":{"line":391,"column":17}},"102":{"start":{"line":389,"column":20},"end":{"line":389,"column":62}},"103":{"start":{"line":390,"column":20},"end":{"line":390,"column":63}},"104":{"start":{"line":397,"column":16},"end":{"line":405,"column":17}},"105":{"start":{"line":398,"column":20},"end":{"line":398,"column":61}},"106":{"start":{"line":400,"column":20},"end":{"line":400,"column":82}},"107":{"start":{"line":401,"column":20},"end":{"line":401,"column":84}},"108":{"start":{"line":402,"column":20},"end":{"line":402,"column":51}},"109":{"start":{"line":404,"column":20},"end":{"line":404,"column":35}},"110":{"start":{"line":407,"column":16},"end":{"line":407,"column":22}},"111":{"start":{"line":410,"column":16},"end":{"line":427,"column":17}},"112":{"start":{"line":416,"column":20},"end":{"line":416,"column":52}},"113":{"start":{"line":417,"column":20},"end":{"line":417,"column":62}},"114":{"start":{"line":425,"column":20},"end":{"line":425,"column":53}},"115":{"start":{"line":426,"column":20},"end":{"line":426,"column":63}},"116":{"start":{"line":429,"column":16},"end":{"line":429,"column":22}},"117":{"start":{"line":437,"column":16},"end":{"line":437,"column":31}},"118":{"start":{"line":441,"column":16},"end":{"line":441,"column":47},"skip":true},"119":{"start":{"line":445,"column":8},"end":{"line":445,"column":56}},"120":{"start":{"line":447,"column":8},"end":{"line":447,"column":57}},"121":{"start":{"line":448,"column":8},"end":{"line":448,"column":65}},"122":{"start":{"line":450,"column":8},"end":{"line":450,"column":23}},"123":{"start":{"line":460,"column":8},"end":{"line":460,"column":43}},"124":{"start":{"line":461,"column":8},"end":{"line":461,"column":45}},"125":{"start":{"line":463,"column":8},"end":{"line":495,"column":9}},"126":{"start":{"line":469,"column":12},"end":{"line":471,"column":63}},"127":{"start":{"line":473,"column":12},"end":{"line":473,"column":69}},"128":{"start":{"line":474,"column":12},"end":{"line":474,"column":36}},"129":{"start":{"line":476,"column":12},"end":{"line":476,"column":38}},"130":{"start":{"line":484,"column":12},"end":{"line":492,"column":13}},"131":{"start":{"line":487,"column":16},"end":{"line":487,"column":63}},"132":{"start":{"line":491,"column":16},"end":{"line":491,"column":62}},"133":{"start":{"line":494,"column":12},"end":{"line":494,"column":66}},"134":{"start":{"line":504,"column":8},"end":{"line":504,"column":43}},"135":{"start":{"line":505,"column":8},"end":{"line":505,"column":45}},"136":{"start":{"line":512,"column":8},"end":{"line":515,"column":9}},"137":{"start":{"line":513,"column":12},"end":{"line":513,"column":58}},"138":{"start":{"line":514,"column":12},"end":{"line":514,"column":59}},"139":{"start":{"line":517,"column":8},"end":{"line":517,"column":34}},"140":{"start":{"line":520,"column":8},"end":{"line":522,"column":10}},"141":{"start":{"line":531,"column":8},"end":{"line":531,"column":43}},"142":{"start":{"line":532,"column":8},"end":{"line":532,"column":45}},"143":{"start":{"line":538,"column":8},"end":{"line":538,"column":40}},"144":{"start":{"line":539,"column":8},"end":{"line":539,"column":54}},"145":{"start":{"line":540,"column":8},"end":{"line":540,"column":33}},"146":{"start":{"line":543,"column":8},"end":{"line":545,"column":10}},"147":{"start":{"line":561,"column":8},"end":{"line":569,"column":10}},"148":{"start":{"line":571,"column":8},"end":{"line":571,"column":43}},"149":{"start":{"line":585,"column":8},"end":{"line":585,"column":43}},"150":{"start":{"line":587,"column":8},"end":{"line":587,"column":43}},"151":{"start":{"line":589,"column":8},"end":{"line":589,"column":45}},"152":{"start":{"line":590,"column":8},"end":{"line":590,"column":75}},"153":{"start":{"line":592,"column":8},"end":{"line":605,"column":9}},"154":{"start":{"line":599,"column":12},"end":{"line":602,"column":13}},"155":{"start":{"line":600,"column":16},"end":{"line":600,"column":68}},"156":{"start":{"line":601,"column":16},"end":{"line":601,"column":75}},"157":{"start":{"line":604,"column":12},"end":{"line":604,"column":19}},"158":{"start":{"line":607,"column":8},"end":{"line":607,"column":46}},"159":{"start":{"line":609,"column":8},"end":{"line":609,"column":30}},"160":{"start":{"line":610,"column":8},"end":{"line":610,"column":50}},"161":{"start":{"line":616,"column":8},"end":{"line":616,"column":44}},"162":{"start":{"line":622,"column":8},"end":{"line":639,"column":9}},"163":{"start":{"line":623,"column":12},"end":{"line":638,"column":13}},"164":{"start":{"line":629,"column":16},"end":{"line":629,"column":87}},"165":{"start":{"line":630,"column":16},"end":{"line":630,"column":80}},"166":{"start":{"line":637,"column":16},"end":{"line":637,"column":56}},"167":{"start":{"line":642,"column":8},"end":{"line":644,"column":9}},"168":{"start":{"line":643,"column":12},"end":{"line":643,"column":54}},"169":{"start":{"line":650,"column":8},"end":{"line":650,"column":72}},"170":{"start":{"line":661,"column":8},"end":{"line":661,"column":43}},"171":{"start":{"line":663,"column":8},"end":{"line":665,"column":9}},"172":{"start":{"line":664,"column":12},"end":{"line":664,"column":19}},"173":{"start":{"line":672,"column":8},"end":{"line":672,"column":51}},"174":{"start":{"line":673,"column":8},"end":{"line":673,"column":51}},"175":{"start":{"line":675,"column":8},"end":{"line":675,"column":59}},"176":{"start":{"line":682,"column":8},"end":{"line":694,"column":9}},"177":{"start":{"line":683,"column":12},"end":{"line":683,"column":61}},"178":{"start":{"line":684,"column":12},"end":{"line":688,"column":13}},"179":{"start":{"line":685,"column":16},"end":{"line":685,"column":44}},"180":{"start":{"line":687,"column":16},"end":{"line":687,"column":63}},"181":{"start":{"line":690,"column":12},"end":{"line":693,"column":13}},"182":{"start":{"line":691,"column":16},"end":{"line":691,"column":45}},"183":{"start":{"line":692,"column":16},"end":{"line":692,"column":63}},"184":{"start":{"line":696,"column":8},"end":{"line":696,"column":42}},"185":{"start":{"line":697,"column":8},"end":{"line":697,"column":32}},"186":{"start":{"line":712,"column":8},"end":{"line":724,"column":10}},"187":{"start":{"line":733,"column":8},"end":{"line":733,"column":40}},"188":{"start":{"line":735,"column":8},"end":{"line":735,"column":40}},"189":{"start":{"line":737,"column":8},"end":{"line":742,"column":9}},"190":{"start":{"line":740,"column":12},"end":{"line":740,"column":34}},"191":{"start":{"line":741,"column":12},"end":{"line":741,"column":19}},"192":{"start":{"line":749,"column":8},"end":{"line":749,"column":53}},"193":{"start":{"line":750,"column":8},"end":{"line":750,"column":49}},"194":{"start":{"line":752,"column":8},"end":{"line":754,"column":9}},"195":{"start":{"line":753,"column":12},"end":{"line":753,"column":19}},"196":{"start":{"line":757,"column":8},"end":{"line":757,"column":51}},"197":{"start":{"line":759,"column":8},"end":{"line":759,"column":50}},"198":{"start":{"line":760,"column":8},"end":{"line":760,"column":82}},"199":{"start":{"line":761,"column":8},"end":{"line":761,"column":80}},"200":{"start":{"line":764,"column":8},"end":{"line":766,"column":9}},"201":{"start":{"line":765,"column":12},"end":{"line":765,"column":76}},"202":{"start":{"line":767,"column":8},"end":{"line":769,"column":9}},"203":{"start":{"line":768,"column":12},"end":{"line":768,"column":73}},"204":{"start":{"line":772,"column":8},"end":{"line":772,"column":53}},"205":{"start":{"line":776,"column":8},"end":{"line":778,"column":9}},"206":{"start":{"line":777,"column":12},"end":{"line":777,"column":47}},"207":{"start":{"line":787,"column":8},"end":{"line":787,"column":40}},"208":{"start":{"line":788,"column":8},"end":{"line":788,"column":45}},"209":{"start":{"line":789,"column":8},"end":{"line":789,"column":49}},"210":{"start":{"line":792,"column":8},"end":{"line":792,"column":35}},"211":{"start":{"line":793,"column":8},"end":{"line":793,"column":70}},"212":{"start":{"line":794,"column":8},"end":{"line":794,"column":61}},"213":{"start":{"line":797,"column":8},"end":{"line":797,"column":37}},"214":{"start":{"line":798,"column":8},"end":{"line":798,"column":54}},"215":{"start":{"line":801,"column":8},"end":{"line":801,"column":31}},"216":{"start":{"line":802,"column":8},"end":{"line":802,"column":30}},"217":{"start":{"line":803,"column":8},"end":{"line":803,"column":45}},"218":{"start":{"line":816,"column":8},"end":{"line":816,"column":40}},"219":{"start":{"line":817,"column":8},"end":{"line":817,"column":43}},"220":{"start":{"line":818,"column":8},"end":{"line":818,"column":53}},"221":{"start":{"line":819,"column":8},"end":{"line":819,"column":49}},"222":{"start":{"line":820,"column":8},"end":{"line":820,"column":55}},"223":{"start":{"line":823,"column":8},"end":{"line":832,"column":9}},"224":{"start":{"line":826,"column":12},"end":{"line":826,"column":34}},"225":{"start":{"line":827,"column":12},"end":{"line":827,"column":43}},"226":{"start":{"line":829,"column":12},"end":{"line":829,"column":67}},"227":{"start":{"line":831,"column":12},"end":{"line":831,"column":65}},"228":{"start":{"line":833,"column":8},"end":{"line":833,"column":37}},"229":{"start":{"line":835,"column":8},"end":{"line":839,"column":9}},"230":{"start":{"line":838,"column":12},"end":{"line":838,"column":19}},"231":{"start":{"line":845,"column":8},"end":{"line":845,"column":54}},"232":{"start":{"line":846,"column":8},"end":{"line":846,"column":14}},"233":{"start":{"line":848,"column":8},"end":{"line":861,"column":9}},"234":{"start":{"line":849,"column":12},"end":{"line":849,"column":72}},"235":{"start":{"line":851,"column":12},"end":{"line":853,"column":13}},"236":{"start":{"line":852,"column":16},"end":{"line":852,"column":75}},"237":{"start":{"line":854,"column":12},"end":{"line":856,"column":13}},"238":{"start":{"line":855,"column":16},"end":{"line":855,"column":73}},"239":{"start":{"line":858,"column":12},"end":{"line":860,"column":43}},"240":{"start":{"line":863,"column":8},"end":{"line":863,"column":35}},"241":{"start":{"line":864,"column":8},"end":{"line":864,"column":39}},"242":{"start":{"line":874,"column":8},"end":{"line":874,"column":45}},"243":{"start":{"line":876,"column":8},"end":{"line":878,"column":9}},"244":{"start":{"line":877,"column":12},"end":{"line":877,"column":19}},"245":{"start":{"line":880,"column":8},"end":{"line":880,"column":46}},"246":{"start":{"line":882,"column":8},"end":{"line":887,"column":9}},"247":{"start":{"line":886,"column":12},"end":{"line":886,"column":19}},"248":{"start":{"line":889,"column":8},"end":{"line":889,"column":56}},"249":{"start":{"line":890,"column":8},"end":{"line":890,"column":62}},"250":{"start":{"line":907,"column":8},"end":{"line":907,"column":45}},"251":{"start":{"line":908,"column":8},"end":{"line":908,"column":64}},"252":{"start":{"line":910,"column":8},"end":{"line":970,"column":9}},"253":{"start":{"line":912,"column":16},"end":{"line":912,"column":54}},"254":{"start":{"line":913,"column":16},"end":{"line":920,"column":18}},"255":{"start":{"line":921,"column":16},"end":{"line":921,"column":22}},"256":{"start":{"line":924,"column":16},"end":{"line":924,"column":54}},"257":{"start":{"line":925,"column":16},"end":{"line":933,"column":18}},"258":{"start":{"line":934,"column":16},"end":{"line":934,"column":22}},"259":{"start":{"line":937,"column":16},"end":{"line":937,"column":54}},"260":{"start":{"line":938,"column":16},"end":{"line":950,"column":18}},"261":{"start":{"line":951,"column":16},"end":{"line":951,"column":22}},"262":{"start":{"line":955,"column":16},"end":{"line":964,"column":18}},"263":{"start":{"line":965,"column":16},"end":{"line":965,"column":22}},"264":{"start":{"line":969,"column":16},"end":{"line":969,"column":59},"skip":true},"265":{"start":{"line":979,"column":8},"end":{"line":979,"column":41}},"266":{"start":{"line":981,"column":8},"end":{"line":981,"column":41}},"267":{"start":{"line":983,"column":8},"end":{"line":983,"column":45}},"268":{"start":{"line":984,"column":8},"end":{"line":984,"column":75}},"269":{"start":{"line":985,"column":8},"end":{"line":985,"column":26}},"270":{"start":{"line":988,"column":8},"end":{"line":1033,"column":9}},"271":{"start":{"line":991,"column":16},"end":{"line":991,"column":56}},"272":{"start":{"line":992,"column":16},"end":{"line":995,"column":50}},"273":{"start":{"line":996,"column":16},"end":{"line":996,"column":22}},"274":{"start":{"line":999,"column":16},"end":{"line":999,"column":56}},"275":{"start":{"line":1001,"column":16},"end":{"line":1004,"column":17}},"276":{"start":{"line":1002,"column":20},"end":{"line":1002,"column":72}},"277":{"start":{"line":1003,"column":20},"end":{"line":1003,"column":73}},"278":{"start":{"line":1005,"column":16},"end":{"line":1007,"column":17}},"279":{"start":{"line":1006,"column":20},"end":{"line":1006,"column":77}},"280":{"start":{"line":1010,"column":16},"end":{"line":1010,"column":80}},"281":{"start":{"line":1012,"column":16},"end":{"line":1017,"column":17}},"282":{"start":{"line":1013,"column":20},"end":{"line":1016,"column":47}},"283":{"start":{"line":1018,"column":16},"end":{"line":1018,"column":22}},"284":{"start":{"line":1023,"column":16},"end":{"line":1023,"column":56}},"285":{"start":{"line":1024,"column":16},"end":{"line":1027,"column":42}},"286":{"start":{"line":1028,"column":16},"end":{"line":1028,"column":22}},"287":{"start":{"line":1032,"column":16},"end":{"line":1032,"column":47},"skip":true},"288":{"start":{"line":1036,"column":8},"end":{"line":1040,"column":9}},"289":{"start":{"line":1037,"column":12},"end":{"line":1037,"column":73}},"290":{"start":{"line":1039,"column":12},"end":{"line":1039,"column":71}},"291":{"start":{"line":1050,"column":8},"end":{"line":1050,"column":41}},"292":{"start":{"line":1051,"column":8},"end":{"line":1051,"column":45}},"293":{"start":{"line":1052,"column":8},"end":{"line":1052,"column":57}},"294":{"start":{"line":1055,"column":8},"end":{"line":1055,"column":28}},"295":{"start":{"line":1056,"column":8},"end":{"line":1056,"column":52}},"296":{"start":{"line":1057,"column":8},"end":{"line":1057,"column":46}},"297":{"start":{"line":1066,"column":8},"end":{"line":1066,"column":41}},"298":{"start":{"line":1067,"column":8},"end":{"line":1067,"column":49}},"299":{"start":{"line":1068,"column":8},"end":{"line":1068,"column":45}},"300":{"start":{"line":1070,"column":8},"end":{"line":1073,"column":9}},"301":{"start":{"line":1071,"column":12},"end":{"line":1071,"column":64}},"302":{"start":{"line":1072,"column":12},"end":{"line":1072,"column":65}},"303":{"start":{"line":1076,"column":8},"end":{"line":1078,"column":9}},"304":{"start":{"line":1077,"column":12},"end":{"line":1077,"column":77}},"305":{"start":{"line":1079,"column":8},"end":{"line":1079,"column":79}},"306":{"start":{"line":1088,"column":8},"end":{"line":1088,"column":41}},"307":{"start":{"line":1089,"column":8},"end":{"line":1089,"column":45}},"308":{"start":{"line":1090,"column":8},"end":{"line":1090,"column":58}},"309":{"start":{"line":1093,"column":8},"end":{"line":1093,"column":45}},"310":{"start":{"line":1094,"column":8},"end":{"line":1094,"column":46}},"311":{"start":{"line":1104,"column":8},"end":{"line":1104,"column":41}},"312":{"start":{"line":1105,"column":8},"end":{"line":1105,"column":45}},"313":{"start":{"line":1107,"column":8},"end":{"line":1107,"column":28}},"314":{"start":{"line":1110,"column":8},"end":{"line":1115,"column":9}},"315":{"start":{"line":1111,"column":12},"end":{"line":1111,"column":62}},"316":{"start":{"line":1112,"column":12},"end":{"line":1112,"column":77}},"317":{"start":{"line":1114,"column":12},"end":{"line":1114,"column":50}},"318":{"start":{"line":1125,"column":8},"end":{"line":1125,"column":41}},"319":{"start":{"line":1126,"column":8},"end":{"line":1126,"column":45}},"320":{"start":{"line":1127,"column":8},"end":{"line":1127,"column":51}},"321":{"start":{"line":1128,"column":8},"end":{"line":1128,"column":58}},"322":{"start":{"line":1131,"column":8},"end":{"line":1131,"column":28}},"323":{"start":{"line":1132,"column":8},"end":{"line":1132,"column":54}},"324":{"start":{"line":1133,"column":8},"end":{"line":1133,"column":75}},"325":{"start":{"line":1134,"column":8},"end":{"line":1134,"column":46}},"326":{"start":{"line":1143,"column":8},"end":{"line":1143,"column":41}},"327":{"start":{"line":1144,"column":8},"end":{"line":1144,"column":49}},"328":{"start":{"line":1145,"column":8},"end":{"line":1145,"column":45}},"329":{"start":{"line":1148,"column":8},"end":{"line":1155,"column":9}},"330":{"start":{"line":1149,"column":12},"end":{"line":1152,"column":34}},"331":{"start":{"line":1154,"column":12},"end":{"line":1154,"column":57}},"332":{"start":{"line":1158,"column":8},"end":{"line":1158,"column":68}},"333":{"start":{"line":1160,"column":8},"end":{"line":1160,"column":79}},"334":{"start":{"line":1161,"column":8},"end":{"line":1161,"column":48}},"335":{"start":{"line":1170,"column":8},"end":{"line":1170,"column":41}},"336":{"start":{"line":1171,"column":8},"end":{"line":1171,"column":49}},"337":{"start":{"line":1172,"column":8},"end":{"line":1172,"column":45}},"338":{"start":{"line":1175,"column":8},"end":{"line":1192,"column":9}},"339":{"start":{"line":1176,"column":12},"end":{"line":1176,"column":59}},"340":{"start":{"line":1179,"column":12},"end":{"line":1184,"column":13}},"341":{"start":{"line":1180,"column":16},"end":{"line":1183,"column":42}},"342":{"start":{"line":1185,"column":15},"end":{"line":1192,"column":9}},"343":{"start":{"line":1186,"column":12},"end":{"line":1189,"column":34}},"344":{"start":{"line":1191,"column":12},"end":{"line":1191,"column":57}},"345":{"start":{"line":1194,"column":8},"end":{"line":1194,"column":53}},"346":{"start":{"line":1196,"column":8},"end":{"line":1210,"column":9}},"347":{"start":{"line":1202,"column":12},"end":{"line":1202,"column":70}},"348":{"start":{"line":1204,"column":12},"end":{"line":1204,"column":59}},"349":{"start":{"line":1205,"column":12},"end":{"line":1207,"column":13}},"350":{"start":{"line":1206,"column":16},"end":{"line":1206,"column":65}},"351":{"start":{"line":1209,"column":12},"end":{"line":1209,"column":59}},"352":{"start":{"line":1211,"column":8},"end":{"line":1211,"column":84}},"353":{"start":{"line":1212,"column":8},"end":{"line":1212,"column":46}},"354":{"start":{"line":1222,"column":8},"end":{"line":1222,"column":41}},"355":{"start":{"line":1223,"column":8},"end":{"line":1223,"column":45}},"356":{"start":{"line":1224,"column":8},"end":{"line":1224,"column":66}},"357":{"start":{"line":1227,"column":8},"end":{"line":1227,"column":48}},"358":{"start":{"line":1228,"column":8},"end":{"line":1228,"column":75}},"359":{"start":{"line":1229,"column":8},"end":{"line":1229,"column":46}},"360":{"start":{"line":1239,"column":8},"end":{"line":1239,"column":41}},"361":{"start":{"line":1240,"column":8},"end":{"line":1240,"column":45}},"362":{"start":{"line":1241,"column":8},"end":{"line":1241,"column":55}},"363":{"start":{"line":1243,"column":8},"end":{"line":1243,"column":39}},"364":{"start":{"line":1244,"column":8},"end":{"line":1244,"column":52}},"365":{"start":{"line":1247,"column":8},"end":{"line":1247,"column":53}},"366":{"start":{"line":1248,"column":8},"end":{"line":1248,"column":47}},"367":{"start":{"line":1258,"column":8},"end":{"line":1258,"column":41}},"368":{"start":{"line":1259,"column":8},"end":{"line":1259,"column":45}},"369":{"start":{"line":1260,"column":8},"end":{"line":1260,"column":55}},"370":{"start":{"line":1262,"column":8},"end":{"line":1262,"column":44}},"371":{"start":{"line":1263,"column":8},"end":{"line":1263,"column":51}},"372":{"start":{"line":1266,"column":8},"end":{"line":1266,"column":65}},"373":{"start":{"line":1269,"column":8},"end":{"line":1269,"column":56}},"374":{"start":{"line":1270,"column":8},"end":{"line":1270,"column":46}},"375":{"start":{"line":1286,"column":8},"end":{"line":1291,"column":10}},"376":{"start":{"line":1292,"column":8},"end":{"line":1292,"column":33}},"377":{"start":{"line":1301,"column":8},"end":{"line":1301,"column":42}},"378":{"start":{"line":1302,"column":8},"end":{"line":1302,"column":45}},"379":{"start":{"line":1304,"column":8},"end":{"line":1304,"column":42}},"380":{"start":{"line":1307,"column":8},"end":{"line":1314,"column":9}},"381":{"start":{"line":1308,"column":12},"end":{"line":1308,"column":64}},"382":{"start":{"line":1310,"column":12},"end":{"line":1313,"column":13}},"383":{"start":{"line":1311,"column":16},"end":{"line":1311,"column":56}},"384":{"start":{"line":1312,"column":16},"end":{"line":1312,"column":75}},"385":{"start":{"line":1316,"column":8},"end":{"line":1316,"column":23}},"386":{"start":{"line":1329,"column":8},"end":{"line":1329,"column":45}},"387":{"start":{"line":1331,"column":8},"end":{"line":1333,"column":9}},"388":{"start":{"line":1332,"column":12},"end":{"line":1332,"column":19}},"389":{"start":{"line":1335,"column":8},"end":{"line":1335,"column":53}},"390":{"start":{"line":1338,"column":8},"end":{"line":1340,"column":9}},"391":{"start":{"line":1339,"column":12},"end":{"line":1339,"column":60}},"392":{"start":{"line":1342,"column":8},"end":{"line":1342,"column":69}},"393":{"start":{"line":1355,"column":8},"end":{"line":1355,"column":45}},"394":{"start":{"line":1357,"column":8},"end":{"line":1359,"column":9}},"395":{"start":{"line":1358,"column":12},"end":{"line":1358,"column":19}},"396":{"start":{"line":1361,"column":8},"end":{"line":1361,"column":56}},"397":{"start":{"line":1364,"column":8},"end":{"line":1377,"column":9}},"398":{"start":{"line":1365,"column":12},"end":{"line":1376,"column":13}},"399":{"start":{"line":1366,"column":16},"end":{"line":1366,"column":81}},"400":{"start":{"line":1369,"column":16},"end":{"line":1373,"column":17}},"401":{"start":{"line":1372,"column":20},"end":{"line":1372,"column":68}},"402":{"start":{"line":1375,"column":16},"end":{"line":1375,"column":66}},"403":{"start":{"line":1378,"column":8},"end":{"line":1378,"column":69}},"404":{"start":{"line":1390,"column":8},"end":{"line":1390,"column":45}},"405":{"start":{"line":1392,"column":8},"end":{"line":1395,"column":9}},"406":{"start":{"line":1393,"column":12},"end":{"line":1393,"column":77}},"407":{"start":{"line":1394,"column":12},"end":{"line":1394,"column":73}},"408":{"start":{"line":1407,"column":8},"end":{"line":1407,"column":45}},"409":{"start":{"line":1409,"column":8},"end":{"line":1412,"column":9}},"410":{"start":{"line":1410,"column":12},"end":{"line":1410,"column":74}},"411":{"start":{"line":1411,"column":12},"end":{"line":1411,"column":73}},"412":{"start":{"line":1420,"column":8},"end":{"line":1420,"column":46}},"413":{"start":{"line":1422,"column":8},"end":{"line":1424,"column":9}},"414":{"start":{"line":1423,"column":12},"end":{"line":1423,"column":51}},"415":{"start":{"line":1428,"column":0},"end":{"line":1428,"column":31}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"4":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]},"5":{"line":79,"type":"cond-expr","locations":[{"start":{"line":79,"column":20},"end":{"line":79,"column":43}},{"start":{"line":79,"column":46},"end":{"line":79,"column":63}}]},"6":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":8}},{"start":{"line":99,"column":8},"end":{"line":99,"column":8}}]},"7":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":32}},{"start":{"line":99,"column":36},"end":{"line":99,"column":66}}]},"8":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":8},"end":{"line":118,"column":8}},{"start":{"line":118,"column":8},"end":{"line":118,"column":8}}]},"9":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":12},"end":{"line":118,"column":38}},{"start":{"line":119,"column":13},"end":{"line":119,"column":33}},{"start":{"line":119,"column":37},"end":{"line":119,"column":65}}]},"10":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":8},"end":{"line":178,"column":8}},{"start":{"line":178,"column":8},"end":{"line":178,"column":8}}]},"11":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":181,"column":8}},{"start":{"line":181,"column":8},"end":{"line":181,"column":8}}]},"12":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":8},"end":{"line":187,"column":8}},{"start":{"line":187,"column":8},"end":{"line":187,"column":8}}]},"13":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":4},"end":{"line":207,"column":4}},{"start":{"line":207,"column":4},"end":{"line":207,"column":4}}]},"14":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":4},"end":{"line":212,"column":4}},{"start":{"line":212,"column":4},"end":{"line":212,"column":4}}]},"15":{"line":270,"type":"binary-expr","locations":[{"start":{"line":270,"column":15},"end":{"line":270,"column":22}},{"start":{"line":270,"column":26},"end":{"line":270,"column":39}}]},"16":{"line":379,"type":"switch","locations":[{"start":{"line":380,"column":12},"end":{"line":380,"column":22}},{"start":{"line":381,"column":12},"end":{"line":407,"column":22}},{"start":{"line":409,"column":12},"end":{"line":429,"column":22}},{"start":{"line":431,"column":12},"end":{"line":437,"column":31}},{"start":{"line":440,"column":12},"end":{"line":441,"column":47},"skip":true}]},"17":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":16},"end":{"line":388,"column":16}},{"start":{"line":388,"column":16},"end":{"line":388,"column":16}}]},"18":{"line":397,"type":"if","locations":[{"start":{"line":397,"column":16},"end":{"line":397,"column":16}},{"start":{"line":397,"column":16},"end":{"line":397,"column":16}}]},"19":{"line":410,"type":"if","locations":[{"start":{"line":410,"column":16},"end":{"line":410,"column":16}},{"start":{"line":410,"column":16},"end":{"line":410,"column":16}}]},"20":{"line":463,"type":"if","locations":[{"start":{"line":463,"column":8},"end":{"line":463,"column":8}},{"start":{"line":463,"column":8},"end":{"line":463,"column":8}}]},"21":{"line":470,"type":"cond-expr","locations":[{"start":{"line":470,"column":40},"end":{"line":470,"column":63}},{"start":{"line":471,"column":38},"end":{"line":471,"column":62}}]},"22":{"line":484,"type":"if","locations":[{"start":{"line":484,"column":12},"end":{"line":484,"column":12}},{"start":{"line":484,"column":12},"end":{"line":484,"column":12}}]},"23":{"line":512,"type":"if","locations":[{"start":{"line":512,"column":8},"end":{"line":512,"column":8}},{"start":{"line":512,"column":8},"end":{"line":512,"column":8}}]},"24":{"line":592,"type":"if","locations":[{"start":{"line":592,"column":8},"end":{"line":592,"column":8}},{"start":{"line":592,"column":8},"end":{"line":592,"column":8}}]},"25":{"line":599,"type":"if","locations":[{"start":{"line":599,"column":12},"end":{"line":599,"column":12}},{"start":{"line":599,"column":12},"end":{"line":599,"column":12}}]},"26":{"line":622,"type":"if","locations":[{"start":{"line":622,"column":8},"end":{"line":622,"column":8}},{"start":{"line":622,"column":8},"end":{"line":622,"column":8}}]},"27":{"line":623,"type":"if","locations":[{"start":{"line":623,"column":12},"end":{"line":623,"column":12}},{"start":{"line":623,"column":12},"end":{"line":623,"column":12}}]},"28":{"line":663,"type":"if","locations":[{"start":{"line":663,"column":8},"end":{"line":663,"column":8}},{"start":{"line":663,"column":8},"end":{"line":663,"column":8}}]},"29":{"line":682,"type":"if","locations":[{"start":{"line":682,"column":8},"end":{"line":682,"column":8}},{"start":{"line":682,"column":8},"end":{"line":682,"column":8}}]},"30":{"line":684,"type":"if","locations":[{"start":{"line":684,"column":12},"end":{"line":684,"column":12}},{"start":{"line":684,"column":12},"end":{"line":684,"column":12}}]},"31":{"line":690,"type":"if","locations":[{"start":{"line":690,"column":12},"end":{"line":690,"column":12}},{"start":{"line":690,"column":12},"end":{"line":690,"column":12}}]},"32":{"line":690,"type":"binary-expr","locations":[{"start":{"line":690,"column":16},"end":{"line":690,"column":24}},{"start":{"line":690,"column":28},"end":{"line":690,"column":48}}]},"33":{"line":717,"type":"cond-expr","locations":[{"start":{"line":718,"column":18},"end":{"line":718,"column":56}},{"start":{"line":719,"column":18},"end":{"line":719,"column":22}}]},"34":{"line":737,"type":"if","locations":[{"start":{"line":737,"column":8},"end":{"line":737,"column":8}},{"start":{"line":737,"column":8},"end":{"line":737,"column":8}}]},"35":{"line":752,"type":"if","locations":[{"start":{"line":752,"column":8},"end":{"line":752,"column":8}},{"start":{"line":752,"column":8},"end":{"line":752,"column":8}}]},"36":{"line":752,"type":"binary-expr","locations":[{"start":{"line":752,"column":12},"end":{"line":752,"column":26}},{"start":{"line":752,"column":30},"end":{"line":752,"column":42}}]},"37":{"line":764,"type":"if","locations":[{"start":{"line":764,"column":8},"end":{"line":764,"column":8}},{"start":{"line":764,"column":8},"end":{"line":764,"column":8}}]},"38":{"line":767,"type":"if","locations":[{"start":{"line":767,"column":8},"end":{"line":767,"column":8}},{"start":{"line":767,"column":8},"end":{"line":767,"column":8}}]},"39":{"line":776,"type":"if","locations":[{"start":{"line":776,"column":8},"end":{"line":776,"column":8}},{"start":{"line":776,"column":8},"end":{"line":776,"column":8}}]},"40":{"line":776,"type":"binary-expr","locations":[{"start":{"line":776,"column":12},"end":{"line":776,"column":41}},{"start":{"line":776,"column":45},"end":{"line":776,"column":76}}]},"41":{"line":823,"type":"if","locations":[{"start":{"line":823,"column":8},"end":{"line":823,"column":8}},{"start":{"line":823,"column":8},"end":{"line":823,"column":8}}]},"42":{"line":835,"type":"if","locations":[{"start":{"line":835,"column":8},"end":{"line":835,"column":8}},{"start":{"line":835,"column":8},"end":{"line":835,"column":8}}]},"43":{"line":835,"type":"binary-expr","locations":[{"start":{"line":835,"column":12},"end":{"line":835,"column":26}},{"start":{"line":835,"column":30},"end":{"line":835,"column":42}}]},"44":{"line":876,"type":"if","locations":[{"start":{"line":876,"column":8},"end":{"line":876,"column":8}},{"start":{"line":876,"column":8},"end":{"line":876,"column":8}}]},"45":{"line":882,"type":"if","locations":[{"start":{"line":882,"column":8},"end":{"line":882,"column":8}},{"start":{"line":882,"column":8},"end":{"line":882,"column":8}}]},"46":{"line":882,"type":"binary-expr","locations":[{"start":{"line":882,"column":12},"end":{"line":882,"column":28}},{"start":{"line":883,"column":12},"end":{"line":883,"column":38}},{"start":{"line":884,"column":12},"end":{"line":884,"column":44}}]},"47":{"line":910,"type":"switch","locations":[{"start":{"line":911,"column":12},"end":{"line":921,"column":22}},{"start":{"line":923,"column":12},"end":{"line":934,"column":22}},{"start":{"line":936,"column":12},"end":{"line":951,"column":22}},{"start":{"line":953,"column":12},"end":{"line":953,"column":34}},{"start":{"line":954,"column":12},"end":{"line":965,"column":22}},{"start":{"line":968,"column":12},"end":{"line":969,"column":59},"skip":true}]},"48":{"line":988,"type":"switch","locations":[{"start":{"line":989,"column":12},"end":{"line":989,"column":34}},{"start":{"line":990,"column":12},"end":{"line":996,"column":22}},{"start":{"line":998,"column":12},"end":{"line":1019,"column":13}},{"start":{"line":1021,"column":12},"end":{"line":1021,"column":34}},{"start":{"line":1022,"column":12},"end":{"line":1028,"column":22}},{"start":{"line":1031,"column":12},"end":{"line":1032,"column":47},"skip":true}]},"49":{"line":1001,"type":"if","locations":[{"start":{"line":1001,"column":16},"end":{"line":1001,"column":16}},{"start":{"line":1001,"column":16},"end":{"line":1001,"column":16}}]},"50":{"line":1005,"type":"if","locations":[{"start":{"line":1005,"column":16},"end":{"line":1005,"column":16}},{"start":{"line":1005,"column":16},"end":{"line":1005,"column":16}}]},"51":{"line":1036,"type":"if","locations":[{"start":{"line":1036,"column":8},"end":{"line":1036,"column":8}},{"start":{"line":1036,"column":8},"end":{"line":1036,"column":8}}]},"52":{"line":1070,"type":"if","locations":[{"start":{"line":1070,"column":8},"end":{"line":1070,"column":8}},{"start":{"line":1070,"column":8},"end":{"line":1070,"column":8}}]},"53":{"line":1076,"type":"if","locations":[{"start":{"line":1076,"column":8},"end":{"line":1076,"column":8}},{"start":{"line":1076,"column":8},"end":{"line":1076,"column":8}}]},"54":{"line":1110,"type":"if","locations":[{"start":{"line":1110,"column":8},"end":{"line":1110,"column":8}},{"start":{"line":1110,"column":8},"end":{"line":1110,"column":8}}]},"55":{"line":1148,"type":"if","locations":[{"start":{"line":1148,"column":8},"end":{"line":1148,"column":8}},{"start":{"line":1148,"column":8},"end":{"line":1148,"column":8}}]},"56":{"line":1175,"type":"if","locations":[{"start":{"line":1175,"column":8},"end":{"line":1175,"column":8}},{"start":{"line":1175,"column":8},"end":{"line":1175,"column":8}}]},"57":{"line":1179,"type":"if","locations":[{"start":{"line":1179,"column":12},"end":{"line":1179,"column":12}},{"start":{"line":1179,"column":12},"end":{"line":1179,"column":12}}]},"58":{"line":1185,"type":"if","locations":[{"start":{"line":1185,"column":15},"end":{"line":1185,"column":15}},{"start":{"line":1185,"column":15},"end":{"line":1185,"column":15}}]},"59":{"line":1196,"type":"if","locations":[{"start":{"line":1196,"column":8},"end":{"line":1196,"column":8}},{"start":{"line":1196,"column":8},"end":{"line":1196,"column":8}}]},"60":{"line":1205,"type":"if","locations":[{"start":{"line":1205,"column":12},"end":{"line":1205,"column":12}},{"start":{"line":1205,"column":12},"end":{"line":1205,"column":12}}]},"61":{"line":1211,"type":"binary-expr","locations":[{"start":{"line":1211,"column":39},"end":{"line":1211,"column":67}},{"start":{"line":1211,"column":71},"end":{"line":1211,"column":83}}]},"62":{"line":1307,"type":"if","locations":[{"start":{"line":1307,"column":8},"end":{"line":1307,"column":8}},{"start":{"line":1307,"column":8},"end":{"line":1307,"column":8}}]},"63":{"line":1310,"type":"if","locations":[{"start":{"line":1310,"column":12},"end":{"line":1310,"column":12}},{"start":{"line":1310,"column":12},"end":{"line":1310,"column":12}}]},"64":{"line":1331,"type":"if","locations":[{"start":{"line":1331,"column":8},"end":{"line":1331,"column":8}},{"start":{"line":1331,"column":8},"end":{"line":1331,"column":8}}]},"65":{"line":1338,"type":"if","locations":[{"start":{"line":1338,"column":8},"end":{"line":1338,"column":8}},{"start":{"line":1338,"column":8},"end":{"line":1338,"column":8},"skip":true}]},"66":{"line":1357,"type":"if","locations":[{"start":{"line":1357,"column":8},"end":{"line":1357,"column":8}},{"start":{"line":1357,"column":8},"end":{"line":1357,"column":8}}]},"67":{"line":1364,"type":"if","locations":[{"start":{"line":1364,"column":8},"end":{"line":1364,"column":8}},{"start":{"line":1364,"column":8},"end":{"line":1364,"column":8},"skip":true}]},"68":{"line":1365,"type":"if","locations":[{"start":{"line":1365,"column":12},"end":{"line":1365,"column":12}},{"start":{"line":1365,"column":12},"end":{"line":1365,"column":12}}]},"69":{"line":1369,"type":"if","locations":[{"start":{"line":1369,"column":16},"end":{"line":1369,"column":16}},{"start":{"line":1369,"column":16},"end":{"line":1369,"column":16}}]},"70":{"line":1369,"type":"binary-expr","locations":[{"start":{"line":1369,"column":20},"end":{"line":1369,"column":53}},{"start":{"line":1370,"column":20},"end":{"line":1370,"column":53}}]},"71":{"line":1392,"type":"if","locations":[{"start":{"line":1392,"column":8},"end":{"line":1392,"column":8}},{"start":{"line":1392,"column":8},"end":{"line":1392,"column":8}}]},"72":{"line":1409,"type":"if","locations":[{"start":{"line":1409,"column":8},"end":{"line":1409,"column":8}},{"start":{"line":1409,"column":8},"end":{"line":1409,"column":8}}]},"73":{"line":1422,"type":"if","locations":[{"start":{"line":1422,"column":8},"end":{"line":1422,"column":8}},{"start":{"line":1422,"column":8},"end":{"line":1422,"column":8}}]},"74":{"line":1422,"type":"binary-expr","locations":[{"start":{"line":1422,"column":12},"end":{"line":1422,"column":31}},{"start":{"line":1422,"column":35},"end":{"line":1422,"column":56}}]}},"code":["/**"," * @fileoverview A class to manage state of generating a code path."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const CodePathSegment = require(\"./code-path-segment\"),","    ForkContext = require(\"./fork-context\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Adds given segments into the `dest` array."," * If the `others` array does not includes the given segments, adds to the `all`"," * array as well."," *"," * This adds only reachable and used segments."," *"," * @param {CodePathSegment[]} dest - A destination array (`returnedSegments` or `thrownSegments`)."," * @param {CodePathSegment[]} others - Another destination array (`returnedSegments` or `thrownSegments`)."," * @param {CodePathSegment[]} all - The unified destination array (`finalSegments`)."," * @param {CodePathSegment[]} segments - Segments to add."," * @returns {void}"," */","function addToReturnedOrThrown(dest, others, all, segments) {","    for (let i = 0; i < segments.length; ++i) {","        const segment = segments[i];","","        dest.push(segment);","        if (others.indexOf(segment) === -1) {","            all.push(segment);","        }","    }","}","","/**"," * Gets a loop-context for a `continue` statement."," *"," * @param {CodePathState} state - A state to get."," * @param {string} label - The label of a `continue` statement."," * @returns {LoopContext} A loop-context for a `continue` statement."," */","function getContinueContext(state, label) {","    if (!label) {","        return state.loopContext;","    }","","    let context = state.loopContext;","","    while (context) {","        if (context.label === label) {","            return context;","        }","        context = context.upper;","    }","","    /* istanbul ignore next: foolproof (syntax error) */","    return null;","}","","/**"," * Gets a context for a `break` statement."," *"," * @param {CodePathState} state - A state to get."," * @param {string} label - The label of a `break` statement."," * @returns {LoopContext|SwitchContext} A context for a `break` statement."," */","function getBreakContext(state, label) {","    let context = state.breakContext;","","    while (context) {","        if (label ? context.label === label : context.breakable) {","            return context;","        }","        context = context.upper;","    }","","    /* istanbul ignore next: foolproof (syntax error) */","    return null;","}","","/**"," * Gets a context for a `return` statement."," *"," * @param {CodePathState} state - A state to get."," * @returns {TryContext|CodePathState} A context for a `return` statement."," */","function getReturnContext(state) {","    let context = state.tryContext;","","    while (context) {","        if (context.hasFinalizer && context.position !== \"finally\") {","            return context;","        }","        context = context.upper;","    }","","    return state;","}","","/**"," * Gets a context for a `throw` statement."," *"," * @param {CodePathState} state - A state to get."," * @returns {TryContext|CodePathState} A context for a `throw` statement."," */","function getThrowContext(state) {","    let context = state.tryContext;","","    while (context) {","        if (context.position === \"try\" ||","            (context.hasFinalizer && context.position === \"catch\")","        ) {","            return context;","        }","        context = context.upper;","    }","","    return state;","}","","/**"," * Removes a given element from a given array."," *"," * @param {any[]} xs - An array to remove the specific element."," * @param {any} x - An element to be removed."," * @returns {void}"," */","function remove(xs, x) {","    xs.splice(xs.indexOf(x), 1);","}","","/**"," * Disconnect given segments."," *"," * This is used in a process for switch statements."," * If there is the \"default\" chunk before other cases, the order is different"," * between node's and running's."," *"," * @param {CodePathSegment[]} prevSegments - Forward segments to disconnect."," * @param {CodePathSegment[]} nextSegments - Backward segments to disconnect."," * @returns {void}"," */","function removeConnection(prevSegments, nextSegments) {","    for (let i = 0; i < prevSegments.length; ++i) {","        const prevSegment = prevSegments[i];","        const nextSegment = nextSegments[i];","","        remove(prevSegment.nextSegments, nextSegment);","        remove(prevSegment.allNextSegments, nextSegment);","        remove(nextSegment.prevSegments, prevSegment);","        remove(nextSegment.allPrevSegments, prevSegment);","    }","}","","/**"," * Creates looping path."," *"," * @param {CodePathState} state - The instance."," * @param {CodePathSegment[]} fromSegments - Segments which are source."," * @param {CodePathSegment[]} toSegments - Segments which are destination."," * @returns {void}"," */","function makeLooped(state, fromSegments, toSegments) {","    const end = Math.min(fromSegments.length, toSegments.length);","","    for (let i = 0; i < end; ++i) {","        const fromSegment = fromSegments[i];","        const toSegment = toSegments[i];","","        if (toSegment.reachable) {","            fromSegment.nextSegments.push(toSegment);","        }","        if (fromSegment.reachable) {","            toSegment.prevSegments.push(fromSegment);","        }","        fromSegment.allNextSegments.push(toSegment);","        toSegment.allPrevSegments.push(fromSegment);","","        if (toSegment.allPrevSegments.length >= 2) {","            CodePathSegment.markPrevSegmentAsLooped(toSegment, fromSegment);","        }","","        state.notifyLooped(fromSegment, toSegment);","    }","}","","/**"," * Finalizes segments of `test` chunk of a ForStatement."," *"," * - Adds `false` paths to paths which are leaving from the loop."," * - Sets `true` paths to paths which go to the body."," *"," * @param {LoopContext} context - A loop context to modify."," * @param {ChoiceContext} choiceContext - A choice context of this loop."," * @param {CodePathSegment[]} head - The current head paths."," * @returns {void}"," */","function finalizeTestSegmentsOfFor(context, choiceContext, head) {","    if (!choiceContext.processed) {","        choiceContext.trueForkContext.add(head);","        choiceContext.falseForkContext.add(head);","    }","","    if (context.test !== true) {","        context.brokenForkContext.addAll(choiceContext.falseForkContext);","    }","    context.endOfTestSegments = choiceContext.trueForkContext.makeNext(0, -1);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A class which manages state to analyze code paths."," */","class CodePathState {","","    /**","     * @param {IdGenerator} idGenerator - An id generator to generate id for code","     *   path segments.","     * @param {Function} onLooped - A callback function to notify looping.","     */","    constructor(idGenerator, onLooped) {","        this.idGenerator = idGenerator;","        this.notifyLooped = onLooped;","        this.forkContext = ForkContext.newRoot(idGenerator);","        this.choiceContext = null;","        this.switchContext = null;","        this.tryContext = null;","        this.loopContext = null;","        this.breakContext = null;","","        this.currentSegments = [];","        this.initialSegment = this.forkContext.head[ 0 ];","","        // returnedSegments and thrownSegments push elements into finalSegments also.","        const final = this.finalSegments = [];","        const returned = this.returnedForkContext = [];","        const thrown = this.thrownForkContext = [];","","        returned.add = addToReturnedOrThrown.bind(null, returned, thrown, final);","        thrown.add = addToReturnedOrThrown.bind(null, thrown, returned, final);","    }","","    /**","     * The head segments.","     * @type {CodePathSegment[]}","     */","    get headSegments() {","        return this.forkContext.head;","    }","","    /**","     * The parent forking context.","     * This is used for the root of new forks.","     * @type {ForkContext}","     */","    get parentForkContext() {","        const current = this.forkContext;","","        return current && current.upper;","    }","","    /**","     * Creates and stacks new forking context.","     *","     * @param {boolean} forkLeavingPath - A flag which shows being in a","     *   \"finally\" block.","     * @returns {ForkContext} The created context.","     */","    pushForkContext(forkLeavingPath) {","        this.forkContext = ForkContext.newEmpty(","            this.forkContext,","            forkLeavingPath","        );","","        return this.forkContext;","    }","","    /**","     * Pops and merges the last forking context.","     * @returns {ForkContext} The last context.","     */","    popForkContext() {","        const lastContext = this.forkContext;","","        this.forkContext = lastContext.upper;","        this.forkContext.replaceHead(lastContext.makeNext(0, -1));","","        return lastContext;","    }","","    /**","     * Creates a new path.","     * @returns {void}","     */","    forkPath() {","        this.forkContext.add(this.parentForkContext.makeNext(-1, -1));","    }","","    /**","     * Creates a bypass path.","     * This is used for such as IfStatement which does not have \"else\" chunk.","     *","     * @returns {void}","     */","    forkBypassPath() {","        this.forkContext.add(this.parentForkContext.head);","    }","","    //--------------------------------------------------------------------------","    // ConditionalExpression, LogicalExpression, IfStatement","    //--------------------------------------------------------------------------","","    /**","     * Creates a context for ConditionalExpression, LogicalExpression,","     * IfStatement, WhileStatement, DoWhileStatement, or ForStatement.","     *","     * LogicalExpressions have cases that it goes different paths between the","     * `true` case and the `false` case.","     *","     * For Example:","     *","     *     if (a || b) {","     *         foo();","     *     } else {","     *         bar();","     *     }","     *","     * In this case, `b` is evaluated always in the code path of the `else`","     * block, but it's not so in the code path of the `if` block.","     * So there are 3 paths.","     *","     *     a -> foo();","     *     a -> b -> foo();","     *     a -> b -> bar();","     *","     * @param {string} kind - A kind string.","     *   If the new context is LogicalExpression's, this is `\"&&\"` or `\"||\"`.","     *   If it's IfStatement's or ConditionalExpression's, this is `\"test\"`.","     *   Otherwise, this is `\"loop\"`.","     * @param {boolean} isForkingAsResult - A flag that shows that goes different","     *   paths between `true` and `false`.","     * @returns {void}","     */","    pushChoiceContext(kind, isForkingAsResult) {","        this.choiceContext = {","            upper: this.choiceContext,","            kind,","            isForkingAsResult,","            trueForkContext: ForkContext.newEmpty(this.forkContext),","            falseForkContext: ForkContext.newEmpty(this.forkContext),","            processed: false","        };","    }","","    /**","     * Pops the last choice context and finalizes it.","     *","     * @returns {ChoiceContext} The popped context.","     */","    popChoiceContext() {","        const context = this.choiceContext;","","        this.choiceContext = context.upper;","","        const forkContext = this.forkContext;","        const headSegments = forkContext.head;","","        switch (context.kind) {","            case \"&&\":","            case \"||\":","","                /*","                 * If any result were not transferred from child contexts,","                 * this sets the head segments to both cases.","                 * The head segments are the path of the right-hand operand.","                 */","                if (!context.processed) {","                    context.trueForkContext.add(headSegments);","                    context.falseForkContext.add(headSegments);","                }","","                /*","                 * Transfers results to upper context if this context is in","                 * test chunk.","                 */","                if (context.isForkingAsResult) {","                    const parentContext = this.choiceContext;","","                    parentContext.trueForkContext.addAll(context.trueForkContext);","                    parentContext.falseForkContext.addAll(context.falseForkContext);","                    parentContext.processed = true;","","                    return context;","                }","","                break;","","            case \"test\":","                if (!context.processed) {","","                    /*","                     * The head segments are the path of the `if` block here.","                     * Updates the `true` path with the end of the `if` block.","                     */","                    context.trueForkContext.clear();","                    context.trueForkContext.add(headSegments);","                } else {","","                    /*","                     * The head segments are the path of the `else` block here.","                     * Updates the `false` path with the end of the `else`","                     * block.","                     */","                    context.falseForkContext.clear();","                    context.falseForkContext.add(headSegments);","                }","","                break;","","            case \"loop\":","","                /*","                 * Loops are addressed in popLoopContext().","                 * This is called from popLoopContext().","                 */","                return context;","","            /* istanbul ignore next */","            default:","                throw new Error(\"unreachable\");","        }","","        // Merges all paths.","        const prevForkContext = context.trueForkContext;","","        prevForkContext.addAll(context.falseForkContext);","        forkContext.replaceHead(prevForkContext.makeNext(0, -1));","","        return context;","    }","","    /**","     * Makes a code path segment of the right-hand operand of a logical","     * expression.","     *","     * @returns {void}","     */","    makeLogicalRight() {","        const context = this.choiceContext;","        const forkContext = this.forkContext;","","        if (context.processed) {","","            /*","             * This got segments already from the child choice context.","             * Creates the next path from own true/false fork context.","             */","            const prevForkContext =","                context.kind === \"&&\" ? context.trueForkContext","                /* kind === \"||\" */ : context.falseForkContext;","","            forkContext.replaceHead(prevForkContext.makeNext(0, -1));","            prevForkContext.clear();","","            context.processed = false;","        } else {","","            /*","             * This did not get segments from the child choice context.","             * So addresses the head segments.","             * The head segments are the path of the left-hand operand.","             */","            if (context.kind === \"&&\") {","","                // The path does short-circuit if false.","                context.falseForkContext.add(forkContext.head);","            } else {","","                // The path does short-circuit if true.","                context.trueForkContext.add(forkContext.head);","            }","","            forkContext.replaceHead(forkContext.makeNext(-1, -1));","        }","    }","","    /**","     * Makes a code path segment of the `if` block.","     *","     * @returns {void}","     */","    makeIfConsequent() {","        const context = this.choiceContext;","        const forkContext = this.forkContext;","","        /*","         * If any result were not transferred from child contexts,","         * this sets the head segments to both cases.","         * The head segments are the path of the test expression.","         */","        if (!context.processed) {","            context.trueForkContext.add(forkContext.head);","            context.falseForkContext.add(forkContext.head);","        }","","        context.processed = false;","","        // Creates new path from the `true` case.","        forkContext.replaceHead(","            context.trueForkContext.makeNext(0, -1)","        );","    }","","    /**","     * Makes a code path segment of the `else` block.","     *","     * @returns {void}","     */","    makeIfAlternate() {","        const context = this.choiceContext;","        const forkContext = this.forkContext;","","        /*","         * The head segments are the path of the `if` block.","         * Updates the `true` path with the end of the `if` block.","         */","        context.trueForkContext.clear();","        context.trueForkContext.add(forkContext.head);","        context.processed = true;","","        // Creates new path from the `false` case.","        forkContext.replaceHead(","            context.falseForkContext.makeNext(0, -1)","        );","    }","","    //--------------------------------------------------------------------------","    // SwitchStatement","    //--------------------------------------------------------------------------","","    /**","     * Creates a context object of SwitchStatement and stacks it.","     *","     * @param {boolean} hasCase - `true` if the switch statement has one or more","     *   case parts.","     * @param {string|null} label - The label text.","     * @returns {void}","     */","    pushSwitchContext(hasCase, label) {","        this.switchContext = {","            upper: this.switchContext,","            hasCase,","            defaultSegments: null,","            defaultBodySegments: null,","            foundDefault: false,","            lastIsDefault: false,","            countForks: 0","        };","","        this.pushBreakContext(true, label);","    }","","    /**","     * Pops the last context of SwitchStatement and finalizes it.","     *","     * - Disposes all forking stack for `case` and `default`.","     * - Creates the next code path segment from `context.brokenForkContext`.","     * - If the last `SwitchCase` node is not a `default` part, creates a path","     *   to the `default` body.","     *","     * @returns {void}","     */","    popSwitchContext() {","        const context = this.switchContext;","","        this.switchContext = context.upper;","","        const forkContext = this.forkContext;","        const brokenForkContext = this.popBreakContext().brokenForkContext;","","        if (context.countForks === 0) {","","            /*","             * When there is only one `default` chunk and there is one or more","             * `break` statements, even if forks are nothing, it needs to merge","             * those.","             */","            if (!brokenForkContext.empty) {","                brokenForkContext.add(forkContext.makeNext(-1, -1));","                forkContext.replaceHead(brokenForkContext.makeNext(0, -1));","            }","","            return;","        }","","        const lastSegments = forkContext.head;","","        this.forkBypassPath();","        const lastCaseSegments = forkContext.head;","","        /*","         * `brokenForkContext` is used to make the next segment.","         * It must add the last segment into `brokenForkContext`.","         */","        brokenForkContext.add(lastSegments);","","        /*","         * A path which is failed in all case test should be connected to path","         * of `default` chunk.","         */","        if (!context.lastIsDefault) {","            if (context.defaultBodySegments) {","","                /*","                 * Remove a link from `default` label to its chunk.","                 * It's false route.","                 */","                removeConnection(context.defaultSegments, context.defaultBodySegments);","                makeLooped(this, lastCaseSegments, context.defaultBodySegments);","            } else {","","                /*","                 * It handles the last case body as broken if `default` chunk","                 * does not exist.","                 */","                brokenForkContext.add(lastCaseSegments);","            }","        }","","        // Pops the segment context stack until the entry segment.","        for (let i = 0; i < context.countForks; ++i) {","            this.forkContext = this.forkContext.upper;","        }","","        /*","         * Creates a path from all brokenForkContext paths.","         * This is a path after switch statement.","         */","        this.forkContext.replaceHead(brokenForkContext.makeNext(0, -1));","    }","","    /**","     * Makes a code path segment for a `SwitchCase` node.","     *","     * @param {boolean} isEmpty - `true` if the body is empty.","     * @param {boolean} isDefault - `true` if the body is the default case.","     * @returns {void}","     */","    makeSwitchCaseBody(isEmpty, isDefault) {","        const context = this.switchContext;","","        if (!context.hasCase) {","            return;","        }","","        /*","         * Merge forks.","         * The parent fork context has two segments.","         * Those are from the current case and the body of the previous case.","         */","        const parentForkContext = this.forkContext;","        const forkContext = this.pushForkContext();","","        forkContext.add(parentForkContext.makeNext(0, -1));","","        /*","         * Save `default` chunk info.","         * If the `default` label is not at the last, we must make a path from","         * the last `case` to the `default` chunk.","         */","        if (isDefault) {","            context.defaultSegments = parentForkContext.head;","            if (isEmpty) {","                context.foundDefault = true;","            } else {","                context.defaultBodySegments = forkContext.head;","            }","        } else {","            if (!isEmpty && context.foundDefault) {","                context.foundDefault = false;","                context.defaultBodySegments = forkContext.head;","            }","        }","","        context.lastIsDefault = isDefault;","        context.countForks += 1;","    }","","    //--------------------------------------------------------------------------","    // TryStatement","    //--------------------------------------------------------------------------","","    /**","     * Creates a context object of TryStatement and stacks it.","     *","     * @param {boolean} hasFinalizer - `true` if the try statement has a","     *   `finally` block.","     * @returns {void}","     */","    pushTryContext(hasFinalizer) {","        this.tryContext = {","            upper: this.tryContext,","            position: \"try\",","            hasFinalizer,","","            returnedForkContext: hasFinalizer","                ? ForkContext.newEmpty(this.forkContext)","                : null,","","            thrownForkContext: ForkContext.newEmpty(this.forkContext),","            lastOfTryIsReachable: false,","            lastOfCatchIsReachable: false","        };","    }","","    /**","     * Pops the last context of TryStatement and finalizes it.","     *","     * @returns {void}","     */","    popTryContext() {","        const context = this.tryContext;","","        this.tryContext = context.upper;","","        if (context.position === \"catch\") {","","            // Merges two paths from the `try` block and `catch` block merely.","            this.popForkContext();","            return;","        }","","        /*","         * The following process is executed only when there is the `finally`","         * block.","         */","","        const returned = context.returnedForkContext;","        const thrown = context.thrownForkContext;","","        if (returned.empty && thrown.empty) {","            return;","        }","","        // Separate head to normal paths and leaving paths.","        const headSegments = this.forkContext.head;","","        this.forkContext = this.forkContext.upper;","        const normalSegments = headSegments.slice(0, headSegments.length / 2 | 0);","        const leavingSegments = headSegments.slice(headSegments.length / 2 | 0);","","        // Forwards the leaving path to upper contexts.","        if (!returned.empty) {","            getReturnContext(this).returnedForkContext.add(leavingSegments);","        }","        if (!thrown.empty) {","            getThrowContext(this).thrownForkContext.add(leavingSegments);","        }","","        // Sets the normal path as the next.","        this.forkContext.replaceHead(normalSegments);","","        // If both paths of the `try` block and the `catch` block are","        // unreachable, the next path becomes unreachable as well.","        if (!context.lastOfTryIsReachable && !context.lastOfCatchIsReachable) {","            this.forkContext.makeUnreachable();","        }","    }","","    /**","     * Makes a code path segment for a `catch` block.","     *","     * @returns {void}","     */","    makeCatchBlock() {","        const context = this.tryContext;","        const forkContext = this.forkContext;","        const thrown = context.thrownForkContext;","","        // Update state.","        context.position = \"catch\";","        context.thrownForkContext = ForkContext.newEmpty(forkContext);","        context.lastOfTryIsReachable = forkContext.reachable;","","        // Merge thrown paths.","        thrown.add(forkContext.head);","        const thrownSegments = thrown.makeNext(0, -1);","","        // Fork to a bypass and the merged thrown path.","        this.pushForkContext();","        this.forkBypassPath();","        this.forkContext.add(thrownSegments);","    }","","    /**","     * Makes a code path segment for a `finally` block.","     *","     * In the `finally` block, parallel paths are created. The parallel paths","     * are used as leaving-paths. The leaving-paths are paths from `return`","     * statements and `throw` statements in a `try` block or a `catch` block.","     *","     * @returns {void}","     */","    makeFinallyBlock() {","        const context = this.tryContext;","        let forkContext = this.forkContext;","        const returned = context.returnedForkContext;","        const thrown = context.thrownForkContext;","        const headOfLeavingSegments = forkContext.head;","","        // Update state.","        if (context.position === \"catch\") {","","            // Merges two paths from the `try` block and `catch` block.","            this.popForkContext();","            forkContext = this.forkContext;","","            context.lastOfCatchIsReachable = forkContext.reachable;","        } else {","            context.lastOfTryIsReachable = forkContext.reachable;","        }","        context.position = \"finally\";","","        if (returned.empty && thrown.empty) {","","            // This path does not leave.","            return;","        }","","        /*","         * Create a parallel segment from merging returned and thrown.","         * This segment will leave at the end of this finally block.","         */","        const segments = forkContext.makeNext(-1, -1);","        let j;","","        for (let i = 0; i < forkContext.count; ++i) {","            const prevSegsOfLeavingSegment = [headOfLeavingSegments[i]];","","            for (j = 0; j < returned.segmentsList.length; ++j) {","                prevSegsOfLeavingSegment.push(returned.segmentsList[j][i]);","            }","            for (j = 0; j < thrown.segmentsList.length; ++j) {","                prevSegsOfLeavingSegment.push(thrown.segmentsList[j][i]);","            }","","            segments.push(CodePathSegment.newNext(","                this.idGenerator.next(),","                prevSegsOfLeavingSegment));","        }","","        this.pushForkContext(true);","        this.forkContext.add(segments);","    }","","    /**","     * Makes a code path segment from the first throwable node to the `catch`","     * block or the `finally` block.","     *","     * @returns {void}","     */","    makeFirstThrowablePathInTryBlock() {","        const forkContext = this.forkContext;","","        if (!forkContext.reachable) {","            return;","        }","","        const context = getThrowContext(this);","","        if (context === this ||","            context.position !== \"try\" ||","            !context.thrownForkContext.empty","        ) {","            return;","        }","","        context.thrownForkContext.add(forkContext.head);","        forkContext.replaceHead(forkContext.makeNext(-1, -1));","    }","","    //--------------------------------------------------------------------------","    // Loop Statements","    //--------------------------------------------------------------------------","","    /**","     * Creates a context object of a loop statement and stacks it.","     *","     * @param {string} type - The type of the node which was triggered. One of","     *   `WhileStatement`, `DoWhileStatement`, `ForStatement`, `ForInStatement`,","     *   and `ForStatement`.","     * @param {string|null} label - A label of the node which was triggered.","     * @returns {void}","     */","    pushLoopContext(type, label) {","        const forkContext = this.forkContext;","        const breakContext = this.pushBreakContext(true, label);","","        switch (type) {","            case \"WhileStatement\":","                this.pushChoiceContext(\"loop\", false);","                this.loopContext = {","                    upper: this.loopContext,","                    type,","                    label,","                    test: void 0,","                    continueDestSegments: null,","                    brokenForkContext: breakContext.brokenForkContext","                };","                break;","","            case \"DoWhileStatement\":","                this.pushChoiceContext(\"loop\", false);","                this.loopContext = {","                    upper: this.loopContext,","                    type,","                    label,","                    test: void 0,","                    entrySegments: null,","                    continueForkContext: ForkContext.newEmpty(forkContext),","                    brokenForkContext: breakContext.brokenForkContext","                };","                break;","","            case \"ForStatement\":","                this.pushChoiceContext(\"loop\", false);","                this.loopContext = {","                    upper: this.loopContext,","                    type,","                    label,","                    test: void 0,","                    endOfInitSegments: null,","                    testSegments: null,","                    endOfTestSegments: null,","                    updateSegments: null,","                    endOfUpdateSegments: null,","                    continueDestSegments: null,","                    brokenForkContext: breakContext.brokenForkContext","                };","                break;","","            case \"ForInStatement\":","            case \"ForOfStatement\":","                this.loopContext = {","                    upper: this.loopContext,","                    type,","                    label,","                    prevSegments: null,","                    leftSegments: null,","                    endOfLeftSegments: null,","                    continueDestSegments: null,","                    brokenForkContext: breakContext.brokenForkContext","                };","                break;","","            /* istanbul ignore next */","            default:","                throw new Error(`unknown type: \"${type}\"`);","        }","    }","","    /**","     * Pops the last context of a loop statement and finalizes it.","     *","     * @returns {void}","     */","    popLoopContext() {","        const context = this.loopContext;","","        this.loopContext = context.upper;","","        const forkContext = this.forkContext;","        const brokenForkContext = this.popBreakContext().brokenForkContext;","        let choiceContext;","","        // Creates a looped path.","        switch (context.type) {","            case \"WhileStatement\":","            case \"ForStatement\":","                choiceContext = this.popChoiceContext();","                makeLooped(","                    this,","                    forkContext.head,","                    context.continueDestSegments);","                break;","","            case \"DoWhileStatement\": {","                choiceContext = this.popChoiceContext();","","                if (!choiceContext.processed) {","                    choiceContext.trueForkContext.add(forkContext.head);","                    choiceContext.falseForkContext.add(forkContext.head);","                }","                if (context.test !== true) {","                    brokenForkContext.addAll(choiceContext.falseForkContext);","                }","","                // `true` paths go to looping.","                const segmentsList = choiceContext.trueForkContext.segmentsList;","","                for (let i = 0; i < segmentsList.length; ++i) {","                    makeLooped(","                        this,","                        segmentsList[i],","                        context.entrySegments);","                }","                break;","            }","","            case \"ForInStatement\":","            case \"ForOfStatement\":","                brokenForkContext.add(forkContext.head);","                makeLooped(","                    this,","                    forkContext.head,","                    context.leftSegments);","                break;","","            /* istanbul ignore next */","            default:","                throw new Error(\"unreachable\");","        }","","        // Go next.","        if (brokenForkContext.empty) {","            forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","        } else {","            forkContext.replaceHead(brokenForkContext.makeNext(0, -1));","        }","    }","","    /**","     * Makes a code path segment for the test part of a WhileStatement.","     *","     * @param {boolean|undefined} test - The test value (only when constant).","     * @returns {void}","     */","    makeWhileTest(test) {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const testSegments = forkContext.makeNext(0, -1);","","        // Update state.","        context.test = test;","        context.continueDestSegments = testSegments;","        forkContext.replaceHead(testSegments);","    }","","    /**","     * Makes a code path segment for the body part of a WhileStatement.","     *","     * @returns {void}","     */","    makeWhileBody() {","        const context = this.loopContext;","        const choiceContext = this.choiceContext;","        const forkContext = this.forkContext;","","        if (!choiceContext.processed) {","            choiceContext.trueForkContext.add(forkContext.head);","            choiceContext.falseForkContext.add(forkContext.head);","        }","","        // Update state.","        if (context.test !== true) {","            context.brokenForkContext.addAll(choiceContext.falseForkContext);","        }","        forkContext.replaceHead(choiceContext.trueForkContext.makeNext(0, -1));","    }","","    /**","     * Makes a code path segment for the body part of a DoWhileStatement.","     *","     * @returns {void}","     */","    makeDoWhileBody() {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const bodySegments = forkContext.makeNext(-1, -1);","","        // Update state.","        context.entrySegments = bodySegments;","        forkContext.replaceHead(bodySegments);","    }","","    /**","     * Makes a code path segment for the test part of a DoWhileStatement.","     *","     * @param {boolean|undefined} test - The test value (only when constant).","     * @returns {void}","     */","    makeDoWhileTest(test) {","        const context = this.loopContext;","        const forkContext = this.forkContext;","","        context.test = test;","","        // Creates paths of `continue` statements.","        if (!context.continueForkContext.empty) {","            context.continueForkContext.add(forkContext.head);","            const testSegments = context.continueForkContext.makeNext(0, -1);","","            forkContext.replaceHead(testSegments);","        }","    }","","    /**","     * Makes a code path segment for the test part of a ForStatement.","     *","     * @param {boolean|undefined} test - The test value (only when constant).","     * @returns {void}","     */","    makeForTest(test) {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const endOfInitSegments = forkContext.head;","        const testSegments = forkContext.makeNext(-1, -1);","","        // Update state.","        context.test = test;","        context.endOfInitSegments = endOfInitSegments;","        context.continueDestSegments = context.testSegments = testSegments;","        forkContext.replaceHead(testSegments);","    }","","    /**","     * Makes a code path segment for the update part of a ForStatement.","     *","     * @returns {void}","     */","    makeForUpdate() {","        const context = this.loopContext;","        const choiceContext = this.choiceContext;","        const forkContext = this.forkContext;","","        // Make the next paths of the test.","        if (context.testSegments) {","            finalizeTestSegmentsOfFor(","                context,","                choiceContext,","                forkContext.head);","        } else {","            context.endOfInitSegments = forkContext.head;","        }","","        // Update state.","        const updateSegments = forkContext.makeDisconnected(-1, -1);","","        context.continueDestSegments = context.updateSegments = updateSegments;","        forkContext.replaceHead(updateSegments);","    }","","    /**","     * Makes a code path segment for the body part of a ForStatement.","     *","     * @returns {void}","     */","    makeForBody() {","        const context = this.loopContext;","        const choiceContext = this.choiceContext;","        const forkContext = this.forkContext;","","        // Update state.","        if (context.updateSegments) {","            context.endOfUpdateSegments = forkContext.head;","","            // `update` -> `test`","            if (context.testSegments) {","                makeLooped(","                    this,","                    context.endOfUpdateSegments,","                    context.testSegments);","            }","        } else if (context.testSegments) {","            finalizeTestSegmentsOfFor(","                context,","                choiceContext,","                forkContext.head);","        } else {","            context.endOfInitSegments = forkContext.head;","        }","","        let bodySegments = context.endOfTestSegments;","","        if (!bodySegments) {","","            /*","             * If there is not the `test` part, the `body` path comes from the","             * `init` part and the `update` part.","             */","            const prevForkContext = ForkContext.newEmpty(forkContext);","","            prevForkContext.add(context.endOfInitSegments);","            if (context.endOfUpdateSegments) {","                prevForkContext.add(context.endOfUpdateSegments);","            }","","            bodySegments = prevForkContext.makeNext(0, -1);","        }","        context.continueDestSegments = context.continueDestSegments || bodySegments;","        forkContext.replaceHead(bodySegments);","    }","","    /**","     * Makes a code path segment for the left part of a ForInStatement and a","     * ForOfStatement.","     *","     * @returns {void}","     */","    makeForInOfLeft() {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const leftSegments = forkContext.makeDisconnected(-1, -1);","","        // Update state.","        context.prevSegments = forkContext.head;","        context.leftSegments = context.continueDestSegments = leftSegments;","        forkContext.replaceHead(leftSegments);","    }","","    /**","     * Makes a code path segment for the right part of a ForInStatement and a","     * ForOfStatement.","     *","     * @returns {void}","     */","    makeForInOfRight() {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const temp = ForkContext.newEmpty(forkContext);","","        temp.add(context.prevSegments);","        const rightSegments = temp.makeNext(-1, -1);","","        // Update state.","        context.endOfLeftSegments = forkContext.head;","        forkContext.replaceHead(rightSegments);","    }","","    /**","     * Makes a code path segment for the body part of a ForInStatement and a","     * ForOfStatement.","     *","     * @returns {void}","     */","    makeForInOfBody() {","        const context = this.loopContext;","        const forkContext = this.forkContext;","        const temp = ForkContext.newEmpty(forkContext);","","        temp.add(context.endOfLeftSegments);","        const bodySegments = temp.makeNext(-1, -1);","","        // Make a path: `right` -> `left`.","        makeLooped(this, forkContext.head, context.leftSegments);","","        // Update state.","        context.brokenForkContext.add(forkContext.head);","        forkContext.replaceHead(bodySegments);","    }","","    //--------------------------------------------------------------------------","    // Control Statements","    //--------------------------------------------------------------------------","","    /**","     * Creates new context for BreakStatement.","     *","     * @param {boolean} breakable - The flag to indicate it can break by","     *      an unlabeled BreakStatement.","     * @param {string|null} label - The label of this context.","     * @returns {Object} The new context.","     */","    pushBreakContext(breakable, label) {","        this.breakContext = {","            upper: this.breakContext,","            breakable,","            label,","            brokenForkContext: ForkContext.newEmpty(this.forkContext)","        };","        return this.breakContext;","    }","","    /**","     * Removes the top item of the break context stack.","     *","     * @returns {Object} The removed context.","     */","    popBreakContext() {","        const context = this.breakContext;","        const forkContext = this.forkContext;","","        this.breakContext = context.upper;","","        // Process this context here for other than switches and loops.","        if (!context.breakable) {","            const brokenForkContext = context.brokenForkContext;","","            if (!brokenForkContext.empty) {","                brokenForkContext.add(forkContext.head);","                forkContext.replaceHead(brokenForkContext.makeNext(0, -1));","            }","        }","","        return context;","    }","","    /**","     * Makes a path for a `break` statement.","     *","     * It registers the head segment to a context of `break`.","     * It makes new unreachable segment, then it set the head with the segment.","     *","     * @param {string} label - A label of the break statement.","     * @returns {void}","     */","    makeBreak(label) {","        const forkContext = this.forkContext;","","        if (!forkContext.reachable) {","            return;","        }","","        const context = getBreakContext(this, label);","","        /* istanbul ignore else: foolproof (syntax error) */","        if (context) {","            context.brokenForkContext.add(forkContext.head);","        }","","        forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","    }","","    /**","     * Makes a path for a `continue` statement.","     *","     * It makes a looping path.","     * It makes new unreachable segment, then it set the head with the segment.","     *","     * @param {string} label - A label of the continue statement.","     * @returns {void}","     */","    makeContinue(label) {","        const forkContext = this.forkContext;","","        if (!forkContext.reachable) {","            return;","        }","","        const context = getContinueContext(this, label);","","        /* istanbul ignore else: foolproof (syntax error) */","        if (context) {","            if (context.continueDestSegments) {","                makeLooped(this, forkContext.head, context.continueDestSegments);","","                // If the context is a for-in/of loop, this effects a break also.","                if (context.type === \"ForInStatement\" ||","                    context.type === \"ForOfStatement\"","                ) {","                    context.brokenForkContext.add(forkContext.head);","                }","            } else {","                context.continueForkContext.add(forkContext.head);","            }","        }","        forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","    }","","    /**","     * Makes a path for a `return` statement.","     *","     * It registers the head segment to a context of `return`.","     * It makes new unreachable segment, then it set the head with the segment.","     *","     * @returns {void}","     */","    makeReturn() {","        const forkContext = this.forkContext;","","        if (forkContext.reachable) {","            getReturnContext(this).returnedForkContext.add(forkContext.head);","            forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","        }","    }","","    /**","     * Makes a path for a `throw` statement.","     *","     * It registers the head segment to a context of `throw`.","     * It makes new unreachable segment, then it set the head with the segment.","     *","     * @returns {void}","     */","    makeThrow() {","        const forkContext = this.forkContext;","","        if (forkContext.reachable) {","            getThrowContext(this).thrownForkContext.add(forkContext.head);","            forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));","        }","    }","","    /**","     * Makes the final path.","     * @returns {void}","     */","    makeFinal() {","        const segments = this.currentSegments;","","        if (segments.length > 0 && segments[0].reachable) {","            this.returnedForkContext.add(segments);","        }","    }","}","","module.exports = CodePathState;",""],"l":{"12":1,"32":1,"33":0,"34":0,"36":0,"37":0,"38":0,"50":1,"51":0,"52":0,"55":0,"57":0,"58":0,"59":0,"61":0,"65":1,"75":1,"76":0,"78":0,"79":0,"80":0,"82":0,"86":1,"95":1,"96":0,"98":0,"99":0,"100":0,"102":0,"105":0,"114":1,"115":0,"117":0,"118":0,"121":0,"123":0,"126":0,"136":1,"137":0,"151":1,"152":0,"153":0,"154":0,"156":0,"157":0,"158":0,"159":0,"171":1,"172":0,"174":0,"175":0,"176":0,"178":0,"179":0,"181":0,"182":0,"184":0,"185":0,"187":0,"188":0,"191":0,"206":1,"207":0,"208":0,"209":0,"212":0,"213":0,"215":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"242":0,"243":0,"246":0,"247":0,"248":0,"250":0,"251":0,"259":0,"268":0,"270":0,"281":0,"286":0,"294":0,"296":0,"297":0,"299":0,"307":0,"317":0,"356":0,"372":0,"374":0,"376":0,"377":0,"379":0,"388":0,"389":0,"390":0,"397":0,"398":0,"400":0,"401":0,"402":0,"404":0,"407":0,"410":0,"416":0,"417":0,"425":0,"426":0,"429":0,"437":0,"441":1,"445":0,"447":0,"448":0,"450":0,"460":0,"461":0,"463":0,"469":0,"473":0,"474":0,"476":0,"484":0,"487":0,"491":0,"494":0,"504":0,"505":0,"512":0,"513":0,"514":0,"517":0,"520":0,"531":0,"532":0,"538":0,"539":0,"540":0,"543":0,"561":0,"571":0,"585":0,"587":0,"589":0,"590":0,"592":0,"599":0,"600":0,"601":0,"604":0,"607":0,"609":0,"610":0,"616":0,"622":0,"623":0,"629":0,"630":0,"637":0,"642":0,"643":0,"650":0,"661":0,"663":0,"664":0,"672":0,"673":0,"675":0,"682":0,"683":0,"684":0,"685":0,"687":0,"690":0,"691":0,"692":0,"696":0,"697":0,"712":0,"733":0,"735":0,"737":0,"740":0,"741":0,"749":0,"750":0,"752":0,"753":0,"757":0,"759":0,"760":0,"761":0,"764":0,"765":0,"767":0,"768":0,"772":0,"776":0,"777":0,"787":0,"788":0,"789":0,"792":0,"793":0,"794":0,"797":0,"798":0,"801":0,"802":0,"803":0,"816":0,"817":0,"818":0,"819":0,"820":0,"823":0,"826":0,"827":0,"829":0,"831":0,"833":0,"835":0,"838":0,"845":0,"846":0,"848":0,"849":0,"851":0,"852":0,"854":0,"855":0,"858":0,"863":0,"864":0,"874":0,"876":0,"877":0,"880":0,"882":0,"886":0,"889":0,"890":0,"907":0,"908":0,"910":0,"912":0,"913":0,"921":0,"924":0,"925":0,"934":0,"937":0,"938":0,"951":0,"955":0,"965":0,"969":1,"979":0,"981":0,"983":0,"984":0,"985":0,"988":0,"991":0,"992":0,"996":0,"999":0,"1001":0,"1002":0,"1003":0,"1005":0,"1006":0,"1010":0,"1012":0,"1013":0,"1018":0,"1023":0,"1024":0,"1028":0,"1032":1,"1036":0,"1037":0,"1039":0,"1050":0,"1051":0,"1052":0,"1055":0,"1056":0,"1057":0,"1066":0,"1067":0,"1068":0,"1070":0,"1071":0,"1072":0,"1076":0,"1077":0,"1079":0,"1088":0,"1089":0,"1090":0,"1093":0,"1094":0,"1104":0,"1105":0,"1107":0,"1110":0,"1111":0,"1112":0,"1114":0,"1125":0,"1126":0,"1127":0,"1128":0,"1131":0,"1132":0,"1133":0,"1134":0,"1143":0,"1144":0,"1145":0,"1148":0,"1149":0,"1154":0,"1158":0,"1160":0,"1161":0,"1170":0,"1171":0,"1172":0,"1175":0,"1176":0,"1179":0,"1180":0,"1185":0,"1186":0,"1191":0,"1194":0,"1196":0,"1202":0,"1204":0,"1205":0,"1206":0,"1209":0,"1211":0,"1212":0,"1222":0,"1223":0,"1224":0,"1227":0,"1228":0,"1229":0,"1239":0,"1240":0,"1241":0,"1243":0,"1244":0,"1247":0,"1248":0,"1258":0,"1259":0,"1260":0,"1262":0,"1263":0,"1266":0,"1269":0,"1270":0,"1286":0,"1292":0,"1301":0,"1302":0,"1304":0,"1307":0,"1308":0,"1310":0,"1311":0,"1312":0,"1316":0,"1329":0,"1331":0,"1332":0,"1335":0,"1338":0,"1339":0,"1342":0,"1355":0,"1357":0,"1358":0,"1361":0,"1364":0,"1365":0,"1366":0,"1369":0,"1372":0,"1375":0,"1378":0,"1390":0,"1392":0,"1393":0,"1394":0,"1407":0,"1409":0,"1410":0,"1411":0,"1420":0,"1422":0,"1423":0,"1428":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/code-path-segment.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/code-path-segment.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"flattenUnusedSegments","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":41}}},"2":{"name":"isReachable","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":30}}},"3":{"name":"(anonymous_3)","line":80,"loc":{"start":{"line":80,"column":15},"end":{"line":80,"column":48}}},"4":{"name":"(anonymous_4)","line":142,"loc":{"start":{"line":142,"column":23},"end":{"line":142,"column":33}}},"5":{"name":"(anonymous_5)","line":152,"loc":{"start":{"line":152,"column":18},"end":{"line":152,"column":23}}},"6":{"name":"(anonymous_6)","line":163,"loc":{"start":{"line":163,"column":18},"end":{"line":163,"column":40}}},"7":{"name":"(anonymous_7)","line":177,"loc":{"start":{"line":177,"column":25},"end":{"line":177,"column":47}}},"8":{"name":"(anonymous_8)","line":196,"loc":{"start":{"line":196,"column":26},"end":{"line":196,"column":48}}},"9":{"name":"(anonymous_9)","line":208,"loc":{"start":{"line":208,"column":19},"end":{"line":208,"column":29}}},"10":{"name":"(anonymous_10)","line":237,"loc":{"start":{"line":237,"column":34},"end":{"line":237,"column":57}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"2":{"start":{"line":24,"column":0},"end":{"line":53,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":37}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":20}},"5":{"start":{"line":28,"column":4},"end":{"line":50,"column":5}},"6":{"start":{"line":29,"column":8},"end":{"line":29,"column":36}},"7":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"8":{"start":{"line":33,"column":12},"end":{"line":33,"column":21}},"9":{"start":{"line":37,"column":8},"end":{"line":49,"column":9}},"10":{"start":{"line":38,"column":12},"end":{"line":45,"column":13}},"11":{"start":{"line":39,"column":16},"end":{"line":39,"column":63}},"12":{"start":{"line":41,"column":16},"end":{"line":44,"column":17}},"13":{"start":{"line":42,"column":20},"end":{"line":42,"column":48}},"14":{"start":{"line":43,"column":20},"end":{"line":43,"column":43}},"15":{"start":{"line":47,"column":12},"end":{"line":47,"column":36}},"16":{"start":{"line":48,"column":12},"end":{"line":48,"column":31}},"17":{"start":{"line":52,"column":4},"end":{"line":52,"column":16}},"18":{"start":{"line":61,"column":0},"end":{"line":63,"column":1}},"19":{"start":{"line":62,"column":4},"end":{"line":62,"column":29}},"20":{"start":{"line":87,"column":8},"end":{"line":87,"column":21}},"21":{"start":{"line":93,"column":8},"end":{"line":93,"column":31}},"22":{"start":{"line":99,"column":8},"end":{"line":99,"column":64}},"23":{"start":{"line":106,"column":8},"end":{"line":106,"column":34}},"24":{"start":{"line":113,"column":8},"end":{"line":113,"column":47}},"25":{"start":{"line":119,"column":8},"end":{"line":119,"column":35}},"26":{"start":{"line":122,"column":8},"end":{"line":127,"column":11}},"27":{"start":{"line":130,"column":8},"end":{"line":133,"column":9}},"28":{"start":{"line":131,"column":12},"end":{"line":131,"column":37},"skip":true},"29":{"start":{"line":132,"column":12},"end":{"line":132,"column":41},"skip":true},"30":{"start":{"line":143,"column":8},"end":{"line":143,"column":72}},"31":{"start":{"line":153,"column":8},"end":{"line":153,"column":49}},"32":{"start":{"line":164,"column":8},"end":{"line":167,"column":47}},"33":{"start":{"line":178,"column":8},"end":{"line":178,"column":95}},"34":{"start":{"line":182,"column":8},"end":{"line":182,"column":42}},"35":{"start":{"line":184,"column":8},"end":{"line":184,"column":23}},"36":{"start":{"line":197,"column":8},"end":{"line":197,"column":78}},"37":{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},"38":{"start":{"line":210,"column":12},"end":{"line":210,"column":19}},"39":{"start":{"line":212,"column":8},"end":{"line":212,"column":37}},"40":{"start":{"line":214,"column":8},"end":{"line":214,"column":14}},"41":{"start":{"line":216,"column":8},"end":{"line":227,"column":9}},"42":{"start":{"line":217,"column":12},"end":{"line":222,"column":13}},"43":{"start":{"line":218,"column":16},"end":{"line":218,"column":63}},"44":{"start":{"line":220,"column":16},"end":{"line":220,"column":58}},"45":{"start":{"line":221,"column":16},"end":{"line":221,"column":55}},"46":{"start":{"line":224,"column":12},"end":{"line":226,"column":13}},"47":{"start":{"line":225,"column":16},"end":{"line":225,"column":73}},"48":{"start":{"line":238,"column":8},"end":{"line":238,"column":62}},"49":{"start":{"line":242,"column":0},"end":{"line":242,"column":33}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":16}},{"start":{"line":41,"column":16},"end":{"line":41,"column":16}}]},"4":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":8},"skip":true},{"start":{"line":130,"column":8},"end":{"line":130,"column":8}}]},"5":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":8},"end":{"line":209,"column":8}},{"start":{"line":209,"column":8},"end":{"line":209,"column":8}}]},"6":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":8},"end":{"line":216,"column":8}},{"start":{"line":216,"column":8},"end":{"line":216,"column":8}}]}},"code":["/**"," * @fileoverview A class of the code path segment."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const debug = require(\"./debug-helpers\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Replaces unused segments with the previous segments of each unused segment."," *"," * @param {CodePathSegment[]} segments - An array of segments to replace."," * @returns {CodePathSegment[]} The replaced array."," */","function flattenUnusedSegments(segments) {","    const done = Object.create(null);","    const retv = [];","","    for (let i = 0; i < segments.length; ++i) {","        const segment = segments[i];","","        // Ignores duplicated.","        if (done[segment.id]) {","            continue;","        }","","        // Use previous segments if unused.","        if (!segment.internal.used) {","            for (let j = 0; j < segment.allPrevSegments.length; ++j) {","                const prevSegment = segment.allPrevSegments[j];","","                if (!done[prevSegment.id]) {","                    done[prevSegment.id] = true;","                    retv.push(prevSegment);","                }","            }","        } else {","            done[segment.id] = true;","            retv.push(segment);","        }","    }","","    return retv;","}","","/**"," * Checks whether or not a given segment is reachable."," *"," * @param {CodePathSegment} segment - A segment to check."," * @returns {boolean} `true` if the segment is reachable."," */","function isReachable(segment) {","    return segment.reachable;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A code path segment."," */","class CodePathSegment {","","    /**","     * @param {string} id - An identifier.","     * @param {CodePathSegment[]} allPrevSegments - An array of the previous segments.","     *   This array includes unreachable segments.","     * @param {boolean} reachable - A flag which shows this is reachable.","     */","    constructor(id, allPrevSegments, reachable) {","","        /**","         * The identifier of this code path.","         * Rules use it to store additional information of each rule.","         * @type {string}","         */","        this.id = id;","","        /**","         * An array of the next segments.","         * @type {CodePathSegment[]}","         */","        this.nextSegments = [];","","        /**","         * An array of the previous segments.","         * @type {CodePathSegment[]}","         */","        this.prevSegments = allPrevSegments.filter(isReachable);","","        /**","         * An array of the next segments.","         * This array includes unreachable segments.","         * @type {CodePathSegment[]}","         */","        this.allNextSegments = [];","","        /**","         * An array of the previous segments.","         * This array includes unreachable segments.","         * @type {CodePathSegment[]}","         */","        this.allPrevSegments = allPrevSegments;","","        /**","         * A flag which shows this is reachable.","         * @type {boolean}","         */","        this.reachable = reachable;","","        // Internal data.","        Object.defineProperty(this, \"internal\", {","            value: {","                used: false,","                loopedPrevSegments: []","            }","        });","","        /* istanbul ignore if */","        if (debug.enabled) {","            this.internal.nodes = [];","            this.internal.exitNodes = [];","        }","    }","","    /**","     * Checks a given previous segment is coming from the end of a loop.","     *","     * @param {CodePathSegment} segment - A previous segment to check.","     * @returns {boolean} `true` if the segment is coming from the end of a loop.","     */","    isLoopedPrevSegment(segment) {","        return this.internal.loopedPrevSegments.indexOf(segment) !== -1;","    }","","    /**","     * Creates the root segment.","     *","     * @param {string} id - An identifier.","     * @returns {CodePathSegment} The created segment.","     */","    static newRoot(id) {","        return new CodePathSegment(id, [], true);","    }","","    /**","     * Creates a segment that follows given segments.","     *","     * @param {string} id - An identifier.","     * @param {CodePathSegment[]} allPrevSegments - An array of the previous segments.","     * @returns {CodePathSegment} The created segment.","     */","    static newNext(id, allPrevSegments) {","        return new CodePathSegment(","            id,","            flattenUnusedSegments(allPrevSegments),","            allPrevSegments.some(isReachable));","    }","","    /**","     * Creates an unreachable segment that follows given segments.","     *","     * @param {string} id - An identifier.","     * @param {CodePathSegment[]} allPrevSegments - An array of the previous segments.","     * @returns {CodePathSegment} The created segment.","     */","    static newUnreachable(id, allPrevSegments) {","        const segment = new CodePathSegment(id, flattenUnusedSegments(allPrevSegments), false);","","        // In `if (a) return a; foo();` case, the unreachable segment preceded by","        // the return statement is not used but must not be remove.","        CodePathSegment.markUsed(segment);","","        return segment;","    }","","    /**","     * Creates a segment that follows given segments.","     * This factory method does not connect with `allPrevSegments`.","     * But this inherits `reachable` flag.","     *","     * @param {string} id - An identifier.","     * @param {CodePathSegment[]} allPrevSegments - An array of the previous segments.","     * @returns {CodePathSegment} The created segment.","     */","    static newDisconnected(id, allPrevSegments) {","        return new CodePathSegment(id, [], allPrevSegments.some(isReachable));","    }","","    /**","     * Makes a given segment being used.","     *","     * And this function registers the segment into the previous segments as a next.","     *","     * @param {CodePathSegment} segment - A segment to mark.","     * @returns {void}","     */","    static markUsed(segment) {","        if (segment.internal.used) {","            return;","        }","        segment.internal.used = true;","","        let i;","","        if (segment.reachable) {","            for (i = 0; i < segment.allPrevSegments.length; ++i) {","                const prevSegment = segment.allPrevSegments[i];","","                prevSegment.allNextSegments.push(segment);","                prevSegment.nextSegments.push(segment);","            }","        } else {","            for (i = 0; i < segment.allPrevSegments.length; ++i) {","                segment.allPrevSegments[i].allNextSegments.push(segment);","            }","        }","    }","","    /**","     * Marks a previous segment as looped.","     *","     * @param {CodePathSegment} segment - A segment.","     * @param {CodePathSegment} prevSegment - A previous segment to mark.","     * @returns {void}","     */","    static markPrevSegmentAsLooped(segment, prevSegment) {","        segment.internal.loopedPrevSegments.push(prevSegment);","    }","}","","module.exports = CodePathSegment;",""],"l":{"12":1,"24":1,"25":0,"26":0,"28":0,"29":0,"32":0,"33":0,"37":0,"38":0,"39":0,"41":0,"42":0,"43":0,"47":0,"48":0,"52":0,"61":1,"62":0,"87":0,"93":0,"99":0,"106":0,"113":0,"119":0,"122":0,"130":0,"131":1,"132":1,"143":0,"153":0,"164":0,"178":0,"182":0,"184":0,"197":0,"209":0,"210":0,"212":0,"214":0,"216":0,"217":0,"218":0,"220":0,"221":0,"224":0,"225":0,"238":0,"242":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/debug-helpers.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/debug-helpers.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},"b":{"1":[0,0],"2":[1,0],"3":[0,0],"4":[0,0],"5":[1,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"getId","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":24}},"skip":true},"2":{"name":"(anonymous_2)","line":56,"loc":{"start":{"line":56,"column":67},"end":{"line":56,"column":98}},"skip":true},"3":{"name":"(anonymous_3)","line":82,"loc":{"start":{"line":82,"column":65},"end":{"line":82,"column":84}},"skip":true},"4":{"name":"(anonymous_4)","line":147,"loc":{"start":{"line":147,"column":17},"end":{"line":147,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"2":{"start":{"line":24,"column":0},"end":{"line":26,"column":1},"skip":true},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":55},"skip":true},"4":{"start":{"line":32,"column":0},"end":{"line":200,"column":2}},"5":{"start":{"line":57,"column":8},"end":{"line":65,"column":9},"skip":true},"6":{"start":{"line":58,"column":12},"end":{"line":58,"column":66},"skip":true},"7":{"start":{"line":60,"column":12},"end":{"line":64,"column":13},"skip":true},"8":{"start":{"line":61,"column":16},"end":{"line":61,"column":49},"skip":true},"9":{"start":{"line":63,"column":16},"end":{"line":63,"column":45},"skip":true},"10":{"start":{"line":67,"column":8},"end":{"line":70,"column":21},"skip":true},"11":{"start":{"line":83,"column":8},"end":{"line":87,"column":102},"skip":true},"12":{"start":{"line":89,"column":8},"end":{"line":91,"column":9},"skip":true},"13":{"start":{"line":90,"column":12},"end":{"line":90,"column":114},"skip":true},"14":{"start":{"line":92,"column":8},"end":{"line":94,"column":9},"skip":true},"15":{"start":{"line":93,"column":12},"end":{"line":93,"column":89},"skip":true},"16":{"start":{"line":96,"column":8},"end":{"line":96,"column":45},"skip":true},"17":{"start":{"line":97,"column":8},"end":{"line":97,"column":62},"skip":true},"18":{"start":{"line":99,"column":8},"end":{"line":132,"column":9},"skip":true},"19":{"start":{"line":100,"column":12},"end":{"line":100,"column":41},"skip":true},"20":{"start":{"line":102,"column":12},"end":{"line":102,"column":29},"skip":true},"21":{"start":{"line":104,"column":12},"end":{"line":108,"column":13},"skip":true},"22":{"start":{"line":105,"column":16},"end":{"line":105,"column":35},"skip":true},"23":{"start":{"line":107,"column":16},"end":{"line":107,"column":107},"skip":true},"24":{"start":{"line":110,"column":12},"end":{"line":129,"column":13},"skip":true},"25":{"start":{"line":111,"column":16},"end":{"line":126,"column":30},"skip":true},"26":{"start":{"line":113,"column":24},"end":{"line":117,"column":25},"skip":true},"27":{"start":{"line":114,"column":47},"end":{"line":114,"column":84},"skip":true},"28":{"start":{"line":115,"column":44},"end":{"line":115,"column":82},"skip":true},"29":{"start":{"line":116,"column":37},"end":{"line":116,"column":54},"skip":true},"30":{"start":{"line":120,"column":24},"end":{"line":124,"column":25},"skip":true},"31":{"start":{"line":121,"column":47},"end":{"line":121,"column":89},"skip":true},"32":{"start":{"line":122,"column":44},"end":{"line":122,"column":87},"skip":true},"33":{"start":{"line":123,"column":37},"end":{"line":123,"column":64},"skip":true},"34":{"start":{"line":128,"column":16},"end":{"line":128,"column":31},"skip":true},"35":{"start":{"line":131,"column":12},"end":{"line":131,"column":29},"skip":true},"36":{"start":{"line":134,"column":8},"end":{"line":134,"column":30},"skip":true},"37":{"start":{"line":135,"column":8},"end":{"line":135,"column":20},"skip":true},"38":{"start":{"line":136,"column":8},"end":{"line":136,"column":27},"skip":true},"39":{"start":{"line":148,"column":8},"end":{"line":148,"column":53}},"40":{"start":{"line":149,"column":8},"end":{"line":149,"column":53}},"41":{"start":{"line":150,"column":8},"end":{"line":150,"column":48}},"42":{"start":{"line":151,"column":8},"end":{"line":151,"column":60}},"43":{"start":{"line":153,"column":8},"end":{"line":178,"column":9}},"44":{"start":{"line":154,"column":12},"end":{"line":154,"column":37}},"45":{"start":{"line":155,"column":12},"end":{"line":155,"column":36}},"46":{"start":{"line":156,"column":12},"end":{"line":156,"column":34}},"47":{"start":{"line":158,"column":12},"end":{"line":160,"column":13}},"48":{"start":{"line":159,"column":16},"end":{"line":159,"column":25}},"49":{"start":{"line":161,"column":12},"end":{"line":161,"column":39}},"50":{"start":{"line":163,"column":12},"end":{"line":163,"column":63}},"51":{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},"52":{"start":{"line":166,"column":16},"end":{"line":166,"column":25}},"53":{"start":{"line":169,"column":12},"end":{"line":173,"column":13}},"54":{"start":{"line":170,"column":16},"end":{"line":170,"column":46}},"55":{"start":{"line":172,"column":16},"end":{"line":172,"column":62}},"56":{"start":{"line":174,"column":12},"end":{"line":174,"column":36}},"57":{"start":{"line":176,"column":12},"end":{"line":176,"column":48}},"58":{"start":{"line":177,"column":12},"end":{"line":177,"column":41}},"59":{"start":{"line":180,"column":8},"end":{"line":187,"column":11}},"60":{"start":{"line":181,"column":12},"end":{"line":185,"column":13}},"61":{"start":{"line":182,"column":16},"end":{"line":182,"column":34}},"62":{"start":{"line":184,"column":16},"end":{"line":184,"column":55}},"63":{"start":{"line":186,"column":12},"end":{"line":186,"column":26}},"64":{"start":{"line":189,"column":8},"end":{"line":196,"column":11}},"65":{"start":{"line":190,"column":12},"end":{"line":194,"column":13}},"66":{"start":{"line":191,"column":16},"end":{"line":191,"column":35}},"67":{"start":{"line":193,"column":16},"end":{"line":193,"column":56}},"68":{"start":{"line":195,"column":12},"end":{"line":195,"column":26}},"69":{"start":{"line":198,"column":8},"end":{"line":198,"column":26}}},"branchMap":{"1":{"line":25,"type":"cond-expr","locations":[{"start":{"line":25,"column":45},"end":{"line":25,"column":47},"skip":true},{"start":{"line":25,"column":50},"end":{"line":25,"column":53},"skip":true}]},"2":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":32},"end":{"line":56,"column":37}},{"start":{"line":56,"column":67},"end":{"line":71,"column":5},"skip":true}]},"3":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":12},"skip":true},{"start":{"line":60,"column":12},"end":{"line":60,"column":12},"skip":true}]},"4":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":37},"end":{"line":69,"column":44},"skip":true},{"start":{"line":69,"column":47},"end":{"line":69,"column":49},"skip":true}]},"5":{"line":82,"type":"cond-expr","locations":[{"start":{"line":82,"column":30},"end":{"line":82,"column":35}},{"start":{"line":82,"column":65},"end":{"line":137,"column":5},"skip":true}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":8},"skip":true},{"start":{"line":89,"column":8},"end":{"line":89,"column":8},"skip":true}]},"7":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8},"skip":true},{"start":{"line":92,"column":8},"end":{"line":92,"column":8},"skip":true}]},"8":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":104,"column":12},"skip":true},{"start":{"line":104,"column":12},"end":{"line":104,"column":12},"skip":true}]},"9":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":12},"end":{"line":110,"column":12},"skip":true},{"start":{"line":110,"column":12},"end":{"line":110,"column":12},"skip":true}]},"10":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":16},"end":{"line":110,"column":49},"skip":true},{"start":{"line":110,"column":53},"end":{"line":110,"column":90},"skip":true}]},"11":{"line":113,"type":"switch","locations":[{"start":{"line":114,"column":28},"end":{"line":114,"column":84},"skip":true},{"start":{"line":115,"column":28},"end":{"line":115,"column":82},"skip":true},{"start":{"line":116,"column":28},"end":{"line":116,"column":54},"skip":true}]},"12":{"line":120,"type":"switch","locations":[{"start":{"line":121,"column":28},"end":{"line":121,"column":89},"skip":true},{"start":{"line":122,"column":28},"end":{"line":122,"column":87},"skip":true},{"start":{"line":123,"column":28},"end":{"line":123,"column":64},"skip":true}]},"13":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":21},"end":{"line":149,"column":29}},{"start":{"line":149,"column":33},"end":{"line":149,"column":52}}]},"14":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":12},"end":{"line":158,"column":12}},{"start":{"line":158,"column":12},"end":{"line":158,"column":12}}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":16},"end":{"line":158,"column":32}},{"start":{"line":158,"column":36},"end":{"line":158,"column":47}}]},"16":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":165,"column":12}},{"start":{"line":165,"column":12},"end":{"line":165,"column":12}}]},"17":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":169,"column":12}},{"start":{"line":169,"column":12},"end":{"line":169,"column":12}}]},"18":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":12},"end":{"line":181,"column":12}},{"start":{"line":181,"column":12},"end":{"line":181,"column":12}}]},"19":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":12},"end":{"line":190,"column":12}},{"start":{"line":190,"column":12},"end":{"line":190,"column":12}}]}},"code":["/**"," * @fileoverview Helpers to debug for code path analysis."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const debug = require(\"debug\")(\"eslint:code-path\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets id of a given segment."," * @param {CodePathSegment} segment - A segment to get."," * @returns {string} Id of the segment."," */","/* istanbul ignore next */","function getId(segment) { // eslint-disable-line require-jsdoc","    return segment.id + (segment.reachable ? \"\" : \"!\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    /**","     * A flag that debug dumping is enabled or not.","     * @type {boolean}","     */","    enabled: debug.enabled,","","    /**","     * Dumps given objects.","     *","     * @param {...any} args - objects to dump.","     * @returns {void}","     */","    dump: debug,","","    /**","     * Dumps the current analyzing state.","     *","     * @param {ASTNode} node - A node to dump.","     * @param {CodePathState} state - A state to dump.","     * @param {boolean} leaving - A flag whether or not it's leaving","     * @returns {void}","     */","    dumpState: !debug.enabled ? debug : /* istanbul ignore next */ function(node, state, leaving) {","        for (let i = 0; i < state.currentSegments.length; ++i) {","            const segInternal = state.currentSegments[i].internal;","","            if (leaving) {","                segInternal.exitNodes.push(node);","            } else {","                segInternal.nodes.push(node);","            }","        }","","        debug([","            `${state.currentSegments.map(getId).join(\",\")})`,","            `${node.type}${leaving ? \":exit\" : \"\"}`","        ].join(\" \"));","    },","","    /**","     * Dumps a DOT code of a given code path.","     * The DOT code can be visialized with Graphvis.","     *","     * @param {CodePath} codePath - A code path to dump.","     * @returns {void}","     * @see http://www.graphviz.org","     * @see http://www.webgraphviz.com","     */","    dumpDot: !debug.enabled ? debug : /* istanbul ignore next */ function(codePath) {","        let text =","            \"\\n\" +","            \"digraph {\\n\" +","            \"node[shape=box,style=\\\"rounded,filled\\\",fillcolor=white];\\n\" +","            \"initial[label=\\\"\\\",shape=circle,style=filled,fillcolor=black,width=0.25,height=0.25];\\n\";","","        if (codePath.returnedSegments.length > 0) {","            text += \"final[label=\\\"\\\",shape=doublecircle,style=filled,fillcolor=black,width=0.25,height=0.25];\\n\";","        }","        if (codePath.thrownSegments.length > 0) {","            text += \"thrown[label=\\\"✘\\\",shape=circle,width=0.3,height=0.3,fixedsize];\\n\";","        }","","        const traceMap = Object.create(null);","        const arrows = this.makeDotArrows(codePath, traceMap);","","        for (const id in traceMap) { // eslint-disable-line guard-for-in","            const segment = traceMap[id];","","            text += `${id}[`;","","            if (segment.reachable) {","                text += \"label=\\\"\";","            } else {","                text += \"style=\\\"rounded,dashed,filled\\\",fillcolor=\\\"#FF9800\\\",label=\\\"<<unreachable>>\\\\n\";","            }","","            if (segment.internal.nodes.length > 0 || segment.internal.exitNodes.length > 0) {","                text += [].concat(","                    segment.internal.nodes.map(node => {","                        switch (node.type) {","                            case \"Identifier\": return `${node.type} (${node.name})`;","                            case \"Literal\": return `${node.type} (${node.value})`;","                            default: return node.type;","                        }","                    }),","                    segment.internal.exitNodes.map(node => {","                        switch (node.type) {","                            case \"Identifier\": return `${node.type}:exit (${node.name})`;","                            case \"Literal\": return `${node.type}:exit (${node.value})`;","                            default: return `${node.type}:exit`;","                        }","                    })","                ).join(\"\\\\n\");","            } else {","                text += \"????\";","            }","","            text += \"\\\"];\\n\";","        }","","        text += `${arrows}\\n`;","        text += \"}\";","        debug(\"DOT\", text);","    },","","    /**","     * Makes a DOT code of a given code path.","     * The DOT code can be visialized with Graphvis.","     *","     * @param {CodePath} codePath - A code path to make DOT.","     * @param {Object} traceMap - Optional. A map to check whether or not segments had been done.","     * @returns {string} A DOT code of the code path.","     */","    makeDotArrows(codePath, traceMap) {","        const stack = [[codePath.initialSegment, 0]];","        const done = traceMap || Object.create(null);","        let lastId = codePath.initialSegment.id;","        let text = `initial->${codePath.initialSegment.id}`;","","        while (stack.length > 0) {","            const item = stack.pop();","            const segment = item[0];","            const index = item[1];","","            if (done[segment.id] && index === 0) {","                continue;","            }","            done[segment.id] = segment;","","            const nextSegment = segment.allNextSegments[index];","","            if (!nextSegment) {","                continue;","            }","","            if (lastId === segment.id) {","                text += `->${nextSegment.id}`;","            } else {","                text += `;\\n${segment.id}->${nextSegment.id}`;","            }","            lastId = nextSegment.id;","","            stack.unshift([segment, 1 + index]);","            stack.push([nextSegment, 0]);","        }","","        codePath.returnedSegments.forEach(finalSegment => {","            if (lastId === finalSegment.id) {","                text += \"->final\";","            } else {","                text += `;\\n${finalSegment.id}->final`;","            }","            lastId = null;","        });","","        codePath.thrownSegments.forEach(finalSegment => {","            if (lastId === finalSegment.id) {","                text += \"->thrown\";","            } else {","                text += `;\\n${finalSegment.id}->thrown`;","            }","            lastId = null;","        });","","        return `${text};`;","    }","};",""],"l":{"12":1,"24":1,"25":1,"32":1,"57":1,"58":1,"60":1,"61":1,"63":1,"67":1,"83":1,"89":1,"90":1,"92":1,"93":1,"96":1,"97":1,"99":1,"100":1,"102":1,"104":1,"105":1,"107":1,"110":1,"111":1,"113":1,"114":1,"115":1,"116":1,"120":1,"121":1,"122":1,"123":1,"128":1,"131":1,"134":1,"135":1,"136":1,"148":0,"149":0,"150":0,"151":0,"153":0,"154":0,"155":0,"156":0,"158":0,"159":0,"161":0,"163":0,"165":0,"166":0,"169":0,"170":0,"172":0,"174":0,"176":0,"177":0,"180":0,"181":0,"182":0,"184":0,"186":0,"189":0,"190":0,"191":0,"193":0,"195":0,"198":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/fork-context.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/fork-context.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"isReachable","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":30}}},"2":{"name":"makeSegments","line":46,"loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":51}}},"3":{"name":"mergeExtraSegments","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":47}}},"4":{"name":"(anonymous_4)","line":110,"loc":{"start":{"line":110,"column":15},"end":{"line":110,"column":43}}},"5":{"name":"(anonymous_5)","line":121,"loc":{"start":{"line":121,"column":12},"end":{"line":121,"column":15}}},"6":{"name":"(anonymous_6)","line":131,"loc":{"start":{"line":131,"column":13},"end":{"line":131,"column":16}}},"7":{"name":"(anonymous_7)","line":139,"loc":{"start":{"line":139,"column":17},"end":{"line":139,"column":20}}},"8":{"name":"(anonymous_8)","line":152,"loc":{"start":{"line":152,"column":12},"end":{"line":152,"column":25}}},"9":{"name":"(anonymous_9)","line":164,"loc":{"start":{"line":164,"column":19},"end":{"line":164,"column":32}}},"10":{"name":"(anonymous_10)","line":177,"loc":{"start":{"line":177,"column":20},"end":{"line":177,"column":33}}},"11":{"name":"(anonymous_11)","line":188,"loc":{"start":{"line":188,"column":7},"end":{"line":188,"column":18}}},"12":{"name":"(anonymous_12)","line":201,"loc":{"start":{"line":201,"column":15},"end":{"line":201,"column":26}}},"13":{"name":"(anonymous_13)","line":213,"loc":{"start":{"line":213,"column":10},"end":{"line":213,"column":20}}},"14":{"name":"(anonymous_14)","line":228,"loc":{"start":{"line":228,"column":9},"end":{"line":228,"column":12}}},"15":{"name":"(anonymous_15)","line":238,"loc":{"start":{"line":238,"column":18},"end":{"line":238,"column":32}}},"16":{"name":"(anonymous_16)","line":253,"loc":{"start":{"line":253,"column":19},"end":{"line":253,"column":52}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":17,"column":53}},"2":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"3":{"start":{"line":30,"column":4},"end":{"line":30,"column":29}},"4":{"start":{"line":46,"column":0},"end":{"line":69,"column":1}},"5":{"start":{"line":47,"column":4},"end":{"line":47,"column":38}},"6":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},"7":{"start":{"line":50,"column":8},"end":{"line":50,"column":36}},"8":{"start":{"line":52,"column":4},"end":{"line":54,"column":5}},"9":{"start":{"line":53,"column":8},"end":{"line":53,"column":32}},"10":{"start":{"line":56,"column":4},"end":{"line":56,"column":24}},"11":{"start":{"line":58,"column":4},"end":{"line":66,"column":5}},"12":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"13":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"14":{"start":{"line":62,"column":12},"end":{"line":62,"column":45}},"15":{"start":{"line":65,"column":8},"end":{"line":65,"column":75}},"16":{"start":{"line":68,"column":4},"end":{"line":68,"column":20}},"17":{"start":{"line":81,"column":0},"end":{"line":94,"column":1}},"18":{"start":{"line":82,"column":4},"end":{"line":92,"column":5}},"19":{"start":{"line":83,"column":8},"end":{"line":83,"column":26}},"20":{"start":{"line":85,"column":8},"end":{"line":90,"column":9}},"21":{"start":{"line":86,"column":12},"end":{"line":89,"column":15}},"22":{"start":{"line":91,"column":8},"end":{"line":91,"column":26}},"23":{"start":{"line":93,"column":4},"end":{"line":93,"column":20}},"24":{"start":{"line":111,"column":8},"end":{"line":111,"column":39}},"25":{"start":{"line":112,"column":8},"end":{"line":112,"column":27}},"26":{"start":{"line":113,"column":8},"end":{"line":113,"column":27}},"27":{"start":{"line":114,"column":8},"end":{"line":114,"column":31}},"28":{"start":{"line":122,"column":8},"end":{"line":122,"column":39}},"29":{"start":{"line":124,"column":8},"end":{"line":124,"column":62}},"30":{"start":{"line":132,"column":8},"end":{"line":132,"column":46}},"31":{"start":{"line":140,"column":8},"end":{"line":140,"column":35}},"32":{"start":{"line":142,"column":8},"end":{"line":142,"column":65}},"33":{"start":{"line":153,"column":8},"end":{"line":153,"column":71}},"34":{"start":{"line":165,"column":8},"end":{"line":165,"column":78}},"35":{"start":{"line":178,"column":8},"end":{"line":178,"column":79}},"36":{"start":{"line":189,"column":8},"end":{"line":189,"column":85}},"37":{"start":{"line":191,"column":8},"end":{"line":191,"column":67}},"38":{"start":{"line":202,"column":8},"end":{"line":202,"column":85}},"39":{"start":{"line":204,"column":8},"end":{"line":204,"column":76}},"40":{"start":{"line":214,"column":8},"end":{"line":214,"column":45}},"41":{"start":{"line":216,"column":8},"end":{"line":216,"column":44}},"42":{"start":{"line":218,"column":8},"end":{"line":220,"column":9}},"43":{"start":{"line":219,"column":12},"end":{"line":219,"column":46}},"44":{"start":{"line":229,"column":8},"end":{"line":229,"column":31}},"45":{"start":{"line":239,"column":8},"end":{"line":239,"column":62}},"46":{"start":{"line":241,"column":8},"end":{"line":241,"column":67}},"47":{"start":{"line":243,"column":8},"end":{"line":243,"column":23}},"48":{"start":{"line":254,"column":8},"end":{"line":257,"column":61}},"49":{"start":{"line":261,"column":0},"end":{"line":261,"column":29}}},"branchMap":{"1":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]},"3":{"line":124,"type":"cond-expr","locations":[{"start":{"line":124,"column":35},"end":{"line":124,"column":37}},{"start":{"line":124,"column":40},"end":{"line":124,"column":61}}]},"4":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":15},"end":{"line":142,"column":34}},{"start":{"line":142,"column":38},"end":{"line":142,"column":64}}]},"5":{"line":257,"type":"cond-expr","locations":[{"start":{"line":257,"column":31},"end":{"line":257,"column":32}},{"start":{"line":257,"column":35},"end":{"line":257,"column":36}}]}},"code":["/**"," * @fileoverview A class to operate forking."," *"," * This is state of forking."," * This has a fork list and manages it."," *"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const assert = require(\"assert\"),","    CodePathSegment = require(\"./code-path-segment\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets whether or not a given segment is reachable."," *"," * @param {CodePathSegment} segment - A segment to get."," * @returns {boolean} `true` if the segment is reachable."," */","function isReachable(segment) {","    return segment.reachable;","}","","/**"," * Creates new segments from the specific range of `context.segmentsList`."," *"," * When `context.segmentsList` is `[[a, b], [c, d], [e, f]]`, `begin` is `0`, and"," * `end` is `-1`, this creates `[g, h]`. This `g` is from `a`, `c`, and `e`."," * This `h` is from `b`, `d`, and `f`."," *"," * @param {ForkContext} context - An instance."," * @param {number} begin - The first index of the previous segments."," * @param {number} end - The last index of the previous segments."," * @param {Function} create - A factory function of new segments."," * @returns {CodePathSegment[]} New segments."," */","function makeSegments(context, begin, end, create) {","    const list = context.segmentsList;","","    if (begin < 0) {","        begin = list.length + begin;","    }","    if (end < 0) {","        end = list.length + end;","    }","","    const segments = [];","","    for (let i = 0; i < context.count; ++i) {","        const allPrevSegments = [];","","        for (let j = begin; j <= end; ++j) {","            allPrevSegments.push(list[j][i]);","        }","","        segments.push(create(context.idGenerator.next(), allPrevSegments));","    }","","    return segments;","}","","/**"," * `segments` becomes doubly in a `finally` block. Then if a code path exits by a"," * control statement (such as `break`, `continue`) from the `finally` block, the"," * destination's segments may be half of the source segments. In that case, this"," * merges segments."," *"," * @param {ForkContext} context - An instance."," * @param {CodePathSegment[]} segments - Segments to merge."," * @returns {CodePathSegment[]} The merged segments."," */","function mergeExtraSegments(context, segments) {","    while (segments.length > context.count) {","        const merged = [];","","        for (let i = 0, length = segments.length / 2 | 0; i < length; ++i) {","            merged.push(CodePathSegment.newNext(","                context.idGenerator.next(),","                [segments[i], segments[i + length]]","            ));","        }","        segments = merged;","    }","    return segments;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A class to manage forking."," */","class ForkContext {","","    /**","     * @param {IdGenerator} idGenerator - An identifier generator for segments.","     * @param {ForkContext|null} upper - An upper fork context.","     * @param {number} count - A number of parallel segments.","     */","    constructor(idGenerator, upper, count) {","        this.idGenerator = idGenerator;","        this.upper = upper;","        this.count = count;","        this.segmentsList = [];","    }","","    /**","     * The head segments.","     * @type {CodePathSegment[]}","     */","    get head() {","        const list = this.segmentsList;","","        return list.length === 0 ? [] : list[list.length - 1];","    }","","    /**","     * A flag which shows empty.","     * @type {boolean}","     */","    get empty() {","        return this.segmentsList.length === 0;","    }","","    /**","     * A flag which shows reachable.","     * @type {boolean}","     */","    get reachable() {","        const segments = this.head;","","        return segments.length > 0 && segments.some(isReachable);","    }","","    /**","     * Creates new segments from this context.","     *","     * @param {number} begin - The first index of previous segments.","     * @param {number} end - The last index of previous segments.","     * @returns {CodePathSegment[]} New segments.","     */","    makeNext(begin, end) {","        return makeSegments(this, begin, end, CodePathSegment.newNext);","    }","","    /**","     * Creates new segments from this context.","     * The new segments is always unreachable.","     *","     * @param {number} begin - The first index of previous segments.","     * @param {number} end - The last index of previous segments.","     * @returns {CodePathSegment[]} New segments.","     */","    makeUnreachable(begin, end) {","        return makeSegments(this, begin, end, CodePathSegment.newUnreachable);","    }","","    /**","     * Creates new segments from this context.","     * The new segments don't have connections for previous segments.","     * But these inherit the reachable flag from this context.","     *","     * @param {number} begin - The first index of previous segments.","     * @param {number} end - The last index of previous segments.","     * @returns {CodePathSegment[]} New segments.","     */","    makeDisconnected(begin, end) {","        return makeSegments(this, begin, end, CodePathSegment.newDisconnected);","    }","","    /**","     * Adds segments into this context.","     * The added segments become the head.","     *","     * @param {CodePathSegment[]} segments - Segments to add.","     * @returns {void}","     */","    add(segments) {","        assert(segments.length >= this.count, `${segments.length} >= ${this.count}`);","","        this.segmentsList.push(mergeExtraSegments(this, segments));","    }","","    /**","     * Replaces the head segments with given segments.","     * The current head segments are removed.","     *","     * @param {CodePathSegment[]} segments - Segments to add.","     * @returns {void}","     */","    replaceHead(segments) {","        assert(segments.length >= this.count, `${segments.length} >= ${this.count}`);","","        this.segmentsList.splice(-1, 1, mergeExtraSegments(this, segments));","    }","","    /**","     * Adds all segments of a given fork context into this context.","     *","     * @param {ForkContext} context - A fork context to add.","     * @returns {void}","     */","    addAll(context) {","        assert(context.count === this.count);","","        const source = context.segmentsList;","","        for (let i = 0; i < source.length; ++i) {","            this.segmentsList.push(source[i]);","        }","    }","","    /**","     * Clears all secments in this context.","     *","     * @returns {void}","     */","    clear() {","        this.segmentsList = [];","    }","","    /**","     * Creates the root fork context.","     *","     * @param {IdGenerator} idGenerator - An identifier generator for segments.","     * @returns {ForkContext} New fork context.","     */","    static newRoot(idGenerator) {","        const context = new ForkContext(idGenerator, null, 1);","","        context.add([CodePathSegment.newRoot(idGenerator.next())]);","","        return context;","    }","","    /**","     * Creates an empty fork context preceded by a given context.","     *","     * @param {ForkContext} parentContext - The parent fork context.","     * @param {boolean} forkLeavingPath - A flag which shows inside of `finally` block.","     * @returns {ForkContext} New fork context.","     */","    static newEmpty(parentContext, forkLeavingPath) {","        return new ForkContext(","            parentContext.idGenerator,","            parentContext,","            (forkLeavingPath ? 2 : 1) * parentContext.count);","    }","}","","module.exports = ForkContext;",""],"l":{"16":1,"29":1,"30":0,"46":1,"47":0,"49":0,"50":0,"52":0,"53":0,"56":0,"58":0,"59":0,"61":0,"62":0,"65":0,"68":0,"81":1,"82":0,"83":0,"85":0,"86":0,"91":0,"93":0,"111":0,"112":0,"113":0,"114":0,"122":0,"124":0,"132":0,"140":0,"142":0,"153":0,"165":0,"178":0,"189":0,"191":0,"202":0,"204":0,"214":0,"216":0,"218":0,"219":0,"229":0,"239":0,"241":0,"243":0,"254":0,"261":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/id-generator.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/code-path-analysis/id-generator.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":15},"end":{"line":24,"column":24}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":11}}}},"statementMap":{"1":{"start":{"line":25,"column":8},"end":{"line":25,"column":37}},"2":{"start":{"line":26,"column":8},"end":{"line":26,"column":19}},"3":{"start":{"line":35,"column":8},"end":{"line":35,"column":32}},"4":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"5":{"start":{"line":39,"column":12},"end":{"line":39,"column":23},"skip":true},"6":{"start":{"line":42,"column":8},"end":{"line":42,"column":36}},"7":{"start":{"line":46,"column":0},"end":{"line":46,"column":29}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8},"skip":true},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]}},"code":["/**"," * @fileoverview A class of identifiers generator for code path segments."," *"," * Each rule uses the identifier of code path segments to store additional"," * information of the code path."," *"," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * A generator for unique ids."," */","class IdGenerator {","","    /**","     * @param {string} prefix - Optional. A prefix of generated ids.","     */","    constructor(prefix) {","        this.prefix = String(prefix);","        this.n = 0;","    }","","    /**","     * Generates id.","     *","     * @returns {string} A generated id.","     */","    next() {","        this.n = 1 + this.n | 0;","","        /* istanbul ignore if */","        if (this.n < 0) {","            this.n = 1;","        }","","        return this.prefix + this.n;","    }","}","","module.exports = IdGenerator;",""],"l":{"25":0,"26":0,"35":0,"38":0,"39":1,"42":0,"46":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/ast-utils.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/ast-utils.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":1,"40":0,"41":1,"42":0,"43":1,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":9,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":1,"67":0,"68":1,"69":0,"70":1,"71":0,"72":1,"73":0,"74":1,"75":0,"76":1,"77":0,"78":1,"79":0,"80":1,"81":0,"82":1,"83":0,"84":1,"85":0,"86":1,"87":0,"88":1,"89":0,"90":1,"91":0,"92":1,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0],"10":[0,0],"11":[0,0,0,0,0,0],"12":[0,0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0],"31":[0,0],"32":[0,0,0],"33":[0,0],"34":[0,0],"35":[0,0,0,0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0,0,0,0,0,0,0,0,0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0,0],"46":[0,0,0,0],"47":[0,0,0,0,0,0],"48":[0,0],"49":[0,0,0],"50":[0,0],"51":[0,0,0],"52":[0,0],"53":[0,0,0],"54":[0,0,0,0,0,0,0,0,0,0,0,0],"55":[0,0],"56":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"57":[0,0],"58":[0,0,0],"59":[0,0],"60":[0,0,0],"61":[0,0],"62":[0,0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0,0,0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0,0,0,0,0],"89":[0,0,0,0,0,0,0,0,0,0,0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":9,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},"fnMap":{"1":{"name":"isModifyingReference","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":60}}},"2":{"name":"startsWithUpperCase","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":32}}},"3":{"name":"isES5Constructor","line":75,"loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":32}}},"4":{"name":"getUpperFunction","line":84,"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":32}}},"5":{"name":"isFunction","line":105,"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":26}}},"6":{"name":"isLoop","line":122,"loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":22}}},"7":{"name":"isInLoop","line":132,"loc":{"start":{"line":132,"column":0},"end":{"line":132,"column":24}}},"8":{"name":"isNullOrUndefined","line":150,"loc":{"start":{"line":150,"column":0},"end":{"line":150,"column":33}}},"9":{"name":"isCallee","line":163,"loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":24}}},"10":{"name":"isReflectApply","line":172,"loc":{"start":{"line":172,"column":0},"end":{"line":172,"column":30}}},"11":{"name":"isArrayFromMethod","line":188,"loc":{"start":{"line":188,"column":0},"end":{"line":188,"column":33}}},"12":{"name":"isMethodWhichHasThisArg","line":204,"loc":{"start":{"line":204,"column":0},"end":{"line":204,"column":39}}},"13":{"name":"negate","line":225,"loc":{"start":{"line":225,"column":0},"end":{"line":225,"column":19}}},"14":{"name":"hasJSDocThisTag","line":235,"loc":{"start":{"line":235,"column":0},"end":{"line":235,"column":43}}},"15":{"name":"isParenthesised","line":256,"loc":{"start":{"line":256,"column":0},"end":{"line":256,"column":43}}},"16":{"name":"isArrowToken","line":271,"loc":{"start":{"line":271,"column":0},"end":{"line":271,"column":29}}},"17":{"name":"isCommaToken","line":281,"loc":{"start":{"line":281,"column":0},"end":{"line":281,"column":29}}},"18":{"name":"isSemicolonToken","line":291,"loc":{"start":{"line":291,"column":0},"end":{"line":291,"column":33}}},"19":{"name":"isColonToken","line":301,"loc":{"start":{"line":301,"column":0},"end":{"line":301,"column":29}}},"20":{"name":"isOpeningParenToken","line":311,"loc":{"start":{"line":311,"column":0},"end":{"line":311,"column":36}}},"21":{"name":"isClosingParenToken","line":321,"loc":{"start":{"line":321,"column":0},"end":{"line":321,"column":36}}},"22":{"name":"isOpeningBracketToken","line":331,"loc":{"start":{"line":331,"column":0},"end":{"line":331,"column":38}}},"23":{"name":"isClosingBracketToken","line":341,"loc":{"start":{"line":341,"column":0},"end":{"line":341,"column":38}}},"24":{"name":"isOpeningBraceToken","line":351,"loc":{"start":{"line":351,"column":0},"end":{"line":351,"column":36}}},"25":{"name":"isClosingBraceToken","line":361,"loc":{"start":{"line":361,"column":0},"end":{"line":361,"column":36}}},"26":{"name":"isCommentToken","line":371,"loc":{"start":{"line":371,"column":0},"end":{"line":371,"column":31}}},"27":{"name":"isKeywordToken","line":381,"loc":{"start":{"line":381,"column":0},"end":{"line":381,"column":31}}},"28":{"name":"getOpeningParenOfParams","line":392,"loc":{"start":{"line":392,"column":0},"end":{"line":392,"column":51}}},"29":{"name":"createGlobalLinebreakMatcher","line":403,"loc":{"start":{"line":403,"column":0},"end":{"line":403,"column":40}}},"30":{"name":"(anonymous_30)","line":424,"loc":{"start":{"line":424,"column":21},"end":{"line":424,"column":35}}},"31":{"name":"(anonymous_31)","line":466,"loc":{"start":{"line":466,"column":19},"end":{"line":466,"column":26}}},"32":{"name":"(anonymous_32)","line":487,"loc":{"start":{"line":487,"column":24},"end":{"line":487,"column":31}}},"33":{"name":"(anonymous_33)","line":497,"loc":{"start":{"line":497,"column":12},"end":{"line":497,"column":19}}},"34":{"name":"(anonymous_34)","line":510,"loc":{"start":{"line":510,"column":26},"end":{"line":510,"column":39}}},"35":{"name":"(anonymous_35)","line":521,"loc":{"start":{"line":521,"column":18},"end":{"line":521,"column":35}}},"36":{"name":"(anonymous_36)","line":530,"loc":{"start":{"line":530,"column":22},"end":{"line":530,"column":29}}},"37":{"name":"(anonymous_37)","line":563,"loc":{"start":{"line":563,"column":21},"end":{"line":563,"column":39}}},"38":{"name":"(anonymous_38)","line":600,"loc":{"start":{"line":600,"column":24},"end":{"line":600,"column":43}}},"39":{"name":"(anonymous_39)","line":736,"loc":{"start":{"line":736,"column":17},"end":{"line":736,"column":24}}},"40":{"name":"(anonymous_40)","line":830,"loc":{"start":{"line":830,"column":16},"end":{"line":830,"column":23}}},"41":{"name":"(anonymous_41)","line":840,"loc":{"start":{"line":840,"column":19},"end":{"line":840,"column":26}}},"42":{"name":"(anonymous_42)","line":875,"loc":{"start":{"line":875,"column":25},"end":{"line":875,"column":32}}},"43":{"name":"(anonymous_43)","line":918,"loc":{"start":{"line":918,"column":24},"end":{"line":918,"column":31}}},"44":{"name":"(anonymous_44)","line":966,"loc":{"start":{"line":966,"column":20},"end":{"line":966,"column":27}}},"45":{"name":"(anonymous_45)","line":1019,"loc":{"start":{"line":1019,"column":27},"end":{"line":1019,"column":34}}},"46":{"name":"(anonymous_46)","line":1154,"loc":{"start":{"line":1154,"column":22},"end":{"line":1154,"column":41}}},"47":{"name":"(anonymous_47)","line":1185,"loc":{"start":{"line":1185,"column":24},"end":{"line":1185,"column":43}}},"48":{"name":"(anonymous_48)","line":1209,"loc":{"start":{"line":1209,"column":16},"end":{"line":1209,"column":23}}},"49":{"name":"(anonymous_49)","line":1245,"loc":{"start":{"line":1245,"column":17},"end":{"line":1245,"column":24}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":94}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":70}},"4":{"start":{"line":20,"column":0},"end":{"line":20,"column":42}},"5":{"start":{"line":21,"column":0},"end":{"line":21,"column":80}},"6":{"start":{"line":22,"column":0},"end":{"line":22,"column":57}},"7":{"start":{"line":23,"column":0},"end":{"line":23,"column":80}},"8":{"start":{"line":24,"column":0},"end":{"line":24,"column":39}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":110}},"10":{"start":{"line":28,"column":0},"end":{"line":28,"column":69}},"11":{"start":{"line":29,"column":0},"end":{"line":29,"column":52}},"12":{"start":{"line":32,"column":0},"end":{"line":32,"column":84}},"13":{"start":{"line":42,"column":0},"end":{"line":58,"column":1}},"14":{"start":{"line":43,"column":4},"end":{"line":43,"column":44}},"15":{"start":{"line":50,"column":4},"end":{"line":51,"column":56}},"16":{"start":{"line":53,"column":4},"end":{"line":57,"column":6}},"17":{"start":{"line":66,"column":0},"end":{"line":68,"column":1}},"18":{"start":{"line":67,"column":4},"end":{"line":67,"column":45}},"19":{"start":{"line":75,"column":0},"end":{"line":77,"column":1}},"20":{"start":{"line":76,"column":4},"end":{"line":76,"column":58}},"21":{"start":{"line":84,"column":0},"end":{"line":92,"column":1}},"22":{"start":{"line":85,"column":4},"end":{"line":90,"column":5}},"23":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"24":{"start":{"line":87,"column":12},"end":{"line":87,"column":24}},"25":{"start":{"line":89,"column":8},"end":{"line":89,"column":27}},"26":{"start":{"line":91,"column":4},"end":{"line":91,"column":16}},"27":{"start":{"line":105,"column":0},"end":{"line":107,"column":1}},"28":{"start":{"line":106,"column":4},"end":{"line":106,"column":63}},"29":{"start":{"line":122,"column":0},"end":{"line":124,"column":1}},"30":{"start":{"line":123,"column":4},"end":{"line":123,"column":59}},"31":{"start":{"line":132,"column":0},"end":{"line":142,"column":1}},"32":{"start":{"line":133,"column":4},"end":{"line":139,"column":5}},"33":{"start":{"line":134,"column":8},"end":{"line":136,"column":9}},"34":{"start":{"line":135,"column":12},"end":{"line":135,"column":24}},"35":{"start":{"line":138,"column":8},"end":{"line":138,"column":27}},"36":{"start":{"line":141,"column":4},"end":{"line":141,"column":17}},"37":{"start":{"line":150,"column":0},"end":{"line":156,"column":1}},"38":{"start":{"line":151,"column":4},"end":{"line":155,"column":6}},"39":{"start":{"line":163,"column":0},"end":{"line":165,"column":1}},"40":{"start":{"line":164,"column":4},"end":{"line":164,"column":80}},"41":{"start":{"line":172,"column":0},"end":{"line":181,"column":1}},"42":{"start":{"line":173,"column":4},"end":{"line":180,"column":6}},"43":{"start":{"line":188,"column":0},"end":{"line":197,"column":1}},"44":{"start":{"line":189,"column":4},"end":{"line":196,"column":6}},"45":{"start":{"line":204,"column":0},"end":{"line":218,"column":1}},"46":{"start":{"line":205,"column":4},"end":{"line":215,"column":5}},"47":{"start":{"line":206,"column":8},"end":{"line":208,"column":9}},"48":{"start":{"line":207,"column":12},"end":{"line":207,"column":54}},"49":{"start":{"line":209,"column":8},"end":{"line":212,"column":9}},"50":{"start":{"line":210,"column":12},"end":{"line":210,"column":33}},"51":{"start":{"line":211,"column":12},"end":{"line":211,"column":21}},"52":{"start":{"line":214,"column":8},"end":{"line":214,"column":14}},"53":{"start":{"line":217,"column":4},"end":{"line":217,"column":17}},"54":{"start":{"line":225,"column":0},"end":{"line":227,"column":1}},"55":{"start":{"line":226,"column":4},"end":{"line":226,"column":30}},"56":{"start":{"line":226,"column":20},"end":{"line":226,"column":29}},"57":{"start":{"line":235,"column":0},"end":{"line":247,"column":1}},"58":{"start":{"line":236,"column":4},"end":{"line":236,"column":58}},"59":{"start":{"line":238,"column":4},"end":{"line":240,"column":5}},"60":{"start":{"line":239,"column":8},"end":{"line":239,"column":20}},"61":{"start":{"line":246,"column":4},"end":{"line":246,"column":100}},"62":{"start":{"line":246,"column":64},"end":{"line":246,"column":98}},"63":{"start":{"line":256,"column":0},"end":{"line":263,"column":1}},"64":{"start":{"line":257,"column":4},"end":{"line":258,"column":51}},"65":{"start":{"line":260,"column":4},"end":{"line":262,"column":71}},"66":{"start":{"line":271,"column":0},"end":{"line":273,"column":1}},"67":{"start":{"line":272,"column":4},"end":{"line":272,"column":63}},"68":{"start":{"line":281,"column":0},"end":{"line":283,"column":1}},"69":{"start":{"line":282,"column":4},"end":{"line":282,"column":62}},"70":{"start":{"line":291,"column":0},"end":{"line":293,"column":1}},"71":{"start":{"line":292,"column":4},"end":{"line":292,"column":62}},"72":{"start":{"line":301,"column":0},"end":{"line":303,"column":1}},"73":{"start":{"line":302,"column":4},"end":{"line":302,"column":62}},"74":{"start":{"line":311,"column":0},"end":{"line":313,"column":1}},"75":{"start":{"line":312,"column":4},"end":{"line":312,"column":62}},"76":{"start":{"line":321,"column":0},"end":{"line":323,"column":1}},"77":{"start":{"line":322,"column":4},"end":{"line":322,"column":62}},"78":{"start":{"line":331,"column":0},"end":{"line":333,"column":1}},"79":{"start":{"line":332,"column":4},"end":{"line":332,"column":62}},"80":{"start":{"line":341,"column":0},"end":{"line":343,"column":1}},"81":{"start":{"line":342,"column":4},"end":{"line":342,"column":62}},"82":{"start":{"line":351,"column":0},"end":{"line":353,"column":1}},"83":{"start":{"line":352,"column":4},"end":{"line":352,"column":62}},"84":{"start":{"line":361,"column":0},"end":{"line":363,"column":1}},"85":{"start":{"line":362,"column":4},"end":{"line":362,"column":62}},"86":{"start":{"line":371,"column":0},"end":{"line":373,"column":1}},"87":{"start":{"line":372,"column":4},"end":{"line":372,"column":87}},"88":{"start":{"line":381,"column":0},"end":{"line":383,"column":1}},"89":{"start":{"line":382,"column":4},"end":{"line":382,"column":36}},"90":{"start":{"line":392,"column":0},"end":{"line":396,"column":1}},"91":{"start":{"line":393,"column":4},"end":{"line":395,"column":62}},"92":{"start":{"line":403,"column":0},"end":{"line":405,"column":1}},"93":{"start":{"line":404,"column":4},"end":{"line":404,"column":53}},"94":{"start":{"line":411,"column":0},"end":{"line":1256,"column":2}},"95":{"start":{"line":425,"column":8},"end":{"line":425,"column":58}},"96":{"start":{"line":467,"column":8},"end":{"line":470,"column":10}},"97":{"start":{"line":488,"column":8},"end":{"line":488,"column":52}},"98":{"start":{"line":498,"column":8},"end":{"line":500,"column":9}},"99":{"start":{"line":499,"column":12},"end":{"line":499,"column":42}},"100":{"start":{"line":501,"column":8},"end":{"line":501,"column":20}},"101":{"start":{"line":511,"column":8},"end":{"line":511,"column":55}},"102":{"start":{"line":522,"column":8},"end":{"line":522,"column":73}},"103":{"start":{"line":531,"column":8},"end":{"line":531,"column":42}},"104":{"start":{"line":533,"column":8},"end":{"line":540,"column":10}},"105":{"start":{"line":564,"column":8},"end":{"line":564,"column":30}},"106":{"start":{"line":566,"column":8},"end":{"line":574,"column":9}},"107":{"start":{"line":567,"column":12},"end":{"line":567,"column":49}},"108":{"start":{"line":569,"column":12},"end":{"line":571,"column":13}},"109":{"start":{"line":570,"column":16},"end":{"line":570,"column":32}},"110":{"start":{"line":573,"column":12},"end":{"line":573,"column":32}},"111":{"start":{"line":576,"column":8},"end":{"line":576,"column":20}},"112":{"start":{"line":601,"column":8},"end":{"line":603,"column":9}},"113":{"start":{"line":602,"column":12},"end":{"line":602,"column":25}},"114":{"start":{"line":604,"column":8},"end":{"line":604,"column":45}},"115":{"start":{"line":606,"column":8},"end":{"line":724,"column":9}},"116":{"start":{"line":607,"column":12},"end":{"line":607,"column":39}},"117":{"start":{"line":609,"column":12},"end":{"line":723,"column":13}},"118":{"start":{"line":617,"column":20},"end":{"line":617,"column":34}},"119":{"start":{"line":618,"column":20},"end":{"line":618,"column":26}},"120":{"start":{"line":627,"column":20},"end":{"line":627,"column":58}},"121":{"start":{"line":629,"column":20},"end":{"line":631,"column":21}},"122":{"start":{"line":630,"column":24},"end":{"line":630,"column":36}},"123":{"start":{"line":632,"column":20},"end":{"line":632,"column":39}},"124":{"start":{"line":633,"column":20},"end":{"line":633,"column":26}},"125":{"start":{"line":646,"column":20},"end":{"line":646,"column":49}},"126":{"start":{"line":655,"column":20},"end":{"line":665,"column":21}},"127":{"start":{"line":656,"column":24},"end":{"line":658,"column":25}},"128":{"start":{"line":657,"column":28},"end":{"line":657,"column":41}},"129":{"start":{"line":659,"column":24},"end":{"line":664,"column":25}},"130":{"start":{"line":663,"column":28},"end":{"line":663,"column":41}},"131":{"start":{"line":666,"column":20},"end":{"line":666,"column":32}},"132":{"start":{"line":671,"column":20},"end":{"line":676,"column":22}},"133":{"start":{"line":683,"column":20},"end":{"line":690,"column":22}},"134":{"start":{"line":697,"column":20},"end":{"line":703,"column":21}},"135":{"start":{"line":698,"column":24},"end":{"line":702,"column":26}},"136":{"start":{"line":704,"column":20},"end":{"line":710,"column":21}},"137":{"start":{"line":705,"column":24},"end":{"line":709,"column":26}},"138":{"start":{"line":711,"column":20},"end":{"line":717,"column":21}},"139":{"start":{"line":712,"column":24},"end":{"line":716,"column":26}},"140":{"start":{"line":718,"column":20},"end":{"line":718,"column":32}},"141":{"start":{"line":722,"column":20},"end":{"line":722,"column":32}},"142":{"start":{"line":727,"column":8},"end":{"line":727,"column":20},"skip":true},"143":{"start":{"line":737,"column":8},"end":{"line":820,"column":9}},"144":{"start":{"line":739,"column":16},"end":{"line":739,"column":25}},"145":{"start":{"line":744,"column":16},"end":{"line":744,"column":25}},"146":{"start":{"line":747,"column":16},"end":{"line":747,"column":25}},"147":{"start":{"line":750,"column":16},"end":{"line":757,"column":17}},"148":{"start":{"line":752,"column":24},"end":{"line":752,"column":33}},"149":{"start":{"line":754,"column":24},"end":{"line":754,"column":33}},"150":{"start":{"line":763,"column":16},"end":{"line":797,"column":17}},"151":{"start":{"line":765,"column":24},"end":{"line":765,"column":33}},"152":{"start":{"line":767,"column":24},"end":{"line":767,"column":33}},"153":{"start":{"line":769,"column":24},"end":{"line":769,"column":33}},"154":{"start":{"line":774,"column":24},"end":{"line":774,"column":33}},"155":{"start":{"line":781,"column":24},"end":{"line":781,"column":34}},"156":{"start":{"line":785,"column":24},"end":{"line":785,"column":34}},"157":{"start":{"line":788,"column":24},"end":{"line":788,"column":34}},"158":{"start":{"line":792,"column":24},"end":{"line":792,"column":34}},"159":{"start":{"line":794,"column":24},"end":{"line":794,"column":34}},"160":{"start":{"line":803,"column":16},"end":{"line":803,"column":26}},"161":{"start":{"line":806,"column":16},"end":{"line":806,"column":26}},"162":{"start":{"line":811,"column":16},"end":{"line":813,"column":17}},"163":{"start":{"line":812,"column":20},"end":{"line":812,"column":30}},"164":{"start":{"line":814,"column":16},"end":{"line":814,"column":26}},"165":{"start":{"line":817,"column":16},"end":{"line":817,"column":26}},"166":{"start":{"line":821,"column":8},"end":{"line":821,"column":18}},"167":{"start":{"line":831,"column":8},"end":{"line":831,"column":89}},"168":{"start":{"line":841,"column":8},"end":{"line":841,"column":74}},"169":{"start":{"line":876,"column":8},"end":{"line":876,"column":17}},"170":{"start":{"line":878,"column":8},"end":{"line":889,"column":9}},"171":{"start":{"line":881,"column":16},"end":{"line":881,"column":32}},"172":{"start":{"line":882,"column":16},"end":{"line":882,"column":22}},"173":{"start":{"line":885,"column":16},"end":{"line":885,"column":37}},"174":{"start":{"line":886,"column":16},"end":{"line":886,"column":22}},"175":{"start":{"line":891,"column":8},"end":{"line":908,"column":9}},"176":{"start":{"line":893,"column":16},"end":{"line":893,"column":42}},"177":{"start":{"line":896,"column":16},"end":{"line":898,"column":17}},"178":{"start":{"line":897,"column":20},"end":{"line":897,"column":55}},"179":{"start":{"line":899,"column":16},"end":{"line":899,"column":22}},"180":{"start":{"line":902,"column":16},"end":{"line":904,"column":17}},"181":{"start":{"line":903,"column":20},"end":{"line":903,"column":37}},"182":{"start":{"line":905,"column":16},"end":{"line":905,"column":22}},"183":{"start":{"line":910,"column":8},"end":{"line":910,"column":20}},"184":{"start":{"line":919,"column":8},"end":{"line":919,"column":30}},"185":{"start":{"line":922,"column":8},"end":{"line":943,"column":9}},"186":{"start":{"line":931,"column":12},"end":{"line":931,"column":84}},"187":{"start":{"line":933,"column":12},"end":{"line":942,"column":13}},"188":{"start":{"line":934,"column":16},"end":{"line":941,"column":17}},"189":{"start":{"line":938,"column":20},"end":{"line":938,"column":47}},"190":{"start":{"line":940,"column":20},"end":{"line":940,"column":26}},"191":{"start":{"line":945,"column":8},"end":{"line":945,"column":26}},"192":{"start":{"line":967,"column":8},"end":{"line":967,"column":108}},"193":{"start":{"line":1020,"column":8},"end":{"line":1020,"column":35}},"194":{"start":{"line":1021,"column":8},"end":{"line":1021,"column":26}},"195":{"start":{"line":1023,"column":8},"end":{"line":1025,"column":9}},"196":{"start":{"line":1024,"column":12},"end":{"line":1024,"column":34}},"197":{"start":{"line":1026,"column":8},"end":{"line":1028,"column":9}},"198":{"start":{"line":1027,"column":12},"end":{"line":1027,"column":33}},"199":{"start":{"line":1029,"column":8},"end":{"line":1031,"column":9}},"200":{"start":{"line":1030,"column":12},"end":{"line":1030,"column":37}},"201":{"start":{"line":1033,"column":8},"end":{"line":1047,"column":9}},"202":{"start":{"line":1034,"column":12},"end":{"line":1034,"column":45}},"203":{"start":{"line":1035,"column":15},"end":{"line":1047,"column":9}},"204":{"start":{"line":1036,"column":12},"end":{"line":1044,"column":13}},"205":{"start":{"line":1037,"column":16},"end":{"line":1037,"column":37}},"206":{"start":{"line":1038,"column":19},"end":{"line":1044,"column":13}},"207":{"start":{"line":1039,"column":16},"end":{"line":1039,"column":38}},"208":{"start":{"line":1040,"column":19},"end":{"line":1044,"column":13}},"209":{"start":{"line":1041,"column":16},"end":{"line":1041,"column":38}},"210":{"start":{"line":1043,"column":16},"end":{"line":1043,"column":38}},"211":{"start":{"line":1046,"column":12},"end":{"line":1046,"column":36}},"212":{"start":{"line":1049,"column":8},"end":{"line":1057,"column":9}},"213":{"start":{"line":1050,"column":12},"end":{"line":1050,"column":45}},"214":{"start":{"line":1052,"column":12},"end":{"line":1052,"column":70}},"215":{"start":{"line":1054,"column":12},"end":{"line":1056,"column":13}},"216":{"start":{"line":1055,"column":16},"end":{"line":1055,"column":41}},"217":{"start":{"line":1059,"column":8},"end":{"line":1059,"column":32}},"218":{"start":{"line":1155,"column":8},"end":{"line":1155,"column":35}},"219":{"start":{"line":1156,"column":8},"end":{"line":1156,"column":25}},"220":{"start":{"line":1157,"column":8},"end":{"line":1157,"column":23}},"221":{"start":{"line":1159,"column":8},"end":{"line":1170,"column":9}},"222":{"start":{"line":1160,"column":12},"end":{"line":1160,"column":82}},"223":{"start":{"line":1162,"column":12},"end":{"line":1162,"column":41}},"224":{"start":{"line":1163,"column":12},"end":{"line":1163,"column":37}},"225":{"start":{"line":1164,"column":15},"end":{"line":1170,"column":9}},"226":{"start":{"line":1165,"column":12},"end":{"line":1165,"column":37}},"227":{"start":{"line":1166,"column":12},"end":{"line":1166,"column":70}},"228":{"start":{"line":1168,"column":12},"end":{"line":1168,"column":35}},"229":{"start":{"line":1169,"column":12},"end":{"line":1169,"column":70}},"230":{"start":{"line":1172,"column":8},"end":{"line":1175,"column":10}},"231":{"start":{"line":1186,"column":8},"end":{"line":1186,"column":55}},"232":{"start":{"line":1187,"column":8},"end":{"line":1187,"column":55}},"233":{"start":{"line":1189,"column":8},"end":{"line":1199,"column":9}},"234":{"start":{"line":1197,"column":12},"end":{"line":1197,"column":61}},"235":{"start":{"line":1198,"column":12},"end":{"line":1198,"column":62}},"236":{"start":{"line":1201,"column":8},"end":{"line":1201,"column":83}},"237":{"start":{"line":1210,"column":8},"end":{"line":1237,"column":9}},"238":{"start":{"line":1218,"column":16},"end":{"line":1218,"column":28}},"239":{"start":{"line":1221,"column":16},"end":{"line":1221,"column":63}},"240":{"start":{"line":1224,"column":16},"end":{"line":1224,"column":47}},"241":{"start":{"line":1226,"column":16},"end":{"line":1226,"column":98}},"242":{"start":{"line":1230,"column":16},"end":{"line":1230,"column":105}},"243":{"start":{"line":1233,"column":16},"end":{"line":1233,"column":115}},"244":{"start":{"line":1236,"column":16},"end":{"line":1236,"column":29}},"245":{"start":{"line":1254,"column":8},"end":{"line":1254,"column":77}}},"branchMap":{"1":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":41},"end":{"line":50,"column":52}},{"start":{"line":51,"column":8},"end":{"line":51,"column":55}}]},"2":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":22}},{"start":{"line":54,"column":8},"end":{"line":54,"column":32}},{"start":{"line":55,"column":8},"end":{"line":55,"column":27}},{"start":{"line":56,"column":8},"end":{"line":56,"column":36}}]},"3":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":19}},{"start":{"line":76,"column":23},"end":{"line":76,"column":56}}]},"4":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"5":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":19},"end":{"line":106,"column":23}},{"start":{"line":106,"column":27},"end":{"line":106,"column":61}}]},"6":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":19},"end":{"line":123,"column":23}},{"start":{"line":123,"column":27},"end":{"line":123,"column":57}}]},"7":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":11},"end":{"line":133,"column":15}},{"start":{"line":133,"column":19},"end":{"line":133,"column":36}}]},"8":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":8},"end":{"line":134,"column":8}},{"start":{"line":134,"column":8},"end":{"line":134,"column":8}}]},"9":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":8},"end":{"line":152,"column":42}},{"start":{"line":153,"column":9},"end":{"line":153,"column":35}},{"start":{"line":153,"column":39},"end":{"line":153,"column":64}},{"start":{"line":154,"column":9},"end":{"line":154,"column":40}},{"start":{"line":154,"column":44},"end":{"line":154,"column":68}}]},"10":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":11},"end":{"line":164,"column":48}},{"start":{"line":164,"column":52},"end":{"line":164,"column":79}}]},"11":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":8},"end":{"line":174,"column":40}},{"start":{"line":175,"column":8},"end":{"line":175,"column":41}},{"start":{"line":176,"column":8},"end":{"line":176,"column":38}},{"start":{"line":177,"column":8},"end":{"line":177,"column":43}},{"start":{"line":178,"column":8},"end":{"line":178,"column":38}},{"start":{"line":179,"column":8},"end":{"line":179,"column":31}}]},"12":{"line":190,"type":"binary-expr","locations":[{"start":{"line":190,"column":8},"end":{"line":190,"column":40}},{"start":{"line":191,"column":8},"end":{"line":191,"column":41}},{"start":{"line":192,"column":8},"end":{"line":192,"column":55}},{"start":{"line":193,"column":8},"end":{"line":193,"column":43}},{"start":{"line":194,"column":8},"end":{"line":194,"column":37}},{"start":{"line":195,"column":8},"end":{"line":195,"column":31}}]},"13":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":8},"end":{"line":206,"column":8}},{"start":{"line":206,"column":8},"end":{"line":206,"column":8}}]},"14":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":8},"end":{"line":209,"column":8}},{"start":{"line":209,"column":8},"end":{"line":209,"column":8}}]},"15":{"line":209,"type":"binary-expr","locations":[{"start":{"line":209,"column":12},"end":{"line":209,"column":44}},{"start":{"line":209,"column":48},"end":{"line":209,"column":62}}]},"16":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":4},"end":{"line":238,"column":4}},{"start":{"line":238,"column":4},"end":{"line":238,"column":4}}]},"17":{"line":238,"type":"binary-expr","locations":[{"start":{"line":238,"column":8},"end":{"line":238,"column":20}},{"start":{"line":238,"column":24},"end":{"line":238,"column":63}}]},"18":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":11},"end":{"line":260,"column":46}},{"start":{"line":261,"column":8},"end":{"line":261,"column":35}},{"start":{"line":261,"column":39},"end":{"line":261,"column":78}},{"start":{"line":262,"column":8},"end":{"line":262,"column":31}},{"start":{"line":262,"column":35},"end":{"line":262,"column":70}}]},"19":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":19},"end":{"line":260,"column":32}},{"start":{"line":260,"column":36},"end":{"line":260,"column":45}}]},"20":{"line":272,"type":"binary-expr","locations":[{"start":{"line":272,"column":11},"end":{"line":272,"column":31}},{"start":{"line":272,"column":35},"end":{"line":272,"column":62}}]},"21":{"line":282,"type":"binary-expr","locations":[{"start":{"line":282,"column":11},"end":{"line":282,"column":30}},{"start":{"line":282,"column":34},"end":{"line":282,"column":61}}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":11},"end":{"line":292,"column":30}},{"start":{"line":292,"column":34},"end":{"line":292,"column":61}}]},"23":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":11},"end":{"line":302,"column":30}},{"start":{"line":302,"column":34},"end":{"line":302,"column":61}}]},"24":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":11},"end":{"line":312,"column":30}},{"start":{"line":312,"column":34},"end":{"line":312,"column":61}}]},"25":{"line":322,"type":"binary-expr","locations":[{"start":{"line":322,"column":11},"end":{"line":322,"column":30}},{"start":{"line":322,"column":34},"end":{"line":322,"column":61}}]},"26":{"line":332,"type":"binary-expr","locations":[{"start":{"line":332,"column":11},"end":{"line":332,"column":30}},{"start":{"line":332,"column":34},"end":{"line":332,"column":61}}]},"27":{"line":342,"type":"binary-expr","locations":[{"start":{"line":342,"column":11},"end":{"line":342,"column":30}},{"start":{"line":342,"column":34},"end":{"line":342,"column":61}}]},"28":{"line":352,"type":"binary-expr","locations":[{"start":{"line":352,"column":11},"end":{"line":352,"column":30}},{"start":{"line":352,"column":34},"end":{"line":352,"column":61}}]},"29":{"line":362,"type":"binary-expr","locations":[{"start":{"line":362,"column":11},"end":{"line":362,"column":30}},{"start":{"line":362,"column":34},"end":{"line":362,"column":61}}]},"30":{"line":372,"type":"binary-expr","locations":[{"start":{"line":372,"column":11},"end":{"line":372,"column":32}},{"start":{"line":372,"column":36},"end":{"line":372,"column":58}},{"start":{"line":372,"column":62},"end":{"line":372,"column":86}}]},"31":{"line":393,"type":"cond-expr","locations":[{"start":{"line":394,"column":10},"end":{"line":394,"column":64}},{"start":{"line":395,"column":10},"end":{"line":395,"column":61}}]},"32":{"line":468,"type":"binary-expr","locations":[{"start":{"line":468,"column":13},"end":{"line":468,"column":36}},{"start":{"line":468,"column":40},"end":{"line":468,"column":70}},{"start":{"line":469,"column":12},"end":{"line":469,"column":43}}]},"33":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":8},"end":{"line":498,"column":8}},{"start":{"line":498,"column":8},"end":{"line":498,"column":8}}]},"34":{"line":522,"type":"binary-expr","locations":[{"start":{"line":522,"column":15},"end":{"line":522,"column":35}},{"start":{"line":522,"column":39},"end":{"line":522,"column":72}}]},"35":{"line":534,"type":"binary-expr","locations":[{"start":{"line":534,"column":12},"end":{"line":534,"column":32}},{"start":{"line":534,"column":36},"end":{"line":534,"column":68}},{"start":{"line":535,"column":12},"end":{"line":535,"column":33}},{"start":{"line":536,"column":16},"end":{"line":536,"column":48}},{"start":{"line":537,"column":16},"end":{"line":537,"column":48}},{"start":{"line":538,"column":16},"end":{"line":538,"column":48}}]},"36":{"line":569,"type":"if","locations":[{"start":{"line":569,"column":12},"end":{"line":569,"column":12}},{"start":{"line":569,"column":12},"end":{"line":569,"column":12}}]},"37":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":8},"end":{"line":601,"column":8}},{"start":{"line":601,"column":8},"end":{"line":601,"column":8}}]},"38":{"line":601,"type":"binary-expr","locations":[{"start":{"line":601,"column":12},"end":{"line":601,"column":34}},{"start":{"line":601,"column":38},"end":{"line":601,"column":71}}]},"39":{"line":609,"type":"switch","locations":[{"start":{"line":615,"column":16},"end":{"line":615,"column":41}},{"start":{"line":616,"column":16},"end":{"line":618,"column":26}},{"start":{"line":626,"column":16},"end":{"line":634,"column":17}},{"start":{"line":644,"column":16},"end":{"line":644,"column":32}},{"start":{"line":645,"column":16},"end":{"line":646,"column":49}},{"start":{"line":653,"column":16},"end":{"line":653,"column":44}},{"start":{"line":654,"column":16},"end":{"line":666,"column":32}},{"start":{"line":670,"column":16},"end":{"line":676,"column":22}},{"start":{"line":682,"column":16},"end":{"line":690,"column":22}},{"start":{"line":696,"column":16},"end":{"line":718,"column":32}},{"start":{"line":721,"column":16},"end":{"line":722,"column":32}}]},"40":{"line":629,"type":"if","locations":[{"start":{"line":629,"column":20},"end":{"line":629,"column":20}},{"start":{"line":629,"column":20},"end":{"line":629,"column":20}}]},"41":{"line":629,"type":"binary-expr","locations":[{"start":{"line":629,"column":24},"end":{"line":629,"column":37}},{"start":{"line":629,"column":41},"end":{"line":629,"column":56}}]},"42":{"line":655,"type":"if","locations":[{"start":{"line":655,"column":20},"end":{"line":655,"column":20}},{"start":{"line":655,"column":20},"end":{"line":655,"column":20}}]},"43":{"line":656,"type":"if","locations":[{"start":{"line":656,"column":24},"end":{"line":656,"column":24}},{"start":{"line":656,"column":24},"end":{"line":656,"column":24}}]},"44":{"line":659,"type":"if","locations":[{"start":{"line":659,"column":24},"end":{"line":659,"column":24}},{"start":{"line":659,"column":24},"end":{"line":659,"column":24}}]},"45":{"line":659,"type":"binary-expr","locations":[{"start":{"line":659,"column":28},"end":{"line":659,"column":39}},{"start":{"line":660,"column":28},"end":{"line":660,"column":61}},{"start":{"line":661,"column":28},"end":{"line":661,"column":65}}]},"46":{"line":672,"type":"binary-expr","locations":[{"start":{"line":672,"column":24},"end":{"line":672,"column":35}},{"start":{"line":673,"column":24},"end":{"line":673,"column":44}},{"start":{"line":674,"column":24},"end":{"line":674,"column":55}},{"start":{"line":675,"column":24},"end":{"line":675,"column":59}}]},"47":{"line":684,"type":"binary-expr","locations":[{"start":{"line":684,"column":24},"end":{"line":684,"column":46}},{"start":{"line":685,"column":24},"end":{"line":685,"column":61}},{"start":{"line":686,"column":24},"end":{"line":686,"column":76}},{"start":{"line":687,"column":24},"end":{"line":687,"column":41}},{"start":{"line":688,"column":24},"end":{"line":688,"column":60}},{"start":{"line":689,"column":24},"end":{"line":689,"column":69}}]},"48":{"line":697,"type":"if","locations":[{"start":{"line":697,"column":20},"end":{"line":697,"column":20}},{"start":{"line":697,"column":20},"end":{"line":697,"column":20}}]},"49":{"line":699,"type":"binary-expr","locations":[{"start":{"line":699,"column":28},"end":{"line":699,"column":57}},{"start":{"line":700,"column":28},"end":{"line":700,"column":56}},{"start":{"line":701,"column":28},"end":{"line":701,"column":66}}]},"50":{"line":704,"type":"if","locations":[{"start":{"line":704,"column":20},"end":{"line":704,"column":20}},{"start":{"line":704,"column":20},"end":{"line":704,"column":20}}]},"51":{"line":706,"type":"binary-expr","locations":[{"start":{"line":706,"column":28},"end":{"line":706,"column":57}},{"start":{"line":707,"column":28},"end":{"line":707,"column":56}},{"start":{"line":708,"column":28},"end":{"line":708,"column":66}}]},"52":{"line":711,"type":"if","locations":[{"start":{"line":711,"column":20},"end":{"line":711,"column":20}},{"start":{"line":711,"column":20},"end":{"line":711,"column":20}}]},"53":{"line":713,"type":"binary-expr","locations":[{"start":{"line":713,"column":28},"end":{"line":713,"column":57}},{"start":{"line":714,"column":28},"end":{"line":714,"column":56}},{"start":{"line":715,"column":28},"end":{"line":715,"column":66}}]},"54":{"line":737,"type":"switch","locations":[{"start":{"line":738,"column":12},"end":{"line":739,"column":25}},{"start":{"line":741,"column":12},"end":{"line":741,"column":40}},{"start":{"line":742,"column":12},"end":{"line":742,"column":43}},{"start":{"line":743,"column":12},"end":{"line":744,"column":25}},{"start":{"line":746,"column":12},"end":{"line":747,"column":25}},{"start":{"line":749,"column":12},"end":{"line":757,"column":17}},{"start":{"line":761,"column":12},"end":{"line":797,"column":17}},{"start":{"line":801,"column":12},"end":{"line":801,"column":35}},{"start":{"line":802,"column":12},"end":{"line":803,"column":26}},{"start":{"line":805,"column":12},"end":{"line":806,"column":26}},{"start":{"line":808,"column":12},"end":{"line":814,"column":26}},{"start":{"line":816,"column":12},"end":{"line":817,"column":26}}]},"55":{"line":750,"type":"switch","locations":[{"start":{"line":751,"column":20},"end":{"line":752,"column":33}},{"start":{"line":753,"column":20},"end":{"line":754,"column":33}}]},"56":{"line":763,"type":"switch","locations":[{"start":{"line":764,"column":20},"end":{"line":765,"column":33}},{"start":{"line":766,"column":20},"end":{"line":767,"column":33}},{"start":{"line":768,"column":20},"end":{"line":769,"column":33}},{"start":{"line":770,"column":20},"end":{"line":770,"column":30}},{"start":{"line":771,"column":20},"end":{"line":771,"column":30}},{"start":{"line":772,"column":20},"end":{"line":772,"column":31}},{"start":{"line":773,"column":20},"end":{"line":774,"column":33}},{"start":{"line":775,"column":20},"end":{"line":775,"column":29}},{"start":{"line":776,"column":20},"end":{"line":776,"column":30}},{"start":{"line":777,"column":20},"end":{"line":777,"column":29}},{"start":{"line":778,"column":20},"end":{"line":778,"column":30}},{"start":{"line":779,"column":20},"end":{"line":779,"column":30}},{"start":{"line":780,"column":20},"end":{"line":781,"column":34}},{"start":{"line":782,"column":20},"end":{"line":782,"column":30}},{"start":{"line":783,"column":20},"end":{"line":783,"column":30}},{"start":{"line":784,"column":20},"end":{"line":785,"column":34}},{"start":{"line":786,"column":20},"end":{"line":786,"column":29}},{"start":{"line":787,"column":20},"end":{"line":788,"column":34}},{"start":{"line":789,"column":20},"end":{"line":789,"column":29}},{"start":{"line":790,"column":20},"end":{"line":790,"column":29}},{"start":{"line":791,"column":20},"end":{"line":792,"column":34}},{"start":{"line":793,"column":20},"end":{"line":794,"column":34}}]},"57":{"line":811,"type":"if","locations":[{"start":{"line":811,"column":16},"end":{"line":811,"column":16}},{"start":{"line":811,"column":16},"end":{"line":811,"column":16}}]},"58":{"line":831,"type":"binary-expr","locations":[{"start":{"line":831,"column":23},"end":{"line":831,"column":27}},{"start":{"line":831,"column":31},"end":{"line":831,"column":61}},{"start":{"line":831,"column":65},"end":{"line":831,"column":87}}]},"59":{"line":841,"type":"binary-expr","locations":[{"start":{"line":841,"column":15},"end":{"line":841,"column":31}},{"start":{"line":841,"column":35},"end":{"line":841,"column":73}}]},"60":{"line":878,"type":"switch","locations":[{"start":{"line":879,"column":12},"end":{"line":879,"column":28}},{"start":{"line":880,"column":12},"end":{"line":882,"column":22}},{"start":{"line":884,"column":12},"end":{"line":886,"column":22}}]},"61":{"line":878,"type":"binary-expr","locations":[{"start":{"line":878,"column":16},"end":{"line":878,"column":20}},{"start":{"line":878,"column":24},"end":{"line":878,"column":33}}]},"62":{"line":891,"type":"switch","locations":[{"start":{"line":892,"column":12},"end":{"line":893,"column":42}},{"start":{"line":895,"column":12},"end":{"line":899,"column":22}},{"start":{"line":901,"column":12},"end":{"line":905,"column":22}}]},"63":{"line":891,"type":"binary-expr","locations":[{"start":{"line":891,"column":16},"end":{"line":891,"column":20}},{"start":{"line":891,"column":24},"end":{"line":891,"column":33}}]},"64":{"line":896,"type":"if","locations":[{"start":{"line":896,"column":16},"end":{"line":896,"column":16}},{"start":{"line":896,"column":16},"end":{"line":896,"column":16}}]},"65":{"line":896,"type":"binary-expr","locations":[{"start":{"line":896,"column":20},"end":{"line":896,"column":49}},{"start":{"line":896,"column":53},"end":{"line":896,"column":77}}]},"66":{"line":902,"type":"if","locations":[{"start":{"line":902,"column":16},"end":{"line":902,"column":16}},{"start":{"line":902,"column":16},"end":{"line":902,"column":16}}]},"67":{"line":922,"type":"if","locations":[{"start":{"line":922,"column":8},"end":{"line":922,"column":8}},{"start":{"line":922,"column":8},"end":{"line":922,"column":8}}]},"68":{"line":923,"type":"binary-expr","locations":[{"start":{"line":923,"column":12},"end":{"line":923,"column":35}},{"start":{"line":924,"column":12},"end":{"line":924,"column":47}},{"start":{"line":925,"column":12},"end":{"line":925,"column":46}},{"start":{"line":929,"column":13},"end":{"line":929,"column":52}},{"start":{"line":929,"column":56},"end":{"line":929,"column":91}}]},"69":{"line":931,"type":"cond-expr","locations":[{"start":{"line":931,"column":57},"end":{"line":931,"column":66}},{"start":{"line":931,"column":69},"end":{"line":931,"column":83}}]},"70":{"line":934,"type":"if","locations":[{"start":{"line":934,"column":16},"end":{"line":934,"column":16}},{"start":{"line":934,"column":16},"end":{"line":934,"column":16}}]},"71":{"line":935,"type":"binary-expr","locations":[{"start":{"line":935,"column":20},"end":{"line":935,"column":60}},{"start":{"line":936,"column":20},"end":{"line":936,"column":59}}]},"72":{"line":967,"type":"binary-expr","locations":[{"start":{"line":967,"column":15},"end":{"line":967,"column":38}},{"start":{"line":967,"column":42},"end":{"line":967,"column":72}},{"start":{"line":967,"column":76},"end":{"line":967,"column":107}}]},"73":{"line":1023,"type":"if","locations":[{"start":{"line":1023,"column":8},"end":{"line":1023,"column":8}},{"start":{"line":1023,"column":8},"end":{"line":1023,"column":8}}]},"74":{"line":1023,"type":"binary-expr","locations":[{"start":{"line":1023,"column":12},"end":{"line":1023,"column":46}},{"start":{"line":1023,"column":50},"end":{"line":1023,"column":63}}]},"75":{"line":1026,"type":"if","locations":[{"start":{"line":1026,"column":8},"end":{"line":1026,"column":8}},{"start":{"line":1026,"column":8},"end":{"line":1026,"column":8}}]},"76":{"line":1029,"type":"if","locations":[{"start":{"line":1029,"column":8},"end":{"line":1029,"column":8}},{"start":{"line":1029,"column":8},"end":{"line":1029,"column":8}}]},"77":{"line":1033,"type":"if","locations":[{"start":{"line":1033,"column":8},"end":{"line":1033,"column":8}},{"start":{"line":1033,"column":8},"end":{"line":1033,"column":8}}]},"78":{"line":1035,"type":"if","locations":[{"start":{"line":1035,"column":15},"end":{"line":1035,"column":15}},{"start":{"line":1035,"column":15},"end":{"line":1035,"column":15}}]},"79":{"line":1035,"type":"binary-expr","locations":[{"start":{"line":1035,"column":19},"end":{"line":1035,"column":45}},{"start":{"line":1035,"column":49},"end":{"line":1035,"column":83}}]},"80":{"line":1036,"type":"if","locations":[{"start":{"line":1036,"column":12},"end":{"line":1036,"column":12}},{"start":{"line":1036,"column":12},"end":{"line":1036,"column":12}}]},"81":{"line":1038,"type":"if","locations":[{"start":{"line":1038,"column":19},"end":{"line":1038,"column":19}},{"start":{"line":1038,"column":19},"end":{"line":1038,"column":19}}]},"82":{"line":1040,"type":"if","locations":[{"start":{"line":1040,"column":19},"end":{"line":1040,"column":19}},{"start":{"line":1040,"column":19},"end":{"line":1040,"column":19}}]},"83":{"line":1049,"type":"if","locations":[{"start":{"line":1049,"column":8},"end":{"line":1049,"column":8}},{"start":{"line":1049,"column":8},"end":{"line":1049,"column":8}}]},"84":{"line":1054,"type":"if","locations":[{"start":{"line":1054,"column":12},"end":{"line":1054,"column":12}},{"start":{"line":1054,"column":12},"end":{"line":1054,"column":12}}]},"85":{"line":1159,"type":"if","locations":[{"start":{"line":1159,"column":8},"end":{"line":1159,"column":8}},{"start":{"line":1159,"column":8},"end":{"line":1159,"column":8}}]},"86":{"line":1164,"type":"if","locations":[{"start":{"line":1164,"column":15},"end":{"line":1164,"column":15}},{"start":{"line":1164,"column":15},"end":{"line":1164,"column":15}}]},"87":{"line":1164,"type":"binary-expr","locations":[{"start":{"line":1164,"column":19},"end":{"line":1164,"column":45}},{"start":{"line":1164,"column":49},"end":{"line":1164,"column":83}}]},"88":{"line":1190,"type":"binary-expr","locations":[{"start":{"line":1190,"column":12},"end":{"line":1190,"column":48}},{"start":{"line":1191,"column":12},"end":{"line":1191,"column":70}},{"start":{"line":1192,"column":12},"end":{"line":1192,"column":62}},{"start":{"line":1193,"column":12},"end":{"line":1193,"column":48}},{"start":{"line":1194,"column":12},"end":{"line":1194,"column":70}},{"start":{"line":1195,"column":12},"end":{"line":1195,"column":62}}]},"89":{"line":1210,"type":"switch","locations":[{"start":{"line":1211,"column":12},"end":{"line":1211,"column":30}},{"start":{"line":1212,"column":12},"end":{"line":1212,"column":34}},{"start":{"line":1213,"column":12},"end":{"line":1213,"column":33}},{"start":{"line":1214,"column":12},"end":{"line":1214,"column":36}},{"start":{"line":1215,"column":12},"end":{"line":1215,"column":44}},{"start":{"line":1216,"column":12},"end":{"line":1216,"column":35}},{"start":{"line":1217,"column":12},"end":{"line":1218,"column":28}},{"start":{"line":1220,"column":12},"end":{"line":1221,"column":63}},{"start":{"line":1223,"column":12},"end":{"line":1227,"column":13}},{"start":{"line":1229,"column":12},"end":{"line":1230,"column":105}},{"start":{"line":1232,"column":12},"end":{"line":1233,"column":115}},{"start":{"line":1235,"column":12},"end":{"line":1236,"column":29}}]},"90":{"line":1226,"type":"binary-expr","locations":[{"start":{"line":1226,"column":23},"end":{"line":1226,"column":41}},{"start":{"line":1226,"column":45},"end":{"line":1226,"column":97}}]},"91":{"line":1230,"type":"binary-expr","locations":[{"start":{"line":1230,"column":23},"end":{"line":1230,"column":61}},{"start":{"line":1230,"column":65},"end":{"line":1230,"column":104}}]},"92":{"line":1233,"type":"binary-expr","locations":[{"start":{"line":1233,"column":23},"end":{"line":1233,"column":67}},{"start":{"line":1233,"column":71},"end":{"line":1233,"column":114}}]},"93":{"line":1254,"type":"binary-expr","locations":[{"start":{"line":1254,"column":15},"end":{"line":1254,"column":38}},{"start":{"line":1254,"column":42},"end":{"line":1254,"column":61}},{"start":{"line":1254,"column":65},"end":{"line":1254,"column":76}}]}},"code":["/**"," * @fileoverview Common utils for AST."," * @author Gyandeep Singh"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const esutils = require(\"esutils\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const anyFunctionPattern = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression)$/;","const anyLoopPattern = /^(?:DoWhile|For|ForIn|ForOf|While)Statement$/;","const arrayOrTypedArrayPattern = /Array$/;","const arrayMethodPattern = /^(?:every|filter|find|findIndex|forEach|map|some)$/;","const bindOrCallOrApplyPattern = /^(?:bind|call|apply)$/;","const breakableTypePattern = /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/;","const thisTagPattern = /^[\\s*]*@this/m;","","","const COMMENTS_IGNORE_PATTERN = /^\\s*(?:eslint|jshint\\s+|jslint\\s+|istanbul\\s+|globals?\\s+|exported\\s+|jscs)/;","const LINEBREAKS = new Set([\"\\r\\n\", \"\\r\", \"\\n\", \"\\u2028\", \"\\u2029\"]);","const LINEBREAK_MATCHER = /\\r\\n|[\\r\\n\\u2028\\u2029]/;","","// A set of node types that can contain a list of statements","const STATEMENT_LIST_PARENTS = new Set([\"Program\", \"BlockStatement\", \"SwitchCase\"]);","","/**"," * Checks reference if is non initializer and writable."," * @param {Reference} reference - A reference to check."," * @param {int} index - The index of the reference in the references."," * @param {Reference[]} references - The array that the reference belongs to."," * @returns {boolean} Success/Failure"," * @private"," */","function isModifyingReference(reference, index, references) {","    const identifier = reference.identifier;","","    /*","     * Destructuring assignments can have multiple default value, so","     * possibly there are multiple writeable references for the same","     * identifier.","     */","    const modifyingDifferentIdentifier = index === 0 ||","        references[index - 1].identifier !== identifier;","","    return (identifier &&","        reference.init === false &&","        reference.isWrite() &&","        modifyingDifferentIdentifier","    );","}","","/**"," * Checks whether the given string starts with uppercase or not."," *"," * @param {string} s - The string to check."," * @returns {boolean} `true` if the string starts with uppercase."," */","function startsWithUpperCase(s) {","    return s[0] !== s[0].toLocaleLowerCase();","}","","/**"," * Checks whether or not a node is a constructor."," * @param {ASTNode} node - A function node to check."," * @returns {boolean} Wehether or not a node is a constructor."," */","function isES5Constructor(node) {","    return (node.id && startsWithUpperCase(node.id.name));","}","","/**"," * Finds a function node from ancestors of a node."," * @param {ASTNode} node - A start node to find."," * @returns {Node|null} A found function node."," */","function getUpperFunction(node) {","    while (node) {","        if (anyFunctionPattern.test(node.type)) {","            return node;","        }","        node = node.parent;","    }","    return null;","}","","/**"," * Checks whether a given node is a function node or not."," * The following types are function nodes:"," *"," * - ArrowFunctionExpression"," * - FunctionDeclaration"," * - FunctionExpression"," *"," * @param {ASTNode|null} node - A node to check."," * @returns {boolean} `true` if the node is a function node."," */","function isFunction(node) {","    return Boolean(node && anyFunctionPattern.test(node.type));","}","","/**"," * Checks whether a given node is a loop node or not."," * The following types are loop nodes:"," *"," * - DoWhileStatement"," * - ForInStatement"," * - ForOfStatement"," * - ForStatement"," * - WhileStatement"," *"," * @param {ASTNode|null} node - A node to check."," * @returns {boolean} `true` if the node is a loop node."," */","function isLoop(node) {","    return Boolean(node && anyLoopPattern.test(node.type));","}","","/**"," * Checks whether the given node is in a loop or not."," *"," * @param {ASTNode} node - The node to check."," * @returns {boolean} `true` if the node is in a loop."," */","function isInLoop(node) {","    while (node && !isFunction(node)) {","        if (isLoop(node)) {","            return true;","        }","","        node = node.parent;","    }","","    return false;","}","","/**"," * Checks whether or not a node is `null` or `undefined`."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is a `null` or `undefined`."," * @public"," */","function isNullOrUndefined(node) {","    return (","        module.exports.isNullLiteral(node) ||","        (node.type === \"Identifier\" && node.name === \"undefined\") ||","        (node.type === \"UnaryExpression\" && node.operator === \"void\")","    );","}","","/**"," * Checks whether or not a node is callee."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is callee."," */","function isCallee(node) {","    return node.parent.type === \"CallExpression\" && node.parent.callee === node;","}","","/**"," * Checks whether or not a node is `Reflect.apply`."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is a `Reflect.apply`."," */","function isReflectApply(node) {","    return (","        node.type === \"MemberExpression\" &&","        node.object.type === \"Identifier\" &&","        node.object.name === \"Reflect\" &&","        node.property.type === \"Identifier\" &&","        node.property.name === \"apply\" &&","        node.computed === false","    );","}","","/**"," * Checks whether or not a node is `Array.from`."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is a `Array.from`."," */","function isArrayFromMethod(node) {","    return (","        node.type === \"MemberExpression\" &&","        node.object.type === \"Identifier\" &&","        arrayOrTypedArrayPattern.test(node.object.name) &&","        node.property.type === \"Identifier\" &&","        node.property.name === \"from\" &&","        node.computed === false","    );","}","","/**"," * Checks whether or not a node is a method which has `thisArg`."," * @param {ASTNode} node - A node to check."," * @returns {boolean} Whether or not the node is a method which has `thisArg`."," */","function isMethodWhichHasThisArg(node) {","    while (node) {","        if (node.type === \"Identifier\") {","            return arrayMethodPattern.test(node.name);","        }","        if (node.type === \"MemberExpression\" && !node.computed) {","            node = node.property;","            continue;","        }","","        break;","    }","","    return false;","}","","/**"," * Creates the negate function of the given function."," * @param {Function} f - The function to negate."," * @returns {Function} Negated function."," */","function negate(f) {","    return token => !f(token);","}","","/**"," * Checks whether or not a node has a `@this` tag in its comments."," * @param {ASTNode} node - A node to check."," * @param {SourceCode} sourceCode - A SourceCode instance to get comments."," * @returns {boolean} Whether or not the node has a `@this` tag in its comments."," */","function hasJSDocThisTag(node, sourceCode) {","    const jsdocComment = sourceCode.getJSDocComment(node);","","    if (jsdocComment && thisTagPattern.test(jsdocComment.value)) {","        return true;","    }","","    // Checks `@this` in its leading comments for callbacks,","    // because callbacks don't have its JSDoc comment.","    // e.g.","    //     sinon.test(/* @this sinon.Sandbox */function() { this.spy(); });","    return sourceCode.getComments(node).leading.some(comment => thisTagPattern.test(comment.value));","}","","/**"," * Determines if a node is surrounded by parentheses."," * @param {SourceCode} sourceCode The ESLint source code object"," * @param {ASTNode} node The node to be checked."," * @returns {boolean} True if the node is parenthesised."," * @private"," */","function isParenthesised(sourceCode, node) {","    const previousToken = sourceCode.getTokenBefore(node),","        nextToken = sourceCode.getTokenAfter(node);","","    return Boolean(previousToken && nextToken) &&","        previousToken.value === \"(\" && previousToken.range[1] <= node.range[0] &&","        nextToken.value === \")\" && nextToken.range[0] >= node.range[1];","}","","/**"," * Checks if the given token is an arrow token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is an arrow token."," */","function isArrowToken(token) {","    return token.value === \"=>\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a comma token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a comma token."," */","function isCommaToken(token) {","    return token.value === \",\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a semicolon token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a semicolon token."," */","function isSemicolonToken(token) {","    return token.value === \";\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a colon token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a colon token."," */","function isColonToken(token) {","    return token.value === \":\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is an opening parenthesis token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is an opening parenthesis token."," */","function isOpeningParenToken(token) {","    return token.value === \"(\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a closing parenthesis token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a closing parenthesis token."," */","function isClosingParenToken(token) {","    return token.value === \")\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is an opening square bracket token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is an opening square bracket token."," */","function isOpeningBracketToken(token) {","    return token.value === \"[\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a closing square bracket token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a closing square bracket token."," */","function isClosingBracketToken(token) {","    return token.value === \"]\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is an opening brace token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is an opening brace token."," */","function isOpeningBraceToken(token) {","    return token.value === \"{\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a closing brace token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a closing brace token."," */","function isClosingBraceToken(token) {","    return token.value === \"}\" && token.type === \"Punctuator\";","}","","/**"," * Checks if the given token is a comment token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a comment token."," */","function isCommentToken(token) {","    return token.type === \"Line\" || token.type === \"Block\" || token.type === \"Shebang\";","}","","/**"," * Checks if the given token is a keyword token or not."," *"," * @param {Token} token - The token to check."," * @returns {boolean} `true` if the token is a keyword token."," */","function isKeywordToken(token) {","    return token.type === \"Keyword\";","}","","/**"," * Gets the `(` token of the given function node."," *"," * @param {ASTNode} node - The function node to get."," * @param {SourceCode} sourceCode - The source code object to get tokens."," * @returns {Token} `(` token."," */","function getOpeningParenOfParams(node, sourceCode) {","    return node.id","        ? sourceCode.getTokenAfter(node.id, isOpeningParenToken)","        : sourceCode.getFirstToken(node, isOpeningParenToken);","}","","/**"," * Creates a version of the LINEBREAK_MATCHER regex with the global flag."," * Global regexes are mutable, so this needs to be a function instead of a constant."," * @returns {RegExp} A global regular expression that matches line terminators"," */","function createGlobalLinebreakMatcher() {","    return new RegExp(LINEBREAK_MATCHER.source, \"g\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    COMMENTS_IGNORE_PATTERN,","    LINEBREAKS,","    LINEBREAK_MATCHER,","    STATEMENT_LIST_PARENTS,","","    /**","     * Determines whether two adjacent tokens are on the same line.","     * @param {Object} left - The left token object.","     * @param {Object} right - The right token object.","     * @returns {boolean} Whether or not the tokens are on the same line.","     * @public","     */","    isTokenOnSameLine(left, right) {","        return left.loc.end.line === right.loc.start.line;","    },","","    isNullOrUndefined,","    isCallee,","    isES5Constructor,","    getUpperFunction,","    isFunction,","    isLoop,","    isInLoop,","    isArrayFromMethod,","    isParenthesised,","    createGlobalLinebreakMatcher,","","    isArrowToken,","    isClosingBraceToken,","    isClosingBracketToken,","    isClosingParenToken,","    isColonToken,","    isCommaToken,","    isCommentToken,","    isKeywordToken,","    isNotClosingBraceToken: negate(isClosingBraceToken),","    isNotClosingBracketToken: negate(isClosingBracketToken),","    isNotClosingParenToken: negate(isClosingParenToken),","    isNotColonToken: negate(isColonToken),","    isNotCommaToken: negate(isCommaToken),","    isNotOpeningBraceToken: negate(isOpeningBraceToken),","    isNotOpeningBracketToken: negate(isOpeningBracketToken),","    isNotOpeningParenToken: negate(isOpeningParenToken),","    isNotSemicolonToken: negate(isSemicolonToken),","    isOpeningBraceToken,","    isOpeningBracketToken,","    isOpeningParenToken,","    isSemicolonToken,","","    /**","     * Checks whether or not a given node is a string literal.","     * @param {ASTNode} node - A node to check.","     * @returns {boolean} `true` if the node is a string literal.","     */","    isStringLiteral(node) {","        return (","            (node.type === \"Literal\" && typeof node.value === \"string\") ||","            node.type === \"TemplateLiteral\"","        );","    },","","    /**","     * Checks whether a given node is a breakable statement or not.","     * The node is breakable if the node is one of the following type:","     *","     * - DoWhileStatement","     * - ForInStatement","     * - ForOfStatement","     * - ForStatement","     * - SwitchStatement","     * - WhileStatement","     *","     * @param {ASTNode} node - A node to check.","     * @returns {boolean} `true` if the node is breakable.","     */","    isBreakableStatement(node) {","        return breakableTypePattern.test(node.type);","    },","","    /**","     * Gets the label if the parent node of a given node is a LabeledStatement.","     *","     * @param {ASTNode} node - A node to get.","     * @returns {string|null} The label or `null`.","     */","    getLabel(node) {","        if (node.parent.type === \"LabeledStatement\") {","            return node.parent.label.name;","        }","        return null;","    },","","    /**","     * Gets references which are non initializer and writable.","     * @param {Reference[]} references - An array of references.","     * @returns {Reference[]} An array of only references which are non initializer and writable.","     * @public","     */","    getModifyingReferences(references) {","        return references.filter(isModifyingReference);","    },","","    /**","     * Validate that a string passed in is surrounded by the specified character","     * @param  {string} val The text to check.","     * @param  {string} character The character to see if it's surrounded by.","     * @returns {boolean} True if the text is surrounded by the character, false if not.","     * @private","     */","    isSurroundedBy(val, character) {","        return val[0] === character && val[val.length - 1] === character;","    },","","    /**","     * Returns whether the provided node is an ESLint directive comment or not","     * @param {LineComment|BlockComment} node The node to be checked","     * @returns {boolean} `true` if the node is an ESLint directive comment","     */","    isDirectiveComment(node) {","        const comment = node.value.trim();","","        return (","            node.type === \"Line\" && comment.indexOf(\"eslint-\") === 0 ||","            node.type === \"Block\" && (","                comment.indexOf(\"global \") === 0 ||","                comment.indexOf(\"eslint \") === 0 ||","                comment.indexOf(\"eslint-\") === 0","            )","        );","    },","","    /**","     * Gets the trailing statement of a given node.","     *","     *     if (code)","     *         consequent;","     *","     * When taking this `IfStatement`, returns `consequent;` statement.","     *","     * @param {ASTNode} A node to get.","     * @returns {ASTNode|null} The trailing statement's node.","     */","    getTrailingStatement: esutils.ast.trailingStatement,","","    /**","     * Finds the variable by a given name in a given scope and its upper scopes.","     *","     * @param {escope.Scope} initScope - A scope to start find.","     * @param {string} name - A variable name to find.","     * @returns {escope.Variable|null} A found variable or `null`.","     */","    getVariableByName(initScope, name) {","        let scope = initScope;","","        while (scope) {","            const variable = scope.set.get(name);","","            if (variable) {","                return variable;","            }","","            scope = scope.upper;","        }","","        return null;","    },","","    /**","     * Checks whether or not a given function node is the default `this` binding.","     *","     * First, this checks the node:","     *","     * - The function name does not start with uppercase (it's a constructor).","     * - The function does not have a JSDoc comment that has a @this tag.","     *","     * Next, this checks the location of the node.","     * If the location is below, this judges `this` is valid.","     *","     * - The location is not on an object literal.","     * - The location is not assigned to a variable which starts with an uppercase letter.","     * - The location is not on an ES2015 class.","     * - Its `bind`/`call`/`apply` method is not called directly.","     * - The function is not a callback of array methods (such as `.forEach()`) if `thisArg` is given.","     *","     * @param {ASTNode} node - A function node to check.","     * @param {SourceCode} sourceCode - A SourceCode instance to get comments.","     * @returns {boolean} The function node is the default `this` binding.","     */","    isDefaultThisBinding(node, sourceCode) {","        if (isES5Constructor(node) || hasJSDocThisTag(node, sourceCode)) {","            return false;","        }","        const isAnonymous = node.id === null;","","        while (node) {","            const parent = node.parent;","","            switch (parent.type) {","","                /*","                 * Looks up the destination.","                 * e.g., obj.foo = nativeFoo || function foo() { ... };","                 */","                case \"LogicalExpression\":","                case \"ConditionalExpression\":","                    node = parent;","                    break;","","                // If the upper function is IIFE, checks the destination of the return value.","                // e.g.","                //   obj.foo = (function() {","                //     // setup...","                //     return function foo() { ... };","                //   })();","                case \"ReturnStatement\": {","                    const func = getUpperFunction(parent);","","                    if (func === null || !isCallee(func)) {","                        return true;","                    }","                    node = func.parent;","                    break;","                }","","                // e.g.","                //   var obj = { foo() { ... } };","                //   var obj = { foo: function() { ... } };","                //   class A { constructor() { ... } }","                //   class A { foo() { ... } }","                //   class A { get foo() { ... } }","                //   class A { set foo() { ... } }","                //   class A { static foo() { ... } }","                case \"Property\":","                case \"MethodDefinition\":","                    return parent.value !== node;","","                // e.g.","                //   obj.foo = function foo() { ... };","                //   Foo = function() { ... };","                //   [obj.foo = function foo() { ... }] = a;","                //   [Foo = function() { ... }] = a;","                case \"AssignmentExpression\":","                case \"AssignmentPattern\":","                    if (parent.right === node) {","                        if (parent.left.type === \"MemberExpression\") {","                            return false;","                        }","                        if (isAnonymous &&","                            parent.left.type === \"Identifier\" &&","                            startsWithUpperCase(parent.left.name)","                        ) {","                            return false;","                        }","                    }","                    return true;","","                // e.g.","                //   var Foo = function() { ... };","                case \"VariableDeclarator\":","                    return !(","                        isAnonymous &&","                        parent.init === node &&","                        parent.id.type === \"Identifier\" &&","                        startsWithUpperCase(parent.id.name)","                    );","","                // e.g.","                //   var foo = function foo() { ... }.bind(obj);","                //   (function foo() { ... }).call(obj);","                //   (function foo() { ... }).apply(obj, []);","                case \"MemberExpression\":","                    return (","                        parent.object !== node ||","                        parent.property.type !== \"Identifier\" ||","                        !bindOrCallOrApplyPattern.test(parent.property.name) ||","                        !isCallee(parent) ||","                        parent.parent.arguments.length === 0 ||","                        isNullOrUndefined(parent.parent.arguments[0])","                    );","","                // e.g.","                //   Reflect.apply(function() {}, obj, []);","                //   Array.from([], function() {}, obj);","                //   list.forEach(function() {}, obj);","                case \"CallExpression\":","                    if (isReflectApply(parent.callee)) {","                        return (","                            parent.arguments.length !== 3 ||","                            parent.arguments[0] !== node ||","                            isNullOrUndefined(parent.arguments[1])","                        );","                    }","                    if (isArrayFromMethod(parent.callee)) {","                        return (","                            parent.arguments.length !== 3 ||","                            parent.arguments[1] !== node ||","                            isNullOrUndefined(parent.arguments[2])","                        );","                    }","                    if (isMethodWhichHasThisArg(parent.callee)) {","                        return (","                            parent.arguments.length !== 2 ||","                            parent.arguments[0] !== node ||","                            isNullOrUndefined(parent.arguments[1])","                        );","                    }","                    return true;","","                // Otherwise `this` is default.","                default:","                    return true;","            }","        }","","        /* istanbul ignore next */","        return true;","    },","","    /**","     * Get the precedence level based on the node type","     * @param {ASTNode} node node to evaluate","     * @returns {int} precedence level","     * @private","     */","    getPrecedence(node) {","        switch (node.type) {","            case \"SequenceExpression\":","                return 0;","","            case \"AssignmentExpression\":","            case \"ArrowFunctionExpression\":","            case \"YieldExpression\":","                return 1;","","            case \"ConditionalExpression\":","                return 3;","","            case \"LogicalExpression\":","                switch (node.operator) {","                    case \"||\":","                        return 4;","                    case \"&&\":","                        return 5;","","                    // no default","                }","","                /* falls through */","","            case \"BinaryExpression\":","","                switch (node.operator) {","                    case \"|\":","                        return 6;","                    case \"^\":","                        return 7;","                    case \"&\":","                        return 8;","                    case \"==\":","                    case \"!=\":","                    case \"===\":","                    case \"!==\":","                        return 9;","                    case \"<\":","                    case \"<=\":","                    case \">\":","                    case \">=\":","                    case \"in\":","                    case \"instanceof\":","                        return 10;","                    case \"<<\":","                    case \">>\":","                    case \">>>\":","                        return 11;","                    case \"+\":","                    case \"-\":","                        return 12;","                    case \"*\":","                    case \"/\":","                    case \"%\":","                        return 13;","                    case \"**\":","                        return 15;","","                    // no default","                }","","                /* falls through */","","            case \"UnaryExpression\":","            case \"AwaitExpression\":","                return 16;","","            case \"UpdateExpression\":","                return 17;","","            case \"CallExpression\":","","                // IIFE is allowed to have parens in any position (#655)","                if (node.callee.type === \"FunctionExpression\") {","                    return -1;","                }","                return 18;","","            case \"NewExpression\":","                return 19;","","            // no default","        }","        return 20;","    },","","    /**","     * Checks whether the given node is an empty block node or not.","     *","     * @param {ASTNode|null} node - The node to check.","     * @returns {boolean} `true` if the node is an empty block.","     */","    isEmptyBlock(node) {","        return Boolean(node && node.type === \"BlockStatement\" && node.body.length === 0);","    },","","    /**","     * Checks whether the given node is an empty function node or not.","     *","     * @param {ASTNode|null} node - The node to check.","     * @returns {boolean} `true` if the node is an empty function.","     */","    isEmptyFunction(node) {","        return isFunction(node) && module.exports.isEmptyBlock(node.body);","    },","","    /**","     * Gets the property name of a given node.","     * The node can be a MemberExpression, a Property, or a MethodDefinition.","     *","     * If the name is dynamic, this returns `null`.","     *","     * For examples:","     *","     *     a.b           // => \"b\"","     *     a[\"b\"]        // => \"b\"","     *     a['b']        // => \"b\"","     *     a[`b`]        // => \"b\"","     *     a[100]        // => \"100\"","     *     a[b]          // => null","     *     a[\"a\" + \"b\"]  // => null","     *     a[tag`b`]     // => null","     *     a[`${b}`]     // => null","     *","     *     let a = {b: 1}            // => \"b\"","     *     let a = {[\"b\"]: 1}        // => \"b\"","     *     let a = {['b']: 1}        // => \"b\"","     *     let a = {[`b`]: 1}        // => \"b\"","     *     let a = {[100]: 1}        // => \"100\"","     *     let a = {[b]: 1}          // => null","     *     let a = {[\"a\" + \"b\"]: 1}  // => null","     *     let a = {[tag`b`]: 1}     // => null","     *     let a = {[`${b}`]: 1}     // => null","     *","     * @param {ASTNode} node - The node to get.","     * @returns {string|null} The property name if static. Otherwise, null.","     */","    getStaticPropertyName(node) {","        let prop;","","        switch (node && node.type) {","            case \"Property\":","            case \"MethodDefinition\":","                prop = node.key;","                break;","","            case \"MemberExpression\":","                prop = node.property;","                break;","","            // no default","        }","","        switch (prop && prop.type) {","            case \"Literal\":","                return String(prop.value);","","            case \"TemplateLiteral\":","                if (prop.expressions.length === 0 && prop.quasis.length === 1) {","                    return prop.quasis[0].value.cooked;","                }","                break;","","            case \"Identifier\":","                if (!node.computed) {","                    return prop.name;","                }","                break;","","            // no default","        }","","        return null;","    },","","    /**","     * Get directives from directive prologue of a Program or Function node.","     * @param {ASTNode} node - The node to check.","     * @returns {ASTNode[]} The directives found in the directive prologue.","     */","    getDirectivePrologue(node) {","        const directives = [];","","        // Directive prologues only occur at the top of files or functions.","        if (","            node.type === \"Program\" ||","            node.type === \"FunctionDeclaration\" ||","            node.type === \"FunctionExpression\" ||","","            // Do not check arrow functions with implicit return.","            // `() => \"use strict\";` returns the string `\"use strict\"`.","            (node.type === \"ArrowFunctionExpression\" && node.body.type === \"BlockStatement\")","        ) {","            const statements = node.type === \"Program\" ? node.body : node.body.body;","","            for (const statement of statements) {","                if (","                    statement.type === \"ExpressionStatement\" &&","                    statement.expression.type === \"Literal\"","                ) {","                    directives.push(statement);","                } else {","                    break;","                }","            }","        }","","        return directives;","    },","","","    /**","     * Determines whether this node is a decimal integer literal. If a node is a decimal integer literal, a dot added","     after the node will be parsed as a decimal point, rather than a property-access dot.","     * @param {ASTNode} node - The node to check.","     * @returns {boolean} `true` if this node is a decimal integer.","     * @example","     *","     * 5       // true","     * 5.      // false","     * 5.0     // false","     * 05      // false","     * 0x5     // false","     * 0b101   // false","     * 0o5     // false","     * 5e0     // false","     * '5'     // false","     */","    isDecimalInteger(node) {","        return node.type === \"Literal\" && typeof node.value === \"number\" && /^(0|[1-9]\\d*)$/.test(node.raw);","    },","","    /**","     * Gets the name and kind of the given function node.","     *","     * - `function foo() {}`  .................... `function 'foo'`","     * - `(function foo() {})`  .................. `function 'foo'`","     * - `(function() {})`  ...................... `function`","     * - `function* foo() {}`  ................... `generator function 'foo'`","     * - `(function* foo() {})`  ................. `generator function 'foo'`","     * - `(function*() {})`  ..................... `generator function`","     * - `() => {}`  ............................. `arrow function`","     * - `async () => {}`  ....................... `async arrow function`","     * - `({ foo: function foo() {} })`  ......... `method 'foo'`","     * - `({ foo: function() {} })`  ............. `method 'foo'`","     * - `({ ['foo']: function() {} })`  ......... `method 'foo'`","     * - `({ [foo]: function() {} })`  ........... `method`","     * - `({ foo() {} })`  ....................... `method 'foo'`","     * - `({ foo: function* foo() {} })`  ........ `generator method 'foo'`","     * - `({ foo: function*() {} })`  ............ `generator method 'foo'`","     * - `({ ['foo']: function*() {} })`  ........ `generator method 'foo'`","     * - `({ [foo]: function*() {} })`  .......... `generator method`","     * - `({ *foo() {} })`  ...................... `generator method 'foo'`","     * - `({ foo: async function foo() {} })`  ... `async method 'foo'`","     * - `({ foo: async function() {} })`  ....... `async method 'foo'`","     * - `({ ['foo']: async function() {} })`  ... `async method 'foo'`","     * - `({ [foo]: async function() {} })`  ..... `async method`","     * - `({ async foo() {} })`  ................. `async method 'foo'`","     * - `({ get foo() {} })`  ................... `getter 'foo'`","     * - `({ set foo(a) {} })`  .................. `setter 'foo'`","     * - `class A { constructor() {} }`  ......... `constructor`","     * - `class A { foo() {} }`  ................. `method 'foo'`","     * - `class A { *foo() {} }`  ................ `generator method 'foo'`","     * - `class A { async foo() {} }`  ........... `async method 'foo'`","     * - `class A { ['foo']() {} }`  ............. `method 'foo'`","     * - `class A { *['foo']() {} }`  ............ `generator method 'foo'`","     * - `class A { async ['foo']() {} }`  ....... `async method 'foo'`","     * - `class A { [foo]() {} }`  ............... `method`","     * - `class A { *[foo]() {} }`  .............. `generator method`","     * - `class A { async [foo]() {} }`  ......... `async method`","     * - `class A { get foo() {} }`  ............. `getter 'foo'`","     * - `class A { set foo(a) {} }`  ............ `setter 'foo'`","     * - `class A { static foo() {} }`  .......... `static method 'foo'`","     * - `class A { static *foo() {} }`  ......... `static generator method 'foo'`","     * - `class A { static async foo() {} }`  .... `static async method 'foo'`","     * - `class A { static get foo() {} }`  ...... `static getter 'foo'`","     * - `class A { static set foo(a) {} }`  ..... `static setter 'foo'`","     *","     * @param {ASTNode} node - The function node to get.","     * @returns {string} The name and kind of the function node.","     */","    getFunctionNameWithKind(node) {","        const parent = node.parent;","        const tokens = [];","","        if (parent.type === \"MethodDefinition\" && parent.static) {","            tokens.push(\"static\");","        }","        if (node.async) {","            tokens.push(\"async\");","        }","        if (node.generator) {","            tokens.push(\"generator\");","        }","","        if (node.type === \"ArrowFunctionExpression\") {","            tokens.push(\"arrow\", \"function\");","        } else if (parent.type === \"Property\" || parent.type === \"MethodDefinition\") {","            if (parent.kind === \"constructor\") {","                return \"constructor\";","            } else if (parent.kind === \"get\") {","                tokens.push(\"getter\");","            } else if (parent.kind === \"set\") {","                tokens.push(\"setter\");","            } else {","                tokens.push(\"method\");","            }","        } else {","            tokens.push(\"function\");","        }","","        if (node.id) {","            tokens.push(`'${node.id.name}'`);","        } else {","            const name = module.exports.getStaticPropertyName(parent);","","            if (name) {","                tokens.push(`'${name}'`);","            }","        }","","        return tokens.join(\" \");","    },","","    /**","     * Gets the location of the given function node for reporting.","     *","     * - `function foo() {}`","     *    ^^^^^^^^^^^^","     * - `(function foo() {})`","     *     ^^^^^^^^^^^^","     * - `(function() {})`","     *     ^^^^^^^^","     * - `function* foo() {}`","     *    ^^^^^^^^^^^^^","     * - `(function* foo() {})`","     *     ^^^^^^^^^^^^^","     * - `(function*() {})`","     *     ^^^^^^^^^","     * - `() => {}`","     *       ^^","     * - `async () => {}`","     *             ^^","     * - `({ foo: function foo() {} })`","     *       ^^^^^^^^^^^^^^^^^","     * - `({ foo: function() {} })`","     *       ^^^^^^^^^^^^^","     * - `({ ['foo']: function() {} })`","     *       ^^^^^^^^^^^^^^^^^","     * - `({ [foo]: function() {} })`","     *       ^^^^^^^^^^^^^^^","     * - `({ foo() {} })`","     *       ^^^","     * - `({ foo: function* foo() {} })`","     *       ^^^^^^^^^^^^^^^^^^","     * - `({ foo: function*() {} })`","     *       ^^^^^^^^^^^^^^","     * - `({ ['foo']: function*() {} })`","     *       ^^^^^^^^^^^^^^^^^^","     * - `({ [foo]: function*() {} })`","     *       ^^^^^^^^^^^^^^^^","     * - `({ *foo() {} })`","     *       ^^^^","     * - `({ foo: async function foo() {} })`","     *       ^^^^^^^^^^^^^^^^^^^^^^^","     * - `({ foo: async function() {} })`","     *       ^^^^^^^^^^^^^^^^^^^","     * - `({ ['foo']: async function() {} })`","     *       ^^^^^^^^^^^^^^^^^^^^^^^","     * - `({ [foo]: async function() {} })`","     *       ^^^^^^^^^^^^^^^^^^^^^","     * - `({ async foo() {} })`","     *       ^^^^^^^^^","     * - `({ get foo() {} })`","     *       ^^^^^^^","     * - `({ set foo(a) {} })`","     *       ^^^^^^^","     * - `class A { constructor() {} }`","     *              ^^^^^^^^^^^","     * - `class A { foo() {} }`","     *              ^^^","     * - `class A { *foo() {} }`","     *              ^^^^","     * - `class A { async foo() {} }`","     *              ^^^^^^^^^","     * - `class A { ['foo']() {} }`","     *              ^^^^^^^","     * - `class A { *['foo']() {} }`","     *              ^^^^^^^^","     * - `class A { async ['foo']() {} }`","     *              ^^^^^^^^^^^^^","     * - `class A { [foo]() {} }`","     *              ^^^^^","     * - `class A { *[foo]() {} }`","     *              ^^^^^^","     * - `class A { async [foo]() {} }`","     *              ^^^^^^^^^^^","     * - `class A { get foo() {} }`","     *              ^^^^^^^","     * - `class A { set foo(a) {} }`","     *              ^^^^^^^","     * - `class A { static foo() {} }`","     *              ^^^^^^^^^^","     * - `class A { static *foo() {} }`","     *              ^^^^^^^^^^^","     * - `class A { static async foo() {} }`","     *              ^^^^^^^^^^^^^^^^","     * - `class A { static get foo() {} }`","     *              ^^^^^^^^^^^^^^","     * - `class A { static set foo(a) {} }`","     *              ^^^^^^^^^^^^^^","     *","     * @param {ASTNode} node - The function node to get.","     * @param {SourceCode} sourceCode - The source code object to get tokens.","     * @returns {string} The location of the function node for reporting.","     */","    getFunctionHeadLoc(node, sourceCode) {","        const parent = node.parent;","        let start = null;","        let end = null;","","        if (node.type === \"ArrowFunctionExpression\") {","            const arrowToken = sourceCode.getTokenBefore(node.body, isArrowToken);","","            start = arrowToken.loc.start;","            end = arrowToken.loc.end;","        } else if (parent.type === \"Property\" || parent.type === \"MethodDefinition\") {","            start = parent.loc.start;","            end = getOpeningParenOfParams(node, sourceCode).loc.start;","        } else {","            start = node.loc.start;","            end = getOpeningParenOfParams(node, sourceCode).loc.start;","        }","","        return {","            start: Object.assign({}, start),","            end: Object.assign({}, end)","        };","    },","","    /**","    * Gets the parenthesized text of a node. This is similar to sourceCode.getText(node), but it also includes any parentheses","    * surrounding the node.","    * @param {SourceCode} sourceCode The source code object","    * @param {ASTNode} node An expression node","    * @returns {string} The text representing the node, with all surrounding parentheses included","    */","    getParenthesisedText(sourceCode, node) {","        let leftToken = sourceCode.getFirstToken(node);","        let rightToken = sourceCode.getLastToken(node);","","        while (","            sourceCode.getTokenBefore(leftToken) &&","            sourceCode.getTokenBefore(leftToken).type === \"Punctuator\" &&","            sourceCode.getTokenBefore(leftToken).value === \"(\" &&","            sourceCode.getTokenAfter(rightToken) &&","            sourceCode.getTokenAfter(rightToken).type === \"Punctuator\" &&","            sourceCode.getTokenAfter(rightToken).value === \")\"","        ) {","            leftToken = sourceCode.getTokenBefore(leftToken);","            rightToken = sourceCode.getTokenAfter(rightToken);","        }","","        return sourceCode.getText().slice(leftToken.range[0], rightToken.range[1]);","    },","","    /*","     * Determine if a node has a possiblity to be an Error object","     * @param  {ASTNode} node  ASTNode to check","     * @returns {boolean} True if there is a chance it contains an Error obj","     */","    couldBeError(node) {","        switch (node.type) {","            case \"Identifier\":","            case \"CallExpression\":","            case \"NewExpression\":","            case \"MemberExpression\":","            case \"TaggedTemplateExpression\":","            case \"YieldExpression\":","            case \"AwaitExpression\":","                return true; // possibly an error object.","","            case \"AssignmentExpression\":","                return module.exports.couldBeError(node.right);","","            case \"SequenceExpression\": {","                const exprs = node.expressions;","","                return exprs.length !== 0 && module.exports.couldBeError(exprs[exprs.length - 1]);","            }","","            case \"LogicalExpression\":","                return module.exports.couldBeError(node.left) || module.exports.couldBeError(node.right);","","            case \"ConditionalExpression\":","                return module.exports.couldBeError(node.consequent) || module.exports.couldBeError(node.alternate);","","            default:","                return false;","        }","    },","","    /**","     * Determines whether the given node is a `null` literal.","     * @param {ASTNode} node The node to check","     * @returns {boolean} `true` if the node is a `null` literal","     */","    isNullLiteral(node) {","","        /*","         * Checking `node.value === null` does not guarantee that a literal is a null literal.","         * When parsing values that cannot be represented in the current environment (e.g. unicode","         * regexes in Node 4), `node.value` is set to `null` because it wouldn't be possible to","         * set `node.value` to a unicode regex. To make sure a literal is actually `null`, check","         * `node.regex` instead. Also see: https://github.com/eslint/eslint/issues/8020","         */","        return node.type === \"Literal\" && node.value === null && !node.regex;","    }","};",""],"l":{"12":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"27":1,"28":1,"29":1,"32":1,"42":1,"43":0,"50":0,"53":0,"66":1,"67":0,"75":1,"76":0,"84":1,"85":0,"86":0,"87":0,"89":0,"91":0,"105":1,"106":0,"122":1,"123":0,"132":1,"133":0,"134":0,"135":0,"138":0,"141":0,"150":1,"151":0,"163":1,"164":0,"172":1,"173":0,"188":1,"189":0,"204":1,"205":0,"206":0,"207":0,"209":0,"210":0,"211":0,"214":0,"217":0,"225":1,"226":9,"235":1,"236":0,"238":0,"239":0,"246":0,"256":1,"257":0,"260":0,"271":1,"272":0,"281":1,"282":0,"291":1,"292":0,"301":1,"302":0,"311":1,"312":0,"321":1,"322":0,"331":1,"332":0,"341":1,"342":0,"351":1,"352":0,"361":1,"362":0,"371":1,"372":0,"381":1,"382":0,"392":1,"393":0,"403":1,"404":0,"411":1,"425":0,"467":0,"488":0,"498":0,"499":0,"501":0,"511":0,"522":0,"531":0,"533":0,"564":0,"566":0,"567":0,"569":0,"570":0,"573":0,"576":0,"601":0,"602":0,"604":0,"606":0,"607":0,"609":0,"617":0,"618":0,"627":0,"629":0,"630":0,"632":0,"633":0,"646":0,"655":0,"656":0,"657":0,"659":0,"663":0,"666":0,"671":0,"683":0,"697":0,"698":0,"704":0,"705":0,"711":0,"712":0,"718":0,"722":0,"727":1,"737":0,"739":0,"744":0,"747":0,"750":0,"752":0,"754":0,"763":0,"765":0,"767":0,"769":0,"774":0,"781":0,"785":0,"788":0,"792":0,"794":0,"803":0,"806":0,"811":0,"812":0,"814":0,"817":0,"821":0,"831":0,"841":0,"876":0,"878":0,"881":0,"882":0,"885":0,"886":0,"891":0,"893":0,"896":0,"897":0,"899":0,"902":0,"903":0,"905":0,"910":0,"919":0,"922":0,"931":0,"933":0,"934":0,"938":0,"940":0,"945":0,"967":0,"1020":0,"1021":0,"1023":0,"1024":0,"1026":0,"1027":0,"1029":0,"1030":0,"1033":0,"1034":0,"1035":0,"1036":0,"1037":0,"1038":0,"1039":0,"1040":0,"1041":0,"1043":0,"1046":0,"1049":0,"1050":0,"1052":0,"1054":0,"1055":0,"1059":0,"1155":0,"1156":0,"1157":0,"1159":0,"1160":0,"1162":0,"1163":0,"1164":0,"1165":0,"1166":0,"1168":0,"1169":0,"1172":0,"1186":0,"1187":0,"1189":0,"1197":0,"1198":0,"1201":0,"1210":0,"1218":0,"1221":0,"1224":0,"1226":0,"1230":0,"1233":0,"1236":0,"1254":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/config-ops.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/config-ops.js","s":{"1":1,"2":1,"3":1,"4":3,"5":3,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":37,"loc":{"start":{"line":37,"column":21},"end":{"line":37,"column":24}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":27},"end":{"line":52,"column":33}}},"3":{"name":"(anonymous_3)","line":85,"loc":{"start":{"line":85,"column":21},"end":{"line":85,"column":30}}},"4":{"name":"deepmerge","line":102,"loc":{"start":{"line":102,"column":11},"end":{"line":102,"column":60}}},"5":{"name":"(anonymous_5)","line":197,"loc":{"start":{"line":197,"column":13},"end":{"line":197,"column":22}}},"6":{"name":"(anonymous_6)","line":219,"loc":{"start":{"line":219,"column":22},"end":{"line":219,"column":31}}},"7":{"name":"(anonymous_7)","line":239,"loc":{"start":{"line":239,"column":19},"end":{"line":239,"column":32}}},"8":{"name":"(anonymous_8)","line":255,"loc":{"start":{"line":255,"column":19},"end":{"line":255,"column":32}}},"9":{"name":"(anonymous_9)","line":269,"loc":{"start":{"line":269,"column":24},"end":{"line":269,"column":33}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":47}},"2":{"start":{"line":14,"column":0},"end":{"line":14,"column":52}},"3":{"start":{"line":20,"column":0},"end":{"line":25,"column":57}},"4":{"start":{"line":22,"column":8},"end":{"line":22,"column":27}},"5":{"start":{"line":23,"column":8},"end":{"line":23,"column":19}},"6":{"start":{"line":31,"column":0},"end":{"line":272,"column":2}},"7":{"start":{"line":38,"column":8},"end":{"line":43,"column":10}},"8":{"start":{"line":54,"column":8},"end":{"line":54,"column":51}},"9":{"start":{"line":56,"column":8},"end":{"line":74,"column":9}},"10":{"start":{"line":58,"column":12},"end":{"line":58,"column":32}},"11":{"start":{"line":60,"column":12},"end":{"line":73,"column":15}},"12":{"start":{"line":60,"column":44},"end":{"line":60,"column":53}},"13":{"start":{"line":61,"column":16},"end":{"line":61,"column":59}},"14":{"start":{"line":63,"column":16},"end":{"line":72,"column":17}},"15":{"start":{"line":64,"column":20},"end":{"line":64,"column":69}},"16":{"start":{"line":65,"column":20},"end":{"line":67,"column":21}},"17":{"start":{"line":66,"column":24},"end":{"line":66,"column":78}},"18":{"start":{"line":69,"column":20},"end":{"line":71,"column":21}},"19":{"start":{"line":70,"column":24},"end":{"line":70,"column":90}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":25}},"21":{"start":{"line":86,"column":8},"end":{"line":89,"column":9}},"22":{"start":{"line":87,"column":12},"end":{"line":87,"column":58}},"23":{"start":{"line":88,"column":12},"end":{"line":88,"column":80}},"24":{"start":{"line":91,"column":8},"end":{"line":91,"column":22}},"25":{"start":{"line":133,"column":8},"end":{"line":133,"column":66}},"26":{"start":{"line":134,"column":8},"end":{"line":134,"column":36}},"27":{"start":{"line":136,"column":8},"end":{"line":136,"column":28}},"28":{"start":{"line":137,"column":8},"end":{"line":137,"column":26}},"29":{"start":{"line":138,"column":8},"end":{"line":185,"column":9}},"30":{"start":{"line":139,"column":12},"end":{"line":139,"column":34}},"31":{"start":{"line":142,"column":12},"end":{"line":146,"column":13}},"32":{"start":{"line":143,"column":16},"end":{"line":143,"column":38}},"33":{"start":{"line":145,"column":16},"end":{"line":145,"column":41}},"34":{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},"35":{"start":{"line":148,"column":16},"end":{"line":148,"column":28}},"36":{"start":{"line":150,"column":12},"end":{"line":169,"column":15}},"37":{"start":{"line":151,"column":16},"end":{"line":151,"column":27}},"38":{"start":{"line":152,"column":16},"end":{"line":168,"column":17}},"39":{"start":{"line":153,"column":20},"end":{"line":153,"column":31}},"40":{"start":{"line":154,"column":23},"end":{"line":168,"column":17}},"41":{"start":{"line":155,"column":20},"end":{"line":159,"column":21}},"42":{"start":{"line":156,"column":24},"end":{"line":156,"column":35}},"43":{"start":{"line":158,"column":24},"end":{"line":158,"column":74}},"44":{"start":{"line":161,"column":20},"end":{"line":167,"column":21}},"45":{"start":{"line":162,"column":24},"end":{"line":162,"column":35}},"46":{"start":{"line":164,"column":24},"end":{"line":166,"column":25}},"47":{"start":{"line":165,"column":28},"end":{"line":165,"column":40}},"48":{"start":{"line":171,"column":12},"end":{"line":175,"column":13}},"49":{"start":{"line":172,"column":16},"end":{"line":174,"column":19}},"50":{"start":{"line":173,"column":20},"end":{"line":173,"column":43}},"51":{"start":{"line":176,"column":12},"end":{"line":184,"column":15}},"52":{"start":{"line":177,"column":16},"end":{"line":183,"column":17}},"53":{"start":{"line":178,"column":20},"end":{"line":178,"column":91}},"54":{"start":{"line":179,"column":23},"end":{"line":183,"column":17}},"55":{"start":{"line":180,"column":20},"end":{"line":180,"column":40}},"56":{"start":{"line":182,"column":20},"end":{"line":182,"column":96}},"57":{"start":{"line":187,"column":8},"end":{"line":187,"column":19}},"58":{"start":{"line":199,"column":8},"end":{"line":209,"column":9}},"59":{"start":{"line":200,"column":12},"end":{"line":208,"column":15}},"60":{"start":{"line":201,"column":16},"end":{"line":201,"column":56}},"61":{"start":{"line":203,"column":16},"end":{"line":207,"column":17}},"62":{"start":{"line":204,"column":20},"end":{"line":204,"column":88}},"63":{"start":{"line":205,"column":23},"end":{"line":207,"column":17}},"64":{"start":{"line":206,"column":20},"end":{"line":206,"column":84}},"65":{"start":{"line":221,"column":8},"end":{"line":231,"column":9}},"66":{"start":{"line":222,"column":12},"end":{"line":230,"column":15}},"67":{"start":{"line":223,"column":16},"end":{"line":223,"column":56}},"68":{"start":{"line":225,"column":16},"end":{"line":229,"column":17}},"69":{"start":{"line":226,"column":20},"end":{"line":226,"column":105}},"70":{"start":{"line":227,"column":23},"end":{"line":229,"column":17}},"71":{"start":{"line":228,"column":20},"end":{"line":228,"column":101}},"72":{"start":{"line":241,"column":8},"end":{"line":241,"column":78}},"73":{"start":{"line":243,"column":8},"end":{"line":245,"column":9}},"74":{"start":{"line":244,"column":12},"end":{"line":244,"column":66}},"75":{"start":{"line":247,"column":8},"end":{"line":247,"column":64}},"76":{"start":{"line":256,"column":8},"end":{"line":256,"column":78}},"77":{"start":{"line":258,"column":8},"end":{"line":260,"column":9}},"78":{"start":{"line":259,"column":12},"end":{"line":259,"column":46}},"79":{"start":{"line":261,"column":8},"end":{"line":261,"column":57}},"80":{"start":{"line":270,"column":8},"end":{"line":270,"column":89}},"81":{"start":{"line":270,"column":51},"end":{"line":270,"column":87}}},"branchMap":{"1":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]},"2":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":63,"column":16}},{"start":{"line":63,"column":16},"end":{"line":63,"column":16}}]},"3":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":20},"end":{"line":65,"column":20}},{"start":{"line":65,"column":20},"end":{"line":65,"column":20}}]},"4":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":20},"end":{"line":69,"column":20}},{"start":{"line":69,"column":20},"end":{"line":69,"column":20}}]},"5":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"6":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":12},"end":{"line":86,"column":22}},{"start":{"line":86,"column":26},"end":{"line":86,"column":56}}]},"7":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":22},"end":{"line":133,"column":40}},{"start":{"line":133,"column":44},"end":{"line":133,"column":65}}]},"8":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":18},"end":{"line":134,"column":23}},{"start":{"line":134,"column":27},"end":{"line":134,"column":29}},{"start":{"line":134,"column":33},"end":{"line":134,"column":35}}]},"9":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":8},"end":{"line":138,"column":8}},{"start":{"line":138,"column":8},"end":{"line":138,"column":8}}]},"10":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":21},"end":{"line":139,"column":27}},{"start":{"line":139,"column":31},"end":{"line":139,"column":33}}]},"11":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":142,"column":12}},{"start":{"line":142,"column":12},"end":{"line":142,"column":12}}]},"12":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":16},"end":{"line":142,"column":22}},{"start":{"line":142,"column":26},"end":{"line":142,"column":44}},{"start":{"line":142,"column":48},"end":{"line":142,"column":62}}]},"13":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":12},"end":{"line":147,"column":12}},{"start":{"line":147,"column":12},"end":{"line":147,"column":12}}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":16},"end":{"line":147,"column":39}},{"start":{"line":147,"column":43},"end":{"line":147,"column":62}}]},"15":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":16},"end":{"line":152,"column":16}},{"start":{"line":152,"column":16},"end":{"line":152,"column":16}}]},"16":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":23},"end":{"line":154,"column":23}},{"start":{"line":154,"column":23},"end":{"line":154,"column":23}}]},"17":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":20},"end":{"line":155,"column":20}},{"start":{"line":155,"column":20},"end":{"line":155,"column":20}}]},"18":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":20},"end":{"line":161,"column":20}},{"start":{"line":161,"column":20},"end":{"line":161,"column":20}}]},"19":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":24},"end":{"line":164,"column":24}},{"start":{"line":164,"column":24},"end":{"line":164,"column":24}}]},"20":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":12},"end":{"line":171,"column":12}},{"start":{"line":171,"column":12},"end":{"line":171,"column":12}}]},"21":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":16},"end":{"line":171,"column":22}},{"start":{"line":171,"column":26},"end":{"line":171,"column":52}}]},"22":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":16},"end":{"line":177,"column":16}},{"start":{"line":177,"column":16},"end":{"line":177,"column":16}}]},"23":{"line":177,"type":"binary-expr","locations":[{"start":{"line":177,"column":20},"end":{"line":177,"column":43}},{"start":{"line":177,"column":47},"end":{"line":177,"column":73}}]},"24":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":23},"end":{"line":179,"column":23}},{"start":{"line":179,"column":23},"end":{"line":179,"column":23}}]},"25":{"line":179,"type":"binary-expr","locations":[{"start":{"line":179,"column":27},"end":{"line":179,"column":55}},{"start":{"line":179,"column":59},"end":{"line":179,"column":68}},{"start":{"line":179,"column":72},"end":{"line":179,"column":90}},{"start":{"line":179,"column":94},"end":{"line":179,"column":114}}]},"26":{"line":182,"type":"binary-expr","locations":[{"start":{"line":182,"column":41},"end":{"line":182,"column":52}},{"start":{"line":182,"column":56},"end":{"line":182,"column":58}}]},"27":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":8},"end":{"line":199,"column":8}},{"start":{"line":199,"column":8},"end":{"line":199,"column":8}}]},"28":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":16},"end":{"line":203,"column":16}},{"start":{"line":203,"column":16},"end":{"line":203,"column":16}}]},"29":{"line":204,"type":"binary-expr","locations":[{"start":{"line":204,"column":43},"end":{"line":204,"column":82}},{"start":{"line":204,"column":86},"end":{"line":204,"column":87}}]},"30":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":23},"end":{"line":205,"column":23}},{"start":{"line":205,"column":23},"end":{"line":205,"column":23}}]},"31":{"line":205,"type":"binary-expr","locations":[{"start":{"line":205,"column":27},"end":{"line":205,"column":52}},{"start":{"line":205,"column":56},"end":{"line":205,"column":89}}]},"32":{"line":206,"type":"binary-expr","locations":[{"start":{"line":206,"column":36},"end":{"line":206,"column":78}},{"start":{"line":206,"column":82},"end":{"line":206,"column":83}}]},"33":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":8},"end":{"line":221,"column":8}},{"start":{"line":221,"column":8},"end":{"line":221,"column":8}}]},"34":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":16},"end":{"line":225,"column":16}},{"start":{"line":225,"column":16},"end":{"line":225,"column":16}}]},"35":{"line":226,"type":"binary-expr","locations":[{"start":{"line":226,"column":43},"end":{"line":226,"column":76}},{"start":{"line":226,"column":80},"end":{"line":226,"column":104}}]},"36":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":23},"end":{"line":227,"column":23}},{"start":{"line":227,"column":23},"end":{"line":227,"column":23}}]},"37":{"line":227,"type":"binary-expr","locations":[{"start":{"line":227,"column":27},"end":{"line":227,"column":52}},{"start":{"line":227,"column":56},"end":{"line":227,"column":89}}]},"38":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":36},"end":{"line":228,"column":72}},{"start":{"line":228,"column":76},"end":{"line":228,"column":100}}]},"39":{"line":241,"type":"cond-expr","locations":[{"start":{"line":241,"column":51},"end":{"line":241,"column":64}},{"start":{"line":241,"column":67},"end":{"line":241,"column":77}}]},"40":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":8},"end":{"line":243,"column":8}},{"start":{"line":243,"column":8},"end":{"line":243,"column":8}}]},"41":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":23},"end":{"line":244,"column":60}},{"start":{"line":244,"column":64},"end":{"line":244,"column":65}}]},"42":{"line":247,"type":"binary-expr","locations":[{"start":{"line":247,"column":16},"end":{"line":247,"column":44}},{"start":{"line":247,"column":48},"end":{"line":247,"column":62}}]},"43":{"line":256,"type":"cond-expr","locations":[{"start":{"line":256,"column":51},"end":{"line":256,"column":64}},{"start":{"line":256,"column":67},"end":{"line":256,"column":77}}]},"44":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8}},{"start":{"line":258,"column":8},"end":{"line":258,"column":8}}]}},"code":["/**"," * @fileoverview Config file operations. This file must be usable in the browser,"," * so no Node-specific code can be here."," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Environments = require(\"./environments\");","","const debug = require(\"debug\")(\"eslint:config-ops\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","const RULE_SEVERITY_STRINGS = [\"off\", \"warn\", \"error\"],","    RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {","        map[value] = index;","        return map;","    }, {}),","    VALID_SEVERITIES = [0, 1, 2, \"off\", \"warn\", \"error\"];","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    /**","     * Creates an empty configuration object suitable for merging as a base.","     * @returns {Object} A configuration object.","     */","    createEmptyConfig() {","        return {","            globals: {},","            env: {},","            rules: {},","            parserOptions: {}","        };","    },","","    /**","     * Creates an environment config based on the specified environments.","     * @param {Object<string,boolean>} env The environment settings.","     * @returns {Object} A configuration object with the appropriate rules and globals","     *      set.","     */","    createEnvironmentConfig(env) {","","        const envConfig = this.createEmptyConfig();","","        if (env) {","","            envConfig.env = env;","","            Object.keys(env).filter(name => env[name]).forEach(name => {","                const environment = Environments.get(name);","","                if (environment) {","                    debug(`Creating config for environment ${name}`);","                    if (environment.globals) {","                        Object.assign(envConfig.globals, environment.globals);","                    }","","                    if (environment.parserOptions) {","                        Object.assign(envConfig.parserOptions, environment.parserOptions);","                    }","                }","            });","        }","","        return envConfig;","    },","","    /**","     * Given a config with environment settings, applies the globals and","     * ecmaFeatures to the configuration and returns the result.","     * @param {Object} config The configuration information.","     * @returns {Object} The updated configuration information.","     */","    applyEnvironments(config) {","        if (config.env && typeof config.env === \"object\") {","            debug(\"Apply environment settings to config\");","            return this.merge(this.createEnvironmentConfig(config.env), config);","        }","","        return config;","    },","","    /**","     * Merges two config objects. This will not only add missing keys, but will also modify values to match.","     * @param {Object} target config object","     * @param {Object} src config object. Overrides in this config object will take priority over base.","     * @param {boolean} [combine] Whether to combine arrays or not","     * @param {boolean} [isRule] Whether its a rule","     * @returns {Object} merged config object.","     */","    merge: function deepmerge(target, src, combine, isRule) {","","        /*","         The MIT License (MIT)","","         Copyright (c) 2012 Nicholas Fisher","","         Permission is hereby granted, free of charge, to any person obtaining a copy","         of this software and associated documentation files (the \"Software\"), to deal","         in the Software without restriction, including without limitation the rights","         to use, copy, modify, merge, publish, distribute, sublicense, and/or sell","         copies of the Software, and to permit persons to whom the Software is","         furnished to do so, subject to the following conditions:","","         The above copyright notice and this permission notice shall be included in","         all copies or substantial portions of the Software.","","         THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR","         IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,","         FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE","         AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER","         LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,","         OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN","         THE SOFTWARE.","         */","","        /*","         * This code is taken from deepmerge repo","         * (https://github.com/KyleAMathews/deepmerge)","         * and modified to meet our needs.","         */","        const array = Array.isArray(src) || Array.isArray(target);","        let dst = array && [] || {};","","        combine = !!combine;","        isRule = !!isRule;","        if (array) {","            target = target || [];","","            // src could be a string, so check for array","            if (isRule && Array.isArray(src) && src.length > 1) {","                dst = dst.concat(src);","            } else {","                dst = dst.concat(target);","            }","            if (typeof src !== \"object\" && !Array.isArray(src)) {","                src = [src];","            }","            Object.keys(src).forEach((e, i) => {","                e = src[i];","                if (typeof dst[i] === \"undefined\") {","                    dst[i] = e;","                } else if (typeof e === \"object\") {","                    if (isRule) {","                        dst[i] = e;","                    } else {","                        dst[i] = deepmerge(target[i], e, combine, isRule);","                    }","                } else {","                    if (!combine) {","                        dst[i] = e;","                    } else {","                        if (dst.indexOf(e) === -1) {","                            dst.push(e);","                        }","                    }","                }","            });","        } else {","            if (target && typeof target === \"object\") {","                Object.keys(target).forEach(key => {","                    dst[key] = target[key];","                });","            }","            Object.keys(src).forEach(key => {","                if (Array.isArray(src[key]) || Array.isArray(target[key])) {","                    dst[key] = deepmerge(target[key], src[key], key === \"plugins\", isRule);","                } else if (typeof src[key] !== \"object\" || !src[key] || key === \"exported\" || key === \"astGlobals\") {","                    dst[key] = src[key];","                } else {","                    dst[key] = deepmerge(target[key] || {}, src[key], combine, key === \"rules\");","                }","            });","        }","","        return dst;","    },","","    /**","     * Converts new-style severity settings (off, warn, error) into old-style","     * severity settings (0, 1, 2) for all rules. Assumption is that severity","     * values have already been validated as correct.","     * @param {Object} config The config object to normalize.","     * @returns {void}","     */","    normalize(config) {","","        if (config.rules) {","            Object.keys(config.rules).forEach(ruleId => {","                const ruleConfig = config.rules[ruleId];","","                if (typeof ruleConfig === \"string\") {","                    config.rules[ruleId] = RULE_SEVERITY[ruleConfig.toLowerCase()] || 0;","                } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"string\") {","                    ruleConfig[0] = RULE_SEVERITY[ruleConfig[0].toLowerCase()] || 0;","                }","            });","        }","    },","","    /**","     * Converts old-style severity settings (0, 1, 2) into new-style","     * severity settings (off, warn, error) for all rules. Assumption is that severity","     * values have already been validated as correct.","     * @param {Object} config The config object to normalize.","     * @returns {void}","     */","    normalizeToStrings(config) {","","        if (config.rules) {","            Object.keys(config.rules).forEach(ruleId => {","                const ruleConfig = config.rules[ruleId];","","                if (typeof ruleConfig === \"number\") {","                    config.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];","                } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"number\") {","                    ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];","                }","            });","        }","    },","","    /**","     * Determines if the severity for the given rule configuration represents an error.","     * @param {int|string|Array} ruleConfig The configuration for an individual rule.","     * @returns {boolean} True if the rule represents an error, false if not.","     */","    isErrorSeverity(ruleConfig) {","","        let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;","","        if (typeof severity === \"string\") {","            severity = RULE_SEVERITY[severity.toLowerCase()] || 0;","        }","","        return (typeof severity === \"number\" && severity === 2);","    },","","    /**","     * Checks whether a given config has valid severity or not.","     * @param {number|string|Array} ruleConfig - The configuration for an individual rule.","     * @returns {boolean} `true` if the configuration has valid severity.","     */","    isValidSeverity(ruleConfig) {","        let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;","","        if (typeof severity === \"string\") {","            severity = severity.toLowerCase();","        }","        return VALID_SEVERITIES.indexOf(severity) !== -1;","    },","","    /**","     * Checks whether every rule of a given config has valid severity or not.","     * @param {Object} config - The configuration for rules.","     * @returns {boolean} `true` if the configuration has valid severity.","     */","    isEverySeverityValid(config) {","        return Object.keys(config).every(ruleId => this.isValidSeverity(config[ruleId]));","    }","};",""],"l":{"12":1,"14":1,"20":1,"22":3,"23":3,"31":1,"38":0,"54":0,"56":0,"58":0,"60":0,"61":0,"63":0,"64":0,"65":0,"66":0,"69":0,"70":0,"76":0,"86":0,"87":0,"88":0,"91":0,"133":0,"134":0,"136":0,"137":0,"138":0,"139":0,"142":0,"143":0,"145":0,"147":0,"148":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"158":0,"161":0,"162":0,"164":0,"165":0,"171":0,"172":0,"173":0,"176":0,"177":0,"178":0,"179":0,"180":0,"182":0,"187":0,"199":0,"200":0,"201":0,"203":0,"204":0,"205":0,"206":0,"221":0,"222":0,"223":0,"225":0,"226":0,"227":0,"228":0,"241":0,"243":0,"244":0,"247":0,"256":0,"258":0,"259":0,"261":0,"270":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/environments.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/environments.js","s":{"1":1,"2":1,"3":1,"4":1,"5":26,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"load","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":16}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":7},"end":{"line":46,"column":14}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":10},"end":{"line":56,"column":22}}},"4":{"name":"(anonymous_4)","line":66,"loc":{"start":{"line":66,"column":16},"end":{"line":66,"column":37}}},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":13},"end":{"line":78,"column":16}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":48}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":29}},"3":{"start":{"line":24,"column":0},"end":{"line":28,"column":1}},"4":{"start":{"line":25,"column":4},"end":{"line":27,"column":7}},"5":{"start":{"line":26,"column":8},"end":{"line":26,"column":49}},"6":{"start":{"line":31,"column":0},"end":{"line":31,"column":7}},"7":{"start":{"line":37,"column":0},"end":{"line":82,"column":2}},"8":{"start":{"line":47,"column":8},"end":{"line":47,"column":46}},"9":{"start":{"line":57,"column":8},"end":{"line":57,"column":36}},"10":{"start":{"line":67,"column":8},"end":{"line":71,"column":9}},"11":{"start":{"line":68,"column":12},"end":{"line":70,"column":15}},"12":{"start":{"line":69,"column":16},"end":{"line":69,"column":86}},"13":{"start":{"line":79,"column":8},"end":{"line":79,"column":33}},"14":{"start":{"line":80,"column":8},"end":{"line":80,"column":15}}},"branchMap":{"1":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":15},"end":{"line":47,"column":37}},{"start":{"line":47,"column":41},"end":{"line":47,"column":45}}]},"2":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]}},"code":["/**"," * @fileoverview Environments manager"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const envs = require(\"../../conf/environments\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","let environments = new Map();","","/**"," * Loads the default environments."," * @returns {void}"," * @private"," */","function load() {","    Object.keys(envs).forEach(envName => {","        environments.set(envName, envs[envName]);","    });","}","","// always load default environments upfront","load();","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    load,","","    /**","     * Gets the environment with the given name.","     * @param {string} name The name of the environment to retrieve.","     * @returns {Object?} The environment object or null if not found.","     */","    get(name) {","        return environments.get(name) || null;","    },","","    /**","     * Defines an environment.","     * @param {string} name The name of the environment.","     * @param {Object} env The environment settings.","     * @returns {void}","     */","    define(name, env) {","        environments.set(name, env);","    },","","    /**","     * Imports all environments from a plugin.","     * @param {Object} plugin The plugin object.","     * @param {string} pluginName The name of the plugin.","     * @returns {void}","     */","    importPlugin(plugin, pluginName) {","        if (plugin.environments) {","            Object.keys(plugin.environments).forEach(envName => {","                this.define(`${pluginName}/${envName}`, plugin.environments[envName]);","            });","        }","    },","","    /**","     * Resets all environments. Only use for tests!","     * @returns {void}","     */","    testReset() {","        environments = new Map();","        load();","    }","};",""],"l":{"11":1,"17":1,"24":1,"25":1,"26":26,"31":1,"37":1,"47":0,"57":0,"67":0,"68":0,"69":0,"79":0,"80":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/conf/environments.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/conf/environments.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":17,"column":0},"end":{"line":107,"column":2}}},"branchMap":{},"code":["/**"," * @fileoverview Defines environment settings and globals."," * @author Elan Shanker"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const globals = require(\"globals\");","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    builtin: globals.es5,","    browser: {","        globals: globals.browser","    },","    node: {","        globals: globals.node,","        parserOptions: {","            ecmaFeatures: {","                globalReturn: true","            }","        }","    },","    commonjs: {","        globals: globals.commonjs,","        parserOptions: {","            ecmaFeatures: {","                globalReturn: true","            }","        }","    },","    \"shared-node-browser\": {","        globals: globals[\"shared-node-browser\"]","    },","    worker: {","        globals: globals.worker","    },","    amd: {","        globals: globals.amd","    },","    mocha: {","        globals: globals.mocha","    },","    jasmine: {","        globals: globals.jasmine","    },","    jest: {","        globals: globals.jest","    },","    phantomjs: {","        globals: globals.phantomjs","    },","    jquery: {","        globals: globals.jquery","    },","    qunit: {","        globals: globals.qunit","    },","    prototypejs: {","        globals: globals.prototypejs","    },","    shelljs: {","        globals: globals.shelljs","    },","    meteor: {","        globals: globals.meteor","    },","    mongo: {","        globals: globals.mongo","    },","    protractor: {","        globals: globals.protractor","    },","    applescript: {","        globals: globals.applescript","    },","    nashorn: {","        globals: globals.nashorn","    },","    serviceworker: {","        globals: globals.serviceworker","    },","    atomtest: {","        globals: globals.atomtest","    },","    embertest: {","        globals: globals.embertest","    },","    webextensions: {","        globals: globals.webextensions","    },","    es6: {","        globals: globals.es6,","        parserOptions: {","            ecmaVersion: 6","        }","    },","    greasemonkey: {","        globals: globals.greasemonkey","    }","};",""],"l":{"11":1,"17":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/config-validator.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/config-validator.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":1},"b":{"1":[0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"getRuleOptionsSchema","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":34}}},"2":{"name":"validateRuleSeverity","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":39}}},"3":{"name":"validateRuleSchema","line":77,"loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":46}}},"4":{"name":"validateRuleOptions","line":101,"loc":{"start":{"line":101,"column":0},"end":{"line":101,"column":50}}},"5":{"name":"validateEnvironment","line":119,"loc":{"start":{"line":119,"column":0},"end":{"line":119,"column":50}}},"6":{"name":"validate","line":152,"loc":{"start":{"line":152,"column":0},"end":{"line":152,"column":34}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":15,"column":27}},"2":{"start":{"line":17,"column":0},"end":{"line":19,"column":2}},"3":{"start":{"line":30,"column":0},"end":{"line":54,"column":1}},"4":{"start":{"line":31,"column":4},"end":{"line":32,"column":78}},"5":{"start":{"line":35,"column":4},"end":{"line":50,"column":5}},"6":{"start":{"line":36,"column":8},"end":{"line":43,"column":9}},"7":{"start":{"line":37,"column":12},"end":{"line":42,"column":14}},"8":{"start":{"line":44,"column":8},"end":{"line":48,"column":10}},"9":{"start":{"line":53,"column":4},"end":{"line":53,"column":26}},"10":{"start":{"line":61,"column":0},"end":{"line":69,"column":1}},"11":{"start":{"line":62,"column":4},"end":{"line":62,"column":67}},"12":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"13":{"start":{"line":65,"column":8},"end":{"line":65,"column":182}},"14":{"start":{"line":68,"column":4},"end":{"line":68,"column":20}},"15":{"start":{"line":77,"column":0},"end":{"line":92,"column":1}},"16":{"start":{"line":78,"column":4},"end":{"line":78,"column":44}},"17":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"18":{"start":{"line":81,"column":8},"end":{"line":81,"column":74}},"19":{"start":{"line":84,"column":4},"end":{"line":84,"column":46}},"20":{"start":{"line":86,"column":4},"end":{"line":91,"column":5}},"21":{"start":{"line":87,"column":8},"end":{"line":87,"column":35}},"22":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"23":{"start":{"line":89,"column":12},"end":{"line":89,"column":119}},"24":{"start":{"line":89,"column":61},"end":{"line":89,"column":107}},"25":{"start":{"line":101,"column":0},"end":{"line":111,"column":1}},"26":{"start":{"line":102,"column":4},"end":{"line":110,"column":5}},"27":{"start":{"line":103,"column":8},"end":{"line":103,"column":55}},"28":{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},"29":{"start":{"line":106,"column":12},"end":{"line":106,"column":83}},"30":{"start":{"line":109,"column":8},"end":{"line":109,"column":100}},"31":{"start":{"line":119,"column":0},"end":{"line":144,"column":1}},"32":{"start":{"line":122,"column":4},"end":{"line":124,"column":5}},"33":{"start":{"line":123,"column":8},"end":{"line":123,"column":15}},"34":{"start":{"line":126,"column":4},"end":{"line":128,"column":5}},"35":{"start":{"line":127,"column":8},"end":{"line":127,"column":60}},"36":{"start":{"line":130,"column":4},"end":{"line":143,"column":5}},"37":{"start":{"line":131,"column":8},"end":{"line":140,"column":11}},"38":{"start":{"line":132,"column":12},"end":{"line":139,"column":13}},"39":{"start":{"line":133,"column":16},"end":{"line":136,"column":18}},"40":{"start":{"line":138,"column":16},"end":{"line":138,"column":50}},"41":{"start":{"line":142,"column":8},"end":{"line":142,"column":57}},"42":{"start":{"line":152,"column":0},"end":{"line":161,"column":1}},"43":{"start":{"line":154,"column":4},"end":{"line":158,"column":5}},"44":{"start":{"line":155,"column":8},"end":{"line":157,"column":11}},"45":{"start":{"line":156,"column":12},"end":{"line":156,"column":62}},"46":{"start":{"line":160,"column":4},"end":{"line":160,"column":44}},"47":{"start":{"line":167,"column":0},"end":{"line":171,"column":2}}},"branchMap":{"1":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":17},"end":{"line":32,"column":21}},{"start":{"line":32,"column":25},"end":{"line":32,"column":36}},{"start":{"line":32,"column":40},"end":{"line":32,"column":44}},{"start":{"line":32,"column":48},"end":{"line":32,"column":57}},{"start":{"line":32,"column":61},"end":{"line":32,"column":77}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":8}},{"start":{"line":36,"column":8},"end":{"line":36,"column":8}}]},"4":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":11},"end":{"line":53,"column":17}},{"start":{"line":53,"column":21},"end":{"line":53,"column":25}}]},"5":{"line":62,"type":"cond-expr","locations":[{"start":{"line":62,"column":46},"end":{"line":62,"column":56}},{"start":{"line":62,"column":59},"end":{"line":62,"column":66}}]},"6":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"7":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":22}},{"start":{"line":64,"column":26},"end":{"line":64,"column":40}},{"start":{"line":64,"column":44},"end":{"line":64,"column":58}},{"start":{"line":64,"column":62},"end":{"line":64,"column":135}}]},"8":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":64},"end":{"line":64,"column":92}},{"start":{"line":64,"column":96},"end":{"line":64,"column":134}}]},"9":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"10":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":29}},{"start":{"line":80,"column":33},"end":{"line":80,"column":39}}]},"11":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]},"12":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":8}},{"start":{"line":88,"column":8},"end":{"line":88,"column":8}}]},"13":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":8}},{"start":{"line":105,"column":8},"end":{"line":105,"column":8}}]},"14":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":12},"end":{"line":105,"column":26}},{"start":{"line":105,"column":30},"end":{"line":105,"column":97}}]},"15":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":32},"end":{"line":105,"column":60}},{"start":{"line":105,"column":64},"end":{"line":105,"column":96}}]},"16":{"line":106,"type":"cond-expr","locations":[{"start":{"line":106,"column":60},"end":{"line":106,"column":76}},{"start":{"line":106,"column":79},"end":{"line":106,"column":81}}]},"17":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":4},"end":{"line":122,"column":4}},{"start":{"line":122,"column":4},"end":{"line":122,"column":4}}]},"18":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"19":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":4},"end":{"line":130,"column":4}},{"start":{"line":130,"column":4},"end":{"line":130,"column":4}}]},"20":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":132,"column":12}},{"start":{"line":132,"column":12},"end":{"line":132,"column":12}}]},"21":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]}},"code":["/**"," * @fileoverview Validates configs."," * @author Brandon Mills"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const rules = require(\"../rules\"),","    Environments = require(\"./environments\"),","    schemaValidator = require(\"is-my-json-valid\"),","    util = require(\"util\");","","const validators = {","    rules: Object.create(null)","};","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * Gets a complete options schema for a rule."," * @param {string} id The rule's unique name."," * @returns {Object} JSON Schema for the rule's options."," */","function getRuleOptionsSchema(id) {","    const rule = rules.get(id),","        schema = rule && rule.schema || rule && rule.meta && rule.meta.schema;","","    // Given a tuple of schemas, insert warning level at the beginning","    if (Array.isArray(schema)) {","        if (schema.length) {","            return {","                type: \"array\",","                items: schema,","                minItems: 0,","                maxItems: schema.length","            };","        }","        return {","            type: \"array\",","            minItems: 0,","            maxItems: 0","        };","","    }","","    // Given a full schema, leave it alone","    return schema || null;","}","","/**","* Validates a rule's severity and returns the severity value. Throws an error if the severity is invalid.","* @param {options} options The given options for the rule.","* @returns {number|string} The rule's severity value","*/","function validateRuleSeverity(options) {","    const severity = Array.isArray(options) ? options[0] : options;","","    if (severity !== 0 && severity !== 1 && severity !== 2 && !(typeof severity === \"string\" && /^(?:off|warn|error)$/i.test(severity))) {","        throw new Error(`\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '${util.inspect(severity).replace(/'/g, \"\\\"\").replace(/\\n/g, \"\")}').\\n`);","    }","","    return severity;","}","","/**","* Validates the non-severity options passed to a rule, based on its schema.","* @param {string} id The rule's unique name","* @param {array} localOptions The options for the rule, excluding severity","* @returns {void}","*/","function validateRuleSchema(id, localOptions) {","    const schema = getRuleOptionsSchema(id);","","    if (!validators.rules[id] && schema) {","        validators.rules[id] = schemaValidator(schema, { verbose: true });","    }","","    const validateRule = validators.rules[id];","","    if (validateRule) {","        validateRule(localOptions);","        if (validateRule.errors) {","            throw new Error(validateRule.errors.map(error => `\\tValue \"${error.value}\" ${error.message}.\\n`).join(\"\"));","        }","    }","}","","/**"," * Validates a rule's options against its schema."," * @param {string} id The rule's unique name."," * @param {array|number} options The given options for the rule."," * @param {string} source The name of the configuration source."," * @returns {void}"," */","function validateRuleOptions(id, options, source) {","    try {","        const severity = validateRuleSeverity(options);","","        if (severity !== 0 && !(typeof severity === \"string\" && severity.toLowerCase() === \"off\")) {","            validateRuleSchema(id, Array.isArray(options) ? options.slice(1) : []);","        }","    } catch (err) {","        throw new Error(`${source}:\\n\\tConfiguration for rule \"${id}\" is invalid:\\n${err.message}`);","    }","}","","/**"," * Validates an environment object"," * @param {Object} environment The environment config object to validate."," * @param {string} source The location to report with any errors."," * @returns {void}"," */","function validateEnvironment(environment, source) {","","    // not having an environment is ok","    if (!environment) {","        return;","    }","","    if (Array.isArray(environment)) {","        throw new Error(\"Environment must not be an array\");","    }","","    if (typeof environment === \"object\") {","        Object.keys(environment).forEach(env => {","            if (!Environments.get(env)) {","                const message = [","                    source, \":\\n\",","                    \"\\tEnvironment key \\\"\", env, \"\\\" is unknown\\n\"","                ];","","                throw new Error(message.join(\"\"));","            }","        });","    } else {","        throw new Error(\"Environment must be an object\");","    }","}","","/**"," * Validates an entire config object."," * @param {Object} config The config object to validate."," * @param {string} source The location to report with any errors."," * @returns {void}"," */","function validate(config, source) {","","    if (typeof config.rules === \"object\") {","        Object.keys(config.rules).forEach(id => {","            validateRuleOptions(id, config.rules[id], source);","        });","    }","","    validateEnvironment(config.env, source);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    getRuleOptionsSchema,","    validate,","    validateRuleOptions","};",""],"l":{"12":1,"17":1,"30":1,"31":0,"35":0,"36":0,"37":0,"44":0,"53":0,"61":1,"62":0,"64":0,"65":0,"68":0,"77":1,"78":0,"80":0,"81":0,"84":0,"86":0,"87":0,"88":0,"89":0,"101":1,"102":0,"103":0,"105":0,"106":0,"109":0,"119":1,"122":0,"123":0,"126":0,"127":0,"130":0,"131":0,"132":0,"133":0,"138":0,"142":0,"152":1,"154":0,"155":0,"156":0,"160":0,"167":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/rules.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/rules.js","s":{"1":1,"2":1,"3":1,"4":244,"5":1,"6":1,"7":1,"8":244,"9":1,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":1,"27":0,"28":0,"29":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":244,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"define","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":36}}},"2":{"name":"load","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":29}}},"3":{"name":"importPlugin","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":42}}},"4":{"name":"getHandler","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":28}}},"5":{"name":"getAllLoadedRules","line":82,"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":29}}},"6":{"name":"testClear","line":98,"loc":{"start":{"line":98,"column":0},"end":{"line":98,"column":21}}},"7":{"name":"(anonymous_7)","line":114,"loc":{"start":{"line":114,"column":13},"end":{"line":114,"column":16}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}},"3":{"start":{"line":30,"column":0},"end":{"line":32,"column":1}},"4":{"start":{"line":31,"column":4},"end":{"line":31,"column":31}},"5":{"start":{"line":40,"column":0},"end":{"line":46,"column":1}},"6":{"start":{"line":41,"column":4},"end":{"line":41,"column":46}},"7":{"start":{"line":43,"column":4},"end":{"line":45,"column":7}},"8":{"start":{"line":44,"column":8},"end":{"line":44,"column":41}},"9":{"start":{"line":54,"column":0},"end":{"line":63,"column":1}},"10":{"start":{"line":55,"column":4},"end":{"line":62,"column":5}},"11":{"start":{"line":56,"column":8},"end":{"line":61,"column":11}},"12":{"start":{"line":57,"column":12},"end":{"line":58,"column":44}},"13":{"start":{"line":60,"column":12},"end":{"line":60,"column":42}},"14":{"start":{"line":70,"column":0},"end":{"line":76,"column":1}},"15":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"16":{"start":{"line":72,"column":8},"end":{"line":72,"column":38}},"17":{"start":{"line":74,"column":4},"end":{"line":74,"column":25}},"18":{"start":{"line":82,"column":0},"end":{"line":91,"column":1}},"19":{"start":{"line":83,"column":4},"end":{"line":83,"column":31}},"20":{"start":{"line":85,"column":4},"end":{"line":89,"column":7}},"21":{"start":{"line":86,"column":8},"end":{"line":86,"column":38}},"22":{"start":{"line":88,"column":8},"end":{"line":88,"column":33}},"23":{"start":{"line":90,"column":4},"end":{"line":90,"column":20}},"24":{"start":{"line":98,"column":0},"end":{"line":100,"column":1}},"25":{"start":{"line":99,"column":4},"end":{"line":99,"column":32}},"26":{"start":{"line":102,"column":0},"end":{"line":118,"column":2}},"27":{"start":{"line":115,"column":8},"end":{"line":115,"column":20}},"28":{"start":{"line":116,"column":8},"end":{"line":116,"column":15}},"29":{"start":{"line":125,"column":0},"end":{"line":125,"column":7}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"2":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]}},"code":["/**"," * @fileoverview Defines a storage for rules."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const loadRules = require(\"./load-rules\");","","//------------------------------------------------------------------------------","// Privates","//------------------------------------------------------------------------------","","let rules = Object.create(null);","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Registers a rule module for rule id in storage."," * @param {string} ruleId Rule id (file name)."," * @param {Function} ruleModule Rule handler."," * @returns {void}"," */","function define(ruleId, ruleModule) {","    rules[ruleId] = ruleModule;","}","","/**"," * Loads and registers all rules from passed rules directory."," * @param {string} [rulesDir] Path to rules directory, may be relative. Defaults to `lib/rules`."," * @param {string} cwd Current working directory"," * @returns {void}"," */","function load(rulesDir, cwd) {","    const newRules = loadRules(rulesDir, cwd);","","    Object.keys(newRules).forEach(ruleId => {","        define(ruleId, newRules[ruleId]);","    });","}","","/**"," * Registers all given rules of a plugin."," * @param {Object} plugin The plugin object to import."," * @param {string} pluginName The name of the plugin without prefix (`eslint-plugin-`)."," * @returns {void}"," */","function importPlugin(plugin, pluginName) {","    if (plugin.rules) {","        Object.keys(plugin.rules).forEach(ruleId => {","            const qualifiedRuleId = `${pluginName}/${ruleId}`,","                rule = plugin.rules[ruleId];","","            define(qualifiedRuleId, rule);","        });","    }","}","","/**"," * Access rule handler by id (file name)."," * @param {string} ruleId Rule id (file name)."," * @returns {Function} Rule handler."," */","function getHandler(ruleId) {","    if (typeof rules[ruleId] === \"string\") {","        return require(rules[ruleId]);","    }","    return rules[ruleId];","","}","","/**"," * Get an object with all currently loaded rules"," * @returns {Map} All loaded rules"," */","function getAllLoadedRules() {","    const allRules = new Map();","","    Object.keys(rules).forEach(name => {","        const rule = getHandler(name);","","        allRules.set(name, rule);","    });","    return allRules;","}","","/**"," * Reset rules storage."," * Should be used only in tests."," * @returns {void}"," */","function testClear() {","    rules = Object.create(null);","}","","module.exports = {","    define,","    load,","    importPlugin,","    get: getHandler,","    getAllLoadedRules,","    testClear,","","    /**","     * Resets rules to its starting state. Use for tests only.","     * @returns {void}","     */","    testReset() {","        testClear();","        load();","    }","};","","//------------------------------------------------------------------------------","// Initialization","//------------------------------------------------------------------------------","","// loads built-in rules","load();",""],"l":{"12":1,"18":1,"30":1,"31":244,"40":1,"41":1,"43":1,"44":244,"54":1,"55":0,"56":0,"57":0,"60":0,"70":1,"71":0,"72":0,"74":0,"82":1,"83":0,"85":0,"86":0,"88":0,"90":0,"98":1,"99":0,"102":1,"115":0,"116":0,"125":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/load-rules.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/load-rules.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":1,"8":245,"9":1,"10":244,"11":1},"b":{"1":[1,0],"2":[1,244]},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":17},"end":{"line":25,"column":41}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":27}},"2":{"start":{"line":25,"column":0},"end":{"line":41,"column":2}},"3":{"start":{"line":26,"column":4},"end":{"line":30,"column":5}},"4":{"start":{"line":27,"column":8},"end":{"line":27,"column":49}},"5":{"start":{"line":29,"column":8},"end":{"line":29,"column":47}},"6":{"start":{"line":32,"column":4},"end":{"line":32,"column":38}},"7":{"start":{"line":34,"column":4},"end":{"line":39,"column":7}},"8":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"9":{"start":{"line":36,"column":12},"end":{"line":36,"column":19}},"10":{"start":{"line":38,"column":8},"end":{"line":38,"column":61}},"11":{"start":{"line":40,"column":4},"end":{"line":40,"column":17}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]}},"code":["/**"," * @fileoverview Module for loading rules from files and directories."," * @author Michael Ficarra"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\");","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Load all rule modules from specified directory."," * @param {string} [rulesDir] Path to rules directory, may be relative. Defaults to `lib/rules`."," * @param {string} cwd Current working directory"," * @returns {Object} Loaded rule modules by rule ids (file names)."," */","module.exports = function(rulesDir, cwd) {","    if (!rulesDir) {","        rulesDir = path.join(__dirname, \"rules\");","    } else {","        rulesDir = path.resolve(cwd, rulesDir);","    }","","    const rules = Object.create(null);","","    fs.readdirSync(rulesDir).forEach(file => {","        if (path.extname(file) !== \".js\") {","            return;","        }","        rules[file.slice(0, -3)] = path.join(rulesDir, file);","    });","    return rules;","};",""],"l":{"12":1,"25":1,"26":1,"27":1,"29":0,"32":1,"34":1,"35":245,"36":1,"38":244,"40":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/comment-event-generator.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/comment-event-generator.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"emitComments","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":58}}},"2":{"name":"emitCommentsEnter","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":48}}},"3":{"name":"emitCommentsExit","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":47}}},"4":{"name":"(anonymous_4)","line":81,"loc":{"start":{"line":81,"column":15},"end":{"line":81,"column":52}}},"5":{"name":"(anonymous_5)","line":94,"loc":{"start":{"line":94,"column":13},"end":{"line":94,"column":20}}},"6":{"name":"(anonymous_6)","line":107,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":20}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":34,"column":1}},"2":{"start":{"line":22,"column":4},"end":{"line":33,"column":5}},"3":{"start":{"line":23,"column":8},"end":{"line":32,"column":11}},"4":{"start":{"line":24,"column":12},"end":{"line":24,"column":49}},"5":{"start":{"line":26,"column":12},"end":{"line":31,"column":13}},"6":{"start":{"line":27,"column":16},"end":{"line":27,"column":38}},"7":{"start":{"line":29,"column":16},"end":{"line":29,"column":36}},"8":{"start":{"line":30,"column":16},"end":{"line":30,"column":58}},"9":{"start":{"line":42,"column":0},"end":{"line":48,"column":1}},"10":{"start":{"line":43,"column":4},"end":{"line":47,"column":19}},"11":{"start":{"line":56,"column":0},"end":{"line":62,"column":1}},"12":{"start":{"line":57,"column":4},"end":{"line":61,"column":24}},"13":{"start":{"line":82,"column":8},"end":{"line":82,"column":47}},"14":{"start":{"line":83,"column":8},"end":{"line":83,"column":54}},"15":{"start":{"line":84,"column":8},"end":{"line":84,"column":37}},"16":{"start":{"line":85,"column":8},"end":{"line":85,"column":35}},"17":{"start":{"line":86,"column":8},"end":{"line":86,"column":34}},"18":{"start":{"line":95,"column":8},"end":{"line":95,"column":59}},"19":{"start":{"line":97,"column":8},"end":{"line":97,"column":50}},"20":{"start":{"line":98,"column":8},"end":{"line":98,"column":38}},"21":{"start":{"line":99,"column":8},"end":{"line":99,"column":51}},"22":{"start":{"line":108,"column":8},"end":{"line":108,"column":59}},"23":{"start":{"line":110,"column":8},"end":{"line":110,"column":50}},"24":{"start":{"line":111,"column":8},"end":{"line":111,"column":38}},"25":{"start":{"line":112,"column":8},"end":{"line":112,"column":49}},"26":{"start":{"line":116,"column":0},"end":{"line":116,"column":39}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":12}},{"start":{"line":26,"column":12},"end":{"line":26,"column":12}}]}},"code":["/**"," * @fileoverview The event generator for comments."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Check collection of comments to prevent double event for comment as"," * leading and trailing, then emit event if passing"," * @param {ASTNode[]} comments - Collection of comment nodes"," * @param {EventEmitter} emitter - The event emitter which is the destination of events."," * @param {Object[]} locs - List of locations of previous comment nodes"," * @param {string} eventName - Event name postfix"," * @returns {void}"," */","function emitComments(comments, emitter, locs, eventName) {","    if (comments.length > 0) {","        comments.forEach(node => {","            const index = locs.indexOf(node.loc);","","            if (index >= 0) {","                locs.splice(index, 1);","            } else {","                locs.push(node.loc);","                emitter.emit(node.type + eventName, node);","            }","        });","    }","}","","/**"," * Shortcut to check and emit enter of comment nodes"," * @param {CommentEventGenerator} generator - A generator to emit."," * @param {ASTNode[]} comments - Collection of comment nodes"," * @returns {void}"," */","function emitCommentsEnter(generator, comments) {","    emitComments(","        comments,","        generator.emitter,","        generator.commentLocsEnter,","        \"Comment\");","}","","/**"," * Shortcut to check and emit exit of comment nodes"," * @param {CommentEventGenerator} generator - A generator to emit."," * @param {ASTNode[]} comments Collection of comment nodes"," * @returns {void}"," */","function emitCommentsExit(generator, comments) {","    emitComments(","        comments,","        generator.emitter,","        generator.commentLocsExit,","        \"Comment:exit\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * The event generator for comments."," * This is the decorator pattern."," * This generates events of comments before/after events which are generated the original generator."," *"," * Comment event generator class"," */","class CommentEventGenerator {","","    /**","     * @param {EventGenerator} originalEventGenerator - An event generator which is the decoration target.","     * @param {SourceCode} sourceCode - A source code which has comments.","     */","    constructor(originalEventGenerator, sourceCode) {","        this.original = originalEventGenerator;","        this.emitter = originalEventGenerator.emitter;","        this.sourceCode = sourceCode;","        this.commentLocsEnter = [];","        this.commentLocsExit = [];","    }","","    /**","     * Emits an event of entering comments.","     * @param {ASTNode} node - A node which was entered.","     * @returns {void}","     */","    enterNode(node) {","        const comments = this.sourceCode.getComments(node);","","        emitCommentsEnter(this, comments.leading);","        this.original.enterNode(node);","        emitCommentsEnter(this, comments.trailing);","    }","","    /**","     * Emits an event of leaving comments.","     * @param {ASTNode} node - A node which was left.","     * @returns {void}","     */","    leaveNode(node) {","        const comments = this.sourceCode.getComments(node);","","        emitCommentsExit(this, comments.trailing);","        this.original.leaveNode(node);","        emitCommentsExit(this, comments.leading);","    }","}","","module.exports = CommentEventGenerator;",""],"l":{"21":1,"22":0,"23":0,"24":0,"26":0,"27":0,"29":0,"30":0,"42":1,"43":0,"56":1,"57":0,"82":0,"83":0,"84":0,"85":0,"86":0,"95":0,"97":0,"98":0,"99":0,"108":0,"110":0,"111":0,"112":0,"116":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/node-event-generator.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/node-event-generator.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1},"b":{"1":[0,0,0,0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0,0,0,0,0,0,0,0,0],"5":[0,0,0,0,0,0,0,0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"getPossibleTypes","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":42}}},"2":{"name":"countClassAttributes","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":46}}},"3":{"name":"countIdentifiers","line":115,"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":42}}},"4":{"name":"compareSpecificity","line":146,"loc":{"start":{"line":146,"column":0},"end":{"line":146,"column":50}}},"5":{"name":"tryParseSelector","line":158,"loc":{"start":{"line":158,"column":0},"end":{"line":158,"column":39}}},"6":{"name":"(anonymous_6)","line":210,"loc":{"start":{"line":210,"column":15},"end":{"line":210,"column":25}}},"7":{"name":"(anonymous_7)","line":263,"loc":{"start":{"line":263,"column":17},"end":{"line":263,"column":34}}},"8":{"name":"(anonymous_8)","line":275,"loc":{"start":{"line":275,"column":18},"end":{"line":275,"column":33}}},"9":{"name":"(anonymous_9)","line":304,"loc":{"start":{"line":304,"column":13},"end":{"line":304,"column":20}}},"10":{"name":"(anonymous_10)","line":316,"loc":{"start":{"line":316,"column":13},"end":{"line":316,"column":20}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":33}},"3":{"start":{"line":40,"column":0},"end":{"line":79,"column":1}},"4":{"start":{"line":41,"column":4},"end":{"line":78,"column":5}},"5":{"start":{"line":43,"column":12},"end":{"line":43,"column":42}},"6":{"start":{"line":46,"column":12},"end":{"line":46,"column":86}},"7":{"start":{"line":48,"column":12},"end":{"line":50,"column":13}},"8":{"start":{"line":48,"column":62},"end":{"line":48,"column":79}},"9":{"start":{"line":49,"column":16},"end":{"line":49,"column":68}},"10":{"start":{"line":51,"column":12},"end":{"line":51,"column":24}},"11":{"start":{"line":55,"column":12},"end":{"line":55,"column":133}},"12":{"start":{"line":55,"column":114},"end":{"line":55,"column":131}},"13":{"start":{"line":58,"column":12},"end":{"line":60,"column":13}},"14":{"start":{"line":59,"column":16},"end":{"line":59,"column":28}},"15":{"start":{"line":66,"column":12},"end":{"line":66,"column":71}},"16":{"start":{"line":73,"column":12},"end":{"line":73,"column":58}},"17":{"start":{"line":76,"column":12},"end":{"line":76,"column":24}},"18":{"start":{"line":86,"column":0},"end":{"line":108,"column":1}},"19":{"start":{"line":87,"column":4},"end":{"line":107,"column":5}},"20":{"start":{"line":92,"column":12},"end":{"line":92,"column":106}},"21":{"start":{"line":97,"column":12},"end":{"line":97,"column":121}},"22":{"start":{"line":97,"column":75},"end":{"line":97,"column":116}},"23":{"start":{"line":103,"column":12},"end":{"line":103,"column":21}},"24":{"start":{"line":106,"column":12},"end":{"line":106,"column":21}},"25":{"start":{"line":115,"column":0},"end":{"line":134,"column":1}},"26":{"start":{"line":116,"column":4},"end":{"line":133,"column":5}},"27":{"start":{"line":121,"column":12},"end":{"line":121,"column":98}},"28":{"start":{"line":126,"column":12},"end":{"line":126,"column":117}},"29":{"start":{"line":126,"column":75},"end":{"line":126,"column":112}},"30":{"start":{"line":129,"column":12},"end":{"line":129,"column":21}},"31":{"start":{"line":132,"column":12},"end":{"line":132,"column":21}},"32":{"start":{"line":146,"column":0},"end":{"line":150,"column":1}},"33":{"start":{"line":147,"column":4},"end":{"line":149,"column":66}},"34":{"start":{"line":158,"column":0},"end":{"line":167,"column":1}},"35":{"start":{"line":159,"column":4},"end":{"line":166,"column":5}},"36":{"start":{"line":160,"column":8},"end":{"line":160,"column":64}},"37":{"start":{"line":162,"column":8},"end":{"line":164,"column":9}},"38":{"start":{"line":163,"column":12},"end":{"line":163,"column":115}},"39":{"start":{"line":165,"column":8},"end":{"line":165,"column":18}},"40":{"start":{"line":174,"column":0},"end":{"line":185,"column":3}},"41":{"start":{"line":175,"column":4},"end":{"line":175,"column":57}},"42":{"start":{"line":177,"column":4},"end":{"line":184,"column":6}},"43":{"start":{"line":211,"column":8},"end":{"line":211,"column":31}},"44":{"start":{"line":212,"column":8},"end":{"line":212,"column":34}},"45":{"start":{"line":213,"column":8},"end":{"line":213,"column":50}},"46":{"start":{"line":214,"column":8},"end":{"line":214,"column":49}},"47":{"start":{"line":215,"column":8},"end":{"line":215,"column":40}},"48":{"start":{"line":216,"column":8},"end":{"line":216,"column":39}},"49":{"start":{"line":218,"column":8},"end":{"line":232,"column":43}},"50":{"start":{"line":234,"column":8},"end":{"line":249,"column":11}},"51":{"start":{"line":235,"column":12},"end":{"line":235,"column":56}},"52":{"start":{"line":237,"column":12},"end":{"line":248,"column":13}},"53":{"start":{"line":238,"column":16},"end":{"line":245,"column":19}},"54":{"start":{"line":239,"column":20},"end":{"line":239,"column":115}},"55":{"start":{"line":241,"column":20},"end":{"line":243,"column":21}},"56":{"start":{"line":242,"column":24},"end":{"line":242,"column":50}},"57":{"start":{"line":244,"column":20},"end":{"line":244,"column":57}},"58":{"start":{"line":247,"column":16},"end":{"line":247,"column":106}},"59":{"start":{"line":251,"column":8},"end":{"line":251,"column":60}},"60":{"start":{"line":252,"column":8},"end":{"line":252,"column":59}},"61":{"start":{"line":253,"column":8},"end":{"line":253,"column":101}},"62":{"start":{"line":253,"column":62},"end":{"line":253,"column":99}},"63":{"start":{"line":254,"column":8},"end":{"line":254,"column":100}},"64":{"start":{"line":254,"column":61},"end":{"line":254,"column":98}},"65":{"start":{"line":264,"column":8},"end":{"line":266,"column":9}},"66":{"start":{"line":265,"column":12},"end":{"line":265,"column":58}},"67":{"start":{"line":276,"column":8},"end":{"line":276,"column":129}},"68":{"start":{"line":277,"column":8},"end":{"line":277,"column":97}},"69":{"start":{"line":283,"column":8},"end":{"line":283,"column":37}},"70":{"start":{"line":284,"column":8},"end":{"line":284,"column":38}},"71":{"start":{"line":286,"column":8},"end":{"line":296,"column":9}},"72":{"start":{"line":287,"column":12},"end":{"line":295,"column":13}},"73":{"start":{"line":292,"column":16},"end":{"line":292,"column":84}},"74":{"start":{"line":294,"column":16},"end":{"line":294,"column":86}},"75":{"start":{"line":305,"column":8},"end":{"line":307,"column":9}},"76":{"start":{"line":306,"column":12},"end":{"line":306,"column":54}},"77":{"start":{"line":308,"column":8},"end":{"line":308,"column":41}},"78":{"start":{"line":317,"column":8},"end":{"line":317,"column":40}},"79":{"start":{"line":318,"column":8},"end":{"line":318,"column":37}},"80":{"start":{"line":322,"column":0},"end":{"line":322,"column":36}}},"branchMap":{"1":{"line":41,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":43,"column":42}},{"start":{"line":45,"column":8},"end":{"line":52,"column":9}},{"start":{"line":54,"column":8},"end":{"line":67,"column":9}},{"start":{"line":69,"column":8},"end":{"line":69,"column":21}},{"start":{"line":70,"column":8},"end":{"line":70,"column":26}},{"start":{"line":71,"column":8},"end":{"line":71,"column":23}},{"start":{"line":72,"column":8},"end":{"line":73,"column":58}},{"start":{"line":75,"column":8},"end":{"line":76,"column":24}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":12}},{"start":{"line":48,"column":12},"end":{"line":48,"column":12}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":12}},{"start":{"line":58,"column":12},"end":{"line":58,"column":12}}]},"4":{"line":87,"type":"switch","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":21}},{"start":{"line":89,"column":8},"end":{"line":89,"column":26}},{"start":{"line":90,"column":8},"end":{"line":90,"column":23}},{"start":{"line":91,"column":8},"end":{"line":92,"column":106}},{"start":{"line":94,"column":8},"end":{"line":94,"column":24}},{"start":{"line":95,"column":8},"end":{"line":95,"column":19}},{"start":{"line":96,"column":8},"end":{"line":97,"column":121}},{"start":{"line":99,"column":8},"end":{"line":99,"column":25}},{"start":{"line":100,"column":8},"end":{"line":100,"column":21}},{"start":{"line":101,"column":8},"end":{"line":101,"column":25}},{"start":{"line":102,"column":8},"end":{"line":103,"column":21}},{"start":{"line":105,"column":8},"end":{"line":106,"column":21}}]},"5":{"line":116,"type":"switch","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":21}},{"start":{"line":118,"column":8},"end":{"line":118,"column":26}},{"start":{"line":119,"column":8},"end":{"line":119,"column":23}},{"start":{"line":120,"column":8},"end":{"line":121,"column":98}},{"start":{"line":123,"column":8},"end":{"line":123,"column":24}},{"start":{"line":124,"column":8},"end":{"line":124,"column":19}},{"start":{"line":125,"column":8},"end":{"line":126,"column":117}},{"start":{"line":128,"column":8},"end":{"line":129,"column":21}},{"start":{"line":131,"column":8},"end":{"line":132,"column":21}}]},"6":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":11},"end":{"line":147,"column":62}},{"start":{"line":148,"column":8},"end":{"line":148,"column":61}},{"start":{"line":149,"column":9},"end":{"line":149,"column":64}}]},"7":{"line":149,"type":"cond-expr","locations":[{"start":{"line":149,"column":58},"end":{"line":149,"column":60}},{"start":{"line":149,"column":63},"end":{"line":149,"column":64}}]},"8":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":8},"end":{"line":162,"column":8}},{"start":{"line":162,"column":8},"end":{"line":162,"column":8}}]},"9":{"line":218,"type":"cond-expr","locations":[{"start":{"line":221,"column":14},"end":{"line":221,"column":34}},{"start":{"line":232,"column":14},"end":{"line":232,"column":42}}]},"10":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":12},"end":{"line":237,"column":12}},{"start":{"line":237,"column":12},"end":{"line":237,"column":12}}]},"11":{"line":239,"type":"cond-expr","locations":[{"start":{"line":239,"column":54},"end":{"line":239,"column":82}},{"start":{"line":239,"column":85},"end":{"line":239,"column":114}}]},"12":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":20},"end":{"line":241,"column":20}},{"start":{"line":241,"column":20},"end":{"line":241,"column":20}}]},"13":{"line":247,"type":"cond-expr","locations":[{"start":{"line":247,"column":35},"end":{"line":247,"column":60}},{"start":{"line":247,"column":63},"end":{"line":247,"column":89}}]},"14":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":8},"end":{"line":264,"column":8}},{"start":{"line":264,"column":8},"end":{"line":264,"column":8}}]},"15":{"line":276,"type":"binary-expr","locations":[{"start":{"line":276,"column":36},"end":{"line":276,"column":122}},{"start":{"line":276,"column":126},"end":{"line":276,"column":128}}]},"16":{"line":276,"type":"cond-expr","locations":[{"start":{"line":276,"column":46},"end":{"line":276,"column":74}},{"start":{"line":276,"column":77},"end":{"line":276,"column":106}}]},"17":{"line":277,"type":"cond-expr","locations":[{"start":{"line":277,"column":42},"end":{"line":277,"column":67}},{"start":{"line":277,"column":70},"end":{"line":277,"column":96}}]},"18":{"line":286,"type":"binary-expr","locations":[{"start":{"line":286,"column":15},"end":{"line":286,"column":64}},{"start":{"line":286,"column":68},"end":{"line":286,"column":115}}]},"19":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":12},"end":{"line":287,"column":12}},{"start":{"line":287,"column":12},"end":{"line":287,"column":12}}]},"20":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":16},"end":{"line":288,"column":66}},{"start":{"line":289,"column":16},"end":{"line":289,"column":63}},{"start":{"line":290,"column":16},"end":{"line":290,"column":122}}]},"21":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8}},{"start":{"line":305,"column":8},"end":{"line":305,"column":8}}]}},"code":["/**"," * @fileoverview The event generator for AST nodes."," * @author Toru Nagashima"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const esquery = require(\"esquery\");","const lodash = require(\"lodash\");","","//------------------------------------------------------------------------------","// Typedefs","//------------------------------------------------------------------------------","","/**"," * An object describing an AST selector"," * @typedef {Object} ASTSelector"," * @property {string} rawSelector The string that was parsed into this selector"," * @property {boolean} isExit `true` if this should be emitted when exiting the node rather than when entering"," * @property {Object} parsedSelector An object (from esquery) describing the matching behavior of the selector"," * @property {string[]|null} listenerTypes A list of node types that could possibly cause the selector to match,"," * or `null` if all node types could cause a match"," * @property {number} attributeCount The total number of classes, pseudo-classes, and attribute queries in this selector"," * @property {number} identifierCount The total number of identifier queries in this selector"," */","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**","* Gets the possible types of a selector","* @param {Object} parsedSelector An object (from esquery) describing the matching behavior of the selector","* @returns {string[]|null} The node types that could possibly trigger this selector, or `null` if all node types could trigger it","*/","function getPossibleTypes(parsedSelector) {","    switch (parsedSelector.type) {","        case \"identifier\":","            return [parsedSelector.value];","","        case \"matches\": {","            const typesForComponents = parsedSelector.selectors.map(getPossibleTypes);","","            if (typesForComponents.every(typesForComponent => typesForComponent)) {","                return lodash.union.apply(null, typesForComponents);","            }","            return null;","        }","","        case \"compound\": {","            const typesForComponents = parsedSelector.selectors.map(getPossibleTypes).filter(typesForComponent => typesForComponent);","","            // If all of the components could match any type, then the compound could also match any type.","            if (!typesForComponents.length) {","                return null;","            }","","            /*","             * If at least one of the components could only match a particular type, the compound could only match","             * the intersection of those types.","             */","            return lodash.intersection.apply(null, typesForComponents);","        }","","        case \"child\":","        case \"descendant\":","        case \"sibling\":","        case \"adjacent\":","            return getPossibleTypes(parsedSelector.right);","","        default:","            return null;","","    }","}","","/**"," * Counts the number of class, pseudo-class, and attribute queries in this selector"," * @param {Object} parsedSelector An object (from esquery) describing the selector's matching behavior"," * @returns {number} The number of class, pseudo-class, and attribute queries in this selector"," */","function countClassAttributes(parsedSelector) {","    switch (parsedSelector.type) {","        case \"child\":","        case \"descendant\":","        case \"sibling\":","        case \"adjacent\":","            return countClassAttributes(parsedSelector.left) + countClassAttributes(parsedSelector.right);","","        case \"compound\":","        case \"not\":","        case \"matches\":","            return parsedSelector.selectors.reduce((sum, childSelector) => sum + countClassAttributes(childSelector), 0);","","        case \"attribute\":","        case \"field\":","        case \"nth-child\":","        case \"nth-last-child\":","            return 1;","","        default:","            return 0;","    }","}","","/**"," * Counts the number of identifier queries in this selector"," * @param {Object} parsedSelector An object (from esquery) describing the selector's matching behavior"," * @returns {number} The number of identifier queries"," */","function countIdentifiers(parsedSelector) {","    switch (parsedSelector.type) {","        case \"child\":","        case \"descendant\":","        case \"sibling\":","        case \"adjacent\":","            return countIdentifiers(parsedSelector.left) + countIdentifiers(parsedSelector.right);","","        case \"compound\":","        case \"not\":","        case \"matches\":","            return parsedSelector.selectors.reduce((sum, childSelector) => sum + countIdentifiers(childSelector), 0);","","        case \"identifier\":","            return 1;","","        default:","            return 0;","    }","}","","/**"," * Compares the specificity of two selector objects, with CSS-like rules."," * @param {ASTSelector} selectorA An AST selector descriptor"," * @param {ASTSelector} selectorB Another AST selector descriptor"," * @returns {number}"," * a value less than 0 if selectorA is less specific than selectorB"," * a value greater than 0 if selectorA is more specific than selectorB"," * a value less than 0 if selectorA and selectorB have the same specificity, and selectorA <= selectorB alphabetically"," * a value greater than 0 if selectorA and selectorB have the same specificity, and selectorA > selectorB alphabetically"," */","function compareSpecificity(selectorA, selectorB) {","    return selectorA.attributeCount - selectorB.attributeCount ||","        selectorA.identifierCount - selectorB.identifierCount ||","        (selectorA.rawSelector <= selectorB.rawSelector ? -1 : 1);","}","","/**"," * Parses a raw selector string, and throws a useful error if parsing fails."," * @param {string} rawSelector A raw AST selector"," * @returns {Object} An object (from esquery) describing the matching behavior of this selector"," * @throws {Error} An error if the selector is invalid"," */","function tryParseSelector(rawSelector) {","    try {","        return esquery.parse(rawSelector.replace(/:exit$/, \"\"));","    } catch (err) {","        if (typeof err.offset === \"number\") {","            throw new Error(`Syntax error in selector \"${rawSelector}\" at position ${err.offset}: ${err.message}`);","        }","        throw err;","    }","}","","/**"," * Parses a raw selector string, and returns the parsed selector along with specificity and type information."," * @param {string} rawSelector A raw AST selector"," * @returns {ASTSelector} A selector descriptor"," */","const parseSelector = lodash.memoize(rawSelector => {","    const parsedSelector = tryParseSelector(rawSelector);","","    return {","        rawSelector,","        isExit: rawSelector.endsWith(\":exit\"),","        parsedSelector,","        listenerTypes: getPossibleTypes(parsedSelector),","        attributeCount: countClassAttributes(parsedSelector),","        identifierCount: countIdentifiers(parsedSelector)","    };","});","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * The event generator for AST nodes."," * This implements below interface."," *"," * ```ts"," * interface EventGenerator {"," *     emitter: EventEmitter;"," *     enterNode(node: ASTNode): void;"," *     leaveNode(node: ASTNode): void;"," * }"," * ```"," */","class NodeEventGenerator {","","    /**","    * @param {EventEmitter} emitter - An event emitter which is the destination of events. This emitter must already","    * have registered listeners for all of the events that it needs to listen for.","    * @returns {NodeEventGenerator} new instance","    */","    constructor(emitter) {","        this.emitter = emitter;","        this.currentAncestry = [];","        this.enterSelectorsByNodeType = new Map();","        this.exitSelectorsByNodeType = new Map();","        this.anyTypeEnterSelectors = [];","        this.anyTypeExitSelectors = [];","","        const eventNames = typeof emitter.eventNames === \"function\"","","            // Use the built-in eventNames() function if available (Node 6+)","            ? emitter.eventNames()","","            /*","             * Otherwise, use the private _events property.","             * Using a private property isn't ideal here, but this seems to","             * be the best way to get a list of event names without overriding","             * addEventListener, which would hurt performance. This property","             * is widely used and unlikely to be removed in a future version","             * (see https://github.com/nodejs/node/issues/1817). Also, future","             * node versions will have eventNames() anyway.","             */","            : Object.keys(emitter._events); // eslint-disable-line no-underscore-dangle","","        eventNames.forEach(rawSelector => {","            const selector = parseSelector(rawSelector);","","            if (selector.listenerTypes) {","                selector.listenerTypes.forEach(nodeType => {","                    const typeMap = selector.isExit ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType;","","                    if (!typeMap.has(nodeType)) {","                        typeMap.set(nodeType, []);","                    }","                    typeMap.get(nodeType).push(selector);","                });","            } else {","                (selector.isExit ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors).push(selector);","            }","        });","","        this.anyTypeEnterSelectors.sort(compareSpecificity);","        this.anyTypeExitSelectors.sort(compareSpecificity);","        this.enterSelectorsByNodeType.forEach(selectorList => selectorList.sort(compareSpecificity));","        this.exitSelectorsByNodeType.forEach(selectorList => selectorList.sort(compareSpecificity));","    }","","    /**","     * Checks a selector against a node, and emits it if it matches","     * @param {ASTNode} node The node to check","     * @param {ASTSelector} selector An AST selector descriptor","     * @returns {void}","     */","    applySelector(node, selector) {","        if (esquery.matches(node, selector.parsedSelector, this.currentAncestry)) {","            this.emitter.emit(selector.rawSelector, node);","        }","    }","","    /**","     * Applies all appropriate selectors to a node, in specificity order","     * @param {ASTNode} node The node to check","     * @param {boolean} isExit `false` if the node is currently being entered, `true` if it's currently being exited","     * @returns {void}","     */","    applySelectors(node, isExit) {","        const selectorsByNodeType = (isExit ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType).get(node.type) || [];","        const anyTypeSelectors = isExit ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors;","","        /*","         * selectorsByNodeType and anyTypeSelectors were already sorted by specificity in the constructor.","         * Iterate through each of them, applying selectors in the right order.","         */","        let selectorsByTypeIndex = 0;","        let anyTypeSelectorsIndex = 0;","","        while (selectorsByTypeIndex < selectorsByNodeType.length || anyTypeSelectorsIndex < anyTypeSelectors.length) {","            if (","                selectorsByTypeIndex >= selectorsByNodeType.length ||","                anyTypeSelectorsIndex < anyTypeSelectors.length &&","                compareSpecificity(anyTypeSelectors[anyTypeSelectorsIndex], selectorsByNodeType[selectorsByTypeIndex]) < 0","            ) {","                this.applySelector(node, anyTypeSelectors[anyTypeSelectorsIndex++]);","            } else {","                this.applySelector(node, selectorsByNodeType[selectorsByTypeIndex++]);","            }","        }","    }","","    /**","     * Emits an event of entering AST node.","     * @param {ASTNode} node - A node which was entered.","     * @returns {void}","     */","    enterNode(node) {","        if (node.parent) {","            this.currentAncestry.unshift(node.parent);","        }","        this.applySelectors(node, false);","    }","","    /**","     * Emits an event of leaving AST node.","     * @param {ASTNode} node - A node which was left.","     * @returns {void}","     */","    leaveNode(node) {","        this.applySelectors(node, true);","        this.currentAncestry.shift();","    }","}","","module.exports = NodeEventGenerator;",""],"l":{"12":1,"13":1,"40":1,"41":0,"43":0,"46":0,"48":0,"49":0,"51":0,"55":0,"58":0,"59":0,"66":0,"73":0,"76":0,"86":1,"87":0,"92":0,"97":0,"103":0,"106":0,"115":1,"116":0,"121":0,"126":0,"129":0,"132":0,"146":1,"147":0,"158":1,"159":0,"160":0,"162":0,"163":0,"165":0,"174":1,"175":0,"177":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"218":0,"234":0,"235":0,"237":0,"238":0,"239":0,"241":0,"242":0,"244":0,"247":0,"251":0,"252":0,"253":0,"254":0,"264":0,"265":0,"276":0,"277":0,"283":0,"284":0,"286":0,"287":0,"292":0,"294":0,"305":0,"306":0,"308":0,"317":0,"318":0,"322":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/source-code.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/source-code.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0,0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"validate","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":23}}},"2":{"name":"findJSDocComment","line":53,"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":42}}},"3":{"name":"looksLikeExport","line":77,"loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":34}}},"4":{"name":"sortedMerge","line":88,"loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":39}}},"5":{"name":"SourceCode","line":115,"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":31}}},"6":{"name":"(anonymous_6)","line":183,"loc":{"start":{"line":183,"column":24},"end":{"line":183,"column":39}}},"7":{"name":"(anonymous_7)","line":197,"loc":{"start":{"line":197,"column":11},"end":{"line":197,"column":43}}},"8":{"name":"(anonymous_8)","line":211,"loc":{"start":{"line":211,"column":12},"end":{"line":211,"column":15}}},"9":{"name":"(anonymous_9)","line":219,"loc":{"start":{"line":219,"column":18},"end":{"line":219,"column":21}}},"10":{"name":"(anonymous_10)","line":229,"loc":{"start":{"line":229,"column":15},"end":{"line":229,"column":22}}},"11":{"name":"(anonymous_11)","line":258,"loc":{"start":{"line":258,"column":19},"end":{"line":258,"column":26}}},"12":{"name":"(anonymous_12)","line":298,"loc":{"start":{"line":298,"column":23},"end":{"line":298,"column":31}}},"13":{"name":"(anonymous_13)","line":304,"loc":{"start":{"line":304,"column":17},"end":{"line":304,"column":32}}},"14":{"name":"(anonymous_14)","line":312,"loc":{"start":{"line":312,"column":17},"end":{"line":312,"column":24}}},"15":{"name":"(anonymous_15)","line":331,"loc":{"start":{"line":331,"column":24},"end":{"line":331,"column":40}}},"16":{"name":"(anonymous_16)","line":342,"loc":{"start":{"line":342,"column":19},"end":{"line":342,"column":27}}},"17":{"name":"(anonymous_17)","line":379,"loc":{"start":{"line":379,"column":19},"end":{"line":379,"column":25}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":14,"column":31}},"2":{"start":{"line":27,"column":0},"end":{"line":44,"column":1}},"3":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"4":{"start":{"line":30,"column":8},"end":{"line":30,"column":60}},"5":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":62}},"7":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"8":{"start":{"line":38,"column":8},"end":{"line":38,"column":64}},"9":{"start":{"line":41,"column":4},"end":{"line":43,"column":5}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":60}},"11":{"start":{"line":53,"column":0},"end":{"line":69,"column":1}},"12":{"start":{"line":55,"column":4},"end":{"line":66,"column":5}},"13":{"start":{"line":56,"column":8},"end":{"line":65,"column":9}},"14":{"start":{"line":57,"column":12},"end":{"line":64,"column":13}},"15":{"start":{"line":59,"column":16},"end":{"line":61,"column":17}},"16":{"start":{"line":60,"column":20},"end":{"line":60,"column":39}},"17":{"start":{"line":62,"column":16},"end":{"line":62,"column":22}},"18":{"start":{"line":68,"column":4},"end":{"line":68,"column":16}},"19":{"start":{"line":77,"column":0},"end":{"line":80,"column":1}},"20":{"start":{"line":78,"column":4},"end":{"line":79,"column":86}},"21":{"start":{"line":88,"column":0},"end":{"line":102,"column":1}},"22":{"start":{"line":89,"column":4},"end":{"line":89,"column":22}},"23":{"start":{"line":90,"column":4},"end":{"line":90,"column":23}},"24":{"start":{"line":91,"column":4},"end":{"line":91,"column":25}},"25":{"start":{"line":93,"column":4},"end":{"line":99,"column":5}},"26":{"start":{"line":94,"column":8},"end":{"line":98,"column":9}},"27":{"start":{"line":95,"column":12},"end":{"line":95,"column":46}},"28":{"start":{"line":97,"column":12},"end":{"line":97,"column":50}},"29":{"start":{"line":101,"column":4},"end":{"line":101,"column":18}},"30":{"start":{"line":115,"column":0},"end":{"line":175,"column":1}},"31":{"start":{"line":116,"column":4},"end":{"line":116,"column":18}},"32":{"start":{"line":122,"column":4},"end":{"line":122,"column":50}},"33":{"start":{"line":129,"column":4},"end":{"line":129,"column":53}},"34":{"start":{"line":135,"column":4},"end":{"line":135,"column":19}},"35":{"start":{"line":142,"column":4},"end":{"line":142,"column":20}},"36":{"start":{"line":143,"column":4},"end":{"line":143,"column":32}},"37":{"start":{"line":145,"column":4},"end":{"line":145,"column":70}},"38":{"start":{"line":146,"column":4},"end":{"line":146,"column":14}},"39":{"start":{"line":157,"column":4},"end":{"line":160,"column":5}},"40":{"start":{"line":158,"column":8},"end":{"line":158,"column":111}},"41":{"start":{"line":159,"column":8},"end":{"line":159,"column":66}},"42":{"start":{"line":161,"column":4},"end":{"line":161,"column":94}},"43":{"start":{"line":163,"column":4},"end":{"line":163,"column":67}},"44":{"start":{"line":166,"column":4},"end":{"line":166,"column":64}},"45":{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},"46":{"start":{"line":169,"column":8},"end":{"line":169,"column":67}},"47":{"start":{"line":173,"column":4},"end":{"line":173,"column":24}},"48":{"start":{"line":174,"column":4},"end":{"line":174,"column":30}},"49":{"start":{"line":183,"column":0},"end":{"line":185,"column":2}},"50":{"start":{"line":184,"column":4},"end":{"line":184,"column":63}},"51":{"start":{"line":187,"column":0},"end":{"line":413,"column":2}},"52":{"start":{"line":198,"column":8},"end":{"line":201,"column":9}},"53":{"start":{"line":199,"column":12},"end":{"line":200,"column":51}},"54":{"start":{"line":202,"column":8},"end":{"line":202,"column":25}},"55":{"start":{"line":212,"column":8},"end":{"line":212,"column":26}},"56":{"start":{"line":220,"column":8},"end":{"line":220,"column":33}},"57":{"start":{"line":231,"column":8},"end":{"line":231,"column":57}},"58":{"start":{"line":232,"column":8},"end":{"line":232,"column":61}},"59":{"start":{"line":239,"column":8},"end":{"line":243,"column":9}},"60":{"start":{"line":240,"column":12},"end":{"line":242,"column":13}},"61":{"start":{"line":241,"column":16},"end":{"line":241,"column":48}},"62":{"start":{"line":245,"column":8},"end":{"line":248,"column":10}},"63":{"start":{"line":260,"column":8},"end":{"line":260,"column":33}},"64":{"start":{"line":262,"column":8},"end":{"line":290,"column":9}},"65":{"start":{"line":265,"column":16},"end":{"line":267,"column":17}},"66":{"start":{"line":266,"column":20},"end":{"line":266,"column":91}},"67":{"start":{"line":268,"column":16},"end":{"line":268,"column":83}},"68":{"start":{"line":271,"column":16},"end":{"line":271,"column":101}},"69":{"start":{"line":276,"column":16},"end":{"line":284,"column":17}},"70":{"start":{"line":277,"column":20},"end":{"line":279,"column":21}},"71":{"start":{"line":278,"column":24},"end":{"line":278,"column":47}},"72":{"start":{"line":281,"column":20},"end":{"line":281,"column":150}},"73":{"start":{"line":282,"column":23},"end":{"line":284,"column":17}},"74":{"start":{"line":283,"column":20},"end":{"line":283,"column":87}},"75":{"start":{"line":289,"column":16},"end":{"line":289,"column":28}},"76":{"start":{"line":299,"column":8},"end":{"line":300,"column":32}},"77":{"start":{"line":301,"column":8},"end":{"line":301,"column":42}},"78":{"start":{"line":303,"column":8},"end":{"line":317,"column":11}},"79":{"start":{"line":305,"column":16},"end":{"line":310,"column":17}},"80":{"start":{"line":306,"column":20},"end":{"line":306,"column":34}},"81":{"start":{"line":307,"column":20},"end":{"line":307,"column":42}},"82":{"start":{"line":309,"column":20},"end":{"line":309,"column":32}},"83":{"start":{"line":313,"column":16},"end":{"line":315,"column":17}},"84":{"start":{"line":314,"column":20},"end":{"line":314,"column":33}},"85":{"start":{"line":319,"column":8},"end":{"line":319,"column":79}},"86":{"start":{"line":332,"column":8},"end":{"line":332,"column":70}},"87":{"start":{"line":334,"column":8},"end":{"line":334,"column":59}},"88":{"start":{"line":343,"column":8},"end":{"line":345,"column":9}},"89":{"start":{"line":344,"column":12},"end":{"line":344,"column":68}},"90":{"start":{"line":347,"column":8},"end":{"line":349,"column":9}},"91":{"start":{"line":348,"column":12},"end":{"line":348,"column":131}},"92":{"start":{"line":358,"column":8},"end":{"line":360,"column":9}},"93":{"start":{"line":359,"column":12},"end":{"line":359,"column":97}},"94":{"start":{"line":366,"column":8},"end":{"line":366,"column":80}},"95":{"start":{"line":368,"column":8},"end":{"line":368,"column":91}},"96":{"start":{"line":380,"column":8},"end":{"line":382,"column":9}},"97":{"start":{"line":381,"column":12},"end":{"line":381,"column":111}},"98":{"start":{"line":384,"column":8},"end":{"line":386,"column":9}},"99":{"start":{"line":385,"column":12},"end":{"line":385,"column":123}},"100":{"start":{"line":388,"column":8},"end":{"line":390,"column":9}},"101":{"start":{"line":389,"column":12},"end":{"line":389,"column":147}},"102":{"start":{"line":392,"column":8},"end":{"line":392,"column":67}},"103":{"start":{"line":393,"column":8},"end":{"line":393,"column":124}},"104":{"start":{"line":394,"column":8},"end":{"line":394,"column":58}},"105":{"start":{"line":404,"column":8},"end":{"line":409,"column":9}},"106":{"start":{"line":408,"column":12},"end":{"line":408,"column":169}},"107":{"start":{"line":411,"column":8},"end":{"line":411,"column":29}},"108":{"start":{"line":416,"column":0},"end":{"line":416,"column":28}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"4":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"6":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":12}},{"start":{"line":57,"column":12},"end":{"line":57,"column":12}}]},"7":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":44}},{"start":{"line":57,"column":48},"end":{"line":57,"column":83}}]},"8":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":16}},{"start":{"line":59,"column":16},"end":{"line":59,"column":16}}]},"9":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":11},"end":{"line":78,"column":54}},{"start":{"line":78,"column":58},"end":{"line":78,"column":99}},{"start":{"line":79,"column":8},"end":{"line":79,"column":47}},{"start":{"line":79,"column":51},"end":{"line":79,"column":85}}]},"10":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":11},"end":{"line":93,"column":37}},{"start":{"line":93,"column":41},"end":{"line":93,"column":71}}]},"11":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8}},{"start":{"line":94,"column":8},"end":{"line":94,"column":8}}]},"12":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":43}},{"start":{"line":94,"column":47},"end":{"line":94,"column":73}},{"start":{"line":94,"column":77},"end":{"line":94,"column":138}}]},"13":{"line":129,"type":"cond-expr","locations":[{"start":{"line":129,"column":31},"end":{"line":129,"column":44}},{"start":{"line":129,"column":47},"end":{"line":129,"column":51}}]},"14":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":8},"end":{"line":198,"column":8}},{"start":{"line":198,"column":8},"end":{"line":198,"column":8}}]},"15":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":61},"end":{"line":199,"column":72}},{"start":{"line":199,"column":76},"end":{"line":199,"column":77}}]},"16":{"line":200,"type":"binary-expr","locations":[{"start":{"line":200,"column":33},"end":{"line":200,"column":43}},{"start":{"line":200,"column":47},"end":{"line":200,"column":48}}]},"17":{"line":231,"type":"binary-expr","locations":[{"start":{"line":231,"column":30},"end":{"line":231,"column":50}},{"start":{"line":231,"column":54},"end":{"line":231,"column":56}}]},"18":{"line":232,"type":"binary-expr","locations":[{"start":{"line":232,"column":33},"end":{"line":232,"column":54}},{"start":{"line":232,"column":58},"end":{"line":232,"column":60}}]},"19":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":8},"end":{"line":239,"column":8}},{"start":{"line":239,"column":8},"end":{"line":239,"column":8}}]},"20":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":12},"end":{"line":240,"column":12}},{"start":{"line":240,"column":12},"end":{"line":240,"column":12}}]},"21":{"line":262,"type":"switch","locations":[{"start":{"line":263,"column":12},"end":{"line":263,"column":36}},{"start":{"line":264,"column":12},"end":{"line":268,"column":83}},{"start":{"line":270,"column":12},"end":{"line":271,"column":101}},{"start":{"line":273,"column":12},"end":{"line":273,"column":43}},{"start":{"line":274,"column":12},"end":{"line":284,"column":17}},{"start":{"line":288,"column":12},"end":{"line":289,"column":28}}]},"22":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":16},"end":{"line":265,"column":16}},{"start":{"line":265,"column":16},"end":{"line":265,"column":16}}]},"23":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":16},"end":{"line":276,"column":16}},{"start":{"line":276,"column":16},"end":{"line":276,"column":16}}]},"24":{"line":276,"type":"binary-expr","locations":[{"start":{"line":276,"column":20},"end":{"line":276,"column":52}},{"start":{"line":276,"column":56},"end":{"line":276,"column":87}}]},"25":{"line":277,"type":"binary-expr","locations":[{"start":{"line":277,"column":27},"end":{"line":277,"column":33}},{"start":{"line":277,"column":37},"end":{"line":277,"column":60}},{"start":{"line":277,"column":64},"end":{"line":277,"column":93}},{"start":{"line":277,"column":97},"end":{"line":277,"column":131}},{"start":{"line":277,"column":135},"end":{"line":277,"column":161}}]},"26":{"line":281,"type":"cond-expr","locations":[{"start":{"line":281,"column":79},"end":{"line":281,"column":142}},{"start":{"line":281,"column":145},"end":{"line":281,"column":149}}]},"27":{"line":281,"type":"binary-expr","locations":[{"start":{"line":281,"column":27},"end":{"line":281,"column":33}},{"start":{"line":281,"column":38},"end":{"line":281,"column":75}}]},"28":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":23},"end":{"line":282,"column":23}},{"start":{"line":282,"column":23},"end":{"line":282,"column":23}}]},"29":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":16},"end":{"line":305,"column":16}},{"start":{"line":305,"column":16},"end":{"line":305,"column":16}}]},"30":{"line":305,"type":"binary-expr","locations":[{"start":{"line":305,"column":20},"end":{"line":305,"column":42}},{"start":{"line":305,"column":46},"end":{"line":305,"column":67}}]},"31":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":16},"end":{"line":313,"column":16}},{"start":{"line":313,"column":16},"end":{"line":313,"column":16}}]},"32":{"line":319,"type":"cond-expr","locations":[{"start":{"line":319,"column":24},"end":{"line":319,"column":71}},{"start":{"line":319,"column":74},"end":{"line":319,"column":78}}]},"33":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":8},"end":{"line":343,"column":8}},{"start":{"line":343,"column":8},"end":{"line":343,"column":8}}]},"34":{"line":347,"type":"if","locations":[{"start":{"line":347,"column":8},"end":{"line":347,"column":8}},{"start":{"line":347,"column":8},"end":{"line":347,"column":8}}]},"35":{"line":347,"type":"binary-expr","locations":[{"start":{"line":347,"column":12},"end":{"line":347,"column":21}},{"start":{"line":347,"column":25},"end":{"line":347,"column":49}}]},"36":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":8},"end":{"line":358,"column":8}},{"start":{"line":358,"column":8},"end":{"line":358,"column":8}}]},"37":{"line":380,"type":"if","locations":[{"start":{"line":380,"column":8},"end":{"line":380,"column":8}},{"start":{"line":380,"column":8},"end":{"line":380,"column":8}}]},"38":{"line":380,"type":"binary-expr","locations":[{"start":{"line":380,"column":12},"end":{"line":380,"column":35}},{"start":{"line":380,"column":39},"end":{"line":380,"column":67}},{"start":{"line":380,"column":71},"end":{"line":380,"column":101}}]},"39":{"line":384,"type":"if","locations":[{"start":{"line":384,"column":8},"end":{"line":384,"column":8}},{"start":{"line":384,"column":8},"end":{"line":384,"column":8}}]},"40":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":8},"end":{"line":388,"column":8}},{"start":{"line":388,"column":8},"end":{"line":388,"column":8}}]},"41":{"line":393,"type":"cond-expr","locations":[{"start":{"line":393,"column":73},"end":{"line":393,"column":89}},{"start":{"line":393,"column":92},"end":{"line":393,"column":123}}]},"42":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":8},"end":{"line":404,"column":8}},{"start":{"line":404,"column":8},"end":{"line":404,"column":8}}]},"43":{"line":405,"type":"binary-expr","locations":[{"start":{"line":405,"column":12},"end":{"line":405,"column":53}},{"start":{"line":405,"column":57},"end":{"line":405,"column":85}},{"start":{"line":406,"column":12},"end":{"line":406,"column":51}},{"start":{"line":406,"column":55},"end":{"line":406,"column":84}}]}},"code":["/**"," * @fileoverview Abstraction of JavaScript source code."," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const TokenStore = require(\"../token-store\"),","    Traverser = require(\"./traverser\"),","    astUtils = require(\"../ast-utils\"),","    lodash = require(\"lodash\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * Validates that the given AST has the required information."," * @param {ASTNode} ast The Program node of the AST to check."," * @throws {Error} If the AST doesn't contain the correct information."," * @returns {void}"," * @private"," */","function validate(ast) {","","    if (!ast.tokens) {","        throw new Error(\"AST is missing the tokens array.\");","    }","","    if (!ast.comments) {","        throw new Error(\"AST is missing the comments array.\");","    }","","    if (!ast.loc) {","        throw new Error(\"AST is missing location information.\");","    }","","    if (!ast.range) {","        throw new Error(\"AST is missing range information\");","    }","}","","/**"," * Finds a JSDoc comment node in an array of comment nodes."," * @param {ASTNode[]} comments The array of comment nodes to search."," * @param {int} line Line number to look around"," * @returns {ASTNode} The node if found, null if not."," * @private"," */","function findJSDocComment(comments, line) {","","    if (comments) {","        for (let i = comments.length - 1; i >= 0; i--) {","            if (comments[i].type === \"Block\" && comments[i].value.charAt(0) === \"*\") {","","                if (line - comments[i].loc.end.line <= 1) {","                    return comments[i];","                }","                break;","","            }","        }","    }","","    return null;","}","","/**"," * Check to see if its a ES6 export declaration"," * @param {ASTNode} astNode - any node"," * @returns {boolean} whether the given node represents a export declaration"," * @private"," */","function looksLikeExport(astNode) {","    return astNode.type === \"ExportDefaultDeclaration\" || astNode.type === \"ExportNamedDeclaration\" ||","        astNode.type === \"ExportAllDeclaration\" || astNode.type === \"ExportSpecifier\";","}","","/**"," * Merges two sorted lists into a larger sorted list in O(n) time"," * @param {Token[]} tokens The list of tokens"," * @param {Token[]} comments The list of comments"," * @returns {Token[]} A sorted list of tokens and comments"," */","function sortedMerge(tokens, comments) {","    const result = [];","    let tokenIndex = 0;","    let commentIndex = 0;","","    while (tokenIndex < tokens.length || commentIndex < comments.length) {","        if (commentIndex >= comments.length || tokenIndex < tokens.length && tokens[tokenIndex].range[0] < comments[commentIndex].range[0]) {","            result.push(tokens[tokenIndex++]);","        } else {","            result.push(comments[commentIndex++]);","        }","    }","","    return result;","}","","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Represents parsed source code."," * @param {string} text - The source code text."," * @param {ASTNode} ast - The Program node of the AST representing the code. This AST should be created from the text that BOM was stripped."," * @constructor"," */","function SourceCode(text, ast) {","    validate(ast);","","    /**","     * The flag to indicate that the source code has Unicode BOM.","     * @type boolean","     */","    this.hasBOM = (text.charCodeAt(0) === 0xFEFF);","","    /**","     * The original text source code.","     * BOM was stripped from this text.","     * @type string","     */","    this.text = (this.hasBOM ? text.slice(1) : text);","","    /**","     * The parsed AST for the source code.","     * @type ASTNode","     */","    this.ast = ast;","","    /**","     * The source code split into lines according to ECMA-262 specification.","     * This is done to avoid each rule needing to do so separately.","     * @type string[]","     */","    this.lines = [];","    this.lineStartIndices = [0];","","    const lineEndingPattern = astUtils.createGlobalLinebreakMatcher();","    let match;","","    /*","     * Previously, this was implemented using a regex that","     * matched a sequence of non-linebreak characters followed by a","     * linebreak, then adding the lengths of the matches. However,","     * this caused a catastrophic backtracking issue when the end","     * of a file contained a large number of non-newline characters.","     * To avoid this, the current implementation just matches newlines","     * and uses match.index to get the correct line start indices.","     */","    while ((match = lineEndingPattern.exec(this.text))) {","        this.lines.push(this.text.slice(this.lineStartIndices[this.lineStartIndices.length - 1], match.index));","        this.lineStartIndices.push(match.index + match[0].length);","    }","    this.lines.push(this.text.slice(this.lineStartIndices[this.lineStartIndices.length - 1]));","","    this.tokensAndComments = sortedMerge(ast.tokens, ast.comments);","","    // create token store methods","    const tokenStore = new TokenStore(ast.tokens, ast.comments);","","    for (const methodName of TokenStore.PUBLIC_METHODS) {","        this[methodName] = tokenStore[methodName].bind(tokenStore);","    }","","    // don't allow modification of this object","    Object.freeze(this);","    Object.freeze(this.lines);","}","","/**"," * Split the source code into multiple lines based on the line delimiters"," * @param {string} text Source code as a string"," * @returns {string[]} Array of source code lines"," * @public"," */","SourceCode.splitLines = function(text) {","    return text.split(astUtils.createGlobalLinebreakMatcher());","};","","SourceCode.prototype = {","    constructor: SourceCode,","","    /**","     * Gets the source code for the given node.","     * @param {ASTNode=} node The AST node to get the text for.","     * @param {int=} beforeCount The number of characters before the node to retrieve.","     * @param {int=} afterCount The number of characters after the node to retrieve.","     * @returns {string} The text representing the AST node.","     */","    getText(node, beforeCount, afterCount) {","        if (node) {","            return this.text.slice(Math.max(node.range[0] - (beforeCount || 0), 0),","                node.range[1] + (afterCount || 0));","        }","        return this.text;","","","    },","","    /**","     * Gets the entire source text split into an array of lines.","     * @returns {Array} The source text as an array of lines.","     */","    getLines() {","        return this.lines;","    },","","    /**","     * Retrieves an array containing all comments in the source code.","     * @returns {ASTNode[]} An array of comment nodes.","     */","    getAllComments() {","        return this.ast.comments;","    },","","    /**","     * Gets all comments for the given node.","     * @param {ASTNode} node The AST node to get the comments for.","     * @returns {Object} The list of comments indexed by their position.","     * @public","     */","    getComments(node) {","","        let leadingComments = node.leadingComments || [];","        const trailingComments = node.trailingComments || [];","","        /*","         * espree adds a \"comments\" array on Program nodes rather than","         * leadingComments/trailingComments. Comments are only left in the","         * Program node comments array if there is no executable code.","         */","        if (node.type === \"Program\") {","            if (node.body.length === 0) {","                leadingComments = node.comments;","            }","        }","","        return {","            leading: leadingComments,","            trailing: trailingComments","        };","    },","","    /**","     * Retrieves the JSDoc comment for a given node.","     * @param {ASTNode} node The AST node to get the comment for.","     * @returns {ASTNode} The BlockComment node containing the JSDoc for the","     *      given node or null if not found.","     * @public","     */","    getJSDocComment(node) {","","        let parent = node.parent;","","        switch (node.type) {","            case \"ClassDeclaration\":","            case \"FunctionDeclaration\":","                if (looksLikeExport(parent)) {","                    return findJSDocComment(parent.leadingComments, parent.loc.start.line);","                }","                return findJSDocComment(node.leadingComments, node.loc.start.line);","","            case \"ClassExpression\":","                return findJSDocComment(parent.parent.leadingComments, parent.parent.loc.start.line);","","            case \"ArrowFunctionExpression\":","            case \"FunctionExpression\":","","                if (parent.type !== \"CallExpression\" && parent.type !== \"NewExpression\") {","                    while (parent && !parent.leadingComments && !/Function/.test(parent.type) && parent.type !== \"MethodDefinition\" && parent.type !== \"Property\") {","                        parent = parent.parent;","                    }","","                    return parent && (parent.type !== \"FunctionDeclaration\") ? findJSDocComment(parent.leadingComments, parent.loc.start.line) : null;","                } else if (node.leadingComments) {","                    return findJSDocComment(node.leadingComments, node.loc.start.line);","                }","","            // falls through","","            default:","                return null;","        }","    },","","    /**","     * Gets the deepest node containing a range index.","     * @param {int} index Range index of the desired node.","     * @returns {ASTNode} The node if found or null if not found.","     */","    getNodeByRangeIndex(index) {","        let result = null,","            resultParent = null;","        const traverser = new Traverser();","","        traverser.traverse(this.ast, {","            enter(node, parent) {","                if (node.range[0] <= index && index < node.range[1]) {","                    result = node;","                    resultParent = parent;","                } else {","                    this.skip();","                }","            },","            leave(node) {","                if (node === result) {","                    this.break();","                }","            }","        });","","        return result ? Object.assign({ parent: resultParent }, result) : null;","    },","","    /**","     * Determines if two tokens have at least one whitespace character","     * between them. This completely disregards comments in making the","     * determination, so comments count as zero-length substrings.","     * @param {Token} first The token to check after.","     * @param {Token} second The token to check before.","     * @returns {boolean} True if there is only space between tokens, false","     *  if there is anything other than whitespace between tokens.","     */","    isSpaceBetweenTokens(first, second) {","        const text = this.text.slice(first.range[1], second.range[0]);","","        return /\\s/.test(text.replace(/\\/\\*.*?\\*\\//g, \"\"));","    },","","    /**","    * Converts a source text index into a (line, column) pair.","    * @param {number} index The index of a character in a file","    * @returns {Object} A {line, column} location object with a 0-indexed column","    */","    getLocFromIndex(index) {","        if (typeof index !== \"number\") {","            throw new TypeError(\"Expected `index` to be a number.\");","        }","","        if (index < 0 || index > this.text.length) {","            throw new RangeError(`Index out of range (requested index ${index}, but source text has length ${this.text.length}).`);","        }","","        /*","         * For an argument of this.text.length, return the location one \"spot\" past the last character","         * of the file. If the last character is a linebreak, the location will be column 0 of the next","         * line; otherwise, the location will be in the next column on the same line.","         *","         * See getIndexFromLoc for the motivation for this special case.","         */","        if (index === this.text.length) {","            return { line: this.lines.length, column: this.lines[this.lines.length - 1].length };","        }","","        /*","         * To figure out which line rangeIndex is on, determine the last index at which rangeIndex could","         * be inserted into lineIndices to keep the list sorted.","         */","        const lineNumber = lodash.sortedLastIndex(this.lineStartIndices, index);","","        return { line: lineNumber, column: index - this.lineStartIndices[lineNumber - 1] };","","    },","","    /**","    * Converts a (line, column) pair into a range index.","    * @param {Object} loc A line/column location","    * @param {number} loc.line The line number of the location (1-indexed)","    * @param {number} loc.column The column number of the location (0-indexed)","    * @returns {number} The range index of the location in the file.","    */","    getIndexFromLoc(loc) {","        if (typeof loc !== \"object\" || typeof loc.line !== \"number\" || typeof loc.column !== \"number\") {","            throw new TypeError(\"Expected `loc` to be an object with numeric `line` and `column` properties.\");","        }","","        if (loc.line <= 0) {","            throw new RangeError(`Line number out of range (line ${loc.line} requested). Line numbers should be 1-based.`);","        }","","        if (loc.line > this.lineStartIndices.length) {","            throw new RangeError(`Line number out of range (line ${loc.line} requested, but only ${this.lineStartIndices.length} lines present).`);","        }","","        const lineStartIndex = this.lineStartIndices[loc.line - 1];","        const lineEndIndex = loc.line === this.lineStartIndices.length ? this.text.length : this.lineStartIndices[loc.line];","        const positionIndex = lineStartIndex + loc.column;","","        /*","         * By design, getIndexFromLoc({ line: lineNum, column: 0 }) should return the start index of","         * the given line, provided that the line number is valid element of this.lines. Since the","         * last element of this.lines is an empty string for files with trailing newlines, add a","         * special case where getting the index for the first location after the end of the file","         * will return the length of the file, rather than throwing an error. This allows rules to","         * use getIndexFromLoc consistently without worrying about edge cases at the end of a file.","         */","        if (","            loc.line === this.lineStartIndices.length && positionIndex > lineEndIndex ||","            loc.line < this.lineStartIndices.length && positionIndex >= lineEndIndex","        ) {","            throw new RangeError(`Column number out of range (column ${loc.column} requested, but the length of line ${loc.line} is ${lineEndIndex - lineStartIndex}).`);","        }","","        return positionIndex;","    }","};","","","module.exports = SourceCode;",""],"l":{"11":1,"27":1,"29":0,"30":0,"33":0,"34":0,"37":0,"38":0,"41":0,"42":0,"53":1,"55":0,"56":0,"57":0,"59":0,"60":0,"62":0,"68":0,"77":1,"78":0,"88":1,"89":0,"90":0,"91":0,"93":0,"94":0,"95":0,"97":0,"101":0,"115":1,"116":0,"122":0,"129":0,"135":0,"142":0,"143":0,"145":0,"146":0,"157":0,"158":0,"159":0,"161":0,"163":0,"166":0,"168":0,"169":0,"173":0,"174":0,"183":1,"184":0,"187":1,"198":0,"199":0,"202":0,"212":0,"220":0,"231":0,"232":0,"239":0,"240":0,"241":0,"245":0,"260":0,"262":0,"265":0,"266":0,"268":0,"271":0,"276":0,"277":0,"278":0,"281":0,"282":0,"283":0,"289":0,"299":0,"301":0,"303":0,"305":0,"306":0,"307":0,"309":0,"313":0,"314":0,"319":0,"332":0,"334":0,"343":0,"344":0,"347":0,"348":0,"358":0,"359":0,"366":0,"368":0,"380":0,"381":0,"384":0,"385":0,"388":0,"389":0,"392":0,"393":0,"394":0,"404":0,"408":0,"411":0,"416":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"createIndexMap","line":55,"loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":42}}},"2":{"name":"createCursorWithSkip","line":97,"loc":{"start":{"line":97,"column":0},"end":{"line":97,"column":91}}},"3":{"name":"createCursorWithCount","line":133,"loc":{"start":{"line":133,"column":0},"end":{"line":133,"column":92}}},"4":{"name":"createCursorWithPadding","line":185,"loc":{"start":{"line":185,"column":0},"end":{"line":185,"column":104}}},"5":{"name":"(anonymous_5)","line":226,"loc":{"start":{"line":226,"column":15},"end":{"line":226,"column":34}}},"6":{"name":"(anonymous_6)","line":243,"loc":{"start":{"line":243,"column":24},"end":{"line":243,"column":42}}},"7":{"name":"(anonymous_7)","line":269,"loc":{"start":{"line":269,"column":17},"end":{"line":269,"column":33}}},"8":{"name":"(anonymous_8)","line":290,"loc":{"start":{"line":290,"column":16},"end":{"line":290,"column":32}}},"9":{"name":"(anonymous_9)","line":311,"loc":{"start":{"line":311,"column":18},"end":{"line":311,"column":34}}},"10":{"name":"(anonymous_10)","line":332,"loc":{"start":{"line":332,"column":17},"end":{"line":332,"column":33}}},"11":{"name":"(anonymous_11)","line":354,"loc":{"start":{"line":354,"column":24},"end":{"line":354,"column":47}}},"12":{"name":"(anonymous_12)","line":376,"loc":{"start":{"line":376,"column":23},"end":{"line":376,"column":46}}},"13":{"name":"(anonymous_13)","line":397,"loc":{"start":{"line":397,"column":27},"end":{"line":397,"column":40}}},"14":{"name":"(anonymous_14)","line":410,"loc":{"start":{"line":410,"column":26},"end":{"line":410,"column":39}}},"15":{"name":"(anonymous_15)","line":427,"loc":{"start":{"line":427,"column":18},"end":{"line":427,"column":34}}},"16":{"name":"(anonymous_16)","line":448,"loc":{"start":{"line":448,"column":17},"end":{"line":448,"column":33}}},"17":{"name":"(anonymous_17)","line":469,"loc":{"start":{"line":469,"column":19},"end":{"line":469,"column":35}}},"18":{"name":"(anonymous_18)","line":490,"loc":{"start":{"line":490,"column":18},"end":{"line":490,"column":34}}},"19":{"name":"(anonymous_19)","line":512,"loc":{"start":{"line":512,"column":25},"end":{"line":512,"column":48}}},"20":{"name":"(anonymous_20)","line":534,"loc":{"start":{"line":534,"column":24},"end":{"line":534,"column":47}}},"21":{"name":"(anonymous_21)","line":562,"loc":{"start":{"line":562,"column":13},"end":{"line":562,"column":45}}},"22":{"name":"(anonymous_22)","line":591,"loc":{"start":{"line":591,"column":20},"end":{"line":591,"column":43}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}},"3":{"start":{"line":13,"column":0},"end":{"line":13,"column":61}},"4":{"start":{"line":14,"column":0},"end":{"line":14,"column":59}},"5":{"start":{"line":20,"column":0},"end":{"line":42,"column":3}},"6":{"start":{"line":55,"column":0},"end":{"line":79,"column":1}},"7":{"start":{"line":56,"column":4},"end":{"line":56,"column":36}},"8":{"start":{"line":57,"column":4},"end":{"line":57,"column":23}},"9":{"start":{"line":58,"column":4},"end":{"line":58,"column":25}},"10":{"start":{"line":59,"column":4},"end":{"line":59,"column":22}},"11":{"start":{"line":60,"column":4},"end":{"line":60,"column":21}},"12":{"start":{"line":62,"column":4},"end":{"line":76,"column":5}},"13":{"start":{"line":63,"column":8},"end":{"line":63,"column":113}},"14":{"start":{"line":64,"column":8},"end":{"line":68,"column":9}},"15":{"start":{"line":65,"column":12},"end":{"line":65,"column":39}},"16":{"start":{"line":66,"column":12},"end":{"line":66,"column":43}},"17":{"start":{"line":67,"column":12},"end":{"line":67,"column":28}},"18":{"start":{"line":70,"column":8},"end":{"line":70,"column":105}},"19":{"start":{"line":71,"column":8},"end":{"line":75,"column":9}},"20":{"start":{"line":72,"column":12},"end":{"line":72,"column":39}},"21":{"start":{"line":73,"column":12},"end":{"line":73,"column":43}},"22":{"start":{"line":74,"column":12},"end":{"line":74,"column":30}},"23":{"start":{"line":78,"column":4},"end":{"line":78,"column":15}},"24":{"start":{"line":97,"column":0},"end":{"line":115,"column":1}},"25":{"start":{"line":98,"column":4},"end":{"line":98,"column":32}},"26":{"start":{"line":99,"column":4},"end":{"line":99,"column":17}},"27":{"start":{"line":100,"column":4},"end":{"line":100,"column":22}},"28":{"start":{"line":102,"column":4},"end":{"line":110,"column":5}},"29":{"start":{"line":103,"column":8},"end":{"line":103,"column":24}},"30":{"start":{"line":104,"column":11},"end":{"line":110,"column":5}},"31":{"start":{"line":105,"column":8},"end":{"line":105,"column":22}},"32":{"start":{"line":106,"column":11},"end":{"line":110,"column":5}},"33":{"start":{"line":107,"column":8},"end":{"line":107,"column":49}},"34":{"start":{"line":108,"column":8},"end":{"line":108,"column":29}},"35":{"start":{"line":109,"column":8},"end":{"line":109,"column":37}},"36":{"start":{"line":111,"column":4},"end":{"line":111,"column":76}},"37":{"start":{"line":112,"column":4},"end":{"line":112,"column":92}},"38":{"start":{"line":114,"column":4},"end":{"line":114,"column":113}},"39":{"start":{"line":133,"column":0},"end":{"line":154,"column":1}},"40":{"start":{"line":134,"column":4},"end":{"line":134,"column":32}},"41":{"start":{"line":135,"column":4},"end":{"line":135,"column":18}},"42":{"start":{"line":136,"column":4},"end":{"line":136,"column":28}},"43":{"start":{"line":137,"column":4},"end":{"line":137,"column":22}},"44":{"start":{"line":139,"column":4},"end":{"line":149,"column":5}},"45":{"start":{"line":140,"column":8},"end":{"line":140,"column":25}},"46":{"start":{"line":141,"column":8},"end":{"line":141,"column":27}},"47":{"start":{"line":142,"column":11},"end":{"line":149,"column":5}},"48":{"start":{"line":143,"column":8},"end":{"line":143,"column":22}},"49":{"start":{"line":144,"column":11},"end":{"line":149,"column":5}},"50":{"start":{"line":145,"column":8},"end":{"line":145,"column":49}},"51":{"start":{"line":146,"column":8},"end":{"line":146,"column":31}},"52":{"start":{"line":147,"column":8},"end":{"line":147,"column":53}},"53":{"start":{"line":148,"column":8},"end":{"line":148,"column":37}},"54":{"start":{"line":150,"column":4},"end":{"line":150,"column":78}},"55":{"start":{"line":151,"column":4},"end":{"line":151,"column":92}},"56":{"start":{"line":153,"column":4},"end":{"line":153,"column":132}},"57":{"start":{"line":185,"column":0},"end":{"line":193,"column":1}},"58":{"start":{"line":186,"column":4},"end":{"line":188,"column":5}},"59":{"start":{"line":187,"column":8},"end":{"line":187,"column":84}},"60":{"start":{"line":189,"column":4},"end":{"line":191,"column":5}},"61":{"start":{"line":190,"column":8},"end":{"line":190,"column":116}},"62":{"start":{"line":192,"column":4},"end":{"line":192,"column":109}},"63":{"start":{"line":210,"column":0},"end":{"line":602,"column":2}},"64":{"start":{"line":227,"column":8},"end":{"line":227,"column":29}},"65":{"start":{"line":228,"column":8},"end":{"line":228,"column":42}},"66":{"start":{"line":229,"column":8},"end":{"line":229,"column":57}},"67":{"start":{"line":244,"column":8},"end":{"line":244,"column":67}},"68":{"start":{"line":245,"column":8},"end":{"line":252,"column":24}},"69":{"start":{"line":254,"column":8},"end":{"line":256,"column":9}},"70":{"start":{"line":255,"column":12},"end":{"line":255,"column":25}},"71":{"start":{"line":257,"column":8},"end":{"line":257,"column":20}},"72":{"start":{"line":270,"column":8},"end":{"line":278,"column":24}},"73":{"start":{"line":291,"column":8},"end":{"line":299,"column":24}},"74":{"start":{"line":312,"column":8},"end":{"line":320,"column":24}},"75":{"start":{"line":333,"column":8},"end":{"line":341,"column":24}},"76":{"start":{"line":355,"column":8},"end":{"line":363,"column":24}},"77":{"start":{"line":377,"column":8},"end":{"line":385,"column":24}},"78":{"start":{"line":398,"column":8},"end":{"line":398,"column":74}},"79":{"start":{"line":411,"column":8},"end":{"line":411,"column":73}},"80":{"start":{"line":428,"column":8},"end":{"line":436,"column":25}},"81":{"start":{"line":449,"column":8},"end":{"line":457,"column":35}},"82":{"start":{"line":470,"column":8},"end":{"line":478,"column":35}},"83":{"start":{"line":491,"column":8},"end":{"line":499,"column":25}},"84":{"start":{"line":513,"column":8},"end":{"line":521,"column":25}},"85":{"start":{"line":535,"column":8},"end":{"line":543,"column":35}},"86":{"start":{"line":563,"column":8},"end":{"line":571,"column":25}},"87":{"start":{"line":592,"column":8},"end":{"line":600,"column":25}},"88":{"start":{"line":604,"column":0},"end":{"line":604,"column":47}}},"branchMap":{"1":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":11},"end":{"line":62,"column":37}},{"start":{"line":62,"column":41},"end":{"line":62,"column":71}}]},"2":{"line":63,"type":"cond-expr","locations":[{"start":{"line":63,"column":55},"end":{"line":63,"column":86}},{"start":{"line":63,"column":89},"end":{"line":63,"column":112}}]},"3":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":15},"end":{"line":64,"column":41}},{"start":{"line":64,"column":45},"end":{"line":64,"column":94}}]},"4":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":51},"end":{"line":70,"column":78}},{"start":{"line":70,"column":81},"end":{"line":70,"column":104}}]},"5":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":15},"end":{"line":71,"column":45}},{"start":{"line":71,"column":49},"end":{"line":71,"column":102}}]},"6":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"7":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":11},"end":{"line":104,"column":11}},{"start":{"line":104,"column":11},"end":{"line":104,"column":11}}]},"8":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":11},"end":{"line":106,"column":11}},{"start":{"line":106,"column":11},"end":{"line":106,"column":11}}]},"9":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":17},"end":{"line":109,"column":28}},{"start":{"line":109,"column":32},"end":{"line":109,"column":36}}]},"10":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":11},"end":{"line":112,"column":18}},{"start":{"line":112,"column":22},"end":{"line":112,"column":50}}]},"11":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":4},"end":{"line":139,"column":4}},{"start":{"line":139,"column":4},"end":{"line":139,"column":4}}]},"12":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":11},"end":{"line":142,"column":11}},{"start":{"line":142,"column":11},"end":{"line":142,"column":11}}]},"13":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":11},"end":{"line":144,"column":11}},{"start":{"line":144,"column":11},"end":{"line":144,"column":11}}]},"14":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":17},"end":{"line":148,"column":28}},{"start":{"line":148,"column":32},"end":{"line":148,"column":36}}]},"15":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":11},"end":{"line":151,"column":18}},{"start":{"line":151,"column":22},"end":{"line":151,"column":50}}]},"16":{"line":153,"type":"cond-expr","locations":[{"start":{"line":153,"column":120},"end":{"line":153,"column":125}},{"start":{"line":153,"column":128},"end":{"line":153,"column":130}}]},"17":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":4},"end":{"line":186,"column":4}},{"start":{"line":186,"column":4},"end":{"line":186,"column":4}}]},"18":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":8},"end":{"line":186,"column":42}},{"start":{"line":186,"column":46},"end":{"line":186,"column":79}}]},"19":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":4},"end":{"line":189,"column":4}},{"start":{"line":189,"column":4},"end":{"line":189,"column":4}}]},"20":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":8},"end":{"line":189,"column":39}},{"start":{"line":189,"column":43},"end":{"line":189,"column":77}}]},"21":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":32},"end":{"line":244,"column":39}},{"start":{"line":244,"column":43},"end":{"line":244,"column":66}}]},"22":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":8},"end":{"line":254,"column":8}},{"start":{"line":254,"column":8},"end":{"line":254,"column":8}}]},"23":{"line":254,"type":"binary-expr","locations":[{"start":{"line":254,"column":12},"end":{"line":254,"column":17}},{"start":{"line":254,"column":21},"end":{"line":254,"column":46}}]}},"code":["/**"," * @fileoverview Object to handle access and retrieval of tokens."," * @author Brandon Mills"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const assert = require(\"assert\");","const cursors = require(\"./cursors\");","const ForwardTokenCursor = require(\"./forward-token-cursor\");","const PaddedTokenCursor = require(\"./padded-token-cursor\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const PUBLIC_METHODS = Object.freeze([","    \"getTokenByRangeStart\",","","    \"getFirstToken\",","    \"getLastToken\",","    \"getTokenBefore\",","    \"getTokenAfter\",","    \"getFirstTokenBetween\",","    \"getLastTokenBetween\",","","    \"getFirstTokens\",","    \"getLastTokens\",","    \"getTokensBefore\",","    \"getTokensAfter\",","    \"getFirstTokensBetween\",","    \"getLastTokensBetween\",","","    \"getTokens\",","    \"getTokensBetween\",","","    \"getTokenOrCommentBefore\",","    \"getTokenOrCommentAfter\"","]);","","/**"," * Creates the map from locations to indices in `tokens`."," *"," * The first/last location of tokens is mapped to the index of the token."," * The first/last location of comments is mapped to the index of the next token of each comment."," *"," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @returns {Object} The map from locations to indices in `tokens`."," * @private"," */","function createIndexMap(tokens, comments) {","    const map = Object.create(null);","    let tokenIndex = 0;","    let commentIndex = 0;","    let nextStart = 0;","    let range = null;","","    while (tokenIndex < tokens.length || commentIndex < comments.length) {","        nextStart = (commentIndex < comments.length) ? comments[commentIndex].range[0] : Number.MAX_SAFE_INTEGER;","        while (tokenIndex < tokens.length && (range = tokens[tokenIndex].range)[0] < nextStart) {","            map[range[0]] = tokenIndex;","            map[range[1] - 1] = tokenIndex;","            tokenIndex += 1;","        }","","        nextStart = (tokenIndex < tokens.length) ? tokens[tokenIndex].range[0] : Number.MAX_SAFE_INTEGER;","        while (commentIndex < comments.length && (range = comments[commentIndex].range)[0] < nextStart) {","            map[range[0]] = tokenIndex;","            map[range[1] - 1] = tokenIndex;","            commentIndex += 1;","        }","    }","","    return map;","}","","/**"," * Creates the cursor iterates tokens with options."," *"," * @param {CursorFactory} factory - The cursor factory to initialize cursor."," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @param {Object} indexMap - The map from locations to indices in `tokens`."," * @param {number} startLoc - The start location of the iteration range."," * @param {number} endLoc - The end location of the iteration range."," * @param {number|Function|Object} [opts=0] - The option object. If this is a number then it's `opts.skip`. If this is a function then it's `opts.filter`."," * @param {boolean} [opts.includeComments=false] - The flag to iterate comments as well."," * @param {Function|null} [opts.filter=null] - The predicate function to choose tokens."," * @param {number} [opts.skip=0] - The count of tokens the cursor skips."," * @returns {Cursor} The created cursor."," * @private"," */","function createCursorWithSkip(factory, tokens, comments, indexMap, startLoc, endLoc, opts) {","    let includeComments = false;","    let skip = 0;","    let filter = null;","","    if (typeof opts === \"number\") {","        skip = opts | 0;","    } else if (typeof opts === \"function\") {","        filter = opts;","    } else if (opts) {","        includeComments = !!opts.includeComments;","        skip = opts.skip | 0;","        filter = opts.filter || null;","    }","    assert(skip >= 0, \"options.skip should be zero or a positive integer.\");","    assert(!filter || typeof filter === \"function\", \"options.filter should be a function.\");","","    return factory.createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, skip, -1);","}","","/**"," * Creates the cursor iterates tokens with options."," *"," * @param {CursorFactory} factory - The cursor factory to initialize cursor."," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @param {Object} indexMap - The map from locations to indices in `tokens`."," * @param {number} startLoc - The start location of the iteration range."," * @param {number} endLoc - The end location of the iteration range."," * @param {number|Function|Object} [opts=0] - The option object. If this is a number then it's `opts.count`. If this is a function then it's `opts.filter`."," * @param {boolean} [opts.includeComments] - The flag to iterate comments as well."," * @param {Function|null} [opts.filter=null] - The predicate function to choose tokens."," * @param {number} [opts.count=0] - The maximum count of tokens the cursor iterates. Zero is no iteration for backward compatibility."," * @returns {Cursor} The created cursor."," * @private"," */","function createCursorWithCount(factory, tokens, comments, indexMap, startLoc, endLoc, opts) {","    let includeComments = false;","    let count = 0;","    let countExists = false;","    let filter = null;","","    if (typeof opts === \"number\") {","        count = opts | 0;","        countExists = true;","    } else if (typeof opts === \"function\") {","        filter = opts;","    } else if (opts) {","        includeComments = !!opts.includeComments;","        count = opts.count | 0;","        countExists = typeof opts.count === \"number\";","        filter = opts.filter || null;","    }","    assert(count >= 0, \"options.count should be zero or a positive integer.\");","    assert(!filter || typeof filter === \"function\", \"options.filter should be a function.\");","","    return factory.createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, 0, countExists ? count : -1);","}","","/**"," * Creates the cursor iterates tokens with options."," * This is overload function of the below."," *"," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @param {Object} indexMap - The map from locations to indices in `tokens`."," * @param {number} startLoc - The start location of the iteration range."," * @param {number} endLoc - The end location of the iteration range."," * @param {Function|Object} opts - The option object. If this is a function then it's `opts.filter`."," * @param {boolean} [opts.includeComments] - The flag to iterate comments as well."," * @param {Function|null} [opts.filter=null] - The predicate function to choose tokens."," * @param {number} [opts.count=0] - The maximum count of tokens the cursor iterates. Zero is no iteration for backward compatibility."," * @returns {Cursor} The created cursor."," * @private"," */","/**"," * Creates the cursor iterates tokens with options."," *"," * @param {Token[]} tokens - The array of tokens."," * @param {Comment[]} comments - The array of comments."," * @param {Object} indexMap - The map from locations to indices in `tokens`."," * @param {number} startLoc - The start location of the iteration range."," * @param {number} endLoc - The end location of the iteration range."," * @param {number} [beforeCount=0] - The number of tokens before the node to retrieve."," * @param {boolean} [afterCount=0] - The number of tokens after the node to retrieve."," * @returns {Cursor} The created cursor."," * @private"," */","function createCursorWithPadding(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {","    if (typeof beforeCount === \"undefined\" && typeof afterCount === \"undefined\") {","        return new ForwardTokenCursor(tokens, comments, indexMap, startLoc, endLoc);","    }","    if (typeof beforeCount === \"number\" || typeof beforeCount === \"undefined\") {","        return new PaddedTokenCursor(tokens, comments, indexMap, startLoc, endLoc, beforeCount | 0, afterCount | 0);","    }","    return createCursorWithCount(cursors.forward, tokens, comments, indexMap, startLoc, endLoc, beforeCount);","}","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The token store."," *"," * This class provides methods to get tokens by locations as fast as possible."," * The methods are a part of public API, so we should be careful if it changes this class."," *"," * People can get tokens in O(1) by the hash map which is mapping from the location of tokens/comments to tokens."," * Also people can get a mix of tokens and comments in O(log k), the k is the number of comments."," * Assuming that comments to be much fewer than tokens, this does not make hash map from token's locations to comments to reduce memory cost."," * This uses binary-searching instead for comments."," */","module.exports = class TokenStore {","","    /**","     * Initializes this token store.","     *","     * ※ `comments` needs to be cloned for backward compatibility.","     * After this initialization, ESLint removes a shebang's comment from `comments`.","     * However, so far we had been concatenating 'tokens' and 'comments' before,","     * so the shebang's comment had remained in the concatenated array.","     * As a result, both the result of `getTokenOrCommentAfter` and `getTokenOrCommentBefore`","     * methods had included the shebang's comment.","     * And some rules depends on this behavior.","     *","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     */","    constructor(tokens, comments) {","        this.tokens = tokens;","        this.comments = comments.slice(0);","        this.indexMap = createIndexMap(tokens, comments);","    }","","    //--------------------------------------------------------------------------","    // Gets single token.","    //--------------------------------------------------------------------------","","    /**","     * Gets the token starting at the specified index.","     * @param {number} offset - Index of the start of the token's range.","     * @param {Object} [options=0] - The option object.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @returns {Token|null} The token starting at index, or null if no such token.","     */","    getTokenByRangeStart(offset, options) {","        const includeComments = options && options.includeComments;","        const token = cursors.forward.createBaseCursor(","            this.tokens,","            this.comments,","            this.indexMap,","            offset,","            -1,","            includeComments","        ).getOneToken();","","        if (token && token.range[0] === offset) {","            return token;","        }","        return null;","    }","","    /**","     * Gets the first token of the given node.","     * @param {ASTNode} node - The AST node.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getFirstToken(node, options) {","        return createCursorWithSkip(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            options","        ).getOneToken();","    }","","    /**","     * Gets the last token of the given node.","     * @param {ASTNode} node - The AST node.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getLastToken(node, options) {","        return createCursorWithSkip(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            options","        ).getOneToken();","    }","","    /**","     * Gets the token that precedes a given node or token.","     * @param {ASTNode|Token|Comment} node - The AST node or token.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getTokenBefore(node, options) {","        return createCursorWithSkip(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            -1,","            node.range[0],","            options","        ).getOneToken();","    }","","    /**","     * Gets the token that follows a given node or token.","     * @param {ASTNode|Token|Comment} node - The AST node or token.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getTokenAfter(node, options) {","        return createCursorWithSkip(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[1],","            -1,","            options","        ).getOneToken();","    }","","    /**","     * Gets the first token between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left - Node before the desired token range.","     * @param {ASTNode|Token|Comment} right - Node after the desired token range.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} An object representing the token.","     */","    getFirstTokenBetween(left, right, options) {","        return createCursorWithSkip(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            options","        ).getOneToken();","    }","","    /**","     * Gets the last token between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left Node before the desired token range.","     * @param {ASTNode|Token|Comment} right Node after the desired token range.","     * @param {number|Function|Object} [options=0] The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.skip=0] - The count of tokens the cursor skips.","     * @returns {Token|null} Tokens between left and right.","     */","    getLastTokenBetween(left, right, options) {","        return createCursorWithSkip(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            options","        ).getOneToken();","    }","","    /**","     * Gets the token that precedes a given node or token in the token stream.","     * This is defined for backward compatibility. Use `includeComments` option instead.","     * TODO: We have a plan to remove this in a future major version.","     * @param {ASTNode|Token|Comment} node The AST node or token.","     * @param {number} [skip=0] A number of tokens to skip.","     * @returns {Token|null} An object representing the token.","     * @deprecated","     */","    getTokenOrCommentBefore(node, skip) {","        return this.getTokenBefore(node, { includeComments: true, skip });","    }","","    /**","     * Gets the token that follows a given node or token in the token stream.","     * This is defined for backward compatibility. Use `includeComments` option instead.","     * TODO: We have a plan to remove this in a future major version.","     * @param {ASTNode|Token|Comment} node The AST node or token.","     * @param {number} [skip=0] A number of tokens to skip.","     * @returns {Token|null} An object representing the token.","     * @deprecated","     */","    getTokenOrCommentAfter(node, skip) {","        return this.getTokenAfter(node, { includeComments: true, skip });","    }","","    //--------------------------------------------------------------------------","    // Gets multiple tokens.","    //--------------------------------------------------------------------------","","    /**","     * Gets the first `count` tokens of the given node.","     * @param {ASTNode} node - The AST node.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens.","     */","    getFirstTokens(node, options) {","        return createCursorWithCount(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            options","        ).getAllTokens();","    }","","    /**","     * Gets the last `count` tokens of the given node.","     * @param {ASTNode} node - The AST node.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens.","     */","    getLastTokens(node, options) {","        return createCursorWithCount(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            options","        ).getAllTokens().reverse();","    }","","    /**","     * Gets the `count` tokens that precedes a given node or token.","     * @param {ASTNode|Token|Comment} node - The AST node or token.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens.","     */","    getTokensBefore(node, options) {","        return createCursorWithCount(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            -1,","            node.range[0],","            options","        ).getAllTokens().reverse();","    }","","    /**","     * Gets the `count` tokens that follows a given node or token.","     * @param {ASTNode|Token|Comment} node - The AST node or token.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens.","     */","    getTokensAfter(node, options) {","        return createCursorWithCount(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[1],","            -1,","            options","        ).getAllTokens();","    }","","    /**","     * Gets the first `count` tokens between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left - Node before the desired token range.","     * @param {ASTNode|Token|Comment} right - Node after the desired token range.","     * @param {number|Function|Object} [options=0] - The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens between left and right.","     */","    getFirstTokensBetween(left, right, options) {","        return createCursorWithCount(","            cursors.forward,","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            options","        ).getAllTokens();","    }","","    /**","     * Gets the last `count` tokens between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left Node before the desired token range.","     * @param {ASTNode|Token|Comment} right Node after the desired token range.","     * @param {number|Function|Object} [options=0] The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens between left and right.","     */","    getLastTokensBetween(left, right, options) {","        return createCursorWithCount(","            cursors.backward,","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            options","        ).getAllTokens().reverse();","    }","","    /**","     * Gets all tokens that are related to the given node.","     * @param {ASTNode} node - The AST node.","     * @param {Function|Object} options The option object. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Array of objects representing tokens.","     */","    /**","     * Gets all tokens that are related to the given node.","     * @param {ASTNode} node - The AST node.","     * @param {int} [beforeCount=0] - The number of tokens before the node to retrieve.","     * @param {int} [afterCount=0] - The number of tokens after the node to retrieve.","     * @returns {Token[]} Array of objects representing tokens.","     */","    getTokens(node, beforeCount, afterCount) {","        return createCursorWithPadding(","            this.tokens,","            this.comments,","            this.indexMap,","            node.range[0],","            node.range[1],","            beforeCount,","            afterCount","        ).getAllTokens();","    }","","    /**","     * Gets all of the tokens between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left Node before the desired token range.","     * @param {ASTNode|Token|Comment} right Node after the desired token range.","     * @param {Function|Object} options The option object. If this is a function then it's `options.filter`.","     * @param {boolean} [options.includeComments=false] - The flag to iterate comments as well.","     * @param {Function|null} [options.filter=null] - The predicate function to choose tokens.","     * @param {number} [options.count=0] - The maximum count of tokens the cursor iterates.","     * @returns {Token[]} Tokens between left and right.","     */","    /**","     * Gets all of the tokens between two non-overlapping nodes.","     * @param {ASTNode|Token|Comment} left Node before the desired token range.","     * @param {ASTNode|Token|Comment} right Node after the desired token range.","     * @param {int} [padding=0] Number of extra tokens on either side of center.","     * @returns {Token[]} Tokens between left and right.","     */","    getTokensBetween(left, right, padding) {","        return createCursorWithPadding(","            this.tokens,","            this.comments,","            this.indexMap,","            left.range[1],","            right.range[0],","            padding,","            padding","        ).getAllTokens();","    }","};","","module.exports.PUBLIC_METHODS = PUBLIC_METHODS;",""],"l":{"11":1,"12":1,"13":1,"14":1,"20":1,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"70":0,"71":0,"72":0,"73":0,"74":0,"78":0,"97":1,"98":0,"99":0,"100":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"111":0,"112":0,"114":0,"133":1,"134":0,"135":0,"136":0,"137":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"150":0,"151":0,"153":0,"185":1,"186":0,"187":0,"189":0,"190":0,"192":0,"210":1,"227":0,"228":0,"229":0,"244":0,"245":0,"254":0,"255":0,"257":0,"270":0,"291":0,"312":0,"333":0,"355":0,"377":0,"398":0,"411":0,"428":0,"449":0,"470":0,"491":0,"513":0,"535":0,"563":0,"592":0,"604":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/cursors.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/cursors.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":2,"9":2,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":2,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":34,"loc":{"start":{"line":34,"column":15},"end":{"line":34,"column":49}}},"2":{"name":"(anonymous_2)","line":50,"loc":{"start":{"line":50,"column":20},"end":{"line":50,"column":84}}},"3":{"name":"(anonymous_3)","line":70,"loc":{"start":{"line":70,"column":16},"end":{"line":70,"column":101}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":78}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":63}},"3":{"start":{"line":13,"column":0},"end":{"line":13,"column":48}},"4":{"start":{"line":14,"column":0},"end":{"line":14,"column":76}},"5":{"start":{"line":15,"column":0},"end":{"line":15,"column":61}},"6":{"start":{"line":16,"column":0},"end":{"line":16,"column":46}},"7":{"start":{"line":17,"column":0},"end":{"line":17,"column":44}},"8":{"start":{"line":35,"column":8},"end":{"line":35,"column":39}},"9":{"start":{"line":36,"column":8},"end":{"line":36,"column":53}},"10":{"start":{"line":51,"column":8},"end":{"line":51,"column":84}},"11":{"start":{"line":53,"column":8},"end":{"line":53,"column":72}},"12":{"start":{"line":71,"column":8},"end":{"line":71,"column":106}},"13":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"14":{"start":{"line":74,"column":12},"end":{"line":74,"column":54}},"15":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"16":{"start":{"line":77,"column":12},"end":{"line":77,"column":50}},"17":{"start":{"line":79,"column":8},"end":{"line":81,"column":9}},"18":{"start":{"line":80,"column":12},"end":{"line":80,"column":52}},"19":{"start":{"line":83,"column":8},"end":{"line":83,"column":22}},"20":{"start":{"line":91,"column":0},"end":{"line":91,"column":83}},"21":{"start":{"line":92,"column":0},"end":{"line":92,"column":86}}},"branchMap":{"1":{"line":51,"type":"cond-expr","locations":[{"start":{"line":51,"column":41},"end":{"line":51,"column":64}},{"start":{"line":51,"column":67},"end":{"line":51,"column":83}}]},"2":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":8}},{"start":{"line":73,"column":8},"end":{"line":73,"column":8}}]},"3":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":76,"column":8}},{"start":{"line":76,"column":8},"end":{"line":76,"column":8}}]},"4":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]}},"code":["/**"," * @fileoverview Define 2 token factories; forward and backward."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const BackwardTokenCommentCursor = require(\"./backward-token-comment-cursor\");","const BackwardTokenCursor = require(\"./backward-token-cursor\");","const FilterCursor = require(\"./filter-cursor\");","const ForwardTokenCommentCursor = require(\"./forward-token-comment-cursor\");","const ForwardTokenCursor = require(\"./forward-token-cursor\");","const LimitCursor = require(\"./limit-cursor\");","const SkipCursor = require(\"./skip-cursor\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * The cursor factory."," * @private"," */","class CursorFactory {","","    /**","     * Initializes this cursor.","     * @param {Function} TokenCursor - The class of the cursor which iterates tokens only.","     * @param {Function} TokenCommentCursor - The class of the cursor which iterates the mix of tokens and comments.","     */","    constructor(TokenCursor, TokenCommentCursor) {","        this.TokenCursor = TokenCursor;","        this.TokenCommentCursor = TokenCommentCursor;","    }","","    /**","     * Creates a base cursor instance that can be decorated by createCursor.","     *","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     * @param {boolean} includeComments - The flag to iterate comments as well.","     * @returns {Cursor} The created base cursor.","     */","    createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments) {","        const Cursor = includeComments ? this.TokenCommentCursor : this.TokenCursor;","","        return new Cursor(tokens, comments, indexMap, startLoc, endLoc);","    }","","    /**","     * Creates a cursor that iterates tokens with normalized options.","     *","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     * @param {boolean} includeComments - The flag to iterate comments as well.","     * @param {Function|null} filter - The predicate function to choose tokens.","     * @param {number} skip - The count of tokens the cursor skips.","     * @param {number} count - The maximum count of tokens the cursor iterates. Zero is no iteration for backward compatibility.","     * @returns {Cursor} The created cursor.","     */","    createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, skip, count) {","        let cursor = this.createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments);","","        if (filter) {","            cursor = new FilterCursor(cursor, filter);","        }","        if (skip >= 1) {","            cursor = new SkipCursor(cursor, skip);","        }","        if (count >= 0) {","            cursor = new LimitCursor(cursor, count);","        }","","        return cursor;","    }","}","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","exports.forward = new CursorFactory(ForwardTokenCursor, ForwardTokenCommentCursor);","exports.backward = new CursorFactory(BackwardTokenCursor, BackwardTokenCommentCursor);",""],"l":{"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"35":2,"36":2,"51":0,"53":0,"71":0,"73":0,"74":0,"76":0,"77":0,"79":0,"80":0,"83":0,"91":1,"92":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/backward-token-comment-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/backward-token-comment-cursor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":62}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":12},"end":{"line":41,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":57,"column":2}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":33}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":71}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":63}},"9":{"start":{"line":37,"column":8},"end":{"line":37,"column":31}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":83}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":91}},"12":{"start":{"line":45,"column":8},"end":{"line":53,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":33}},"14":{"start":{"line":47,"column":12},"end":{"line":47,"column":33}},"15":{"start":{"line":48,"column":15},"end":{"line":53,"column":9}},"16":{"start":{"line":49,"column":12},"end":{"line":49,"column":35}},"17":{"start":{"line":50,"column":12},"end":{"line":50,"column":35}},"18":{"start":{"line":52,"column":12},"end":{"line":52,"column":32}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":101}}},"branchMap":{"1":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":47},"end":{"line":42,"column":75}},{"start":{"line":42,"column":78},"end":{"line":42,"column":82}}]},"2":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":51},"end":{"line":43,"column":83}},{"start":{"line":43,"column":86},"end":{"line":43,"column":90}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"4":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":17}},{"start":{"line":45,"column":22},"end":{"line":45,"column":30}},{"start":{"line":45,"column":34},"end":{"line":45,"column":67}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":15},"end":{"line":48,"column":15}},{"start":{"line":48,"column":15},"end":{"line":48,"column":15}}]},"6":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":15},"end":{"line":55,"column":36}},{"start":{"line":55,"column":41},"end":{"line":55,"column":59}},{"start":{"line":55,"column":63},"end":{"line":55,"column":99}}]}},"code":["/**"," * @fileoverview Define the cursor which iterates tokens and comments in reverse."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","const utils = require(\"./utils\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens and comments in reverse."," */","module.exports = class BackwardTokenCommentCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc) {","        super();","        this.tokens = tokens;","        this.comments = comments;","        this.tokenIndex = utils.getLastIndex(tokens, indexMap, endLoc);","        this.commentIndex = utils.search(comments, endLoc) - 1;","        this.border = startLoc;","    }","","    /** @inheritdoc */","    moveNext() {","        const token = (this.tokenIndex >= 0) ? this.tokens[this.tokenIndex] : null;","        const comment = (this.commentIndex >= 0) ? this.comments[this.commentIndex] : null;","","        if (token && (!comment || token.range[1] > comment.range[1])) {","            this.current = token;","            this.tokenIndex -= 1;","        } else if (comment) {","            this.current = comment;","            this.commentIndex -= 1;","        } else {","            this.current = null;","        }","","        return Boolean(this.current) && (this.border === -1 || this.current.range[0] >= this.border);","    }","};",""],"l":{"11":1,"12":1,"21":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"42":0,"43":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"52":0,"55":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/cursor.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":39,"loc":{"start":{"line":39,"column":15},"end":{"line":39,"column":18}}},"2":{"name":"(anonymous_2)","line":48,"loc":{"start":{"line":48,"column":15},"end":{"line":48,"column":18}}},"3":{"name":"(anonymous_3)","line":57,"loc":{"start":{"line":57,"column":16},"end":{"line":57,"column":19}}},"4":{"name":"(anonymous_4)","line":73,"loc":{"start":{"line":73,"column":12},"end":{"line":73,"column":15}}}},"statementMap":{"1":{"start":{"line":34,"column":0},"end":{"line":76,"column":2}},"2":{"start":{"line":40,"column":8},"end":{"line":40,"column":28}},"3":{"start":{"line":49,"column":8},"end":{"line":49,"column":53}},"4":{"start":{"line":58,"column":8},"end":{"line":58,"column":26}},"5":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"6":{"start":{"line":61,"column":12},"end":{"line":61,"column":38}},"7":{"start":{"line":64,"column":8},"end":{"line":64,"column":22}},"8":{"start":{"line":74,"column":8},"end":{"line":74,"column":44}}},"branchMap":{"1":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":33},"end":{"line":49,"column":45}},{"start":{"line":49,"column":48},"end":{"line":49,"column":52}}]}},"code":["/**"," * @fileoverview Define the abstract class about cursors which iterate tokens."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The abstract class about cursors which iterate tokens."," *"," * This class has 2 abstract methods."," *"," * - `current: Token | Comment | null` ... The current token."," * - `moveNext(): boolean` ... Moves this cursor to the next token. If the next token didn't exist, it returns `false`."," *"," * This is similar to ES2015 Iterators."," * However, Iterators were slow (at 2017-01), so I created this class as similar to C# IEnumerable."," *"," * There are the following known sub classes."," *"," * - ForwardTokenCursor .......... The cursor which iterates tokens only."," * - BackwardTokenCursor ......... The cursor which iterates tokens only in reverse."," * - ForwardTokenCommentCursor ... The cursor which iterates tokens and comments."," * - BackwardTokenCommentCursor .. The cursor which iterates tokens and comments in reverse."," * - DecorativeCursor"," *     - FilterCursor ............ The cursor which ignores the specified tokens."," *     - SkipCursor .............. The cursor which ignores the first few tokens."," *     - LimitCursor ............. The cursor which limits the count of tokens."," *"," */","module.exports = class Cursor {","","    /**","     * Initializes this cursor.","     */","    constructor() {","        this.current = null;","    }","","    /**","     * Gets the first token.","     * This consumes this cursor.","     * @returns {Token|Comment} The first token or null.","     */","    getOneToken() {","        return this.moveNext() ? this.current : null;","    }","","    /**","     * Gets the first tokens.","     * This consumes this cursor.","     * @returns {(Token|Comment)[]} All tokens.","     */","    getAllTokens() {","        const tokens = [];","","        while (this.moveNext()) {","            tokens.push(this.current);","        }","","        return tokens;","    }","","    /**","     * Moves this cursor to the next token.","     * @returns {boolean} `true` if the next token exists.","     * @abstract","     */","    /* istanbul ignore next */","    moveNext() { // eslint-disable-line class-methods-use-this","        throw new Error(\"Not implemented.\");","    }","};",""],"l":{"34":1,"40":0,"49":0,"58":0,"60":0,"61":0,"64":0,"74":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/utils.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/utils.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"getStartLocation","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":33}}},"2":{"name":"search","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":51}}},"3":{"name":"getFirstIndex","line":57,"loc":{"start":{"line":57,"column":24},"end":{"line":57,"column":75}}},"4":{"name":"getLastIndex","line":84,"loc":{"start":{"line":84,"column":23},"end":{"line":84,"column":71}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"2":{"start":{"line":24,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":26}},"4":{"start":{"line":40,"column":0},"end":{"line":46,"column":2}},"5":{"start":{"line":41,"column":4},"end":{"line":45,"column":6}},"6":{"start":{"line":57,"column":0},"end":{"line":73,"column":2}},"7":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"8":{"start":{"line":59,"column":8},"end":{"line":59,"column":34}},"9":{"start":{"line":61,"column":4},"end":{"line":71,"column":5}},"10":{"start":{"line":62,"column":8},"end":{"line":62,"column":45}},"11":{"start":{"line":63,"column":8},"end":{"line":63,"column":83}},"12":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"13":{"start":{"line":68,"column":12},"end":{"line":68,"column":25}},"14":{"start":{"line":70,"column":8},"end":{"line":70,"column":25}},"15":{"start":{"line":72,"column":4},"end":{"line":72,"column":13}},"16":{"start":{"line":84,"column":0},"end":{"line":100,"column":2}},"17":{"start":{"line":85,"column":4},"end":{"line":87,"column":5}},"18":{"start":{"line":86,"column":8},"end":{"line":86,"column":36}},"19":{"start":{"line":88,"column":4},"end":{"line":98,"column":5}},"20":{"start":{"line":89,"column":8},"end":{"line":89,"column":43}},"21":{"start":{"line":90,"column":8},"end":{"line":90,"column":83}},"22":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"23":{"start":{"line":95,"column":12},"end":{"line":95,"column":29}},"24":{"start":{"line":97,"column":8},"end":{"line":97,"column":21}},"25":{"start":{"line":99,"column":4},"end":{"line":99,"column":29}}},"branchMap":{"1":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"2":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"3":{"line":63,"type":"cond-expr","locations":[{"start":{"line":63,"column":62},"end":{"line":63,"column":75}},{"start":{"line":63,"column":78},"end":{"line":63,"column":82}}]},"4":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":23},"end":{"line":63,"column":33}},{"start":{"line":63,"column":37},"end":{"line":63,"column":58}}]},"5":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"6":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":12},"end":{"line":67,"column":17}},{"start":{"line":67,"column":21},"end":{"line":67,"column":47}}]},"7":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":85,"column":4}},{"start":{"line":85,"column":4},"end":{"line":85,"column":4}}]},"8":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"9":{"line":90,"type":"cond-expr","locations":[{"start":{"line":90,"column":62},"end":{"line":90,"column":75}},{"start":{"line":90,"column":78},"end":{"line":90,"column":82}}]},"10":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":23},"end":{"line":90,"column":33}},{"start":{"line":90,"column":37},"end":{"line":90,"column":58}}]},"11":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8}},{"start":{"line":94,"column":8},"end":{"line":94,"column":8}}]},"12":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":17}},{"start":{"line":94,"column":21},"end":{"line":94,"column":44}}]}},"code":["/**"," * @fileoverview Define utilify functions for token store."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Gets `token.range[0]` from the given token."," *"," * @param {Node|Token|Comment} token - The token to get."," * @returns {number} The start location."," * @private"," */","function getStartLocation(token) {","    return token.range[0];","}","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * Binary-searches the index of the first token which is after the given location."," * If it was not found, this returns `tokens.length`."," *"," * @param {(Token|Comment)[]} tokens - It searches the token in this list."," * @param {number} location - The location to search."," * @returns {number} The found index or `tokens.length`."," */","exports.search = function search(tokens, location) {","    return lodash.sortedIndexBy(","        tokens,","        { range: [location] },","        getStartLocation","    );","};","","/**"," * Gets the index of the `startLoc` in `tokens`."," * `startLoc` can be the value of `node.range[1]`, so this checks about `startLoc - 1` as well."," *"," * @param {(Token|Comment)[]} tokens - The tokens to find an index."," * @param {Object} indexMap - The map from locations to indices."," * @param {number} startLoc - The location to get an index."," * @returns {number} The index."," */","exports.getFirstIndex = function getFirstIndex(tokens, indexMap, startLoc) {","    if (startLoc in indexMap) {","        return indexMap[startLoc];","    }","    if ((startLoc - 1) in indexMap) {","        const index = indexMap[startLoc - 1];","        const token = (index >= 0 && index < tokens.length) ? tokens[index] : null;","","        // For the map of \"comment's location -> token's index\", it points the next token of a comment.","        // In that case, +1 is unnecessary.","        if (token && token.range[0] >= startLoc) {","            return index;","        }","        return index + 1;","    }","    return 0;","};","","/**"," * Gets the index of the `endLoc` in `tokens`."," * The information of end locations are recorded at `endLoc - 1` in `indexMap`, so this checks about `endLoc - 1` as well."," *"," * @param {(Token|Comment)[]} tokens - The tokens to find an index."," * @param {Object} indexMap - The map from locations to indices."," * @param {number} endLoc - The location to get an index."," * @returns {number} The index."," */","exports.getLastIndex = function getLastIndex(tokens, indexMap, endLoc) {","    if (endLoc in indexMap) {","        return indexMap[endLoc] - 1;","    }","    if ((endLoc - 1) in indexMap) {","        const index = indexMap[endLoc - 1];","        const token = (index >= 0 && index < tokens.length) ? tokens[index] : null;","","        // For the map of \"comment's location -> token's index\", it points the next token of a comment.","        // In that case, -1 is necessary.","        if (token && token.range[1] > endLoc) {","            return index - 1;","        }","        return index;","    }","    return tokens.length - 1;","};",""],"l":{"11":1,"24":1,"25":0,"40":1,"41":0,"57":1,"58":0,"59":0,"61":0,"62":0,"63":0,"67":0,"68":0,"70":0,"72":0,"84":1,"85":0,"86":0,"88":0,"89":0,"90":0,"94":0,"95":0,"97":0,"99":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/backward-token-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/backward-token-cursor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":62}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":12},"end":{"line":39,"column":15}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":15},"end":{"line":53,"column":18}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":56,"column":2}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":66}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":72}},"8":{"start":{"line":40,"column":8},"end":{"line":44,"column":9}},"9":{"start":{"line":41,"column":12},"end":{"line":41,"column":51}},"10":{"start":{"line":42,"column":12},"end":{"line":42,"column":28}},"11":{"start":{"line":43,"column":12},"end":{"line":43,"column":24}},"12":{"start":{"line":45,"column":8},"end":{"line":45,"column":21}},"13":{"start":{"line":54,"column":8},"end":{"line":54,"column":78}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"2":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":47},"end":{"line":54,"column":70}},{"start":{"line":54,"column":73},"end":{"line":54,"column":77}}]}},"code":["/**"," * @fileoverview Define the cursor which iterates tokens only in reverse."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","const utils = require(\"./utils\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens only in reverse."," */","module.exports = class BackwardTokenCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc) {","        super();","        this.tokens = tokens;","        this.index = utils.getLastIndex(tokens, indexMap, endLoc);","        this.indexEnd = utils.getFirstIndex(tokens, indexMap, startLoc);","    }","","    /** @inheritdoc */","    moveNext() {","        if (this.index >= this.indexEnd) {","            this.current = this.tokens[this.index];","            this.index -= 1;","            return true;","        }","        return false;","    }","","    //","    // Shorthand for performance.","    //","","    /** @inheritdoc */","    getOneToken() {","        return (this.index >= this.indexEnd) ? this.tokens[this.index] : null;","    }","};",""],"l":{"11":1,"12":1,"21":1,"32":0,"33":0,"34":0,"35":0,"40":0,"41":0,"42":0,"43":0,"45":0,"54":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/filter-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/filter-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":35}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":43,"column":2}},"3":{"start":{"line":28,"column":8},"end":{"line":28,"column":22}},"4":{"start":{"line":29,"column":8},"end":{"line":29,"column":35}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":41}},"6":{"start":{"line":36,"column":8},"end":{"line":40,"column":9}},"7":{"start":{"line":37,"column":12},"end":{"line":39,"column":13}},"8":{"start":{"line":38,"column":16},"end":{"line":38,"column":28}},"9":{"start":{"line":41,"column":8},"end":{"line":41,"column":21}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":12}},{"start":{"line":37,"column":12},"end":{"line":37,"column":12}}]}},"code":["/**"," * @fileoverview Define the cursor which ignores specified tokens."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const DecorativeCursor = require(\"./decorative-cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The decorative cursor which ignores specified tokens."," */","module.exports = class FilterCursor extends DecorativeCursor {","","    /**","     * Initializes this cursor.","     * @param {Cursor} cursor - The cursor to be decorated.","     * @param {Function} predicate - The predicate function to decide tokens this cursor iterates.","     */","    constructor(cursor, predicate) {","        super(cursor);","        this.predicate = predicate;","    }","","    /** @inheritdoc */","    moveNext() {","        const predicate = this.predicate;","","        while (super.moveNext()) {","            if (predicate(this.current)) {","                return true;","            }","        }","        return false;","    }","};",""],"l":{"11":1,"20":1,"28":0,"29":0,"34":0,"36":0,"37":0,"38":0,"41":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/decorative-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/decorative-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":15},"end":{"line":26,"column":24}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":12},"end":{"line":32,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":20,"column":0},"end":{"line":39,"column":2}},"3":{"start":{"line":27,"column":8},"end":{"line":27,"column":16}},"4":{"start":{"line":28,"column":8},"end":{"line":28,"column":29}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":44}},"6":{"start":{"line":35,"column":8},"end":{"line":35,"column":43}},"7":{"start":{"line":37,"column":8},"end":{"line":37,"column":20}}},"branchMap":{},"code":["/**"," * @fileoverview Define the abstract class about cursors which manipulate another cursor."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The abstract class about cursors which manipulate another cursor."," */","module.exports = class DecorativeCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Cursor} cursor - The cursor to be decorated.","     */","    constructor(cursor) {","        super();","        this.cursor = cursor;","    }","","    /** @inheritdoc */","    moveNext() {","        const retv = this.cursor.moveNext();","","        this.current = this.cursor.current;","","        return retv;","    }","};",""],"l":{"11":1,"20":1,"27":0,"28":0,"33":0,"35":0,"37":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/forward-token-comment-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/forward-token-comment-cursor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":62}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":12},"end":{"line":41,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":57,"column":2}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":33}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":74}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":61}},"9":{"start":{"line":37,"column":8},"end":{"line":37,"column":29}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":99}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":109}},"12":{"start":{"line":45,"column":8},"end":{"line":53,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":33}},"14":{"start":{"line":47,"column":12},"end":{"line":47,"column":33}},"15":{"start":{"line":48,"column":15},"end":{"line":53,"column":9}},"16":{"start":{"line":49,"column":12},"end":{"line":49,"column":35}},"17":{"start":{"line":50,"column":12},"end":{"line":50,"column":35}},"18":{"start":{"line":52,"column":12},"end":{"line":52,"column":32}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":101}}},"branchMap":{"1":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":63},"end":{"line":42,"column":91}},{"start":{"line":42,"column":94},"end":{"line":42,"column":98}}]},"2":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":69},"end":{"line":43,"column":101}},{"start":{"line":43,"column":104},"end":{"line":43,"column":108}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"4":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":17}},{"start":{"line":45,"column":22},"end":{"line":45,"column":30}},{"start":{"line":45,"column":34},"end":{"line":45,"column":67}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":15},"end":{"line":48,"column":15}},{"start":{"line":48,"column":15},"end":{"line":48,"column":15}}]},"6":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":15},"end":{"line":55,"column":36}},{"start":{"line":55,"column":41},"end":{"line":55,"column":59}},{"start":{"line":55,"column":63},"end":{"line":55,"column":99}}]}},"code":["/**"," * @fileoverview Define the cursor which iterates tokens and comments."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","const utils = require(\"./utils\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens and comments."," */","module.exports = class ForwardTokenCommentCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc) {","        super();","        this.tokens = tokens;","        this.comments = comments;","        this.tokenIndex = utils.getFirstIndex(tokens, indexMap, startLoc);","        this.commentIndex = utils.search(comments, startLoc);","        this.border = endLoc;","    }","","    /** @inheritdoc */","    moveNext() {","        const token = (this.tokenIndex < this.tokens.length) ? this.tokens[this.tokenIndex] : null;","        const comment = (this.commentIndex < this.comments.length) ? this.comments[this.commentIndex] : null;","","        if (token && (!comment || token.range[0] < comment.range[0])) {","            this.current = token;","            this.tokenIndex += 1;","        } else if (comment) {","            this.current = comment;","            this.commentIndex += 1;","        } else {","            this.current = null;","        }","","        return Boolean(this.current) && (this.border === -1 || this.current.range[1] <= this.border);","    }","};",""],"l":{"11":1,"12":1,"21":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"42":0,"43":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"52":0,"55":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/forward-token-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/forward-token-cursor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":62}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":12},"end":{"line":39,"column":15}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":15},"end":{"line":53,"column":18}}},"4":{"name":"(anonymous_4)","line":58,"loc":{"start":{"line":58,"column":16},"end":{"line":58,"column":19}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":61,"column":2}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":69}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":69}},"8":{"start":{"line":40,"column":8},"end":{"line":44,"column":9}},"9":{"start":{"line":41,"column":12},"end":{"line":41,"column":51}},"10":{"start":{"line":42,"column":12},"end":{"line":42,"column":28}},"11":{"start":{"line":43,"column":12},"end":{"line":43,"column":24}},"12":{"start":{"line":45,"column":8},"end":{"line":45,"column":21}},"13":{"start":{"line":54,"column":8},"end":{"line":54,"column":78}},"14":{"start":{"line":59,"column":8},"end":{"line":59,"column":64}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"2":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":47},"end":{"line":54,"column":70}},{"start":{"line":54,"column":73},"end":{"line":54,"column":77}}]}},"code":["/**"," * @fileoverview Define the cursor which iterates tokens only."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Cursor = require(\"./cursor\");","const utils = require(\"./utils\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens only."," */","module.exports = class ForwardTokenCursor extends Cursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc) {","        super();","        this.tokens = tokens;","        this.index = utils.getFirstIndex(tokens, indexMap, startLoc);","        this.indexEnd = utils.getLastIndex(tokens, indexMap, endLoc);","    }","","    /** @inheritdoc */","    moveNext() {","        if (this.index <= this.indexEnd) {","            this.current = this.tokens[this.index];","            this.index += 1;","            return true;","        }","        return false;","    }","","    //","    // Shorthand for performance.","    //","","    /** @inheritdoc */","    getOneToken() {","        return (this.index <= this.indexEnd) ? this.tokens[this.index] : null;","    }","","    /** @inheritdoc */","    getAllTokens() {","        return this.tokens.slice(this.index, this.indexEnd + 1);","    }","};",""],"l":{"11":1,"12":1,"21":1,"32":0,"33":0,"34":0,"35":0,"40":0,"41":0,"42":0,"43":0,"45":0,"54":0,"59":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/limit-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/limit-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":31}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":40,"column":2}},"3":{"start":{"line":28,"column":8},"end":{"line":28,"column":22}},"4":{"start":{"line":29,"column":8},"end":{"line":29,"column":27}},"5":{"start":{"line":34,"column":8},"end":{"line":37,"column":9}},"6":{"start":{"line":35,"column":12},"end":{"line":35,"column":28}},"7":{"start":{"line":36,"column":12},"end":{"line":36,"column":36}},"8":{"start":{"line":38,"column":8},"end":{"line":38,"column":21}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":8}},{"start":{"line":34,"column":8},"end":{"line":34,"column":8}}]}},"code":["/**"," * @fileoverview Define the cursor which limits the number of tokens."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const DecorativeCursor = require(\"./decorative-cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The decorative cursor which limits the number of tokens."," */","module.exports = class LimitCursor extends DecorativeCursor {","","    /**","     * Initializes this cursor.","     * @param {Cursor} cursor - The cursor to be decorated.","     * @param {number} count - The count of tokens this cursor iterates.","     */","    constructor(cursor, count) {","        super(cursor);","        this.count = count;","    }","","    /** @inheritdoc */","    moveNext() {","        if (this.count > 0) {","            this.count -= 1;","            return super.moveNext();","        }","        return false;","    }","};",""],"l":{"11":1,"20":1,"28":0,"29":0,"34":0,"35":0,"36":0,"38":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/skip-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/skip-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":31}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":15}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":42,"column":2}},"3":{"start":{"line":28,"column":8},"end":{"line":28,"column":22}},"4":{"start":{"line":29,"column":8},"end":{"line":29,"column":27}},"5":{"start":{"line":34,"column":8},"end":{"line":39,"column":9}},"6":{"start":{"line":35,"column":12},"end":{"line":35,"column":28}},"7":{"start":{"line":36,"column":12},"end":{"line":38,"column":13}},"8":{"start":{"line":37,"column":16},"end":{"line":37,"column":29}},"9":{"start":{"line":40,"column":8},"end":{"line":40,"column":32}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":12}},{"start":{"line":36,"column":12},"end":{"line":36,"column":12}}]}},"code":["/**"," * @fileoverview Define the cursor which ignores the first few tokens."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const DecorativeCursor = require(\"./decorative-cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The decorative cursor which ignores the first few tokens."," */","module.exports = class SkipCursor extends DecorativeCursor {","","    /**","     * Initializes this cursor.","     * @param {Cursor} cursor - The cursor to be decorated.","     * @param {number} count - The count of tokens this cursor skips.","     */","    constructor(cursor, count) {","        super(cursor);","        this.count = count;","    }","","    /** @inheritdoc */","    moveNext() {","        while (this.count > 0) {","            this.count -= 1;","            if (!super.moveNext()) {","                return false;","            }","        }","        return super.moveNext();","    }","};",""],"l":{"11":1,"20":1,"28":0,"29":0,"34":0,"35":0,"36":0,"37":0,"40":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/padded-token-cursor.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/token-store/padded-token-cursor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":33,"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":87}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":61}},"2":{"start":{"line":21,"column":0},"end":{"line":38,"column":2}},"3":{"start":{"line":34,"column":8},"end":{"line":34,"column":60}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":59}},"5":{"start":{"line":36,"column":8},"end":{"line":36,"column":80}}},"branchMap":{},"code":["/**"," * @fileoverview Define the cursor which iterates tokens only, with inflated range."," * @author Toru Nagashima"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const ForwardTokenCursor = require(\"./forward-token-cursor\");","","//------------------------------------------------------------------------------","// Exports","//------------------------------------------------------------------------------","","/**"," * The cursor which iterates tokens only, with inflated range."," * This is for the backward compatibility of padding options."," */","module.exports = class PaddedTokenCursor extends ForwardTokenCursor {","","    /**","     * Initializes this cursor.","     * @param {Token[]} tokens - The array of tokens.","     * @param {Comment[]} comments - The array of comments.","     * @param {Object} indexMap - The map from locations to indices in `tokens`.","     * @param {number} startLoc - The start location of the iteration range.","     * @param {number} endLoc - The end location of the iteration range.","     * @param {number} beforeCount - The number of tokens this cursor iterates before start.","     * @param {number} afterCount - The number of tokens this cursor iterates after end.","     */","    constructor(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {","        super(tokens, comments, indexMap, startLoc, endLoc);","        this.index = Math.max(0, this.index - beforeCount);","        this.indexEnd = Math.min(tokens.length - 1, this.indexEnd + afterCount);","    }","};",""],"l":{"11":1,"21":1,"34":0,"35":0,"36":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/traverser.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/traverser.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":28}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":18},"end":{"line":40,"column":25}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"2":{"start":{"line":17,"column":0},"end":{"line":21,"column":3}},"3":{"start":{"line":30,"column":8},"end":{"line":30,"column":45}},"4":{"start":{"line":31,"column":8},"end":{"line":31,"column":45}},"5":{"start":{"line":41,"column":8},"end":{"line":41,"column":72}},"6":{"start":{"line":41,"column":47},"end":{"line":41,"column":70}},"7":{"start":{"line":45,"column":0},"end":{"line":45,"column":27}}},"branchMap":{},"code":["/**"," * @fileoverview Wrapper around estraverse"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const estraverse = require(\"estraverse\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const KEY_BLACKLIST = new Set([","    \"parent\",","    \"leadingComments\",","    \"trailingComments\"","]);","","/**"," * Wrapper around an estraverse controller that ensures the correct keys"," * are visited."," * @constructor"," */","class Traverser extends estraverse.Controller {","    traverse(node, visitor) {","        visitor.fallback = Traverser.getKeys;","        return super.traverse(node, visitor);","    }","","    /**","     * Calculates the keys to use for traversal.","     * @param {ASTNode} node The node to read keys from.","     * @returns {string[]} An array of keys to visit on the node.","     * @private","     */","    static getKeys(node) {","        return Object.keys(node).filter(key => !KEY_BLACKLIST.has(key));","    }","}","","module.exports = Traverser;",""],"l":{"11":1,"17":1,"30":0,"31":0,"41":0,"45":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/rule-context.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/rule-context.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":22,"24":0,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":22,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":80,"loc":{"start":{"line":80,"column":15},"end":{"line":80,"column":110}}},"2":{"name":"(anonymous_2)","line":104,"loc":{"start":{"line":104,"column":17},"end":{"line":104,"column":20}}},"3":{"name":"(anonymous_3)","line":118,"loc":{"start":{"line":118,"column":10},"end":{"line":118,"column":54}}},"4":{"name":"(anonymous_4)","line":158,"loc":{"start":{"line":158,"column":21},"end":{"line":158,"column":36}}},"5":{"name":"(anonymous_5)","line":159,"loc":{"start":{"line":159,"column":17},"end":{"line":159,"column":41}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":47}},"2":{"start":{"line":17,"column":0},"end":{"line":42,"column":2}},"3":{"start":{"line":83,"column":8},"end":{"line":83,"column":25}},"4":{"start":{"line":84,"column":8},"end":{"line":84,"column":31}},"5":{"start":{"line":85,"column":8},"end":{"line":85,"column":33}},"6":{"start":{"line":86,"column":8},"end":{"line":86,"column":43}},"7":{"start":{"line":87,"column":8},"end":{"line":87,"column":37}},"8":{"start":{"line":88,"column":8},"end":{"line":88,"column":25}},"9":{"start":{"line":91,"column":8},"end":{"line":91,"column":79}},"10":{"start":{"line":94,"column":8},"end":{"line":94,"column":29}},"11":{"start":{"line":95,"column":8},"end":{"line":95,"column":33}},"12":{"start":{"line":97,"column":8},"end":{"line":97,"column":28}},"13":{"start":{"line":105,"column":8},"end":{"line":105,"column":43}},"14":{"start":{"line":121,"column":8},"end":{"line":142,"column":9}},"15":{"start":{"line":122,"column":12},"end":{"line":122,"column":48}},"16":{"start":{"line":123,"column":12},"end":{"line":123,"column":27}},"17":{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},"18":{"start":{"line":127,"column":16},"end":{"line":127,"column":48}},"19":{"start":{"line":130,"column":12},"end":{"line":139,"column":14}},"20":{"start":{"line":141,"column":12},"end":{"line":141,"column":19}},"21":{"start":{"line":145,"column":8},"end":{"line":153,"column":10}},"22":{"start":{"line":158,"column":0},"end":{"line":162,"column":26}},"23":{"start":{"line":159,"column":4},"end":{"line":161,"column":6}},"24":{"start":{"line":160,"column":8},"end":{"line":160,"column":48}},"25":{"start":{"line":164,"column":0},"end":{"line":164,"column":29}}},"branchMap":{"1":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":8}},{"start":{"line":121,"column":8},"end":{"line":121,"column":8}}]},"2":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":12}},{"start":{"line":126,"column":12},"end":{"line":126,"column":12}}]},"3":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":30}},{"start":{"line":134,"column":34},"end":{"line":134,"column":59}}]}},"code":["/**"," * @fileoverview RuleContext utility for rules"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const ruleFixer = require(\"./util/rule-fixer\");","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const PASSTHROUGHS = [","    \"getAncestors\",","    \"getDeclaredVariables\",","    \"getFilename\",","    \"getScope\",","    \"markVariableAsUsed\",","","    // DEPRECATED","    \"getAllComments\",","    \"getComments\",","    \"getFirstToken\",","    \"getFirstTokens\",","    \"getJSDocComment\",","    \"getLastToken\",","    \"getLastTokens\",","    \"getNodeByRangeIndex\",","    \"getSource\",","    \"getSourceLines\",","    \"getTokenAfter\",","    \"getTokenBefore\",","    \"getTokenByRangeStart\",","    \"getTokens\",","    \"getTokensAfter\",","    \"getTokensBefore\",","    \"getTokensBetween\"","];","","//------------------------------------------------------------------------------","// Typedefs","//------------------------------------------------------------------------------","","/**"," * An error message description"," * @typedef {Object} MessageDescriptor"," * @property {string} nodeType The type of node."," * @property {Location} loc The location of the problem."," * @property {string} message The problem message."," * @property {Object} [data] Optional data to use to fill in placeholders in the"," *      message."," * @property {Function} fix The function to call that creates a fix command."," */","","//------------------------------------------------------------------------------","// Rule Definition","//------------------------------------------------------------------------------","","/**"," * Rule context class"," * Acts as an abstraction layer between rules and the main eslint object."," */","class RuleContext {","","    /**","     * @param {string} ruleId The ID of the rule using this object.","     * @param {eslint} eslint The eslint object.","     * @param {number} severity The configured severity level of the rule.","     * @param {Array} options The configuration information to be added to the rule.","     * @param {Object} settings The configuration settings passed from the config file.","     * @param {Object} parserOptions The parserOptions settings passed from the config file.","     * @param {Object} parserPath The parser setting passed from the config file.","     * @param {Object} meta The metadata of the rule","     * @param {Object} parserServices The parser services for the rule.","     */","    constructor(ruleId, eslint, severity, options, settings, parserOptions, parserPath, meta, parserServices) {","","        // public.","        this.id = ruleId;","        this.options = options;","        this.settings = settings;","        this.parserOptions = parserOptions;","        this.parserPath = parserPath;","        this.meta = meta;","","        // create a separate copy and freeze it (it's not nice to freeze other people's objects)","        this.parserServices = Object.freeze(Object.assign({}, parserServices));","","        // private.","        this.eslint = eslint;","        this.severity = severity;","","        Object.freeze(this);","    }","","    /**","     * Passthrough to eslint.getSourceCode().","     * @returns {SourceCode} The SourceCode object for the code.","     */","    getSourceCode() {","        return this.eslint.getSourceCode();","    }","","    /**","     * Passthrough to eslint.report() that automatically assigns the rule ID and severity.","     * @param {ASTNode|MessageDescriptor} nodeOrDescriptor The AST node related to the message or a message","     *      descriptor.","     * @param {Object=} location The location of the error.","     * @param {string} message The message to display to the user.","     * @param {Object} opts Optional template data which produces a formatted message","     *     with symbols being replaced by this object's values.","     * @returns {void}","     */","    report(nodeOrDescriptor, location, message, opts) {","","        // check to see if it's a new style call","        if (arguments.length === 1) {","            const descriptor = nodeOrDescriptor;","            let fix = null;","","            // if there's a fix specified, get it","            if (typeof descriptor.fix === \"function\") {","                fix = descriptor.fix(ruleFixer);","            }","","            this.eslint.report(","                this.id,","                this.severity,","                descriptor.node,","                descriptor.loc || descriptor.node.loc.start,","                descriptor.message,","                descriptor.data,","                fix,","                this.meta","            );","","            return;","        }","","        // old style call","        this.eslint.report(","            this.id,","            this.severity,","            nodeOrDescriptor,","            location,","            message,","            opts,","            this.meta","        );","    }","}","","// Copy over passthrough methods. All functions will have 5 or fewer parameters.","PASSTHROUGHS.forEach(function(name) {","    this[name] = function(a, b, c, d, e) {","        return this.eslint[name](a, b, c, d, e);","    };","}, RuleContext.prototype);","","module.exports = RuleContext;",""],"l":{"11":1,"17":1,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"91":0,"94":0,"95":0,"97":0,"105":0,"121":0,"122":0,"123":0,"126":0,"127":0,"130":0,"141":0,"145":0,"158":1,"159":22,"160":0,"164":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/rule-fixer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/rule-fixer.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"insertTextAt","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":35}}},"2":{"name":"(anonymous_2)","line":48,"loc":{"start":{"line":48,"column":19},"end":{"line":48,"column":39}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":24},"end":{"line":60,"column":38}}},"4":{"name":"(anonymous_4)","line":71,"loc":{"start":{"line":71,"column":20},"end":{"line":71,"column":40}}},"5":{"name":"(anonymous_5)","line":83,"loc":{"start":{"line":83,"column":25},"end":{"line":83,"column":39}}},"6":{"name":"(anonymous_6)","line":94,"loc":{"start":{"line":94,"column":15},"end":{"line":94,"column":35}}},"7":{"name":"(anonymous_7)","line":106,"loc":{"start":{"line":106,"column":20},"end":{"line":106,"column":34}}},"8":{"name":"(anonymous_8)","line":119,"loc":{"start":{"line":119,"column":10},"end":{"line":119,"column":24}}},"9":{"name":"(anonymous_9)","line":130,"loc":{"start":{"line":130,"column":15},"end":{"line":130,"column":23}}}},"statementMap":{"1":{"start":{"line":24,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":25,"column":4},"end":{"line":28,"column":6}},"3":{"start":{"line":39,"column":0},"end":{"line":137,"column":3}},"4":{"start":{"line":49,"column":8},"end":{"line":49,"column":66}},"5":{"start":{"line":61,"column":8},"end":{"line":61,"column":44}},"6":{"start":{"line":72,"column":8},"end":{"line":72,"column":67}},"7":{"start":{"line":84,"column":8},"end":{"line":84,"column":44}},"8":{"start":{"line":95,"column":8},"end":{"line":95,"column":62}},"9":{"start":{"line":107,"column":8},"end":{"line":110,"column":10}},"10":{"start":{"line":120,"column":8},"end":{"line":120,"column":51}},"11":{"start":{"line":131,"column":8},"end":{"line":134,"column":10}},"12":{"start":{"line":140,"column":0},"end":{"line":140,"column":27}}},"branchMap":{},"code":["/**"," * @fileoverview An object that creates fix commands for rules."," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","// none!","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Creates a fix command that inserts text at the specified index in the source text."," * @param {int} index The 0-based index at which to insert the new text."," * @param {string} text The text to insert."," * @returns {Object} The fix command."," * @private"," */","function insertTextAt(index, text) {","    return {","        range: [index, index],","        text","    };","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Creates code fixing commands for rules."," */","","const ruleFixer = Object.freeze({","","    /**","     * Creates a fix command that inserts text after the given node or token.","     * The fix is not applied until applyFixes() is called.","     * @param {ASTNode|Token} nodeOrToken The node or token to insert after.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    insertTextAfter(nodeOrToken, text) {","        return this.insertTextAfterRange(nodeOrToken.range, text);","    },","","    /**","     * Creates a fix command that inserts text after the specified range in the source text.","     * The fix is not applied until applyFixes() is called.","     * @param {int[]} range The range to replace, first item is start of range, second","     *      is end of range.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    insertTextAfterRange(range, text) {","        return insertTextAt(range[1], text);","    },","","    /**","     * Creates a fix command that inserts text before the given node or token.","     * The fix is not applied until applyFixes() is called.","     * @param {ASTNode|Token} nodeOrToken The node or token to insert before.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    insertTextBefore(nodeOrToken, text) {","        return this.insertTextBeforeRange(nodeOrToken.range, text);","    },","","    /**","     * Creates a fix command that inserts text before the specified range in the source text.","     * The fix is not applied until applyFixes() is called.","     * @param {int[]} range The range to replace, first item is start of range, second","     *      is end of range.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    insertTextBeforeRange(range, text) {","        return insertTextAt(range[0], text);","    },","","    /**","     * Creates a fix command that replaces text at the node or token.","     * The fix is not applied until applyFixes() is called.","     * @param {ASTNode|Token} nodeOrToken The node or token to remove.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    replaceText(nodeOrToken, text) {","        return this.replaceTextRange(nodeOrToken.range, text);","    },","","    /**","     * Creates a fix command that replaces text at the specified range in the source text.","     * The fix is not applied until applyFixes() is called.","     * @param {int[]} range The range to replace, first item is start of range, second","     *      is end of range.","     * @param {string} text The text to insert.","     * @returns {Object} The fix command.","     */","    replaceTextRange(range, text) {","        return {","            range,","            text","        };","    },","","    /**","     * Creates a fix command that removes the node or token from the source.","     * The fix is not applied until applyFixes() is called.","     * @param {ASTNode|Token} nodeOrToken The node or token to remove.","     * @returns {Object} The fix command.","     */","    remove(nodeOrToken) {","        return this.removeRange(nodeOrToken.range);","    },","","    /**","     * Creates a fix command that removes the specified range of text from the source.","     * The fix is not applied until applyFixes() is called.","     * @param {int[]} range The range to remove, first item is start of range, second","     *      is end of range.","     * @returns {Object} The fix command.","     */","    removeRange(range) {","        return {","            range,","            text: \"\"","        };","    }","","});","","","module.exports = ruleFixer;",""],"l":{"24":1,"25":0,"39":1,"49":0,"61":0,"72":0,"84":0,"95":0,"107":0,"120":0,"131":0,"140":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/timing.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/timing.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,1]},"f":{"1":0,"2":0,"3":0,"4":1,"5":0,"6":0},"fnMap":{"1":{"name":"alignLeft","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":33}},"skip":true},"2":{"name":"alignRight","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":34}},"skip":true},"3":{"name":"display","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":23}},"skip":true},"4":{"name":"(anonymous_4)","line":105,"loc":{"start":{"line":105,"column":18},"end":{"line":105,"column":29}},"skip":true},"5":{"name":"time","line":116,"loc":{"start":{"line":116,"column":4},"end":{"line":116,"column":27}},"skip":true},"6":{"name":"(anonymous_6)","line":121,"loc":{"start":{"line":121,"column":15},"end":{"line":121,"column":26}},"skip":true}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":23,"column":1},"skip":true},"2":{"start":{"line":22,"column":4},"end":{"line":22,"column":65},"skip":true},"3":{"start":{"line":34,"column":0},"end":{"line":36,"column":1},"skip":true},"4":{"start":{"line":35,"column":4},"end":{"line":35,"column":65},"skip":true},"5":{"start":{"line":42,"column":0},"end":{"line":42,"column":37}},"6":{"start":{"line":44,"column":0},"end":{"line":44,"column":50}},"7":{"start":{"line":45,"column":0},"end":{"line":45,"column":50}},"8":{"start":{"line":54,"column":0},"end":{"line":102,"column":1},"skip":true},"9":{"start":{"line":55,"column":4},"end":{"line":55,"column":18},"skip":true},"10":{"start":{"line":56,"column":4},"end":{"line":64,"column":22},"skip":true},"11":{"start":{"line":58,"column":12},"end":{"line":58,"column":35},"skip":true},"12":{"start":{"line":60,"column":12},"end":{"line":60,"column":26},"skip":true},"13":{"start":{"line":61,"column":12},"end":{"line":61,"column":31},"skip":true},"14":{"start":{"line":63,"column":24},"end":{"line":63,"column":35},"skip":true},"15":{"start":{"line":66,"column":4},"end":{"line":69,"column":7},"skip":true},"16":{"start":{"line":67,"column":8},"end":{"line":67,"column":58},"skip":true},"17":{"start":{"line":68,"column":8},"end":{"line":68,"column":35},"skip":true},"18":{"start":{"line":71,"column":4},"end":{"line":71,"column":26},"skip":true},"19":{"start":{"line":73,"column":4},"end":{"line":73,"column":22},"skip":true},"20":{"start":{"line":75,"column":4},"end":{"line":85,"column":7},"skip":true},"21":{"start":{"line":76,"column":8},"end":{"line":76,"column":31},"skip":true},"22":{"start":{"line":78,"column":8},"end":{"line":84,"column":9},"skip":true},"23":{"start":{"line":79,"column":12},"end":{"line":79,"column":36},"skip":true},"24":{"start":{"line":81,"column":12},"end":{"line":83,"column":13},"skip":true},"25":{"start":{"line":82,"column":16},"end":{"line":82,"column":30},"skip":true},"26":{"start":{"line":87,"column":4},"end":{"line":91,"column":6},"skip":true},"27":{"start":{"line":88,"column":8},"end":{"line":90,"column":24},"skip":true},"28":{"start":{"line":89,"column":34},"end":{"line":89,"column":67},"skip":true},"29":{"start":{"line":93,"column":4},"end":{"line":99,"column":18},"skip":true},"30":{"start":{"line":94,"column":8},"end":{"line":96,"column":9},"skip":true},"31":{"start":{"line":95,"column":12},"end":{"line":95,"column":16},"skip":true},"32":{"start":{"line":98,"column":8},"end":{"line":98,"column":45},"skip":true},"33":{"start":{"line":101,"column":4},"end":{"line":101,"column":34},"skip":true},"34":{"start":{"line":105,"column":0},"end":{"line":141,"column":5},"skip":true},"35":{"start":{"line":107,"column":4},"end":{"line":107,"column":37},"skip":true},"36":{"start":{"line":116,"column":4},"end":{"line":128,"column":5},"skip":true},"37":{"start":{"line":117,"column":8},"end":{"line":119,"column":9},"skip":true},"38":{"start":{"line":118,"column":12},"end":{"line":118,"column":26},"skip":true},"39":{"start":{"line":121,"column":8},"end":{"line":127,"column":10},"skip":true},"40":{"start":{"line":122,"column":12},"end":{"line":122,"column":37},"skip":true},"41":{"start":{"line":124,"column":12},"end":{"line":124,"column":66},"skip":true},"42":{"start":{"line":125,"column":12},"end":{"line":125,"column":34},"skip":true},"43":{"start":{"line":126,"column":12},"end":{"line":126,"column":49},"skip":true},"44":{"start":{"line":130,"column":4},"end":{"line":134,"column":5},"skip":true},"45":{"start":{"line":131,"column":8},"end":{"line":133,"column":11},"skip":true},"46":{"start":{"line":132,"column":12},"end":{"line":132,"column":26},"skip":true},"47":{"start":{"line":136,"column":4},"end":{"line":139,"column":6},"skip":true}},"branchMap":{"1":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":54},"end":{"line":22,"column":56},"skip":true},{"start":{"line":22,"column":60},"end":{"line":22,"column":63},"skip":true}]},"2":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":48},"end":{"line":35,"column":50},"skip":true},{"start":{"line":35,"column":54},"end":{"line":35,"column":57},"skip":true}]},"3":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":12},"end":{"line":81,"column":12},"skip":true},{"start":{"line":81,"column":12},"end":{"line":81,"column":12},"skip":true}]},"4":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":16},"end":{"line":81,"column":26},"skip":true},{"start":{"line":81,"column":30},"end":{"line":81,"column":43},"skip":true}]},"5":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8},"skip":true},{"start":{"line":94,"column":8},"end":{"line":94,"column":8},"skip":true}]},"6":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":23},"skip":true},{"start":{"line":94,"column":27},"end":{"line":94,"column":54},"skip":true}]},"7":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8},"skip":true},{"start":{"line":117,"column":8},"end":{"line":117,"column":8},"skip":true}]},"8":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":4},"end":{"line":130,"column":4},"skip":true},{"start":{"line":130,"column":4},"end":{"line":130,"column":4},"skip":true}]}},"code":["/**"," * @fileoverview Tracks performance of individual rules."," * @author Brandon Mills"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/* istanbul ignore next */","/**"," * Align the string to left"," * @param {string} str string to evaluate"," * @param {int} len length of the string"," * @param {string} ch delimiter character"," * @returns {string} modified string"," * @private"," */","function alignLeft(str, len, ch) {","    return str + new Array(len - str.length + 1).join(ch || \" \");","}","","/* istanbul ignore next */","/**"," * Align the string to right"," * @param {string} str string to evaluate"," * @param {int} len length of the string"," * @param {string} ch delimiter character"," * @returns {string} modified string"," * @private"," */","function alignRight(str, len, ch) {","    return new Array(len - str.length + 1).join(ch || \" \") + str;","}","","//------------------------------------------------------------------------------","// Module definition","//------------------------------------------------------------------------------","","const enabled = !!process.env.TIMING;","","const HEADERS = [\"Rule\", \"Time (ms)\", \"Relative\"];","const ALIGN = [alignLeft, alignRight, alignRight];","","/* istanbul ignore next */","/**"," * display the data"," * @param {Object} data Data object to be displayed"," * @returns {string} modified string"," * @private"," */","function display(data) {","    let total = 0;","    const rows = Object.keys(data)","        .map(key => {","            const time = data[key];","","            total += time;","            return [key, time];","        })","        .sort((a, b) => b[1] - a[1])","        .slice(0, 10);","","    rows.forEach(row => {","        row.push(`${(row[1] * 100 / total).toFixed(1)}%`);","        row[1] = row[1].toFixed(3);","    });","","    rows.unshift(HEADERS);","","    const widths = [];","","    rows.forEach(row => {","        const len = row.length;","","        for (let i = 0; i < len; i++) {","            const n = row[i].length;","","            if (!widths[i] || n > widths[i]) {","                widths[i] = n;","            }","        }","    });","","    const table = rows.map(row =>","        row","            .map((cell, index) => ALIGN[index](cell, widths[index]))","            .join(\" | \")","    );","","    table.splice(1, 0, widths.map((w, index) => {","        if (index !== 0 && index !== widths.length - 1) {","            w++;","        }","","        return ALIGN[index](\":\", w + 1, \"-\");","    }).join(\"|\"));","","    console.log(table.join(\"\\n\"));      // eslint-disable-line no-console","}","","/* istanbul ignore next */","module.exports = (function() {","","    const data = Object.create(null);","","    /**","     * Time the run","     * @param {*} key key from the data object","     * @param {Function} fn function to be called","     * @returns {Function} function to be executed","     * @private","     */","    function time(key, fn) {","        if (typeof data[key] === \"undefined\") {","            data[key] = 0;","        }","","        return function() {","            let t = process.hrtime();","","            fn.apply(null, Array.prototype.slice.call(arguments));","            t = process.hrtime(t);","            data[key] += t[0] * 1e3 + t[1] / 1e6;","        };","    }","","    if (enabled) {","        process.on(\"exit\", () => {","            display(data);","        });","    }","","    return {","        time,","        enabled","    };","","}());",""],"l":{"21":1,"22":1,"34":1,"35":1,"42":1,"44":1,"45":1,"54":1,"55":1,"56":1,"58":1,"60":1,"61":1,"63":1,"66":1,"67":1,"68":1,"71":1,"73":1,"75":1,"76":1,"78":1,"79":1,"81":1,"82":1,"87":1,"88":1,"89":1,"93":1,"94":1,"95":1,"98":1,"101":1,"105":1,"107":1,"116":1,"117":1,"118":1,"121":1,"122":1,"124":1,"125":1,"126":1,"130":1,"131":1,"132":1,"136":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/cli-engine.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/cli-engine.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":1,"83":0,"84":1,"85":0,"86":0,"87":0,"88":1,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1,"135":0,"136":0,"137":0,"138":1,"139":0,"140":0,"141":0,"142":0,"143":1,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":1,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":1,"201":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"calculateStatsPerFile","line":92,"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":41}}},"2":{"name":"calculateStatsPerRun","line":112,"loc":{"start":{"line":112,"column":0},"end":{"line":112,"column":39}}},"3":{"name":"multipassFix","line":136,"loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":45}}},"4":{"name":"processText","line":206,"loc":{"start":{"line":206,"column":0},"end":{"line":206,"column":75}}},"5":{"name":"processFile","line":300,"loc":{"start":{"line":300,"column":0},"end":{"line":300,"column":54}}},"6":{"name":"createIgnoreResult","line":316,"loc":{"start":{"line":316,"column":0},"end":{"line":316,"column":47}}},"7":{"name":"isErrorMessage","line":353,"loc":{"start":{"line":353,"column":0},"end":{"line":353,"column":33}}},"8":{"name":"getCacheFile","line":369,"loc":{"start":{"line":369,"column":0},"end":{"line":369,"column":38}}},"9":{"name":"getCacheFileForDirectory","line":384,"loc":{"start":{"line":384,"column":4},"end":{"line":384,"column":40}}},"10":{"name":"CLIEngine","line":440,"loc":{"start":{"line":440,"column":0},"end":{"line":440,"column":28}}},"11":{"name":"(anonymous_11)","line":487,"loc":{"start":{"line":487,"column":25},"end":{"line":487,"column":42}}},"12":{"name":"(anonymous_12)","line":526,"loc":{"start":{"line":526,"column":28},"end":{"line":526,"column":46}}},"13":{"name":"(anonymous_13)","line":551,"loc":{"start":{"line":551,"column":24},"end":{"line":551,"column":41}}},"14":{"name":"(anonymous_14)","line":567,"loc":{"start":{"line":567,"column":13},"end":{"line":567,"column":34}}},"15":{"name":"(anonymous_15)","line":577,"loc":{"start":{"line":577,"column":27},"end":{"line":577,"column":38}}},"16":{"name":"(anonymous_16)","line":586,"loc":{"start":{"line":586,"column":18},"end":{"line":586,"column":29}}},"17":{"name":"hashOfConfigFor","line":598,"loc":{"start":{"line":598,"column":8},"end":{"line":598,"column":43}}},"18":{"name":"executeOnFile","line":629,"loc":{"start":{"line":629,"column":8},"end":{"line":629,"column":54}}},"19":{"name":"(anonymous_19)","line":737,"loc":{"start":{"line":737,"column":17},"end":{"line":737,"column":47}}},"20":{"name":"(anonymous_20)","line":773,"loc":{"start":{"line":773,"column":20},"end":{"line":773,"column":31}}},"21":{"name":"(anonymous_21)","line":784,"loc":{"start":{"line":784,"column":17},"end":{"line":784,"column":28}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":33,"column":37}},"2":{"start":{"line":35,"column":0},"end":{"line":35,"column":52}},"3":{"start":{"line":92,"column":0},"end":{"line":104,"column":1}},"4":{"start":{"line":93,"column":4},"end":{"line":103,"column":7}},"5":{"start":{"line":94,"column":8},"end":{"line":98,"column":9}},"6":{"start":{"line":95,"column":12},"end":{"line":95,"column":30}},"7":{"start":{"line":97,"column":12},"end":{"line":97,"column":32}},"8":{"start":{"line":99,"column":8},"end":{"line":99,"column":20}},"9":{"start":{"line":112,"column":0},"end":{"line":121,"column":1}},"10":{"start":{"line":113,"column":4},"end":{"line":120,"column":7}},"11":{"start":{"line":114,"column":8},"end":{"line":114,"column":45}},"12":{"start":{"line":115,"column":8},"end":{"line":115,"column":49}},"13":{"start":{"line":116,"column":8},"end":{"line":116,"column":20}},"14":{"start":{"line":136,"column":0},"end":{"line":194,"column":1}},"15":{"start":{"line":137,"column":4},"end":{"line":137,"column":26}},"16":{"start":{"line":138,"column":4},"end":{"line":141,"column":23}},"17":{"start":{"line":152,"column":4},"end":{"line":176,"column":6}},"18":{"start":{"line":153,"column":8},"end":{"line":153,"column":21}},"19":{"start":{"line":155,"column":8},"end":{"line":155,"column":75}},"20":{"start":{"line":156,"column":8},"end":{"line":156,"column":56}},"21":{"start":{"line":158,"column":8},"end":{"line":158,"column":84}},"22":{"start":{"line":159,"column":8},"end":{"line":159,"column":83}},"23":{"start":{"line":163,"column":8},"end":{"line":165,"column":9}},"24":{"start":{"line":164,"column":12},"end":{"line":164,"column":18}},"25":{"start":{"line":168,"column":8},"end":{"line":168,"column":43}},"26":{"start":{"line":171,"column":8},"end":{"line":171,"column":34}},"27":{"start":{"line":183,"column":4},"end":{"line":185,"column":5}},"28":{"start":{"line":184,"column":8},"end":{"line":184,"column":68}},"29":{"start":{"line":189,"column":4},"end":{"line":189,"column":30}},"30":{"start":{"line":190,"column":4},"end":{"line":190,"column":30}},"31":{"start":{"line":192,"column":4},"end":{"line":192,"column":23}},"32":{"start":{"line":206,"column":0},"end":{"line":289,"column":1}},"33":{"start":{"line":209,"column":4},"end":{"line":209,"column":19}},"34":{"start":{"line":211,"column":4},"end":{"line":215,"column":20}},"35":{"start":{"line":217,"column":4},"end":{"line":220,"column":5}},"36":{"start":{"line":218,"column":8},"end":{"line":218,"column":42}},"37":{"start":{"line":219,"column":8},"end":{"line":219,"column":47}},"38":{"start":{"line":222,"column":4},"end":{"line":222,"column":36}},"39":{"start":{"line":223,"column":4},"end":{"line":223,"column":33}},"40":{"start":{"line":224,"column":4},"end":{"line":224,"column":52}},"41":{"start":{"line":226,"column":4},"end":{"line":228,"column":5}},"42":{"start":{"line":227,"column":8},"end":{"line":227,"column":40}},"43":{"start":{"line":230,"column":4},"end":{"line":230,"column":43}},"44":{"start":{"line":232,"column":4},"end":{"line":237,"column":5}},"45":{"start":{"line":233,"column":8},"end":{"line":236,"column":9}},"46":{"start":{"line":234,"column":12},"end":{"line":234,"column":72}},"47":{"start":{"line":235,"column":12},"end":{"line":235,"column":18}},"48":{"start":{"line":239,"column":4},"end":{"line":269,"column":5}},"49":{"start":{"line":240,"column":8},"end":{"line":240,"column":33}},"50":{"start":{"line":241,"column":8},"end":{"line":241,"column":66}},"51":{"start":{"line":242,"column":8},"end":{"line":242,"column":39}},"52":{"start":{"line":244,"column":8},"end":{"line":249,"column":11}},"53":{"start":{"line":245,"column":12},"end":{"line":248,"column":16}},"54":{"start":{"line":253,"column":8},"end":{"line":253,"column":72}},"55":{"start":{"line":257,"column":8},"end":{"line":268,"column":9}},"56":{"start":{"line":258,"column":12},"end":{"line":261,"column":15}},"57":{"start":{"line":262,"column":12},"end":{"line":262,"column":44}},"58":{"start":{"line":264,"column":12},"end":{"line":267,"column":15}},"59":{"start":{"line":271,"column":4},"end":{"line":271,"column":50}},"60":{"start":{"line":273,"column":4},"end":{"line":278,"column":6}},"61":{"start":{"line":280,"column":4},"end":{"line":282,"column":5}},"62":{"start":{"line":281,"column":8},"end":{"line":281,"column":43}},"63":{"start":{"line":284,"column":4},"end":{"line":286,"column":5}},"64":{"start":{"line":285,"column":8},"end":{"line":285,"column":29}},"65":{"start":{"line":288,"column":4},"end":{"line":288,"column":18}},"66":{"start":{"line":300,"column":0},"end":{"line":307,"column":1}},"67":{"start":{"line":302,"column":4},"end":{"line":303,"column":99}},"68":{"start":{"line":305,"column":4},"end":{"line":305,"column":18}},"69":{"start":{"line":316,"column":0},"end":{"line":344,"column":1}},"70":{"start":{"line":317,"column":4},"end":{"line":317,"column":16}},"71":{"start":{"line":318,"column":4},"end":{"line":318,"column":57}},"72":{"start":{"line":319,"column":4},"end":{"line":319,"column":94}},"73":{"start":{"line":320,"column":4},"end":{"line":320,"column":102}},"74":{"start":{"line":322,"column":4},"end":{"line":330,"column":5}},"75":{"start":{"line":323,"column":8},"end":{"line":323,"column":147}},"76":{"start":{"line":324,"column":11},"end":{"line":330,"column":5}},"77":{"start":{"line":325,"column":8},"end":{"line":325,"column":101}},"78":{"start":{"line":326,"column":11},"end":{"line":330,"column":5}},"79":{"start":{"line":327,"column":8},"end":{"line":327,"column":105}},"80":{"start":{"line":329,"column":8},"end":{"line":329,"column":104}},"81":{"start":{"line":332,"column":4},"end":{"line":343,"column":6}},"82":{"start":{"line":353,"column":0},"end":{"line":355,"column":1}},"83":{"start":{"line":354,"column":4},"end":{"line":354,"column":34}},"84":{"start":{"line":369,"column":0},"end":{"line":429,"column":1}},"85":{"start":{"line":375,"column":4},"end":{"line":375,"column":42}},"86":{"start":{"line":377,"column":4},"end":{"line":377,"column":59}},"87":{"start":{"line":378,"column":4},"end":{"line":378,"column":78}},"88":{"start":{"line":384,"column":4},"end":{"line":386,"column":5}},"89":{"start":{"line":385,"column":8},"end":{"line":385,"column":67}},"90":{"start":{"line":388,"column":4},"end":{"line":388,"column":18}},"91":{"start":{"line":390,"column":4},"end":{"line":394,"column":5}},"92":{"start":{"line":391,"column":8},"end":{"line":391,"column":52}},"93":{"start":{"line":393,"column":8},"end":{"line":393,"column":25}},"94":{"start":{"line":402,"column":4},"end":{"line":415,"column":5}},"95":{"start":{"line":409,"column":8},"end":{"line":411,"column":9}},"96":{"start":{"line":410,"column":12},"end":{"line":410,"column":46}},"97":{"start":{"line":414,"column":8},"end":{"line":414,"column":33}},"98":{"start":{"line":424,"column":4},"end":{"line":426,"column":5}},"99":{"start":{"line":425,"column":8},"end":{"line":425,"column":42}},"100":{"start":{"line":428,"column":4},"end":{"line":428,"column":29}},"101":{"start":{"line":440,"column":0},"end":{"line":478,"column":1}},"102":{"start":{"line":442,"column":4},"end":{"line":447,"column":6}},"103":{"start":{"line":453,"column":4},"end":{"line":453,"column":27}},"104":{"start":{"line":455,"column":4},"end":{"line":455,"column":107}},"105":{"start":{"line":463,"column":4},"end":{"line":463,"column":55}},"106":{"start":{"line":466,"column":4},"end":{"line":473,"column":5}},"107":{"start":{"line":467,"column":8},"end":{"line":467,"column":37}},"108":{"start":{"line":469,"column":8},"end":{"line":472,"column":11}},"109":{"start":{"line":470,"column":12},"end":{"line":470,"column":52}},"110":{"start":{"line":471,"column":12},"end":{"line":471,"column":38}},"111":{"start":{"line":475,"column":4},"end":{"line":477,"column":7}},"112":{"start":{"line":476,"column":8},"end":{"line":476,"column":77}},"113":{"start":{"line":487,"column":0},"end":{"line":519,"column":2}},"114":{"start":{"line":489,"column":4},"end":{"line":489,"column":22}},"115":{"start":{"line":492,"column":4},"end":{"line":492,"column":33}},"116":{"start":{"line":495,"column":4},"end":{"line":518,"column":5}},"117":{"start":{"line":498,"column":8},"end":{"line":498,"column":44}},"118":{"start":{"line":501,"column":8},"end":{"line":507,"column":9}},"119":{"start":{"line":502,"column":12},"end":{"line":502,"column":72}},"120":{"start":{"line":504,"column":12},"end":{"line":504,"column":54}},"121":{"start":{"line":506,"column":12},"end":{"line":506,"column":53}},"122":{"start":{"line":509,"column":8},"end":{"line":514,"column":9}},"123":{"start":{"line":510,"column":12},"end":{"line":510,"column":42}},"124":{"start":{"line":512,"column":12},"end":{"line":512,"column":105}},"125":{"start":{"line":513,"column":12},"end":{"line":513,"column":21}},"126":{"start":{"line":517,"column":8},"end":{"line":517,"column":20}},"127":{"start":{"line":526,"column":0},"end":{"line":544,"column":2}},"128":{"start":{"line":527,"column":4},"end":{"line":527,"column":24}},"129":{"start":{"line":529,"column":4},"end":{"line":541,"column":7}},"130":{"start":{"line":530,"column":8},"end":{"line":530,"column":72}},"131":{"start":{"line":532,"column":8},"end":{"line":540,"column":9}},"132":{"start":{"line":533,"column":12},"end":{"line":539,"column":14}},"133":{"start":{"line":543,"column":4},"end":{"line":543,"column":20}},"134":{"start":{"line":551,"column":0},"end":{"line":555,"column":2}},"135":{"start":{"line":552,"column":4},"end":{"line":554,"column":7}},"136":{"start":{"line":552,"column":36},"end":{"line":552,"column":67}},"137":{"start":{"line":553,"column":8},"end":{"line":553,"column":57}},"138":{"start":{"line":557,"column":0},"end":{"line":793,"column":2}},"139":{"start":{"line":568,"column":8},"end":{"line":568,"column":43}},"140":{"start":{"line":578,"column":8},"end":{"line":578,"column":72}},"141":{"start":{"line":587,"column":8},"end":{"line":590,"column":47}},"142":{"start":{"line":591,"column":8},"end":{"line":591,"column":23}},"143":{"start":{"line":598,"column":8},"end":{"line":620,"column":9}},"144":{"start":{"line":599,"column":12},"end":{"line":599,"column":60}},"145":{"start":{"line":601,"column":12},"end":{"line":603,"column":13}},"146":{"start":{"line":602,"column":16},"end":{"line":602,"column":32}},"147":{"start":{"line":606,"column":12},"end":{"line":617,"column":13}},"148":{"start":{"line":612,"column":16},"end":{"line":612,"column":43}},"149":{"start":{"line":614,"column":16},"end":{"line":614,"column":50}},"150":{"start":{"line":616,"column":16},"end":{"line":616,"column":80}},"151":{"start":{"line":619,"column":12},"end":{"line":619,"column":35}},"152":{"start":{"line":629,"column":8},"end":{"line":700,"column":9}},"153":{"start":{"line":630,"column":12},"end":{"line":631,"column":27}},"154":{"start":{"line":633,"column":12},"end":{"line":636,"column":13}},"155":{"start":{"line":634,"column":16},"end":{"line":634,"column":72}},"156":{"start":{"line":635,"column":16},"end":{"line":635,"column":23}},"157":{"start":{"line":638,"column":12},"end":{"line":668,"column":13}},"158":{"start":{"line":645,"column":16},"end":{"line":645,"column":67}},"159":{"start":{"line":646,"column":16},"end":{"line":646,"column":51}},"160":{"start":{"line":648,"column":16},"end":{"line":648,"column":57}},"161":{"start":{"line":650,"column":16},"end":{"line":650,"column":89}},"162":{"start":{"line":652,"column":16},"end":{"line":665,"column":17}},"163":{"start":{"line":653,"column":20},"end":{"line":653,"column":77}},"164":{"start":{"line":661,"column":20},"end":{"line":661,"column":58}},"165":{"start":{"line":664,"column":20},"end":{"line":664,"column":27}},"166":{"start":{"line":667,"column":16},"end":{"line":667,"column":36}},"167":{"start":{"line":670,"column":12},"end":{"line":670,"column":44}},"168":{"start":{"line":672,"column":12},"end":{"line":672,"column":69}},"169":{"start":{"line":674,"column":12},"end":{"line":697,"column":13}},"170":{"start":{"line":681,"column":16},"end":{"line":696,"column":17}},"171":{"start":{"line":682,"column":20},"end":{"line":682,"column":73}},"172":{"start":{"line":685,"column":20},"end":{"line":685,"column":52}},"173":{"start":{"line":694,"column":20},"end":{"line":694,"column":64}},"174":{"start":{"line":695,"column":20},"end":{"line":695,"column":50}},"175":{"start":{"line":699,"column":12},"end":{"line":699,"column":30}},"176":{"start":{"line":702,"column":8},"end":{"line":702,"column":37}},"177":{"start":{"line":706,"column":8},"end":{"line":706,"column":58}},"178":{"start":{"line":707,"column":8},"end":{"line":707,"column":72}},"179":{"start":{"line":709,"column":8},"end":{"line":711,"column":11}},"180":{"start":{"line":710,"column":12},"end":{"line":710,"column":63}},"181":{"start":{"line":713,"column":8},"end":{"line":713,"column":52}},"182":{"start":{"line":715,"column":8},"end":{"line":719,"column":9}},"183":{"start":{"line":718,"column":12},"end":{"line":718,"column":34}},"184":{"start":{"line":721,"column":8},"end":{"line":721,"column":66}},"185":{"start":{"line":723,"column":8},"end":{"line":727,"column":10}},"186":{"start":{"line":739,"column":8},"end":{"line":742,"column":53}},"187":{"start":{"line":745,"column":8},"end":{"line":747,"column":9}},"188":{"start":{"line":746,"column":12},"end":{"line":746,"column":59}},"189":{"start":{"line":749,"column":8},"end":{"line":755,"column":9}},"190":{"start":{"line":750,"column":12},"end":{"line":752,"column":13}},"191":{"start":{"line":751,"column":16},"end":{"line":751,"column":72}},"192":{"start":{"line":754,"column":12},"end":{"line":754,"column":108}},"193":{"start":{"line":757,"column":8},"end":{"line":757,"column":52}},"194":{"start":{"line":759,"column":8},"end":{"line":763,"column":10}},"195":{"start":{"line":774,"column":8},"end":{"line":774,"column":54}},"196":{"start":{"line":776,"column":8},"end":{"line":776,"column":48}},"197":{"start":{"line":785,"column":8},"end":{"line":785,"column":70}},"198":{"start":{"line":786,"column":8},"end":{"line":786,"column":60}},"199":{"start":{"line":788,"column":8},"end":{"line":788,"column":51}},"200":{"start":{"line":795,"column":0},"end":{"line":795,"column":32}},"201":{"start":{"line":797,"column":0},"end":{"line":797,"column":27}}},"branchMap":{"1":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8}},{"start":{"line":94,"column":8},"end":{"line":94,"column":8}}]},"2":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":25}},{"start":{"line":94,"column":29},"end":{"line":94,"column":51}}]},"3":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":8},"end":{"line":163,"column":8}},{"start":{"line":163,"column":8},"end":{"line":163,"column":8}}]},"4":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":12},"end":{"line":163,"column":33}},{"start":{"line":163,"column":37},"end":{"line":163,"column":54}}]},"5":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":16},"end":{"line":168,"column":21}},{"start":{"line":168,"column":25},"end":{"line":168,"column":42}}]},"6":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":8},"end":{"line":174,"column":25}},{"start":{"line":175,"column":8},"end":{"line":175,"column":31}}]},"7":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":4},"end":{"line":183,"column":4}},{"start":{"line":183,"column":4},"end":{"line":183,"column":4}}]},"8":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":4},"end":{"line":217,"column":4}},{"start":{"line":217,"column":4},"end":{"line":217,"column":4}}]},"9":{"line":222,"type":"binary-expr","locations":[{"start":{"line":222,"column":15},"end":{"line":222,"column":23}},{"start":{"line":222,"column":27},"end":{"line":222,"column":35}}]},"10":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"11":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":233,"column":8}},{"start":{"line":233,"column":8},"end":{"line":233,"column":8}}]},"12":{"line":233,"type":"binary-expr","locations":[{"start":{"line":233,"column":12},"end":{"line":233,"column":44}},{"start":{"line":233,"column":48},"end":{"line":233,"column":121}}]},"13":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":239,"column":4}},{"start":{"line":239,"column":4},"end":{"line":239,"column":4}}]},"14":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":8},"end":{"line":257,"column":8}},{"start":{"line":257,"column":8},"end":{"line":257,"column":8}}]},"15":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":4},"end":{"line":280,"column":4}},{"start":{"line":280,"column":4},"end":{"line":280,"column":4}}]},"16":{"line":280,"type":"binary-expr","locations":[{"start":{"line":280,"column":8},"end":{"line":280,"column":19}},{"start":{"line":280,"column":23},"end":{"line":280,"column":40}}]},"17":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":4},"end":{"line":284,"column":4}},{"start":{"line":284,"column":4},"end":{"line":284,"column":4}}]},"18":{"line":284,"type":"binary-expr","locations":[{"start":{"line":284,"column":8},"end":{"line":284,"column":51}},{"start":{"line":284,"column":55},"end":{"line":284,"column":91}}]},"19":{"line":319,"type":"binary-expr","locations":[{"start":{"line":319,"column":28},"end":{"line":319,"column":35}},{"start":{"line":319,"column":39},"end":{"line":319,"column":93}}]},"20":{"line":320,"type":"binary-expr","locations":[{"start":{"line":320,"column":32},"end":{"line":320,"column":39}},{"start":{"line":320,"column":43},"end":{"line":320,"column":101}}]},"21":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":4},"end":{"line":322,"column":4}},{"start":{"line":322,"column":4},"end":{"line":322,"column":4}}]},"22":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":11},"end":{"line":324,"column":11}},{"start":{"line":324,"column":11},"end":{"line":324,"column":11}}]},"23":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":11},"end":{"line":326,"column":11}},{"start":{"line":326,"column":11},"end":{"line":326,"column":11}}]},"24":{"line":402,"type":"if","locations":[{"start":{"line":402,"column":4},"end":{"line":402,"column":4}},{"start":{"line":402,"column":4},"end":{"line":402,"column":4}}]},"25":{"line":409,"type":"if","locations":[{"start":{"line":409,"column":8},"end":{"line":409,"column":8}},{"start":{"line":409,"column":8},"end":{"line":409,"column":8}}]},"26":{"line":409,"type":"binary-expr","locations":[{"start":{"line":409,"column":12},"end":{"line":409,"column":35}},{"start":{"line":409,"column":39},"end":{"line":409,"column":58}}]},"27":{"line":424,"type":"if","locations":[{"start":{"line":424,"column":4},"end":{"line":424,"column":4}},{"start":{"line":424,"column":4},"end":{"line":424,"column":4}}]},"28":{"line":455,"type":"binary-expr","locations":[{"start":{"line":455,"column":35},"end":{"line":455,"column":61}},{"start":{"line":455,"column":65},"end":{"line":455,"column":87}}]},"29":{"line":466,"type":"if","locations":[{"start":{"line":466,"column":4},"end":{"line":466,"column":4}},{"start":{"line":466,"column":4},"end":{"line":466,"column":4}}]},"30":{"line":475,"type":"binary-expr","locations":[{"start":{"line":475,"column":16},"end":{"line":475,"column":34}},{"start":{"line":475,"column":38},"end":{"line":475,"column":40}}]},"31":{"line":492,"type":"binary-expr","locations":[{"start":{"line":492,"column":13},"end":{"line":492,"column":19}},{"start":{"line":492,"column":23},"end":{"line":492,"column":32}}]},"32":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":4},"end":{"line":495,"column":4}},{"start":{"line":495,"column":4},"end":{"line":495,"column":4}}]},"33":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":8},"end":{"line":501,"column":8}},{"start":{"line":501,"column":8},"end":{"line":501,"column":8}}]},"34":{"line":502,"type":"cond-expr","locations":[{"start":{"line":502,"column":39},"end":{"line":502,"column":55}},{"start":{"line":502,"column":58},"end":{"line":502,"column":71}}]},"35":{"line":532,"type":"if","locations":[{"start":{"line":532,"column":8},"end":{"line":532,"column":8}},{"start":{"line":532,"column":8},"end":{"line":532,"column":8}}]},"36":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":12},"end":{"line":601,"column":12}},{"start":{"line":601,"column":12},"end":{"line":601,"column":12}}]},"37":{"line":606,"type":"if","locations":[{"start":{"line":606,"column":12},"end":{"line":606,"column":12}},{"start":{"line":606,"column":12},"end":{"line":606,"column":12}}]},"38":{"line":633,"type":"if","locations":[{"start":{"line":633,"column":12},"end":{"line":633,"column":12}},{"start":{"line":633,"column":12},"end":{"line":633,"column":12}}]},"39":{"line":638,"type":"if","locations":[{"start":{"line":638,"column":12},"end":{"line":638,"column":12}},{"start":{"line":638,"column":12},"end":{"line":638,"column":12}}]},"40":{"line":646,"type":"binary-expr","locations":[{"start":{"line":646,"column":29},"end":{"line":646,"column":44}},{"start":{"line":646,"column":48},"end":{"line":646,"column":50}}]},"41":{"line":650,"type":"binary-expr","locations":[{"start":{"line":650,"column":32},"end":{"line":650,"column":50}},{"start":{"line":650,"column":54},"end":{"line":650,"column":88}}]},"42":{"line":652,"type":"if","locations":[{"start":{"line":652,"column":16},"end":{"line":652,"column":16}},{"start":{"line":652,"column":16},"end":{"line":652,"column":16}}]},"43":{"line":674,"type":"if","locations":[{"start":{"line":674,"column":12},"end":{"line":674,"column":12}},{"start":{"line":674,"column":12},"end":{"line":674,"column":12}}]},"44":{"line":681,"type":"if","locations":[{"start":{"line":681,"column":16},"end":{"line":681,"column":16}},{"start":{"line":681,"column":16},"end":{"line":681,"column":16}}]},"45":{"line":681,"type":"binary-expr","locations":[{"start":{"line":681,"column":20},"end":{"line":681,"column":38}},{"start":{"line":681,"column":42},"end":{"line":681,"column":62}}]},"46":{"line":715,"type":"if","locations":[{"start":{"line":715,"column":8},"end":{"line":715,"column":8}},{"start":{"line":715,"column":8},"end":{"line":715,"column":8}}]},"47":{"line":745,"type":"if","locations":[{"start":{"line":745,"column":8},"end":{"line":745,"column":8}},{"start":{"line":745,"column":8},"end":{"line":745,"column":8}}]},"48":{"line":745,"type":"binary-expr","locations":[{"start":{"line":745,"column":12},"end":{"line":745,"column":20}},{"start":{"line":745,"column":24},"end":{"line":745,"column":50}}]},"49":{"line":749,"type":"if","locations":[{"start":{"line":749,"column":8},"end":{"line":749,"column":8}},{"start":{"line":749,"column":8},"end":{"line":749,"column":8}}]},"50":{"line":749,"type":"binary-expr","locations":[{"start":{"line":749,"column":12},"end":{"line":749,"column":20}},{"start":{"line":749,"column":24},"end":{"line":749,"column":55}}]},"51":{"line":750,"type":"if","locations":[{"start":{"line":750,"column":12},"end":{"line":750,"column":12}},{"start":{"line":750,"column":12},"end":{"line":750,"column":12}}]}},"code":["/**"," * @fileoverview Main CLI object."," * @author Nicholas C. Zakas"," */","","\"use strict\";","","/*"," * The CLI object should *not* call process.exit() directly. It should only return"," * exit codes. This allows other programs to use the CLI object and still control"," * when the program exits."," */","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    rules = require(\"./rules\"),","    eslint = require(\"./eslint\"),","    defaultOptions = require(\"../conf/cli-options\"),","    IgnoredPaths = require(\"./ignored-paths\"),","    Config = require(\"./config\"),","    Plugins = require(\"./config/plugins\"),","    fileEntryCache = require(\"file-entry-cache\"),","    globUtil = require(\"./util/glob-util\"),","    SourceCodeFixer = require(\"./util/source-code-fixer\"),","    validator = require(\"./config/config-validator\"),","    stringify = require(\"json-stable-stringify\"),","    hash = require(\"./util/hash\"),","","    pkg = require(\"../package.json\");","","const debug = require(\"debug\")(\"eslint:cli-engine\");","","//------------------------------------------------------------------------------","// Typedefs","//------------------------------------------------------------------------------","","/**"," * The options to configure a CLI engine with."," * @typedef {Object} CLIEngineOptions"," * @property {boolean} allowInlineConfig Enable or disable inline configuration comments."," * @property {boolean|Object} baseConfig Base config object. True enables recommend rules and environments."," * @property {boolean} cache Enable result caching."," * @property {string} cacheLocation The cache file to use instead of .eslintcache."," * @property {string} configFile The configuration file to use."," * @property {string} cwd The value to use for the current working directory."," * @property {string[]} envs An array of environments to load."," * @property {string[]} extensions An array of file extensions to check."," * @property {boolean} fix Execute in autofix mode."," * @property {string[]} globals An array of global variables to declare."," * @property {boolean} ignore False disables use of .eslintignore."," * @property {string} ignorePath The ignore file to use instead of .eslintignore."," * @property {string} ignorePattern A glob pattern of files to ignore."," * @property {boolean} useEslintrc False disables looking for .eslintrc"," * @property {string} parser The name of the parser to use."," * @property {Object} parserOptions An object of parserOption settings to use."," * @property {string[]} plugins An array of plugins to load."," * @property {Object<string,*>} rules An object of rules to use."," * @property {string[]} rulePaths An array of directories to load custom rules from."," */","","/**"," * A linting warning or error."," * @typedef {Object} LintMessage"," * @property {string} message The message to display to the user."," */","","/**"," * A linting result."," * @typedef {Object} LintResult"," * @property {string} filePath The path to the file that was linted."," * @property {LintMessage[]} messages All of the messages for the result."," * @property {number} errorCount Number or errors for the result."," * @property {number} warningCount Number or warnings for the result."," * @property {string=} [source] The source code of the file that was linted."," * @property {string=} [output] The source code of the file that was linted, with as many fixes applied as possible."," */","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * It will calculate the error and warning count for collection of messages per file"," * @param {Object[]} messages - Collection of messages"," * @returns {Object} Contains the stats"," * @private"," */","function calculateStatsPerFile(messages) {","    return messages.reduce((stat, message) => {","        if (message.fatal || message.severity === 2) {","            stat.errorCount++;","        } else {","            stat.warningCount++;","        }","        return stat;","    }, {","        errorCount: 0,","        warningCount: 0","    });","}","","/**"," * It will calculate the error and warning count for collection of results from all files"," * @param {Object[]} results - Collection of messages from all the files"," * @returns {Object} Contains the stats"," * @private"," */","function calculateStatsPerRun(results) {","    return results.reduce((stat, result) => {","        stat.errorCount += result.errorCount;","        stat.warningCount += result.warningCount;","        return stat;","    }, {","        errorCount: 0,","        warningCount: 0","    });","}","","/**"," * Performs multiple autofix passes over the text until as many fixes as possible"," * have been applied."," * @param {string} text The source text to apply fixes to."," * @param {Object} config The ESLint config object to use."," * @param {Object} options The ESLint options object to use."," * @param {string} options.filename The filename from which the text was read."," * @param {boolean} options.allowInlineConfig Flag indicating if inline comments"," *      should be allowed."," * @returns {Object} The result of the fix operation as returned from the"," *      SourceCodeFixer."," * @private"," */","function multipassFix(text, config, options) {","    const MAX_PASSES = 10;","    let messages = [],","        fixedResult,","        fixed = false,","        passNumber = 0;","","    /**","     * This loop continues until one of the following is true:","     *","     * 1. No more fixes have been applied.","     * 2. Ten passes have been made.","     *","     * That means anytime a fix is successfully applied, there will be another pass.","     * Essentially, guaranteeing a minimum of two passes.","     */","    do {","        passNumber++;","","        debug(`Linting code for ${options.filename} (pass ${passNumber})`);","        messages = eslint.verify(text, config, options);","","        debug(`Generating fixed text for ${options.filename} (pass ${passNumber})`);","        fixedResult = SourceCodeFixer.applyFixes(eslint.getSourceCode(), messages);","","        // stop if there are any syntax errors.","        // 'fixedResult.output' is a empty string.","        if (messages.length === 1 && messages[0].fatal) {","            break;","        }","","        // keep track if any fixes were ever applied - important for return value","        fixed = fixed || fixedResult.fixed;","","        // update to use the fixed output instead of the original text","        text = fixedResult.output;","","    } while (","        fixedResult.fixed &&","        passNumber < MAX_PASSES","    );","","","    /*","     * If the last result had fixes, we need to lint again to be sure we have","     * the most up-to-date information.","     */","    if (fixedResult.fixed) {","        fixedResult.messages = eslint.verify(text, config, options);","    }","","","    // ensure the last result properly reflects if fixes were done","    fixedResult.fixed = fixed;","    fixedResult.output = text;","","    return fixedResult;","","}","","/**"," * Processes an source code using ESLint."," * @param {string} text The source code to check."," * @param {Object} configHelper The configuration options for ESLint."," * @param {string} filename An optional string representing the texts filename."," * @param {boolean} fix Indicates if fixes should be processed."," * @param {boolean} allowInlineConfig Allow/ignore comments that change config."," * @returns {LintResult} The results for linting on this text."," * @private"," */","function processText(text, configHelper, filename, fix, allowInlineConfig) {","","    // clear all existing settings for a new file","    eslint.reset();","","    let filePath,","        messages,","        fileExtension,","        processor,","        fixedResult;","","    if (filename) {","        filePath = path.resolve(filename);","        fileExtension = path.extname(filename);","    }","","    filename = filename || \"<text>\";","    debug(`Linting ${filename}`);","    const config = configHelper.getConfig(filePath);","","    if (config.plugins) {","        Plugins.loadAll(config.plugins);","    }","","    const loadedPlugins = Plugins.getAll();","","    for (const plugin in loadedPlugins) {","        if (loadedPlugins[plugin].processors && Object.keys(loadedPlugins[plugin].processors).indexOf(fileExtension) >= 0) {","            processor = loadedPlugins[plugin].processors[fileExtension];","            break;","        }","    }","","    if (processor) {","        debug(\"Using processor\");","        const parsedBlocks = processor.preprocess(text, filename);","        const unprocessedMessages = [];","","        parsedBlocks.forEach(block => {","            unprocessedMessages.push(eslint.verify(block, config, {","                filename,","                allowInlineConfig","            }));","        });","","        // TODO(nzakas): Figure out how fixes might work for processors","","        messages = processor.postprocess(unprocessedMessages, filename);","","    } else {","","        if (fix) {","            fixedResult = multipassFix(text, config, {","                filename,","                allowInlineConfig","            });","            messages = fixedResult.messages;","        } else {","            messages = eslint.verify(text, config, {","                filename,","                allowInlineConfig","            });","        }","    }","","    const stats = calculateStatsPerFile(messages);","","    const result = {","        filePath: filename,","        messages,","        errorCount: stats.errorCount,","        warningCount: stats.warningCount","    };","","    if (fixedResult && fixedResult.fixed) {","        result.output = fixedResult.output;","    }","","    if (result.errorCount + result.warningCount > 0 && typeof result.output === \"undefined\") {","        result.source = text;","    }","","    return result;","}","","/**"," * Processes an individual file using ESLint. Files used here are known to"," * exist, so no need to check that here."," * @param {string} filename The filename of the file being checked."," * @param {Object} configHelper The configuration options for ESLint."," * @param {Object} options The CLIEngine options object."," * @returns {LintResult} The results for linting on this file."," * @private"," */","function processFile(filename, configHelper, options) {","","    const text = fs.readFileSync(path.resolve(filename), \"utf8\"),","        result = processText(text, configHelper, filename, options.fix, options.allowInlineConfig);","","    return result;","","}","","/**"," * Returns result with warning by ignore settings"," * @param {string} filePath - File path of checked code"," * @param {string} baseDir  - Absolute path of base directory"," * @returns {LintResult} Result with single warning"," * @private"," */","function createIgnoreResult(filePath, baseDir) {","    let message;","    const isHidden = /^\\./.test(path.basename(filePath));","    const isInNodeModules = baseDir && /^node_modules/.test(path.relative(baseDir, filePath));","    const isInBowerComponents = baseDir && /^bower_components/.test(path.relative(baseDir, filePath));","","    if (isHidden) {","        message = \"File ignored by default.  Use a negated ignore pattern (like \\\"--ignore-pattern '!<relative/path/to/filename>'\\\") to override.\";","    } else if (isInNodeModules) {","        message = \"File ignored by default. Use \\\"--ignore-pattern '!node_modules/*'\\\" to override.\";","    } else if (isInBowerComponents) {","        message = \"File ignored by default. Use \\\"--ignore-pattern '!bower_components/*'\\\" to override.\";","    } else {","        message = \"File ignored because of a matching ignore pattern. Use \\\"--no-ignore\\\" to override.\";","    }","","    return {","        filePath: path.resolve(filePath),","        messages: [","            {","                fatal: false,","                severity: 1,","                message","            }","        ],","        errorCount: 0,","        warningCount: 1","    };","}","","","/**"," * Checks if the given message is an error message."," * @param {Object} message The message to check."," * @returns {boolean} Whether or not the message is an error message."," * @private"," */","function isErrorMessage(message) {","    return message.severity === 2;","}","","","/**"," * return the cacheFile to be used by eslint, based on whether the provided parameter is"," * a directory or looks like a directory (ends in `path.sep`), in which case the file"," * name will be the `cacheFile/.cache_hashOfCWD`"," *"," * if cacheFile points to a file or looks like a file then in will just use that file"," *"," * @param {string} cacheFile The name of file to be used to store the cache"," * @param {string} cwd Current working directory"," * @returns {string} the resolved path to the cache file"," */","function getCacheFile(cacheFile, cwd) {","","    /*","     * make sure the path separators are normalized for the environment/os","     * keeping the trailing path separator if present","     */","    cacheFile = path.normalize(cacheFile);","","    const resolvedCacheFile = path.resolve(cwd, cacheFile);","    const looksLikeADirectory = cacheFile[cacheFile.length - 1 ] === path.sep;","","    /**","     * return the name for the cache file in case the provided parameter is a directory","     * @returns {string} the resolved path to the cacheFile","     */","    function getCacheFileForDirectory() {","        return path.join(resolvedCacheFile, `.cache_${hash(cwd)}`);","    }","","    let fileStats;","","    try {","        fileStats = fs.lstatSync(resolvedCacheFile);","    } catch (ex) {","        fileStats = null;","    }","","","    /*","     * in case the file exists we need to verify if the provided path","     * is a directory or a file. If it is a directory we want to create a file","     * inside that directory","     */","    if (fileStats) {","","        /*","         * is a directory or is a file, but the original file the user provided","         * looks like a directory but `path.resolve` removed the `last path.sep`","         * so we need to still treat this like a directory","         */","        if (fileStats.isDirectory() || looksLikeADirectory) {","            return getCacheFileForDirectory();","        }","","        // is file so just use that file","        return resolvedCacheFile;","    }","","    /*","     * here we known the file or directory doesn't exist,","     * so we will try to infer if its a directory if it looks like a directory","     * for the current operating system.","     */","","    // if the last character passed is a path separator we assume is a directory","    if (looksLikeADirectory) {","        return getCacheFileForDirectory();","    }","","    return resolvedCacheFile;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Creates a new instance of the core CLI engine."," * @param {CLIEngineOptions} options The options for this instance."," * @constructor"," */","function CLIEngine(options) {","","    options = Object.assign(","        Object.create(null),","        defaultOptions,","        { cwd: process.cwd() },","        options","    );","","    /**","     * Stored options for this instance","     * @type {Object}","     */","    this.options = options;","","    const cacheFile = getCacheFile(this.options.cacheLocation || this.options.cacheFile, this.options.cwd);","","    /**","     * Cache used to avoid operating on files that haven't changed since the","     * last successful execution (e.g., file passed linting with no errors and","     * no warnings).","     * @type {Object}","     */","    this._fileCache = fileEntryCache.create(cacheFile);","","    // load in additional rules","    if (this.options.rulePaths) {","        const cwd = this.options.cwd;","","        this.options.rulePaths.forEach(rulesdir => {","            debug(`Loading rules from ${rulesdir}`);","            rules.load(rulesdir, cwd);","        });","    }","","    Object.keys(this.options.rules || {}).forEach(name => {","        validator.validateRuleOptions(name, this.options.rules[name], \"CLI\");","    });","}","","/**"," * Returns the formatter representing the given format or null if no formatter"," * with the given name can be found."," * @param {string} [format] The name of the format to load or the path to a"," *      custom formatter."," * @returns {Function} The formatter function or null if not found."," */","CLIEngine.getFormatter = function(format) {","","    let formatterPath;","","    // default is stylish","    format = format || \"stylish\";","","    // only strings are valid formatters","    if (typeof format === \"string\") {","","        // replace \\ with / for Windows compatibility","        format = format.replace(/\\\\/g, \"/\");","","        // if there's a slash, then it's a file","        if (format.indexOf(\"/\") > -1) {","            const cwd = this.options ? this.options.cwd : process.cwd();","","            formatterPath = path.resolve(cwd, format);","        } else {","            formatterPath = `./formatters/${format}`;","        }","","        try {","            return require(formatterPath);","        } catch (ex) {","            ex.message = `There was a problem loading formatter: ${formatterPath}\\nError: ${ex.message}`;","            throw ex;","        }","","    } else {","        return null;","    }","};","","/**"," * Returns results that only contains errors."," * @param {LintResult[]} results The results to filter."," * @returns {LintResult[]} The filtered results."," */","CLIEngine.getErrorResults = function(results) {","    const filtered = [];","","    results.forEach(result => {","        const filteredMessages = result.messages.filter(isErrorMessage);","","        if (filteredMessages.length > 0) {","            filtered.push(","                Object.assign(result, {","                    messages: filteredMessages,","                    errorCount: filteredMessages.length,","                    warningCount: 0","                })","            );","        }","    });","","    return filtered;","};","","/**"," * Outputs fixes from the given results to files."," * @param {Object} report The report object created by CLIEngine."," * @returns {void}"," */","CLIEngine.outputFixes = function(report) {","    report.results.filter(result => result.hasOwnProperty(\"output\")).forEach(result => {","        fs.writeFileSync(result.filePath, result.output);","    });","};","","CLIEngine.prototype = {","","    constructor: CLIEngine,","","    /**","     * Add a plugin by passing it's configuration","     * @param {string} name Name of the plugin.","     * @param {Object} pluginobject Plugin configuration object.","     * @returns {void}","     */","    addPlugin(name, pluginobject) {","        Plugins.define(name, pluginobject);","    },","","    /**","     * Resolves the patterns passed into executeOnFiles() into glob-based patterns","     * for easier handling.","     * @param {string[]} patterns The file patterns passed on the command line.","     * @returns {string[]} The equivalent glob patterns.","     */","    resolveFileGlobPatterns(patterns) {","        return globUtil.resolveFileGlobPatterns(patterns, this.options);","    },","","    /**","     * Executes the current configuration on an array of file and directory names.","     * @param {string[]} patterns An array of file and directory names.","     * @returns {Object} The results for all files that were linted.","     */","    executeOnFiles(patterns) {","        const results = [],","            options = this.options,","            fileCache = this._fileCache,","            configHelper = new Config(options);","        let prevConfig; // the previous configuration used","","        /**","         * Calculates the hash of the config file used to validate a given file","         * @param  {string} filename The path of the file to retrieve a config object for to calculate the hash","         * @returns {string}         the hash of the config","         */","        function hashOfConfigFor(filename) {","            const config = configHelper.getConfig(filename);","","            if (!prevConfig) {","                prevConfig = {};","            }","","            // reuse the previously hashed config if the config hasn't changed","            if (prevConfig.config !== config) {","","                /*","                 * config changed so we need to calculate the hash of the config","                 * and the hash of the plugins being used","                 */","                prevConfig.config = config;","","                const eslintVersion = pkg.version;","","                prevConfig.hash = hash(`${eslintVersion}_${stringify(config)}`);","            }","","            return prevConfig.hash;","        }","","        /**","         * Executes the linter on a file defined by the `filename`. Skips","         * unsupported file extensions and any files that are already linted.","         * @param {string} filename The resolved filename of the file to be linted","         * @param {boolean} warnIgnored always warn when a file is ignored","         * @returns {void}","         */","        function executeOnFile(filename, warnIgnored) {","            let hashOfConfig,","                descriptor;","","            if (warnIgnored) {","                results.push(createIgnoreResult(filename, options.cwd));","                return;","            }","","            if (options.cache) {","","                /*","                 * get the descriptor for this file","                 * with the metadata and the flag that determines if","                 * the file has changed","                 */","                descriptor = fileCache.getFileDescriptor(filename);","                const meta = descriptor.meta || {};","","                hashOfConfig = hashOfConfigFor(filename);","","                const changed = descriptor.changed || meta.hashOfConfig !== hashOfConfig;","","                if (!changed) {","                    debug(`Skipping file since hasn't changed: ${filename}`);","","                    /*","                     * Add the the cached results (always will be 0 error and","                     * 0 warnings). We should not cache results for files that","                     * failed, in order to guarantee that next execution will","                     * process those files as well.","                     */","                    results.push(descriptor.meta.results);","","                    // move to the next file","                    return;","                }","            } else {","                fileCache.destroy();","            }","","            debug(`Processing ${filename}`);","","            const res = processFile(filename, configHelper, options);","","            if (options.cache) {","","                /*","                 * if a file contains errors or warnings we don't want to","                 * store the file in the cache so we can guarantee that","                 * next execution will also operate on this file","                 */","                if (res.errorCount > 0 || res.warningCount > 0) {","                    debug(`File has problems, skipping it: ${filename}`);","","                    // remove the entry from the cache","                    fileCache.removeEntry(filename);","                } else {","","                    /*","                     * since the file passed we store the result here","                     * TODO: check this as we might not need to store the","                     * successful runs as it will always should be 0 errors and","                     * 0 warnings.","                     */","                    descriptor.meta.hashOfConfig = hashOfConfig;","                    descriptor.meta.results = res;","                }","            }","","            results.push(res);","        }","","        const startTime = Date.now();","","","","        patterns = this.resolveFileGlobPatterns(patterns);","        const fileList = globUtil.listFilesToProcess(patterns, options);","","        fileList.forEach(fileInfo => {","            executeOnFile(fileInfo.filename, fileInfo.ignored);","        });","","        const stats = calculateStatsPerRun(results);","","        if (options.cache) {","","            // persist the cache to disk","            fileCache.reconcile();","        }","","        debug(`Linting complete in: ${Date.now() - startTime}ms`);","","        return {","            results,","            errorCount: stats.errorCount,","            warningCount: stats.warningCount","        };","    },","","    /**","     * Executes the current configuration on text.","     * @param {string} text A string of JavaScript code to lint.","     * @param {string} filename An optional string representing the texts filename.","     * @param {boolean} warnIgnored Always warn when a file is ignored","     * @returns {Object} The results for the linting.","     */","    executeOnText(text, filename, warnIgnored) {","","        const results = [],","            options = this.options,","            configHelper = new Config(options),","            ignoredPaths = new IgnoredPaths(options);","","        // resolve filename based on options.cwd (for reporting, ignoredPaths also resolves)","        if (filename && !path.isAbsolute(filename)) {","            filename = path.resolve(options.cwd, filename);","        }","","        if (filename && ignoredPaths.contains(filename)) {","            if (warnIgnored) {","                results.push(createIgnoreResult(filename, options.cwd));","            }","        } else {","            results.push(processText(text, configHelper, filename, options.fix, options.allowInlineConfig));","        }","","        const stats = calculateStatsPerRun(results);","","        return {","            results,","            errorCount: stats.errorCount,","            warningCount: stats.warningCount","        };","    },","","    /**","     * Returns a configuration object for the given file based on the CLI options.","     * This is the same logic used by the ESLint CLI executable to determine","     * configuration for each file it processes.","     * @param {string} filePath The path of the file to retrieve a config object for.","     * @returns {Object} A configuration object for the file.","     */","    getConfigForFile(filePath) {","        const configHelper = new Config(this.options);","","        return configHelper.getConfig(filePath);","    },","","    /**","     * Checks if a given path is ignored by ESLint.","     * @param {string} filePath The path of the file to check.","     * @returns {boolean} Whether or not the given path is ignored.","     */","    isPathIgnored(filePath) {","        const resolvedPath = path.resolve(this.options.cwd, filePath);","        const ignoredPaths = new IgnoredPaths(this.options);","","        return ignoredPaths.contains(resolvedPath);","    },","","    getFormatter: CLIEngine.getFormatter","","};","","CLIEngine.version = pkg.version;","","module.exports = CLIEngine;",""],"l":{"18":1,"35":1,"92":1,"93":0,"94":0,"95":0,"97":0,"99":0,"112":1,"113":0,"114":0,"115":0,"116":0,"136":1,"137":0,"138":0,"152":0,"153":0,"155":0,"156":0,"158":0,"159":0,"163":0,"164":0,"168":0,"171":0,"183":0,"184":0,"189":0,"190":0,"192":0,"206":1,"209":0,"211":0,"217":0,"218":0,"219":0,"222":0,"223":0,"224":0,"226":0,"227":0,"230":0,"232":0,"233":0,"234":0,"235":0,"239":0,"240":0,"241":0,"242":0,"244":0,"245":0,"253":0,"257":0,"258":0,"262":0,"264":0,"271":0,"273":0,"280":0,"281":0,"284":0,"285":0,"288":0,"300":1,"302":0,"305":0,"316":1,"317":0,"318":0,"319":0,"320":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"329":0,"332":0,"353":1,"354":0,"369":1,"375":0,"377":0,"378":0,"384":1,"385":0,"388":0,"390":0,"391":0,"393":0,"402":0,"409":0,"410":0,"414":0,"424":0,"425":0,"428":0,"440":1,"442":0,"453":0,"455":0,"463":0,"466":0,"467":0,"469":0,"470":0,"471":0,"475":0,"476":0,"487":1,"489":0,"492":0,"495":0,"498":0,"501":0,"502":0,"504":0,"506":0,"509":0,"510":0,"512":0,"513":0,"517":0,"526":1,"527":0,"529":0,"530":0,"532":0,"533":0,"543":0,"551":1,"552":0,"553":0,"557":1,"568":0,"578":0,"587":0,"591":0,"598":1,"599":0,"601":0,"602":0,"606":0,"612":0,"614":0,"616":0,"619":0,"629":1,"630":0,"633":0,"634":0,"635":0,"638":0,"645":0,"646":0,"648":0,"650":0,"652":0,"653":0,"661":0,"664":0,"667":0,"670":0,"672":0,"674":0,"681":0,"682":0,"685":0,"694":0,"695":0,"699":0,"702":0,"706":0,"707":0,"709":0,"710":0,"713":0,"715":0,"718":0,"721":0,"723":0,"739":0,"745":0,"746":0,"749":0,"750":0,"751":0,"754":0,"757":0,"759":0,"774":0,"776":0,"785":0,"786":0,"788":0,"795":1,"797":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/conf/cli-options.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/conf/cli-options.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":29,"column":2}}},"branchMap":{},"code":["/**"," * @fileoverview Default CLIEngineOptions."," * @author Ian VanSchooten"," */","","\"use strict\";","","module.exports = {","    configFile: null,","    baseConfig: false,","    rulePaths: [],","    useEslintrc: true,","    envs: [],","    globals: [],","    rules: {},","    extensions: [\".js\"],","    ignore: true,","    ignorePath: null,","    parser: \"\",     // must be empty","    cache: false,","","    // in order to honor the cacheFile option if specified","    // this option should not have a default value otherwise","    // it will always be used","    cacheLocation: \"\",","    cacheFile: \".eslintcache\",","    fix: false,","    allowInlineConfig: true","};",""],"l":{"8":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/ignored-paths.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/ignored-paths.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"findIgnoreFile","line":52,"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":29}}},"2":{"name":"mergeDefaultOptions","line":65,"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":38}}},"3":{"name":"(anonymous_3)","line":82,"loc":{"start":{"line":82,"column":15},"end":{"line":82,"column":25}}},"4":{"name":"addPattern","line":91,"loc":{"start":{"line":91,"column":8},"end":{"line":91,"column":41}}},"5":{"name":"addIgnoreFile","line":101,"loc":{"start":{"line":101,"column":8},"end":{"line":101,"column":45}}},"6":{"name":"(anonymous_6)","line":178,"loc":{"start":{"line":178,"column":12},"end":{"line":178,"column":33}}},"7":{"name":"(anonymous_7)","line":200,"loc":{"start":{"line":200,"column":32},"end":{"line":200,"column":35}}},"8":{"name":"(anonymous_8)","line":226,"loc":{"start":{"line":226,"column":15},"end":{"line":226,"column":38}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":16,"column":43}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":55}},"3":{"start":{"line":25,"column":0},"end":{"line":25,"column":47}},"4":{"start":{"line":32,"column":0},"end":{"line":35,"column":2}},"5":{"start":{"line":36,"column":0},"end":{"line":39,"column":2}},"6":{"start":{"line":52,"column":0},"end":{"line":58,"column":1}},"7":{"start":{"line":53,"column":4},"end":{"line":53,"column":37}},"8":{"start":{"line":55,"column":4},"end":{"line":55,"column":69}},"9":{"start":{"line":57,"column":4},"end":{"line":57,"column":66}},"10":{"start":{"line":65,"column":0},"end":{"line":68,"column":1}},"11":{"start":{"line":66,"column":4},"end":{"line":66,"column":30}},"12":{"start":{"line":67,"column":4},"end":{"line":67,"column":55}},"13":{"start":{"line":83,"column":8},"end":{"line":83,"column":47}},"14":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"15":{"start":{"line":92,"column":12},"end":{"line":92,"column":42}},"16":{"start":{"line":101,"column":8},"end":{"line":104,"column":9}},"17":{"start":{"line":102,"column":12},"end":{"line":102,"column":42}},"18":{"start":{"line":103,"column":12},"end":{"line":103,"column":61}},"19":{"start":{"line":106,"column":8},"end":{"line":106,"column":86}},"20":{"start":{"line":107,"column":8},"end":{"line":107,"column":35}},"21":{"start":{"line":109,"column":8},"end":{"line":112,"column":10}},"22":{"start":{"line":116,"column":8},"end":{"line":116,"column":40}},"23":{"start":{"line":117,"column":8},"end":{"line":117,"column":41}},"24":{"start":{"line":119,"column":8},"end":{"line":126,"column":9}},"25":{"start":{"line":125,"column":12},"end":{"line":125,"column":56}},"26":{"start":{"line":128,"column":8},"end":{"line":128,"column":58}},"27":{"start":{"line":130,"column":8},"end":{"line":167,"column":9}},"28":{"start":{"line":131,"column":12},"end":{"line":131,"column":27}},"29":{"start":{"line":133,"column":12},"end":{"line":154,"column":13}},"30":{"start":{"line":134,"column":16},"end":{"line":134,"column":52}},"31":{"start":{"line":136,"column":16},"end":{"line":142,"column":17}},"32":{"start":{"line":137,"column":20},"end":{"line":137,"column":52}},"33":{"start":{"line":138,"column":20},"end":{"line":138,"column":52}},"34":{"start":{"line":140,"column":20},"end":{"line":140,"column":102}},"35":{"start":{"line":141,"column":20},"end":{"line":141,"column":28}},"36":{"start":{"line":144,"column":16},"end":{"line":144,"column":67}},"37":{"start":{"line":145,"column":16},"end":{"line":145,"column":57}},"38":{"start":{"line":147,"column":16},"end":{"line":153,"column":17}},"39":{"start":{"line":148,"column":20},"end":{"line":148,"column":44}},"40":{"start":{"line":149,"column":20},"end":{"line":149,"column":62}},"41":{"start":{"line":151,"column":20},"end":{"line":151,"column":63}},"42":{"start":{"line":152,"column":20},"end":{"line":152,"column":43}},"43":{"start":{"line":156,"column":12},"end":{"line":161,"column":13}},"44":{"start":{"line":157,"column":16},"end":{"line":157,"column":46}},"45":{"start":{"line":158,"column":16},"end":{"line":158,"column":83}},"46":{"start":{"line":159,"column":16},"end":{"line":159,"column":58}},"47":{"start":{"line":160,"column":16},"end":{"line":160,"column":59}},"48":{"start":{"line":163,"column":12},"end":{"line":166,"column":13}},"49":{"start":{"line":164,"column":16},"end":{"line":164,"column":66}},"50":{"start":{"line":165,"column":16},"end":{"line":165,"column":67}},"51":{"start":{"line":169,"column":8},"end":{"line":169,"column":31}},"52":{"start":{"line":180,"column":8},"end":{"line":180,"column":27}},"53":{"start":{"line":181,"column":8},"end":{"line":181,"column":70}},"54":{"start":{"line":182,"column":8},"end":{"line":182,"column":86}},"55":{"start":{"line":184,"column":8},"end":{"line":186,"column":9}},"56":{"start":{"line":185,"column":12},"end":{"line":185,"column":85}},"57":{"start":{"line":188,"column":8},"end":{"line":190,"column":9}},"58":{"start":{"line":189,"column":12},"end":{"line":189,"column":84}},"59":{"start":{"line":192,"column":8},"end":{"line":192,"column":22}},"60":{"start":{"line":202,"column":8},"end":{"line":202,"column":53}},"61":{"start":{"line":204,"column":8},"end":{"line":208,"column":9}},"62":{"start":{"line":207,"column":12},"end":{"line":207,"column":37}},"63":{"start":{"line":210,"column":8},"end":{"line":212,"column":9}},"64":{"start":{"line":211,"column":12},"end":{"line":211,"column":35}},"65":{"start":{"line":214,"column":8},"end":{"line":214,"column":41}},"66":{"start":{"line":224,"column":8},"end":{"line":224,"column":38}},"67":{"start":{"line":226,"column":8},"end":{"line":234,"column":10}},"68":{"start":{"line":227,"column":12},"end":{"line":227,"column":74}},"69":{"start":{"line":229,"column":12},"end":{"line":231,"column":13}},"70":{"start":{"line":230,"column":16},"end":{"line":230,"column":29}},"71":{"start":{"line":233,"column":12},"end":{"line":233,"column":37}},"72":{"start":{"line":238,"column":0},"end":{"line":238,"column":30}}},"branchMap":{"1":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":10},"end":{"line":53,"column":13}},{"start":{"line":53,"column":17},"end":{"line":53,"column":36}}]},"2":{"line":57,"type":"cond-expr","locations":[{"start":{"line":57,"column":46},"end":{"line":57,"column":60}},{"start":{"line":57,"column":63},"end":{"line":57,"column":65}}]},"3":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":15},"end":{"line":66,"column":22}},{"start":{"line":66,"column":26},"end":{"line":66,"column":28}}]},"4":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":62},"end":{"line":106,"column":78}},{"start":{"line":106,"column":82},"end":{"line":106,"column":84}}]},"5":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":119,"column":8}},{"start":{"line":119,"column":8},"end":{"line":119,"column":8}}]},"6":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":8}},{"start":{"line":130,"column":8},"end":{"line":130,"column":8}}]},"7":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":12},"end":{"line":133,"column":12}},{"start":{"line":133,"column":12},"end":{"line":133,"column":12}}]},"8":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":12},"end":{"line":156,"column":12}},{"start":{"line":156,"column":12},"end":{"line":156,"column":12}}]},"9":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":12},"end":{"line":163,"column":12}},{"start":{"line":163,"column":12},"end":{"line":163,"column":12}}]},"10":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":8},"end":{"line":184,"column":8}},{"start":{"line":184,"column":8},"end":{"line":184,"column":8}}]},"11":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":13},"end":{"line":184,"column":44}},{"start":{"line":184,"column":50},"end":{"line":184,"column":72}}]},"12":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":21},"end":{"line":185,"column":27}},{"start":{"line":185,"column":32},"end":{"line":185,"column":83}}]},"13":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":8},"end":{"line":188,"column":8}},{"start":{"line":188,"column":8},"end":{"line":188,"column":8}}]},"14":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":13},"end":{"line":188,"column":44}},{"start":{"line":188,"column":50},"end":{"line":188,"column":71}}]},"15":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":21},"end":{"line":189,"column":27}},{"start":{"line":189,"column":32},"end":{"line":189,"column":82}}]},"16":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":8},"end":{"line":204,"column":8}},{"start":{"line":204,"column":8},"end":{"line":204,"column":8}}]},"17":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":8},"end":{"line":210,"column":8}},{"start":{"line":210,"column":8},"end":{"line":210,"column":8}}]},"18":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":12},"end":{"line":229,"column":12}},{"start":{"line":229,"column":12},"end":{"line":229,"column":12}}]}},"code":["/**"," * @fileoverview Responsible for loading ignore config files and managing ignore patterns"," * @author Jonathan Rajavuori"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    ignore = require(\"ignore\"),","    shell = require(\"shelljs\"),","    pathUtil = require(\"./util/path-util\");","","const debug = require(\"debug\")(\"eslint:ignored-paths\");","","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const ESLINT_IGNORE_FILENAME = \".eslintignore\";","","/**"," * Adds `\"*\"` at the end of `\"node_modules/\"`,"," * so that subtle directories could be re-included by .gitignore patterns"," * such as `\"!node_modules/should_not_ignored\"`"," */","const DEFAULT_IGNORE_DIRS = [","    \"/node_modules/*\",","    \"/bower_components/*\"","];","const DEFAULT_OPTIONS = {","    dotfiles: false,","    cwd: process.cwd()","};","","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","","/**"," * Find an ignore file in the current directory."," * @param {string} cwd Current working directory"," * @returns {string} Path of ignore file or an empty string."," */","function findIgnoreFile(cwd) {","    cwd = cwd || DEFAULT_OPTIONS.cwd;","","    const ignoreFilePath = path.resolve(cwd, ESLINT_IGNORE_FILENAME);","","    return shell.test(\"-f\", ignoreFilePath) ? ignoreFilePath : \"\";","}","","/**"," * Merge options with defaults"," * @param {Object} options Options to merge with DEFAULT_OPTIONS constant"," * @returns {Object} Merged options"," */","function mergeDefaultOptions(options) {","    options = (options || {});","    return Object.assign({}, DEFAULT_OPTIONS, options);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * IgnoredPaths class"," */","class IgnoredPaths {","","    /**","     * @param {Object} options object containing 'ignore', 'ignorePath' and 'patterns' properties","     */","    constructor(options) {","        options = mergeDefaultOptions(options);","","        /**","         * add pattern to node-ignore instance","         * @param {Object} ig, instance of node-ignore","         * @param {string} pattern, pattern do add to ig","         * @returns {array} raw ignore rules","         */","        function addPattern(ig, pattern) {","            return ig.addPattern(pattern);","        }","","        /**","         * add ignore file to node-ignore instance","         * @param {Object} ig, instance of node-ignore","         * @param {string} filepath, file to add to ig","         * @returns {array} raw ignore rules","         */","        function addIgnoreFile(ig, filepath) {","            ig.ignoreFiles.push(filepath);","            return ig.add(fs.readFileSync(filepath, \"utf8\"));","        }","","        this.defaultPatterns = [].concat(DEFAULT_IGNORE_DIRS, options.patterns || []);","        this.baseDir = options.cwd;","","        this.ig = {","            custom: ignore(),","            default: ignore()","        };","","        // Add a way to keep track of ignored files.  This was present in node-ignore","        // 2.x, but dropped for now as of 3.0.10.","        this.ig.custom.ignoreFiles = [];","        this.ig.default.ignoreFiles = [];","","        if (options.dotfiles !== true) {","","            /*","             * ignore files beginning with a dot, but not files in a parent or","             * ancestor directory (which in relative format will begin with `../`).","             */","            addPattern(this.ig.default, [\".*\", \"!../\"]);","        }","","        addPattern(this.ig.default, this.defaultPatterns);","","        if (options.ignore !== false) {","            let ignorePath;","","            if (options.ignorePath) {","                debug(\"Using specific ignore file\");","","                try {","                    fs.statSync(options.ignorePath);","                    ignorePath = options.ignorePath;","                } catch (e) {","                    e.message = `Cannot read ignore file: ${options.ignorePath}\\nError: ${e.message}`;","                    throw e;","                }","            } else {","                debug(`Looking for ignore file in ${options.cwd}`);","                ignorePath = findIgnoreFile(options.cwd);","","                try {","                    fs.statSync(ignorePath);","                    debug(`Loaded ignore file ${ignorePath}`);","                } catch (e) {","                    debug(\"Could not find ignore file in cwd\");","                    this.options = options;","                }","            }","","            if (ignorePath) {","                debug(`Adding ${ignorePath}`);","                this.baseDir = path.dirname(path.resolve(options.cwd, ignorePath));","                addIgnoreFile(this.ig.custom, ignorePath);","                addIgnoreFile(this.ig.default, ignorePath);","            }","","            if (options.ignorePattern) {","                addPattern(this.ig.custom, options.ignorePattern);","                addPattern(this.ig.default, options.ignorePattern);","            }","        }","","        this.options = options;","    }","","    /**","     * Determine whether a file path is included in the default or custom ignore patterns","     * @param {string} filepath Path to check","     * @param {string} [category=null] check 'default', 'custom' or both (null)","     * @returns {boolean} true if the file path matches one or more patterns, false otherwise","     */","    contains(filepath, category) {","","        let result = false;","        const absolutePath = path.resolve(this.options.cwd, filepath);","        const relativePath = pathUtil.getRelativePath(absolutePath, this.options.cwd);","","        if ((typeof category === \"undefined\") || (category === \"default\")) {","            result = result || (this.ig.default.filter([relativePath]).length === 0);","        }","","        if ((typeof category === \"undefined\") || (category === \"custom\")) {","            result = result || (this.ig.custom.filter([relativePath]).length === 0);","        }","","        return result;","","    }","","    /**","     * Returns a list of dir patterns for glob to ignore","     * @returns {function()} method to check whether a folder should be ignored by glob.","     */","    getIgnoredFoldersGlobChecker() {","","        const ig = ignore().add(DEFAULT_IGNORE_DIRS);","","        if (this.options.dotfiles !== true) {","","            // Ignore hidden folders.  (This cannot be \".*\", or else it's not possible to unignore hidden files)","            ig.add([\".*/*\", \"!../\"]);","        }","","        if (this.options.ignore) {","            ig.add(this.ig.custom);","        }","","        const filter = ig.createFilter();","","        /**","         * TODO","         * 1.","         * Actually, it should be `this.options.baseDir`, which is the base dir of `ignore-path`,","         * as well as Line 177.","         * But doing this leads to a breaking change and fails tests.","         * Related to #6759","         */","        const base = this.options.cwd;","","        return function(absolutePath) {","            const relative = pathUtil.getRelativePath(absolutePath, base);","","            if (!relative) {","                return false;","            }","","            return !filter(relative);","        };","    }","}","","module.exports = IgnoredPaths;",""],"l":{"12":1,"18":1,"25":1,"32":1,"36":1,"52":1,"53":0,"55":0,"57":0,"65":1,"66":0,"67":0,"83":0,"91":1,"92":0,"101":1,"102":0,"103":0,"106":0,"107":0,"109":0,"116":0,"117":0,"119":0,"125":0,"128":0,"130":0,"131":0,"133":0,"134":0,"136":0,"137":0,"138":0,"140":0,"141":0,"144":0,"145":0,"147":0,"148":0,"149":0,"151":0,"152":0,"156":0,"157":0,"158":0,"159":0,"160":0,"163":0,"164":0,"165":0,"169":0,"180":0,"181":0,"182":0,"184":0,"185":0,"188":0,"189":0,"192":0,"202":0,"204":0,"207":0,"210":0,"211":0,"214":0,"224":0,"226":0,"227":0,"229":0,"230":0,"233":0,"238":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/path-util.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/path-util.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"convertPathToPosix","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":38}}},"2":{"name":"getRelativePath","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":44}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":29}},"2":{"start":{"line":23,"column":0},"end":{"line":28,"column":1}},"3":{"start":{"line":24,"column":4},"end":{"line":24,"column":56}},"4":{"start":{"line":25,"column":4},"end":{"line":25,"column":65}},"5":{"start":{"line":27,"column":4},"end":{"line":27,"column":25}},"6":{"start":{"line":50,"column":0},"end":{"line":65,"column":1}},"7":{"start":{"line":51,"column":4},"end":{"line":51,"column":21}},"8":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"9":{"start":{"line":54,"column":8},"end":{"line":54,"column":42}},"10":{"start":{"line":56,"column":4},"end":{"line":63,"column":5}},"11":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"12":{"start":{"line":58,"column":12},"end":{"line":58,"column":66}},"13":{"start":{"line":60,"column":8},"end":{"line":60,"column":56}},"14":{"start":{"line":62,"column":8},"end":{"line":62,"column":51}},"15":{"start":{"line":64,"column":4},"end":{"line":64,"column":24}},"16":{"start":{"line":71,"column":0},"end":{"line":74,"column":2}}},"branchMap":{"1":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]}},"code":["/**"," * @fileoverview Common helpers for operations on filenames and paths"," * @author Ian VanSchooten"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const path = require(\"path\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * Replace Windows with posix style paths"," *"," * @param {string} filepath   Path to convert"," * @returns {string}          Converted filepath"," */","function convertPathToPosix(filepath) {","    const normalizedFilepath = path.normalize(filepath);","    const posixFilepath = normalizedFilepath.replace(/\\\\/g, \"/\");","","    return posixFilepath;","}","","/**"," * Converts an absolute filepath to a relative path from a given base path"," *"," * For example, if the filepath is `/my/awesome/project/foo.bar`,"," * and the base directory is `/my/awesome/project/`,"," * then this function should return `foo.bar`."," *"," * path.relative() does something similar, but it requires a baseDir (`from` argument)."," * This function makes it optional and just removes a leading slash if the baseDir is not given."," *"," * It does not take into account symlinks (for now)."," *"," * @param {string} filepath  Path to convert to relative path.  If already relative,"," *                           it will be assumed to be relative to process.cwd(),"," *                           converted to absolute, and then processed."," * @param {string} [baseDir] Absolute base directory to resolve the filepath from."," *                           If not provided, all this function will do is remove"," *                           a leading slash."," * @returns {string} Relative filepath"," */","function getRelativePath(filepath, baseDir) {","    let relativePath;","","    if (!path.isAbsolute(filepath)) {","        filepath = path.resolve(filepath);","    }","    if (baseDir) {","        if (!path.isAbsolute(baseDir)) {","            throw new Error(\"baseDir should be an absolute path\");","        }","        relativePath = path.relative(baseDir, filepath);","    } else {","        relativePath = filepath.replace(/^\\//, \"\");","    }","    return relativePath;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","    convertPathToPosix,","    getRelativePath","};",""],"l":{"11":1,"23":1,"24":0,"25":0,"27":0,"50":1,"51":0,"53":0,"54":0,"56":0,"57":0,"58":0,"60":0,"62":0,"64":0,"71":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":1},"b":{"1":[1,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"isObject","line":39,"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}}},"2":{"name":"loadConfig","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":34}}},"3":{"name":"getPersonalConfig","line":76,"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":29}}},"4":{"name":"hasRules","line":96,"loc":{"start":{"line":96,"column":0},"end":{"line":96,"column":27}}},"5":{"name":"getLocalConfig","line":106,"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":47}}},"6":{"name":"(anonymous_6)","line":190,"loc":{"start":{"line":190,"column":15},"end":{"line":190,"column":25}}},"7":{"name":"(anonymous_7)","line":243,"loc":{"start":{"line":243,"column":13},"end":{"line":243,"column":24}}},"8":{"name":"(anonymous_8)","line":328,"loc":{"start":{"line":328,"column":24},"end":{"line":328,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":19,"column":45}},"2":{"start":{"line":21,"column":0},"end":{"line":21,"column":48}},"3":{"start":{"line":27,"column":0},"end":{"line":27,"column":45}},"4":{"start":{"line":39,"column":0},"end":{"line":41,"column":1}},"5":{"start":{"line":40,"column":4},"end":{"line":40,"column":77}},"6":{"start":{"line":49,"column":0},"end":{"line":69,"column":1}},"7":{"start":{"line":50,"column":4},"end":{"line":51,"column":22}},"8":{"start":{"line":53,"column":4},"end":{"line":66,"column":5}},"9":{"start":{"line":55,"column":8},"end":{"line":64,"column":9}},"10":{"start":{"line":56,"column":12},"end":{"line":56,"column":34}},"11":{"start":{"line":58,"column":12},"end":{"line":60,"column":13}},"12":{"start":{"line":59,"column":16},"end":{"line":59,"column":67}},"13":{"start":{"line":62,"column":12},"end":{"line":62,"column":36}},"14":{"start":{"line":63,"column":12},"end":{"line":63,"column":47}},"15":{"start":{"line":68,"column":4},"end":{"line":68,"column":18}},"16":{"start":{"line":76,"column":0},"end":{"line":89,"column":1}},"17":{"start":{"line":77,"column":4},"end":{"line":77,"column":15}},"18":{"start":{"line":79,"column":4},"end":{"line":86,"column":5}},"19":{"start":{"line":80,"column":8},"end":{"line":80,"column":81}},"20":{"start":{"line":82,"column":8},"end":{"line":85,"column":9}},"21":{"start":{"line":83,"column":12},"end":{"line":83,"column":43}},"22":{"start":{"line":84,"column":12},"end":{"line":84,"column":42}},"23":{"start":{"line":88,"column":4},"end":{"line":88,"column":26}},"24":{"start":{"line":96,"column":0},"end":{"line":98,"column":1}},"25":{"start":{"line":97,"column":4},"end":{"line":97,"column":66}},"26":{"start":{"line":106,"column":0},"end":{"line":175,"column":1}},"27":{"start":{"line":107,"column":4},"end":{"line":109,"column":87}},"28":{"start":{"line":110,"column":4},"end":{"line":112,"column":17}},"29":{"start":{"line":114,"column":4},"end":{"line":145,"column":5}},"30":{"start":{"line":116,"column":8},"end":{"line":116,"column":52}},"31":{"start":{"line":120,"column":8},"end":{"line":122,"column":9}},"32":{"start":{"line":121,"column":12},"end":{"line":121,"column":21}},"33":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"34":{"start":{"line":126,"column":12},"end":{"line":126,"column":21}},"35":{"start":{"line":129,"column":8},"end":{"line":129,"column":44}},"36":{"start":{"line":130,"column":8},"end":{"line":130,"column":56}},"37":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"38":{"start":{"line":134,"column":12},"end":{"line":134,"column":21}},"39":{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},"40":{"start":{"line":139,"column":12},"end":{"line":139,"column":53}},"41":{"start":{"line":142,"column":8},"end":{"line":142,"column":21}},"42":{"start":{"line":143,"column":8},"end":{"line":143,"column":42}},"43":{"start":{"line":144,"column":8},"end":{"line":144,"column":54}},"44":{"start":{"line":147,"column":4},"end":{"line":172,"column":5}},"45":{"start":{"line":155,"column":8},"end":{"line":155,"column":51}},"46":{"start":{"line":157,"column":8},"end":{"line":171,"column":9}},"47":{"start":{"line":158,"column":12},"end":{"line":158,"column":61}},"48":{"start":{"line":159,"column":15},"end":{"line":171,"column":9}},"49":{"start":{"line":162,"column":12},"end":{"line":162,"column":78}},"50":{"start":{"line":164,"column":12},"end":{"line":164,"column":62}},"51":{"start":{"line":165,"column":12},"end":{"line":168,"column":14}},"52":{"start":{"line":170,"column":12},"end":{"line":170,"column":32}},"53":{"start":{"line":174,"column":4},"end":{"line":174,"column":18}},"54":{"start":{"line":191,"column":8},"end":{"line":191,"column":32}},"55":{"start":{"line":193,"column":8},"end":{"line":193,"column":37}},"56":{"start":{"line":194,"column":8},"end":{"line":194,"column":45}},"57":{"start":{"line":195,"column":8},"end":{"line":195,"column":24}},"58":{"start":{"line":196,"column":8},"end":{"line":196,"column":37}},"59":{"start":{"line":197,"column":8},"end":{"line":197,"column":57}},"60":{"start":{"line":199,"column":8},"end":{"line":199,"column":94}},"61":{"start":{"line":201,"column":8},"end":{"line":201,"column":59}},"62":{"start":{"line":203,"column":8},"end":{"line":206,"column":15}},"63":{"start":{"line":204,"column":12},"end":{"line":204,"column":32}},"64":{"start":{"line":205,"column":12},"end":{"line":205,"column":24}},"65":{"start":{"line":214,"column":8},"end":{"line":220,"column":15}},"66":{"start":{"line":215,"column":12},"end":{"line":215,"column":41}},"67":{"start":{"line":217,"column":12},"end":{"line":217,"column":74}},"68":{"start":{"line":219,"column":12},"end":{"line":219,"column":27}},"69":{"start":{"line":222,"column":8},"end":{"line":222,"column":45}},"70":{"start":{"line":224,"column":8},"end":{"line":224,"column":31}},"71":{"start":{"line":226,"column":8},"end":{"line":233,"column":9}},"72":{"start":{"line":227,"column":12},"end":{"line":227,"column":60}},"73":{"start":{"line":228,"column":12},"end":{"line":232,"column":13}},"74":{"start":{"line":229,"column":16},"end":{"line":229,"column":63}},"75":{"start":{"line":231,"column":16},"end":{"line":231,"column":95}},"76":{"start":{"line":244,"column":8},"end":{"line":244,"column":79}},"77":{"start":{"line":245,"column":8},"end":{"line":246,"column":23}},"78":{"start":{"line":248,"column":8},"end":{"line":248,"column":73}},"79":{"start":{"line":250,"column":8},"end":{"line":250,"column":39}},"80":{"start":{"line":252,"column":8},"end":{"line":255,"column":9}},"81":{"start":{"line":253,"column":12},"end":{"line":253,"column":45}},"82":{"start":{"line":254,"column":12},"end":{"line":254,"column":26}},"83":{"start":{"line":258,"column":8},"end":{"line":264,"column":9}},"84":{"start":{"line":259,"column":12},"end":{"line":259,"column":60}},"85":{"start":{"line":260,"column":12},"end":{"line":260,"column":57}},"86":{"start":{"line":262,"column":12},"end":{"line":262,"column":63}},"87":{"start":{"line":263,"column":12},"end":{"line":263,"column":28}},"88":{"start":{"line":267,"column":8},"end":{"line":267,"column":54}},"89":{"start":{"line":270,"column":8},"end":{"line":270,"column":53}},"90":{"start":{"line":273,"column":8},"end":{"line":277,"column":9}},"91":{"start":{"line":274,"column":12},"end":{"line":274,"column":54}},"92":{"start":{"line":276,"column":12},"end":{"line":276,"column":69}},"93":{"start":{"line":280,"column":8},"end":{"line":280,"column":59}},"94":{"start":{"line":281,"column":8},"end":{"line":281,"column":60}},"95":{"start":{"line":284,"column":8},"end":{"line":287,"column":9}},"96":{"start":{"line":285,"column":12},"end":{"line":285,"column":48}},"97":{"start":{"line":286,"column":12},"end":{"line":286,"column":76}},"98":{"start":{"line":290,"column":8},"end":{"line":290,"column":68}},"99":{"start":{"line":294,"column":8},"end":{"line":298,"column":9}},"100":{"start":{"line":295,"column":12},"end":{"line":297,"column":15}},"101":{"start":{"line":300,"column":8},"end":{"line":304,"column":9}},"102":{"start":{"line":301,"column":12},"end":{"line":303,"column":15}},"103":{"start":{"line":307,"column":8},"end":{"line":311,"column":9}},"104":{"start":{"line":308,"column":12},"end":{"line":308,"column":50}},"105":{"start":{"line":309,"column":12},"end":{"line":309,"column":50}},"106":{"start":{"line":310,"column":12},"end":{"line":310,"column":80}},"107":{"start":{"line":314,"column":8},"end":{"line":316,"column":9}},"108":{"start":{"line":315,"column":12},"end":{"line":315,"column":57}},"109":{"start":{"line":318,"column":8},"end":{"line":318,"column":39}},"110":{"start":{"line":320,"column":8},"end":{"line":320,"column":22}},"111":{"start":{"line":330,"column":8},"end":{"line":332,"column":9}},"112":{"start":{"line":331,"column":12},"end":{"line":331,"column":95}},"113":{"start":{"line":334,"column":8},"end":{"line":334,"column":78}},"114":{"start":{"line":338,"column":0},"end":{"line":338,"column":24}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":28},"end":{"line":27,"column":36}},{"start":{"line":27,"column":40},"end":{"line":27,"column":44}}]},"2":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":11},"end":{"line":40,"column":35}},{"start":{"line":40,"column":39},"end":{"line":40,"column":59}},{"start":{"line":40,"column":63},"end":{"line":40,"column":76}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"4":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"5":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":12}},{"start":{"line":58,"column":12},"end":{"line":58,"column":12}}]},"6":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"7":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"8":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":11},"end":{"line":88,"column":17}},{"start":{"line":88,"column":21},"end":{"line":88,"column":25}}]},"9":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":11},"end":{"line":97,"column":24}},{"start":{"line":97,"column":28},"end":{"line":97,"column":65}}]},"10":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":8},"end":{"line":120,"column":8}},{"start":{"line":120,"column":8},"end":{"line":120,"column":8}}]},"11":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":12},"end":{"line":120,"column":65}},{"start":{"line":120,"column":69},"end":{"line":120,"column":106}}]},"12":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":8}},{"start":{"line":125,"column":8},"end":{"line":125,"column":8}}]},"13":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":12},"end":{"line":125,"column":20}},{"start":{"line":125,"column":24},"end":{"line":125,"column":78}}]},"14":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":8},"end":{"line":133,"column":8}},{"start":{"line":133,"column":8},"end":{"line":133,"column":8}}]},"15":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":8},"end":{"line":138,"column":8}},{"start":{"line":138,"column":8},"end":{"line":138,"column":8}}]},"16":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":4},"end":{"line":147,"column":4}},{"start":{"line":147,"column":4},"end":{"line":147,"column":4}}]},"17":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":8},"end":{"line":147,"column":14}},{"start":{"line":147,"column":18},"end":{"line":147,"column":47}}]},"18":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":157,"column":8}},{"start":{"line":157,"column":8},"end":{"line":157,"column":8}}]},"19":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":15},"end":{"line":159,"column":15}},{"start":{"line":159,"column":15},"end":{"line":159,"column":15}}]},"20":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":19},"end":{"line":159,"column":48}},{"start":{"line":159,"column":52},"end":{"line":159,"column":82}}]},"21":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":18},"end":{"line":191,"column":25}},{"start":{"line":191,"column":29},"end":{"line":191,"column":31}}]},"22":{"line":197,"type":"binary-expr","locations":[{"start":{"line":197,"column":29},"end":{"line":197,"column":50}},{"start":{"line":197,"column":54},"end":{"line":197,"column":56}}]},"23":{"line":199,"type":"cond-expr","locations":[{"start":{"line":199,"column":47},"end":{"line":199,"column":77}},{"start":{"line":199,"column":80},"end":{"line":199,"column":93}}]},"24":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":20},"end":{"line":203,"column":32}},{"start":{"line":203,"column":36},"end":{"line":203,"column":38}}]},"25":{"line":214,"type":"binary-expr","locations":[{"start":{"line":214,"column":24},"end":{"line":214,"column":39}},{"start":{"line":214,"column":43},"end":{"line":214,"column":45}}]},"26":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":33},"end":{"line":217,"column":49}},{"start":{"line":217,"column":53},"end":{"line":217,"column":72}}]},"27":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":8},"end":{"line":226,"column":8}},{"start":{"line":226,"column":8},"end":{"line":226,"column":8}}]},"28":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":12},"end":{"line":228,"column":12}},{"start":{"line":228,"column":12},"end":{"line":228,"column":12}}]},"29":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":16},"end":{"line":228,"column":39}},{"start":{"line":228,"column":43},"end":{"line":228,"column":85}},{"start":{"line":228,"column":89},"end":{"line":228,"column":116}}]},"30":{"line":244,"type":"cond-expr","locations":[{"start":{"line":244,"column":37},"end":{"line":244,"column":59}},{"start":{"line":244,"column":62},"end":{"line":244,"column":78}}]},"31":{"line":248,"type":"cond-expr","locations":[{"start":{"line":248,"column":52},"end":{"line":248,"column":60}},{"start":{"line":248,"column":63},"end":{"line":248,"column":69}}]},"32":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":8},"end":{"line":252,"column":8}},{"start":{"line":252,"column":8},"end":{"line":252,"column":8}}]},"33":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8}},{"start":{"line":258,"column":8},"end":{"line":258,"column":8}}]},"34":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":8},"end":{"line":273,"column":8}},{"start":{"line":273,"column":8},"end":{"line":273,"column":8}}]},"35":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":8},"end":{"line":284,"column":8}},{"start":{"line":284,"column":8},"end":{"line":284,"column":8}}]},"36":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":8},"end":{"line":294,"column":8}},{"start":{"line":294,"column":8},"end":{"line":294,"column":8}}]},"37":{"line":294,"type":"binary-expr","locations":[{"start":{"line":294,"column":12},"end":{"line":294,"column":23}},{"start":{"line":294,"column":27},"end":{"line":294,"column":41}}]},"38":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":8},"end":{"line":300,"column":8}},{"start":{"line":300,"column":8},"end":{"line":300,"column":8}}]},"39":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":8},"end":{"line":307,"column":8}},{"start":{"line":307,"column":8},"end":{"line":307,"column":8}}]},"40":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":8},"end":{"line":314,"column":8}},{"start":{"line":314,"column":8},"end":{"line":314,"column":8}}]},"41":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":8},"end":{"line":330,"column":8}},{"start":{"line":330,"column":8},"end":{"line":330,"column":8}}]}},"code":["/**"," * @fileoverview Responsible for loading config files"," * @author Seth McLaughlin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const path = require(\"path\"),","    ConfigOps = require(\"./config/config-ops\"),","    ConfigFile = require(\"./config/config-file\"),","    Plugins = require(\"./config/plugins\"),","    FileFinder = require(\"./file-finder\"),","    userHome = require(\"user-home\"),","    isResolvable = require(\"is-resolvable\"),","    pathIsInside = require(\"path-is-inside\");","","const debug = require(\"debug\")(\"eslint:config\");","","//------------------------------------------------------------------------------","// Constants","//------------------------------------------------------------------------------","","const PERSONAL_CONFIG_DIR = userHome || null;","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Check if item is an javascript object"," * @param {*} item object to check for"," * @returns {boolean} True if its an object"," * @private"," */","function isObject(item) {","    return typeof item === \"object\" && !Array.isArray(item) && item !== null;","}","","/**"," * Load and parse a JSON config object from a file."," * @param {string|Object} configToLoad the path to the JSON config file or the config object itself."," * @returns {Object} the parsed config object (empty object if there was a parse error)"," * @private"," */","function loadConfig(configToLoad) {","    let config = {},","        filePath = \"\";","","    if (configToLoad) {","","        if (isObject(configToLoad)) {","            config = configToLoad;","","            if (config.extends) {","                config = ConfigFile.applyExtends(config, filePath);","            }","        } else {","            filePath = configToLoad;","            config = ConfigFile.load(filePath);","        }","","    }","","    return config;","}","","/**"," * Get personal config object from ~/.eslintrc."," * @returns {Object} the personal config object (null if there is no personal config)"," * @private"," */","function getPersonalConfig() {","    let config;","","    if (PERSONAL_CONFIG_DIR) {","        const filename = ConfigFile.getFilenameForDirectory(PERSONAL_CONFIG_DIR);","","        if (filename) {","            debug(\"Using personal config\");","            config = loadConfig(filename);","        }","    }","","    return config || null;","}","","/**"," * Determine if rules were explicitly passed in as options."," * @param {Object} options The options used to create our configuration."," * @returns {boolean} True if rules were passed in as options, false otherwise."," */","function hasRules(options) {","    return options.rules && Object.keys(options.rules).length > 0;","}","","/**"," * Get a local config object."," * @param {Object} thisConfig A Config object."," * @param {string} directory The directory to start looking in for a local config file."," * @returns {Object} The local config object, or an empty object if there is no local config."," */","function getLocalConfig(thisConfig, directory) {","    const localConfigFiles = thisConfig.findLocalConfigFiles(directory),","        numFiles = localConfigFiles.length,","        projectConfigPath = ConfigFile.getFilenameForDirectory(thisConfig.options.cwd);","    let found,","        config = {},","        rootPath;","","    for (let i = 0; i < numFiles; i++) {","","        const localConfigFile = localConfigFiles[i];","","        // Don't consider the personal config file in the home directory,","        // except if the home directory is the same as the current working directory","        if (path.dirname(localConfigFile) === PERSONAL_CONFIG_DIR && localConfigFile !== projectConfigPath) {","            continue;","        }","","        // If root flag is set, don't consider file if it is above root","        if (rootPath && !pathIsInside(path.dirname(localConfigFile), rootPath)) {","            continue;","        }","","        debug(`Loading ${localConfigFile}`);","        const localConfig = loadConfig(localConfigFile);","","        // Don't consider a local config file found if the config is null","        if (!localConfig) {","            continue;","        }","","        // Check for root flag","        if (localConfig.root === true) {","            rootPath = path.dirname(localConfigFile);","        }","","        found = true;","        debug(`Using ${localConfigFile}`);","        config = ConfigOps.merge(localConfig, config);","    }","","    if (!found && !thisConfig.useSpecificConfig) {","","        /*","         * - Is there a personal config in the user's home directory? If so,","         *   merge that with the passed-in config.","         * - Otherwise, if no rules were manually passed in, throw and error.","         * - Note: This function is not called if useEslintrc is false.","         */","        const personalConfig = getPersonalConfig();","","        if (personalConfig) {","            config = ConfigOps.merge(config, personalConfig);","        } else if (!hasRules(thisConfig.options) && !thisConfig.options.baseConfig) {","","            // No config file, no manual configuration, and no rules, so error.","            const noConfigError = new Error(\"No ESLint configuration found.\");","","            noConfigError.messageTemplate = \"no-config-found\";","            noConfigError.messageData = {","                directory,","                filesExamined: localConfigFiles","            };","","            throw noConfigError;","        }","    }","","    return config;","}","","//------------------------------------------------------------------------------","// API","//------------------------------------------------------------------------------","","/**"," * Configuration class"," */","class Config {","","    /**","     * Config options","     * @param {Object} options Options to be passed in","     */","    constructor(options) {","        options = options || {};","","        this.ignore = options.ignore;","        this.ignorePath = options.ignorePath;","        this.cache = {};","        this.parser = options.parser;","        this.parserOptions = options.parserOptions || {};","","        this.baseConfig = options.baseConfig ? loadConfig(options.baseConfig) : { rules: {} };","","        this.useEslintrc = (options.useEslintrc !== false);","","        this.env = (options.envs || []).reduce((envs, name) => {","            envs[ name ] = true;","            return envs;","        }, {});","","        /*","         * Handle declared globals.","         * For global variable foo, handle \"foo:false\" and \"foo:true\" to set","         * whether global is writable.","         * If user declares \"foo\", convert to \"foo:false\".","         */","        this.globals = (options.globals || []).reduce((globals, def) => {","            const parts = def.split(\":\");","","            globals[parts[0]] = (parts.length > 1 && parts[1] === \"true\");","","            return globals;","        }, {});","","        const useConfig = options.configFile;","","        this.options = options;","","        if (useConfig) {","            debug(`Using command line config ${useConfig}`);","            if (isResolvable(useConfig) || isResolvable(`eslint-config-${useConfig}`) || useConfig.charAt(0) === \"@\") {","                this.useSpecificConfig = loadConfig(useConfig);","            } else {","                this.useSpecificConfig = loadConfig(path.resolve(this.options.cwd, useConfig));","            }","        }","    }","","    /**","     * Build a config object merging the base config (conf/eslint-recommended),","     * the environments config (conf/environments.js) and eventually the user","     * config.","     * @param {string} filePath a file in whose directory we start looking for a local config","     * @returns {Object} config object","     */","    getConfig(filePath) {","        const directory = filePath ? path.dirname(filePath) : this.options.cwd;","        let config,","            userConfig;","","        debug(`Constructing config for ${filePath ? filePath : \"text\"}`);","","        config = this.cache[directory];","","        if (config) {","            debug(\"Using config from cache\");","            return config;","        }","","        // Step 1: Determine user-specified config from .eslintrc.* and package.json files","        if (this.useEslintrc) {","            debug(\"Using .eslintrc and package.json files\");","            userConfig = getLocalConfig(this, directory);","        } else {","            debug(\"Not using .eslintrc or package.json files\");","            userConfig = {};","        }","","        // Step 2: Create a copy of the baseConfig","        config = ConfigOps.merge({}, this.baseConfig);","","        // Step 3: Merge in the user-specified configuration from .eslintrc and package.json","        config = ConfigOps.merge(config, userConfig);","","        // Step 4: Merge in command line config file","        if (this.useSpecificConfig) {","            debug(\"Merging command line config file\");","","            config = ConfigOps.merge(config, this.useSpecificConfig);","        }","","        // Step 5: Merge in command line environments","        debug(\"Merging command line environment settings\");","        config = ConfigOps.merge(config, { env: this.env });","","        // Step 6: Merge in command line rules","        if (this.options.rules) {","            debug(\"Merging command line rules\");","            config = ConfigOps.merge(config, { rules: this.options.rules });","        }","","        // Step 7: Merge in command line globals","        config = ConfigOps.merge(config, { globals: this.globals });","","        // Only override parser if it is passed explicitly through the command line or if it's not","        // defined yet (because the final object will at least have the parser key)","        if (this.parser || !config.parser) {","            config = ConfigOps.merge(config, {","                parser: this.parser","            });","        }","","        if (this.parserOptions) {","            config = ConfigOps.merge(config, {","                parserOptions: this.parserOptions","            });","        }","","        // Step 8: Merge in command line plugins","        if (this.options.plugins) {","            debug(\"Merging command line plugins\");","            Plugins.loadAll(this.options.plugins);","            config = ConfigOps.merge(config, { plugins: this.options.plugins });","        }","","        // Step 9: Apply environments to the config if present","        if (config.env) {","            config = ConfigOps.applyEnvironments(config);","        }","","        this.cache[directory] = config;","","        return config;","    }","","    /**","     * Find local config files from directory and parent directories.","     * @param {string} directory The directory to start searching from.","     * @returns {string[]} The paths of local config files found.","     */","    findLocalConfigFiles(directory) {","","        if (!this.localConfigFinder) {","            this.localConfigFinder = new FileFinder(ConfigFile.CONFIG_FILES, this.options.cwd);","        }","","        return this.localConfigFinder.findAllInDirectoryAndParents(directory);","    }","}","","module.exports = Config;",""],"l":{"12":1,"21":1,"27":1,"39":1,"40":0,"49":1,"50":0,"53":0,"55":0,"56":0,"58":0,"59":0,"62":0,"63":0,"68":0,"76":1,"77":0,"79":0,"80":0,"82":0,"83":0,"84":0,"88":0,"96":1,"97":0,"106":1,"107":0,"110":0,"114":0,"116":0,"120":0,"121":0,"125":0,"126":0,"129":0,"130":0,"133":0,"134":0,"138":0,"139":0,"142":0,"143":0,"144":0,"147":0,"155":0,"157":0,"158":0,"159":0,"162":0,"164":0,"165":0,"170":0,"174":0,"191":0,"193":0,"194":0,"195":0,"196":0,"197":0,"199":0,"201":0,"203":0,"204":0,"205":0,"214":0,"215":0,"217":0,"219":0,"222":0,"224":0,"226":0,"227":0,"228":0,"229":0,"231":0,"244":0,"245":0,"248":0,"250":0,"252":0,"253":0,"254":0,"258":0,"259":0,"260":0,"262":0,"263":0,"267":0,"270":0,"273":0,"274":0,"276":0,"280":0,"281":0,"284":0,"285":0,"286":0,"290":0,"294":0,"295":0,"300":0,"301":0,"307":0,"308":0,"309":0,"310":0,"314":0,"315":0,"318":0,"320":0,"330":0,"331":0,"334":0,"338":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/config-file.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/config-file.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":1,"78":0,"79":0,"80":0,"81":0,"82":1,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":0,"103":1,"104":0,"105":0,"106":0,"107":0,"108":0,"109":1,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":1,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":1,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":1,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":1,"171":0,"172":0,"173":0,"174":0,"175":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"sortByKey","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":25}}},"2":{"name":"readFile","line":69,"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":28}}},"3":{"name":"isFilePath","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":30}}},"4":{"name":"loadYAMLConfigFile","line":92,"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":38}}},"5":{"name":"loadJSONConfigFile","line":116,"loc":{"start":{"line":116,"column":0},"end":{"line":116,"column":38}}},"6":{"name":"loadLegacyConfigFile","line":135,"loc":{"start":{"line":135,"column":0},"end":{"line":135,"column":40}}},"7":{"name":"loadJSConfigFile","line":157,"loc":{"start":{"line":157,"column":0},"end":{"line":157,"column":36}}},"8":{"name":"loadPackageJSONConfigFile","line":175,"loc":{"start":{"line":175,"column":0},"end":{"line":175,"column":45}}},"9":{"name":"configMissingError","line":192,"loc":{"start":{"line":192,"column":0},"end":{"line":192,"column":40}}},"10":{"name":"loadConfigFile","line":209,"loc":{"start":{"line":209,"column":0},"end":{"line":209,"column":30}}},"11":{"name":"writeJSONConfigFile","line":254,"loc":{"start":{"line":254,"column":0},"end":{"line":254,"column":47}}},"12":{"name":"writeYAMLConfigFile","line":269,"loc":{"start":{"line":269,"column":0},"end":{"line":269,"column":47}}},"13":{"name":"writeJSConfigFile","line":287,"loc":{"start":{"line":287,"column":0},"end":{"line":287,"column":45}}},"14":{"name":"write","line":303,"loc":{"start":{"line":303,"column":0},"end":{"line":303,"column":33}}},"15":{"name":"getBaseDir","line":331,"loc":{"start":{"line":331,"column":0},"end":{"line":331,"column":36}}},"16":{"name":"getLookupPath","line":356,"loc":{"start":{"line":356,"column":0},"end":{"line":356,"column":39}}},"17":{"name":"getEslintCoreConfigPath","line":368,"loc":{"start":{"line":368,"column":0},"end":{"line":368,"column":39}}},"18":{"name":"applyExtends","line":399,"loc":{"start":{"line":399,"column":0},"end":{"line":399,"column":52}}},"19":{"name":"normalizePackageName","line":449,"loc":{"start":{"line":449,"column":0},"end":{"line":449,"column":44}}},"20":{"name":"resolve","line":497,"loc":{"start":{"line":497,"column":0},"end":{"line":497,"column":39}}},"21":{"name":"load","line":531,"loc":{"start":{"line":531,"column":0},"end":{"line":531,"column":55}}},"22":{"name":"(anonymous_22)","line":602,"loc":{"start":{"line":602,"column":27},"end":{"line":602,"column":39}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":27,"column":50}},"2":{"start":{"line":29,"column":0},"end":{"line":29,"column":53}},"3":{"start":{"line":44,"column":0},"end":{"line":46,"column":1}},"4":{"start":{"line":45,"column":4},"end":{"line":45,"column":34}},"5":{"start":{"line":52,"column":0},"end":{"line":59,"column":2}},"6":{"start":{"line":61,"column":0},"end":{"line":61,"column":38}},"7":{"start":{"line":69,"column":0},"end":{"line":71,"column":1}},"8":{"start":{"line":70,"column":4},"end":{"line":70,"column":55}},"9":{"start":{"line":81,"column":0},"end":{"line":83,"column":1}},"10":{"start":{"line":82,"column":4},"end":{"line":82,"column":73}},"11":{"start":{"line":92,"column":0},"end":{"line":107,"column":1}},"12":{"start":{"line":93,"column":4},"end":{"line":93,"column":51}},"13":{"start":{"line":96,"column":4},"end":{"line":96,"column":36}},"14":{"start":{"line":98,"column":4},"end":{"line":106,"column":5}},"15":{"start":{"line":101,"column":8},"end":{"line":101,"column":55}},"16":{"start":{"line":103,"column":8},"end":{"line":103,"column":54}},"17":{"start":{"line":104,"column":8},"end":{"line":104,"column":80}},"18":{"start":{"line":105,"column":8},"end":{"line":105,"column":16}},"19":{"start":{"line":116,"column":0},"end":{"line":126,"column":1}},"20":{"start":{"line":117,"column":4},"end":{"line":117,"column":51}},"21":{"start":{"line":119,"column":4},"end":{"line":125,"column":5}},"22":{"start":{"line":120,"column":8},"end":{"line":120,"column":61}},"23":{"start":{"line":122,"column":8},"end":{"line":122,"column":54}},"24":{"start":{"line":123,"column":8},"end":{"line":123,"column":80}},"25":{"start":{"line":124,"column":8},"end":{"line":124,"column":16}},"26":{"start":{"line":135,"column":0},"end":{"line":148,"column":1}},"27":{"start":{"line":136,"column":4},"end":{"line":136,"column":46}},"28":{"start":{"line":139,"column":4},"end":{"line":139,"column":36}},"29":{"start":{"line":141,"column":4},"end":{"line":147,"column":5}},"30":{"start":{"line":142,"column":8},"end":{"line":142,"column":97}},"31":{"start":{"line":144,"column":8},"end":{"line":144,"column":54}},"32":{"start":{"line":145,"column":8},"end":{"line":145,"column":80}},"33":{"start":{"line":146,"column":8},"end":{"line":146,"column":16}},"34":{"start":{"line":157,"column":0},"end":{"line":166,"column":1}},"35":{"start":{"line":158,"column":4},"end":{"line":158,"column":49}},"36":{"start":{"line":159,"column":4},"end":{"line":165,"column":5}},"37":{"start":{"line":160,"column":8},"end":{"line":160,"column":41}},"38":{"start":{"line":162,"column":8},"end":{"line":162,"column":60}},"39":{"start":{"line":163,"column":8},"end":{"line":163,"column":80}},"40":{"start":{"line":164,"column":8},"end":{"line":164,"column":16}},"41":{"start":{"line":175,"column":0},"end":{"line":184,"column":1}},"42":{"start":{"line":176,"column":4},"end":{"line":176,"column":59}},"43":{"start":{"line":177,"column":4},"end":{"line":183,"column":5}},"44":{"start":{"line":178,"column":8},"end":{"line":178,"column":65}},"45":{"start":{"line":180,"column":8},"end":{"line":180,"column":62}},"46":{"start":{"line":181,"column":8},"end":{"line":181,"column":80}},"47":{"start":{"line":182,"column":8},"end":{"line":182,"column":16}},"48":{"start":{"line":192,"column":0},"end":{"line":200,"column":1}},"49":{"start":{"line":193,"column":4},"end":{"line":193,"column":85}},"50":{"start":{"line":195,"column":4},"end":{"line":195,"column":52}},"51":{"start":{"line":196,"column":4},"end":{"line":198,"column":6}},"52":{"start":{"line":199,"column":4},"end":{"line":199,"column":17}},"53":{"start":{"line":209,"column":0},"end":{"line":245,"column":1}},"54":{"start":{"line":210,"column":4},"end":{"line":210,"column":35}},"55":{"start":{"line":211,"column":4},"end":{"line":211,"column":15}},"56":{"start":{"line":213,"column":4},"end":{"line":242,"column":5}},"57":{"start":{"line":215,"column":12},"end":{"line":215,"column":48}},"58":{"start":{"line":216,"column":12},"end":{"line":221,"column":13}},"59":{"start":{"line":217,"column":16},"end":{"line":217,"column":57}},"60":{"start":{"line":218,"column":16},"end":{"line":220,"column":17}},"61":{"start":{"line":219,"column":20},"end":{"line":219,"column":66}},"62":{"start":{"line":222,"column":12},"end":{"line":222,"column":18}},"63":{"start":{"line":225,"column":12},"end":{"line":232,"column":13}},"64":{"start":{"line":226,"column":16},"end":{"line":226,"column":61}},"65":{"start":{"line":227,"column":16},"end":{"line":229,"column":17}},"66":{"start":{"line":228,"column":20},"end":{"line":228,"column":32}},"67":{"start":{"line":231,"column":16},"end":{"line":231,"column":54}},"68":{"start":{"line":233,"column":12},"end":{"line":233,"column":18}},"69":{"start":{"line":237,"column":12},"end":{"line":237,"column":50}},"70":{"start":{"line":238,"column":12},"end":{"line":238,"column":18}},"71":{"start":{"line":241,"column":12},"end":{"line":241,"column":52}},"72":{"start":{"line":244,"column":4},"end":{"line":244,"column":66}},"73":{"start":{"line":254,"column":0},"end":{"line":260,"column":1}},"74":{"start":{"line":255,"column":4},"end":{"line":255,"column":51}},"75":{"start":{"line":257,"column":4},"end":{"line":257,"column":68}},"76":{"start":{"line":259,"column":4},"end":{"line":259,"column":48}},"77":{"start":{"line":269,"column":0},"end":{"line":278,"column":1}},"78":{"start":{"line":270,"column":4},"end":{"line":270,"column":51}},"79":{"start":{"line":273,"column":4},"end":{"line":273,"column":36}},"80":{"start":{"line":275,"column":4},"end":{"line":275,"column":62}},"81":{"start":{"line":277,"column":4},"end":{"line":277,"column":48}},"82":{"start":{"line":287,"column":0},"end":{"line":293,"column":1}},"83":{"start":{"line":288,"column":4},"end":{"line":288,"column":49}},"84":{"start":{"line":290,"column":4},"end":{"line":290,"column":91}},"85":{"start":{"line":292,"column":4},"end":{"line":292,"column":48}},"86":{"start":{"line":303,"column":0},"end":{"line":321,"column":1}},"87":{"start":{"line":304,"column":4},"end":{"line":320,"column":5}},"88":{"start":{"line":306,"column":12},"end":{"line":306,"column":48}},"89":{"start":{"line":307,"column":12},"end":{"line":307,"column":18}},"90":{"start":{"line":310,"column":12},"end":{"line":310,"column":50}},"91":{"start":{"line":311,"column":12},"end":{"line":311,"column":18}},"92":{"start":{"line":315,"column":12},"end":{"line":315,"column":50}},"93":{"start":{"line":316,"column":12},"end":{"line":316,"column":18}},"94":{"start":{"line":319,"column":12},"end":{"line":319,"column":65}},"95":{"start":{"line":331,"column":0},"end":{"line":347,"column":1}},"96":{"start":{"line":334,"column":4},"end":{"line":334,"column":61}},"97":{"start":{"line":336,"column":4},"end":{"line":340,"column":5}},"98":{"start":{"line":339,"column":8},"end":{"line":339,"column":55}},"99":{"start":{"line":346,"column":4},"end":{"line":346,"column":34}},"100":{"start":{"line":356,"column":0},"end":{"line":360,"column":1}},"101":{"start":{"line":357,"column":4},"end":{"line":357,"column":47}},"102":{"start":{"line":359,"column":4},"end":{"line":359,"column":46}},"103":{"start":{"line":368,"column":0},"end":{"line":387,"column":1}},"104":{"start":{"line":369,"column":4},"end":{"line":376,"column":5}},"105":{"start":{"line":375,"column":8},"end":{"line":375,"column":75}},"106":{"start":{"line":378,"column":4},"end":{"line":384,"column":5}},"107":{"start":{"line":383,"column":8},"end":{"line":383,"column":67}},"108":{"start":{"line":386,"column":4},"end":{"line":386,"column":35}},"109":{"start":{"line":399,"column":0},"end":{"line":440,"column":1}},"110":{"start":{"line":400,"column":4},"end":{"line":400,"column":39}},"111":{"start":{"line":403,"column":4},"end":{"line":405,"column":5}},"112":{"start":{"line":404,"column":8},"end":{"line":404,"column":41}},"113":{"start":{"line":408,"column":4},"end":{"line":437,"column":15}},"114":{"start":{"line":409,"column":8},"end":{"line":435,"column":9}},"115":{"start":{"line":410,"column":12},"end":{"line":422,"column":13}},"116":{"start":{"line":411,"column":16},"end":{"line":411,"column":65}},"117":{"start":{"line":412,"column":19},"end":{"line":422,"column":13}},"118":{"start":{"line":418,"column":16},"end":{"line":421,"column":18}},"119":{"start":{"line":423,"column":12},"end":{"line":423,"column":43}},"120":{"start":{"line":424,"column":12},"end":{"line":424,"column":87}},"121":{"start":{"line":433,"column":12},"end":{"line":433,"column":58}},"122":{"start":{"line":434,"column":12},"end":{"line":434,"column":20}},"123":{"start":{"line":439,"column":4},"end":{"line":439,"column":18}},"124":{"start":{"line":449,"column":0},"end":{"line":484,"column":1}},"125":{"start":{"line":456,"column":4},"end":{"line":458,"column":5}},"126":{"start":{"line":457,"column":8},"end":{"line":457,"column":49}},"127":{"start":{"line":460,"column":4},"end":{"line":481,"column":5}},"128":{"start":{"line":466,"column":8},"end":{"line":467,"column":67}},"129":{"start":{"line":469,"column":8},"end":{"line":478,"column":9}},"130":{"start":{"line":470,"column":12},"end":{"line":470,"column":76}},"131":{"start":{"line":471,"column":15},"end":{"line":478,"column":9}},"132":{"start":{"line":477,"column":12},"end":{"line":477,"column":72}},"133":{"start":{"line":479,"column":11},"end":{"line":481,"column":5}},"134":{"start":{"line":480,"column":8},"end":{"line":480,"column":35}},"135":{"start":{"line":483,"column":4},"end":{"line":483,"column":16}},"136":{"start":{"line":497,"column":0},"end":{"line":520,"column":1}},"137":{"start":{"line":498,"column":4},"end":{"line":500,"column":5}},"138":{"start":{"line":499,"column":8},"end":{"line":499,"column":70}},"139":{"start":{"line":501,"column":4},"end":{"line":501,"column":30}},"140":{"start":{"line":503,"column":4},"end":{"line":512,"column":5}},"141":{"start":{"line":504,"column":8},"end":{"line":504,"column":40}},"142":{"start":{"line":505,"column":8},"end":{"line":505,"column":77}},"143":{"start":{"line":506,"column":8},"end":{"line":506,"column":123}},"144":{"start":{"line":508,"column":8},"end":{"line":508,"column":82}},"145":{"start":{"line":509,"column":8},"end":{"line":509,"column":64}},"146":{"start":{"line":510,"column":8},"end":{"line":510,"column":86}},"147":{"start":{"line":511,"column":8},"end":{"line":511,"column":56}},"148":{"start":{"line":513,"column":4},"end":{"line":513,"column":76}},"149":{"start":{"line":514,"column":4},"end":{"line":514,"column":60}},"150":{"start":{"line":515,"column":4},"end":{"line":515,"column":82}},"151":{"start":{"line":516,"column":4},"end":{"line":516,"column":24}},"152":{"start":{"line":531,"column":0},"end":{"line":578,"column":1}},"153":{"start":{"line":532,"column":4},"end":{"line":534,"column":44}},"154":{"start":{"line":535,"column":4},"end":{"line":535,"column":46}},"155":{"start":{"line":537,"column":4},"end":{"line":575,"column":5}},"156":{"start":{"line":540,"column":8},"end":{"line":542,"column":9}},"157":{"start":{"line":541,"column":12},"end":{"line":541,"column":44}},"158":{"start":{"line":545,"column":8},"end":{"line":547,"column":9}},"159":{"start":{"line":546,"column":12},"end":{"line":546,"column":33}},"160":{"start":{"line":550,"column":8},"end":{"line":556,"column":9}},"161":{"start":{"line":551,"column":12},"end":{"line":555,"column":13}},"162":{"start":{"line":552,"column":16},"end":{"line":552,"column":75}},"163":{"start":{"line":554,"column":16},"end":{"line":554,"column":76}},"164":{"start":{"line":559,"column":8},"end":{"line":559,"column":45}},"165":{"start":{"line":565,"column":8},"end":{"line":567,"column":9}},"166":{"start":{"line":566,"column":12},"end":{"line":566,"column":61}},"167":{"start":{"line":569,"column":8},"end":{"line":573,"column":9}},"168":{"start":{"line":572,"column":12},"end":{"line":572,"column":57}},"169":{"start":{"line":577,"column":4},"end":{"line":577,"column":18}},"170":{"start":{"line":584,"column":0},"end":{"line":613,"column":2}},"171":{"start":{"line":603,"column":8},"end":{"line":609,"column":9}},"172":{"start":{"line":604,"column":12},"end":{"line":604,"column":67}},"173":{"start":{"line":606,"column":12},"end":{"line":608,"column":13}},"174":{"start":{"line":607,"column":16},"end":{"line":607,"column":32}},"175":{"start":{"line":611,"column":8},"end":{"line":611,"column":20}}},"branchMap":{"1":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":27},"end":{"line":45,"column":28}},{"start":{"line":45,"column":31},"end":{"line":45,"column":33}}]},"2":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":11},"end":{"line":82,"column":36}},{"start":{"line":82,"column":40},"end":{"line":82,"column":72}}]},"3":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":15},"end":{"line":101,"column":48}},{"start":{"line":101,"column":52},"end":{"line":101,"column":54}}]},"4":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":15},"end":{"line":142,"column":63}},{"start":{"line":142,"column":94},"end":{"line":142,"column":96},"skip":true}]},"5":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":15},"end":{"line":178,"column":56}},{"start":{"line":178,"column":60},"end":{"line":178,"column":64}}]},"6":{"line":213,"type":"switch","locations":[{"start":{"line":214,"column":8},"end":{"line":222,"column":18}},{"start":{"line":224,"column":8},"end":{"line":233,"column":18}},{"start":{"line":235,"column":8},"end":{"line":235,"column":21}},{"start":{"line":236,"column":8},"end":{"line":238,"column":18}},{"start":{"line":240,"column":8},"end":{"line":241,"column":52}}]},"7":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":12},"end":{"line":216,"column":12}},{"start":{"line":216,"column":12},"end":{"line":216,"column":12}}]},"8":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":16},"end":{"line":218,"column":16}},{"start":{"line":218,"column":16},"end":{"line":218,"column":16}}]},"9":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":12},"end":{"line":225,"column":12}},{"start":{"line":225,"column":12},"end":{"line":225,"column":12}}]},"10":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":16},"end":{"line":227,"column":16}},{"start":{"line":227,"column":16},"end":{"line":227,"column":16}}]},"11":{"line":304,"type":"switch","locations":[{"start":{"line":305,"column":8},"end":{"line":307,"column":18}},{"start":{"line":309,"column":8},"end":{"line":311,"column":18}},{"start":{"line":313,"column":8},"end":{"line":313,"column":21}},{"start":{"line":314,"column":8},"end":{"line":316,"column":18}},{"start":{"line":318,"column":8},"end":{"line":319,"column":65}}]},"12":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":4},"end":{"line":336,"column":4}},{"start":{"line":336,"column":4},"end":{"line":336,"column":4}}]},"13":{"line":336,"type":"binary-expr","locations":[{"start":{"line":336,"column":8},"end":{"line":336,"column":22}},{"start":{"line":336,"column":26},"end":{"line":336,"column":67}}]},"14":{"line":369,"type":"if","locations":[{"start":{"line":369,"column":4},"end":{"line":369,"column":4}},{"start":{"line":369,"column":4},"end":{"line":369,"column":4}}]},"15":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":4},"end":{"line":378,"column":4}},{"start":{"line":378,"column":4},"end":{"line":378,"column":4}}]},"16":{"line":403,"type":"if","locations":[{"start":{"line":403,"column":4},"end":{"line":403,"column":4}},{"start":{"line":403,"column":4},"end":{"line":403,"column":4}}]},"17":{"line":410,"type":"if","locations":[{"start":{"line":410,"column":12},"end":{"line":410,"column":12}},{"start":{"line":410,"column":12},"end":{"line":410,"column":12}}]},"18":{"line":412,"type":"if","locations":[{"start":{"line":412,"column":19},"end":{"line":412,"column":19}},{"start":{"line":412,"column":19},"end":{"line":412,"column":19}}]},"19":{"line":418,"type":"cond-expr","locations":[{"start":{"line":419,"column":22},"end":{"line":419,"column":32}},{"start":{"line":420,"column":22},"end":{"line":420,"column":81}}]},"20":{"line":420,"type":"binary-expr","locations":[{"start":{"line":420,"column":32},"end":{"line":420,"column":42}},{"start":{"line":420,"column":46},"end":{"line":420,"column":68}}]},"21":{"line":456,"type":"if","locations":[{"start":{"line":456,"column":4},"end":{"line":456,"column":4}},{"start":{"line":456,"column":4},"end":{"line":456,"column":4}}]},"22":{"line":460,"type":"if","locations":[{"start":{"line":460,"column":4},"end":{"line":460,"column":4}},{"start":{"line":460,"column":4},"end":{"line":460,"column":4}}]},"23":{"line":469,"type":"if","locations":[{"start":{"line":469,"column":8},"end":{"line":469,"column":8}},{"start":{"line":469,"column":8},"end":{"line":469,"column":8}}]},"24":{"line":471,"type":"if","locations":[{"start":{"line":471,"column":15},"end":{"line":471,"column":15}},{"start":{"line":471,"column":15},"end":{"line":471,"column":15}}]},"25":{"line":479,"type":"if","locations":[{"start":{"line":479,"column":11},"end":{"line":479,"column":11}},{"start":{"line":479,"column":11},"end":{"line":479,"column":11}}]},"26":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":4},"end":{"line":498,"column":4}},{"start":{"line":498,"column":4},"end":{"line":498,"column":4}}]},"27":{"line":499,"type":"binary-expr","locations":[{"start":{"line":499,"column":40},"end":{"line":499,"column":50}},{"start":{"line":499,"column":54},"end":{"line":499,"column":56}}]},"28":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":4},"end":{"line":503,"column":4}},{"start":{"line":503,"column":4},"end":{"line":503,"column":4}}]},"29":{"line":537,"type":"if","locations":[{"start":{"line":537,"column":4},"end":{"line":537,"column":4}},{"start":{"line":537,"column":4},"end":{"line":537,"column":4}}]},"30":{"line":540,"type":"if","locations":[{"start":{"line":540,"column":8},"end":{"line":540,"column":8}},{"start":{"line":540,"column":8},"end":{"line":540,"column":8}}]},"31":{"line":545,"type":"if","locations":[{"start":{"line":545,"column":8},"end":{"line":545,"column":8}},{"start":{"line":545,"column":8},"end":{"line":545,"column":8}}]},"32":{"line":550,"type":"if","locations":[{"start":{"line":550,"column":8},"end":{"line":550,"column":8}},{"start":{"line":550,"column":8},"end":{"line":550,"column":8}}]},"33":{"line":551,"type":"if","locations":[{"start":{"line":551,"column":12},"end":{"line":551,"column":12}},{"start":{"line":551,"column":12},"end":{"line":551,"column":12}}]},"34":{"line":552,"type":"binary-expr","locations":[{"start":{"line":552,"column":45},"end":{"line":552,"column":52}},{"start":{"line":552,"column":56},"end":{"line":552,"column":58}}]},"35":{"line":565,"type":"if","locations":[{"start":{"line":565,"column":8},"end":{"line":565,"column":8}},{"start":{"line":565,"column":8},"end":{"line":565,"column":8}}]},"36":{"line":569,"type":"if","locations":[{"start":{"line":569,"column":8},"end":{"line":569,"column":8}},{"start":{"line":569,"column":8},"end":{"line":569,"column":8}}]},"37":{"line":569,"type":"binary-expr","locations":[{"start":{"line":569,"column":12},"end":{"line":569,"column":22}},{"start":{"line":569,"column":26},"end":{"line":569,"column":43}}]},"38":{"line":606,"type":"if","locations":[{"start":{"line":606,"column":12},"end":{"line":606,"column":12}},{"start":{"line":606,"column":12},"end":{"line":606,"column":12}}]}},"code":["/**"," * @fileoverview Helper to locate and load configuration files."," * @author Nicholas C. Zakas"," */","","/* eslint no-use-before-define: 0 */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    shell = require(\"shelljs\"),","    ConfigOps = require(\"./config-ops\"),","    validator = require(\"./config-validator\"),","    Plugins = require(\"./plugins\"),","    pathUtil = require(\"../util/path-util\"),","    ModuleResolver = require(\"../util/module-resolver\"),","    pathIsInside = require(\"path-is-inside\"),","    stripBom = require(\"strip-bom\"),","    stripComments = require(\"strip-json-comments\"),","    stringify = require(\"json-stable-stringify\"),","    defaultOptions = require(\"../../conf/eslint-recommended\"),","    requireUncached = require(\"require-uncached\");","","const debug = require(\"debug\")(\"eslint:config-file\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Determines sort order for object keys for json-stable-stringify"," *"," * see: https://github.com/substack/json-stable-stringify#cmp"," *"," * @param   {Object} a The first comparison object ({key: akey, value: avalue})"," * @param   {Object} b The second comparison object ({key: bkey, value: bvalue})"," * @returns {number}   1 or -1, used in stringify cmp method"," */","function sortByKey(a, b) {","    return a.key > b.key ? 1 : -1;","}","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","const CONFIG_FILES = [","    \".eslintrc.js\",","    \".eslintrc.yaml\",","    \".eslintrc.yml\",","    \".eslintrc.json\",","    \".eslintrc\",","    \"package.json\"","];","","const resolver = new ModuleResolver();","","/**"," * Convenience wrapper for synchronously reading file contents."," * @param {string} filePath The filename to read."," * @returns {string} The file contents."," * @private"," */","function readFile(filePath) {","    return stripBom(fs.readFileSync(filePath, \"utf8\"));","}","","/**"," * Determines if a given string represents a filepath or not using the same"," * conventions as require(), meaning that the first character must be nonalphanumeric"," * and not the @ sign which is used for scoped packages to be considered a file path."," * @param {string} filePath The string to check."," * @returns {boolean} True if it's a filepath, false if not."," * @private"," */","function isFilePath(filePath) {","    return path.isAbsolute(filePath) || !/\\w|@/.test(filePath.charAt(0));","}","","/**"," * Loads a YAML configuration from a file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadYAMLConfigFile(filePath) {","    debug(`Loading YAML config file: ${filePath}`);","","    // lazy load YAML to improve performance when not used","    const yaml = require(\"js-yaml\");","","    try {","","        // empty YAML file can be null, so always use","        return yaml.safeLoad(readFile(filePath)) || {};","    } catch (e) {","        debug(`Error reading YAML file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Loads a JSON configuration from a file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadJSONConfigFile(filePath) {","    debug(`Loading JSON config file: ${filePath}`);","","    try {","        return JSON.parse(stripComments(readFile(filePath)));","    } catch (e) {","        debug(`Error reading JSON file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Loads a legacy (.eslintrc) configuration from a file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadLegacyConfigFile(filePath) {","    debug(`Loading config file: ${filePath}`);","","    // lazy load YAML to improve performance when not used","    const yaml = require(\"js-yaml\");","","    try {","        return yaml.safeLoad(stripComments(readFile(filePath))) || /* istanbul ignore next */ {};","    } catch (e) {","        debug(`Error reading YAML file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Loads a JavaScript configuration from a file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadJSConfigFile(filePath) {","    debug(`Loading JS config file: ${filePath}`);","    try {","        return requireUncached(filePath);","    } catch (e) {","        debug(`Error reading JavaScript file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Loads a configuration from a package.json file."," * @param {string} filePath The filename to load."," * @returns {Object} The configuration object from the file."," * @throws {Error} If the file cannot be read."," * @private"," */","function loadPackageJSONConfigFile(filePath) {","    debug(`Loading package.json config file: ${filePath}`);","    try {","        return loadJSONConfigFile(filePath).eslintConfig || null;","    } catch (e) {","        debug(`Error reading package.json file: ${filePath}`);","        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;","        throw e;","    }","}","","/**"," * Creates an error to notify about a missing config to extend from."," * @param {string} configName The name of the missing config."," * @returns {Error} The error object to throw"," * @private"," */","function configMissingError(configName) {","    const error = new Error(`Failed to load config \"${configName}\" to extend from.`);","","    error.messageTemplate = \"extend-config-missing\";","    error.messageData = {","        configName","    };","    return error;","}","","/**"," * Loads a configuration file regardless of the source. Inspects the file path"," * to determine the correctly way to load the config file."," * @param {Object} file The path to the configuration."," * @returns {Object} The configuration information."," * @private"," */","function loadConfigFile(file) {","    const filePath = file.filePath;","    let config;","","    switch (path.extname(filePath)) {","        case \".js\":","            config = loadJSConfigFile(filePath);","            if (file.configName) {","                config = config.configs[file.configName];","                if (!config) {","                    throw configMissingError(file.configFullName);","                }","            }","            break;","","        case \".json\":","            if (path.basename(filePath) === \"package.json\") {","                config = loadPackageJSONConfigFile(filePath);","                if (config === null) {","                    return null;","                }","            } else {","                config = loadJSONConfigFile(filePath);","            }","            break;","","        case \".yaml\":","        case \".yml\":","            config = loadYAMLConfigFile(filePath);","            break;","","        default:","            config = loadLegacyConfigFile(filePath);","    }","","    return ConfigOps.merge(ConfigOps.createEmptyConfig(), config);","}","","/**"," * Writes a configuration file in JSON format."," * @param {Object} config The configuration object to write."," * @param {string} filePath The filename to write to."," * @returns {void}"," * @private"," */","function writeJSONConfigFile(config, filePath) {","    debug(`Writing JSON config file: ${filePath}`);","","    const content = stringify(config, { cmp: sortByKey, space: 4 });","","    fs.writeFileSync(filePath, content, \"utf8\");","}","","/**"," * Writes a configuration file in YAML format."," * @param {Object} config The configuration object to write."," * @param {string} filePath The filename to write to."," * @returns {void}"," * @private"," */","function writeYAMLConfigFile(config, filePath) {","    debug(`Writing YAML config file: ${filePath}`);","","    // lazy load YAML to improve performance when not used","    const yaml = require(\"js-yaml\");","","    const content = yaml.safeDump(config, { sortKeys: true });","","    fs.writeFileSync(filePath, content, \"utf8\");","}","","/**"," * Writes a configuration file in JavaScript format."," * @param {Object} config The configuration object to write."," * @param {string} filePath The filename to write to."," * @returns {void}"," * @private"," */","function writeJSConfigFile(config, filePath) {","    debug(`Writing JS config file: ${filePath}`);","","    const content = `module.exports = ${stringify(config, { cmp: sortByKey, space: 4 })};`;","","    fs.writeFileSync(filePath, content, \"utf8\");","}","","/**"," * Writes a configuration file."," * @param {Object} config The configuration object to write."," * @param {string} filePath The filename to write to."," * @returns {void}"," * @throws {Error} When an unknown file type is specified."," * @private"," */","function write(config, filePath) {","    switch (path.extname(filePath)) {","        case \".js\":","            writeJSConfigFile(config, filePath);","            break;","","        case \".json\":","            writeJSONConfigFile(config, filePath);","            break;","","        case \".yaml\":","        case \".yml\":","            writeYAMLConfigFile(config, filePath);","            break;","","        default:","            throw new Error(\"Can't write to unknown file type.\");","    }","}","","/**"," * Determines the base directory for node packages referenced in a config file."," * This does not include node_modules in the path so it can be used for all"," * references relative to a config file."," * @param {string} configFilePath The config file referencing the file."," * @returns {string} The base directory for the file path."," * @private"," */","function getBaseDir(configFilePath) {","","    // calculates the path of the project including ESLint as dependency","    const projectPath = path.resolve(__dirname, \"../../../\");","","    if (configFilePath && pathIsInside(configFilePath, projectPath)) {","","        // be careful of https://github.com/substack/node-resolve/issues/78","        return path.join(path.resolve(configFilePath));","    }","","    /*","     * default to ESLint project path since it's unlikely that plugins will be","     * in this directory","     */","    return path.join(projectPath);","}","","/**"," * Determines the lookup path, including node_modules, for package"," * references relative to a config file."," * @param {string} configFilePath The config file referencing the file."," * @returns {string} The lookup path for the file path."," * @private"," */","function getLookupPath(configFilePath) {","    const basedir = getBaseDir(configFilePath);","","    return path.join(basedir, \"node_modules\");","}","","/**"," * Resolves a eslint core config path"," * @param {string} name The eslint config name."," * @returns {string} The resolved path of the config."," * @private"," */","function getEslintCoreConfigPath(name) {","    if (name === \"eslint:recommended\") {","","       /*","        * Add an explicit substitution for eslint:recommended to","        * conf/eslint-recommended.js.","        */","        return path.resolve(__dirname, \"../../conf/eslint-recommended.js\");","    }","","    if (name === \"eslint:all\") {","","       /*","        * Add an explicit substitution for eslint:all to conf/eslint-all.js","        */","        return path.resolve(__dirname, \"../../conf/eslint-all.js\");","    }","","    throw configMissingError(name);","}","","/**"," * Applies values from the \"extends\" field in a configuration file."," * @param {Object} config The configuration information."," * @param {string} filePath The file path from which the configuration information"," *      was loaded."," * @param {string} [relativeTo] The path to resolve relative to."," * @returns {Object} A new configuration object with all of the \"extends\" fields"," *      loaded and merged."," * @private"," */","function applyExtends(config, filePath, relativeTo) {","    let configExtends = config.extends;","","    // normalize into an array for easier handling","    if (!Array.isArray(config.extends)) {","        configExtends = [config.extends];","    }","","    // Make the last element in an array take the highest precedence","    config = configExtends.reduceRight((previousValue, parentPath) => {","        try {","            if (parentPath.startsWith(\"eslint:\")) {","                parentPath = getEslintCoreConfigPath(parentPath);","            } else if (isFilePath(parentPath)) {","","                /*","                 * If the `extends` path is relative, use the directory of the current configuration","                 * file as the reference point. Otherwise, use as-is.","                 */","                parentPath = (path.isAbsolute(parentPath)","                    ? parentPath","                    : path.join(relativeTo || path.dirname(filePath), parentPath)","                );","            }","            debug(`Loading ${parentPath}`);","            return ConfigOps.merge(load(parentPath, false, relativeTo), previousValue);","        } catch (e) {","","            /*","             * If the file referenced by `extends` failed to load, add the path","             * to the configuration file that referenced it to the error","             * message so the user is able to see where it was referenced from,","             * then re-throw.","             */","            e.message += `\\nReferenced from: ${filePath}`;","            throw e;","        }","","    }, config);","","    return config;","}","","/**"," * Brings package name to correct format based on prefix"," * @param {string} name The name of the package."," * @param {string} prefix Can be either \"eslint-plugin\" or \"eslint-config"," * @returns {string} Normalized name of the package"," * @private"," */","function normalizePackageName(name, prefix) {","","    /*","     * On Windows, name can come in with Windows slashes instead of Unix slashes.","     * Normalize to Unix first to avoid errors later on.","     * https://github.com/eslint/eslint/issues/5644","     */","    if (name.indexOf(\"\\\\\") > -1) {","        name = pathUtil.convertPathToPosix(name);","    }","","    if (name.charAt(0) === \"@\") {","","        /*","         * it's a scoped package","         * package name is \"eslint-config\", or just a username","         */","        const scopedPackageShortcutRegex = new RegExp(`^(@[^/]+)(?:/(?:${prefix})?)?$`),","            scopedPackageNameRegex = new RegExp(`^${prefix}(-|$)`);","","        if (scopedPackageShortcutRegex.test(name)) {","            name = name.replace(scopedPackageShortcutRegex, `$1/${prefix}`);","        } else if (!scopedPackageNameRegex.test(name.split(\"/\")[1])) {","","            /*","             * for scoped packages, insert the eslint-config after the first / unless","             * the path is already @scope/eslint or @scope/eslint-config-xxx","             */","            name = name.replace(/^@([^/]+)\\/(.*)$/, `@$1/${prefix}-$2`);","        }","    } else if (name.indexOf(`${prefix}-`) !== 0) {","        name = `${prefix}-${name}`;","    }","","    return name;","}","","/**"," * Resolves a configuration file path into the fully-formed path, whether filename"," * or package name."," * @param {string} filePath The filepath to resolve."," * @param {string} [relativeTo] The path to resolve relative to."," * @returns {Object} An object containing 3 properties:"," * - 'filePath' (required) the resolved path that can be used directly to load the configuration."," * - 'configName' the name of the configuration inside the plugin."," * - 'configFullName' the name of the configuration as used in the eslint config (e.g. 'plugin:node/recommended')."," * @private"," */","function resolve(filePath, relativeTo) {","    if (isFilePath(filePath)) {","        return { filePath: path.resolve(relativeTo || \"\", filePath) };","    }","    let normalizedPackageName;","","    if (filePath.startsWith(\"plugin:\")) {","        const configFullName = filePath;","        const pluginName = filePath.substr(7, filePath.lastIndexOf(\"/\") - 7);","        const configName = filePath.substr(filePath.lastIndexOf(\"/\") + 1, filePath.length - filePath.lastIndexOf(\"/\") - 1);","","        normalizedPackageName = normalizePackageName(pluginName, \"eslint-plugin\");","        debug(`Attempting to resolve ${normalizedPackageName}`);","        filePath = resolver.resolve(normalizedPackageName, getLookupPath(relativeTo));","        return { filePath, configName, configFullName };","    }","    normalizedPackageName = normalizePackageName(filePath, \"eslint-config\");","    debug(`Attempting to resolve ${normalizedPackageName}`);","    filePath = resolver.resolve(normalizedPackageName, getLookupPath(relativeTo));","    return { filePath };","","","","}","","/**"," * Loads a configuration file from the given file path."," * @param {string} filePath The filename or package name to load the configuration"," *      information from."," * @param {boolean} [applyEnvironments=false] Set to true to merge in environment settings."," * @param {string} [relativeTo] The path to resolve relative to."," * @returns {Object} The configuration information."," * @private"," */","function load(filePath, applyEnvironments, relativeTo) {","    const resolvedPath = resolve(filePath, relativeTo),","        dirname = path.dirname(resolvedPath.filePath),","        lookupPath = getLookupPath(dirname);","    let config = loadConfigFile(resolvedPath);","","    if (config) {","","        // ensure plugins are properly loaded first","        if (config.plugins) {","            Plugins.loadAll(config.plugins);","        }","","        // remove parser from config if it is the default parser","        if (config.parser === defaultOptions.parser) {","            config.parser = null;","        }","","        // include full path of parser if present","        if (config.parser) {","            if (isFilePath(config.parser)) {","                config.parser = path.resolve(dirname || \"\", config.parser);","            } else {","                config.parser = resolver.resolve(config.parser, lookupPath);","            }","        }","","        // validate the configuration before continuing","        validator.validate(config, filePath);","","        /*","         * If an `extends` property is defined, it represents a configuration file to use as","         * a \"parent\". Load the referenced file and merge the configuration recursively.","         */","        if (config.extends) {","            config = applyExtends(config, filePath, dirname);","        }","","        if (config.env && applyEnvironments) {","","            // Merge in environment-specific globals and parserOptions.","            config = ConfigOps.applyEnvironments(config);","        }","","    }","","    return config;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    getBaseDir,","    getLookupPath,","    load,","    resolve,","    write,","    applyExtends,","    normalizePackageName,","    CONFIG_FILES,","","    /**","     * Retrieves the configuration filename for a given directory. It loops over all","     * of the valid configuration filenames in order to find the first one that exists.","     * @param {string} directory The directory to check for a config file.","     * @returns {?string} The filename of the configuration file for the directory","     *      or null if there is no configuration file in the directory.","     */","    getFilenameForDirectory(directory) {","        for (let i = 0, len = CONFIG_FILES.length; i < len; i++) {","            const filename = path.join(directory, CONFIG_FILES[i]);","","            if (shell.test(\"-f\", filename)) {","                return filename;","            }","        }","","        return null;","    }","};",""],"l":{"14":1,"29":1,"44":1,"45":0,"52":1,"61":1,"69":1,"70":0,"81":1,"82":0,"92":1,"93":0,"96":0,"98":0,"101":0,"103":0,"104":0,"105":0,"116":1,"117":0,"119":0,"120":0,"122":0,"123":0,"124":0,"135":1,"136":0,"139":0,"141":0,"142":0,"144":0,"145":0,"146":0,"157":1,"158":0,"159":0,"160":0,"162":0,"163":0,"164":0,"175":1,"176":0,"177":0,"178":0,"180":0,"181":0,"182":0,"192":1,"193":0,"195":0,"196":0,"199":0,"209":1,"210":0,"211":0,"213":0,"215":0,"216":0,"217":0,"218":0,"219":0,"222":0,"225":0,"226":0,"227":0,"228":0,"231":0,"233":0,"237":0,"238":0,"241":0,"244":0,"254":1,"255":0,"257":0,"259":0,"269":1,"270":0,"273":0,"275":0,"277":0,"287":1,"288":0,"290":0,"292":0,"303":1,"304":0,"306":0,"307":0,"310":0,"311":0,"315":0,"316":0,"319":0,"331":1,"334":0,"336":0,"339":0,"346":0,"356":1,"357":0,"359":0,"368":1,"369":0,"375":0,"378":0,"383":0,"386":0,"399":1,"400":0,"403":0,"404":0,"408":0,"409":0,"410":0,"411":0,"412":0,"418":0,"423":0,"424":0,"433":0,"434":0,"439":0,"449":1,"456":0,"457":0,"460":0,"466":0,"469":0,"470":0,"471":0,"477":0,"479":0,"480":0,"483":0,"497":1,"498":0,"499":0,"501":0,"503":0,"504":0,"505":0,"506":0,"508":0,"509":0,"510":0,"511":0,"513":0,"514":0,"515":0,"516":0,"531":1,"532":0,"535":0,"537":0,"540":0,"541":0,"545":0,"546":0,"550":0,"551":0,"552":0,"554":0,"559":0,"565":0,"566":0,"569":0,"572":0,"577":0,"584":1,"603":0,"604":0,"606":0,"607":0,"611":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/plugins.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/config/plugins.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"removePrefix","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":34}}},"2":{"name":"getNamespace","line":39,"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":34}}},"3":{"name":"removeNamespace","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":37}}},"4":{"name":"(anonymous_4)","line":68,"loc":{"start":{"line":68,"column":10},"end":{"line":68,"column":31}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":7},"end":{"line":91,"column":20}}},"6":{"name":"(anonymous_6)","line":99,"loc":{"start":{"line":99,"column":10},"end":{"line":99,"column":13}}},"7":{"name":"(anonymous_7)","line":109,"loc":{"start":{"line":109,"column":8},"end":{"line":109,"column":21}}},"8":{"name":"(anonymous_8)","line":161,"loc":{"start":{"line":161,"column":11},"end":{"line":161,"column":25}}},"9":{"name":"(anonymous_9)","line":169,"loc":{"start":{"line":169,"column":13},"end":{"line":169,"column":16}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":12,"column":32}},"2":{"start":{"line":14,"column":0},"end":{"line":14,"column":49}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":34}},"4":{"start":{"line":22,"column":0},"end":{"line":23,"column":32}},"5":{"start":{"line":30,"column":0},"end":{"line":32,"column":1}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":119}},"7":{"start":{"line":39,"column":0},"end":{"line":41,"column":1}},"8":{"start":{"line":40,"column":4},"end":{"line":40,"column":89}},"9":{"start":{"line":48,"column":0},"end":{"line":50,"column":1}},"10":{"start":{"line":49,"column":4},"end":{"line":49,"column":51}},"11":{"start":{"line":56,"column":0},"end":{"line":172,"column":2}},"12":{"start":{"line":69,"column":8},"end":{"line":72,"column":66}},"13":{"start":{"line":75,"column":8},"end":{"line":75,"column":36}},"14":{"start":{"line":76,"column":8},"end":{"line":76,"column":53}},"15":{"start":{"line":77,"column":8},"end":{"line":77,"column":46}},"16":{"start":{"line":81,"column":8},"end":{"line":81,"column":50}},"17":{"start":{"line":82,"column":8},"end":{"line":82,"column":67}},"18":{"start":{"line":83,"column":8},"end":{"line":83,"column":60}},"19":{"start":{"line":92,"column":8},"end":{"line":92,"column":43}},"20":{"start":{"line":100,"column":8},"end":{"line":100,"column":23}},"21":{"start":{"line":110,"column":8},"end":{"line":114,"column":86}},"22":{"start":{"line":115,"column":8},"end":{"line":115,"column":26}},"23":{"start":{"line":117,"column":8},"end":{"line":125,"column":9}},"24":{"start":{"line":118,"column":12},"end":{"line":118,"column":97}},"25":{"start":{"line":120,"column":12},"end":{"line":120,"column":65}},"26":{"start":{"line":121,"column":12},"end":{"line":123,"column":14}},"27":{"start":{"line":124,"column":12},"end":{"line":124,"column":34}},"28":{"start":{"line":127,"column":8},"end":{"line":152,"column":9}},"29":{"start":{"line":128,"column":12},"end":{"line":149,"column":13}},"30":{"start":{"line":129,"column":16},"end":{"line":129,"column":43}},"31":{"start":{"line":131,"column":16},"end":{"line":145,"column":17}},"32":{"start":{"line":134,"column":20},"end":{"line":134,"column":46}},"33":{"start":{"line":138,"column":20},"end":{"line":138,"column":64}},"34":{"start":{"line":139,"column":20},"end":{"line":139,"column":114}},"35":{"start":{"line":140,"column":20},"end":{"line":140,"column":72}},"36":{"start":{"line":141,"column":20},"end":{"line":143,"column":22}},"37":{"start":{"line":144,"column":20},"end":{"line":144,"column":43}},"38":{"start":{"line":148,"column":16},"end":{"line":148,"column":36}},"39":{"start":{"line":151,"column":12},"end":{"line":151,"column":44}},"40":{"start":{"line":162,"column":8},"end":{"line":162,"column":45}},"41":{"start":{"line":170,"column":8},"end":{"line":170,"column":38}}},"branchMap":{"1":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":58},"end":{"line":31,"column":105}},{"start":{"line":31,"column":108},"end":{"line":31,"column":118}}]},"2":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":47},"end":{"line":40,"column":83}},{"start":{"line":40,"column":86},"end":{"line":40,"column":88}}]},"3":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":15},"end":{"line":92,"column":34}},{"start":{"line":92,"column":38},"end":{"line":92,"column":42}}]},"4":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8}},{"start":{"line":117,"column":8},"end":{"line":117,"column":8}}]},"5":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":127,"column":8}},{"start":{"line":127,"column":8},"end":{"line":127,"column":8}}]}},"code":["/**"," * @fileoverview Plugins manager"," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Environments = require(\"./environments\"),","    Rules = require(\"../rules\");","","const debug = require(\"debug\")(\"eslint:plugins\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","let plugins = Object.create(null);","","const PLUGIN_NAME_PREFIX = \"eslint-plugin-\",","    NAMESPACE_REGEX = /^@.*\\//i;","","/**"," * Removes the prefix `eslint-plugin-` from a plugin name."," * @param {string} pluginName The name of the plugin which may have the prefix."," * @returns {string} The name of the plugin without prefix."," */","function removePrefix(pluginName) {","    return pluginName.indexOf(PLUGIN_NAME_PREFIX) === 0 ? pluginName.substring(PLUGIN_NAME_PREFIX.length) : pluginName;","}","","/**"," * Gets the scope (namespace) of a plugin."," * @param {string} pluginName The name of the plugin which may have the prefix."," * @returns {string} The name of the plugins namepace if it has one."," */","function getNamespace(pluginName) {","    return pluginName.match(NAMESPACE_REGEX) ? pluginName.match(NAMESPACE_REGEX)[0] : \"\";","}","","/**"," * Removes the namespace from a plugin name."," * @param {string} pluginName The name of the plugin which may have the prefix."," * @returns {string} The name of the plugin without the namespace."," */","function removeNamespace(pluginName) {","    return pluginName.replace(NAMESPACE_REGEX, \"\");","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = {","","    removePrefix,","    getNamespace,","    removeNamespace,","","    /**","     * Defines a plugin with a given name rather than loading from disk.","     * @param {string} pluginName The name of the plugin to load.","     * @param {Object} plugin The plugin object.","     * @returns {void}","     */","    define(pluginName, plugin) {","        const pluginNamespace = getNamespace(pluginName),","            pluginNameWithoutNamespace = removeNamespace(pluginName),","            pluginNameWithoutPrefix = removePrefix(pluginNameWithoutNamespace),","            shortName = pluginNamespace + pluginNameWithoutPrefix;","","        // load up environments and rules","        plugins[shortName] = plugin;","        Environments.importPlugin(plugin, shortName);","        Rules.importPlugin(plugin, shortName);","","        // load up environments and rules for the name that '@scope/' was omitted","        // 3 lines below will be removed by 4.0.0","        plugins[pluginNameWithoutPrefix] = plugin;","        Environments.importPlugin(plugin, pluginNameWithoutPrefix);","        Rules.importPlugin(plugin, pluginNameWithoutPrefix);","    },","","    /**","     * Gets a plugin with the given name.","     * @param {string} pluginName The name of the plugin to retrieve.","     * @returns {Object} The plugin or null if not loaded.","     */","    get(pluginName) {","        return plugins[pluginName] || null;","    },","","    /**","     * Returns all plugins that are loaded.","     * @returns {Object} The plugins cache.","     */","    getAll() {","        return plugins;","    },","","    /**","     * Loads a plugin with the given name.","     * @param {string} pluginName The name of the plugin to load.","     * @returns {void}","     * @throws {Error} If the plugin cannot be loaded.","     */","    load(pluginName) {","        const pluginNamespace = getNamespace(pluginName),","            pluginNameWithoutNamespace = removeNamespace(pluginName),","            pluginNameWithoutPrefix = removePrefix(pluginNameWithoutNamespace),","            shortName = pluginNamespace + pluginNameWithoutPrefix,","            longName = pluginNamespace + PLUGIN_NAME_PREFIX + pluginNameWithoutPrefix;","        let plugin = null;","","        if (pluginName.match(/\\s+/)) {","            const whitespaceError = new Error(`Whitespace found in plugin name '${pluginName}'`);","","            whitespaceError.messageTemplate = \"whitespace-found\";","            whitespaceError.messageData = {","                pluginName: longName","            };","            throw whitespaceError;","        }","","        if (!plugins[shortName]) {","            try {","                plugin = require(longName);","            } catch (pluginLoadErr) {","                try {","","                    // Check whether the plugin exists","                    require.resolve(longName);","                } catch (missingPluginErr) {","","                    // If the plugin can't be resolved, display the missing plugin error (usually a config or install error)","                    debug(`Failed to load plugin ${longName}.`);","                    missingPluginErr.message = `Failed to load plugin ${pluginName}: ${missingPluginErr.message}`;","                    missingPluginErr.messageTemplate = \"plugin-missing\";","                    missingPluginErr.messageData = {","                        pluginName: longName","                    };","                    throw missingPluginErr;","                }","","                // Otherwise, the plugin exists and is throwing on module load for some reason, so print the stack trace.","                throw pluginLoadErr;","            }","","            this.define(pluginName, plugin);","        }","    },","","    /**","     * Loads all plugins from an array.","     * @param {string[]} pluginNames An array of plugins names.","     * @returns {void}","     * @throws {Error} If a plugin cannot be loaded.","     */","    loadAll(pluginNames) {","        pluginNames.forEach(this.load, this);","    },","","    /**","     * Resets plugin information. Use for tests only.","     * @returns {void}","     */","    testReset() {","        plugins = Object.create(null);","    }","};",""],"l":{"11":1,"14":1,"20":1,"22":1,"30":1,"31":0,"39":1,"40":0,"48":1,"49":0,"56":1,"69":0,"75":0,"76":0,"77":0,"81":0,"82":0,"83":0,"92":0,"100":0,"110":0,"115":0,"117":0,"118":0,"120":0,"121":0,"124":0,"127":0,"128":0,"129":0,"131":0,"134":0,"138":0,"139":0,"140":0,"141":0,"144":0,"148":0,"151":0,"162":0,"170":0}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/module-resolver.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/module-resolver.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[1,0],"2":[1,1],"3":[0,0]},"f":{"1":1,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":42,"loc":{"start":{"line":42,"column":15},"end":{"line":42,"column":25}}},"2":{"name":"(anonymous_2)","line":55,"loc":{"start":{"line":55,"column":11},"end":{"line":55,"column":35}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"2":{"start":{"line":18,"column":0},"end":{"line":29,"column":2}},"3":{"start":{"line":43,"column":8},"end":{"line":43,"column":73}},"4":{"start":{"line":62,"column":8},"end":{"line":62,"column":62}},"5":{"start":{"line":64,"column":8},"end":{"line":64,"column":45}},"6":{"start":{"line":71,"column":8},"end":{"line":71,"column":59}},"7":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"8":{"start":{"line":74,"column":12},"end":{"line":74,"column":60}},"9":{"start":{"line":77,"column":8},"end":{"line":77,"column":22}},"10":{"start":{"line":85,"column":0},"end":{"line":85,"column":32}}},"branchMap":{"1":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":32},"end":{"line":28,"column":71}},{"start":{"line":28,"column":74},"end":{"line":28,"column":101}}]},"2":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":58},"end":{"line":43,"column":65}},{"start":{"line":43,"column":69},"end":{"line":43,"column":71}}]},"3":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":8}},{"start":{"line":73,"column":8},"end":{"line":73,"column":8}}]}},"code":["/**"," * @fileoverview Implements the Node.js require.resolve algorithm"," * @author Nicholas C. Zakas"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Module = require(\"module\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","const DEFAULT_OPTIONS = {","","    /*","     * module.paths is an array of paths to search for resolving things relative","     * to this file. Module.globalPaths contains all of the special Node.js","     * directories that can also be searched for modules.","     *","     * Need to check for existence of module.paths because Jest seems not to","     * include it. See https://github.com/eslint/eslint/issues/5791.","     */","    lookupPaths: module.paths ? module.paths.concat(Module.globalPaths) : Module.globalPaths.concat()","};","","/**"," * Resolves modules based on a set of options."," */","class ModuleResolver {","","    /**","     * Resolves modules based on a set of options.","     * @param {Object} options The options for resolving modules.","     * @param {string[]} options.lookupPaths An array of paths to include in the","     *      lookup with the highest priority paths coming first.","     */","    constructor(options) {","        this.options = Object.assign({}, DEFAULT_OPTIONS, options || {});","    }","","    /**","     * Resolves the file location of a given module relative to the configured","     * lookup paths.","     * @param {string} name The module name to resolve.","     * @param {string} extraLookupPath An extra path to look into for the module.","     *      This path is used with the highest priority.","     * @returns {string} The resolved file path for the module.","     * @throws {Error} If the module cannot be resolved.","     */","    resolve(name, extraLookupPath) {","","        /*","         * First, clone the lookup paths so we're not messing things up for","         * subsequent calls to this function. Then, move the extraLookupPath to the","         * top of the lookup paths list so it will be searched first.","         */","        const lookupPaths = this.options.lookupPaths.concat();","","        lookupPaths.unshift(extraLookupPath);","","        /**","         * Module._findPath is an internal method to Node.js, then one they use to","         * lookup file paths when require() is called. So, we are hooking into the","         * exact same logic that Node.js uses.","         */","        const result = Module._findPath(name, lookupPaths);   // eslint-disable-line no-underscore-dangle","","        if (!result) {","            throw new Error(`Cannot find module '${name}'`);","        }","","        return result;","    }","}","","//------------------------------------------------------------------------------","// Public API","//------------------------------------------------------------------------------","","module.exports = ModuleResolver;",""],"l":{"12":1,"18":1,"43":1,"62":0,"64":0,"71":0,"73":0,"74":0,"77":0,"85":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/file-finder.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/file-finder.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"getDirectoryEntries","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":40}}},"2":{"name":"normalizeDirectoryEntries","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":73}}},"3":{"name":"(anonymous_3)","line":69,"loc":{"start":{"line":69,"column":15},"end":{"line":69,"column":28}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":32},"end":{"line":84,"column":44}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":13,"column":27}},"2":{"start":{"line":26,"column":0},"end":{"line":32,"column":1}},"3":{"start":{"line":27,"column":4},"end":{"line":31,"column":5}},"4":{"start":{"line":28,"column":8},"end":{"line":28,"column":41}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":18}},"6":{"start":{"line":41,"column":0},"end":{"line":54,"column":1}},"7":{"start":{"line":42,"column":4},"end":{"line":42,"column":24}},"8":{"start":{"line":44,"column":4},"end":{"line":52,"column":7}},"9":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"10":{"start":{"line":46,"column":12},"end":{"line":46,"column":65}},"11":{"start":{"line":48,"column":12},"end":{"line":50,"column":13}},"12":{"start":{"line":49,"column":16},"end":{"line":49,"column":48}},"13":{"start":{"line":53,"column":4},"end":{"line":53,"column":20}},"14":{"start":{"line":70,"column":8},"end":{"line":70,"column":64}},"15":{"start":{"line":71,"column":8},"end":{"line":71,"column":40}},"16":{"start":{"line":72,"column":8},"end":{"line":72,"column":24}},"17":{"start":{"line":85,"column":8},"end":{"line":85,"column":33}},"18":{"start":{"line":87,"column":8},"end":{"line":91,"column":9}},"19":{"start":{"line":88,"column":12},"end":{"line":88,"column":58}},"20":{"start":{"line":90,"column":12},"end":{"line":90,"column":33}},"21":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"22":{"start":{"line":94,"column":12},"end":{"line":94,"column":36}},"23":{"start":{"line":97,"column":8},"end":{"line":97,"column":24}},"24":{"start":{"line":98,"column":8},"end":{"line":98,"column":41}},"25":{"start":{"line":99,"column":8},"end":{"line":99,"column":25}},"26":{"start":{"line":101,"column":8},"end":{"line":130,"column":51}},"27":{"start":{"line":102,"column":12},"end":{"line":102,"column":41}},"28":{"start":{"line":103,"column":12},"end":{"line":103,"column":34}},"29":{"start":{"line":105,"column":12},"end":{"line":105,"column":109}},"30":{"start":{"line":107,"column":12},"end":{"line":121,"column":13}},"31":{"start":{"line":108,"column":16},"end":{"line":120,"column":17}},"32":{"start":{"line":110,"column":20},"end":{"line":119,"column":21}},"33":{"start":{"line":111,"column":24},"end":{"line":111,"column":64}},"34":{"start":{"line":114,"column":24},"end":{"line":116,"column":25}},"35":{"start":{"line":115,"column":28},"end":{"line":115,"column":58}},"36":{"start":{"line":118,"column":24},"end":{"line":118,"column":30}},"37":{"start":{"line":122,"column":12},"end":{"line":122,"column":36}},"38":{"start":{"line":125,"column":12},"end":{"line":125,"column":48}},"39":{"start":{"line":127,"column":12},"end":{"line":129,"column":13}},"40":{"start":{"line":128,"column":16},"end":{"line":128,"column":38}},"41":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"42":{"start":{"line":134,"column":12},"end":{"line":134,"column":62}},"43":{"start":{"line":137,"column":8},"end":{"line":137,"column":30}},"44":{"start":{"line":141,"column":0},"end":{"line":141,"column":28}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":12}},{"start":{"line":48,"column":12},"end":{"line":48,"column":12}}]},"3":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":48},"end":{"line":70,"column":53}},{"start":{"line":70,"column":56},"end":{"line":70,"column":63}}]},"4":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":19},"end":{"line":71,"column":22}},{"start":{"line":71,"column":26},"end":{"line":71,"column":39}}]},"5":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":8}},{"start":{"line":87,"column":8},"end":{"line":87,"column":8}}]},"6":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":8}},{"start":{"line":93,"column":8},"end":{"line":93,"column":8}}]},"7":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":12},"end":{"line":107,"column":12}},{"start":{"line":107,"column":12},"end":{"line":107,"column":12}}]},"8":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":20},"end":{"line":110,"column":20}},{"start":{"line":110,"column":20},"end":{"line":110,"column":20}}]},"9":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":12},"end":{"line":127,"column":12}},{"start":{"line":127,"column":12},"end":{"line":127,"column":12}}]}},"code":["/**"," * @fileoverview Util class to find config files."," * @author Aliaksei Shytkin"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Get the entries for a directory. Including a try-catch may be detrimental to"," * function performance, so move it out here a separate function."," * @param {string} directory The directory to search in."," * @returns {string[]} The entries in the directory or an empty array on error."," * @private"," */","function getDirectoryEntries(directory) {","    try {","        return fs.readdirSync(directory);","    } catch (ex) {","        return [];","    }","}","","/**"," * Create a hash of filenames from a directory listing"," * @param {string[]} entries Array of directory entries."," * @param {string} directory Path to a current directory."," * @param {string[]} supportedConfigs List of support filenames."," * @returns {Object} Hashmap of filenames"," */","function normalizeDirectoryEntries(entries, directory, supportedConfigs) {","    const fileHash = {};","","    entries.forEach(entry => {","        if (supportedConfigs.indexOf(entry) >= 0) {","            const resolvedEntry = path.resolve(directory, entry);","","            if (fs.statSync(resolvedEntry).isFile()) {","                fileHash[entry] = resolvedEntry;","            }","        }","    });","    return fileHash;","}","","//------------------------------------------------------------------------------","// API","//------------------------------------------------------------------------------","","/**"," * FileFinder class"," */","class FileFinder {","","    /**","     * @param {string[]} files The basename(s) of the file(s) to find.","     * @param {stirng} cwd Current working directory","     */","    constructor(files, cwd) {","        this.fileNames = Array.isArray(files) ? files : [files];","        this.cwd = cwd || process.cwd();","        this.cache = {};","    }","","    /**","     * Find all instances of files with the specified file names, in directory and","     * parent directories. Cache the results.","     * Does not check if a matching directory entry is a file.","     * Searches for all the file names in this.fileNames.","     * Is currently used by lib/config.js to find .eslintrc and package.json files.","     * @param  {string} directory The directory to start the search from.","     * @returns {string[]} The file paths found.","     */","    findAllInDirectoryAndParents(directory) {","        const cache = this.cache;","","        if (directory) {","            directory = path.resolve(this.cwd, directory);","        } else {","            directory = this.cwd;","        }","","        if (cache.hasOwnProperty(directory)) {","            return cache[directory];","        }","","        const dirs = [];","        const fileNames = this.fileNames;","        let searched = 0;","","        do {","            dirs[searched++] = directory;","            cache[directory] = [];","","            const filesMap = normalizeDirectoryEntries(getDirectoryEntries(directory), directory, fileNames);","","            if (Object.keys(filesMap).length) {","                for (let k = 0; k < fileNames.length; k++) {","","                    if (filesMap[fileNames[k]]) {","                        const filePath = filesMap[fileNames[k]];","","                        // Add the file path to the cache of each directory searched.","                        for (let j = 0; j < searched; j++) {","                            cache[dirs[j]].push(filePath);","                        }","","                        break;","                    }","                }","            }","            const child = directory;","","            // Assign parent directory to directory.","            directory = path.dirname(directory);","","            if (directory === child) {","                return cache[dirs[0]];","            }","        } while (!cache.hasOwnProperty(directory));","","        // Add what has been cached previously to the cache of each directory searched.","        for (let i = 0; i < searched; i++) {","            dirs.push.apply(cache[dirs[i]], cache[directory]);","        }","","        return cache[dirs[0]];","    }","}","","module.exports = FileFinder;",""],"l":{"12":1,"26":1,"27":0,"28":0,"30":0,"41":1,"42":0,"44":0,"45":0,"46":0,"48":0,"49":0,"53":0,"70":0,"71":0,"72":0,"85":0,"87":0,"88":0,"90":0,"93":0,"94":0,"97":0,"98":0,"99":0,"101":0,"102":0,"103":0,"105":0,"107":0,"108":0,"110":0,"111":0,"114":0,"115":0,"118":0,"122":0,"125":0,"127":0,"128":0,"133":0,"134":0,"137":0,"141":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/glob-util.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/glob-util.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1},"b":{"1":[0,0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"processPath","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":30}}},"2":{"name":"(anonymous_2)","line":63,"loc":{"start":{"line":63,"column":11},"end":{"line":63,"column":30}}},"3":{"name":"resolveFileGlobPatterns","line":85,"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":52}}},"4":{"name":"listFilesToProcess","line":104,"loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":51}}},"5":{"name":"addFile","line":120,"loc":{"start":{"line":120,"column":4},"end":{"line":120,"column":64}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":17,"column":47}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":51}},"3":{"start":{"line":42,"column":0},"end":{"line":73,"column":1}},"4":{"start":{"line":43,"column":4},"end":{"line":43,"column":58}},"5":{"start":{"line":44,"column":4},"end":{"line":44,"column":64}},"6":{"start":{"line":46,"column":4},"end":{"line":46,"column":63}},"7":{"start":{"line":46,"column":39},"end":{"line":46,"column":61}},"8":{"start":{"line":48,"column":4},"end":{"line":48,"column":23}},"9":{"start":{"line":50,"column":4},"end":{"line":54,"column":5}},"10":{"start":{"line":51,"column":8},"end":{"line":51,"column":40}},"11":{"start":{"line":53,"column":8},"end":{"line":53,"column":49}},"12":{"start":{"line":63,"column":4},"end":{"line":72,"column":6}},"13":{"start":{"line":64,"column":8},"end":{"line":64,"column":31}},"14":{"start":{"line":65,"column":8},"end":{"line":65,"column":57}},"15":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"16":{"start":{"line":68,"column":12},"end":{"line":68,"column":62}},"17":{"start":{"line":71,"column":8},"end":{"line":71,"column":52}},"18":{"start":{"line":85,"column":0},"end":{"line":90,"column":1}},"19":{"start":{"line":87,"column":4},"end":{"line":87,"column":55}},"20":{"start":{"line":89,"column":4},"end":{"line":89,"column":69}},"21":{"start":{"line":89,"column":32},"end":{"line":89,"column":40}},"22":{"start":{"line":104,"column":0},"end":{"line":178,"column":1}},"23":{"start":{"line":105,"column":4},"end":{"line":105,"column":42}},"24":{"start":{"line":106,"column":4},"end":{"line":107,"column":19}},"25":{"start":{"line":109,"column":4},"end":{"line":109,"column":58}},"26":{"start":{"line":120,"column":4},"end":{"line":148,"column":5}},"27":{"start":{"line":121,"column":8},"end":{"line":121,"column":28}},"28":{"start":{"line":122,"column":8},"end":{"line":122,"column":30}},"29":{"start":{"line":124,"column":8},"end":{"line":127,"column":9}},"30":{"start":{"line":125,"column":12},"end":{"line":125,"column":70}},"31":{"start":{"line":126,"column":12},"end":{"line":126,"column":51}},"32":{"start":{"line":129,"column":8},"end":{"line":137,"column":9}},"33":{"start":{"line":130,"column":12},"end":{"line":136,"column":13}},"34":{"start":{"line":131,"column":16},"end":{"line":135,"column":17}},"35":{"start":{"line":132,"column":20},"end":{"line":132,"column":35}},"36":{"start":{"line":134,"column":20},"end":{"line":134,"column":45}},"37":{"start":{"line":139,"column":8},"end":{"line":141,"column":9}},"38":{"start":{"line":140,"column":12},"end":{"line":140,"column":19}},"39":{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},"40":{"start":{"line":144,"column":12},"end":{"line":144,"column":19}},"41":{"start":{"line":146,"column":8},"end":{"line":146,"column":42}},"42":{"start":{"line":147,"column":8},"end":{"line":147,"column":31}},"43":{"start":{"line":150,"column":4},"end":{"line":150,"column":48}},"44":{"start":{"line":151,"column":4},"end":{"line":175,"column":7}},"45":{"start":{"line":152,"column":8},"end":{"line":152,"column":48}},"46":{"start":{"line":154,"column":8},"end":{"line":174,"column":9}},"47":{"start":{"line":155,"column":12},"end":{"line":155,"column":59}},"48":{"start":{"line":157,"column":12},"end":{"line":157,"column":82}},"49":{"start":{"line":161,"column":12},"end":{"line":161,"column":90}},"50":{"start":{"line":163,"column":12},"end":{"line":163,"column":134}},"51":{"start":{"line":164,"column":12},"end":{"line":164,"column":77}},"52":{"start":{"line":165,"column":12},"end":{"line":169,"column":14}},"53":{"start":{"line":171,"column":12},"end":{"line":173,"column":15}},"54":{"start":{"line":172,"column":16},"end":{"line":172,"column":75}},"55":{"start":{"line":177,"column":4},"end":{"line":177,"column":17}},"56":{"start":{"line":180,"column":0},"end":{"line":183,"column":2}}},"branchMap":{"1":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":17},"end":{"line":43,"column":24}},{"start":{"line":43,"column":28},"end":{"line":43,"column":39}},{"start":{"line":43,"column":44},"end":{"line":43,"column":57}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":22},"end":{"line":44,"column":29}},{"start":{"line":44,"column":33},"end":{"line":44,"column":51}},{"start":{"line":44,"column":56},"end":{"line":44,"column":63}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"5":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":14},"end":{"line":105,"column":21}},{"start":{"line":105,"column":25},"end":{"line":105,"column":41}}]},"6":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":17},"end":{"line":109,"column":24}},{"start":{"line":109,"column":28},"end":{"line":109,"column":39}},{"start":{"line":109,"column":44},"end":{"line":109,"column":57}}]},"7":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":8},"end":{"line":124,"column":8}},{"start":{"line":124,"column":8},"end":{"line":124,"column":8}}]},"8":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":23},"end":{"line":125,"column":47}},{"start":{"line":125,"column":52},"end":{"line":125,"column":69}}]},"9":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":8},"end":{"line":129,"column":8}},{"start":{"line":129,"column":8},"end":{"line":129,"column":8}}]},"10":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":130,"column":12}},{"start":{"line":130,"column":12},"end":{"line":130,"column":12}}]},"11":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":16},"end":{"line":131,"column":16}},{"start":{"line":131,"column":16},"end":{"line":131,"column":16}}]},"12":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":8},"end":{"line":139,"column":8}},{"start":{"line":139,"column":8},"end":{"line":139,"column":8}}]},"13":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":12},"end":{"line":139,"column":29}},{"start":{"line":139,"column":33},"end":{"line":139,"column":41}}]},"14":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"15":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":8},"end":{"line":154,"column":8}},{"start":{"line":154,"column":8},"end":{"line":154,"column":8}}]},"16":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":89},"end":{"line":163,"column":105}},{"start":{"line":163,"column":109},"end":{"line":163,"column":129}}]}},"code":["/**"," * @fileoverview Utilities for working with globs and the filesystem."," * @author Ian VanSchooten"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const fs = require(\"fs\"),","    path = require(\"path\"),","    GlobSync = require(\"./glob\"),","    shell = require(\"shelljs\"),","","    pathUtil = require(\"./path-util\"),","    IgnoredPaths = require(\"../ignored-paths\");","","const debug = require(\"debug\")(\"eslint:glob-util\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","/**"," * Checks if a provided path is a directory and returns a glob string matching"," * all files under that directory if so, the path itself otherwise."," *"," * Reason for this is that `glob` needs `/**` to collect all the files under a"," * directory where as our previous implementation without `glob` simply walked"," * a directory that is passed. So this is to maintain backwards compatibility."," *"," * Also makes sure all path separators are POSIX style for `glob` compatibility."," *"," * @param {Object}   [options]                    An options object"," * @param {string[]} [options.extensions=[\".js\"]] An array of accepted extensions"," * @param {string}   [options.cwd=process.cwd()]  The cwd to use to resolve relative pathnames"," * @returns {Function} A function that takes a pathname and returns a glob that"," *                     matches all files with the provided extensions if"," *                     pathname is a directory."," */","function processPath(options) {","    const cwd = (options && options.cwd) || process.cwd();","    let extensions = (options && options.extensions) || [\".js\"];","","    extensions = extensions.map(ext => ext.replace(/^\\./, \"\"));","","    let suffix = \"/**\";","","    if (extensions.length === 1) {","        suffix += `/*.${extensions[0]}`;","    } else {","        suffix += `/*.{${extensions.join(\",\")}}`;","    }","","    /**","     * A function that converts a directory name to a glob pattern","     *","     * @param {string} pathname The directory path to be modified","     * @returns {string} The glob path or the file path itself","     * @private","     */","    return function(pathname) {","        let newPath = pathname;","        const resolvedPath = path.resolve(cwd, pathname);","","        if (shell.test(\"-d\", resolvedPath)) {","            newPath = pathname.replace(/[/\\\\]$/, \"\") + suffix;","        }","","        return pathUtil.convertPathToPosix(newPath);","    };","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Resolves any directory patterns into glob-based patterns for easier handling."," * @param   {string[]} patterns    File patterns (such as passed on the command line)."," * @param   {Object} options       An options object."," * @returns {string[]} The equivalent glob patterns and filepath strings."," */","function resolveFileGlobPatterns(patterns, options) {","","    const processPathExtensions = processPath(options);","","    return patterns.filter(p => p.length).map(processPathExtensions);","}","","/**"," * Build a list of absolute filesnames on which ESLint will act."," * Ignored files are excluded from the results, as are duplicates."," *"," * @param   {string[]} globPatterns            Glob patterns."," * @param   {Object}   [options]               An options object."," * @param   {string}   [options.cwd]           CWD (considered for relative filenames)"," * @param   {boolean}  [options.ignore]        False disables use of .eslintignore."," * @param   {string}   [options.ignorePath]    The ignore file to use instead of .eslintignore."," * @param   {string}   [options.ignorePattern] A pattern of files to ignore."," * @returns {string[]} Resolved absolute filenames."," */","function listFilesToProcess(globPatterns, options) {","    options = options || { ignore: true };","    const files = [],","        added = {};","","    const cwd = (options && options.cwd) || process.cwd();","","    /**","     * Executes the linter on a file defined by the `filename`. Skips","     * unsupported file extensions and any files that are already linted.","     * @param {string} filename The file to be processed","     * @param {boolean} shouldWarnIgnored Whether or not a report should be made if","     *                                    the file is ignored","     * @param {IgnoredPaths} ignoredPaths An instance of IgnoredPaths","     * @returns {void}","     */","    function addFile(filename, shouldWarnIgnored, ignoredPaths) {","        let ignored = false;","        let isSilentlyIgnored;","","        if (ignoredPaths.contains(filename, \"default\")) {","            ignored = (options.ignore !== false) && shouldWarnIgnored;","            isSilentlyIgnored = !shouldWarnIgnored;","        }","","        if (options.ignore !== false) {","            if (ignoredPaths.contains(filename, \"custom\")) {","                if (shouldWarnIgnored) {","                    ignored = true;","                } else {","                    isSilentlyIgnored = true;","                }","            }","        }","","        if (isSilentlyIgnored && !ignored) {","            return;","        }","","        if (added[filename]) {","            return;","        }","        files.push({ filename, ignored });","        added[filename] = true;","    }","","    debug(\"Creating list of files to process.\");","    globPatterns.forEach(pattern => {","        const file = path.resolve(cwd, pattern);","","        if (shell.test(\"-f\", file)) {","            const ignoredPaths = new IgnoredPaths(options);","","            addFile(fs.realpathSync(file), !shell.test(\"-d\", file), ignoredPaths);","        } else {","","            // regex to find .hidden or /.hidden patterns, but not ./relative or ../relative","            const globIncludesDotfiles = /(?:(?:^\\.)|(?:[/\\\\]\\.))[^/\\\\.].*/.test(pattern);","","            const ignoredPaths = new IgnoredPaths(Object.assign({}, options, { dotfiles: options.dotfiles || globIncludesDotfiles }));","            const shouldIgnore = ignoredPaths.getIgnoredFoldersGlobChecker();","            const globOptions = {","                nodir: true,","                dot: true,","                cwd","            };","","            new GlobSync(pattern, globOptions, shouldIgnore).found.forEach(globMatch => {","                addFile(path.resolve(cwd, globMatch), false, ignoredPaths);","            });","        }","    });","","    return files;","}","","module.exports = {","    resolveFileGlobPatterns,","    listFilesToProcess","};",""],"l":{"11":1,"19":1,"42":1,"43":0,"44":0,"46":0,"48":0,"50":0,"51":0,"53":0,"63":0,"64":0,"65":0,"67":0,"68":0,"71":0,"85":1,"87":0,"89":0,"104":1,"105":0,"106":0,"109":0,"120":1,"121":0,"122":0,"124":0,"125":0,"126":0,"129":0,"130":0,"131":0,"132":0,"134":0,"139":0,"140":0,"143":0,"144":0,"146":0,"147":0,"150":0,"151":0,"152":0,"154":0,"155":0,"157":0,"161":0,"163":0,"164":0,"165":0,"171":0,"172":0,"177":0,"180":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/glob.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/glob.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"GlobSync","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":50}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":30},"end":{"line":44,"column":56}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":12,"column":27}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}},"3":{"start":{"line":27,"column":0},"end":{"line":38,"column":1}},"4":{"start":{"line":35,"column":4},"end":{"line":35,"column":32}},"5":{"start":{"line":37,"column":4},"end":{"line":37,"column":38}},"6":{"start":{"line":40,"column":0},"end":{"line":40,"column":30}},"7":{"start":{"line":44,"column":0},"end":{"line":60,"column":2}},"8":{"start":{"line":53,"column":4},"end":{"line":53,"column":35}},"9":{"start":{"line":55,"column":4},"end":{"line":57,"column":5}},"10":{"start":{"line":56,"column":8},"end":{"line":56,"column":20}},"11":{"start":{"line":59,"column":4},"end":{"line":59,"column":63}},"12":{"start":{"line":63,"column":0},"end":{"line":63,"column":26}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]}},"code":["/**"," * @fileoverview An inherited `glob.GlobSync` to support .gitignore patterns."," * @author Kael Zhang"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const Sync = require(\"glob\").GlobSync,","    util = require(\"util\");","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","const IGNORE = Symbol(\"ignore\");","","/**"," * Subclass of `glob.GlobSync`"," * @param {string}     pattern      Pattern to be matched."," * @param {Object}     options      `options` for `glob`"," * @param {function()} shouldIgnore Method to check whether a directory should be ignored."," * @constructor"," */","function GlobSync(pattern, options, shouldIgnore) {","","    /**","     * We don't put this thing to argument `options` to avoid","     * further problems, such as `options` validation.","     *","     * Use `Symbol` as much as possible to avoid confliction.","     */","    this[IGNORE] = shouldIgnore;","","    Sync.call(this, pattern, options);","}","","util.inherits(GlobSync, Sync);","","/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_readdir\", \"_mark\"] }] */","","GlobSync.prototype._readdir = function(abs, inGlobStar) {","","    /**","     * `options.nodir` makes `options.mark` as `true`.","     * Mark `abs` first","     * to make sure `\"node_modules\"` will be ignored immediately with ignore pattern `\"node_modules/\"`.","","     * There is a built-in cache about marked `File.Stat` in `glob`, so that we could not worry about the extra invocation of `this._mark()`","     */","    const marked = this._mark(abs);","","    if (this[IGNORE](marked)) {","        return null;","    }","","    return Sync.prototype._readdir.call(this, abs, inGlobStar);","};","","","module.exports = GlobSync;",""],"l":{"11":1,"18":1,"27":1,"35":0,"37":0,"40":1,"44":1,"53":0,"55":0,"56":0,"59":0,"63":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/source-code-fixer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/source-code-fixer.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"compareMessagesByFixRange","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":41}}},"2":{"name":"compareMessagesByLocation","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":41}}},"3":{"name":"SourceCodeFixer","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":27}}},"4":{"name":"(anonymous_4)","line":60,"loc":{"start":{"line":60,"column":29},"end":{"line":60,"column":60}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":52}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":21}},"3":{"start":{"line":26,"column":0},"end":{"line":28,"column":1}},"4":{"start":{"line":27,"column":4},"end":{"line":27,"column":78}},"5":{"start":{"line":37,"column":0},"end":{"line":39,"column":1}},"6":{"start":{"line":38,"column":4},"end":{"line":38,"column":50}},"7":{"start":{"line":49,"column":0},"end":{"line":51,"column":1}},"8":{"start":{"line":50,"column":4},"end":{"line":50,"column":24}},"9":{"start":{"line":60,"column":0},"end":{"line":129,"column":2}},"10":{"start":{"line":62,"column":4},"end":{"line":62,"column":28}},"11":{"start":{"line":64,"column":4},"end":{"line":71,"column":5}},"12":{"start":{"line":65,"column":8},"end":{"line":65,"column":39}},"13":{"start":{"line":66,"column":8},"end":{"line":70,"column":10}},"14":{"start":{"line":74,"column":4},"end":{"line":77,"column":31}},"15":{"start":{"line":78,"column":4},"end":{"line":79,"column":21}},"16":{"start":{"line":81,"column":4},"end":{"line":87,"column":7}},"17":{"start":{"line":82,"column":8},"end":{"line":86,"column":9}},"18":{"start":{"line":83,"column":12},"end":{"line":83,"column":32}},"19":{"start":{"line":85,"column":12},"end":{"line":85,"column":44}},"20":{"start":{"line":89,"column":4},"end":{"line":120,"column":5}},"21":{"start":{"line":90,"column":8},"end":{"line":90,"column":38}},"22":{"start":{"line":92,"column":8},"end":{"line":112,"column":9}},"23":{"start":{"line":93,"column":12},"end":{"line":93,"column":36}},"24":{"start":{"line":94,"column":12},"end":{"line":94,"column":39}},"25":{"start":{"line":95,"column":12},"end":{"line":95,"column":37}},"26":{"start":{"line":98,"column":12},"end":{"line":101,"column":13}},"27":{"start":{"line":99,"column":16},"end":{"line":99,"column":48}},"28":{"start":{"line":100,"column":16},"end":{"line":100,"column":25}},"29":{"start":{"line":104,"column":12},"end":{"line":106,"column":13}},"30":{"start":{"line":105,"column":16},"end":{"line":105,"column":28}},"31":{"start":{"line":109,"column":12},"end":{"line":109,"column":75}},"32":{"start":{"line":110,"column":12},"end":{"line":110,"column":31}},"33":{"start":{"line":111,"column":12},"end":{"line":111,"column":26}},"34":{"start":{"line":113,"column":8},"end":{"line":113,"column":51}},"35":{"start":{"line":115,"column":8},"end":{"line":119,"column":10}},"36":{"start":{"line":122,"column":4},"end":{"line":122,"column":31}},"37":{"start":{"line":123,"column":4},"end":{"line":127,"column":6}},"38":{"start":{"line":131,"column":0},"end":{"line":131,"column":33}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":11},"end":{"line":27,"column":42}},{"start":{"line":27,"column":46},"end":{"line":27,"column":77}}]},"2":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":11},"end":{"line":38,"column":26}},{"start":{"line":38,"column":30},"end":{"line":38,"column":49}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"4":{"line":76,"type":"cond-expr","locations":[{"start":{"line":76,"column":35},"end":{"line":76,"column":38}},{"start":{"line":76,"column":41},"end":{"line":76,"column":43}}]},"5":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"7":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":12},"end":{"line":98,"column":12}},{"start":{"line":98,"column":12},"end":{"line":98,"column":12}}]},"8":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":32}},{"start":{"line":98,"column":36},"end":{"line":98,"column":47}}]},"9":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":104,"column":12}},{"start":{"line":104,"column":12},"end":{"line":104,"column":12}}]},"10":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":17},"end":{"line":104,"column":26}},{"start":{"line":104,"column":30},"end":{"line":104,"column":38}},{"start":{"line":104,"column":44},"end":{"line":104,"column":55}},{"start":{"line":104,"column":59},"end":{"line":104,"column":83}}]}},"code":["/**"," * @fileoverview An object that caches and applies source code fixes."," * @author Nicholas C. Zakas"," */","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const debug = require(\"debug\")(\"eslint:text-fixer\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","const BOM = \"\\uFEFF\";","","/**"," * Compares items in a messages array by range."," * @param {Message} a The first message."," * @param {Message} b The second message."," * @returns {int} -1 if a comes before b, 1 if a comes after b, 0 if equal."," * @private"," */","function compareMessagesByFixRange(a, b) {","    return a.fix.range[0] - b.fix.range[0] || a.fix.range[1] - b.fix.range[1];","}","","/**"," * Compares items in a messages array by line and column."," * @param {Message} a The first message."," * @param {Message} b The second message."," * @returns {int} -1 if a comes before b, 1 if a comes after b, 0 if equal."," * @private"," */","function compareMessagesByLocation(a, b) {","    return a.line - b.line || a.column - b.column;","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Utility for apply fixes to source code."," * @constructor"," */","function SourceCodeFixer() {","    Object.freeze(this);","}","","/**"," * Applies the fixes specified by the messages to the given text. Tries to be"," * smart about the fixes and won't apply fixes over the same area in the text."," * @param {SourceCode} sourceCode The source code to apply the changes to."," * @param {Message[]} messages The array of messages reported by ESLint."," * @returns {Object} An object containing the fixed text and any unfixed messages."," */","SourceCodeFixer.applyFixes = function(sourceCode, messages) {","","    debug(\"Applying fixes\");","","    if (!sourceCode) {","        debug(\"No source code to fix\");","        return {","            fixed: false,","            messages,","            output: \"\"","        };","    }","","    // clone the array","    const remainingMessages = [],","        fixes = [],","        bom = (sourceCode.hasBOM ? BOM : \"\"),","        text = sourceCode.text;","    let lastPos = Number.NEGATIVE_INFINITY,","        output = bom;","","    messages.forEach(problem => {","        if (problem.hasOwnProperty(\"fix\")) {","            fixes.push(problem);","        } else {","            remainingMessages.push(problem);","        }","    });","","    if (fixes.length) {","        debug(\"Found fixes to apply\");","","        for (const problem of fixes.sort(compareMessagesByFixRange)) {","            const fix = problem.fix;","            const start = fix.range[0];","            const end = fix.range[1];","","            // Remain it as a problem if it's overlapped or it's a negative range","            if (lastPos >= start || start > end) {","                remainingMessages.push(problem);","                continue;","            }","","            // Remove BOM.","            if ((start < 0 && end >= 0) || (start === 0 && fix.text.startsWith(BOM))) {","                output = \"\";","            }","","            // Make output to this fix.","            output += text.slice(Math.max(0, lastPos), Math.max(0, start));","            output += fix.text;","            lastPos = end;","        }","        output += text.slice(Math.max(0, lastPos));","","        return {","            fixed: true,","            messages: remainingMessages.sort(compareMessagesByLocation),","            output","        };","    }","","    debug(\"No fixes to apply\");","    return {","        fixed: false,","        messages,","        output: bom + text","    };","","};","","module.exports = SourceCodeFixer;",""],"l":{"11":1,"17":1,"26":1,"27":0,"37":1,"38":0,"49":1,"50":0,"60":1,"62":0,"64":0,"65":0,"66":0,"74":0,"78":0,"81":0,"82":0,"83":0,"85":0,"89":0,"90":0,"92":0,"93":0,"94":0,"95":0,"98":0,"99":0,"100":0,"104":0,"105":0,"109":0,"110":0,"111":0,"113":0,"115":0,"122":0,"123":0,"131":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/hash.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/util/hash.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"hash","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":19}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":38}},"2":{"start":{"line":27,"column":0},"end":{"line":29,"column":1}},"3":{"start":{"line":28,"column":4},"end":{"line":28,"column":45}},"4":{"start":{"line":35,"column":0},"end":{"line":35,"column":22}}},"branchMap":{},"code":["/**"," * @fileoverview Defining the hashing function in one place."," * @author Michael Ficarra"," */","","\"use strict\";","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const murmur = require(\"imurmurhash\");","","//------------------------------------------------------------------------------","// Helpers","//------------------------------------------------------------------------------","","//------------------------------------------------------------------------------","// Private","//------------------------------------------------------------------------------","","/**"," * hash the given string"," * @param  {string} str the string to hash"," * @returns {string}    the hash"," */","function hash(str) {","    return murmur(str).result().toString(36);","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","module.exports = hash;",""],"l":{"12":1,"27":1,"28":0,"35":1}},"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/testers/rule-tester.js":{"path":"/home/travis/build/npmtest/node-npmtest-eslint/eslint/lib/testers/rule-tester.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":1,"36":0,"37":1,"38":1,"39":1,"40":1,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":1,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":1,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"cloneDeeplyExcludesParent","line":87,"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":38}}},"2":{"name":"freezeDeeply","line":113,"loc":{"start":{"line":113,"column":0},"end":{"line":113,"column":25}}},"3":{"name":"RuleTester","line":137,"loc":{"start":{"line":137,"column":0},"end":{"line":137,"column":34}}},"4":{"name":"(anonymous_4)","line":163,"loc":{"start":{"line":163,"column":30},"end":{"line":163,"column":47}}},"5":{"name":"(anonymous_5)","line":177,"loc":{"start":{"line":177,"column":30},"end":{"line":177,"column":41}}},"6":{"name":"(anonymous_6)","line":186,"loc":{"start":{"line":186,"column":32},"end":{"line":186,"column":43}}},"7":{"name":"defaultHandler","line":203,"loc":{"start":{"line":203,"column":0},"end":{"line":203,"column":38}}},"8":{"name":"(anonymous_8)","line":212,"loc":{"start":{"line":212,"column":11},"end":{"line":212,"column":14}}},"9":{"name":"(anonymous_9)","line":218,"loc":{"start":{"line":218,"column":11},"end":{"line":218,"column":19}}},"10":{"name":"(anonymous_10)","line":225,"loc":{"start":{"line":225,"column":11},"end":{"line":225,"column":14}}},"11":{"name":"(anonymous_11)","line":231,"loc":{"start":{"line":231,"column":11},"end":{"line":231,"column":19}}},"12":{"name":"(anonymous_12)","line":247,"loc":{"start":{"line":247,"column":14},"end":{"line":247,"column":27}}},"13":{"name":"(anonymous_13)","line":258,"loc":{"start":{"line":258,"column":7},"end":{"line":258,"column":30}}},"14":{"name":"runRuleForItem","line":290,"loc":{"start":{"line":290,"column":8},"end":{"line":290,"column":48}}},"15":{"name":"(anonymous_15)","line":359,"loc":{"start":{"line":359,"column":28},"end":{"line":359,"column":45}}},"16":{"name":"(anonymous_16)","line":363,"loc":{"start":{"line":363,"column":31},"end":{"line":363,"column":49}}},"17":{"name":"(anonymous_17)","line":374,"loc":{"start":{"line":374,"column":30},"end":{"line":374,"column":40}}},"18":{"name":"assertASTDidntChange","line":403,"loc":{"start":{"line":403,"column":8},"end":{"line":403,"column":59}}},"19":{"name":"testValidTemplate","line":419,"loc":{"start":{"line":419,"column":8},"end":{"line":419,"column":51}}},"20":{"name":"assertMessageMatches","line":438,"loc":{"start":{"line":438,"column":8},"end":{"line":438,"column":56}}},"21":{"name":"testInvalidTemplate","line":459,"loc":{"start":{"line":459,"column":8},"end":{"line":459,"column":53}}}},"statementMap":{"1":{"start":{"line":43,"column":0},"end":{"line":51,"column":59}},"2":{"start":{"line":61,"column":0},"end":{"line":61,"column":42}},"3":{"start":{"line":62,"column":0},"end":{"line":62,"column":34}},"4":{"start":{"line":68,"column":0},"end":{"line":74,"column":2}},"5":{"start":{"line":76,"column":0},"end":{"line":76,"column":63}},"6":{"start":{"line":78,"column":0},"end":{"line":78,"column":65}},"7":{"start":{"line":87,"column":0},"end":{"line":105,"column":1}},"8":{"start":{"line":88,"column":4},"end":{"line":102,"column":5}},"9":{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},"10":{"start":{"line":90,"column":12},"end":{"line":90,"column":52}},"11":{"start":{"line":93,"column":8},"end":{"line":93,"column":24}},"12":{"start":{"line":95,"column":8},"end":{"line":99,"column":9}},"13":{"start":{"line":96,"column":12},"end":{"line":98,"column":13}},"14":{"start":{"line":97,"column":16},"end":{"line":97,"column":62}},"15":{"start":{"line":101,"column":8},"end":{"line":101,"column":20}},"16":{"start":{"line":104,"column":4},"end":{"line":104,"column":13}},"17":{"start":{"line":113,"column":0},"end":{"line":126,"column":1}},"18":{"start":{"line":114,"column":4},"end":{"line":125,"column":5}},"19":{"start":{"line":115,"column":8},"end":{"line":123,"column":9}},"20":{"start":{"line":116,"column":12},"end":{"line":116,"column":36}},"21":{"start":{"line":118,"column":12},"end":{"line":122,"column":13}},"22":{"start":{"line":119,"column":16},"end":{"line":121,"column":17}},"23":{"start":{"line":120,"column":20},"end":{"line":120,"column":41}},"24":{"start":{"line":124,"column":8},"end":{"line":124,"column":25}},"25":{"start":{"line":137,"column":0},"end":{"line":156,"column":1}},"26":{"start":{"line":144,"column":4},"end":{"line":149,"column":6}},"27":{"start":{"line":155,"column":4},"end":{"line":155,"column":20}},"28":{"start":{"line":163,"column":0},"end":{"line":171,"column":2}},"29":{"start":{"line":164,"column":4},"end":{"line":166,"column":5}},"30":{"start":{"line":165,"column":8},"end":{"line":165,"column":81}},"31":{"start":{"line":167,"column":4},"end":{"line":167,"column":27}},"32":{"start":{"line":170,"column":4},"end":{"line":170,"column":52}},"33":{"start":{"line":177,"column":0},"end":{"line":179,"column":2}},"34":{"start":{"line":178,"column":4},"end":{"line":178,"column":25}},"35":{"start":{"line":186,"column":0},"end":{"line":188,"column":2}},"36":{"start":{"line":187,"column":4},"end":{"line":187,"column":58}},"37":{"start":{"line":191,"column":0},"end":{"line":191,"column":36}},"38":{"start":{"line":192,"column":0},"end":{"line":192,"column":24}},"39":{"start":{"line":194,"column":0},"end":{"line":194,"column":45}},"40":{"start":{"line":203,"column":0},"end":{"line":205,"column":1}},"41":{"start":{"line":204,"column":4},"end":{"line":204,"column":30}},"42":{"start":{"line":210,"column":0},"end":{"line":237,"column":3}},"43":{"start":{"line":213,"column":12},"end":{"line":216,"column":14}},"44":{"start":{"line":219,"column":12},"end":{"line":219,"column":41}},"45":{"start":{"line":226,"column":12},"end":{"line":229,"column":14}},"46":{"start":{"line":232,"column":12},"end":{"line":232,"column":35}},"47":{"start":{"line":239,"column":0},"end":{"line":565,"column":2}},"48":{"start":{"line":248,"column":8},"end":{"line":248,"column":32}},"49":{"start":{"line":260,"column":8},"end":{"line":263,"column":24}},"50":{"start":{"line":265,"column":8},"end":{"line":267,"column":9}},"51":{"start":{"line":266,"column":12},"end":{"line":266,"column":105}},"52":{"start":{"line":269,"column":8},"end":{"line":273,"column":11}},"53":{"start":{"line":270,"column":12},"end":{"line":272,"column":13}},"54":{"start":{"line":271,"column":16},"end":{"line":271,"column":89}},"55":{"start":{"line":275,"column":8},"end":{"line":279,"column":9}},"56":{"start":{"line":276,"column":12},"end":{"line":278,"column":49}},"57":{"start":{"line":290,"column":8},"end":{"line":394,"column":9}},"58":{"start":{"line":291,"column":12},"end":{"line":292,"column":52}},"59":{"start":{"line":294,"column":12},"end":{"line":309,"column":13}},"60":{"start":{"line":295,"column":16},"end":{"line":295,"column":28}},"61":{"start":{"line":297,"column":16},"end":{"line":297,"column":33}},"62":{"start":{"line":301,"column":16},"end":{"line":301,"column":75}},"63":{"start":{"line":305,"column":16},"end":{"line":308,"column":18}},"64":{"start":{"line":311,"column":12},"end":{"line":313,"column":13}},"65":{"start":{"line":312,"column":16},"end":{"line":312,"column":41}},"66":{"start":{"line":315,"column":12},"end":{"line":322,"column":13}},"67":{"start":{"line":316,"column":16},"end":{"line":316,"column":54}},"68":{"start":{"line":318,"column":16},"end":{"line":318,"column":35}},"69":{"start":{"line":319,"column":16},"end":{"line":319,"column":49}},"70":{"start":{"line":321,"column":16},"end":{"line":321,"column":43}},"71":{"start":{"line":324,"column":12},"end":{"line":324,"column":46}},"72":{"start":{"line":326,"column":12},"end":{"line":326,"column":68}},"73":{"start":{"line":328,"column":12},"end":{"line":336,"column":13}},"74":{"start":{"line":329,"column":16},"end":{"line":329,"column":39}},"75":{"start":{"line":331,"column":16},"end":{"line":335,"column":17}},"76":{"start":{"line":332,"column":20},"end":{"line":334,"column":115}},"77":{"start":{"line":334,"column":64},"end":{"line":334,"column":100}},"78":{"start":{"line":338,"column":12},"end":{"line":338,"column":54}},"79":{"start":{"line":345,"column":12},"end":{"line":345,"column":27}},"80":{"start":{"line":347,"column":12},"end":{"line":349,"column":15}},"81":{"start":{"line":348,"column":16},"end":{"line":348,"column":60}},"82":{"start":{"line":351,"column":12},"end":{"line":353,"column":15}},"83":{"start":{"line":352,"column":16},"end":{"line":352,"column":32}},"84":{"start":{"line":356,"column":12},"end":{"line":356,"column":42}},"85":{"start":{"line":358,"column":12},"end":{"line":393,"column":13}},"86":{"start":{"line":359,"column":16},"end":{"line":384,"column":18}},"87":{"start":{"line":360,"column":20},"end":{"line":360,"column":53}},"88":{"start":{"line":362,"column":20},"end":{"line":371,"column":21}},"89":{"start":{"line":363,"column":24},"end":{"line":370,"column":26}},"90":{"start":{"line":364,"column":28},"end":{"line":364,"column":51}},"91":{"start":{"line":365,"column":28},"end":{"line":365,"column":58}},"92":{"start":{"line":366,"column":28},"end":{"line":366,"column":59}},"93":{"start":{"line":367,"column":28},"end":{"line":367,"column":64}},"94":{"start":{"line":369,"column":28},"end":{"line":369,"column":49}},"95":{"start":{"line":372,"column":20},"end":{"line":382,"column":22}},"96":{"start":{"line":375,"column":28},"end":{"line":375,"column":51}},"97":{"start":{"line":376,"column":28},"end":{"line":376,"column":58}},"98":{"start":{"line":377,"column":28},"end":{"line":377,"column":59}},"99":{"start":{"line":378,"column":28},"end":{"line":378,"column":64}},"100":{"start":{"line":380,"column":28},"end":{"line":380,"column":56}},"101":{"start":{"line":386,"column":16},"end":{"line":390,"column":18}},"102":{"start":{"line":392,"column":16},"end":{"line":392,"column":40}},"103":{"start":{"line":403,"column":8},"end":{"line":409,"column":9}},"104":{"start":{"line":404,"column":12},"end":{"line":408,"column":13}},"105":{"start":{"line":407,"column":16},"end":{"line":407,"column":85}},"106":{"start":{"line":419,"column":8},"end":{"line":427,"column":9}},"107":{"start":{"line":420,"column":12},"end":{"line":420,"column":58}},"108":{"start":{"line":421,"column":12},"end":{"line":421,"column":45}},"109":{"start":{"line":423,"column":12},"end":{"line":424,"column":66}},"110":{"start":{"line":426,"column":12},"end":{"line":426,"column":68}},"111":{"start":{"line":438,"column":8},"end":{"line":449,"column":9}},"112":{"start":{"line":439,"column":12},"end":{"line":448,"column":13}},"113":{"start":{"line":442,"column":16},"end":{"line":445,"column":18}},"114":{"start":{"line":447,"column":16},"end":{"line":447,"column":47}},"115":{"start":{"line":459,"column":8},"end":{"line":537,"column":9}},"116":{"start":{"line":460,"column":12},"end":{"line":461,"column":77}},"117":{"start":{"line":463,"column":12},"end":{"line":463,"column":58}},"118":{"start":{"line":464,"column":12},"end":{"line":464,"column":45}},"119":{"start":{"line":468,"column":12},"end":{"line":520,"column":13}},"120":{"start":{"line":469,"column":16},"end":{"line":470,"column":105}},"121":{"start":{"line":472,"column":16},"end":{"line":474,"column":119}},"122":{"start":{"line":476,"column":16},"end":{"line":519,"column":17}},"123":{"start":{"line":477,"column":20},"end":{"line":477,"column":115}},"124":{"start":{"line":478,"column":20},"end":{"line":478,"column":138}},"125":{"start":{"line":480,"column":20},"end":{"line":518,"column":21}},"126":{"start":{"line":483,"column":24},"end":{"line":483,"column":82}},"127":{"start":{"line":484,"column":27},"end":{"line":518,"column":21}},"128":{"start":{"line":491,"column":24},"end":{"line":493,"column":25}},"129":{"start":{"line":492,"column":28},"end":{"line":492,"column":94}},"130":{"start":{"line":495,"column":24},"end":{"line":497,"column":25}},"131":{"start":{"line":496,"column":28},"end":{"line":496,"column":162}},"132":{"start":{"line":499,"column":24},"end":{"line":501,"column":25}},"133":{"start":{"line":500,"column":28},"end":{"line":500,"column":127}},"134":{"start":{"line":503,"column":24},"end":{"line":505,"column":25}},"135":{"start":{"line":504,"column":28},"end":{"line":504,"column":135}},"136":{"start":{"line":507,"column":24},"end":{"line":509,"column":25}},"137":{"start":{"line":508,"column":28},"end":{"line":508,"column":139}},"138":{"start":{"line":511,"column":24},"end":{"line":513,"column":25}},"139":{"start":{"line":512,"column":28},"end":{"line":512,"column":147}},"140":{"start":{"line":517,"column":24},"end":{"line":517,"column":103}},"141":{"start":{"line":522,"column":12},"end":{"line":534,"column":13}},"142":{"start":{"line":523,"column":16},"end":{"line":533,"column":17}},"143":{"start":{"line":524,"column":20},"end":{"line":528,"column":22}},"144":{"start":{"line":525,"column":51},"end":{"line":525,"column":62}},"145":{"start":{"line":530,"column":20},"end":{"line":530,"column":99}},"146":{"start":{"line":532,"column":20},"end":{"line":532,"column":88}},"147":{"start":{"line":536,"column":12},"end":{"line":536,"column":68}},"148":{"start":{"line":543,"column":8},"end":{"line":561,"column":11}},"149":{"start":{"line":544,"column":12},"end":{"line":551,"column":15}},"150":{"start":{"line":545,"column":16},"end":{"line":550,"column":19}},"151":{"start":{"line":546,"column":20},"end":{"line":549,"column":23}},"152":{"start":{"line":547,"column":24},"end":{"line":547,"column":55}},"153":{"start":{"line":548,"column":24},"end":{"line":548,"column":59}},"154":{"start":{"line":553,"column":12},"end":{"line":560,"column":15}},"155":{"start":{"line":554,"column":16},"end":{"line":559,"column":19}},"156":{"start":{"line":555,"column":20},"end":{"line":558,"column":23}},"157":{"start":{"line":556,"column":24},"end":{"line":556,"column":55}},"158":{"start":{"line":557,"column":24},"end":{"line":557,"column":63}},"159":{"start":{"line":563,"column":8},"end":{"line":563,"column":28}},"160":{"start":{"line":568,"column":0},"end":{"line":568,"column":28}}},"branchMap":{"1":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"2":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":29}},{"start":{"line":88,"column":33},"end":{"line":88,"column":43}}]},"3":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":8}},{"start":{"line":89,"column":8},"end":{"line":89,"column":8}}]},"4":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":12},"end":{"line":96,"column":12}},{"start":{"line":96,"column":12},"end":{"line":96,"column":12}}]},"5":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":16},"end":{"line":96,"column":32}},{"start":{"line":96,"column":36},"end":{"line":96,"column":58}}]},"6":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":114,"column":4}},{"start":{"line":114,"column":4},"end":{"line":114,"column":4}}]},"7":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":8},"end":{"line":114,"column":29}},{"start":{"line":114,"column":33},"end":{"line":114,"column":43}}]},"8":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"9":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":16},"end":{"line":119,"column":16}},{"start":{"line":119,"column":16},"end":{"line":119,"column":16}}]},"10":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":20},"end":{"line":119,"column":36}},{"start":{"line":119,"column":40},"end":{"line":119,"column":62}}]},"11":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"12":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":26},"end":{"line":170,"column":45}},{"start":{"line":170,"column":49},"end":{"line":170,"column":51}}]},"13":{"line":214,"type":"binary-expr","locations":[{"start":{"line":214,"column":16},"end":{"line":214,"column":36}},{"start":{"line":215,"column":17},"end":{"line":215,"column":75}}]},"14":{"line":215,"type":"cond-expr","locations":[{"start":{"line":215,"column":50},"end":{"line":215,"column":58}},{"start":{"line":215,"column":61},"end":{"line":215,"column":75}}]},"15":{"line":227,"type":"binary-expr","locations":[{"start":{"line":227,"column":16},"end":{"line":227,"column":30}},{"start":{"line":228,"column":17},"end":{"line":228,"column":63}}]},"16":{"line":228,"type":"cond-expr","locations":[{"start":{"line":228,"column":44},"end":{"line":228,"column":46}},{"start":{"line":228,"column":49},"end":{"line":228,"column":63}}]},"17":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":8},"end":{"line":265,"column":8}},{"start":{"line":265,"column":8},"end":{"line":265,"column":8}}]},"18":{"line":265,"type":"binary-expr","locations":[{"start":{"line":265,"column":12},"end":{"line":265,"column":30}},{"start":{"line":265,"column":34},"end":{"line":265,"column":58}}]},"19":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":12},"end":{"line":270,"column":12}},{"start":{"line":270,"column":12},"end":{"line":270,"column":12}}]},"20":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":8},"end":{"line":275,"column":8}},{"start":{"line":275,"column":8},"end":{"line":275,"column":8}}]},"21":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":12},"end":{"line":294,"column":12}},{"start":{"line":294,"column":12},"end":{"line":294,"column":12}}]},"22":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":12},"end":{"line":311,"column":12}},{"start":{"line":311,"column":12},"end":{"line":311,"column":12}}]},"23":{"line":315,"type":"if","locations":[{"start":{"line":315,"column":12},"end":{"line":315,"column":12}},{"start":{"line":315,"column":12},"end":{"line":315,"column":12}}]},"24":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":12},"end":{"line":328,"column":12}},{"start":{"line":328,"column":12},"end":{"line":328,"column":12}}]},"25":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":16},"end":{"line":331,"column":16}},{"start":{"line":331,"column":16},"end":{"line":331,"column":16}}]},"26":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":20},"end":{"line":362,"column":20}},{"start":{"line":362,"column":20},"end":{"line":362,"column":20}}]},"27":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":12},"end":{"line":404,"column":12}},{"start":{"line":404,"column":12},"end":{"line":404,"column":12}}]},"28":{"line":439,"type":"if","locations":[{"start":{"line":439,"column":12},"end":{"line":439,"column":12}},{"start":{"line":439,"column":12},"end":{"line":439,"column":12}}]},"29":{"line":460,"type":"binary-expr","locations":[{"start":{"line":460,"column":22},"end":{"line":460,"column":33}},{"start":{"line":460,"column":37},"end":{"line":460,"column":54}}]},"30":{"line":468,"type":"if","locations":[{"start":{"line":468,"column":12},"end":{"line":468,"column":12}},{"start":{"line":468,"column":12},"end":{"line":468,"column":12}}]},"31":{"line":470,"type":"cond-expr","locations":[{"start":{"line":470,"column":53},"end":{"line":470,"column":55}},{"start":{"line":470,"column":58},"end":{"line":470,"column":61}}]},"32":{"line":474,"type":"cond-expr","locations":[{"start":{"line":474,"column":67},"end":{"line":474,"column":69}},{"start":{"line":474,"column":72},"end":{"line":474,"column":75}}]},"33":{"line":480,"type":"if","locations":[{"start":{"line":480,"column":20},"end":{"line":480,"column":20}},{"start":{"line":480,"column":20},"end":{"line":480,"column":20}}]},"34":{"line":480,"type":"binary-expr","locations":[{"start":{"line":480,"column":24},"end":{"line":480,"column":58}},{"start":{"line":480,"column":62},"end":{"line":480,"column":94}}]},"35":{"line":484,"type":"if","locations":[{"start":{"line":484,"column":27},"end":{"line":484,"column":27}},{"start":{"line":484,"column":27},"end":{"line":484,"column":27}}]},"36":{"line":491,"type":"if","locations":[{"start":{"line":491,"column":24},"end":{"line":491,"column":24}},{"start":{"line":491,"column":24},"end":{"line":491,"column":24}}]},"37":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":24},"end":{"line":495,"column":24}},{"start":{"line":495,"column":24},"end":{"line":495,"column":24}}]},"38":{"line":499,"type":"if","locations":[{"start":{"line":499,"column":24},"end":{"line":499,"column":24}},{"start":{"line":499,"column":24},"end":{"line":499,"column":24}}]},"39":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":24},"end":{"line":503,"column":24}},{"start":{"line":503,"column":24},"end":{"line":503,"column":24}}]},"40":{"line":507,"type":"if","locations":[{"start":{"line":507,"column":24},"end":{"line":507,"column":24}},{"start":{"line":507,"column":24},"end":{"line":507,"column":24}}]},"41":{"line":511,"type":"if","locations":[{"start":{"line":511,"column":24},"end":{"line":511,"column":24}},{"start":{"line":511,"column":24},"end":{"line":511,"column":24}}]},"42":{"line":522,"type":"if","locations":[{"start":{"line":522,"column":12},"end":{"line":522,"column":12}},{"start":{"line":522,"column":12},"end":{"line":522,"column":12}}]},"43":{"line":523,"type":"if","locations":[{"start":{"line":523,"column":16},"end":{"line":523,"column":16}},{"start":{"line":523,"column":16},"end":{"line":523,"column":16}}]},"44":{"line":546,"type":"cond-expr","locations":[{"start":{"line":546,"column":62},"end":{"line":546,"column":72}},{"start":{"line":546,"column":75},"end":{"line":546,"column":80}}]}},"code":["/**"," * @fileoverview Mocha test wrapper"," * @author Ilya Volodin"," */","\"use strict\";","","/* global describe, it */","","/*"," * This is a wrapper around mocha to allow for DRY unittests for eslint"," * Format:"," * RuleTester.add(\"{ruleName}\", {"," *      valid: ["," *          \"{code}\","," *          { code: \"{code}\", options: {options}, global: {globals}, globals: {globals}, parser: \"{parser}\", settings: {settings} }"," *      ],"," *      invalid: ["," *          { code: \"{code}\", errors: {numErrors} },"," *          { code: \"{code}\", errors: [\"{errorMessage}\"] },"," *          { code: \"{code}\", options: {options}, global: {globals}, parser: \"{parser}\", settings: {settings}, errors: [{ message: \"{errorMessage}\", type: \"{errorNodeType}\"}] }"," *      ]"," *  });"," *"," * Variables:"," * {code} - String that represents the code to be tested"," * {options} - Arguments that are passed to the configurable rules."," * {globals} - An object representing a list of variables that are"," *             registered as globals"," * {parser} - String representing the parser to use"," * {settings} - An object representing global settings for all rules"," * {numErrors} - If failing case doesn't need to check error message,"," *               this integer will specify how many errors should be"," *               received"," * {errorMessage} - Message that is returned by the rule on failure"," * {errorNodeType} - AST node type that is returned by they rule as"," *                   a cause of the failure."," */","","//------------------------------------------------------------------------------","// Requirements","//------------------------------------------------------------------------------","","const lodash = require(\"lodash\"),","    assert = require(\"assert\"),","    util = require(\"util\"),","    validator = require(\"../config/config-validator\"),","    validate = require(\"is-my-json-valid\"),","    eslint = require(\"../eslint\"),","    rules = require(\"../rules\"),","    metaSchema = require(\"../../conf/json-schema-schema.json\"),","    SourceCodeFixer = require(\"../util/source-code-fixer\");","","//------------------------------------------------------------------------------","// Private Members","//------------------------------------------------------------------------------","","/*"," * testerDefaultConfig must not be modified as it allows to reset the tester to"," * the initial default configuration"," */","const testerDefaultConfig = { rules: {} };","let defaultConfig = { rules: {} };","","/*"," * List every parameters possible on a test case that are not related to eslint"," * configuration"," */","const RuleTesterParameters = [","    \"code\",","    \"filename\",","    \"options\",","    \"args\",","    \"errors\"","];","","const validateSchema = validate(metaSchema, { verbose: true });","","const hasOwnProperty = Function.call.bind(Object.hasOwnProperty);","","/**"," * Clones a given value deeply."," * Note: This ignores `parent` property."," *"," * @param {any} x - A value to clone."," * @returns {any} A cloned value."," */","function cloneDeeplyExcludesParent(x) {","    if (typeof x === \"object\" && x !== null) {","        if (Array.isArray(x)) {","            return x.map(cloneDeeplyExcludesParent);","        }","","        const retv = {};","","        for (const key in x) {","            if (key !== \"parent\" && hasOwnProperty(x, key)) {","                retv[key] = cloneDeeplyExcludesParent(x[key]);","            }","        }","","        return retv;","    }","","    return x;","}","","/**"," * Freezes a given value deeply."," *"," * @param {any} x - A value to freeze."," * @returns {void}"," */","function freezeDeeply(x) {","    if (typeof x === \"object\" && x !== null) {","        if (Array.isArray(x)) {","            x.forEach(freezeDeeply);","        } else {","            for (const key in x) {","                if (key !== \"parent\" && hasOwnProperty(x, key)) {","                    freezeDeeply(x[key]);","                }","            }","        }","        Object.freeze(x);","    }","}","","//------------------------------------------------------------------------------","// Public Interface","//------------------------------------------------------------------------------","","/**"," * Creates a new instance of RuleTester."," * @param {Object} [testerConfig] Optional, extra configuration for the tester"," * @constructor"," */","function RuleTester(testerConfig) {","","    /**","     * The configuration to use for this tester. Combination of the tester","     * configuration and the default configuration.","     * @type {Object}","     */","    this.testerConfig = lodash.merge(","","        // we have to clone because merge uses the first argument for recipient","        lodash.cloneDeep(defaultConfig),","        testerConfig","    );","","    /**","     * Rule definitions to define before tests.","     * @type {Object}","     */","    this.rules = {};","}","","/**"," * Set the configuration to use for all future tests"," * @param {Object} config the configuration to use."," * @returns {void}"," */","RuleTester.setDefaultConfig = function(config) {","    if (typeof config !== \"object\") {","        throw new Error(\"RuleTester.setDefaultConfig: config must be an object\");","    }","    defaultConfig = config;","","    // Make sure the rules object exists since it is assumed to exist later","    defaultConfig.rules = defaultConfig.rules || {};","};","","/**"," * Get the current configuration used for all tests"," * @returns {Object} the current configuration"," */","RuleTester.getDefaultConfig = function() {","    return defaultConfig;","};","","/**"," * Reset the configuration to the initial configuration of the tester removing"," * any changes made until now."," * @returns {void}"," */","RuleTester.resetDefaultConfig = function() {","    defaultConfig = lodash.cloneDeep(testerDefaultConfig);","};","","// default separators for testing","const DESCRIBE = Symbol(\"describe\");","const IT = Symbol(\"it\");","","RuleTester[DESCRIBE] = RuleTester[IT] = null;","","/**"," * This is `it` or `describe` if those don't exist."," * @this {Mocha}"," * @param {string} text - The description of the test case."," * @param {Function} method - The logic of the test case."," * @returns {any} Returned value of `method`."," */","function defaultHandler(text, method) {","    return method.apply(this);","}","","// If people use `mocha test.js --watch` command, `describe` and `it` function","// instances are different for each execution. So this should get fresh instance","// always.","Object.defineProperties(RuleTester, {","    describe: {","        get() {","            return (","                RuleTester[DESCRIBE] ||","                (typeof describe === \"function\" ? describe : defaultHandler)","            );","        },","        set(value) {","            RuleTester[DESCRIBE] = value;","        },","        configurable: true,","        enumerable: true","    },","    it: {","        get() {","            return (","                RuleTester[IT] ||","                (typeof it === \"function\" ? it : defaultHandler)","            );","        },","        set(value) {","            RuleTester[IT] = value;","        },","        configurable: true,","        enumerable: true","    }","});","","RuleTester.prototype = {","","    /**","     * Define a rule for one particular run of tests.","     * @param {string} name The name of the rule to define.","     * @param {Function} rule The rule definition.","     * @returns {void}","     */","    defineRule(name, rule) {","        this.rules[name] = rule;","    },","","    /**","     * Adds a new rule test to execute.","     * @param {string} ruleName The name of the rule to run.","     * @param {Function} rule The rule to test.","     * @param {Object} test The collection of tests to run.","     * @returns {void}","     */","    run(ruleName, rule, test) {","","        const testerConfig = this.testerConfig,","            requiredScenarios = [\"valid\", \"invalid\"],","            scenarioErrors = [],","            result = {};","","        if (lodash.isNil(test) || typeof test !== \"object\") {","            throw new Error(`Test Scenarios for rule ${ruleName} : Could not find test scenario object`);","        }","","        requiredScenarios.forEach(scenarioType => {","            if (lodash.isNil(test[scenarioType])) {","                scenarioErrors.push(`Could not find any ${scenarioType} test scenarios`);","            }","        });","","        if (scenarioErrors.length > 0) {","            throw new Error([","                `Test Scenarios for rule ${ruleName} is invalid:`","            ].concat(scenarioErrors).join(\"\\n\"));","        }","","        /* eslint-disable no-shadow */","","        /**","         * Run the rule for the given item","         * @param {string} ruleName name of the rule","         * @param {string|Object} item Item to run the rule against","         * @returns {Object} Eslint run result","         * @private","         */","        function runRuleForItem(ruleName, item) {","            let config = lodash.cloneDeep(testerConfig),","                code, filename, beforeAST, afterAST;","","            if (typeof item === \"string\") {","                code = item;","            } else {","                code = item.code;","","                // Assumes everything on the item is a config except for the","                // parameters used by this tester","                const itemConfig = lodash.omit(item, RuleTesterParameters);","","                // Create the config object from the tester config and this item","                // specific configurations.","                config = lodash.merge(","                    config,","                    itemConfig","                );","            }","","            if (item.filename) {","                filename = item.filename;","            }","","            if (item.options) {","                const options = item.options.concat();","","                options.unshift(1);","                config.rules[ruleName] = options;","            } else {","                config.rules[ruleName] = 1;","            }","","            eslint.defineRule(ruleName, rule);","","            const schema = validator.getRuleOptionsSchema(ruleName);","","            if (schema) {","                validateSchema(schema);","","                if (validateSchema.errors) {","                    throw new Error([","                        `Schema for rule ${ruleName} is invalid:`","                    ].concat(validateSchema.errors.map(error => `\\t${error.field}: ${error.message}`)).join(\"\\n\"));","                }","            }","","            validator.validate(config, \"rule-tester\");","","            /*","             * Setup AST getters.","             * The goal is to check whether or not AST was modified when","             * running the rule under test.","             */","            eslint.reset();","","            eslint.on(\"Program\", node => {","                beforeAST = cloneDeeplyExcludesParent(node);","            });","","            eslint.on(\"Program:exit\", node => {","                afterAST = node;","            });","","            // Freezes rule-context properties.","            const originalGet = rules.get;","","            try {","                rules.get = function(ruleId) {","                    const rule = originalGet(ruleId);","","                    if (typeof rule === \"function\") {","                        return function(context) {","                            Object.freeze(context);","                            freezeDeeply(context.options);","                            freezeDeeply(context.settings);","                            freezeDeeply(context.parserOptions);","","                            return rule(context);","                        };","                    }","                    return {","                        meta: rule.meta,","                        create(context) {","                            Object.freeze(context);","                            freezeDeeply(context.options);","                            freezeDeeply(context.settings);","                            freezeDeeply(context.parserOptions);","","                            return rule.create(context);","                        }","                    };","","                };","","                return {","                    messages: eslint.verify(code, config, filename, true),","                    beforeAST,","                    afterAST: cloneDeeplyExcludesParent(afterAST)","                };","            } finally {","                rules.get = originalGet;","            }","        }","","        /**","         * Check if the AST was changed","         * @param {ASTNode} beforeAST AST node before running","         * @param {ASTNode} afterAST AST node after running","         * @returns {void}","         * @private","         */","        function assertASTDidntChange(beforeAST, afterAST) {","            if (!lodash.isEqual(beforeAST, afterAST)) {","","                // Not using directly to avoid performance problem in node 6.1.0. See #6111","                assert.deepEqual(beforeAST, afterAST, \"Rule should not modify AST.\");","            }","        }","","        /**","         * Check if the template is valid or not","         * all valid cases go through this","         * @param {string} ruleName name of the rule","         * @param {string|Object} item Item to run the rule against","         * @returns {void}","         * @private","         */","        function testValidTemplate(ruleName, item) {","            const result = runRuleForItem(ruleName, item);","            const messages = result.messages;","","            assert.equal(messages.length, 0, util.format(\"Should have no errors but had %d: %s\",","                        messages.length, util.inspect(messages)));","","            assertASTDidntChange(result.beforeAST, result.afterAST);","        }","","        /**","         * Asserts that the message matches its expected value. If the expected","         * value is a regular expression, it is checked against the actual","         * value.","         * @param {string} actual Actual value","         * @param {string|RegExp} expected Expected value","         * @returns {void}","         * @private","         */","        function assertMessageMatches(actual, expected) {","            if (expected instanceof RegExp) {","","                // assert.js doesn't have a built-in RegExp match function","                assert.ok(","                    expected.test(actual),","                    `Expected '${actual}' to match ${expected}`","                );","            } else {","                assert.equal(actual, expected);","            }","        }","","        /**","         * Check if the template is invalid or not","         * all invalid cases go through this.","         * @param {string} ruleName name of the rule","         * @param {string|Object} item Item to run the rule against","         * @returns {void}","         * @private","         */","        function testInvalidTemplate(ruleName, item) {","            assert.ok(item.errors || item.errors === 0,","                `Did not specify errors for an invalid test of ${ruleName}`);","","            const result = runRuleForItem(ruleName, item);","            const messages = result.messages;","","","","            if (typeof item.errors === \"number\") {","                assert.equal(messages.length, item.errors, util.format(\"Should have %d error%s but had %d: %s\",","                    item.errors, item.errors === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));","            } else {","                assert.equal(messages.length, item.errors.length,","                    util.format(\"Should have %d error%s but had %d: %s\",","                    item.errors.length, item.errors.length === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));","","                for (let i = 0, l = item.errors.length; i < l; i++) {","                    assert.ok(!(\"fatal\" in messages[i]), `A fatal parsing error occurred: ${messages[i].message}`);","                    assert.equal(messages[i].ruleId, ruleName, \"Error rule name should be the same as the name of the rule being tested\");","","                    if (typeof item.errors[i] === \"string\" || item.errors[i] instanceof RegExp) {","","                        // Just an error message.","                        assertMessageMatches(messages[i].message, item.errors[i]);","                    } else if (typeof item.errors[i] === \"object\") {","","                        /*","                         * Error object.","                         * This may have a message, node type, line, and/or","                         * column.","                         */","                        if (item.errors[i].message) {","                            assertMessageMatches(messages[i].message, item.errors[i].message);","                        }","","                        if (item.errors[i].type) {","                            assert.equal(messages[i].nodeType, item.errors[i].type, `Error type should be ${item.errors[i].type}, found ${messages[i].nodeType}`);","                        }","","                        if (item.errors[i].hasOwnProperty(\"line\")) {","                            assert.equal(messages[i].line, item.errors[i].line, `Error line should be ${item.errors[i].line}`);","                        }","","                        if (item.errors[i].hasOwnProperty(\"column\")) {","                            assert.equal(messages[i].column, item.errors[i].column, `Error column should be ${item.errors[i].column}`);","                        }","","                        if (item.errors[i].hasOwnProperty(\"endLine\")) {","                            assert.equal(messages[i].endLine, item.errors[i].endLine, `Error endLine should be ${item.errors[i].endLine}`);","                        }","","                        if (item.errors[i].hasOwnProperty(\"endColumn\")) {","                            assert.equal(messages[i].endColumn, item.errors[i].endColumn, `Error endColumn should be ${item.errors[i].endColumn}`);","                        }","                    } else {","","                        // Message was an unexpected type","                        assert.fail(messages[i], null, \"Error should be a string, object, or RegExp.\");","                    }","                }","            }","","            if (item.hasOwnProperty(\"output\")) {","                if (item.output === null) {","                    assert.strictEqual(","                        messages.filter(message => message.fix).length,","                        0,","                        \"Expected no autofixes to be suggested\"","                    );","                } else {","                    const fixResult = SourceCodeFixer.applyFixes(eslint.getSourceCode(), messages);","","                    assert.equal(fixResult.output, item.output, \"Output is incorrect.\");","                }","            }","","            assertASTDidntChange(result.beforeAST, result.afterAST);","        }","","        /*","         * This creates a mocha test suite and pipes all supplied info through","         * one of the templates above.","         */","        RuleTester.describe(ruleName, () => {","            RuleTester.describe(\"valid\", () => {","                test.valid.forEach(valid => {","                    RuleTester.it(typeof valid === \"object\" ? valid.code : valid, () => {","                        eslint.defineRules(this.rules);","                        testValidTemplate(ruleName, valid);","                    });","                });","            });","","            RuleTester.describe(\"invalid\", () => {","                test.invalid.forEach(invalid => {","                    RuleTester.it(invalid.code, () => {","                        eslint.defineRules(this.rules);","                        testInvalidTemplate(ruleName, invalid);","                    });","                });","            });","        });","","        return result.suite;","    }","};","","","module.exports = RuleTester;",""],"l":{"43":1,"61":1,"62":1,"68":1,"76":1,"78":1,"87":1,"88":0,"89":0,"90":0,"93":0,"95":0,"96":0,"97":0,"101":0,"104":0,"113":1,"114":0,"115":0,"116":0,"118":0,"119":0,"120":0,"124":0,"137":1,"144":0,"155":0,"163":1,"164":0,"165":0,"167":0,"170":0,"177":1,"178":0,"186":1,"187":0,"191":1,"192":1,"194":1,"203":1,"204":0,"210":1,"213":0,"219":0,"226":0,"232":0,"239":1,"248":0,"260":0,"265":0,"266":0,"269":0,"270":0,"271":0,"275":0,"276":0,"290":1,"291":0,"294":0,"295":0,"297":0,"301":0,"305":0,"311":0,"312":0,"315":0,"316":0,"318":0,"319":0,"321":0,"324":0,"326":0,"328":0,"329":0,"331":0,"332":0,"334":0,"338":0,"345":0,"347":0,"348":0,"351":0,"352":0,"356":0,"358":0,"359":0,"360":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"369":0,"372":0,"375":0,"376":0,"377":0,"378":0,"380":0,"386":0,"392":0,"403":1,"404":0,"407":0,"419":1,"420":0,"421":0,"423":0,"426":0,"438":1,"439":0,"442":0,"447":0,"459":1,"460":0,"463":0,"464":0,"468":0,"469":0,"472":0,"476":0,"477":0,"478":0,"480":0,"483":0,"484":0,"491":0,"492":0,"495":0,"496":0,"499":0,"500":0,"503":0,"504":0,"507":0,"508":0,"511":0,"512":0,"517":0,"522":0,"523":0,"524":0,"525":0,"530":0,"532":0,"536":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"553":0,"554":0,"555":0,"556":0,"557":0,"563":0,"568":1}}}